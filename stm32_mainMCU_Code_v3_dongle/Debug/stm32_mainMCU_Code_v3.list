
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b404  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b8  0801b548  0801b548  0002b548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c800  0801c800  0002c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c808  0801c808  0002c808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c80c  0801c80c  0002c80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d0  20000004  0801c810  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002d4  0801cae0  000302d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000370  0801cb79  00030370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00029ddc  20000388  0801cb8a  00030388  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002a164  0801cb8a  0003a164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00072bc5  00000000  00000000  000303b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000cb27  00000000  00000000  000a2f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000041e8  00000000  00000000  000afaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003c40  00000000  00000000  000b3c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002c025  00000000  00000000  000b78c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0001a11e  00000000  00000000  000e38ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000fda0b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00010f44  00000000  00000000  000fdafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  0010ea40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000388 	.word	0x20000388
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b52c 	.word	0x0801b52c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000038c 	.word	0x2000038c
 800017c:	0801b52c 	.word	0x0801b52c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f005 ff7a 	bl	8006db8 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 fb0d 	bl	80044e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f006 f99a 	bl	8007224 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 faf7 	bl	80044e8 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20027a7c 	.word	0x20027a7c
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f007 fdaf 	bl	8008ab8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f007 fa61 	bl	8008458 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 faa4 	bl	80044e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027ae0 	.word	0x20027ae0
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 fa24 	bl	8003440 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200287e4 	.word	0x200287e4

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f018 fea2 	bl	8019d58 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f015 f8d5 	bl	80161cc <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00f fce2 	bl	80109ec <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00f fe22 	bl	8010c7c <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00f f98e 	bl	8010364 <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f014 fde2 	bl	8015c24 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f015 f9e6 	bl	8016448 <TL_MM_Init>

  TL_Enable();
 800107c:	f015 f8a0 	bl	80161c0 <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20027b40 	.word	0x20027b40
 800108c:	20027b58 	.word	0x20027b58
 8001090:	0801ba74 	.word	0x0801ba74
 8001094:	08001199 	.word	0x08001199
 8001098:	20027b44 	.word	0x20027b44
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00f fd26 	bl	8010b20 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00f fd7e 	bl	8010bdc <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20027b40 	.word	0x20027b40

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f004 fd1c 	bl	8005b88 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f004 fd16 	bl	8005b88 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f004 fd0f 	bl	8005b88 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0801b560 	.word	0x0801b560
 8001178:	0801b584 	.word	0x0801b584
 800117c:	0801b5a4 	.word	0x0801b5a4

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f015 f9d0 	bl	8016528 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f016 fd70 	bl	8017c6c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f018 fdf4 	bl	8019d7c <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00f fa3a 	bl	8010620 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f014 fd56 	bl	8015c5c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00f f97a 	bl	80104bc <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20027b44 	.word	0x20027b44

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00f fe4f 	bl	8010e84 <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20027b58 	.word	0x20027b58

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00f fdd7 	bl	8010db8 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20027b58 	.word	0x20027b58

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f015 f94d 	bl	80164c0 <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f005 fb80 	bl	8006944 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	200003a4 	.word	0x200003a4

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	200003a4 	.word	0x200003a4

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a70      	ldr	r2, [pc, #448]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00f fce7 	bl	8010c7c <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b6e      	ldr	r3, [pc, #440]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00f fcdf 	bl	8010c7c <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b6c      	ldr	r3, [pc, #432]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00f fcd7 	bl	8010c7c <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 80012d2:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 80012d4:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	2001      	movs	r0, #1
 80012da:	f00f fccf 	bl	8010c7c <osSemaphoreNew>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b68      	ldr	r3, [pc, #416]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 80012e2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 80012e6:	4a69      	ldr	r2, [pc, #420]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	4869      	ldr	r0, [pc, #420]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 80012ec:	f00f fa70 	bl	80107d0 <osTimerNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b68      	ldr	r3, [pc, #416]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	4867      	ldr	r0, [pc, #412]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 80012fe:	f00f fa67 	bl	80107d0 <osTimerNew>
 8001302:	4602      	mov	r2, r0
 8001304:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 8001306:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 8001308:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001310:	4618      	mov	r0, r3
 8001312:	f00f fae1 	bl	80108d8 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 8001316:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 8001318:	216c      	movs	r1, #108	; 0x6c
 800131a:	200a      	movs	r0, #10
 800131c:	f00f fe0a 	bl	8010f34 <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 8001326:	4a61      	ldr	r2, [pc, #388]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 8001328:	2104      	movs	r1, #4
 800132a:	2003      	movs	r0, #3
 800132c:	f00f fe02 	bl	8010f34 <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001336:	4a5f      	ldr	r2, [pc, #380]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 8001338:	2106      	movs	r1, #6
 800133a:	2004      	movs	r0, #4
 800133c:	f00f fdfa 	bl	8010f34 <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001346:	4a5d      	ldr	r2, [pc, #372]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 8001348:	2118      	movs	r1, #24
 800134a:	200a      	movs	r0, #10
 800134c:	f00f fdf2 	bl	8010f34 <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001356:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 8001358:	2128      	movs	r1, #40	; 0x28
 800135a:	200a      	movs	r0, #10
 800135c:	f00f fdea 	bl	8010f34 <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001366:	4a59      	ldr	r2, [pc, #356]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 8001368:	2110      	movs	r1, #16
 800136a:	200a      	movs	r0, #10
 800136c:	f00f fde2 	bl	8010f34 <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001376:	4a57      	ldr	r2, [pc, #348]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 8001378:	2118      	movs	r1, #24
 800137a:	2003      	movs	r0, #3
 800137c:	f00f fdda 	bl	8010f34 <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 8001384:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001386:	4a55      	ldr	r2, [pc, #340]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 8001388:	2106      	movs	r1, #6
 800138a:	200a      	movs	r0, #10
 800138c:	f00f fdd2 	bl	8010f34 <osMessageQueueNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <MX_FREERTOS_Init+0x240>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001396:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <MX_FREERTOS_Init+0x244>)
 8001398:	2118      	movs	r1, #24
 800139a:	200a      	movs	r0, #10
 800139c:	f00f fdca 	bl	8010f34 <osMessageQueueNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <MX_FREERTOS_Init+0x248>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80013a6:	4a51      	ldr	r2, [pc, #324]	; (80014ec <MX_FREERTOS_Init+0x24c>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	2001      	movs	r0, #1
 80013ac:	f00f fdc2 	bl	8010f34 <osMessageQueueNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <MX_FREERTOS_Init+0x250>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of msgPasssingUSB_Queue */
  msgPasssingUSB_QueueHandle = osMessageQueueNew (5, 11, &msgPasssingUSB_Queue_attributes);
 80013b6:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <MX_FREERTOS_Init+0x254>)
 80013b8:	210b      	movs	r1, #11
 80013ba:	2005      	movs	r0, #5
 80013bc:	f00f fdba 	bl	8010f34 <osMessageQueueNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <MX_FREERTOS_Init+0x258>)
 80013c4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <MX_FREERTOS_Init+0x25c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	484d      	ldr	r0, [pc, #308]	; (8001500 <MX_FREERTOS_Init+0x260>)
 80013cc:	f00e ffca 	bl	8010364 <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <MX_FREERTOS_Init+0x264>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80013d6:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <MX_FREERTOS_Init+0x268>)
 80013d8:	2100      	movs	r1, #0
 80013da:	484c      	ldr	r0, [pc, #304]	; (800150c <MX_FREERTOS_Init+0x26c>)
 80013dc:	f00e ffc2 	bl	8010364 <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <MX_FREERTOS_Init+0x270>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013e6:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <MX_FREERTOS_Init+0x274>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	484b      	ldr	r0, [pc, #300]	; (8001518 <MX_FREERTOS_Init+0x278>)
 80013ec:	f00e ffba 	bl	8010364 <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_FREERTOS_Init+0x27c>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013f6:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <MX_FREERTOS_Init+0x280>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	484a      	ldr	r0, [pc, #296]	; (8001524 <MX_FREERTOS_Init+0x284>)
 80013fc:	f00e ffb2 	bl	8010364 <osThreadNew>
 8001400:	4602      	mov	r2, r0
 8001402:	4b49      	ldr	r3, [pc, #292]	; (8001528 <MX_FREERTOS_Init+0x288>)
 8001404:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 8001406:	4a49      	ldr	r2, [pc, #292]	; (800152c <MX_FREERTOS_Init+0x28c>)
 8001408:	2100      	movs	r1, #0
 800140a:	4849      	ldr	r0, [pc, #292]	; (8001530 <MX_FREERTOS_Init+0x290>)
 800140c:	f00e ffaa 	bl	8010364 <osThreadNew>
 8001410:	4602      	mov	r2, r0
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <MX_FREERTOS_Init+0x294>)
 8001414:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <MX_FREERTOS_Init+0x298>)
 8001418:	2100      	movs	r1, #0
 800141a:	4848      	ldr	r0, [pc, #288]	; (800153c <MX_FREERTOS_Init+0x29c>)
 800141c:	f00e ffa2 	bl	8010364 <osThreadNew>
 8001420:	4602      	mov	r2, r0
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <MX_FREERTOS_Init+0x2a0>)
 8001424:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <MX_FREERTOS_Init+0x2a4>)
 8001428:	2100      	movs	r1, #0
 800142a:	4847      	ldr	r0, [pc, #284]	; (8001548 <MX_FREERTOS_Init+0x2a8>)
 800142c:	f00e ff9a 	bl	8010364 <osThreadNew>
 8001430:	4602      	mov	r2, r0
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <MX_FREERTOS_Init+0x2ac>)
 8001434:	601a      	str	r2, [r3, #0]

  /* creation of msgPassingUSB_T */
  msgPassingUSB_THandle = osThreadNew(msgPassingUSB, NULL, &msgPassingUSB_T_attributes);
 8001436:	4a46      	ldr	r2, [pc, #280]	; (8001550 <MX_FREERTOS_Init+0x2b0>)
 8001438:	2100      	movs	r1, #0
 800143a:	4846      	ldr	r0, [pc, #280]	; (8001554 <MX_FREERTOS_Init+0x2b4>)
 800143c:	f00e ff92 	bl	8010364 <osThreadNew>
 8001440:	4602      	mov	r2, r0
 8001442:	4b45      	ldr	r3, [pc, #276]	; (8001558 <MX_FREERTOS_Init+0x2b8>)
 8001444:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00f fcb3 	bl	8010db8 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00f fcad 	bl	8010db8 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800145e:	f7ff fdc3 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0801bce0 	.word	0x0801bce0
 800146c:	20027c50 	.word	0x20027c50
 8001470:	0801bcf0 	.word	0x0801bcf0
 8001474:	20028098 	.word	0x20028098
 8001478:	0801bd00 	.word	0x0801bd00
 800147c:	20028090 	.word	0x20028090
 8001480:	0801bd10 	.word	0x0801bd10
 8001484:	20027c5c 	.word	0x20027c5c
 8001488:	0801bcc0 	.word	0x0801bcc0
 800148c:	20000c6c 	.word	0x20000c6c
 8001490:	08003ccd 	.word	0x08003ccd
 8001494:	20027c3c 	.word	0x20027c3c
 8001498:	0801bcd0 	.word	0x0801bcd0
 800149c:	080015e1 	.word	0x080015e1
 80014a0:	200280a8 	.word	0x200280a8
 80014a4:	0801bbb8 	.word	0x0801bbb8
 80014a8:	200280a4 	.word	0x200280a4
 80014ac:	0801bbd0 	.word	0x0801bbd0
 80014b0:	20027c58 	.word	0x20027c58
 80014b4:	0801bbe8 	.word	0x0801bbe8
 80014b8:	20028088 	.word	0x20028088
 80014bc:	0801bc00 	.word	0x0801bc00
 80014c0:	20027c60 	.word	0x20027c60
 80014c4:	0801bc18 	.word	0x0801bc18
 80014c8:	20027c54 	.word	0x20027c54
 80014cc:	0801bc30 	.word	0x0801bc30
 80014d0:	20027c44 	.word	0x20027c44
 80014d4:	0801bc48 	.word	0x0801bc48
 80014d8:	20027c68 	.word	0x20027c68
 80014dc:	0801bc60 	.word	0x0801bc60
 80014e0:	20027b48 	.word	0x20027b48
 80014e4:	0801bc78 	.word	0x0801bc78
 80014e8:	20027b4c 	.word	0x20027b4c
 80014ec:	0801bc90 	.word	0x0801bc90
 80014f0:	20027c64 	.word	0x20027c64
 80014f4:	0801bca8 	.word	0x0801bca8
 80014f8:	20027c4c 	.word	0x20027c4c
 80014fc:	0801ba98 	.word	0x0801ba98
 8001500:	0800155d 	.word	0x0800155d
 8001504:	20027c30 	.word	0x20027c30
 8001508:	0801babc 	.word	0x0801babc
 800150c:	0800420d 	.word	0x0800420d
 8001510:	20027c40 	.word	0x20027c40
 8001514:	0801bae0 	.word	0x0801bae0
 8001518:	080044f9 	.word	0x080044f9
 800151c:	2002808c 	.word	0x2002808c
 8001520:	0801bb04 	.word	0x0801bb04
 8001524:	08003ac5 	.word	0x08003ac5
 8001528:	200280ac 	.word	0x200280ac
 800152c:	0801bb28 	.word	0x0801bb28
 8001530:	08003c3d 	.word	0x08003c3d
 8001534:	2002809c 	.word	0x2002809c
 8001538:	0801bb4c 	.word	0x0801bb4c
 800153c:	08003e45 	.word	0x08003e45
 8001540:	20028094 	.word	0x20028094
 8001544:	0801bb70 	.word	0x0801bb70
 8001548:	080015f5 	.word	0x080015f5
 800154c:	20027c34 	.word	0x20027c34
 8001550:	0801bb94 	.word	0x0801bb94
 8001554:	0800156d 	.word	0x0800156d
 8001558:	20027c38 	.word	0x20027c38

0800155c <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f00f f8ef 	bl	8010748 <osDelay>
 800156a:	e7fb      	b.n	8001564 <DefaultTask+0x8>

0800156c <msgPassingUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_msgPassingUSB */
__weak void msgPassingUSB(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af04      	add	r7, sp, #16
 8001572:	6078      	str	r0, [r7, #4]
	struct USB_msgPass receivedPacket;
  /* Infinite loop */
  for(;;)
  {
    while(1){
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <msgPassingUSB+0x64>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f107 010c 	add.w	r1, r7, #12
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	2200      	movs	r2, #0
 8001582:	f00f fdd1 	bl	8011128 <osMessageQueueGet>

    	if(receivedPacket.len == 6){
 8001586:	7b3b      	ldrb	r3, [r7, #12]
 8001588:	2b06      	cmp	r3, #6
 800158a:	d10e      	bne.n	80015aa <msgPassingUSB+0x3e>
//    		  logReceivedMessage.blinkEnabled = Buf[2] - '0';
//    		  logReceivedMessage.tempEnabled = Buf[3] - '0';
//    		  logReceivedMessage.intertialEnabled = Buf[4] - '0';
//    		  logReceivedMessage.positionEnabled  = Buf[5] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 6, &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	1c58      	adds	r0, r3, #1
 8001592:	2301      	movs	r3, #1
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2303      	movs	r3, #3
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <msgPassingUSB+0x68>)
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <msgPassingUSB+0x6c>)
 80015a2:	2106      	movs	r1, #6
 80015a4:	f017 f86c 	bl	8018680 <APP_THREAD_SendCoapMsg>
 80015a8:	e7e4      	b.n	8001574 <msgPassingUSB+0x8>
    	  }
    	  else if(receivedPacket.len == 1){
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d1e1      	bne.n	8001574 <msgPassingUSB+0x8>
//    		  lightsSimpleReceivedMessage = Buf[0] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 4, &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	1c58      	adds	r0, r3, #1
 80015b6:	2301      	movs	r3, #1
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2303      	movs	r3, #3
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <msgPassingUSB+0x70>)
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <msgPassingUSB+0x6c>)
 80015c6:	2104      	movs	r1, #4
 80015c8:	f017 f85a 	bl	8018680 <APP_THREAD_SendCoapMsg>
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 80015cc:	e7d2      	b.n	8001574 <msgPassingUSB+0x8>
 80015ce:	bf00      	nop
 80015d0:	20027c4c 	.word	0x20027c4c
 80015d4:	0801b754 	.word	0x0801b754
 80015d8:	200289e8 	.word	0x200289e8
 80015dc:	0801b75c 	.word	0x0801b75c

080015e0 <watchDogReset>:
  /* USER CODE END msgPassingUSB */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END watchDogReset */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	2100      	movs	r1, #0
 8001602:	2001      	movs	r0, #1
 8001604:	f00f f80c 	bl	8010620 <osThreadFlagsWait>
 8001608:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f3      	beq.n	80015fc <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001614:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <BlinkTask+0x1b0>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	2200      	movs	r2, #0
 800161e:	4962      	ldr	r1, [pc, #392]	; (80017a8 <BlinkTask+0x1b4>)
 8001620:	f00f fd82 	bl	8011128 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001624:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <BlinkTask+0x1b4>)
 8001626:	2201      	movs	r2, #1
 8001628:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800162a:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <BlinkTask+0x1b0>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	2200      	movs	r2, #0
 8001632:	495d      	ldr	r1, [pc, #372]	; (80017a8 <BlinkTask+0x1b4>)
 8001634:	f00f fd04 	bl	8011040 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001638:	485c      	ldr	r0, [pc, #368]	; (80017ac <BlinkTask+0x1b8>)
 800163a:	f00c fc47 	bl	800decc <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800163e:	2104      	movs	r1, #4
 8001640:	485a      	ldr	r0, [pc, #360]	; (80017ac <BlinkTask+0x1b8>)
 8001642:	f00c fcf9 	bl	800e038 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8001646:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800164a:	4959      	ldr	r1, [pc, #356]	; (80017b0 <BlinkTask+0x1bc>)
 800164c:	4859      	ldr	r0, [pc, #356]	; (80017b4 <BlinkTask+0x1c0>)
 800164e:	f005 fcf9 	bl	8007044 <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 8001652:	f04f 32ff 	mov.w	r2, #4294967295
 8001656:	2100      	movs	r1, #0
 8001658:	2006      	movs	r0, #6
 800165a:	f00e ffe1 	bl	8010620 <osThreadFlagsWait>
 800165e:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d064      	beq.n	8001734 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <BlinkTask+0x1c4>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	d108      	bne.n	800168c <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 800167a:	f005 f963 	bl	8006944 <HAL_GetTick>
 800167e:	ee07 0a90 	vmov	s15, r0
 8001682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <BlinkTask+0x1c4>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 800168c:	f005 f95a 	bl	8006944 <HAL_GetTick>
 8001690:	ee07 0a90 	vmov	s15, r0
 8001694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001698:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <BlinkTask+0x1c4>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <BlinkTask+0x1c8>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <BlinkTask+0x1cc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e039      	b.n	800172c <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <BlinkTask+0x1cc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2264      	movs	r2, #100	; 0x64
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <BlinkTask+0x1bc>)
 80016c4:	4413      	add	r3, r2
 80016c6:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <BlinkTask+0x1d0>)
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	461a      	mov	r2, r3
 80016d0:	f018 fe72 	bl	801a3b8 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <BlinkTask+0x1c4>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <BlinkTask+0x1c8>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e8:	ee17 2a90 	vmov	r2, s15
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <BlinkTask+0x1d0>)
 80016ee:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <BlinkTask+0x1d4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <BlinkTask+0x1d0>)
 80016f6:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <BlinkTask+0x1d0>)
 80016fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <BlinkTask+0x1c4>)
 8001706:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 800170a:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <BlinkTask+0x1d4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <BlinkTask+0x1d4>)
 8001712:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <BlinkTask+0x1d8>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2200      	movs	r2, #0
 800171c:	4929      	ldr	r1, [pc, #164]	; (80017c4 <BlinkTask+0x1d0>)
 800171e:	f00f fc8f 	bl	8011040 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <BlinkTask+0x1cc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <BlinkTask+0x1cc>)
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <BlinkTask+0x1cc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d9c1      	bls.n	80016b8 <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d089      	beq.n	8001652 <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 800173e:	481d      	ldr	r0, [pc, #116]	; (80017b4 <BlinkTask+0x1c0>)
 8001740:	f005 fd04 	bl	800714c <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001744:	2104      	movs	r1, #4
 8001746:	4819      	ldr	r0, [pc, #100]	; (80017ac <BlinkTask+0x1b8>)
 8001748:	f00c fcc0 	bl	800e0cc <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 800174c:	4817      	ldr	r0, [pc, #92]	; (80017ac <BlinkTask+0x1b8>)
 800174e:	f00c fbe7 	bl	800df20 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <BlinkTask+0x1c4>)
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <BlinkTask+0x1b0>)
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	2200      	movs	r2, #0
 8001764:	4910      	ldr	r1, [pc, #64]	; (80017a8 <BlinkTask+0x1b4>)
 8001766:	f00f fcdf 	bl	8011128 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <BlinkTask+0x1b4>)
 800176c:	2200      	movs	r2, #0
 800176e:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <BlinkTask+0x1b4>)
 8001772:	795b      	ldrb	r3, [r3, #5]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d104      	bne.n	8001782 <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <BlinkTask+0x1dc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f00f fb81 	bl	8010e84 <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <BlinkTask+0x1b0>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	2200      	movs	r2, #0
 800178a:	4907      	ldr	r1, [pc, #28]	; (80017a8 <BlinkTask+0x1b4>)
 800178c:	f00f fc58 	bl	8011040 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <BlinkTask+0x1d8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f00f fd39 	bl	801120c <osMessageQueueReset>

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 800179a:	200e      	movs	r0, #14
 800179c:	f00e fef0 	bl	8010580 <osThreadFlagsClear>

					break;
 80017a0:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80017a2:	e72b      	b.n	80015fc <BlinkTask+0x8>
 80017a4:	20027c64 	.word	0x20027c64
 80017a8:	200280b4 	.word	0x200280b4
 80017ac:	20028848 	.word	0x20028848
 80017b0:	20000414 	.word	0x20000414
 80017b4:	20027a7c 	.word	0x20027a7c
 80017b8:	20000bec 	.word	0x20000bec
 80017bc:	20000bf0 	.word	0x20000bf0
 80017c0:	20000be8 	.word	0x20000be8
 80017c4:	200003a8 	.word	0x200003a8
 80017c8:	20000be4 	.word	0x20000be4
 80017cc:	200280a4 	.word	0x200280a4
 80017d0:	20028098 	.word	0x20028098

080017d4 <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x24>)
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_ADC_ConvCpltCallback+0x28>)
 80017e0:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2104      	movs	r1, #4
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00e fe67 	bl	80104bc <osThreadFlagsSet>

}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200280b0 	.word	0x200280b0
 80017fc:	200007fc 	.word	0x200007fc
 8001800:	20027c34 	.word	0x20027c34

08001804 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001810:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2104      	movs	r1, #4
 8001818:	4618      	mov	r0, r3
 800181a:	f00e fe4f 	bl	80104bc <osThreadFlagsSet>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200280b0 	.word	0x200280b0
 800182c:	20000414 	.word	0x20000414
 8001830:	20027c34 	.word	0x20027c34

08001834 <LL_AHB2_GRP1_EnableClock>:
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_COMP1_Init+0x50>)
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <MX_COMP1_Init+0x54>)
 8001870:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_COMP1_Init+0x58>)
 8001876:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_COMP1_Init+0x50>)
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_COMP1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <MX_COMP1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_COMP1_Init+0x50>)
 80018a0:	2231      	movs	r2, #49	; 0x31
 80018a2:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_COMP1_Init+0x50>)
 80018a6:	f006 fab7 	bl	8007e18 <HAL_COMP_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80018b0:	f002 fe1a 	bl	80044e8 <Error_Handler>
  }

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200280bc 	.word	0x200280bc
 80018bc:	40010200 	.word	0x40010200
 80018c0:	00c00010 	.word	0x00c00010

080018c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_COMP_MspInit+0x5c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d117      	bne.n	8001916 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff ffa4 	bl	8001834 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f0:	2303      	movs	r3, #3
 80018f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f007 f8d9 	bl	8008ab8 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	2016      	movs	r0, #22
 800190c:	f006 fd4d 	bl	80083aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001910:	2016      	movs	r0, #22
 8001912:	f006 fd64 	bl	80083de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40010200 	.word	0x40010200

08001924 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d02a      	beq.n	8001994 <process_pulse_lengths+0x70>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3302      	adds	r3, #2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d025      	beq.n	8001994 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3302      	adds	r3, #2
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	bf8c      	ite	hi
 8001956:	2301      	movhi	r3, #1
 8001958:	2300      	movls	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d10e      	bne.n	8001988 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	005a      	lsls	r2, r3, #1
 8001970:	7efb      	ldrb	r3, [r7, #27]
 8001972:	431a      	orrs	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <process_pulse_lengths+0xd0>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e002      	b.n	800198e <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 8001988:	7efa      	ldrb	r2, [r7, #27]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db26      	blt.n	80019e8 <process_pulse_lengths+0xc4>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	dc22      	bgt.n	80019e8 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80019be:	e013      	b.n	80019e8 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4413      	add	r3, r2
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	69f9      	ldr	r1, [r7, #28]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4291      	cmp	r1, r2
 80019d8:	d101      	bne.n	80019de <process_pulse_lengths+0xba>
 80019da:	2201      	movs	r2, #1
 80019dc:	e001      	b.n	80019e2 <process_pulse_lengths+0xbe>
 80019de:	f04f 32ff 	mov.w	r2, #4294967295
 80019e2:	441a      	add	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	609a      	str	r2, [r3, #8]
}
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	0801bd20 	.word	0x0801bd20

080019f8 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	dd06      	ble.n	8001a18 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	e001      	b.n	8001a1c <get_phase+0x24>
    } else {
        return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <reset+0x30>)
 8001a42:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	427a0000 	.word	0x427a0000

08001a5c <LL_AHB1_GRP1_EnableClock>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a80:	68fb      	ldr	r3, [r7, #12]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a92:	2004      	movs	r0, #4
 8001a94:	f7ff ffe2 	bl	8001a5c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff ffdf 	bl	8001a5c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	200b      	movs	r0, #11
 8001aa4:	f006 fc81 	bl	80083aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aa8:	200b      	movs	r0, #11
 8001aaa:	f006 fc98 	bl	80083de <HAL_NVIC_EnableIRQ>

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	603a      	str	r2, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <IMU_begin+0x60>)
 8001acc:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <IMU_begin+0x64>)
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <IMU_begin+0x68>)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001ada:	f000 fa85 	bl	8001fe8 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <IMU_begin+0x6c>)
 8001ae0:	22f9      	movs	r2, #249	; 0xf9
 8001ae2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <IMU_begin+0x6c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001aea:	2302      	movs	r3, #2
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fc7e 	bl	80023f0 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001af4:	f000 fbd4 	bl	80022a0 <IMU_receivePacket>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <IMU_begin+0x6c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2bf8      	cmp	r3, #248	; 0xf8
 8001b04:	d101      	bne.n	8001b0a <IMU_begin+0x56>
		{
			return (true);
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000006 	.word	0x20000006
 8001b18:	2002813e 	.word	0x2002813e
 8001b1c:	20028204 	.word	0x20028204
 8001b20:	2002817c 	.word	0x2002817c

08001b24 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <IMU_dataAvailable+0x64>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2bff      	cmp	r3, #255	; 0xff
 8001b2e:	d00d      	beq.n	8001b4c <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <IMU_dataAvailable+0x68>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <IMU_dataAvailable+0x64>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f007 f92b 	bl	8008d98 <HAL_GPIO_ReadPin>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <IMU_dataAvailable+0x28>
			return (false);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e01b      	b.n	8001b84 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001b4c:	f000 fba8 	bl	80022a0 <IMU_receivePacket>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <IMU_dataAvailable+0x6c>)
 8001b58:	789b      	ldrb	r3, [r3, #2]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d107      	bne.n	8001b70 <IMU_dataAvailable+0x4c>
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <IMU_dataAvailable+0x70>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2bfb      	cmp	r3, #251	; 0xfb
 8001b66:	d103      	bne.n	8001b70 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001b68:	f000 f832 	bl	8001bd0 <IMU_parseInputReport>
			return (true);
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e009      	b.n	8001b84 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <IMU_dataAvailable+0x6c>)
 8001b72:	789b      	ldrb	r3, [r3, #2]
 8001b74:	2202      	movs	r2, #2
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d103      	bne.n	8001b82 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001b7a:	f000 f80d 	bl	8001b98 <IMU_parseCommandReport>
			return (true);
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2002813e 	.word	0x2002813e
 8001b8c:	20028204 	.word	0x20028204
 8001b90:	200280ec 	.word	0x200280ec
 8001b94:	2002817c 	.word	0x2002817c

08001b98 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <IMU_parseCommandReport+0x30>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2bf1      	cmp	r3, #241	; 0xf1
 8001ba4:	d109      	bne.n	8001bba <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <IMU_parseCommandReport+0x30>)
 8001ba8:	789b      	ldrb	r3, [r3, #2]
 8001baa:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b07      	cmp	r3, #7
 8001bb0:	d103      	bne.n	8001bba <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <IMU_parseCommandReport+0x30>)
 8001bb4:	795a      	ldrb	r2, [r3, #5]
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <IMU_parseCommandReport+0x34>)
 8001bb8:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2002817c 	.word	0x2002817c
 8001bcc:	2002822f 	.word	0x2002822f

08001bd0 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001bd6:	4b96      	ldr	r3, [pc, #600]	; (8001e30 <IMU_parseInputReport+0x260>)
 8001bd8:	785b      	ldrb	r3, [r3, #1]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	4b94      	ldr	r3, [pc, #592]	; (8001e30 <IMU_parseInputReport+0x260>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001be8:	8a3b      	ldrh	r3, [r7, #16]
 8001bea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bee:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001bf0:	8a3b      	ldrh	r3, [r7, #16]
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001bf8:	4b8e      	ldr	r3, [pc, #568]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001bfa:	791b      	ldrb	r3, [r3, #4]
 8001bfc:	061a      	lsls	r2, r3, #24
 8001bfe:	4b8d      	ldr	r3, [pc, #564]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	041b      	lsls	r3, r3, #16
 8001c04:	431a      	orrs	r2, r3
 8001c06:	4b8b      	ldr	r3, [pc, #556]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c08:	789b      	ldrb	r3, [r3, #2]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	4a89      	ldr	r2, [pc, #548]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c10:	7852      	ldrb	r2, [r2, #1]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	4a88      	ldr	r2, [pc, #544]	; (8001e38 <IMU_parseInputReport+0x268>)
 8001c16:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001c18:	4b86      	ldr	r3, [pc, #536]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c1a:	79db      	ldrb	r3, [r3, #7]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001c22:	4b84      	ldr	r3, [pc, #528]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c24:	7a9b      	ldrb	r3, [r3, #10]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c2c:	7a5b      	ldrb	r3, [r3, #9]
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001c36:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c38:	7b1b      	ldrb	r3, [r3, #12]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	4b7d      	ldr	r3, [pc, #500]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c40:	7adb      	ldrb	r3, [r3, #11]
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001c4a:	4b7a      	ldr	r3, [pc, #488]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c4c:	7b9b      	ldrb	r3, [r3, #14]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c54:	7b5b      	ldrb	r3, [r3, #13]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001c62:	2300      	movs	r3, #0
 8001c64:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001c66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c6a:	3b05      	subs	r3, #5
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	dd09      	ble.n	8001c84 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001c70:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c72:	7c1b      	ldrb	r3, [r3, #16]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b6e      	ldr	r3, [pc, #440]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c7a:	7bdb      	ldrb	r3, [r3, #15]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001c84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c88:	3b05      	subs	r3, #5
 8001c8a:	2b0b      	cmp	r3, #11
 8001c8c:	dd09      	ble.n	8001ca2 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001c8e:	4b69      	ldr	r3, [pc, #420]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c90:	7c9b      	ldrb	r3, [r3, #18]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001c98:	7c5b      	ldrb	r3, [r3, #17]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001ca2:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001ca4:	795b      	ldrb	r3, [r3, #5]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10d      	bne.n	8001cc6 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <IMU_parseInputReport+0x26c>)
 8001cb0:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001cb2:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <IMU_parseInputReport+0x270>)
 8001cb4:	89bb      	ldrh	r3, [r7, #12]
 8001cb6:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001cb8:	4a62      	ldr	r2, [pc, #392]	; (8001e44 <IMU_parseInputReport+0x274>)
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001cbe:	4a62      	ldr	r2, [pc, #392]	; (8001e48 <IMU_parseInputReport+0x278>)
 8001cc0:	893b      	ldrh	r3, [r7, #8]
 8001cc2:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001cc4:	e16a      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001cc8:	795b      	ldrb	r3, [r3, #5]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d10d      	bne.n	8001cea <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <IMU_parseInputReport+0x27c>)
 8001cd4:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001cd6:	4a5e      	ldr	r2, [pc, #376]	; (8001e50 <IMU_parseInputReport+0x280>)
 8001cd8:	89bb      	ldrh	r3, [r7, #12]
 8001cda:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001cdc:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <IMU_parseInputReport+0x284>)
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001ce2:	4a5d      	ldr	r2, [pc, #372]	; (8001e58 <IMU_parseInputReport+0x288>)
 8001ce4:	893b      	ldrh	r3, [r7, #8]
 8001ce6:	8013      	strh	r3, [r2, #0]
}
 8001ce8:	e158      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001cea:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d10d      	bne.n	8001d0e <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <IMU_parseInputReport+0x28c>)
 8001cf8:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001cfa:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <IMU_parseInputReport+0x290>)
 8001cfc:	89bb      	ldrh	r3, [r7, #12]
 8001cfe:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001d00:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <IMU_parseInputReport+0x294>)
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001d06:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <IMU_parseInputReport+0x298>)
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	8013      	strh	r3, [r2, #0]
}
 8001d0c:	e146      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001d10:	795b      	ldrb	r3, [r3, #5]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d10d      	bne.n	8001d32 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	4b54      	ldr	r3, [pc, #336]	; (8001e6c <IMU_parseInputReport+0x29c>)
 8001d1c:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001d1e:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <IMU_parseInputReport+0x2a0>)
 8001d20:	89bb      	ldrh	r3, [r7, #12]
 8001d22:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001d24:	4a53      	ldr	r2, [pc, #332]	; (8001e74 <IMU_parseInputReport+0x2a4>)
 8001d26:	897b      	ldrh	r3, [r7, #10]
 8001d28:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001d2a:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <IMU_parseInputReport+0x2a8>)
 8001d2c:	893b      	ldrh	r3, [r7, #8]
 8001d2e:	8013      	strh	r3, [r2, #0]
}
 8001d30:	e134      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001d34:	795b      	ldrb	r3, [r3, #5]
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d003      	beq.n	8001d42 <IMU_parseInputReport+0x172>
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001d3c:	795b      	ldrb	r3, [r3, #5]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d166      	bne.n	8001e10 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001d42:	f004 fdff 	bl	8006944 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <IMU_parseInputReport+0x2ac>)
 8001d4a:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001d4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <IMU_parseInputReport+0x2b0>)
 8001d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 f964 	bl	8002028 <IMU_qToFloat>
 8001d60:	eef0 7a40 	vmov.f32	s15, s0
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <IMU_parseInputReport+0x2ac>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001d6a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <IMU_parseInputReport+0x2b0>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f000 f955 	bl	8002028 <IMU_qToFloat>
 8001d7e:	eef0 7a40 	vmov.f32	s15, s0
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <IMU_parseInputReport+0x2ac>)
 8001d84:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001d88:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d8c:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <IMU_parseInputReport+0x2b0>)
 8001d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f000 f946 	bl	8002028 <IMU_qToFloat>
 8001d9c:	eef0 7a40 	vmov.f32	s15, s0
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <IMU_parseInputReport+0x2ac>)
 8001da2:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001da6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <IMU_parseInputReport+0x2b0>)
 8001dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f000 f937 	bl	8002028 <IMU_qToFloat>
 8001dba:	eef0 7a40 	vmov.f32	s15, s0
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <IMU_parseInputReport+0x2ac>)
 8001dc0:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001dc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dc8:	210c      	movs	r1, #12
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f92c 	bl	8002028 <IMU_qToFloat>
 8001dd0:	eef0 7a40 	vmov.f32	s15, s0
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <IMU_parseInputReport+0x2ac>)
 8001dd6:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <IMU_parseInputReport+0x2b4>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2200      	movs	r2, #0
 8001de2:	4926      	ldr	r1, [pc, #152]	; (8001e7c <IMU_parseInputReport+0x2ac>)
 8001de4:	f00f f92c 	bl	8011040 <osMessageQueuePut>
		quatAccuracy = status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <IMU_parseInputReport+0x2b8>)
 8001dee:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <IMU_parseInputReport+0x2bc>)
 8001df2:	89bb      	ldrh	r3, [r7, #12]
 8001df4:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001df6:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <IMU_parseInputReport+0x2c0>)
 8001df8:	897b      	ldrh	r3, [r7, #10]
 8001dfa:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001dfc:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <IMU_parseInputReport+0x2c4>)
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001e02:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <IMU_parseInputReport+0x2c8>)
 8001e04:	8afb      	ldrh	r3, [r7, #22]
 8001e06:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <IMU_parseInputReport+0x2cc>)
 8001e0a:	8abb      	ldrh	r3, [r7, #20]
 8001e0c:	8013      	strh	r3, [r2, #0]
}
 8001e0e:	e0c5      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <IMU_parseInputReport+0x264>)
 8001e12:	795b      	ldrb	r3, [r3, #5]
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d147      	bne.n	8001ea8 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001e18:	f004 fd94 	bl	8006944 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <IMU_parseInputReport+0x2d0>)
 8001e20:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <IMU_parseInputReport+0x2d0>)
 8001e24:	893b      	ldrh	r3, [r7, #8]
 8001e26:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001e28:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <IMU_parseInputReport+0x2d4>)
 8001e2a:	893b      	ldrh	r3, [r7, #8]
 8001e2c:	8013      	strh	r3, [r2, #0]
}
 8001e2e:	e0b5      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
 8001e30:	200280ec 	.word	0x200280ec
 8001e34:	2002817c 	.word	0x2002817c
 8001e38:	20028108 	.word	0x20028108
 8001e3c:	20028244 	.word	0x20028244
 8001e40:	2002822c 	.word	0x2002822c
 8001e44:	20028248 	.word	0x20028248
 8001e48:	20028144 	.word	0x20028144
 8001e4c:	20028140 	.word	0x20028140
 8001e50:	20028112 	.word	0x20028112
 8001e54:	20028230 	.word	0x20028230
 8001e58:	2002816e 	.word	0x2002816e
 8001e5c:	20028170 	.word	0x20028170
 8001e60:	20028172 	.word	0x20028172
 8001e64:	2002813a 	.word	0x2002813a
 8001e68:	20028138 	.word	0x20028138
 8001e6c:	200280f0 	.word	0x200280f0
 8001e70:	2002813c 	.word	0x2002813c
 8001e74:	20028232 	.word	0x20028232
 8001e78:	20028142 	.word	0x20028142
 8001e7c:	20028154 	.word	0x20028154
 8001e80:	20000004 	.word	0x20000004
 8001e84:	20027c68 	.word	0x20027c68
 8001e88:	2002810e 	.word	0x2002810e
 8001e8c:	20028246 	.word	0x20028246
 8001e90:	2002816c 	.word	0x2002816c
 8001e94:	200280e8 	.word	0x200280e8
 8001e98:	20028104 	.word	0x20028104
 8001e9c:	20028146 	.word	0x20028146
 8001ea0:	200280f4 	.word	0x200280f4
 8001ea4:	2002824a 	.word	0x2002824a
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001ea8:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001eaa:	795b      	ldrb	r3, [r3, #5]
 8001eac:	2b13      	cmp	r3, #19
 8001eae:	d10d      	bne.n	8001ecc <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001eb0:	f004 fd48 	bl	8006944 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <IMU_parseInputReport+0x3d8>)
 8001eb8:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001ebc:	7a5a      	ldrb	r2, [r3, #9]
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <IMU_parseInputReport+0x3d8>)
 8001ec0:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001ec4:	7a5a      	ldrb	r2, [r3, #9]
 8001ec6:	4b39      	ldr	r3, [pc, #228]	; (8001fac <IMU_parseInputReport+0x3dc>)
 8001ec8:	701a      	strb	r2, [r3, #0]
}
 8001eca:	e067      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001ecc:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001ece:	795b      	ldrb	r3, [r3, #5]
 8001ed0:	2b1e      	cmp	r3, #30
 8001ed2:	d12b      	bne.n	8001f2c <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001ed4:	f004 fd36 	bl	8006944 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <IMU_parseInputReport+0x3e0>)
 8001edc:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001ede:	2300      	movs	r3, #0
 8001ee0:	74fb      	strb	r3, [r7, #19]
 8001ee2:	e00c      	b.n	8001efe <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	f103 020b 	add.w	r2, r3, #11
 8001eea:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <IMU_parseInputReport+0x3e4>)
 8001eec:	6819      	ldr	r1, [r3, #0]
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	440b      	add	r3, r1
 8001ef2:	492c      	ldr	r1, [pc, #176]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001ef4:	5c8a      	ldrb	r2, [r1, r2]
 8001ef6:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	3301      	adds	r3, #1
 8001efc:	74fb      	strb	r3, [r7, #19]
 8001efe:	7cfb      	ldrb	r3, [r7, #19]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d9ef      	bls.n	8001ee4 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001f06:	7a9a      	ldrb	r2, [r3, #10]
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <IMU_parseInputReport+0x3e8>)
 8001f0a:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <IMU_parseInputReport+0x3e4>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <IMU_parseInputReport+0x3e0>)
 8001f12:	6810      	ldr	r0, [r2, #0]
 8001f14:	6851      	ldr	r1, [r2, #4]
 8001f16:	c303      	stmia	r3!, {r0, r1}
 8001f18:	7a12      	ldrb	r2, [r2, #8]
 8001f1a:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <IMU_parseInputReport+0x3ec>)
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	2300      	movs	r3, #0
 8001f22:	2200      	movs	r2, #0
 8001f24:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <IMU_parseInputReport+0x3e0>)
 8001f26:	f00f f88b 	bl	8011040 <osMessageQueuePut>
}
 8001f2a:	e037      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001f2e:	795b      	ldrb	r3, [r3, #5]
 8001f30:	2b14      	cmp	r3, #20
 8001f32:	d109      	bne.n	8001f48 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <IMU_parseInputReport+0x3f0>)
 8001f36:	89bb      	ldrh	r3, [r7, #12]
 8001f38:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <IMU_parseInputReport+0x3f4>)
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001f40:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <IMU_parseInputReport+0x3f8>)
 8001f42:	893b      	ldrh	r3, [r7, #8]
 8001f44:	8013      	strh	r3, [r2, #0]
}
 8001f46:	e029      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001f4a:	795b      	ldrb	r3, [r3, #5]
 8001f4c:	2b15      	cmp	r3, #21
 8001f4e:	d109      	bne.n	8001f64 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <IMU_parseInputReport+0x3fc>)
 8001f52:	89bb      	ldrh	r3, [r7, #12]
 8001f54:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001f56:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <IMU_parseInputReport+0x400>)
 8001f58:	897b      	ldrh	r3, [r7, #10]
 8001f5a:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <IMU_parseInputReport+0x404>)
 8001f5e:	893b      	ldrh	r3, [r7, #8]
 8001f60:	8013      	strh	r3, [r2, #0]
}
 8001f62:	e01b      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001f66:	795b      	ldrb	r3, [r3, #5]
 8001f68:	2b16      	cmp	r3, #22
 8001f6a:	d109      	bne.n	8001f80 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <IMU_parseInputReport+0x408>)
 8001f6e:	89bb      	ldrh	r3, [r7, #12]
 8001f70:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001f72:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <IMU_parseInputReport+0x40c>)
 8001f74:	897b      	ldrh	r3, [r7, #10]
 8001f76:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <IMU_parseInputReport+0x410>)
 8001f7a:	893b      	ldrh	r3, [r7, #8]
 8001f7c:	8013      	strh	r3, [r2, #0]
}
 8001f7e:	e00d      	b.n	8001f9c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001f82:	795b      	ldrb	r3, [r3, #5]
 8001f84:	2bf1      	cmp	r3, #241	; 0xf1
 8001f86:	d109      	bne.n	8001f9c <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001f8a:	79db      	ldrb	r3, [r3, #7]
 8001f8c:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	d103      	bne.n	8001f9c <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <IMU_parseInputReport+0x3d4>)
 8001f96:	7a9a      	ldrb	r2, [r3, #10]
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <IMU_parseInputReport+0x414>)
 8001f9a:	701a      	strb	r2, [r3, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2002817c 	.word	0x2002817c
 8001fa8:	200280fc 	.word	0x200280fc
 8001fac:	20028176 	.word	0x20028176
 8001fb0:	20028234 	.word	0x20028234
 8001fb4:	20028150 	.word	0x20028150
 8001fb8:	2002822e 	.word	0x2002822e
 8001fbc:	20027c44 	.word	0x20027c44
 8001fc0:	20028174 	.word	0x20028174
 8001fc4:	2002814e 	.word	0x2002814e
 8001fc8:	200281fe 	.word	0x200281fe
 8001fcc:	200280f2 	.word	0x200280f2
 8001fd0:	20028178 	.word	0x20028178
 8001fd4:	20028148 	.word	0x20028148
 8001fd8:	2002814c 	.word	0x2002814c
 8001fdc:	2002814a 	.word	0x2002814a
 8001fe0:	20028110 	.word	0x20028110
 8001fe4:	2002822f 	.word	0x2002822f

08001fe8 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <IMU_softReset+0x3c>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f9fa 	bl	80023f0 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001ffc:	20c8      	movs	r0, #200	; 0xc8
 8001ffe:	f004 fcb9 	bl	8006974 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8002002:	bf00      	nop
 8002004:	f000 f94c 	bl	80022a0 <IMU_receivePacket>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1fa      	bne.n	8002004 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 800200e:	20c8      	movs	r0, #200	; 0xc8
 8002010:	f004 fcb0 	bl	8006974 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8002014:	bf00      	nop
 8002016:	f000 f943 	bl	80022a0 <IMU_receivePacket>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1fa      	bne.n	8002016 <IMU_softReset+0x2e>
		;
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2002817c 	.word	0x2002817c

08002028 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	80fb      	strh	r3, [r7, #6]
 8002034:	4613      	mov	r3, r2
 8002036:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8002038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8002048:	797b      	ldrb	r3, [r7, #5]
 800204a:	425b      	negs	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f9f3 	bl	8000438 <__aeabi_i2d>
 8002052:	4603      	mov	r3, r0
 8002054:	460c      	mov	r4, r1
 8002056:	ec44 3b11 	vmov	d1, r3, r4
 800205a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80020a0 <IMU_qToFloat+0x78>
 800205e:	f018 f9bf 	bl	801a3e0 <pow>
 8002062:	ec56 5b10 	vmov	r5, r6, d0
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7fe f9f8 	bl	800045c <__aeabi_f2d>
 800206c:	4603      	mov	r3, r0
 800206e:	460c      	mov	r4, r1
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	4628      	mov	r0, r5
 8002076:	4631      	mov	r1, r6
 8002078:	f7fe fa48 	bl	800050c <__aeabi_dmul>
 800207c:	4603      	mov	r3, r0
 800207e:	460c      	mov	r4, r1
 8002080:	4618      	mov	r0, r3
 8002082:	4621      	mov	r1, r4
 8002084:	f7fe fcf2 	bl	8000a6c <__aeabi_d2f>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	ee07 3a90 	vmov	s15, r3
}
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209c:	f3af 8000 	nop.w
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40000000 	.word	0x40000000

080020a8 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4619      	mov	r1, r3
 80020b6:	2005      	movs	r0, #5
 80020b8:	f000 f81a 	bl	80020f0 <IMU_setFeatureCommand_2>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 80020d2:	4a06      	ldr	r2, [pc, #24]	; (80020ec <IMU_enableActivityClassifier+0x28>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4619      	mov	r1, r3
 80020de:	201e      	movs	r0, #30
 80020e0:	f000 f818 	bl	8002114 <IMU_setFeatureCommand_3>
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20028150 	.word	0x20028150

080020f0 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	4613      	mov	r3, r2
 80020fe:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002100:	88b9      	ldrh	r1, [r7, #4]
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2200      	movs	r2, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f804 	bl	8002114 <IMU_setFeatureCommand_3>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	603a      	str	r2, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	460b      	mov	r3, r1
 8002122:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002132:	22fd      	movs	r2, #253	; 0xfd
 8002134:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8002136:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 800213e:	2200      	movs	r2, #0
 8002140:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002144:	2200      	movs	r2, #0
 8002146:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 800214a:	2200      	movs	r2, #0
 800214c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002154:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	121b      	asrs	r3, r3, #8
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 800215e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	141b      	asrs	r3, r3, #16
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002168:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0e1b      	lsrs	r3, r3, #24
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002172:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002176:	2200      	movs	r2, #0
 8002178:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 800217c:	2200      	movs	r2, #0
 800217e:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002182:	2200      	movs	r2, #0
 8002184:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002188:	2200      	movs	r2, #0
 800218a:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 8002192:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 800219c:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 80021a6:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	0e1b      	lsrs	r3, r3, #24
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <IMU_setFeatureCommand_3+0xb0>)
 80021b0:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80021b2:	2302      	movs	r3, #2
 80021b4:	2111      	movs	r1, #17
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f91a 	bl	80023f0 <IMU_sendPacket>
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2002817c 	.word	0x2002817c

080021c8 <IMU_sendTareNow>:
	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
}

void IMU_sendTareNow(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <IMU_sendTareNow+0x64>)
 80021ce:	22f2      	movs	r2, #242	; 0xf2
 80021d0:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <IMU_sendTareNow+0x68>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	b2d1      	uxtb	r1, r2
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <IMU_sendTareNow+0x68>)
 80021dc:	7011      	strb	r1, [r2, #0]
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <IMU_sendTareNow+0x64>)
 80021e0:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <IMU_sendTareNow+0x64>)
 80021e4:	2203      	movs	r2, #3
 80021e6:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0; // Tare Now
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <IMU_sendTareNow+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0x07; // All 3 axes
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <IMU_sendTareNow+0x64>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0; // Rotation Vector
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <IMU_sendTareNow+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	715a      	strb	r2, [r3, #5]


	// RESERVED
	shtpData[6] = 0;
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <IMU_sendTareNow+0x64>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <IMU_sendTareNow+0x64>)
 8002202:	2200      	movs	r2, #0
 8002204:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <IMU_sendTareNow+0x64>)
 8002208:	2200      	movs	r2, #0
 800220a:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <IMU_sendTareNow+0x64>)
 800220e:	2200      	movs	r2, #0
 8002210:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <IMU_sendTareNow+0x64>)
 8002214:	2200      	movs	r2, #0
 8002216:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <IMU_sendTareNow+0x64>)
 800221a:	2200      	movs	r2, #0
 800221c:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 800221e:	2302      	movs	r3, #2
 8002220:	210c      	movs	r1, #12
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8e4 	bl	80023f0 <IMU_sendPacket>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2002817c 	.word	0x2002817c
 8002230:	20000bfa 	.word	0x20000bfa

08002234 <IMU_sendPersistTare>:

void IMU_sendPersistTare(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <IMU_sendPersistTare+0x64>)
 800223a:	22f2      	movs	r2, #242	; 0xf2
 800223c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <IMU_sendPersistTare+0x68>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	b2d1      	uxtb	r1, r2
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <IMU_sendPersistTare+0x68>)
 8002248:	7011      	strb	r1, [r2, #0]
 800224a:	4a13      	ldr	r2, [pc, #76]	; (8002298 <IMU_sendPersistTare+0x64>)
 800224c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <IMU_sendPersistTare+0x64>)
 8002250:	2203      	movs	r2, #3
 8002252:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0x01; // Persist Tare
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <IMU_sendPersistTare+0x64>)
 8002256:	2201      	movs	r2, #1
 8002258:	70da      	strb	r2, [r3, #3]


	// RESERVED
	shtpData[4] = 0;
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <IMU_sendPersistTare+0x64>)
 800225c:	2200      	movs	r2, #0
 800225e:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0;
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <IMU_sendPersistTare+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	715a      	strb	r2, [r3, #5]
	shtpData[6] = 0;
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <IMU_sendPersistTare+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <IMU_sendPersistTare+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <IMU_sendPersistTare+0x64>)
 8002274:	2200      	movs	r2, #0
 8002276:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <IMU_sendPersistTare+0x64>)
 800227a:	2200      	movs	r2, #0
 800227c:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <IMU_sendPersistTare+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <IMU_sendPersistTare+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 800228a:	2302      	movs	r3, #2
 800228c:	210c      	movs	r1, #12
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f8ae 	bl	80023f0 <IMU_sendPacket>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2002817c 	.word	0x2002817c
 800229c:	20000bfa 	.word	0x20000bfa

080022a0 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <IMU_receivePacket+0x90>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <IMU_receivePacket+0x94>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f006 fd70 	bl	8008d98 <HAL_GPIO_ReadPin>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <IMU_receivePacket+0x22>
		return (false);
 80022be:	2300      	movs	r3, #0
 80022c0:	e031      	b.n	8002326 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <IMU_receivePacket+0x98>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f04f 31ff 	mov.w	r1, #4294967295
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00e fd74 	bl	8010db8 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <IMU_receivePacket+0x9c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b299      	uxth	r1, r3
 80022d6:	2364      	movs	r3, #100	; 0x64
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2304      	movs	r3, #4
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <IMU_receivePacket+0xa0>)
 80022de:	4819      	ldr	r0, [pc, #100]	; (8002344 <IMU_receivePacket+0xa4>)
 80022e0:	f006 ff0e 	bl	8009100 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <IMU_receivePacket+0x98>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00e fdcb 	bl	8010e84 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <IMU_receivePacket+0xa0>)
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <IMU_receivePacket+0xa0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	4313      	orrs	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002306:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002310:	2300      	movs	r3, #0
 8002312:	e008      	b.n	8002326 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	3b04      	subs	r3, #4
 8002318:	b29b      	uxth	r3, r3
 800231a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f812 	bl	8002348 <IMU_getData>


	return (true); //We're done!
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20028204 	.word	0x20028204
 8002334:	2002813e 	.word	0x2002813e
 8002338:	20027c50 	.word	0x20027c50
 800233c:	20000006 	.word	0x20000006
 8002340:	200280ec 	.word	0x200280ec
 8002344:	2002824c 	.word	0x2002824c

08002348 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af02      	add	r7, sp, #8
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8002352:	2300      	movs	r3, #0
 8002354:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8002356:	e036      	b.n	80023c6 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	2b1c      	cmp	r3, #28
 8002360:	d901      	bls.n	8002366 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 8002362:	231c      	movs	r3, #28
 8002364:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <IMU_getData+0x90>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f04f 31ff 	mov.w	r1, #4294967295
 800236e:	4618      	mov	r0, r3
 8002370:	f00e fd22 	bl	8010db8 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <IMU_getData+0x94>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b299      	uxth	r1, r3
 800237a:	89bb      	ldrh	r3, [r7, #12]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3304      	adds	r3, #4
 8002380:	b2db      	uxtb	r3, r3
 8002382:	b29a      	uxth	r2, r3
 8002384:	2364      	movs	r3, #100	; 0x64
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <IMU_getData+0x98>)
 800238c:	4815      	ldr	r0, [pc, #84]	; (80023e4 <IMU_getData+0x9c>)
 800238e:	f006 feb7 	bl	8009100 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <IMU_getData+0x90>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f00e fd74 	bl	8010e84 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 800239c:	89fa      	ldrh	r2, [r7, #14]
 800239e:	89bb      	ldrh	r3, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	2b7f      	cmp	r3, #127	; 0x7f
 80023a4:	dc07      	bgt.n	80023b6 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80023a6:	89fb      	ldrh	r3, [r7, #14]
 80023a8:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <IMU_getData+0xa0>)
 80023aa:	4413      	add	r3, r2
 80023ac:	89ba      	ldrh	r2, [r7, #12]
 80023ae:	490f      	ldr	r1, [pc, #60]	; (80023ec <IMU_getData+0xa4>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f018 f801 	bl	801a3b8 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80023b6:	89fa      	ldrh	r2, [r7, #14]
 80023b8:	89bb      	ldrh	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 80023be:	88fa      	ldrh	r2, [r7, #6]
 80023c0:	89bb      	ldrh	r3, [r7, #12]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1c5      	bne.n	8002358 <IMU_getData+0x10>
	}
	return (true); //Done!
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20027c50 	.word	0x20027c50
 80023dc:	20000006 	.word	0x20000006
 80023e0:	20000bfc 	.word	0x20000bfc
 80023e4:	2002824c 	.word	0x2002824c
 80023e8:	2002817c 	.word	0x2002817c
 80023ec:	20000c00 	.word	0x20000c00

080023f0 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	4603      	mov	r3, r0
 80023f8:	460a      	mov	r2, r1
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002400:	79bb      	ldrb	r3, [r7, #6]
 8002402:	3304      	adds	r3, #4
 8002404:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002406:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <IMU_sendPacket+0x84>)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	121b      	asrs	r3, r3, #8
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <IMU_sendPacket+0x84>)
 8002414:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <IMU_sendPacket+0x84>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <IMU_sendPacket+0x88>)
 8002420:	5cd2      	ldrb	r2, [r2, r3]
 8002422:	1c51      	adds	r1, r2, #1
 8002424:	b2c8      	uxtb	r0, r1
 8002426:	4914      	ldr	r1, [pc, #80]	; (8002478 <IMU_sendPacket+0x88>)
 8002428:	54c8      	strb	r0, [r1, r3]
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <IMU_sendPacket+0x84>)
 800242c:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 800242e:	79bb      	ldrb	r3, [r7, #6]
 8002430:	461a      	mov	r2, r3
 8002432:	4912      	ldr	r1, [pc, #72]	; (800247c <IMU_sendPacket+0x8c>)
 8002434:	4812      	ldr	r0, [pc, #72]	; (8002480 <IMU_sendPacket+0x90>)
 8002436:	f017 ffbf 	bl	801a3b8 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <IMU_sendPacket+0x94>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f04f 31ff 	mov.w	r1, #4294967295
 8002442:	4618      	mov	r0, r3
 8002444:	f00e fcb8 	bl	8010db8 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <IMU_sendPacket+0x98>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b299      	uxth	r1, r3
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	b29a      	uxth	r2, r3
 8002452:	2364      	movs	r3, #100	; 0x64
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <IMU_sendPacket+0x84>)
 800245a:	480c      	ldr	r0, [pc, #48]	; (800248c <IMU_sendPacket+0x9c>)
 800245c:	f006 fd5c 	bl	8008f18 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <IMU_sendPacket+0x94>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f00e fd0d 	bl	8010e84 <osSemaphoreRelease>

	return (true);
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20028208 	.word	0x20028208
 8002478:	20000bf4 	.word	0x20000bf4
 800247c:	2002817c 	.word	0x2002817c
 8002480:	2002820c 	.word	0x2002820c
 8002484:	20027c50 	.word	0x20027c50
 8002488:	20000006 	.word	0x20000006
 800248c:	2002824c 	.word	0x2002824c

08002490 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <vPortSuppressTicksAndSleep+0x84>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <vPortSuppressTicksAndSleep+0x84>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a4:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024aa:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80024ae:	f011 fa6f 	bl	8013990 <eTaskConfirmSleepModeStatus>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <vPortSuppressTicksAndSleep+0x84>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a15      	ldr	r2, [pc, #84]	; (8002514 <vPortSuppressTicksAndSleep+0x84>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024c4:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 80024c6:	e021      	b.n	800250c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d002      	beq.n	80024d6 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f869 	bl	80025a8 <LpTimerStart>
    LpEnter( );
 80024d6:	f000 f8cb 	bl	8002670 <LpEnter>
    if (xExpectedIdleTime != (~0))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d005      	beq.n	80024ee <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 80024e2:	f000 f8cd 	bl	8002680 <LpGetElapsedTime>
 80024e6:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f010 ff6b 	bl	80133c4 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <vPortSuppressTicksAndSleep+0x88>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <vPortSuppressTicksAndSleep+0x84>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a06      	ldr	r2, [pc, #24]	; (8002514 <vPortSuppressTicksAndSleep+0x84>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <vPortSuppressTicksAndSleep+0x8c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a06      	ldr	r2, [pc, #24]	; (8002520 <vPortSuppressTicksAndSleep+0x90>)
 8002506:	3b01      	subs	r3, #1
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	b662      	cpsie	i
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	e000e010 	.word	0xe000e010
 8002518:	e000e018 	.word	0xe000e018
 800251c:	20000c1c 	.word	0x20000c1c
 8002520:	e000e014 	.word	0xe000e014

08002524 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002528:	f000 f828 	bl	800257c <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <vPortSetupTimerInterrupt+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <vPortSetupTimerInterrupt+0x44>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	4a0c      	ldr	r2, [pc, #48]	; (800256c <vPortSetupTimerInterrupt+0x48>)
 800253a:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <vPortSetupTimerInterrupt+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <vPortSetupTimerInterrupt+0x50>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <vPortSetupTimerInterrupt+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <vPortSetupTimerInterrupt+0x44>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <vPortSetupTimerInterrupt+0x54>)
 8002556:	3b01      	subs	r3, #1
 8002558:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <vPortSetupTimerInterrupt+0x4c>)
 800255c:	2207      	movs	r2, #7
 800255e:	601a      	str	r2, [r3, #0]
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000078 	.word	0x20000078
 8002568:	10624dd3 	.word	0x10624dd3
 800256c:	20000c1c 	.word	0x20000c1c
 8002570:	e000e010 	.word	0xe000e010
 8002574:	e000e018 	.word	0xe000e018
 8002578:	e000e014 	.word	0xe000e014

0800257c <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <LpTimerInit+0x14>)
 8002582:	2200      	movs	r2, #0
 8002584:	4903      	ldr	r1, [pc, #12]	; (8002594 <LpTimerInit+0x18>)
 8002586:	2000      	movs	r0, #0
 8002588:	f001 f83a 	bl	8003600 <HW_TS_Create>

  return;
 800258c:	bf00      	nop
}
 800258e:	bd80      	pop	{r7, pc}
 8002590:	08002599 	.word	0x08002599
 8002594:	20000c24 	.word	0x20000c24

08002598 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 800259c:	bf00      	nop
}
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d80c      	bhi.n	80025d4 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a28      	ldr	r2, [pc, #160]	; (8002660 <LpTimerStart+0xb8>)
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <LpTimerStart+0xbc>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	e034      	b.n	800263e <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <LpTimerStart+0xc0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d81b      	bhi.n	8002614 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <LpTimerStart+0xbc>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <LpTimerStart+0xc0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d806      	bhi.n	800260c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	e018      	b.n	800263e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	e014      	b.n	800263e <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <LpTimerStart+0xbc>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002628:	4293      	cmp	r3, r2
 800262a:	d805      	bhi.n	8002638 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <LpTimerStart+0xb8>)
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	e002      	b.n	800263e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
 800263c:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <LpTimerStart+0xc4>)
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f8db 	bl	8003800 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 800264a:	f001 f95f 	bl	800390c <HW_TS_RTC_ReadLeftTicksToCount>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <LpTimerStart+0xc4>)
 8002654:	601a      	str	r2, [r3, #0]

  return;
 8002656:	bf00      	nop
}
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	000f4240 	.word	0x000f4240
 8002664:	0113094d 	.word	0x0113094d
 8002668:	00418937 	.word	0x00418937
 800266c:	20000c20 	.word	0x20000c20

08002670 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 8002674:	bf00      	nop
}
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <LpGetElapsedTime+0x60>)
 8002688:	681c      	ldr	r4, [r3, #0]
 800268a:	f001 f93f 	bl	800390c <HW_TS_RTC_ReadLeftTicksToCount>
 800268e:	4603      	mov	r3, r0
 8002690:	1ae3      	subs	r3, r4, r3
 8002692:	f04f 0400 	mov.w	r4, #0
 8002696:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <LpGetElapsedTime+0x64>)
 8002698:	fb02 f104 	mul.w	r1, r2, r4
 800269c:	2200      	movs	r2, #0
 800269e:	fb02 f203 	mul.w	r2, r2, r3
 80026a2:	440a      	add	r2, r1
 80026a4:	490f      	ldr	r1, [pc, #60]	; (80026e4 <LpGetElapsedTime+0x64>)
 80026a6:	fba3 3401 	umull	r3, r4, r3, r1
 80026aa:	4422      	add	r2, r4
 80026ac:	4614      	mov	r4, r2
 80026ae:	e9c7 3400 	strd	r3, r4, [r7]
 80026b2:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 80026b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <LpGetElapsedTime+0x68>)
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	f7fe fa24 	bl	8000b0c <__aeabi_uldivmod>
 80026c4:	4603      	mov	r3, r0
 80026c6:	460c      	mov	r4, r1
 80026c8:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <LpGetElapsedTime+0x60>)
 80026ce:	791b      	ldrb	r3, [r3, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 f80b 	bl	80036ec <HW_TS_Stop>

  return (uint32_t)return_value;
 80026d6:	683b      	ldr	r3, [r7, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd90      	pop	{r4, r7, pc}
 80026e0:	20000c20 	.word	0x20000c20
 80026e4:	00077240 	.word	0x00077240
 80026e8:	000f4240 	.word	0x000f4240

080026ec <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 80026ec:	b4b0      	push	{r4, r5, r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <_GeometryBuilder+0x54>)
 80026f8:	461c      	mov	r4, r3
 80026fa:	4615      	mov	r5, r2
 80026fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002704:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <_GeometryBuilder+0x58>)
 8002710:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002714:	4615      	mov	r5, r2
 8002716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <_GeometryBuilder+0x5c>)
 800272a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800272e:	4613      	mov	r3, r2
 8002730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bcb0      	pop	{r4, r5, r7}
 800273e:	4770      	bx	lr
 8002740:	20000008 	.word	0x20000008
 8002744:	20000038 	.word	0x20000038
 8002748:	20000c28 	.word	0x20000c28

0800274c <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b096      	sub	sp, #88	; 0x58
 8002750:	af02      	add	r7, sp, #8
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2bc7      	cmp	r3, #199	; 0xc7
 800275c:	f340 8093 	ble.w	8002886 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3360      	adds	r3, #96	; 0x60
 8002764:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 8002766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	015b      	lsls	r3, r3, #5
 800276c:	3310      	adds	r3, #16
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	4413      	add	r3, r2
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002778:	2300      	movs	r3, #0
 800277a:	64bb      	str	r3, [r7, #72]	; 0x48
 800277c:	e011      	b.n	80027a2 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002784:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002786:	3104      	adds	r1, #4
 8002788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002794:	4293      	cmp	r3, r2
 8002796:	bf38      	it	cc
 8002798:	4613      	movcc	r3, r2
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800279c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279e:	3301      	adds	r3, #1
 80027a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	ddea      	ble.n	800277e <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80027a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027aa:	2b0b      	cmp	r3, #11
 80027ac:	d86b      	bhi.n	8002886 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80027bc:	f107 0214 	add.w	r2, r7, #20
 80027c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c4:	4619      	mov	r1, r3
 80027c6:	eef0 0a47 	vmov.f32	s1, s14
 80027ca:	eeb0 0a67 	vmov.f32	s0, s15
 80027ce:	f000 f8e5 	bl	800299c <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027da:	edd3 7a02 	vldr	s15, [r3, #8]
 80027de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80027e4:	f107 0208 	add.w	r2, r7, #8
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	4619      	mov	r1, r3
 80027ee:	eef0 0a47 	vmov.f32	s1, s14
 80027f2:	eeb0 0a67 	vmov.f32	s0, s15
 80027f6:	f000 f8d1 	bl	800299c <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3370      	adds	r3, #112	; 0x70
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	327c      	adds	r2, #124	; 0x7c
 8002802:	f107 0520 	add.w	r5, r7, #32
 8002806:	f107 0408 	add.w	r4, r7, #8
 800280a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800280e:	f107 0014 	add.w	r0, r7, #20
 8002812:	9201      	str	r2, [sp, #4]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	462b      	mov	r3, r5
 8002818:	4622      	mov	r2, r4
 800281a:	f000 f945 	bl	8002aa8 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800281e:	2300      	movs	r3, #0
 8002820:	647b      	str	r3, [r7, #68]	; 0x44
 8002822:	e019      	b.n	8002858 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002828:	331c      	adds	r3, #28
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002848:	331c      	adds	r3, #28
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002854:	3301      	adds	r3, #1
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285a:	2b02      	cmp	r3, #2
 800285c:	dde2      	ble.n	8002824 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 800285e:	f004 f871 	bl	8006944 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <consume_angles+0x144>)
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8002874:	2300      	movs	r3, #0
 8002876:	2200      	movs	r2, #0
 8002878:	f00e fbe2 	bl	8011040 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <consume_angles+0x148>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f00e faff 	bl	8010e84 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 8002886:	bf00      	nop
 8002888:	3750      	adds	r7, #80	; 0x50
 800288a:	46bd      	mov	sp, r7
 800288c:	bdb0      	pop	{r4, r5, r7, pc}
 800288e:	bf00      	nop
 8002890:	20027b4c 	.word	0x20027b4c
 8002894:	20028090 	.word	0x20028090

08002898 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3304      	adds	r3, #4
 80028a8:	ed93 7a00 	vldr	s14, [r3]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3308      	adds	r3, #8
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3308      	adds	r3, #8
 80028bc:	edd3 6a00 	vldr	s13, [r3]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3304      	adds	r3, #4
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3308      	adds	r3, #8
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	edd3 6a00 	vldr	s13, [r3]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3308      	adds	r3, #8
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002902:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	ed93 7a00 	vldr	s14, [r3]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	3304      	adds	r3, #4
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3304      	adds	r3, #4
 800291c:	edd3 6a00 	vldr	s13, [r3]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3308      	adds	r3, #8
 800292e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002932:	edc3 7a00 	vstr	s15, [r3]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <vec_length>:

float vec_length(float *vec) {
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	461a      	mov	r2, r3
 8002950:	2103      	movs	r1, #3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f017 fa40 	bl	8019dd8 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	f107 0308 	add.w	r3, r7, #8
 8002960:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002962:	edd7 7a05 	vldr	s15, [r7, #20]
 8002966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	db09      	blt.n	8002984 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002970:	ed97 0a05 	vldr	s0, [r7, #20]
 8002974:	f017 fea4 	bl	801a6c0 <sqrtf>
 8002978:	eef0 7a40 	vmov.f32	s15, s0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	edc3 7a00 	vstr	s15, [r3]
 8002982:	e003      	b.n	800298c <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

    return res;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	ee07 3a90 	vmov	s15, r3
}
 8002992:	eeb0 0a67 	vmov.f32	s0, s15
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b09a      	sub	sp, #104	; 0x68
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6178      	str	r0, [r7, #20]
 80029a4:	ed87 0a04 	vstr	s0, [r7, #16]
 80029a8:	edc7 0a03 	vstr	s1, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 80029b0:	ed97 0a04 	vldr	s0, [r7, #16]
 80029b4:	f017 fb3c 	bl	801a030 <arm_cos_f32>
 80029b8:	eef0 7a40 	vmov.f32	s15, s0
 80029bc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c6:	ed97 0a04 	vldr	s0, [r7, #16]
 80029ca:	f017 faeb 	bl	8019fa4 <arm_sin_f32>
 80029ce:	eef0 7a40 	vmov.f32	s15, s0
 80029d2:	eef1 7a67 	vneg.f32	s15, s15
 80029d6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80029e4:	f017 fb24 	bl	801a030 <arm_cos_f32>
 80029e8:	eef0 7a40 	vmov.f32	s15, s0
 80029ec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80029f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80029f4:	f017 fad6 	bl	8019fa4 <arm_sin_f32>
 80029f8:	eef0 7a40 	vmov.f32	s15, s0
 80029fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8002a0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a10:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff3d 	bl	8002898 <vec_cross_product>
    float len = vec_length(ray);
 8002a1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff8d 	bl	8002942 <vec_length>
 8002a28:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8002a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a30:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a38:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a40:	2203      	movs	r2, #3
 8002a42:	eeb0 0a66 	vmov.f32	s0, s13
 8002a46:	4618      	mov	r0, r3
 8002a48:	f017 fb96 	bl	801a178 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002a50:	2303      	movs	r3, #3
 8002a52:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	330c      	adds	r3, #12
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	863b      	strh	r3, [r7, #48]	; 0x30
 8002a5e:	2301      	movs	r3, #1
 8002a60:	867b      	strh	r3, [r7, #50]	; 0x32
 8002a62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8002a68:	2303      	movs	r3, #3
 8002a6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8002a74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a78:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a80:	4618      	mov	r0, r3
 8002a82:	f017 f9ef 	bl	8019e64 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f107 011c 	add.w	r1, r7, #28
 8002a98:	2303      	movs	r3, #3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	f017 fc08 	bl	801a2b0 <arm_add_f32>
}
 8002aa0:	bf00      	nop
 8002aa2:	3768      	adds	r7, #104	; 0x68
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b098      	sub	sp, #96	; 0x60
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8002ab6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8002ac2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f017 fafa 	bl	801a0c4 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002ad0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	68b8      	ldr	r0, [r7, #8]
 8002ada:	f017 fb91 	bl	801a200 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8002ade:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f017 fb8a 	bl	801a200 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8002aec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002af0:	2203      	movs	r2, #3
 8002af2:	6839      	ldr	r1, [r7, #0]
 8002af4:	6838      	ldr	r0, [r7, #0]
 8002af6:	f017 fb83 	bl	801a200 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8002afa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002afe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002b02:	2203      	movs	r2, #3
 8002b04:	68b8      	ldr	r0, [r7, #8]
 8002b06:	f017 fb7b 	bl	801a200 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8002b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b0e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002b12:	2203      	movs	r2, #3
 8002b14:	6838      	ldr	r0, [r7, #0]
 8002b16:	f017 fb73 	bl	801a200 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002b1a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002b1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b26:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002b2a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8002b3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b42:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002c60 <intersect_lines+0x1b8>
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	d501      	bpl.n	8002b54 <intersect_lines+0xac>
        return 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e081      	b.n	8002c58 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8002b54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002b58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b60:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002b64:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b70:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 8002b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8002b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4619      	mov	r1, r3
 8002b90:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f017 faef 	bl	801a178 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002b9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	f017 fb83 	bl	801a2b0 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002baa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002bae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002bba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bc6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	2203      	movs	r2, #3
 8002be4:	4619      	mov	r1, r3
 8002be6:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002bea:	6838      	ldr	r0, [r7, #0]
 8002bec:	f017 fac4 	bl	801a178 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002bf0:	f107 021c 	add.w	r2, r7, #28
 8002bf4:	f107 001c 	add.w	r0, r7, #28
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f017 fb58 	bl	801a2b0 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002c00:	f107 0310 	add.w	r3, r7, #16
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002c0c:	f107 0210 	add.w	r2, r7, #16
 8002c10:	f107 011c 	add.w	r1, r7, #28
 8002c14:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002c18:	2303      	movs	r3, #3
 8002c1a:	f017 fb49 	bl	801a2b0 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002c1e:	f107 0310 	add.w	r3, r7, #16
 8002c22:	2203      	movs	r2, #3
 8002c24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c26:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f017 faa4 	bl	801a178 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002c30:	f107 0210 	add.w	r2, r7, #16
 8002c34:	f107 011c 	add.w	r1, r7, #28
 8002c38:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f017 fa41 	bl	801a0c4 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fe7b 	bl	8002942 <vec_length>
 8002c4c:	eef0 7a40 	vmov.f32	s15, s0
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3760      	adds	r7, #96	; 0x60
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	3727c5ac 	.word	0x3727c5ac

08002c64 <LL_AHB2_GRP1_EnableClock>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c88:	68fb      	ldr	r3, [r7, #12]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cac:	2004      	movs	r0, #4
 8002cae:	f7ff ffd9 	bl	8002c64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb2:	2080      	movs	r0, #128	; 0x80
 8002cb4:	f7ff ffd6 	bl	8002c64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7ff ffd3 	bl	8002c64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7ff ffd0 	bl	8002c64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cc4:	2010      	movs	r0, #16
 8002cc6:	f7ff ffcd 	bl	8002c64 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cca:	2308      	movs	r3, #8
 8002ccc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4829      	ldr	r0, [pc, #164]	; (8002d80 <MX_GPIO_Init+0xe8>)
 8002cdc:	f005 feec 	bl	8008ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002ce0:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8002ce4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4824      	ldr	r0, [pc, #144]	; (8002d84 <MX_GPIO_Init+0xec>)
 8002cf4:	f005 fee0 	bl	8008ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002cf8:	f248 13dc 	movw	r3, #33244	; 0x81dc
 8002cfc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0e:	f005 fed3 	bl	8008ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002d12:	2320      	movs	r3, #32
 8002d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <MX_GPIO_Init+0xf0>)
 8002d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d26:	f005 fec7 	bl	8008ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <MX_GPIO_Init+0xf4>)
 8002d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4812      	ldr	r0, [pc, #72]	; (8002d84 <MX_GPIO_Init+0xec>)
 8002d3c:	f005 febc 	bl	8008ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d40:	2310      	movs	r3, #16
 8002d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d44:	2303      	movs	r3, #3
 8002d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480f      	ldr	r0, [pc, #60]	; (8002d90 <MX_GPIO_Init+0xf8>)
 8002d52:	f005 feb1 	bl	8008ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2105      	movs	r1, #5
 8002d5a:	2008      	movs	r0, #8
 8002d5c:	f005 fb25 	bl	80083aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002d60:	2008      	movs	r0, #8
 8002d62:	f005 fb3c 	bl	80083de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2105      	movs	r1, #5
 8002d6a:	2017      	movs	r0, #23
 8002d6c:	f005 fb1d 	bl	80083aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d70:	2017      	movs	r0, #23
 8002d72:	f005 fb34 	bl	80083de <HAL_NVIC_EnableIRQ>

}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	48001c00 	.word	0x48001c00
 8002d84:	48000400 	.word	0x48000400
 8002d88:	10210000 	.word	0x10210000
 8002d8c:	10110000 	.word	0x10110000
 8002d90:	48001000 	.word	0x48001000

08002d94 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002da2:	4905      	ldr	r1, [pc, #20]	; (8002db8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	58000800 	.word	0x58000800

08002dbc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4904      	ldr	r1, [pc, #16]	; (8002ddc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]

}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	58000800 	.word	0x58000800

08002de0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <ReadRtcSsrValue+0x3c>)
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <ReadRtcSsrValue+0x3c>)
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002df6:	e005      	b.n	8002e04 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <ReadRtcSsrValue+0x3c>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1f5      	bne.n	8002df8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002e0c:	683b      	ldr	r3, [r7, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40002800 	.word	0x40002800

08002e20 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	460a      	mov	r2, r1
 8002e2a:	71fb      	strb	r3, [r7, #7]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002e30:	79ba      	ldrb	r2, [r7, #6]
 8002e32:	491d      	ldr	r1, [pc, #116]	; (8002ea8 <LinkTimerAfter+0x88>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3315      	adds	r3, #21
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d009      	beq.n	8002e5e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	4916      	ldr	r1, [pc, #88]	; (8002ea8 <LinkTimerAfter+0x88>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	3314      	adds	r3, #20
 8002e5a:	79fa      	ldrb	r2, [r7, #7]
 8002e5c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	4911      	ldr	r1, [pc, #68]	; (8002ea8 <LinkTimerAfter+0x88>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3315      	adds	r3, #21
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002e72:	79fa      	ldrb	r2, [r7, #7]
 8002e74:	490c      	ldr	r1, [pc, #48]	; (8002ea8 <LinkTimerAfter+0x88>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	3314      	adds	r3, #20
 8002e82:	79ba      	ldrb	r2, [r7, #6]
 8002e84:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002e86:	79ba      	ldrb	r2, [r7, #6]
 8002e88:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <LinkTimerAfter+0x88>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	3315      	adds	r3, #21
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	701a      	strb	r2, [r3, #0]

  return;
 8002e9a:	bf00      	nop
}
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200002d4 	.word	0x200002d4

08002eac <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	71fb      	strb	r3, [r7, #7]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <LinkTimerBefore+0xb8>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	79ba      	ldrb	r2, [r7, #6]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d032      	beq.n	8002f2e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002ec8:	79ba      	ldrb	r2, [r7, #6]
 8002eca:	4927      	ldr	r1, [pc, #156]	; (8002f68 <LinkTimerBefore+0xbc>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	4922      	ldr	r1, [pc, #136]	; (8002f68 <LinkTimerBefore+0xbc>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3315      	adds	r3, #21
 8002eec:	79fa      	ldrb	r2, [r7, #7]
 8002eee:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002ef0:	79fa      	ldrb	r2, [r7, #7]
 8002ef2:	491d      	ldr	r1, [pc, #116]	; (8002f68 <LinkTimerBefore+0xbc>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	3315      	adds	r3, #21
 8002f00:	79ba      	ldrb	r2, [r7, #6]
 8002f02:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002f04:	79fa      	ldrb	r2, [r7, #7]
 8002f06:	4918      	ldr	r1, [pc, #96]	; (8002f68 <LinkTimerBefore+0xbc>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	3314      	adds	r3, #20
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f18:	79ba      	ldrb	r2, [r7, #6]
 8002f1a:	4913      	ldr	r1, [pc, #76]	; (8002f68 <LinkTimerBefore+0xbc>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	3314      	adds	r3, #20
 8002f28:	79fa      	ldrb	r2, [r7, #7]
 8002f2a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002f2c:	e014      	b.n	8002f58 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	490d      	ldr	r1, [pc, #52]	; (8002f68 <LinkTimerBefore+0xbc>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3315      	adds	r3, #21
 8002f3e:	79ba      	ldrb	r2, [r7, #6]
 8002f40:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f42:	79ba      	ldrb	r2, [r7, #6]
 8002f44:	4908      	ldr	r1, [pc, #32]	; (8002f68 <LinkTimerBefore+0xbc>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3314      	adds	r3, #20
 8002f52:	79fa      	ldrb	r2, [r7, #7]
 8002f54:	701a      	strb	r2, [r3, #0]
  return;
 8002f56:	bf00      	nop
}
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000364 	.word	0x20000364
 8002f68:	200002d4 	.word	0x200002d4

08002f6c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f76:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <linkTimer+0x144>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d118      	bne.n	8002fb2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <linkTimer+0x144>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <linkTimer+0x148>)
 8002f88:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002f8a:	4a49      	ldr	r2, [pc, #292]	; (80030b0 <linkTimer+0x144>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002f90:	79fa      	ldrb	r2, [r7, #7]
 8002f92:	4949      	ldr	r1, [pc, #292]	; (80030b8 <linkTimer+0x14c>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3315      	adds	r3, #21
 8002fa0:	2206      	movs	r2, #6
 8002fa2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fa4:	4b45      	ldr	r3, [pc, #276]	; (80030bc <linkTimer+0x150>)
 8002fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002faa:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	81fb      	strh	r3, [r7, #14]
 8002fb0:	e078      	b.n	80030a4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002fb2:	f000 f909 	bl	80031c8 <ReturnTimeElapsed>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002fba:	79fa      	ldrb	r2, [r7, #7]
 8002fbc:	493e      	ldr	r1, [pc, #248]	; (80030b8 <linkTimer+0x14c>)
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3308      	adds	r3, #8
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	89fb      	ldrh	r3, [r7, #14]
 8002fce:	79fa      	ldrb	r2, [r7, #7]
 8002fd0:	4419      	add	r1, r3
 8002fd2:	4839      	ldr	r0, [pc, #228]	; (80030b8 <linkTimer+0x14c>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4403      	add	r3, r0
 8002fde:	3308      	adds	r3, #8
 8002fe0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002fe2:	79fa      	ldrb	r2, [r7, #7]
 8002fe4:	4934      	ldr	r1, [pc, #208]	; (80030b8 <linkTimer+0x14c>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <linkTimer+0x144>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <linkTimer+0x14c>)
 8003000:	460b      	mov	r3, r1
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	440b      	add	r3, r1
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	3308      	adds	r3, #8
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	d337      	bcc.n	8003084 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003014:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <linkTimer+0x144>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800301a:	7b7a      	ldrb	r2, [r7, #13]
 800301c:	4926      	ldr	r1, [pc, #152]	; (80030b8 <linkTimer+0x14c>)
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	3315      	adds	r3, #21
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800302e:	e013      	b.n	8003058 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003030:	7b7a      	ldrb	r2, [r7, #13]
 8003032:	4921      	ldr	r1, [pc, #132]	; (80030b8 <linkTimer+0x14c>)
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	3315      	adds	r3, #21
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003044:	7b7a      	ldrb	r2, [r7, #13]
 8003046:	491c      	ldr	r1, [pc, #112]	; (80030b8 <linkTimer+0x14c>)
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	3315      	adds	r3, #21
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003058:	7b3b      	ldrb	r3, [r7, #12]
 800305a:	2b06      	cmp	r3, #6
 800305c:	d00b      	beq.n	8003076 <linkTimer+0x10a>
 800305e:	7b3a      	ldrb	r2, [r7, #12]
 8003060:	4915      	ldr	r1, [pc, #84]	; (80030b8 <linkTimer+0x14c>)
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	3308      	adds	r3, #8
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d2dc      	bcs.n	8003030 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8003076:	7b7a      	ldrb	r2, [r7, #13]
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fecf 	bl	8002e20 <LinkTimerAfter>
 8003082:	e00f      	b.n	80030a4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <linkTimer+0x144>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff0c 	bl	8002eac <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <linkTimer+0x144>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <linkTimer+0x148>)
 800309c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <linkTimer+0x144>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80030a4:	89fb      	ldrh	r3, [r7, #14]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000364 	.word	0x20000364
 80030b4:	20000365 	.word	0x20000365
 80030b8:	200002d4 	.word	0x200002d4
 80030bc:	20000368 	.word	0x20000368

080030c0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	460a      	mov	r2, r1
 80030ca:	71fb      	strb	r3, [r7, #7]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <UnlinkTimer+0xf8>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	79fa      	ldrb	r2, [r7, #7]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d111      	bne.n	8003100 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <UnlinkTimer+0xf8>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <UnlinkTimer+0xfc>)
 80030e4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80030e6:	79fa      	ldrb	r2, [r7, #7]
 80030e8:	4935      	ldr	r1, [pc, #212]	; (80031c0 <UnlinkTimer+0x100>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	3315      	adds	r3, #21
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <UnlinkTimer+0xf8>)
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e03e      	b.n	800317e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003100:	79fa      	ldrb	r2, [r7, #7]
 8003102:	492f      	ldr	r1, [pc, #188]	; (80031c0 <UnlinkTimer+0x100>)
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	3314      	adds	r3, #20
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003114:	79fa      	ldrb	r2, [r7, #7]
 8003116:	492a      	ldr	r1, [pc, #168]	; (80031c0 <UnlinkTimer+0x100>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	3315      	adds	r3, #21
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003128:	79f9      	ldrb	r1, [r7, #7]
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	4824      	ldr	r0, [pc, #144]	; (80031c0 <UnlinkTimer+0x100>)
 800312e:	460b      	mov	r3, r1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	440b      	add	r3, r1
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4403      	add	r3, r0
 8003138:	3315      	adds	r3, #21
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b2d8      	uxtb	r0, r3
 800313e:	4920      	ldr	r1, [pc, #128]	; (80031c0 <UnlinkTimer+0x100>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	3315      	adds	r3, #21
 800314c:	4602      	mov	r2, r0
 800314e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003150:	7bbb      	ldrb	r3, [r7, #14]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d013      	beq.n	800317e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8003156:	79f9      	ldrb	r1, [r7, #7]
 8003158:	7bba      	ldrb	r2, [r7, #14]
 800315a:	4819      	ldr	r0, [pc, #100]	; (80031c0 <UnlinkTimer+0x100>)
 800315c:	460b      	mov	r3, r1
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	440b      	add	r3, r1
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4403      	add	r3, r0
 8003166:	3314      	adds	r3, #20
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	4914      	ldr	r1, [pc, #80]	; (80031c0 <UnlinkTimer+0x100>)
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	3314      	adds	r3, #20
 800317a:	4602      	mov	r2, r0
 800317c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	490f      	ldr	r1, [pc, #60]	; (80031c0 <UnlinkTimer+0x100>)
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	330c      	adds	r3, #12
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <UnlinkTimer+0xf8>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b06      	cmp	r3, #6
 800319a:	d107      	bne.n	80031ac <UnlinkTimer+0xec>
 800319c:	79bb      	ldrb	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <UnlinkTimer+0x104>)
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	601a      	str	r2, [r3, #0]
  }

  return;
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
}
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	20000364 	.word	0x20000364
 80031bc:	20000365 	.word	0x20000365
 80031c0:	200002d4 	.word	0x200002d4
 80031c4:	20000368 	.word	0x20000368

080031c8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <ReturnTimeElapsed+0x70>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d6:	d026      	beq.n	8003226 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80031d8:	f7ff fe02 	bl	8002de0 <ReadRtcSsrValue>
 80031dc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <ReturnTimeElapsed+0x70>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d805      	bhi.n	80031f4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <ReturnTimeElapsed+0x70>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	e00a      	b.n	800320a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <ReturnTimeElapsed+0x74>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <ReturnTimeElapsed+0x70>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	4413      	add	r3, r2
 8003208:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <ReturnTimeElapsed+0x78>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <ReturnTimeElapsed+0x7c>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	40d3      	lsrs	r3, r2
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	e001      	b.n	800322a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	b29b      	uxth	r3, r3
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000368 	.word	0x20000368
 800323c:	20000c3e 	.word	0x20000c3e
 8003240:	20000c3d 	.word	0x20000c3d
 8003244:	20000c3c 	.word	0x20000c3c

08003248 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d108      	bne.n	800326a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003258:	f7ff fdc2 	bl	8002de0 <ReadRtcSsrValue>
 800325c:	4602      	mov	r2, r0
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <RestartWakeupCounter+0xa8>)
 8003260:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003262:	2003      	movs	r0, #3
 8003264:	f005 f8db 	bl	800841e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003268:	e03e      	b.n	80032e8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d803      	bhi.n	8003278 <RestartWakeupCounter+0x30>
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <RestartWakeupCounter+0xac>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d002      	beq.n	800327e <RestartWakeupCounter+0x36>
      Value -= 1;
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	3b01      	subs	r3, #1
 800327c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800327e:	bf00      	nop
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <RestartWakeupCounter+0xb0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f7      	beq.n	8003280 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <RestartWakeupCounter+0xb0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <RestartWakeupCounter+0xb0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <RestartWakeupCounter+0xb4>)
 80032a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032ac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80032ae:	2003      	movs	r0, #3
 80032b0:	f005 f8c3 	bl	800843a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <RestartWakeupCounter+0xb8>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	88fa      	ldrh	r2, [r7, #6]
 80032be:	4910      	ldr	r1, [pc, #64]	; (8003300 <RestartWakeupCounter+0xb8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80032c4:	f7ff fd8c 	bl	8002de0 <ReadRtcSsrValue>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <RestartWakeupCounter+0xa8>)
 80032cc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <RestartWakeupCounter+0xb0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <RestartWakeupCounter+0xb0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80032e2:	f3af 8000 	nop.w
  return ;
 80032e6:	bf00      	nop
}
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000368 	.word	0x20000368
 80032f4:	20000c3c 	.word	0x20000c3c
 80032f8:	20000c38 	.word	0x20000c38
 80032fc:	58000800 	.word	0x58000800
 8003300:	40002800 	.word	0x40002800

08003304 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <RescheduleTimerList+0x124>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003316:	d108      	bne.n	800332a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003318:	bf00      	nop
 800331a:	4b44      	ldr	r3, [pc, #272]	; (800342c <RescheduleTimerList+0x128>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f7      	bne.n	800331a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800332a:	4b40      	ldr	r3, [pc, #256]	; (800342c <RescheduleTimerList+0x128>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <RescheduleTimerList+0x128>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800333e:	4b3c      	ldr	r3, [pc, #240]	; (8003430 <RescheduleTimerList+0x12c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	493b      	ldr	r1, [pc, #236]	; (8003434 <RescheduleTimerList+0x130>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	3308      	adds	r3, #8
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003358:	f7ff ff36 	bl	80031c8 <ReturnTimeElapsed>
 800335c:	4603      	mov	r3, r0
 800335e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d205      	bcs.n	8003374 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800336c:	4b32      	ldr	r3, [pc, #200]	; (8003438 <RescheduleTimerList+0x134>)
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e04d      	b.n	8003410 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4a31      	ldr	r2, [pc, #196]	; (800343c <RescheduleTimerList+0x138>)
 8003378:	8812      	ldrh	r2, [r2, #0]
 800337a:	b292      	uxth	r2, r2
 800337c:	4413      	add	r3, r2
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4293      	cmp	r3, r2
 8003384:	d906      	bls.n	8003394 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <RescheduleTimerList+0x138>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <RescheduleTimerList+0x134>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e03d      	b.n	8003410 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	b29a      	uxth	r2, r3
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800339e:	4b26      	ldr	r3, [pc, #152]	; (8003438 <RescheduleTimerList+0x134>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033a4:	e034      	b.n	8003410 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	4922      	ldr	r1, [pc, #136]	; (8003434 <RescheduleTimerList+0x130>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	3308      	adds	r3, #8
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d20a      	bcs.n	80033d4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	491c      	ldr	r1, [pc, #112]	; (8003434 <RescheduleTimerList+0x130>)
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	3308      	adds	r3, #8
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e013      	b.n	80033fc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	4917      	ldr	r1, [pc, #92]	; (8003434 <RescheduleTimerList+0x130>)
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	3308      	adds	r3, #8
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	1ac9      	subs	r1, r1, r3
 80033ec:	4811      	ldr	r0, [pc, #68]	; (8003434 <RescheduleTimerList+0x130>)
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4403      	add	r3, r0
 80033f8:	3308      	adds	r3, #8
 80033fa:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	490d      	ldr	r1, [pc, #52]	; (8003434 <RescheduleTimerList+0x130>)
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	3315      	adds	r3, #21
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d1c7      	bne.n	80033a6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003416:	89bb      	ldrh	r3, [r7, #12]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff15 	bl	8003248 <RestartWakeupCounter>

  return ;
 800341e:	bf00      	nop
}
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40002800 	.word	0x40002800
 800342c:	20000c38 	.word	0x20000c38
 8003430:	20000364 	.word	0x20000364
 8003434:	200002d4 	.word	0x200002d4
 8003438:	2000036c 	.word	0x2000036c
 800343c:	20000c40 	.word	0x20000c40

08003440 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800344c:	4a61      	ldr	r2, [pc, #388]	; (80035d4 <HW_TS_Init+0x194>)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003452:	4b60      	ldr	r3, [pc, #384]	; (80035d4 <HW_TS_Init+0x194>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ca      	movs	r2, #202	; 0xca
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
 800345c:	4b5d      	ldr	r3, [pc, #372]	; (80035d4 <HW_TS_Init+0x194>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2253      	movs	r2, #83	; 0x53
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003466:	4b5c      	ldr	r3, [pc, #368]	; (80035d8 <HW_TS_Init+0x198>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4a5b      	ldr	r2, [pc, #364]	; (80035d8 <HW_TS_Init+0x198>)
 800346c:	f043 0320 	orr.w	r3, r3, #32
 8003470:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003472:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HW_TS_Init+0x198>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f1c3 0304 	rsb	r3, r3, #4
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b55      	ldr	r3, [pc, #340]	; (80035dc <HW_TS_Init+0x19c>)
 8003486:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HW_TS_Init+0x198>)
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003490:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003494:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	fa92 f2a2 	rbit	r2, r2
 800349c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	fab2 f282 	clz	r2, r2
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	40d3      	lsrs	r3, r2
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b4c      	ldr	r3, [pc, #304]	; (80035e0 <HW_TS_Init+0x1a0>)
 80034b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80034b2:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <HW_TS_Init+0x198>)
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3301      	adds	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HW_TS_Init+0x1a4>)
 80034c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HW_TS_Init+0x1a4>)
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	4a44      	ldr	r2, [pc, #272]	; (80035e0 <HW_TS_Init+0x1a0>)
 80034ce:	7812      	ldrb	r2, [r2, #0]
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034d8:	4a40      	ldr	r2, [pc, #256]	; (80035dc <HW_TS_Init+0x19c>)
 80034da:	7812      	ldrb	r2, [r2, #0]
 80034dc:	40d3      	lsrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d904      	bls.n	80034f4 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80034ea:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <HW_TS_Init+0x1a8>)
 80034ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	e003      	b.n	80034fc <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HW_TS_Init+0x1a8>)
 80034fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80034fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003500:	f7ff fc5c 	bl	8002dbc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003504:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003508:	f7ff fc44 	bl	8002d94 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d143      	bne.n	800359a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HW_TS_Init+0x1ac>)
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <HW_TS_Init+0x1b0>)
 800351a:	f04f 32ff 	mov.w	r2, #4294967295
 800351e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003520:	2300      	movs	r3, #0
 8003522:	75fb      	strb	r3, [r7, #23]
 8003524:	e00c      	b.n	8003540 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003526:	7dfa      	ldrb	r2, [r7, #23]
 8003528:	4932      	ldr	r1, [pc, #200]	; (80035f4 <HW_TS_Init+0x1b4>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	330c      	adds	r3, #12
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800353a:	7dfb      	ldrb	r3, [r7, #23]
 800353c:	3301      	adds	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b05      	cmp	r3, #5
 8003544:	d9ef      	bls.n	8003526 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003546:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <HW_TS_Init+0x1b8>)
 8003548:	2206      	movs	r2, #6
 800354a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <HW_TS_Init+0x194>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <HW_TS_Init+0x194>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <HW_TS_Init+0x194>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <HW_TS_Init+0x194>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003574:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003576:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HW_TS_Init+0x1bc>)
 8003578:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800357c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800357e:	2003      	movs	r0, #3
 8003580:	f004 ff5b 	bl	800843a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HW_TS_Init+0x194>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HW_TS_Init+0x194>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e00a      	b.n	80035b0 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HW_TS_Init+0x194>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80035aa:	2003      	movs	r0, #3
 80035ac:	f004 ff37 	bl	800841e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HW_TS_Init+0x194>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	22ff      	movs	r2, #255	; 0xff
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80035ba:	2200      	movs	r2, #0
 80035bc:	2106      	movs	r1, #6
 80035be:	2003      	movs	r0, #3
 80035c0:	f004 fef3 	bl	80083aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80035c4:	2003      	movs	r0, #3
 80035c6:	f004 ff0a 	bl	80083de <HAL_NVIC_EnableIRQ>

  return;
 80035ca:	bf00      	nop
}
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000c38 	.word	0x20000c38
 80035d8:	40002800 	.word	0x40002800
 80035dc:	20000c3c 	.word	0x20000c3c
 80035e0:	20000c3d 	.word	0x20000c3d
 80035e4:	20000c3e 	.word	0x20000c3e
 80035e8:	20000c40 	.word	0x20000c40
 80035ec:	2000036c 	.word	0x2000036c
 80035f0:	20000368 	.word	0x20000368
 80035f4:	200002d4 	.word	0x200002d4
 80035f8:	20000364 	.word	0x20000364
 80035fc:	58000800 	.word	0x58000800

08003600 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003600:	b480      	push	{r7}
 8003602:	b08b      	sub	sp, #44	; 0x2c
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003616:	f3ef 8310 	mrs	r3, PRIMASK
 800361a:	61fb      	str	r3, [r7, #28]
  return(result);
 800361c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800361e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003620:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003622:	e004      	b.n	800362e <HW_TS_Create+0x2e>
  {
    loop++;
 8003624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003628:	3301      	adds	r3, #1
 800362a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800362e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003632:	2b05      	cmp	r3, #5
 8003634:	d80c      	bhi.n	8003650 <HW_TS_Create+0x50>
 8003636:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800363a:	492b      	ldr	r1, [pc, #172]	; (80036e8 <HW_TS_Create+0xe8>)
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	440b      	add	r3, r1
 8003646:	330c      	adds	r3, #12
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e9      	bne.n	8003624 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003650:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003654:	2b06      	cmp	r3, #6
 8003656:	d037      	beq.n	80036c8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003658:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800365c:	4922      	ldr	r1, [pc, #136]	; (80036e8 <HW_TS_Create+0xe8>)
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	330c      	adds	r3, #12
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003678:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800367c:	491a      	ldr	r1, [pc, #104]	; (80036e8 <HW_TS_Create+0xe8>)
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	3310      	adds	r3, #16
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800368e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003692:	4915      	ldr	r1, [pc, #84]	; (80036e8 <HW_TS_Create+0xe8>)
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	330d      	adds	r3, #13
 80036a0:	79fa      	ldrb	r2, [r7, #7]
 80036a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80036a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80036a8:	490f      	ldr	r1, [pc, #60]	; (80036e8 <HW_TS_Create+0xe8>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80036be:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036c6:	e007      	b.n	80036d8 <HW_TS_Create+0xd8>
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80036d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036dc:	4618      	mov	r0, r3
 80036de:	372c      	adds	r7, #44	; 0x2c
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	200002d4 	.word	0x200002d4

080036ec <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f6:	f3ef 8310 	mrs	r3, PRIMASK
 80036fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80036fc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003700:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003702:	2003      	movs	r0, #3
 8003704:	f004 fe79 	bl	80083fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003708:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <HW_TS_Stop+0xfc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	22ca      	movs	r2, #202	; 0xca
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
 8003712:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HW_TS_Stop+0xfc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2253      	movs	r2, #83	; 0x53
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800371c:	79fa      	ldrb	r2, [r7, #7]
 800371e:	4933      	ldr	r1, [pc, #204]	; (80037ec <HW_TS_Stop+0x100>)
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	330c      	adds	r3, #12
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d148      	bne.n	80037c6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fcc1 	bl	80030c0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800373e:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HW_TS_Stop+0x104>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	2b06      	cmp	r3, #6
 8003748:	d135      	bne.n	80037b6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HW_TS_Stop+0x108>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003756:	d108      	bne.n	800376a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003758:	bf00      	nop
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HW_TS_Stop+0xfc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f7      	bne.n	800375a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <HW_TS_Stop+0xfc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HW_TS_Stop+0xfc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800377e:	bf00      	nop
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HW_TS_Stop+0xfc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f7      	beq.n	8003780 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HW_TS_Stop+0xfc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HW_TS_Stop+0xfc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80037a4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HW_TS_Stop+0x10c>)
 80037a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037ac:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80037ae:	2003      	movs	r0, #3
 80037b0:	f004 fe43 	bl	800843a <HAL_NVIC_ClearPendingIRQ>
 80037b4:	e007      	b.n	80037c6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HW_TS_Stop+0x110>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	7cfa      	ldrb	r2, [r7, #19]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80037c2:	f7ff fd9f 	bl	8003304 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HW_TS_Stop+0xfc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80037d0:	2003      	movs	r0, #3
 80037d2:	f004 fe04 	bl	80083de <HAL_NVIC_EnableIRQ>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80037e0:	bf00      	nop
}
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000c38 	.word	0x20000c38
 80037ec:	200002d4 	.word	0x200002d4
 80037f0:	20000364 	.word	0x20000364
 80037f4:	40002800 	.word	0x40002800
 80037f8:	58000800 	.word	0x58000800
 80037fc:	20000365 	.word	0x20000365

08003800 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800380c:	79fa      	ldrb	r2, [r7, #7]
 800380e:	493b      	ldr	r1, [pc, #236]	; (80038fc <HW_TS_Start+0xfc>)
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	330c      	adds	r3, #12
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d103      	bne.n	800382c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff60 	bl	80036ec <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	60fb      	str	r3, [r7, #12]
  return(result);
 8003832:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003834:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003836:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003838:	2003      	movs	r0, #3
 800383a:	f004 fdde 	bl	80083fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800383e:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HW_TS_Start+0x100>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	22ca      	movs	r2, #202	; 0xca
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HW_TS_Start+0x100>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2253      	movs	r2, #83	; 0x53
 8003850:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003852:	79fa      	ldrb	r2, [r7, #7]
 8003854:	4929      	ldr	r1, [pc, #164]	; (80038fc <HW_TS_Start+0xfc>)
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	330c      	adds	r3, #12
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003866:	79fa      	ldrb	r2, [r7, #7]
 8003868:	4924      	ldr	r1, [pc, #144]	; (80038fc <HW_TS_Start+0xfc>)
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	3308      	adds	r3, #8
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800387a:	79fa      	ldrb	r2, [r7, #7]
 800387c:	491f      	ldr	r1, [pc, #124]	; (80038fc <HW_TS_Start+0xfc>)
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	440b      	add	r3, r1
 8003888:	3304      	adds	r3, #4
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fb6b 	bl	8002f6c <linkTimer>
 8003896:	4603      	mov	r3, r0
 8003898:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HW_TS_Start+0x104>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HW_TS_Start+0x108>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	7c7a      	ldrb	r2, [r7, #17]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d002      	beq.n	80038b2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80038ac:	f7ff fd2a 	bl	8003304 <RescheduleTimerList>
 80038b0:	e013      	b.n	80038da <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80038b2:	79fa      	ldrb	r2, [r7, #7]
 80038b4:	4911      	ldr	r1, [pc, #68]	; (80038fc <HW_TS_Start+0xfc>)
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3308      	adds	r3, #8
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	8a7b      	ldrh	r3, [r7, #18]
 80038c6:	79fa      	ldrb	r2, [r7, #7]
 80038c8:	1ac9      	subs	r1, r1, r3
 80038ca:	480c      	ldr	r0, [pc, #48]	; (80038fc <HW_TS_Start+0xfc>)
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4403      	add	r3, r0
 80038d6:	3308      	adds	r3, #8
 80038d8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HW_TS_Start+0x100>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80038e4:	2003      	movs	r0, #3
 80038e6:	f004 fd7a 	bl	80083de <HAL_NVIC_EnableIRQ>
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80038f4:	bf00      	nop
}
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200002d4 	.word	0x200002d4
 8003900:	20000c38 	.word	0x20000c38
 8003904:	20000364 	.word	0x20000364
 8003908:	20000365 	.word	0x20000365

0800390c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003912:	f3ef 8310 	mrs	r3, PRIMASK
 8003916:	60bb      	str	r3, [r7, #8]
  return(result);
 8003918:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800391a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800391c:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d112      	bne.n	8003952 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 8003932:	f7ff fc49 	bl	80031c8 <ReturnTimeElapsed>
 8003936:	4603      	mov	r3, r0
 8003938:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 800393a:	89fa      	ldrh	r2, [r7, #14]
 800393c:	89bb      	ldrh	r3, [r7, #12]
 800393e:	429a      	cmp	r2, r3
 8003940:	d904      	bls.n	800394c <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 8003942:	89fa      	ldrh	r2, [r7, #14]
 8003944:	89bb      	ldrh	r3, [r7, #12]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	82fb      	strh	r3, [r7, #22]
 800394a:	e005      	b.n	8003958 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	82fb      	strh	r3, [r7, #22]
 8003950:	e002      	b.n	8003958 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 8003952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003956:	82fb      	strh	r3, [r7, #22]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 8003962:	8afb      	ldrh	r3, [r7, #22]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40002800 	.word	0x40002800

08003970 <LL_AHB2_GRP1_EnableClock>:
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800397e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4313      	orrs	r3, r2
 8003986:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4013      	ands	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <MX_I2C1_Init+0x78>)
 80039dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <MX_I2C1_Init+0x7c>)
 80039e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ea:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a0e:	480e      	ldr	r0, [pc, #56]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a10:	f005 f9f2 	bl	8008df8 <HAL_I2C_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a1a:	f000 fd65 	bl	80044e8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4809      	ldr	r0, [pc, #36]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a22:	f007 f8ea 	bl	800abfa <HAL_I2CEx_ConfigAnalogFilter>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a2c:	f000 fd5c 	bl	80044e8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a30:	2100      	movs	r1, #0
 8003a32:	4805      	ldr	r0, [pc, #20]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a34:	f007 f92c 	bl	800ac90 <HAL_I2CEx_ConfigDigitalFilter>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003a3e:	f000 fd53 	bl	80044e8 <Error_Handler>
  }

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2002824c 	.word	0x2002824c
 8003a4c:	40005400 	.word	0x40005400
 8003a50:	00e27cae 	.word	0x00e27cae

08003a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_I2C_MspInit+0x6c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d120      	bne.n	8003ab8 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7ff ff7a 	bl	8003970 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a82:	2312      	movs	r3, #18
 8003a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	4619      	mov	r1, r3
 8003a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a9c:	f005 f80c 	bl	8008ab8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003aa0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003aa4:	f7ff ff7d 	bl	80039a2 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2105      	movs	r1, #5
 8003aac:	201e      	movs	r0, #30
 8003aae:	f004 fc7c 	bl	80083aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ab2:	201e      	movs	r0, #30
 8003ab4:	f004 fc93 	bl	80083de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40005400 	.word	0x40005400

08003ac4 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <InertialSensingTask+0xec>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8003ad2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ad6:	2120      	movs	r1, #32
 8003ad8:	204a      	movs	r0, #74	; 0x4a
 8003ada:	f7fd ffeb 	bl	8001ab4 <IMU_begin>
#endif

	uint32_t evt = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2001      	movs	r0, #1
 8003aea:	f00c fd99 	bl	8010620 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 8003aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003af2:	f00c fe29 	bl	8010748 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003af6:	2064      	movs	r0, #100	; 0x64
 8003af8:	f7fe fad6 	bl	80020a8 <IMU_enableRotationVector>
		osDelay(100);
 8003afc:	2064      	movs	r0, #100	; 0x64
 8003afe:	f00c fe23 	bl	8010748 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <InertialSensingTask+0xf0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2c      	ldr	r2, [pc, #176]	; (8003bb8 <InertialSensingTask+0xf4>)
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b0e:	f7fe fad9 	bl	80020c4 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003b12:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003b16:	f00c fe17 	bl	8010748 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003b1a:	2064      	movs	r0, #100	; 0x64
 8003b1c:	f00c fe14 	bl	8010748 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003b20:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <InertialSensingTask+0xf8>)
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	2364      	movs	r3, #100	; 0x64
 8003b26:	2200      	movs	r2, #0
 8003b28:	4925      	ldr	r1, [pc, #148]	; (8003bc0 <InertialSensingTask+0xfc>)
 8003b2a:	f00d fafd 	bl	8011128 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <InertialSensingTask+0x100>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	2200      	movs	r2, #0
 8003b36:	4924      	ldr	r1, [pc, #144]	; (8003bc8 <InertialSensingTask+0x104>)
 8003b38:	f00d faf6 	bl	8011128 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8003b3c:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <InertialSensingTask+0x108>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2200      	movs	r2, #0
 8003b44:	491e      	ldr	r1, [pc, #120]	; (8003bc0 <InertialSensingTask+0xfc>)
 8003b46:	f00d fa7b 	bl	8011040 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8003b4a:	2120      	movs	r1, #32
 8003b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b50:	f005 f922 	bl	8008d98 <HAL_GPIO_ReadPin>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <InertialSensingTask+0x9a>
 8003b5a:	f7fd ffe3 	bl	8001b24 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	2002      	movs	r0, #2
 8003b64:	f00c fd5c 	bl	8010620 <osThreadFlagsWait>
 8003b68:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0d2      	beq.n	8003b1a <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003b74:	f7fe fa38 	bl	8001fe8 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b7c:	f00c fde4 	bl	8010748 <osDelay>

				inertialEnabled = 0;
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <InertialSensingTask+0xec>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <InertialSensingTask+0x108>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f00d fb3e 	bl	801120c <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <InertialSensingTask+0x100>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f00d fb39 	bl	801120c <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <InertialSensingTask+0xf8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f00d fb34 	bl	801120c <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003ba4:	200e      	movs	r0, #14
 8003ba6:	f00c fceb 	bl	8010580 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003baa:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003bac:	e799      	b.n	8003ae2 <InertialSensingTask+0x1e>
 8003bae:	bf00      	nop
 8003bb0:	20000c42 	.word	0x20000c42
 8003bb4:	20000068 	.word	0x20000068
 8003bb8:	200282dc 	.word	0x200282dc
 8003bbc:	20027c68 	.word	0x20027c68
 8003bc0:	200282a0 	.word	0x200282a0
 8003bc4:	20027c44 	.word	0x20027c44
 8003bc8:	200282b8 	.word	0x200282b8
 8003bcc:	20027c54 	.word	0x20027c54

08003bd0 <HAL_GPIO_EXTI_Callback>:
//
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d105      	bne.n	8003bec <HAL_GPIO_EXTI_Callback+0x1c>
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <HAL_GPIO_EXTI_Callback+0x24>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003be8:	f7fd ff9c 	bl	8001b24 <IMU_dataAvailable>
	}
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000c42 	.word	0x20000c42

08003bf8 <_Input>:
#include "string.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003c04:	480b      	ldr	r0, [pc, #44]	; (8003c34 <_Input+0x3c>)
 8003c06:	f7fe fd71 	bl	80026ec <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	480a      	ldr	r0, [pc, #40]	; (8003c38 <_Input+0x40>)
 8003c0e:	f000 ff6f 	bl	8004af0 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <_Input+0x40>)
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <_Input+0x3c>)
 8003c16:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <_Input+0x40>)
 8003c1e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20028308 	.word	0x20028308
 8003c38:	20028390 	.word	0x20028390

08003c3c <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f00c fce6 	bl	8010620 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003c54:	4818      	ldr	r0, [pc, #96]	; (8003cb8 <PulseHandlerTask+0x7c>)
 8003c56:	f00a f939 	bl	800decc <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003c5a:	4818      	ldr	r0, [pc, #96]	; (8003cbc <PulseHandlerTask+0x80>)
 8003c5c:	f004 f9be 	bl	8007fdc <HAL_COMP_Start>
		_Input(&input0, 0);
 8003c60:	2100      	movs	r1, #0
 8003c62:	4817      	ldr	r0, [pc, #92]	; (8003cc0 <PulseHandlerTask+0x84>)
 8003c64:	f7ff ffc8 	bl	8003bf8 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <PulseHandlerTask+0x88>)
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	2200      	movs	r2, #0
 8003c72:	4915      	ldr	r1, [pc, #84]	; (8003cc8 <PulseHandlerTask+0x8c>)
 8003c74:	f00d fa58 	bl	8011128 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <PulseHandlerTask+0x84>)
 8003c7a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003c7e:	4912      	ldr	r1, [pc, #72]	; (8003cc8 <PulseHandlerTask+0x8c>)
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 ff69 	bl	8004b58 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2002      	movs	r0, #2
 8003c8c:	f00c fcc8 	bl	8010620 <osThreadFlagsWait>
 8003c90:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0e5      	beq.n	8003c68 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003c9c:	4807      	ldr	r0, [pc, #28]	; (8003cbc <PulseHandlerTask+0x80>)
 8003c9e:	f004 f9e7 	bl	8008070 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003ca2:	4805      	ldr	r0, [pc, #20]	; (8003cb8 <PulseHandlerTask+0x7c>)
 8003ca4:	f00a f93c 	bl	800df20 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <PulseHandlerTask+0x88>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f00d faad 	bl	801120c <osMessageQueueReset>
				break;
 8003cb2:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003cb4:	e7c8      	b.n	8003c48 <PulseHandlerTask+0xc>
 8003cb6:	bf00      	nop
 8003cb8:	20028888 	.word	0x20028888
 8003cbc:	200280bc 	.word	0x200280bc
 8003cc0:	20027c6c 	.word	0x20027c6c
 8003cc4:	20027b48 	.word	0x20027b48
 8003cc8:	200282e8 	.word	0x200282e8

08003ccc <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003cde:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <get3D_location+0x110>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f00d f867 	bl	8010db8 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003cea:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <get3D_location+0x114>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f00d f861 	bl	8010db8 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <get3D_location+0x118>)
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	2200      	movs	r2, #0
 8003d00:	4939      	ldr	r1, [pc, #228]	; (8003de8 <get3D_location+0x11c>)
 8003d02:	f00d fa11 	bl	8011128 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003d06:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <get3D_location+0x11c>)
 8003d08:	789b      	ldrb	r3, [r3, #2]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d116      	bne.n	8003d3c <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003d0e:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <get3D_location+0x118>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	2200      	movs	r2, #0
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <get3D_location+0x11c>)
 8003d18:	f00d f992 	bl	8011040 <osMessageQueuePut>

		blinkActive = 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003d20:	4b32      	ldr	r3, [pc, #200]	; (8003dec <get3D_location+0x120>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2102      	movs	r1, #2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f00c fbc8 	bl	80104bc <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <get3D_location+0x114>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f04f 31ff 	mov.w	r1, #4294967295
 8003d34:	4618      	mov	r0, r3
 8003d36:	f00d f83f 	bl	8010db8 <osSemaphoreAcquire>
 8003d3a:	e006      	b.n	8003d4a <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <get3D_location+0x118>)
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	2300      	movs	r3, #0
 8003d42:	2200      	movs	r2, #0
 8003d44:	4928      	ldr	r1, [pc, #160]	; (8003de8 <get3D_location+0x11c>)
 8003d46:	f00d f97b 	bl	8011040 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <get3D_location+0x124>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d52:	4618      	mov	r0, r3
 8003d54:	f00d f830 	bl	8010db8 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <get3D_location+0x128>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f00c fbac 	bl	80104bc <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <get3D_location+0x110>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f00d f823 	bl	8010db8 <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d119      	bne.n	8003dac <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003d78:	e00f      	b.n	8003d9a <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <get3D_location+0x12c>)
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d82:	2200      	movs	r2, #0
 8003d84:	491d      	ldr	r1, [pc, #116]	; (8003dfc <get3D_location+0x130>)
 8003d86:	f00d f9cf 	bl	8011128 <osMessageQueueGet>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003d90:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <get3D_location+0x134>)
 8003d92:	2118      	movs	r1, #24
 8003d94:	4819      	ldr	r0, [pc, #100]	; (8003dfc <get3D_location+0x130>)
 8003d96:	f014 fabd 	bl	8018314 <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <get3D_location+0x138>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00d f809 	bl	8010db8 <osSemaphoreAcquire>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e6      	bne.n	8003d7a <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <get3D_location+0x124>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f00d f867 	bl	8010e84 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <get3D_location+0x128>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f00c fb7d 	bl	80104bc <osThreadFlagsSet>

	if(blinkActive){
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <get3D_location+0x120>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f00c fb74 	bl	80104bc <osThreadFlagsSet>
	}

}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20028090 	.word	0x20028090
 8003de0:	20028098 	.word	0x20028098
 8003de4:	20027c64 	.word	0x20027c64
 8003de8:	200280b4 	.word	0x200280b4
 8003dec:	20027c34 	.word	0x20027c34
 8003df0:	20027c50 	.word	0x20027c50
 8003df4:	2002809c 	.word	0x2002809c
 8003df8:	20027b4c 	.word	0x20027b4c
 8003dfc:	20028660 	.word	0x20028660
 8003e00:	0801b764 	.word	0x0801b764
 8003e04:	20027c5c 	.word	0x20027c5c

08003e08 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
 8003e14:	4613      	mov	r3, r2
 8003e16:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003e1e:	723b      	strb	r3, [r7, #8]
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	817b      	strh	r3, [r7, #10]
 8003e24:	883b      	ldrh	r3, [r7, #0]
 8003e26:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <enqueue_pulse+0x38>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	f107 0108 	add.w	r1, r7, #8
 8003e30:	2300      	movs	r3, #0
 8003e32:	2200      	movs	r2, #0
 8003e34:	f00d f904 	bl	8011040 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20027b48 	.word	0x20027b48

08003e44 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e50:	4b76      	ldr	r3, [pc, #472]	; (800402c <InterProcessorTask+0x1e8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f00c ffad 	bl	8010db8 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003e5e:	bf00      	nop
 8003e60:	2364      	movs	r3, #100	; 0x64
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2306      	movs	r3, #6
 8003e66:	4a72      	ldr	r2, [pc, #456]	; (8004030 <InterProcessorTask+0x1ec>)
 8003e68:	21e6      	movs	r1, #230	; 0xe6
 8003e6a:	4872      	ldr	r0, [pc, #456]	; (8004034 <InterProcessorTask+0x1f0>)
 8003e6c:	f005 f854 	bl	8008f18 <HAL_I2C_Master_Transmit>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f4      	bne.n	8003e60 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003e76:	4b6d      	ldr	r3, [pc, #436]	; (800402c <InterProcessorTask+0x1e8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f00d f802 	bl	8010e84 <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295
 8003e84:	2100      	movs	r1, #0
 8003e86:	2001      	movs	r0, #1
 8003e88:	f00c fbca 	bl	8010620 <osThreadFlagsWait>
 8003e8c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f3      	beq.n	8003e80 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003e98:	4b67      	ldr	r3, [pc, #412]	; (8004038 <InterProcessorTask+0x1f4>)
 8003e9a:	4a68      	ldr	r2, [pc, #416]	; (800403c <InterProcessorTask+0x1f8>)
 8003e9c:	6811      	ldr	r1, [r2, #0]
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	8892      	ldrh	r2, [r2, #4]
 8003ea2:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003ea4:	4b61      	ldr	r3, [pc, #388]	; (800402c <InterProcessorTask+0x1e8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	4618      	mov	r0, r3
 8003eae:	f00c ff83 	bl	8010db8 <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100);
 8003eb2:	2364      	movs	r3, #100	; 0x64
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2306      	movs	r3, #6
 8003eb8:	4a5f      	ldr	r2, [pc, #380]	; (8004038 <InterProcessorTask+0x1f4>)
 8003eba:	21e6      	movs	r1, #230	; 0xe6
 8003ebc:	485d      	ldr	r0, [pc, #372]	; (8004034 <InterProcessorTask+0x1f0>)
 8003ebe:	f005 f82b 	bl	8008f18 <HAL_I2C_Master_Transmit>

			osDelay(100);
 8003ec2:	2064      	movs	r0, #100	; 0x64
 8003ec4:	f00c fc40 	bl	8010748 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003ec8:	4b58      	ldr	r3, [pc, #352]	; (800402c <InterProcessorTask+0x1e8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f00c ffd9 	bl	8010e84 <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2006      	movs	r0, #6
 8003eda:	f00c fba1 	bl	8010620 <osThreadFlagsWait>
 8003ede:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d079      	beq.n	8003fde <InterProcessorTask+0x19a>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003eea:	4b50      	ldr	r3, [pc, #320]	; (800402c <InterProcessorTask+0x1e8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f00c ff60 	bl	8010db8 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003ef8:	e00e      	b.n	8003f18 <InterProcessorTask+0xd4>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003efa:	4b4c      	ldr	r3, [pc, #304]	; (800402c <InterProcessorTask+0x1e8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f00c ffc0 	bl	8010e84 <osSemaphoreRelease>
 						osDelay(100);
 8003f04:	2064      	movs	r0, #100	; 0x64
 8003f06:	f00c fc1f 	bl	8010748 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <InterProcessorTask+0x1e8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f12:	4618      	mov	r0, r3
 8003f14:	f00c ff50 	bl	8010db8 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003f18:	2364      	movs	r3, #100	; 0x64
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2306      	movs	r3, #6
 8003f1e:	4a46      	ldr	r2, [pc, #280]	; (8004038 <InterProcessorTask+0x1f4>)
 8003f20:	21e6      	movs	r1, #230	; 0xe6
 8003f22:	4844      	ldr	r0, [pc, #272]	; (8004034 <InterProcessorTask+0x1f0>)
 8003f24:	f004 fff8 	bl	8008f18 <HAL_I2C_Master_Transmit>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <InterProcessorTask+0xb6>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003f2e:	2008      	movs	r0, #8
 8003f30:	f00c fb26 	bl	8010580 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003f34:	e00e      	b.n	8003f54 <InterProcessorTask+0x110>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <InterProcessorTask+0x1e8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f00c ffa2 	bl	8010e84 <osSemaphoreRelease>
 						osDelay(100);
 8003f40:	2064      	movs	r0, #100	; 0x64
 8003f42:	f00c fc01 	bl	8010748 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <InterProcessorTask+0x1e8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00c ff32 	bl	8010db8 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003f54:	2358      	movs	r3, #88	; 0x58
 8003f56:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <InterProcessorTask+0x1fc>)
 8003f58:	21e6      	movs	r1, #230	; 0xe6
 8003f5a:	4836      	ldr	r0, [pc, #216]	; (8004034 <InterProcessorTask+0x1f0>)
 8003f5c:	f005 f9c6 	bl	80092ec <HAL_I2C_Master_Receive_IT>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e7      	bne.n	8003f36 <InterProcessorTask+0xf2>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	200a      	movs	r0, #10
 8003f6e:	f00c fb57 	bl	8010620 <osThreadFlagsWait>
 8003f72:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003f74:	4b2d      	ldr	r3, [pc, #180]	; (800402c <InterProcessorTask+0x1e8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f00c ff83 	bl	8010e84 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d14e      	bne.n	8004026 <InterProcessorTask+0x1e2>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <InterProcessorTask+0x1fc>)
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	; (8004044 <InterProcessorTask+0x200>)
 8003f8e:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003f90:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <InterProcessorTask+0x1fc>)
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <InterProcessorTask+0x200>)
 8003f96:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	e01c      	b.n	8003fd8 <InterProcessorTask+0x194>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4a27      	ldr	r2, [pc, #156]	; (8004040 <InterProcessorTask+0x1fc>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4826      	ldr	r0, [pc, #152]	; (8004044 <InterProcessorTask+0x200>)
 8003fac:	f016 fa04 	bl	801a3b8 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3305      	adds	r3, #5
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4a22      	ldr	r2, [pc, #136]	; (8004040 <InterProcessorTask+0x1fc>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	2208      	movs	r2, #8
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4822      	ldr	r0, [pc, #136]	; (8004048 <InterProcessorTask+0x204>)
 8003fc0:	f016 f9fa 	bl	801a3b8 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003fc4:	4b21      	ldr	r3, [pc, #132]	; (800404c <InterProcessorTask+0x208>)
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2200      	movs	r2, #0
 8003fcc:	491d      	ldr	r1, [pc, #116]	; (8004044 <InterProcessorTask+0x200>)
 8003fce:	f00d f837 	bl	8011040 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	dddf      	ble.n	8003f9e <InterProcessorTask+0x15a>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f43f af74 	beq.w	8003ed2 <InterProcessorTask+0x8e>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <InterProcessorTask+0x1e8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f00c fee0 	bl	8010db8 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003ff8:	bf00      	nop
 8003ffa:	2364      	movs	r3, #100	; 0x64
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2306      	movs	r3, #6
 8004000:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <InterProcessorTask+0x1ec>)
 8004002:	21e6      	movs	r1, #230	; 0xe6
 8004004:	480b      	ldr	r0, [pc, #44]	; (8004034 <InterProcessorTask+0x1f0>)
 8004006:	f004 ff87 	bl	8008f18 <HAL_I2C_Master_Transmit>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f4      	bne.n	8003ffa <InterProcessorTask+0x1b6>
					osSemaphoreRelease(messageI2C_LockHandle);
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <InterProcessorTask+0x1e8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f00c ff35 	bl	8010e84 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <InterProcessorTask+0x208>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f00d f8f4 	bl	801120c <osMessageQueueReset>

					break;
 8004024:	e000      	b.n	8004028 <InterProcessorTask+0x1e4>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8004026:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8004028:	e72a      	b.n	8003e80 <InterProcessorTask+0x3c>
 800402a:	bf00      	nop
 800402c:	20027c50 	.word	0x20027c50
 8004030:	0801bd24 	.word	0x0801bd24
 8004034:	2002824c 	.word	0x2002824c
 8004038:	200286d0 	.word	0x200286d0
 800403c:	20027b50 	.word	0x20027b50
 8004040:	20028678 	.word	0x20028678
 8004044:	200286d8 	.word	0x200286d8
 8004048:	200286e0 	.word	0x200286e0
 800404c:	20027c60 	.word	0x20027c60

08004050 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2110      	movs	r1, #16
 800405e:	4618      	mov	r0, r3
 8004060:	f00c fa2c 	bl	80104bc <osThreadFlagsSet>
	test_1 = 1;
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20028094 	.word	0x20028094
 8004078:	20000c43 	.word	0x20000c43

0800407c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2108      	movs	r1, #8
 800408a:	4618      	mov	r0, r3
 800408c:	f00c fa16 	bl	80104bc <osThreadFlagsSet>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20028094 	.word	0x20028094

0800409c <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af04      	add	r7, sp, #16
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4b2e      	ldr	r3, [pc, #184]	; (8004168 <setup_LP5523+0xcc>)
 80040ae:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80040b0:	4b2e      	ldr	r3, [pc, #184]	; (800416c <setup_LP5523+0xd0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295
 80040b8:	4618      	mov	r0, r3
 80040ba:	f00c fe7d 	bl	8010db8 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 80040be:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <setup_LP5523+0xd4>)
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 80040c4:	4b28      	ldr	r3, [pc, #160]	; (8004168 <setup_LP5523+0xcc>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b299      	uxth	r1, r3
 80040ca:	2364      	movs	r3, #100	; 0x64
 80040cc:	9302      	str	r3, [sp, #8]
 80040ce:	2301      	movs	r3, #1
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	4b27      	ldr	r3, [pc, #156]	; (8004170 <setup_LP5523+0xd4>)
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2301      	movs	r3, #1
 80040d8:	2200      	movs	r2, #0
 80040da:	4826      	ldr	r0, [pc, #152]	; (8004174 <setup_LP5523+0xd8>)
 80040dc:	f005 f976 	bl	80093cc <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <setup_LP5523+0xd4>)
 80040e2:	224f      	movs	r2, #79	; 0x4f
 80040e4:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <setup_LP5523+0xcc>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b299      	uxth	r1, r3
 80040ec:	2364      	movs	r3, #100	; 0x64
 80040ee:	9302      	str	r3, [sp, #8]
 80040f0:	2301      	movs	r3, #1
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <setup_LP5523+0xd4>)
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2301      	movs	r3, #1
 80040fa:	2236      	movs	r2, #54	; 0x36
 80040fc:	481d      	ldr	r0, [pc, #116]	; (8004174 <setup_LP5523+0xd8>)
 80040fe:	f005 f965 	bl	80093cc <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <setup_LP5523+0xcc>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b299      	uxth	r1, r3
 8004108:	2364      	movs	r3, #100	; 0x64
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2309      	movs	r3, #9
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <setup_LP5523+0xdc>)
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2301      	movs	r3, #1
 8004116:	2216      	movs	r2, #22
 8004118:	4816      	ldr	r0, [pc, #88]	; (8004174 <setup_LP5523+0xd8>)
 800411a:	f005 f957 	bl	80093cc <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <setup_LP5523+0xcc>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b299      	uxth	r1, r3
 8004124:	2364      	movs	r3, #100	; 0x64
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	2309      	movs	r3, #9
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <setup_LP5523+0xe0>)
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2301      	movs	r3, #1
 8004132:	2226      	movs	r2, #38	; 0x26
 8004134:	480f      	ldr	r0, [pc, #60]	; (8004174 <setup_LP5523+0xd8>)
 8004136:	f005 f949 	bl	80093cc <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <setup_LP5523+0xcc>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	b299      	uxth	r1, r3
 8004140:	2364      	movs	r3, #100	; 0x64
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	2309      	movs	r3, #9
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <setup_LP5523+0xe4>)
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	2206      	movs	r2, #6
 8004150:	4808      	ldr	r0, [pc, #32]	; (8004174 <setup_LP5523+0xd8>)
 8004152:	f005 f93b 	bl	80093cc <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <setup_LP5523+0xd0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f00c fe92 	bl	8010e84 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	200286f1 	.word	0x200286f1
 800416c:	20027c50 	.word	0x20027c50
 8004170:	200286f0 	.word	0x200286f0
 8004174:	2002824c 	.word	0x2002824c
 8004178:	20000c5c 	.word	0x20000c5c
 800417c:	2000006c 	.word	0x2000006c
 8004180:	0801bd2c 	.word	0x0801bd2c

08004184 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af04      	add	r7, sp, #16
 800418a:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <FrontLightsSet+0x78>)
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6810      	ldr	r0, [r2, #0]
 8004192:	6851      	ldr	r1, [r2, #4]
 8004194:	c303      	stmia	r3!, {r0, r1}
 8004196:	7a12      	ldrb	r2, [r2, #8]
 8004198:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f103 0209 	add.w	r2, r3, #9
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <FrontLightsSet+0x7c>)
 80041a2:	6810      	ldr	r0, [r2, #0]
 80041a4:	6851      	ldr	r1, [r2, #4]
 80041a6:	c303      	stmia	r3!, {r0, r1}
 80041a8:	7a12      	ldrb	r2, [r2, #8]
 80041aa:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80041ac:	4b15      	ldr	r3, [pc, #84]	; (8004204 <FrontLightsSet+0x80>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f04f 31ff 	mov.w	r1, #4294967295
 80041b4:	4618      	mov	r0, r3
 80041b6:	f00c fdff 	bl	8010db8 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 80041ba:	2364      	movs	r3, #100	; 0x64
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	2309      	movs	r3, #9
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <FrontLightsSet+0x78>)
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2301      	movs	r3, #1
 80041c8:	2216      	movs	r2, #22
 80041ca:	2168      	movs	r1, #104	; 0x68
 80041cc:	480e      	ldr	r0, [pc, #56]	; (8004208 <FrontLightsSet+0x84>)
 80041ce:	f005 f8fd 	bl	80093cc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80041d2:	2364      	movs	r3, #100	; 0x64
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	2309      	movs	r3, #9
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <FrontLightsSet+0x7c>)
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	2301      	movs	r3, #1
 80041e0:	2216      	movs	r2, #22
 80041e2:	216a      	movs	r1, #106	; 0x6a
 80041e4:	4808      	ldr	r0, [pc, #32]	; (8004208 <FrontLightsSet+0x84>)
 80041e6:	f005 f8f1 	bl	80093cc <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <FrontLightsSet+0x80>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f00c fe48 	bl	8010e84 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000c44 	.word	0x20000c44
 8004200:	20000c50 	.word	0x20000c50
 8004204:	20027c50 	.word	0x20027c50
 8004208:	2002824c 	.word	0x2002824c

0800420c <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af04      	add	r7, sp, #16
 8004212:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8004214:	2034      	movs	r0, #52	; 0x34
 8004216:	f7ff ff41 	bl	800409c <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 800421a:	2035      	movs	r0, #53	; 0x35
 800421c:	f7ff ff3e 	bl	800409c <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8004224:	2001      	movs	r0, #1
 8004226:	f00c fa8f 	bl	8010748 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 800422a:	4b2f      	ldr	r3, [pc, #188]	; (80042e8 <ThreadFrontLightsTask+0xdc>)
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	f107 010c 	add.w	r1, r7, #12
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	2200      	movs	r2, #0
 8004238:	f00c ff76 	bl	8011128 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e011      	b.n	8004266 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	425b      	negs	r3, r3
 800424e:	b2d9      	uxtb	r1, r3
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <ThreadFrontLightsTask+0xe0>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	460a      	mov	r2, r1
 8004258:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3301      	adds	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b08      	cmp	r3, #8
 800426a:	ddea      	ble.n	8004242 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	e011      	b.n	8004296 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	425b      	negs	r3, r3
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <ThreadFrontLightsTask+0xe4>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4413      	add	r3, r2
 8004286:	460a      	mov	r2, r1
 8004288:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	3301      	adds	r3, #1
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b08      	cmp	r3, #8
 800429a:	ddea      	ble.n	8004272 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800429c:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <ThreadFrontLightsTask+0xe8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295
 80042a4:	4618      	mov	r0, r3
 80042a6:	f00c fd87 	bl	8010db8 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 80042aa:	2364      	movs	r3, #100	; 0x64
 80042ac:	9302      	str	r3, [sp, #8]
 80042ae:	2309      	movs	r3, #9
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <ThreadFrontLightsTask+0xe0>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2301      	movs	r3, #1
 80042b8:	2216      	movs	r2, #22
 80042ba:	2168      	movs	r1, #104	; 0x68
 80042bc:	480e      	ldr	r0, [pc, #56]	; (80042f8 <ThreadFrontLightsTask+0xec>)
 80042be:	f005 f885 	bl	80093cc <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80042c2:	2364      	movs	r3, #100	; 0x64
 80042c4:	9302      	str	r3, [sp, #8]
 80042c6:	2309      	movs	r3, #9
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <ThreadFrontLightsTask+0xe4>)
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2301      	movs	r3, #1
 80042d0:	2216      	movs	r2, #22
 80042d2:	216a      	movs	r1, #106	; 0x6a
 80042d4:	4808      	ldr	r0, [pc, #32]	; (80042f8 <ThreadFrontLightsTask+0xec>)
 80042d6:	f005 f879 	bl	80093cc <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <ThreadFrontLightsTask+0xe8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f00c fdd0 	bl	8010e84 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 80042e4:	e79c      	b.n	8004220 <ThreadFrontLightsTask+0x14>
 80042e6:	bf00      	nop
 80042e8:	20027c58 	.word	0x20027c58
 80042ec:	20000c44 	.word	0x20000c44
 80042f0:	20000c50 	.word	0x20000c50
 80042f4:	20027c50 	.word	0x20027c50
 80042f8:	2002824c 	.word	0x2002824c

080042fc <LL_RCC_LSE_SetDriveCapability>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	f023 0218 	bic.w	r2, r3, #24
 8004310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800432c:	f002 fad8 	bl	80068e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004330:	f000 f822 	bl	8004378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004334:	f7fe fcb0 	bl	8002c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8004338:	f7fd fba9 	bl	8001a8e <MX_DMA_Init>
  MX_ADC1_Init();
 800433c:	f7fc fd80 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 8004340:	f000 ff2c 	bl	800519c <MX_RTC_Init>
  MX_TIM2_Init();
 8004344:	f001 fd74 	bl	8005e30 <MX_TIM2_Init>
  MX_RF_Init();
 8004348:	f000 ff10 	bl	800516c <MX_RF_Init>
  MX_I2C1_Init();
 800434c:	f7ff fb42 	bl	80039d4 <MX_I2C1_Init>
  MX_COMP1_Init();
 8004350:	f7fd fa8a 	bl	8001868 <MX_COMP1_Init>
  MX_TIM16_Init();
 8004354:	f001 fde2 	bl	8005f1c <MX_TIM16_Init>
//  MX_IWDG_Init();
  MX_USB_Device_Init();
 8004358:	f014 ff9a 	bl	8019290 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 800435c:	f002 f9fe 	bl	800675c <MX_TSC_Init>

#ifndef BORDER_ROUTER_NODE
  USBD_Stop(&hUsbDeviceFS);
 8004360:	4804      	ldr	r0, [pc, #16]	; (8004374 <main+0x4c>)
 8004362:	f012 fc01 	bl	8016b68 <USBD_Stop>

//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8004366:	f00b ff95 	bl	8010294 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800436a:	f7fc ff99 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 800436e:	f00b ffc5 	bl	80102fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004372:	e7fe      	b.n	8004372 <main+0x4a>
 8004374:	20028a20 	.word	0x20028a20

08004378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b0ae      	sub	sp, #184	; 0xb8
 800437c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800437e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004382:	2248      	movs	r2, #72	; 0x48
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f016 f821 	bl	801a3ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800438c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	611a      	str	r2, [r3, #16]
 800439c:	615a      	str	r2, [r3, #20]
 800439e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	2250      	movs	r2, #80	; 0x50
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f016 f811 	bl	801a3ce <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ba:	f043 0310 	orr.w	r3, r3, #16
 80043be:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80043c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ca:	f043 0303 	orr.w	r3, r3, #3
 80043ce:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7ff ff93 	bl	80042fc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d6:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <SystemClock_Config+0x148>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043de:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <SystemClock_Config+0x148>)
 80043e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <SystemClock_Config+0x148>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80043f2:	230f      	movs	r3, #15
 80043f4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80043fc:	2301      	movs	r3, #1
 80043fe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004404:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004406:	2340      	movs	r3, #64	; 0x40
 8004408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800440c:	2305      	movs	r3, #5
 800440e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004418:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800441c:	4618      	mov	r0, r3
 800441e:	f007 ff91 	bl	800c344 <HAL_RCC_OscConfig>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004428:	f000 f85e 	bl	80044e8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800442c:	236f      	movs	r3, #111	; 0x6f
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004430:	2302      	movs	r3, #2
 8004432:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004434:	2300      	movs	r3, #0
 8004436:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004438:	2300      	movs	r3, #0
 800443a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800443c:	2300      	movs	r3, #0
 800443e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004440:	2300      	movs	r3, #0
 8004442:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004444:	2300      	movs	r3, #0
 8004446:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004448:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f008 fad6 	bl	800ca00 <HAL_RCC_ClockConfig>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800445a:	f000 f845 	bl	80044e8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800445e:	f643 5304 	movw	r3, #15620	; 0x3d04
 8004462:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004464:	2306      	movs	r3, #6
 8004466:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800446c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800446e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004472:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004474:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004478:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800447a:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800447e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004480:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004486:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800448a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800448c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004490:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8004498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800449e:	2302      	movs	r3, #2
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	4618      	mov	r0, r3
 80044aa:	f008 ff00 	bl	800d2ae <HAL_RCCEx_PeriphCLKConfig>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <SystemClock_Config+0x140>
  {
    Error_Handler();
 80044b4:	f000 f818 	bl	80044e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80044b8:	bf00      	nop
 80044ba:	37b8      	adds	r7, #184	; 0xb8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	58000400 	.word	0x58000400

080044c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044d6:	f002 fa23 	bl	8006920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00

080044e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <MasterThreadTask>:
uint32_t startTime = 0;
uint32_t viveStateVar = 0;
uint64_t waitTime = 0;
uint32_t lightsSimpleMessageAck = 0;

void MasterThreadTask(void *argument) {
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	6078      	str	r0, [r7, #4]
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004500:	4b81      	ldr	r3, [pc, #516]	; (8004708 <MasterThreadTask+0x210>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	f04f 33ff 	mov.w	r3, #4294967295
 8004508:	2200      	movs	r2, #0
 800450a:	4980      	ldr	r1, [pc, #512]	; (800470c <MasterThreadTask+0x214>)
 800450c:	f00c fe0c 	bl	8011128 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 8004510:	4b7f      	ldr	r3, [pc, #508]	; (8004710 <MasterThreadTask+0x218>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f00c fe79 	bl	801120c <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 800451a:	4b7d      	ldr	r3, [pc, #500]	; (8004710 <MasterThreadTask+0x218>)
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	2300      	movs	r3, #0
 8004520:	2200      	movs	r2, #0
 8004522:	497c      	ldr	r1, [pc, #496]	; (8004714 <MasterThreadTask+0x21c>)
 8004524:	f00c fd8c 	bl	8011040 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8004528:	4b7b      	ldr	r3, [pc, #492]	; (8004718 <MasterThreadTask+0x220>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 8083 	bne.w	8004638 <MasterThreadTask+0x140>
 8004532:	4b76      	ldr	r3, [pc, #472]	; (800470c <MasterThreadTask+0x214>)
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d17e      	bne.n	8004638 <MasterThreadTask+0x140>
			logEnabled = 1;
 800453a:	4b77      	ldr	r3, [pc, #476]	; (8004718 <MasterThreadTask+0x220>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004540:	4b76      	ldr	r3, [pc, #472]	; (800471c <MasterThreadTask+0x224>)
 8004542:	4a72      	ldr	r2, [pc, #456]	; (800470c <MasterThreadTask+0x214>)
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	6019      	str	r1, [r3, #0]
 8004548:	8892      	ldrh	r2, [r2, #4]
 800454a:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 800454c:	f000 f97e 	bl	800484c <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8004550:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004554:	f00c f8f8 	bl	8010748 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 8004558:	f002 f9f4 	bl	8006944 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	4b70      	ldr	r3, [pc, #448]	; (8004720 <MasterThreadTask+0x228>)
 8004560:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 8004562:	f000 f8f5 	bl	8004750 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 8004566:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <MasterThreadTask+0x22c>)
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4b6f      	ldr	r3, [pc, #444]	; (8004728 <MasterThreadTask+0x230>)
 800456c:	4a6f      	ldr	r2, [pc, #444]	; (800472c <MasterThreadTask+0x234>)
 800456e:	4970      	ldr	r1, [pc, #448]	; (8004730 <MasterThreadTask+0x238>)
 8004570:	4870      	ldr	r0, [pc, #448]	; (8004734 <MasterThreadTask+0x23c>)
 8004572:	f000 f9f3 	bl	800495c <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 8004576:	486f      	ldr	r0, [pc, #444]	; (8004734 <MasterThreadTask+0x23c>)
 8004578:	f013 fee6 	bl	8018348 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 800457c:	4b62      	ldr	r3, [pc, #392]	; (8004708 <MasterThreadTask+0x210>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	2200      	movs	r2, #0
 8004584:	4961      	ldr	r1, [pc, #388]	; (800470c <MasterThreadTask+0x214>)
 8004586:	f00c fdcf 	bl	8011128 <osMessageQueueGet>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d12c      	bne.n	80045ea <MasterThreadTask+0xf2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8004590:	4b5e      	ldr	r3, [pc, #376]	; (800470c <MasterThreadTask+0x214>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <MasterThreadTask+0xae>

						masterExitRoutine();
 8004598:	f000 f9a6 	bl	80048e8 <masterExitRoutine>
						logEnabled = 0;
 800459c:	4b5e      	ldr	r3, [pc, #376]	; (8004718 <MasterThreadTask+0x220>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 80045a2:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 80045a4:	e0ae      	b.n	8004704 <MasterThreadTask+0x20c>
					}

					else if (togLogMessageReceived.status == TARE_NOW){
 80045a6:	4b59      	ldr	r3, [pc, #356]	; (800470c <MasterThreadTask+0x214>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d11d      	bne.n	80045ea <MasterThreadTask+0xf2>
						lightsSimpleMessageAck = 0x03; // cyan (green + blue)
 80045ae:	4b62      	ldr	r3, [pc, #392]	; (8004738 <MasterThreadTask+0x240>)
 80045b0:	2203      	movs	r2, #3
 80045b2:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <MasterThreadTask+0x244>)
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	2200      	movs	r2, #0
 80045bc:	495e      	ldr	r1, [pc, #376]	; (8004738 <MasterThreadTask+0x240>)
 80045be:	f00c fd3f 	bl	8011040 <osMessageQueuePut>

						IMU_sendTareNow();
 80045c2:	f7fd fe01 	bl	80021c8 <IMU_sendTareNow>

						osDelay(100);
 80045c6:	2064      	movs	r0, #100	; 0x64
 80045c8:	f00c f8be 	bl	8010748 <osDelay>

						IMU_sendPersistTare();
 80045cc:	f7fd fe32 	bl	8002234 <IMU_sendPersistTare>

						osDelay(100);
 80045d0:	2064      	movs	r0, #100	; 0x64
 80045d2:	f00c f8b9 	bl	8010748 <osDelay>

						lightsSimpleMessageAck = 0;
 80045d6:	4b58      	ldr	r3, [pc, #352]	; (8004738 <MasterThreadTask+0x240>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 80045dc:	4b57      	ldr	r3, [pc, #348]	; (800473c <MasterThreadTask+0x244>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	2300      	movs	r3, #0
 80045e2:	2200      	movs	r2, #0
 80045e4:	4954      	ldr	r1, [pc, #336]	; (8004738 <MasterThreadTask+0x240>)
 80045e6:	f00c fd2b 	bl	8011040 <osMessageQueuePut>
					}
				}

				// add delay to wait for next transmission period
				waitTime = PACKET_SEND_PERIOD - (HAL_GetTick() - startTime);
 80045ea:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <MasterThreadTask+0x228>)
 80045ec:	681c      	ldr	r4, [r3, #0]
 80045ee:	f002 f9a9 	bl	8006944 <HAL_GetTick>
 80045f2:	4603      	mov	r3, r0
 80045f4:	1ae3      	subs	r3, r4, r3
 80045f6:	3364      	adds	r3, #100	; 0x64
 80045f8:	f04f 0400 	mov.w	r4, #0
 80045fc:	4a50      	ldr	r2, [pc, #320]	; (8004740 <MasterThreadTask+0x248>)
 80045fe:	e9c2 3400 	strd	r3, r4, [r2]
				// if wait time is less than zero (i.e. the border packet send took longer than PACKET_SEND_PERIOD)
				// or greater than the allotted PACKET_SEND_PERIOD
				if( (waitTime <= 0) || (waitTime > PACKET_SEND_PERIOD)){
 8004602:	4b4f      	ldr	r3, [pc, #316]	; (8004740 <MasterThreadTask+0x248>)
 8004604:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004608:	4323      	orrs	r3, r4
 800460a:	d006      	beq.n	800461a <MasterThreadTask+0x122>
 800460c:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <MasterThreadTask+0x248>)
 800460e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004612:	2c00      	cmp	r4, #0
 8004614:	bf08      	it	eq
 8004616:	2b65      	cmpeq	r3, #101	; 0x65
 8004618:	d307      	bcc.n	800462a <MasterThreadTask+0x132>
					waitTime = 0; //set to zero (i.e. dont wait)
 800461a:	4a49      	ldr	r2, [pc, #292]	; (8004740 <MasterThreadTask+0x248>)
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	e9c2 3400 	strd	r3, r4, [r2]
 8004628:	e005      	b.n	8004636 <MasterThreadTask+0x13e>
				}
				else{
					osDelay(waitTime);
 800462a:	4b45      	ldr	r3, [pc, #276]	; (8004740 <MasterThreadTask+0x248>)
 800462c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004630:	4618      	mov	r0, r3
 8004632:	f00c f889 	bl	8010748 <osDelay>
				startTime = HAL_GetTick();
 8004636:	e78f      	b.n	8004558 <MasterThreadTask+0x60>
				}

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8004638:	4b37      	ldr	r3, [pc, #220]	; (8004718 <MasterThreadTask+0x220>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d109      	bne.n	8004654 <MasterThreadTask+0x15c>
 8004640:	4b32      	ldr	r3, [pc, #200]	; (800470c <MasterThreadTask+0x214>)
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <MasterThreadTask+0x15c>
			logEnabled = 0;
 8004648:	4b33      	ldr	r3, [pc, #204]	; (8004718 <MasterThreadTask+0x220>)
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 800464e:	f000 f94b 	bl	80048e8 <masterExitRoutine>
 8004652:	e057      	b.n	8004704 <MasterThreadTask+0x20c>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8004654:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <MasterThreadTask+0x24c>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d141      	bne.n	80046e0 <MasterThreadTask+0x1e8>
 800465c:	4b2b      	ldr	r3, [pc, #172]	; (800470c <MasterThreadTask+0x214>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d13d      	bne.n	80046e0 <MasterThreadTask+0x1e8>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <MasterThreadTask+0x224>)
 8004666:	4a29      	ldr	r2, [pc, #164]	; (800470c <MasterThreadTask+0x214>)
 8004668:	6811      	ldr	r1, [r2, #0]
 800466a:	6019      	str	r1, [r3, #0]
 800466c:	8892      	ldrh	r2, [r2, #4]
 800466e:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 8004670:	4b29      	ldr	r3, [pc, #164]	; (8004718 <MasterThreadTask+0x220>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d104      	bne.n	8004682 <MasterThreadTask+0x18a>
				logEnabled = 0;
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <MasterThreadTask+0x220>)
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 800467e:	f000 f933 	bl	80048e8 <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <MasterThreadTask+0x24c>)
 8004684:	2202      	movs	r2, #2
 8004686:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 8004688:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <MasterThreadTask+0x250>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f00c fb92 	bl	8010db8 <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <MasterThreadTask+0x24c>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	4b2c      	ldr	r3, [pc, #176]	; (800474c <MasterThreadTask+0x254>)
 800469c:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 800469e:	f000 f8d5 	bl	800484c <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 80046a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046a6:	f00c f84f 	bl	8010748 <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 80046aa:	4b17      	ldr	r3, [pc, #92]	; (8004708 <MasterThreadTask+0x210>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295
 80046b2:	2200      	movs	r2, #0
 80046b4:	4915      	ldr	r1, [pc, #84]	; (800470c <MasterThreadTask+0x214>)
 80046b6:	f00c fd37 	bl	8011128 <osMessageQueueGet>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f4      	bne.n	80046aa <MasterThreadTask+0x1b2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 80046c0:	4b12      	ldr	r3, [pc, #72]	; (800470c <MasterThreadTask+0x214>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <MasterThreadTask+0x1b2>

						osSemaphoreRelease(lightingLabDemoEndHandle);
 80046c8:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <MasterThreadTask+0x250>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f00c fbd9 	bl	8010e84 <osSemaphoreRelease>
						masterExitRoutine();
 80046d2:	f000 f909 	bl	80048e8 <masterExitRoutine>
						lightLabDemoEnabled = 0;
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <MasterThreadTask+0x24c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 80046dc:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 80046de:	e011      	b.n	8004704 <MasterThreadTask+0x20c>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <MasterThreadTask+0x24c>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f47f af0b 	bne.w	8004500 <MasterThreadTask+0x8>
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <MasterThreadTask+0x214>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f47f af06 	bne.w	8004500 <MasterThreadTask+0x8>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 80046f4:	4b14      	ldr	r3, [pc, #80]	; (8004748 <MasterThreadTask+0x250>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f00c fbc3 	bl	8010e84 <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 80046fe:	4b11      	ldr	r3, [pc, #68]	; (8004744 <MasterThreadTask+0x24c>)
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004704:	e6fc      	b.n	8004500 <MasterThreadTask+0x8>
 8004706:	bf00      	nop
 8004708:	20028088 	.word	0x20028088
 800470c:	20027b50 	.word	0x20027b50
 8004710:	20027c64 	.word	0x20027c64
 8004714:	0801bd38 	.word	0x0801bd38
 8004718:	20000c65 	.word	0x20000c65
 800471c:	20027c28 	.word	0x20027c28
 8004720:	20000c68 	.word	0x20000c68
 8004724:	20028774 	.word	0x20028774
 8004728:	2002878c 	.word	0x2002878c
 800472c:	200287c8 	.word	0x200287c8
 8004730:	20028708 	.word	0x20028708
 8004734:	20027b5c 	.word	0x20027b5c
 8004738:	20000c78 	.word	0x20000c78
 800473c:	20027c58 	.word	0x20027c58
 8004740:	20000c70 	.word	0x20000c70
 8004744:	20000c66 	.word	0x20000c66
 8004748:	20027c5c 	.word	0x20027c5c
 800474c:	20000c6c 	.word	0x20000c6c

08004750 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 8004750:	b5b0      	push	{r4, r5, r7, lr}
 8004752:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004754:	4b30      	ldr	r3, [pc, #192]	; (8004818 <grabSensorData+0xc8>)
 8004756:	789b      	ldrb	r3, [r3, #2]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d111      	bne.n	8004780 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 800475c:	4b2f      	ldr	r3, [pc, #188]	; (800481c <grabSensorData+0xcc>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	2200      	movs	r2, #0
 8004764:	492e      	ldr	r1, [pc, #184]	; (8004820 <grabSensorData+0xd0>)
 8004766:	f00c fcdf 	bl	8011128 <osMessageQueueGet>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8004770:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <grabSensorData+0xd0>)
 8004772:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <grabSensorData+0xd4>)
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	236c      	movs	r3, #108	; 0x6c
 800477a:	461a      	mov	r2, r3
 800477c:	f015 fe1c 	bl	801a3b8 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004780:	4b25      	ldr	r3, [pc, #148]	; (8004818 <grabSensorData+0xc8>)
 8004782:	78db      	ldrb	r3, [r3, #3]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d113      	bne.n	80047b0 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8004788:	4b27      	ldr	r3, [pc, #156]	; (8004828 <grabSensorData+0xd8>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	2300      	movs	r3, #0
 800478e:	2200      	movs	r2, #0
 8004790:	4926      	ldr	r1, [pc, #152]	; (800482c <grabSensorData+0xdc>)
 8004792:	f00c fcc9 	bl	8011128 <osMessageQueueGet>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 800479c:	4a23      	ldr	r2, [pc, #140]	; (800482c <grabSensorData+0xdc>)
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <grabSensorData+0xe0>)
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047ac:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <grabSensorData+0xc8>)
 80047b2:	795b      	ldrb	r3, [r3, #5]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d113      	bne.n	80047e0 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <grabSensorData+0xe4>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	2300      	movs	r3, #0
 80047be:	2200      	movs	r2, #0
 80047c0:	491d      	ldr	r1, [pc, #116]	; (8004838 <grabSensorData+0xe8>)
 80047c2:	f00c fcb1 	bl	8011128 <osMessageQueueGet>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80047cc:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <grabSensorData+0xe8>)
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <grabSensorData+0xec>)
 80047d0:	4614      	mov	r4, r2
 80047d2:	461d      	mov	r5, r3
 80047d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047dc:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <grabSensorData+0xc8>)
 80047e2:	791b      	ldrb	r3, [r3, #4]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d115      	bne.n	8004814 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 80047e8:	4b15      	ldr	r3, [pc, #84]	; (8004840 <grabSensorData+0xf0>)
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	2200      	movs	r2, #0
 80047f0:	4914      	ldr	r1, [pc, #80]	; (8004844 <grabSensorData+0xf4>)
 80047f2:	f00c fc99 	bl	8011128 <osMessageQueueGet>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00b      	beq.n	8004814 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 80047fc:	4a11      	ldr	r2, [pc, #68]	; (8004844 <grabSensorData+0xf4>)
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <grabSensorData+0xf8>)
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004810:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8004814:	bf00      	nop
 8004816:	bdb0      	pop	{r4, r5, r7, pc}
 8004818:	20027c28 	.word	0x20027c28
 800481c:	200280a4 	.word	0x200280a4
 8004820:	20028708 	.word	0x20028708
 8004824:	0801bd40 	.word	0x0801bd40
 8004828:	20027c60 	.word	0x20027c60
 800482c:	200287c8 	.word	0x200287c8
 8004830:	0801bdac 	.word	0x0801bdac
 8004834:	20027b4c 	.word	0x20027b4c
 8004838:	20028774 	.word	0x20028774
 800483c:	0801bdec 	.word	0x0801bdec
 8004840:	20027c54 	.word	0x20027c54
 8004844:	2002878c 	.word	0x2002878c
 8004848:	0801bdc4 	.word	0x0801bdc4

0800484c <masterEnterRoutine>:

void masterEnterRoutine(void) {
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <masterEnterRoutine+0x80>)
 8004852:	789b      	ldrb	r3, [r3, #2]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004858:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <masterEnterRoutine+0x84>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f00b fe2c 	bl	80104bc <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8004864:	4b19      	ldr	r3, [pc, #100]	; (80048cc <masterEnterRoutine+0x80>)
 8004866:	795b      	ldrb	r3, [r3, #5]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d118      	bne.n	800489e <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <masterEnterRoutine+0x88>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	2200      	movs	r2, #0
 8004876:	4918      	ldr	r1, [pc, #96]	; (80048d8 <masterEnterRoutine+0x8c>)
 8004878:	f00c fc56 	bl	8011128 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 800487c:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <masterEnterRoutine+0x8c>)
 800487e:	2201      	movs	r2, #1
 8004880:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <masterEnterRoutine+0x88>)
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	2300      	movs	r3, #0
 8004888:	2200      	movs	r2, #0
 800488a:	4913      	ldr	r1, [pc, #76]	; (80048d8 <masterEnterRoutine+0x8c>)
 800488c:	f00c fbd8 	bl	8011040 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <masterEnterRoutine+0x90>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004898:	4618      	mov	r0, r3
 800489a:	f00c f81d 	bl	80108d8 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <masterEnterRoutine+0x80>)
 80048a0:	78db      	ldrb	r3, [r3, #3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80048a6:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <masterEnterRoutine+0x94>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f00b fe05 	bl	80104bc <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <masterEnterRoutine+0x80>)
 80048b4:	791b      	ldrb	r3, [r3, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d105      	bne.n	80048c6 <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <masterEnterRoutine+0x98>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2101      	movs	r1, #1
 80048c0:	4618      	mov	r0, r3
 80048c2:	f00b fdfb 	bl	80104bc <osThreadFlagsSet>
	}
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20027c28 	.word	0x20027c28
 80048d0:	20027c34 	.word	0x20027c34
 80048d4:	20027c64 	.word	0x20027c64
 80048d8:	200280b4 	.word	0x200280b4
 80048dc:	20027c3c 	.word	0x20027c3c
 80048e0:	20028094 	.word	0x20028094
 80048e4:	200280ac 	.word	0x200280ac

080048e8 <masterExitRoutine>:

void masterExitRoutine(void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80048ec:	4b15      	ldr	r3, [pc, #84]	; (8004944 <masterExitRoutine+0x5c>)
 80048ee:	789b      	ldrb	r3, [r3, #2]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <masterExitRoutine+0x60>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f00b fdde 	bl	80104bc <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8004900:	4b10      	ldr	r3, [pc, #64]	; (8004944 <masterExitRoutine+0x5c>)
 8004902:	795b      	ldrb	r3, [r3, #5]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8004908:	4b10      	ldr	r3, [pc, #64]	; (800494c <masterExitRoutine+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f00c f823 	bl	8010958 <osTimerStop>
		viveStateVar = 0;
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <masterExitRoutine+0x68>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <masterExitRoutine+0x5c>)
 800491a:	78db      	ldrb	r3, [r3, #3]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <masterExitRoutine+0x6c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2102      	movs	r1, #2
 8004926:	4618      	mov	r0, r3
 8004928:	f00b fdc8 	bl	80104bc <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <masterExitRoutine+0x5c>)
 800492e:	791b      	ldrb	r3, [r3, #4]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d105      	bne.n	8004940 <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <masterExitRoutine+0x70>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f00b fdbe 	bl	80104bc <osThreadFlagsSet>
	}

}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20027c28 	.word	0x20027c28
 8004948:	20027c34 	.word	0x20027c34
 800494c:	20027c3c 	.word	0x20027c3c
 8004950:	20000c6c 	.word	0x20000c6c
 8004954:	20028094 	.word	0x20028094
 8004958:	200280ac 	.word	0x200280ac

0800495c <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 800496a:	f001 ffeb 	bl	8006944 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8004976:	2200      	movs	r2, #0
 8004978:	4917      	ldr	r1, [pc, #92]	; (80049d8 <packetizeData+0x7c>)
 800497a:	4818      	ldr	r0, [pc, #96]	; (80049dc <packetizeData+0x80>)
 800497c:	f009 f87f 	bl	800da7e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8004980:	2200      	movs	r2, #0
 8004982:	4917      	ldr	r1, [pc, #92]	; (80049e0 <packetizeData+0x84>)
 8004984:	4815      	ldr	r0, [pc, #84]	; (80049dc <packetizeData+0x80>)
 8004986:	f009 f984 	bl	800dc92 <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 800498a:	4915      	ldr	r1, [pc, #84]	; (80049e0 <packetizeData+0x84>)
 800498c:	4812      	ldr	r0, [pc, #72]	; (80049d8 <packetizeData+0x7c>)
 800498e:	f000 fc35 	bl	80051fc <RTC_ToEpoch>
 8004992:	4602      	mov	r2, r0
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	226c      	movs	r2, #108	; 0x6c
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f015 fd09 	bl	801a3b8 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	336c      	adds	r3, #108	; 0x6c
 80049aa:	2218      	movs	r2, #24
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f015 fd02 	bl	801a3b8 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3384      	adds	r3, #132	; 0x84
 80049b8:	2228      	movs	r2, #40	; 0x28
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f015 fcfb 	bl	801a3b8 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	33ac      	adds	r3, #172	; 0xac
 80049c6:	2218      	movs	r2, #24
 80049c8:	69b9      	ldr	r1, [r7, #24]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f015 fcf4 	bl	801a3b8 <memcpy>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	200287b4 	.word	0x200287b4
 80049dc:	200287e4 	.word	0x200287e4
 80049e0:	200287e0 	.word	0x200287e0

080049e4 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d80f      	bhi.n	8004a16 <vector_push+0x32>
    	self->items[self->count++] = *item;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049fa:	1c51      	adds	r1, r2, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6619      	str	r1, [r3, #96]	; 0x60
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	440b      	add	r3, r1
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	6811      	ldr	r1, [r2, #0]
 8004a10:	6019      	str	r1, [r3, #0]
 8004a12:	8892      	ldrh	r2, [r2, #4]
 8004a14:	809a      	strh	r2, [r3, #4]
    }
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <vector_pop>:

Pulse vector_pop(vector *self){
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01c      	beq.n	8004a6e <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	18ca      	adds	r2, r1, r3
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	6810      	ldr	r0, [r2, #0]
 8004a4c:	6018      	str	r0, [r3, #0]
 8004a4e:	8892      	ldrh	r2, [r2, #4]
 8004a50:	809a      	strh	r2, [r3, #4]
		self->count--;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	1e5a      	subs	r2, r3, #1
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f107 0308 	add.w	r3, r7, #8
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	6010      	str	r0, [r2, #0]
 8004a68:	889b      	ldrh	r3, [r3, #4]
 8004a6a:	8093      	strh	r3, [r2, #4]
 8004a6c:	e005      	b.n	8004a7a <vector_pop+0x58>
	}
	return self->items[0];
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	6810      	ldr	r0, [r2, #0]
 8004a74:	6018      	str	r0, [r3, #0]
 8004a76:	8892      	ldrh	r2, [r2, #4]
 8004a78:	809a      	strh	r2, [r3, #4]
}
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	db12      	blt.n	8004abe <vector_get+0x38>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d90d      	bls.n	8004abe <vector_get+0x38>
    	return self->items[index];
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	18ca      	adds	r2, r1, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	6811      	ldr	r1, [r2, #0]
 8004ab6:	6019      	str	r1, [r3, #0]
 8004ab8:	8892      	ldrh	r2, [r2, #4]
 8004aba:	809a      	strh	r2, [r3, #4]
 8004abc:	e005      	b.n	8004aca <vector_get+0x44>
    }
    return self->items[0];
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	6810      	ldr	r0, [r2, #0]
 8004ac4:	6018      	str	r0, [r3, #0]
 8004ac6:	8892      	ldrh	r2, [r2, #4]
 8004ac8:	809a      	strh	r2, [r3, #4]
}
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <vector_clear>:

void vector_clear(vector *self){
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e00c      	b.n	8004b2c <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2264      	movs	r2, #100	; 0x64
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	3310      	adds	r3, #16
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ffd8 	bl	8004ad6 <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	ddef      	ble.n	8004b12 <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	33d8      	adds	r3, #216	; 0xd8
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ffcd 	bl	8004ad6 <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ffc7 	bl	8004ad6 <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	889b      	ldrh	r3, [r3, #4]
 8004b66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004b6a:	d303      	bcc.n	8004b74 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <consume_pulse+0x54>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004b72:	e016      	b.n	8004ba2 <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	889b      	ldrh	r3, [r3, #4]
 8004b78:	2b27      	cmp	r3, #39	; 0x27
 8004b7a:	d907      	bls.n	8004b8c <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <consume_pulse+0x54>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f813 	bl	8004bb0 <process_long_pulse>
}
 8004b8a:	e00a      	b.n	8004ba2 <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004b8c:	4b07      	ldr	r3, [pc, #28]	; (8004bac <consume_pulse+0x54>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d006      	beq.n	8004ba2 <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8004b94:	6839      	ldr	r1, [r7, #0]
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f89c 	bl	8004cd4 <process_short_pulse>
			prev_pulse_short = 1;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <consume_pulse+0x54>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000c7c 	.word	0x20000c7c

08004bb0 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d144      	bne.n	8004c4c <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03f      	beq.n	8004c4c <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff22 	bl	8004a22 <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	885a      	ldrh	r2, [r3, #2]
 8004be2:	897b      	ldrh	r3, [r7, #10]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004bfa:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004bfe:	330d      	adds	r3, #13
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f113 0f1e 	cmn.w	r3, #30
 8004c0a:	db1c      	blt.n	8004c46 <process_long_pulse+0x96>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b1d      	cmp	r3, #29
 8004c10:	dc19      	bgt.n	8004c46 <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	885a      	ldrh	r2, [r3, #2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fc fefb 	bl	8001a28 <reset>

                reset_cycle_long_pulses(self);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa64 	bl	8005100 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa7c 	bl	8005136 <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa87 	bl	8005152 <reset_cycle_short_pulses>
 8004c44:	e002      	b.n	8004c4c <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa75 	bl	8005136 <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02d      	beq.n	8004cb4 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	885a      	ldrh	r2, [r3, #2]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	891b      	ldrh	r3, [r3, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	e021      	b.n	8004cae <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004c6a:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <process_long_pulse+0x120>)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c72:	8a7a      	ldrh	r2, [r7, #18]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004c7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c7e:	f113 0f1e 	cmn.w	r3, #30
 8004c82:	db11      	blt.n	8004ca8 <process_long_pulse+0xf8>
 8004c84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c88:	2b1d      	cmp	r3, #29
 8004c8a:	dc0d      	bgt.n	8004ca8 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2264      	movs	r2, #100	; 0x64
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	3310      	adds	r3, #16
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fea1 	bl	80049e4 <vector_push>
                pulse_classified = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	77fb      	strb	r3, [r7, #31]
                break;
 8004ca6:	e005      	b.n	8004cb4 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	3301      	adds	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	ddda      	ble.n	8004c6a <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004cb4:	7ffb      	ldrb	r3, [r7, #31]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fe8e 	bl	80049e4 <vector_push>
    }
}
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	0801be04 	.word	0x0801be04

08004cd4 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00f      	beq.n	8004d06 <process_short_pulse+0x32>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d208      	bcs.n	8004d06 <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	33d8      	adds	r3, #216	; 0xd8
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fe72 	bl	80049e4 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f805 	bl	8004d10 <process_cycle_fix>
	}
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b0a2      	sub	sp, #136	; 0x88
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004d18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004d22:	2300      	movs	r3, #0
 8004d24:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d105      	bne.n	8004d3a <process_cycle_fix+0x2a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80b7 	beq.w	8004ea8 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b09      	cmp	r3, #9
 8004d40:	d80d      	bhi.n	8004d5e <process_cycle_fix+0x4e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <process_cycle_fix+0x4e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d64:	e090      	b.n	8004e88 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6c:	2164      	movs	r1, #100	; 0x64
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3370      	adds	r3, #112	; 0x70
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d07e      	beq.n	8004e7e <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	891a      	ldrh	r2, [r3, #8]
 8004d84:	49c0      	ldr	r1, [pc, #768]	; (8005088 <process_cycle_fix+0x378>)
 8004d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d9a:	e03e      	b.n	8004e1a <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004da0:	2264      	movs	r2, #100	; 0x64
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	3310      	adds	r3, #16
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	18d1      	adds	r1, r2, r3
 8004dac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004db0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fe66 	bl	8004a86 <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004dca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004dd4:	1acb      	subs	r3, r1, r3
 8004dd6:	441a      	add	r2, r3
 8004dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004de2:	440b      	add	r3, r1
 8004de4:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004df2:	4413      	add	r3, r2
 8004df4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004df8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e14:	3301      	adds	r3, #1
 8004e16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d3bb      	bcc.n	8004d9c <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d929      	bls.n	8004e7e <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e34:	4413      	add	r3, r2
 8004e36:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e4e:	440b      	add	r3, r1
 8004e50:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e5e:	4413      	add	r3, r2
 8004e60:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e78:	440b      	add	r3, r1
 8004e7a:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e82:	3301      	adds	r3, #1
 8004e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	f77f af6a 	ble.w	8004d66 <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f7fc fd3f 	bl	8001924 <process_pulse_lengths>
 8004ea6:	e008      	b.n	8004eba <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f7fc fd96 	bl	80019f8 <get_phase>
 8004ecc:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f2c0 80b5 	blt.w	8005040 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004ed6:	f107 030c 	add.w	r3, r7, #12
 8004eda:	2220      	movs	r2, #32
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f015 fa75 	bl	801a3ce <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004ee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	105b      	asrs	r3, r3, #1
 8004ef6:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	891a      	ldrh	r2, [r3, #8]
 8004efc:	4962      	ldr	r1, [pc, #392]	; (8005088 <process_cycle_fix+0x378>)
 8004efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f04:	4413      	add	r3, r2
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004f10:	440b      	add	r3, r1
 8004f12:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004f1e:	2300      	movs	r3, #0
 8004f20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f22:	e04a      	b.n	8004fba <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004f2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fda8 	bl	8004a86 <vector_get>
            uint32_t input_idx = p.input_idx;
 8004f36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f3a:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004f3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004f52:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f56:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004f5a:	d32b      	bcc.n	8004fb4 <process_cycle_fix+0x2a4>
 8004f5c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f60:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d825      	bhi.n	8004fb4 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f70:	4413      	add	r3, r2
 8004f72:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <process_cycle_fix+0x280>
 8004f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f82:	4413      	add	r3, r2
 8004f84:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004f88:	889a      	ldrh	r2, [r3, #4]
 8004f8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d211      	bcs.n	8004fb4 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f98:	4413      	add	r3, r2
 8004f9a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f9e:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004faa:	4413      	add	r3, r2
 8004fac:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004fb0:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004fc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d3ae      	bcc.n	8004f24 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fca:	e034      	b.n	8005036 <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d028      	beq.n	8005030 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe0:	015b      	lsls	r3, r3, #5
 8004fe2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004ffa:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005006:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800508c <process_cycle_fix+0x37c>
 800500a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800500e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005090 <process_cycle_fix+0x380>
 8005012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005016:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800502a:	3204      	adds	r2, #4
 800502c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8005030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005032:	3301      	adds	r3, #1
 8005034:	67bb      	str	r3, [r7, #120]	; 0x78
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800503c:	429a      	cmp	r2, r3
 800503e:	d3c5      	bcc.n	8004fcc <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	2b00      	cmp	r3, #0
 8005044:	db06      	blt.n	8005054 <process_cycle_fix+0x344>
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005048:	2b03      	cmp	r3, #3
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e008      	b.n	8005066 <process_cycle_fix+0x356>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf0c      	ite	eq
 8005060:	2301      	moveq	r3, #1
 8005062:	2300      	movne	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d02b      	beq.n	80050c2 <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	891a      	ldrh	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8005074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005076:	2b00      	cmp	r3, #0
 8005078:	db0c      	blt.n	8005094 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b04      	cmp	r3, #4
 8005080:	d908      	bls.n	8005094 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8005082:	22c8      	movs	r2, #200	; 0xc8
 8005084:	e007      	b.n	8005096 <process_cycle_fix+0x386>
 8005086:	bf00      	nop
 8005088:	0801be04 	.word	0x0801be04
 800508c:	40490fdb 	.word	0x40490fdb
 8005090:	46023400 	.word	0x46023400
 8005094:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050aa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f7fd fb45 	bl	800274c <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f81c 	bl	8005100 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f834 	bl	8005136 <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f83f 	bl	8005152 <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	891a      	ldrh	r2, [r3, #8]
 80050d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	4413      	add	r3, r2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050e4:	330d      	adds	r3, #13
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]
}
 80050f6:	bf00      	nop
 80050f8:	3788      	adds	r7, #136	; 0x88
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop

08005100 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e00c      	b.n	8005128 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2264      	movs	r2, #100	; 0x64
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	3310      	adds	r3, #16
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4413      	add	r3, r2
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fcda 	bl	8004ad6 <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	ddef      	ble.n	800510e <reset_cycle_long_pulses+0xe>
	}
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fcc6 	bl	8004ad6 <vector_clear>
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	33d8      	adds	r3, #216	; 0xd8
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fcb9 	bl	8004ad6 <vector_clear>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0

}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800517a:	b480      	push	{r7}
 800517c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800518a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005192:	bf00      	nop
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <MX_RTC_Init+0x34>)
 80051a2:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <MX_RTC_Init+0x38>)
 80051a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <MX_RTC_Init+0x34>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80051ac:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <MX_RTC_Init+0x34>)
 80051ae:	220f      	movs	r2, #15
 80051b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <MX_RTC_Init+0x34>)
 80051b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80051b8:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051ba:	4805      	ldr	r0, [pc, #20]	; (80051d0 <MX_RTC_Init+0x34>)
 80051bc:	f008 fafd 	bl	800d7ba <HAL_RTC_Init>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 80051c6:	f7ff f98f 	bl	80044e8 <Error_Handler>
  }

}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200287e4 	.word	0x200287e4
 80051d4:	40002800 	.word	0x40002800

080051d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <HAL_RTC_MspInit+0x20>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051ea:	f7ff ffc6 	bl	800517a <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40002800 	.word	0x40002800

080051fc <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	f1c3 030e 	rsb	r3, r3, #14
 800520e:	4a44      	ldr	r2, [pc, #272]	; (8005320 <RTC_ToEpoch+0x124>)
 8005210:	fb82 1203 	smull	r1, r2, r2, r3
 8005214:	1052      	asrs	r2, r2, #1
 8005216:	17db      	asrs	r3, r3, #31
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	78db      	ldrb	r3, [r3, #3]
 8005220:	b29a      	uxth	r2, r3
 8005222:	7dfb      	ldrb	r3, [r7, #23]
 8005224:	b29b      	uxth	r3, r3
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800522e:	3310      	adds	r3, #16
 8005230:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	785a      	ldrb	r2, [r3, #1]
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	4619      	mov	r1, r3
 800523a:	0049      	lsls	r1, r1, #1
 800523c:	440b      	add	r3, r1
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	b2db      	uxtb	r3, r3
 8005242:	4413      	add	r3, r2
 8005244:	b2db      	uxtb	r3, r3
 8005246:	3b03      	subs	r3, #3
 8005248:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	789b      	ldrb	r3, [r3, #2]
 800524e:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 8005250:	7cfa      	ldrb	r2, [r7, #19]
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	011a      	lsls	r2, r3, #4
 800525a:	4413      	add	r3, r2
 800525c:	3302      	adds	r3, #2
 800525e:	4a31      	ldr	r2, [pc, #196]	; (8005324 <RTC_ToEpoch+0x128>)
 8005260:	fb82 1203 	smull	r1, r2, r2, r3
 8005264:	1052      	asrs	r2, r2, #1
 8005266:	17db      	asrs	r3, r3, #31
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 8005272:	8abb      	ldrh	r3, [r7, #20]
 8005274:	f240 126d 	movw	r2, #365	; 0x16d
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	461a      	mov	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 8005284:	8abb      	ldrh	r3, [r7, #20]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	b29b      	uxth	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 8005292:	8abb      	ldrh	r3, [r7, #20]
 8005294:	425b      	negs	r3, r3
 8005296:	4a24      	ldr	r2, [pc, #144]	; (8005328 <RTC_ToEpoch+0x12c>)
 8005298:	fb82 1203 	smull	r1, r2, r2, r3
 800529c:	1152      	asrs	r2, r2, #5
 800529e:	17db      	asrs	r3, r3, #31
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 80052aa:	8abb      	ldrh	r3, [r7, #20]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <RTC_ToEpoch+0x12c>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	09db      	lsrs	r3, r3, #7
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80052c4:	3b2d      	subs	r3, #45	; 0x2d
 80052c6:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4b18      	ldr	r3, [pc, #96]	; (800532c <RTC_ToEpoch+0x130>)
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a17      	ldr	r2, [pc, #92]	; (8005330 <RTC_ToEpoch+0x134>)
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80052e4:	fb03 f302 	mul.w	r3, r3, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	789b      	ldrb	r3, [r3, #2]
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

	return JDN;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	2aaaaaab 	.word	0x2aaaaaab
 8005324:	66666667 	.word	0x66666667
 8005328:	51eb851f 	.word	0x51eb851f
 800532c:	ffdac274 	.word	0xffdac274
 8005330:	00015180 	.word	0x00015180

08005334 <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b095      	sub	sp, #84	; 0x54
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	f04f 0400 	mov.w	r4, #0
 800537e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8005388:	33c0      	adds	r3, #192	; 0xc0
 800538a:	4a7c      	ldr	r2, [pc, #496]	; (800557c <RTC_FromEpoch+0x248>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	0bda      	lsrs	r2, r3, #15
 8005392:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <RTC_FromEpoch+0x24c>)
 8005394:	4413      	add	r3, r2
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 800539e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80053a2:	0864      	lsrs	r4, r4, #1
 80053a4:	ea4f 0333 	mov.w	r3, r3, rrx
 80053a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	4a74      	ldr	r2, [pc, #464]	; (8005584 <RTC_FromEpoch+0x250>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4619      	mov	r1, r3
 80053c6:	0109      	lsls	r1, r1, #4
 80053c8:	1acb      	subs	r3, r1, r3
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	4a69      	ldr	r2, [pc, #420]	; (8005584 <RTC_FromEpoch+0x250>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	4619      	mov	r1, r3
 80053f0:	0109      	lsls	r1, r1, #4
 80053f2:	1acb      	subs	r3, r1, r3
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005406:	4a60      	ldr	r2, [pc, #384]	; (8005588 <RTC_FromEpoch+0x254>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	b29a      	uxth	r2, r3
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	b29b      	uxth	r3, r3
 8005418:	4619      	mov	r1, r3
 800541a:	0049      	lsls	r1, r1, #1
 800541c:	440b      	add	r3, r1
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	b29b      	uxth	r3, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	b29b      	uxth	r3, r3
 8005426:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 800542a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800542e:	f04f 0207 	mov.w	r2, #7
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	f7fb fb69 	bl	8000b0c <__aeabi_uldivmod>
 800543a:	461c      	mov	r4, r3
 800543c:	4613      	mov	r3, r2
 800543e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8005448:	332c      	adds	r3, #44	; 0x2c
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	3303      	adds	r3, #3
 8005452:	4a4e      	ldr	r2, [pc, #312]	; (800558c <RTC_FromEpoch+0x258>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	0bdb      	lsrs	r3, r3, #15
 800545a:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	4a4c      	ldr	r2, [pc, #304]	; (8005590 <RTC_FromEpoch+0x25c>)
 8005460:	fb02 f303 	mul.w	r3, r2, r3
 8005464:	089b      	lsrs	r3, r3, #2
 8005466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	3303      	adds	r3, #3
 8005472:	4a48      	ldr	r2, [pc, #288]	; (8005594 <RTC_FromEpoch+0x260>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	09db      	lsrs	r3, r3, #7
 800547a:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	3302      	adds	r3, #2
 8005498:	4a3f      	ldr	r2, [pc, #252]	; (8005598 <RTC_FromEpoch+0x264>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	09db      	lsrs	r3, r3, #7
 80054a0:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	b299      	uxth	r1, r3
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	011a      	lsls	r2, r3, #4
 80054b0:	4413      	add	r3, r2
 80054b2:	3302      	adds	r3, #2
 80054b4:	4a39      	ldr	r2, [pc, #228]	; (800559c <RTC_FromEpoch+0x268>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	1acb      	subs	r3, r1, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3301      	adds	r3, #1
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4932      	ldr	r1, [pc, #200]	; (800559c <RTC_FromEpoch+0x268>)
 80054d2:	fba1 1303 	umull	r1, r3, r1, r3
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4619      	mov	r1, r3
 80054dc:	0049      	lsls	r1, r1, #1
 80054de:	440b      	add	r3, r1
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3303      	adds	r3, #3
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	0092      	lsls	r2, r2, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	461a      	mov	r2, r3
 80054fc:	0091      	lsls	r1, r2, #2
 80054fe:	461a      	mov	r2, r3
 8005500:	460b      	mov	r3, r1
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	b29a      	uxth	r2, r3
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	b29b      	uxth	r3, r3
 800550c:	4413      	add	r3, r2
 800550e:	b29a      	uxth	r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4922      	ldr	r1, [pc, #136]	; (800559c <RTC_FromEpoch+0x268>)
 8005514:	fba1 1303 	umull	r1, r3, r1, r3
 8005518:	08db      	lsrs	r3, r3, #3
 800551a:	b29b      	uxth	r3, r3
 800551c:	4413      	add	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8005524:	b29b      	uxth	r3, r3
 8005526:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 800552a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800552e:	b2db      	uxtb	r3, r3
 8005530:	3330      	adds	r3, #48	; 0x30
 8005532:	b2da      	uxtb	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8005538:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800553c:	b2da      	uxtb	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 8005542:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005546:	b2da      	uxtb	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 800554c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005550:	b2da      	uxtb	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 8005556:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 8005560:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 800556a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	709a      	strb	r2, [r3, #2]
}
 8005574:	bf00      	nop
 8005576:	3754      	adds	r7, #84	; 0x54
 8005578:	46bd      	mov	sp, r7
 800557a:	bd90      	pop	{r4, r7, pc}
 800557c:	c22e4507 	.word	0xc22e4507
 8005580:	004a7b17 	.word	0x004a7b17
 8005584:	88888889 	.word	0x88888889
 8005588:	aaaaaaab 	.word	0xaaaaaaab
 800558c:	396b06bd 	.word	0x396b06bd
 8005590:	00023ab1 	.word	0x00023ab1
 8005594:	166db073 	.word	0x166db073
 8005598:	d62b80d7 	.word	0xd62b80d7
 800559c:	cccccccd 	.word	0xcccccccd

080055a0 <LL_AHB3_GRP1_EnableClock>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80055a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4013      	ands	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80055d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055da:	f7ff ffe1 	bl	80055a0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80055de:	2200      	movs	r2, #0
 80055e0:	210f      	movs	r1, #15
 80055e2:	f06f 0001 	mvn.w	r0, #1
 80055e6:	f002 fee0 	bl	80083aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80055ea:	2200      	movs	r2, #0
 80055ec:	210f      	movs	r1, #15
 80055ee:	202c      	movs	r0, #44	; 0x2c
 80055f0:	f002 fedb 	bl	80083aa <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80055f4:	2200      	movs	r2, #0
 80055f6:	210f      	movs	r1, #15
 80055f8:	202d      	movs	r0, #45	; 0x2d
 80055fa:	f002 fed6 	bl	80083aa <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80055fe:	bf00      	nop
 8005600:	bd80      	pop	{r7, pc}

08005602 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4313      	orrs	r3, r2
 8005618:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800561a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4013      	ands	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005644:	2200      	movs	r2, #0
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	2019      	movs	r0, #25
 800564a:	f002 feae 	bl	80083aa <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800564e:	2019      	movs	r0, #25
 8005650:	f002 fec5 	bl	80083de <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005654:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005658:	f7ff ffd3 	bl	8005602 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800565c:	f107 0208 	add.w	r2, r7, #8
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f007 fb9a 	bl	800cda0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800566c:	f007 fb82 	bl	800cd74 <HAL_RCC_GetPCLK2Freq>
 8005670:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <HAL_InitTick+0x8c>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	0c9b      	lsrs	r3, r3, #18
 800567c:	3b01      	subs	r3, #1
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005680:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <HAL_InitTick+0x90>)
 8005682:	4a11      	ldr	r2, [pc, #68]	; (80056c8 <HAL_InitTick+0x94>)
 8005684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <HAL_InitTick+0x90>)
 8005688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800568c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800568e:	4a0d      	ldr	r2, [pc, #52]	; (80056c4 <HAL_InitTick+0x90>)
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_InitTick+0x90>)
 8005696:	2200      	movs	r2, #0
 8005698:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <HAL_InitTick+0x90>)
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80056a0:	4808      	ldr	r0, [pc, #32]	; (80056c4 <HAL_InitTick+0x90>)
 80056a2:	f008 fbe7 	bl	800de74 <HAL_TIM_Base_Init>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80056ac:	4805      	ldr	r0, [pc, #20]	; (80056c4 <HAL_InitTick+0x90>)
 80056ae:	f008 fc63 	bl	800df78 <HAL_TIM_Base_Start_IT>
 80056b2:	4603      	mov	r3, r0
 80056b4:	e000      	b.n	80056b8 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3730      	adds	r7, #48	; 0x30
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	431bde83 	.word	0x431bde83
 80056c4:	20028808 	.word	0x20028808
 80056c8:	40012c00 	.word	0x40012c00

080056cc <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e072      	b.n	80057c4 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 f874 	bl	80067e0 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005716:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800571e:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005724:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800572a:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8005730:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8005736:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800573c:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7b1b      	ldrb	r3, [r3, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d107      	bne.n	800575e <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	43d2      	mvns	r2, r2
 8005774:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800578e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681c      	ldr	r4, [r3, #0]
 8005798:	4610      	mov	r0, r2
 800579a:	f000 f952 	bl	8005a42 <TSC_extract_groups>
 800579e:	4603      	mov	r3, r0
 80057a0:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0203 	bic.w	r2, r2, #3
 80057b0:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2203      	movs	r2, #3
 80057b8:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}

080057cc <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_TSC_Start_IT+0x16>
 80057de:	2302      	movs	r3, #2
 80057e0:	e04b      	b.n	800587a <HAL_TSC_Start_IT+0xae>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d108      	bne.n	800581e <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0202 	orr.w	r2, r2, #2
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	e007      	b.n	800582e <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0202 	bic.w	r2, r2, #2
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2203      	movs	r2, #3
 8005834:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d108      	bne.n	8005850 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0210 	bic.w	r2, r2, #16
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e007      	b.n	8005860 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0210 	orr.w	r2, r2, #16
 800585e:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0202 	orr.w	r2, r2, #2
 800586e:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	3310      	adds	r3, #16
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	401a      	ands	r2, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	3310      	adds	r3, #16
 80058ae:	2101      	movs	r1, #1
 80058b0:	fa01 f303 	lsl.w	r3, r1, r3
 80058b4:	429a      	cmp	r2, r3
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	685b      	ldr	r3, [r3, #4]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 80058ee:	b590      	push	{r4, r7, lr}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_TSC_IOConfig+0x18>
 8005902:	2302      	movs	r3, #2
 8005904:	e032      	b.n	800596c <HAL_TSC_IOConfig+0x7e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0202 	bic.w	r2, r2, #2
 800591c:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	431a      	orrs	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	43d2      	mvns	r2, r2
 8005934:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	6892      	ldr	r2, [r2, #8]
 800594e:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681c      	ldr	r4, [r3, #0]
 8005958:	4610      	mov	r0, r2
 800595a:	f000 f872 	bl	8005a42 <TSC_extract_groups>
 800595e:	4603      	mov	r3, r0
 8005960:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	bd90      	pop	{r4, r7, pc}

08005974 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_TSC_IODischarge+0x1a>
 800598a:	2302      	movs	r3, #2
 800598c:	e01c      	b.n	80059c8 <HAL_TSC_IODischarge+0x54>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d108      	bne.n	80059ae <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0210 	bic.w	r2, r2, #16
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e007      	b.n	80059be <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0210 	orr.w	r2, r2, #16
 80059bc:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d103      	bne.n	80059f2 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d10b      	bne.n	8005a18 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2202      	movs	r2, #2
 8005a06:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f80c 	bl	8005a2e <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8005a16:	e006      	b.n	8005a26 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fb31 	bl	8006088 <HAL_TSC_ConvCpltCallback>
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	e011      	b.n	8005a78 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	220f      	movs	r2, #15
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8005a64:	2201      	movs	r2, #1
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60bb      	str	r3, [r7, #8]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b06      	cmp	r3, #6
 8005a7c:	d9ea      	bls.n	8005a54 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a9e:	e7fe      	b.n	8005a9e <HardFault_Handler+0x4>

08005aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005aa4:	e7fe      	b.n	8005aa4 <MemManage_Handler+0x4>

08005aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005aaa:	e7fe      	b.n	8005aaa <BusFault_Handler+0x4>

08005aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ab0:	e7fe      	b.n	8005ab0 <UsageFault_Handler+0x4>

08005ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005ac4:	2004      	movs	r0, #4
 8005ac6:	f003 f97f 	bl	8008dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8005aca:	4b04      	ldr	r3, [pc, #16]	; (8005adc <EXTI2_IRQHandler+0x1c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2104      	movs	r1, #4
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f00a fcf3 	bl	80104bc <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20028094 	.word	0x20028094

08005ae0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005ae4:	4802      	ldr	r0, [pc, #8]	; (8005af0 <DMA1_Channel1_IRQHandler+0x10>)
 8005ae6:	f002 fe98 	bl	800881a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20027ae0 	.word	0x20027ae0

08005af4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005af8:	4802      	ldr	r0, [pc, #8]	; (8005b04 <USB_LP_IRQHandler+0x10>)
 8005afa:	f005 fa14 	bl	800af26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20029ef0 	.word	0x20029ef0

08005b08 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005b0c:	4802      	ldr	r0, [pc, #8]	; (8005b18 <COMP_IRQHandler+0x10>)
 8005b0e:	f002 fae3 	bl	80080d8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200280bc 	.word	0x200280bc

08005b1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005b20:	2020      	movs	r0, #32
 8005b22:	f003 f951 	bl	8008dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b30:	4803      	ldr	r0, [pc, #12]	; (8005b40 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005b32:	f008 fb2b 	bl	800e18c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005b36:	4803      	ldr	r0, [pc, #12]	; (8005b44 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005b38:	f008 fb28 	bl	800e18c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20028808 	.word	0x20028808
 8005b44:	20028888 	.word	0x20028888

08005b48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005b4c:	4802      	ldr	r0, [pc, #8]	; (8005b58 <I2C1_EV_IRQHandler+0x10>)
 8005b4e:	f003 fd51 	bl	80095f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	2002824c 	.word	0x2002824c

08005b5c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005b60:	f013 fa1a 	bl	8018f98 <HW_IPCC_Tx_Handler>

  return;
 8005b64:	bf00      	nop
}
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005b6c:	f013 f9ba 	bl	8018ee4 <HW_IPCC_Rx_Handler>
  return;
 8005b70:	bf00      	nop
}
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005b78:	4802      	ldr	r0, [pc, #8]	; (8005b84 <TSC_IRQHandler+0x10>)
 8005b7a:	f7ff ff2b 	bl	80059d4 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	200288fc 	.word	0x200288fc

08005b88 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005b88:	b40c      	push	{r2, r3}
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	4603      	mov	r3, r0
 8005b92:	460a      	mov	r2, r1
 8005b94:	71fb      	strb	r3, [r7, #7]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	b002      	add	sp, #8
 8005ba6:	4770      	bx	lr

08005ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005bac:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <SystemInit+0xa0>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005bb2:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <SystemInit+0xa0>)
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb8:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <SystemInit+0xa0>)
 8005bba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005bda:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be6:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <SystemInit+0xa4>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf8:	f023 0305 	bic.w	r3, r3, #5
 8005bfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c18:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <SystemInit+0xa8>)
 8005c1a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	4a0b      	ldr	r2, [pc, #44]	; (8005c50 <SystemInit+0xa8>)
 8005c22:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	e000ed00 	.word	0xe000ed00
 8005c4c:	faf6fefb 	.word	0xfaf6fefb
 8005c50:	22041000 	.word	0x22041000

08005c54 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	4a47      	ldr	r2, [pc, #284]	; (8005d84 <SystemCoreClockUpdate+0x130>)
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d867      	bhi.n	8005d4c <SystemCoreClockUpdate+0xf8>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <SystemCoreClockUpdate+0x30>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005d4d 	.word	0x08005d4d
 8005c8c:	08005d4d 	.word	0x08005d4d
 8005c90:	08005d4d 	.word	0x08005d4d
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005d4d 	.word	0x08005d4d
 8005c9c:	08005d4d 	.word	0x08005d4d
 8005ca0:	08005d4d 	.word	0x08005d4d
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d4d 	.word	0x08005d4d
 8005cb0:	08005d4d 	.word	0x08005d4d
 8005cb4:	08005cd1 	.word	0x08005cd1
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005cb8:	4a33      	ldr	r2, [pc, #204]	; (8005d88 <SystemCoreClockUpdate+0x134>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6013      	str	r3, [r2, #0]
      break;
 8005cbe:	e049      	b.n	8005d54 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005cc0:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <SystemCoreClockUpdate+0x134>)
 8005cc2:	4a32      	ldr	r2, [pc, #200]	; (8005d8c <SystemCoreClockUpdate+0x138>)
 8005cc4:	601a      	str	r2, [r3, #0]
      break;
 8005cc6:	e045      	b.n	8005d54 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005cc8:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <SystemCoreClockUpdate+0x134>)
 8005cca:	4a31      	ldr	r2, [pc, #196]	; (8005d90 <SystemCoreClockUpdate+0x13c>)
 8005ccc:	601a      	str	r2, [r3, #0]
      break;
 8005cce:	e041      	b.n	8005d54 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d105      	bne.n	8005cfe <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8005cf2:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <SystemCoreClockUpdate+0x138>)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e00d      	b.n	8005d1a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d105      	bne.n	8005d10 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <SystemCoreClockUpdate+0x13c>)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e004      	b.n	8005d1a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	0a1b      	lsrs	r3, r3, #8
 8005d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	fb02 f303 	mul.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	0f5b      	lsrs	r3, r3, #29
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d46:	4a10      	ldr	r2, [pc, #64]	; (8005d88 <SystemCoreClockUpdate+0x134>)
 8005d48:	6013      	str	r3, [r2, #0]
      break;
 8005d4a:	e003      	b.n	8005d54 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005d4c:	4a0e      	ldr	r2, [pc, #56]	; (8005d88 <SystemCoreClockUpdate+0x134>)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6013      	str	r3, [r2, #0]
      break;
 8005d52:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <SystemCoreClockUpdate+0x140>)
 8005d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d66:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005d68:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <SystemCoreClockUpdate+0x134>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <SystemCoreClockUpdate+0x134>)
 8005d74:	6013      	str	r3, [r2, #0]

}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	0801be68 	.word	0x0801be68
 8005d88:	20000078 	.word	0x20000078
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	01e84800 	.word	0x01e84800
 8005d94:	0801be08 	.word	0x0801be08

08005d98 <LL_AHB2_GRP1_EnableClock>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4013      	ands	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <LL_APB1_GRP1_EnableClock>:
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4013      	ands	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005dee:	68fb      	ldr	r3, [r7, #12]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_APB2_GRP1_EnableClock>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e20:	68fb      	ldr	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	; 0x38
 8005e34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e44:	f107 031c 	add.w	r3, r7, #28
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e50:	463b      	mov	r3, r7
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	609a      	str	r2, [r3, #8]
 8005e5a:	60da      	str	r2, [r3, #12]
 8005e5c:	611a      	str	r2, [r3, #16]
 8005e5e:	615a      	str	r2, [r3, #20]
 8005e60:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005e62:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005e6c:	f240 227f 	movw	r2, #639	; 0x27f
 8005e70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e72:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005e78:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005e7a:	2209      	movs	r2, #9
 8005e7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e7e:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e84:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e8a:	4823      	ldr	r0, [pc, #140]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005e8c:	f007 fff2 	bl	800de74 <HAL_TIM_Base_Init>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005e96:	f7fe fb27 	bl	80044e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	481c      	ldr	r0, [pc, #112]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005ea8:	f008 fba8 	bl	800e5fc <HAL_TIM_ConfigClockSource>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005eb2:	f7fe fb19 	bl	80044e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005eb6:	4818      	ldr	r0, [pc, #96]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005eb8:	f008 f888 	bl	800dfcc <HAL_TIM_PWM_Init>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005ec2:	f7fe fb11 	bl	80044e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ece:	f107 031c 	add.w	r3, r7, #28
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4810      	ldr	r0, [pc, #64]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005ed6:	f009 f817 	bl	800ef08 <HAL_TIMEx_MasterConfigSynchronization>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005ee0:	f7fe fb02 	bl	80044e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ee4:	2360      	movs	r3, #96	; 0x60
 8005ee6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8005ee8:	2309      	movs	r3, #9
 8005eea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4807      	ldr	r0, [pc, #28]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005efc:	f008 fa66 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005f06:	f7fe faef 	bl	80044e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005f0a:	4803      	ldr	r0, [pc, #12]	; (8005f18 <MX_TIM2_Init+0xe8>)
 8005f0c:	f000 f850 	bl	8005fb0 <HAL_TIM_MspPostInit>

}
 8005f10:	bf00      	nop
 8005f12:	3738      	adds	r7, #56	; 0x38
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20028848 	.word	0x20028848

08005f1c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f22:	4a10      	ldr	r2, [pc, #64]	; (8005f64 <MX_TIM16_Init+0x48>)
 8005f24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f28:	221f      	movs	r2, #31
 8005f2a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f38:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005f4c:	4804      	ldr	r0, [pc, #16]	; (8005f60 <MX_TIM16_Init+0x44>)
 8005f4e:	f007 ff91 	bl	800de74 <HAL_TIM_Base_Init>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005f58:	f7fe fac6 	bl	80044e8 <Error_Handler>
  }

}
 8005f5c:	bf00      	nop
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20028888 	.word	0x20028888
 8005f64:	40014400 	.word	0x40014400

08005f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d103      	bne.n	8005f82 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7ff ff25 	bl	8005dca <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005f80:	e010      	b.n	8005fa4 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a09      	ldr	r2, [pc, #36]	; (8005fac <HAL_TIM_Base_MspInit+0x44>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d10b      	bne.n	8005fa4 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f8c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005f90:	f7ff ff34 	bl	8005dfc <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005f94:	2200      	movs	r2, #0
 8005f96:	2100      	movs	r1, #0
 8005f98:	2019      	movs	r0, #25
 8005f9a:	f002 fa06 	bl	80083aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005f9e:	2019      	movs	r0, #25
 8005fa0:	f002 fa1d 	bl	80083de <HAL_NVIC_EnableIRQ>
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40014400 	.word	0x40014400

08005fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d112      	bne.n	8005ff8 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd2:	2002      	movs	r0, #2
 8005fd4:	f7ff fee0 	bl	8005d98 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005fd8:	2308      	movs	r3, #8
 8005fda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fec:	f107 030c 	add.w	r3, r7, #12
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4803      	ldr	r0, [pc, #12]	; (8006000 <HAL_TIM_MspPostInit+0x50>)
 8005ff4:	f002 fd60 	bl	8008ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005ff8:	bf00      	nop
 8005ffa:	3720      	adds	r7, #32
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	48000400 	.word	0x48000400

08006004 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 800600c:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <HAL_COMP_TriggerCallback+0x74>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	b29a      	uxth	r2, r3
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <HAL_COMP_TriggerCallback+0x78>)
 8006016:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 f88b 	bl	8008134 <HAL_COMP_GetOutputLevel>
 800601e:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d109      	bne.n	800603a <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <HAL_COMP_TriggerCallback+0x78>)
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	4b15      	ldr	r3, [pc, #84]	; (8006080 <HAL_COMP_TriggerCallback+0x7c>)
 800602c:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8006030:	4b13      	ldr	r3, [pc, #76]	; (8006080 <HAL_COMP_TriggerCallback+0x7c>)
 8006032:	2201      	movs	r2, #1
 8006034:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8006038:	e019      	b.n	800606e <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <HAL_COMP_TriggerCallback+0x7c>)
 800603c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d014      	beq.n	800606e <HAL_COMP_TriggerCallback+0x6a>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d111      	bne.n	800606e <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <HAL_COMP_TriggerCallback+0x7c>)
 800604c:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_COMP_TriggerCallback+0x78>)
 8006052:	881a      	ldrh	r2, [r3, #0]
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <HAL_COMP_TriggerCallback+0x7c>)
 8006056:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	4807      	ldr	r0, [pc, #28]	; (8006080 <HAL_COMP_TriggerCallback+0x7c>)
 8006062:	f7fd fed1 	bl	8003e08 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_COMP_TriggerCallback+0x7c>)
 8006068:	2200      	movs	r2, #0
 800606a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20028888 	.word	0x20028888
 800607c:	20000c7e 	.word	0x20000c7e
 8006080:	20027c6c 	.word	0x20027c6c
 8006084:	00000000 	.word	0x00000000

08006088 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8006088:	b5b0      	push	{r4, r5, r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8006090:	2101      	movs	r1, #1
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fc6e 	bl	8005974 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8006098:	2101      	movs	r1, #1
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fbf3 	bl	8005886 <HAL_TSC_GroupGetStatus>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 80060a4:	7dbb      	ldrb	r3, [r7, #22]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	f040 8115 	bne.w	80062d6 <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 80060ac:	2101      	movs	r1, #1
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff fc0b 	bl	80058ca <HAL_TSC_GroupGetValue>
 80060b4:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 80060b6:	4ba0      	ldr	r3, [pc, #640]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d17d      	bne.n	80061ba <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 80060be:	4b9f      	ldr	r3, [pc, #636]	; (800633c <HAL_TSC_ConvCpltCallback+0x2b4>)
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d83a      	bhi.n	800613c <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 80060ca:	4b9c      	ldr	r3, [pc, #624]	; (800633c <HAL_TSC_ConvCpltCallback+0x2b4>)
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d108      	bne.n	80060e4 <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060dc:	4b98      	ldr	r3, [pc, #608]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80060de:	edc3 7a00 	vstr	s15, [r3]
 80060e2:	e024      	b.n	800612e <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 80060e4:	6938      	ldr	r0, [r7, #16]
 80060e6:	f7fa f997 	bl	8000418 <__aeabi_ui2d>
 80060ea:	a38f      	add	r3, pc, #572	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f7fa fa0c 	bl	800050c <__aeabi_dmul>
 80060f4:	4603      	mov	r3, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	4625      	mov	r5, r4
 80060fa:	461c      	mov	r4, r3
 80060fc:	4b90      	ldr	r3, [pc, #576]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7fa f9ab 	bl	800045c <__aeabi_f2d>
 8006106:	a38a      	add	r3, pc, #552	; (adr r3, 8006330 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa f9fe 	bl	800050c <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa f842 	bl	80001a0 <__adddf3>
 800611c:	4603      	mov	r3, r0
 800611e:	460c      	mov	r4, r1
 8006120:	4618      	mov	r0, r3
 8006122:	4621      	mov	r1, r4
 8006124:	f7fa fca2 	bl	8000a6c <__aeabi_d2f>
 8006128:	4602      	mov	r2, r0
 800612a:	4b85      	ldr	r3, [pc, #532]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800612c:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 800612e:	4b83      	ldr	r3, [pc, #524]	; (800633c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	4b81      	ldr	r3, [pc, #516]	; (800633c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e0ba      	b.n	80062b2 <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006146:	4b7e      	ldr	r3, [pc, #504]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006148:	edd3 7a00 	vldr	s15, [r3]
 800614c:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8006344 <HAL_TSC_ConvCpltCallback+0x2bc>
 8006150:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615c:	bf94      	ite	ls
 800615e:	2301      	movls	r3, #1
 8006160:	2300      	movhi	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 80a2 	bne.w	80062b2 <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 800616e:	6938      	ldr	r0, [r7, #16]
 8006170:	f7fa f952 	bl	8000418 <__aeabi_ui2d>
 8006174:	a36c      	add	r3, pc, #432	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f7fa f9c7 	bl	800050c <__aeabi_dmul>
 800617e:	4603      	mov	r3, r0
 8006180:	460c      	mov	r4, r1
 8006182:	4625      	mov	r5, r4
 8006184:	461c      	mov	r4, r3
 8006186:	4b6e      	ldr	r3, [pc, #440]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f7fa f966 	bl	800045c <__aeabi_f2d>
 8006190:	a367      	add	r3, pc, #412	; (adr r3, 8006330 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f7fa f9b9 	bl	800050c <__aeabi_dmul>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4620      	mov	r0, r4
 80061a0:	4629      	mov	r1, r5
 80061a2:	f7f9 fffd 	bl	80001a0 <__adddf3>
 80061a6:	4603      	mov	r3, r0
 80061a8:	460c      	mov	r4, r1
 80061aa:	4618      	mov	r0, r3
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7fa fc5d 	bl	8000a6c <__aeabi_d2f>
 80061b2:	4602      	mov	r2, r0
 80061b4:	4b62      	ldr	r3, [pc, #392]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e07b      	b.n	80062b2 <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 80061ba:	4b63      	ldr	r3, [pc, #396]	; (8006348 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	2b64      	cmp	r3, #100	; 0x64
 80061c0:	d83a      	bhi.n	8006238 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 80061c6:	4b60      	ldr	r3, [pc, #384]	; (8006348 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d108      	bne.n	80061e0 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d8:	4b5c      	ldr	r3, [pc, #368]	; (800634c <HAL_TSC_ConvCpltCallback+0x2c4>)
 80061da:	edc3 7a00 	vstr	s15, [r3]
 80061de:	e024      	b.n	800622a <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 80061e0:	6938      	ldr	r0, [r7, #16]
 80061e2:	f7fa f919 	bl	8000418 <__aeabi_ui2d>
 80061e6:	a350      	add	r3, pc, #320	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa f98e 	bl	800050c <__aeabi_dmul>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	4625      	mov	r5, r4
 80061f6:	461c      	mov	r4, r3
 80061f8:	4b54      	ldr	r3, [pc, #336]	; (800634c <HAL_TSC_ConvCpltCallback+0x2c4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fa f92d 	bl	800045c <__aeabi_f2d>
 8006202:	a34b      	add	r3, pc, #300	; (adr r3, 8006330 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f7fa f980 	bl	800050c <__aeabi_dmul>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7f9 ffc4 	bl	80001a0 <__adddf3>
 8006218:	4603      	mov	r3, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4618      	mov	r0, r3
 800621e:	4621      	mov	r1, r4
 8006220:	f7fa fc24 	bl	8000a6c <__aeabi_d2f>
 8006224:	4602      	mov	r2, r0
 8006226:	4b49      	ldr	r3, [pc, #292]	; (800634c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006228:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 800622a:	4b47      	ldr	r3, [pc, #284]	; (8006348 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	4b45      	ldr	r3, [pc, #276]	; (8006348 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e03c      	b.n	80062b2 <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006242:	4b42      	ldr	r3, [pc, #264]	; (800634c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006244:	edd3 7a00 	vldr	s15, [r3]
 8006248:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006344 <HAL_TSC_ConvCpltCallback+0x2bc>
 800624c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006258:	bf94      	ite	ls
 800625a:	2301      	movls	r3, #1
 800625c:	2300      	movhi	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d124      	bne.n	80062b2 <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8006268:	6938      	ldr	r0, [r7, #16]
 800626a:	f7fa f8d5 	bl	8000418 <__aeabi_ui2d>
 800626e:	a32e      	add	r3, pc, #184	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7fa f94a 	bl	800050c <__aeabi_dmul>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	4625      	mov	r5, r4
 800627e:	461c      	mov	r4, r3
 8006280:	4b32      	ldr	r3, [pc, #200]	; (800634c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f7fa f8e9 	bl	800045c <__aeabi_f2d>
 800628a:	a329      	add	r3, pc, #164	; (adr r3, 8006330 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f7fa f93c 	bl	800050c <__aeabi_dmul>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	f7f9 ff80 	bl	80001a0 <__adddf3>
 80062a0:	4603      	mov	r3, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	4618      	mov	r0, r3
 80062a6:	4621      	mov	r1, r4
 80062a8:	f7fa fbe0 	bl	8000a6c <__aeabi_d2f>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b27      	ldr	r3, [pc, #156]	; (800634c <HAL_TSC_ConvCpltCallback+0x2c4>)
 80062b0:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 80062b2:	f000 fb47 	bl	8006944 <HAL_GetTick>
 80062b6:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 80062b8:	4b1f      	ldr	r3, [pc, #124]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4a24      	ldr	r2, [pc, #144]	; (8006350 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80062c0:	4413      	add	r3, r2
 80062c2:	7df9      	ldrb	r1, [r7, #23]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f9f2 	bl	80066b0 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4920      	ldr	r1, [pc, #128]	; (8006350 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80062d0:	4820      	ldr	r0, [pc, #128]	; (8006354 <HAL_TSC_ConvCpltCallback+0x2cc>)
 80062d2:	f000 f843 	bl	800635c <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 80062de:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80062e0:	2280      	movs	r2, #128	; 0x80
 80062e2:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e005      	b.n	80062f8 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80062ec:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80062ee:	2240      	movs	r2, #64	; 0x40
 80062f0:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 80062f2:	4b11      	ldr	r3, [pc, #68]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 80062f8:	4917      	ldr	r1, [pc, #92]	; (8006358 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff faf7 	bl	80058ee <HAL_TSC_IOConfig>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 8006306:	f7fe f8ef 	bl	80044e8 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fa5e 	bl	80057cc <HAL_TSC_Start_IT>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 8006316:	f7fe f8e7 	bl	80044e8 <Error_Handler>
	}

}
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bdb0      	pop	{r4, r5, r7, pc}
 8006322:	bf00      	nop
 8006324:	f3af 8000 	nop.w
 8006328:	47ae147b 	.word	0x47ae147b
 800632c:	3f847ae1 	.word	0x3f847ae1
 8006330:	7ae147ae 	.word	0x7ae147ae
 8006334:	3fefae14 	.word	0x3fefae14
 8006338:	20000c80 	.word	0x20000c80
 800633c:	20000c94 	.word	0x20000c94
 8006340:	200288d4 	.word	0x200288d4
 8006344:	42700000 	.word	0x42700000
 8006348:	20000c96 	.word	0x20000c96
 800634c:	200288f8 	.word	0x200288f8
 8006350:	20000c84 	.word	0x20000c84
 8006354:	200288dc 	.word	0x200288dc
 8006358:	200288c8 	.word	0x200288c8

0800635c <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	; 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	7e1b      	ldrb	r3, [r3, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d123      	bne.n	80063b8 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	795b      	ldrb	r3, [r3, #5]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00c      	beq.n	8006392 <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 800638a:	4b99      	ldr	r3, [pc, #612]	; (80065f0 <process_touches+0x294>)
 800638c:	2205      	movs	r2, #5
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	e126      	b.n	80065e0 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	3308      	adds	r3, #8
 8006396:	795b      	ldrb	r3, [r3, #5]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8121 	beq.w	80065e0 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	605a      	str	r2, [r3, #4]
			action = BackHold;
 80063b0:	4b8f      	ldr	r3, [pc, #572]	; (80065f0 <process_touches+0x294>)
 80063b2:	2206      	movs	r2, #6
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e113      	b.n	80065e0 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	7e1b      	ldrb	r3, [r3, #24]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d12d      	bne.n	800641c <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f1c3 0301 	rsb	r3, r3, #1
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	4413      	add	r3, r2
 80063ce:	795b      	ldrb	r3, [r3, #5]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d010      	beq.n	80063f6 <process_touches+0x9a>
			self->touch_state = TwoPressed;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2202      	movs	r2, #2
 80063d8:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f1c3 0301 	rsb	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]
			action = BothHold;
 80063ee:	4b80      	ldr	r3, [pc, #512]	; (80065f0 <process_touches+0x294>)
 80063f0:	2207      	movs	r2, #7
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e0f4      	b.n	80065e0 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4413      	add	r3, r2
 8006400:	795b      	ldrb	r3, [r3, #5]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 80ec 	bne.w	80065e0 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2203      	movs	r2, #3
 800640c:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8006414:	4b76      	ldr	r3, [pc, #472]	; (80065f0 <process_touches+0x294>)
 8006416:	2208      	movs	r2, #8
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e0e1      	b.n	80065e0 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	7e1b      	ldrb	r3, [r3, #24]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d11e      	bne.n	8006462 <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	795b      	ldrb	r3, [r3, #5]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2204      	movs	r2, #4
 8006438:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	e0ce      	b.n	80065e0 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	7b1b      	ldrb	r3, [r3, #12]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4413      	add	r3, r2
 800644c:	795b      	ldrb	r3, [r3, #5]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 80c6 	bne.w	80065e0 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2205      	movs	r2, #5
 8006458:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	615a      	str	r2, [r3, #20]
 8006460:	e0be      	b.n	80065e0 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	7e1b      	ldrb	r3, [r3, #24]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d134      	bne.n	80064d4 <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f1c3 0301 	rsb	r3, r3, #1
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	4413      	add	r3, r2
 8006478:	795b      	ldrb	r3, [r3, #5]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2204      	movs	r2, #4
 8006482:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	f1c3 0301 	rsb	r3, r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	611a      	str	r2, [r3, #16]
 8006498:	e0a2      	b.n	80065e0 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b0a      	cmp	r3, #10
 80064a4:	f240 809c 	bls.w	80065e0 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b28      	cmp	r3, #40	; 0x28
 80064b8:	d905      	bls.n	80064c6 <process_touches+0x16a>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2bc7      	cmp	r3, #199	; 0xc7
 80064be:	d802      	bhi.n	80064c6 <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 80064c0:	4b4b      	ldr	r3, [pc, #300]	; (80065f0 <process_touches+0x294>)
 80064c2:	2208      	movs	r2, #8
 80064c4:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 80064c6:	4b4b      	ldr	r3, [pc, #300]	; (80065f4 <process_touches+0x298>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	761a      	strb	r2, [r3, #24]
 80064d2:	e085      	b.n	80065e0 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	7e1b      	ldrb	r3, [r3, #24]
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d148      	bne.n	800656e <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	7b1b      	ldrb	r3, [r3, #12]
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4413      	add	r3, r2
 80064e6:	795b      	ldrb	r3, [r3, #5]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d179      	bne.n	80065e0 <process_touches+0x284>
			self->touch_state = Idle;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	615a      	str	r2, [r3, #20]
			action = None;
 80064f8:	4b3d      	ldr	r3, [pc, #244]	; (80065f0 <process_touches+0x294>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	2b28      	cmp	r3, #40	; 0x28
 8006526:	d80c      	bhi.n	8006542 <process_touches+0x1e6>
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b28      	cmp	r3, #40	; 0x28
 800652c:	d809      	bhi.n	8006542 <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b28      	cmp	r3, #40	; 0x28
 8006532:	d906      	bls.n	8006542 <process_touches+0x1e6>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2bc7      	cmp	r3, #199	; 0xc7
 8006538:	d803      	bhi.n	8006542 <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 800653a:	4b2d      	ldr	r3, [pc, #180]	; (80065f0 <process_touches+0x294>)
 800653c:	2208      	movs	r2, #8
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	e011      	b.n	8006566 <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b28      	cmp	r3, #40	; 0x28
 8006546:	d90e      	bls.n	8006566 <process_touches+0x20a>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b28      	cmp	r3, #40	; 0x28
 800654c:	d90b      	bls.n	8006566 <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	b25a      	sxtb	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	7b1b      	ldrb	r3, [r3, #12]
 800655a:	b25b      	sxtb	r3, r3
 800655c:	4313      	orrs	r3, r2
 800655e:	b25b      	sxtb	r3, r3
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b23      	ldr	r3, [pc, #140]	; (80065f0 <process_touches+0x294>)
 8006564:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	761a      	strb	r2, [r3, #24]
 800656c:	e038      	b.n	80065e0 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	7e1b      	ldrb	r3, [r3, #24]
 8006572:	2b05      	cmp	r3, #5
 8006574:	d134      	bne.n	80065e0 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	4413      	add	r3, r2
 8006580:	795b      	ldrb	r3, [r3, #5]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d12c      	bne.n	80065e0 <process_touches+0x284>
			self->touch_state = Idle;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	2b28      	cmp	r3, #40	; 0x28
 80065ba:	d80b      	bhi.n	80065d4 <process_touches+0x278>
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	2b28      	cmp	r3, #40	; 0x28
 80065c0:	d808      	bhi.n	80065d4 <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2b28      	cmp	r3, #40	; 0x28
 80065c6:	d905      	bls.n	80065d4 <process_touches+0x278>
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	2bc7      	cmp	r3, #199	; 0xc7
 80065cc:	d802      	bhi.n	80065d4 <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <process_touches+0x294>)
 80065d0:	2208      	movs	r2, #8
 80065d2:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 80065d4:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <process_touches+0x298>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 80065e0:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <process_touches+0x294>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d107      	bne.n	80065f8 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 80065e8:	4b02      	ldr	r3, [pc, #8]	; (80065f4 <process_touches+0x298>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e042      	b.n	8006676 <process_touches+0x31a>
 80065f0:	20000c9c 	.word	0x20000c9c
 80065f4:	200288d8 	.word	0x200288d8

	}else if(action == SwipeForward){
 80065f8:	4b29      	ldr	r3, [pc, #164]	; (80066a0 <process_touches+0x344>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d103      	bne.n	8006608 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <process_touches+0x348>)
 8006602:	2203      	movs	r2, #3
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e036      	b.n	8006676 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8006608:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <process_touches+0x344>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d103      	bne.n	8006618 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8006610:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <process_touches+0x348>)
 8006612:	2241      	movs	r2, #65	; 0x41
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e02e      	b.n	8006676 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8006618:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <process_touches+0x344>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d103      	bne.n	8006628 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006620:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <process_touches+0x348>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e026      	b.n	8006676 <process_touches+0x31a>
	}else if(action == BackRelease){
 8006628:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <process_touches+0x344>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b04      	cmp	r3, #4
 800662e:	d103      	bne.n	8006638 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <process_touches+0x348>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e01e      	b.n	8006676 <process_touches+0x31a>
	}else if(action == FrontHold){
 8006638:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <process_touches+0x344>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b05      	cmp	r3, #5
 800663e:	d103      	bne.n	8006648 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8006640:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <process_touches+0x348>)
 8006642:	2201      	movs	r2, #1
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e016      	b.n	8006676 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <process_touches+0x344>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d103      	bne.n	8006658 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8006650:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <process_touches+0x348>)
 8006652:	2202      	movs	r2, #2
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e00e      	b.n	8006676 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <process_touches+0x344>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b07      	cmp	r3, #7
 800665e:	d103      	bne.n	8006668 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <process_touches+0x348>)
 8006662:	2240      	movs	r2, #64	; 0x40
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e006      	b.n	8006676 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <process_touches+0x344>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d102      	bne.n	8006676 <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <process_touches+0x348>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <process_touches+0x34c>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <process_touches+0x348>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d00a      	beq.n	8006698 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <process_touches+0x348>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <process_touches+0x34c>)
 8006688:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 800668a:	4b08      	ldr	r3, [pc, #32]	; (80066ac <process_touches+0x350>)
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	2200      	movs	r2, #0
 8006692:	4904      	ldr	r1, [pc, #16]	; (80066a4 <process_touches+0x348>)
 8006694:	f00a fcd4 	bl	8011040 <osMessageQueuePut>

	}

}
 8006698:	bf00      	nop
 800669a:	3730      	adds	r7, #48	; 0x30
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000c9c 	.word	0x20000c9c
 80066a4:	200288d8 	.word	0x200288d8
 80066a8:	20000c98 	.word	0x20000c98
 80066ac:	20027c58 	.word	0x20027c58

080066b0 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	460b      	mov	r3, r1
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	791b      	ldrb	r3, [r3, #4]
 80066c2:	7afa      	ldrb	r2, [r7, #11]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d006      	beq.n	80066d6 <debounce+0x26>
		self->input = noisy_in;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	7afa      	ldrb	r2, [r7, #11]
 80066cc:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 80066d4:	e009      	b.n	80066ea <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b1e      	cmp	r3, #30
 80066e0:	d903      	bls.n	80066ea <debounce+0x3a>
		self->clean_out = self->input;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	791a      	ldrb	r2, [r3, #4]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	715a      	strb	r2, [r3, #5]
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <LL_AHB1_GRP1_EnableClock>:
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4313      	orrs	r3, r2
 800670c:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800670e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4013      	ands	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800671a:	68fb      	ldr	r3, [r7, #12]
}
 800671c:	bf00      	nop
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <LL_AHB2_GRP1_EnableClock>:
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4313      	orrs	r3, r2
 800673e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4013      	ands	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800674c:	68fb      	ldr	r3, [r7, #12]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <MX_TSC_Init+0x7c>)
 8006762:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <MX_TSC_Init+0x80>)
 8006764:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <MX_TSC_Init+0x7c>)
 8006768:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800676c:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <MX_TSC_Init+0x7c>)
 8006770:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8006774:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <MX_TSC_Init+0x7c>)
 8006778:	2200      	movs	r2, #0
 800677a:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 800677c:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <MX_TSC_Init+0x7c>)
 800677e:	2201      	movs	r2, #1
 8006780:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <MX_TSC_Init+0x7c>)
 8006784:	2200      	movs	r2, #0
 8006786:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <MX_TSC_Init+0x7c>)
 800678a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800678e:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <MX_TSC_Init+0x7c>)
 8006792:	22c0      	movs	r2, #192	; 0xc0
 8006794:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8006796:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <MX_TSC_Init+0x7c>)
 8006798:	2200      	movs	r2, #0
 800679a:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 800679c:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <MX_TSC_Init+0x7c>)
 800679e:	2200      	movs	r2, #0
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <MX_TSC_Init+0x7c>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <MX_TSC_Init+0x7c>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <MX_TSC_Init+0x7c>)
 80067b2:	22c0      	movs	r2, #192	; 0xc0
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <MX_TSC_Init+0x7c>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <MX_TSC_Init+0x7c>)
 80067be:	2210      	movs	r2, #16
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80067c2:	4805      	ldr	r0, [pc, #20]	; (80067d8 <MX_TSC_Init+0x7c>)
 80067c4:	f7fe ff82 	bl	80056cc <HAL_TSC_Init>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80067ce:	f7fd fe8b 	bl	80044e8 <Error_Handler>
  }

}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200288fc 	.word	0x200288fc
 80067dc:	40024000 	.word	0x40024000

080067e0 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e8:	f107 030c 	add.w	r3, r7, #12
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	609a      	str	r2, [r3, #8]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1a      	ldr	r2, [pc, #104]	; (8006868 <HAL_TSC_MspInit+0x88>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d12e      	bne.n	8006860 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8006802:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006806:	f7ff ff76 	bl	80066f6 <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800680a:	2002      	movs	r0, #2
 800680c:	f7ff ff8c 	bl	8006728 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006810:	2310      	movs	r3, #16
 8006812:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006814:	2312      	movs	r3, #18
 8006816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800681c:	2300      	movs	r3, #0
 800681e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8006820:	2309      	movs	r3, #9
 8006822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	4619      	mov	r1, r3
 800682a:	4810      	ldr	r0, [pc, #64]	; (800686c <HAL_TSC_MspInit+0x8c>)
 800682c:	f002 f944 	bl	8008ab8 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006830:	23c0      	movs	r3, #192	; 0xc0
 8006832:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006834:	2302      	movs	r3, #2
 8006836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800683c:	2300      	movs	r3, #0
 800683e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8006840:	2309      	movs	r3, #9
 8006842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006844:	f107 030c 	add.w	r3, r7, #12
 8006848:	4619      	mov	r1, r3
 800684a:	4808      	ldr	r0, [pc, #32]	; (800686c <HAL_TSC_MspInit+0x8c>)
 800684c:	f002 f934 	bl	8008ab8 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8006850:	2200      	movs	r2, #0
 8006852:	2105      	movs	r1, #5
 8006854:	2027      	movs	r0, #39	; 0x27
 8006856:	f001 fda8 	bl	80083aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 800685a:	2027      	movs	r0, #39	; 0x27
 800685c:	f001 fdbf 	bl	80083de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8006860:	bf00      	nop
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40024000 	.word	0x40024000
 800686c:	48000400 	.word	0x48000400

08006870 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006870:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006872:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006874:	3304      	adds	r3, #4

08006876 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006876:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006878:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800687a:	d3f9      	bcc.n	8006870 <CopyDataInit>
  bx lr
 800687c:	4770      	bx	lr

0800687e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800687e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006880:	3004      	adds	r0, #4

08006882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006882:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006884:	d3fb      	bcc.n	800687e <FillZerobss>
  bx lr
 8006886:	4770      	bx	lr

08006888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8006888:	480c      	ldr	r0, [pc, #48]	; (80068bc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800688a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800688c:	480c      	ldr	r0, [pc, #48]	; (80068c0 <LoopForever+0x8>)
 800688e:	490d      	ldr	r1, [pc, #52]	; (80068c4 <LoopForever+0xc>)
 8006890:	4a0d      	ldr	r2, [pc, #52]	; (80068c8 <LoopForever+0x10>)
 8006892:	2300      	movs	r3, #0
 8006894:	f7ff ffef 	bl	8006876 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006898:	480c      	ldr	r0, [pc, #48]	; (80068cc <LoopForever+0x14>)
 800689a:	490d      	ldr	r1, [pc, #52]	; (80068d0 <LoopForever+0x18>)
 800689c:	2300      	movs	r3, #0
 800689e:	f7ff fff0 	bl	8006882 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80068a2:	480c      	ldr	r0, [pc, #48]	; (80068d4 <LoopForever+0x1c>)
 80068a4:	490c      	ldr	r1, [pc, #48]	; (80068d8 <LoopForever+0x20>)
 80068a6:	2300      	movs	r3, #0
 80068a8:	f7ff ffeb 	bl	8006882 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80068ac:	f7ff f97c 	bl	8005ba8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80068b0:	f013 fd5e 	bl	801a370 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80068b4:	f7fd fd38 	bl	8004328 <main>

080068b8 <LoopForever>:

LoopForever:
  b LoopForever
 80068b8:	e7fe      	b.n	80068b8 <LoopForever>
 80068ba:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 80068bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80068c0:	20000004 	.word	0x20000004
 80068c4:	200002d4 	.word	0x200002d4
 80068c8:	0801c810 	.word	0x0801c810
  INIT_BSS _sbss, _ebss
 80068cc:	20000388 	.word	0x20000388
 80068d0:	2002a164 	.word	0x2002a164
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80068d4:	200300c4 	.word	0x200300c4
 80068d8:	20030b5b 	.word	0x20030b5b

080068dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80068dc:	e7fe      	b.n	80068dc <ADC1_IRQHandler>
	...

080068e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068ea:	4b0c      	ldr	r3, [pc, #48]	; (800691c <HAL_Init+0x3c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a0b      	ldr	r2, [pc, #44]	; (800691c <HAL_Init+0x3c>)
 80068f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068f6:	2003      	movs	r0, #3
 80068f8:	f001 fd4c 	bl	8008394 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068fc:	2000      	movs	r0, #0
 80068fe:	f7fe fe99 	bl	8005634 <HAL_InitTick>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	71fb      	strb	r3, [r7, #7]
 800690c:	e001      	b.n	8006912 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800690e:	f7fe fe60 	bl	80055d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006912:	79fb      	ldrb	r3, [r7, #7]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	58004000 	.word	0x58004000

08006920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <HAL_IncTick+0x1c>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_IncTick+0x20>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4413      	add	r3, r2
 800692e:	4a03      	ldr	r2, [pc, #12]	; (800693c <HAL_IncTick+0x1c>)
 8006930:	6013      	str	r3, [r2, #0]
}
 8006932:	bf00      	nop
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	20028940 	.word	0x20028940
 8006940:	20000080 	.word	0x20000080

08006944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  return uwTick;
 8006948:	4b03      	ldr	r3, [pc, #12]	; (8006958 <HAL_GetTick+0x14>)
 800694a:	681b      	ldr	r3, [r3, #0]
}
 800694c:	4618      	mov	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20028940 	.word	0x20028940

0800695c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006960:	4b03      	ldr	r3, [pc, #12]	; (8006970 <HAL_GetTickPrio+0x14>)
 8006962:	681b      	ldr	r3, [r3, #0]
}
 8006964:	4618      	mov	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000007c 	.word	0x2000007c

08006974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800697c:	f7ff ffe2 	bl	8006944 <HAL_GetTick>
 8006980:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d004      	beq.n	8006998 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_Delay+0x40>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4413      	add	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8006998:	bf00      	nop
 800699a:	f7ff ffd3 	bl	8006944 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d8f7      	bhi.n	800699a <HAL_Delay+0x26>
    {
    }
  }
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000080 	.word	0x20000080

080069b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	609a      	str	r2, [r3, #8]
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a10:	b490      	push	{r4, r7}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3360      	adds	r3, #96	; 0x60
 8006a22:	461a      	mov	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a2c:	6822      	ldr	r2, [r4, #0]
 8006a2e:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <LL_ADC_SetOffset+0x40>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc90      	pop	{r4, r7}
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	03fff000 	.word	0x03fff000

08006a54 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a54:	b490      	push	{r4, r7}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3360      	adds	r3, #96	; 0x60
 8006a62:	461a      	mov	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc90      	pop	{r4, r7}
 8006a7a:	4770      	bx	lr

08006a7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a7c:	b490      	push	{r4, r7}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3360      	adds	r3, #96	; 0x60
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc90      	pop	{r4, r7}
 8006aaa:	4770      	bx	lr

08006aac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006ad2:	b490      	push	{r4, r7}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3330      	adds	r3, #48	; 0x30
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	f003 030c 	and.w	r3, r3, #12
 8006aee:	4413      	add	r3, r2
 8006af0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	211f      	movs	r1, #31
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	43db      	mvns	r3, r3
 8006b02:	401a      	ands	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0e9b      	lsrs	r3, r3, #26
 8006b08:	f003 011f 	and.w	r1, r3, #31
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 031f 	and.w	r3, r3, #31
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	4313      	orrs	r3, r2
 8006b18:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc90      	pop	{r4, r7}
 8006b22:	4770      	bx	lr

08006b24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b24:	b490      	push	{r4, r7}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3314      	adds	r3, #20
 8006b34:	461a      	mov	r2, r3
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	0e5b      	lsrs	r3, r3, #25
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	4413      	add	r3, r2
 8006b42:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	0d1b      	lsrs	r3, r3, #20
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2107      	movs	r1, #7
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	43db      	mvns	r3, r3
 8006b56:	401a      	ands	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	0d1b      	lsrs	r3, r3, #20
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc90      	pop	{r4, r7}
 8006b72:	4770      	bx	lr

08006b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	401a      	ands	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0318 	and.w	r3, r3, #24
 8006b96:	4908      	ldr	r1, [pc, #32]	; (8006bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006b98:	40d9      	lsrs	r1, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	400b      	ands	r3, r1
 8006b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	0007ffff 	.word	0x0007ffff

08006bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6093      	str	r3, [r2, #8]
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf4:	d101      	bne.n	8006bfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c44:	d101      	bne.n	8006c4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c6c:	f043 0201 	orr.w	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c94:	f043 0202 	orr.w	r2, r3, #2
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <LL_ADC_IsEnabled+0x18>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <LL_ADC_IsEnabled+0x1a>
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d101      	bne.n	8006ce6 <LL_ADC_IsDisableOngoing+0x18>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <LL_ADC_IsDisableOngoing+0x1a>
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d08:	f043 0204 	orr.w	r2, r3, #4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d30:	f043 0210 	orr.w	r2, r3, #16
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d101      	bne.n	8006d5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d7e:	f043 0220 	orr.w	r2, r3, #32
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 0308 	and.w	r3, r3, #8
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d101      	bne.n	8006daa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e12a      	b.n	8007028 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fa f895 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff fef1 	bl	8006be0 <LL_ADC_IsDeepPowerDownEnabled>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fed7 	bl	8006bbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff ff0c 	bl	8006c30 <LL_ADC_IsInternalRegulatorEnabled>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d113      	bne.n	8006e46 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff fef0 	bl	8006c08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006e28:	4b81      	ldr	r3, [pc, #516]	; (8007030 <HAL_ADC_Init+0x278>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	099b      	lsrs	r3, r3, #6
 8006e2e:	4a81      	ldr	r2, [pc, #516]	; (8007034 <HAL_ADC_Init+0x27c>)
 8006e30:	fba2 2303 	umull	r2, r3, r2, r3
 8006e34:	099b      	lsrs	r3, r3, #6
 8006e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006e38:	e002      	b.n	8006e40 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f9      	bne.n	8006e3a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fef0 	bl	8006c30 <LL_ADC_IsInternalRegulatorEnabled>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10d      	bne.n	8006e72 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5a:	f043 0210 	orr.w	r2, r3, #16
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e66:	f043 0201 	orr.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ff64 	bl	8006d44 <LL_ADC_REG_IsConversionOngoing>
 8006e7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	f003 0310 	and.w	r3, r3, #16
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 80c5 	bne.w	8007016 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f040 80c1 	bne.w	8007016 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006e9c:	f043 0202 	orr.w	r2, r3, #2
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fefd 	bl	8006ca8 <LL_ADC_IsEnabled>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eb4:	4860      	ldr	r0, [pc, #384]	; (8007038 <HAL_ADC_Init+0x280>)
 8006eb6:	f7ff fef7 	bl	8006ca8 <LL_ADC_IsEnabled>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d105      	bne.n	8006ecc <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	485d      	ldr	r0, [pc, #372]	; (800703c <HAL_ADC_Init+0x284>)
 8006ec8:	f7ff fd76 	bl	80069b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7e5b      	ldrb	r3, [r3, #25]
 8006ed0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ed6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006edc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006ee2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006eec:	4313      	orrs	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d106      	bne.n	8006f08 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	3b01      	subs	r3, #1
 8006f00:	045b      	lsls	r3, r3, #17
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d009      	beq.n	8006f24 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	4b45      	ldr	r3, [pc, #276]	; (8007040 <HAL_ADC_Init+0x288>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	69b9      	ldr	r1, [r7, #24]
 8006f34:	430b      	orrs	r3, r1
 8006f36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff ff01 	bl	8006d44 <LL_ADC_REG_IsConversionOngoing>
 8006f42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff ff22 	bl	8006d92 <LL_ADC_INJ_IsConversionOngoing>
 8006f4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d13d      	bne.n	8006fd2 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d13a      	bne.n	8006fd2 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f60:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f68:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f78:	f023 0302 	bic.w	r3, r3, #2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	69b9      	ldr	r1, [r7, #24]
 8006f82:	430b      	orrs	r3, r1
 8006f84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d118      	bne.n	8006fc2 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f9a:	f023 0304 	bic.w	r3, r3, #4
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006fa6:	4311      	orrs	r1, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fac:	4311      	orrs	r1, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	611a      	str	r2, [r3, #16]
 8006fc0:	e007      	b.n	8006fd2 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d10c      	bne.n	8006ff4 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	f023 010f 	bic.w	r1, r3, #15
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ff2:	e007      	b.n	8007004 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 020f 	bic.w	r2, r2, #15
 8007002:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	f023 0303 	bic.w	r3, r3, #3
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	655a      	str	r2, [r3, #84]	; 0x54
 8007014:	e007      	b.n	8007026 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701a:	f043 0210 	orr.w	r2, r3, #16
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007026:	7ffb      	ldrb	r3, [r7, #31]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000078 	.word	0x20000078
 8007034:	053e2d63 	.word	0x053e2d63
 8007038:	50040000 	.word	0x50040000
 800703c:	50040300 	.word	0x50040300
 8007040:	fff0c007 	.word	0xfff0c007

08007044 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fe75 	bl	8006d44 <LL_ADC_REG_IsConversionOngoing>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d167      	bne.n	8007130 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_ADC_Start_DMA+0x2a>
 800706a:	2302      	movs	r3, #2
 800706c:	e063      	b.n	8007136 <HAL_ADC_Start_DMA+0xf2>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fcc2 	bl	8007a00 <ADC_Enable>
 800707c:	4603      	mov	r3, r0
 800707e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d14f      	bne.n	8007126 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d006      	beq.n	80070b4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070aa:	f023 0206 	bic.w	r2, r3, #6
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	659a      	str	r2, [r3, #88]	; 0x58
 80070b2:	e002      	b.n	80070ba <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070be:	4a20      	ldr	r2, [pc, #128]	; (8007140 <HAL_ADC_Start_DMA+0xfc>)
 80070c0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c6:	4a1f      	ldr	r2, [pc, #124]	; (8007144 <HAL_ADC_Start_DMA+0x100>)
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <HAL_ADC_Start_DMA+0x104>)
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	221c      	movs	r2, #28
 80070d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0210 	orr.w	r2, r2, #16
 80070f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3340      	adds	r3, #64	; 0x40
 800710c:	4619      	mov	r1, r3
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f001 fa49 	bl	80085a8 <HAL_DMA_Start_IT>
 8007116:	4603      	mov	r3, r0
 8007118:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fde8 	bl	8006cf4 <LL_ADC_REG_StartConversion>
 8007124:	e006      	b.n	8007134 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800712e:	e001      	b.n	8007134 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007130:	2302      	movs	r3, #2
 8007132:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	08007b65 	.word	0x08007b65
 8007144:	08007c3d 	.word	0x08007c3d
 8007148:	08007c59 	.word	0x08007c59

0800714c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_ADC_Stop_DMA+0x16>
 800715e:	2302      	movs	r3, #2
 8007160:	e051      	b.n	8007206 <HAL_ADC_Stop_DMA+0xba>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800716a:	2103      	movs	r1, #3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fb93 	bl	8007898 <ADC_ConversionStop>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d13f      	bne.n	80071fc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d10f      	bne.n	80071ba <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 fa7d 	bl	800869e <HAL_DMA_Abort>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0210 	bic.w	r2, r2, #16
 80071c8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc6f 	bl	8007ab4 <ADC_Disable>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	e002      	b.n	80071e2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc69 	bl	8007ab4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	f043 0201 	orr.w	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b0a6      	sub	sp, #152	; 0x98
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x22>
 8007242:	2302      	movs	r3, #2
 8007244:	e31e      	b.n	8007884 <HAL_ADC_ConfigChannel+0x660>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fd76 	bl	8006d44 <LL_ADC_REG_IsConversionOngoing>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	f040 8303 	bne.w	8007866 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	6859      	ldr	r1, [r3, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	f7ff fc30 	bl	8006ad2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fd64 	bl	8006d44 <LL_ADC_REG_IsConversionOngoing>
 800727c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fd84 	bl	8006d92 <LL_ADC_INJ_IsConversionOngoing>
 800728a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800728e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 8148 	bne.w	8007528 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800729c:	2b00      	cmp	r3, #0
 800729e:	f040 8143 	bne.w	8007528 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6819      	ldr	r1, [r3, #0]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f7ff fc38 	bl	8006b24 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	08db      	lsrs	r3, r3, #3
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d00a      	beq.n	80072ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6919      	ldr	r1, [r3, #16]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072e6:	f7ff fb93 	bl	8006a10 <LL_ADC_SetOffset>
 80072ea:	e11d      	b.n	8007528 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff fbae 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <HAL_ADC_ConfigChannel+0xf4>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fba3 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 800730e:	4603      	mov	r3, r0
 8007310:	0e9b      	lsrs	r3, r3, #26
 8007312:	f003 021f 	and.w	r2, r3, #31
 8007316:	e012      	b.n	800733e <HAL_ADC_ConfigChannel+0x11a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fb98 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 8007324:	4603      	mov	r3, r0
 8007326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800732e:	fa93 f3a3 	rbit	r3, r3
 8007332:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007334:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007336:	fab3 f383 	clz	r3, r3
 800733a:	b2db      	uxtb	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <HAL_ADC_ConfigChannel+0x132>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	0e9b      	lsrs	r3, r3, #26
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	e00a      	b.n	800736c <HAL_ADC_ConfigChannel+0x148>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800735e:	fa93 f3a3 	rbit	r3, r3
 8007362:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8007364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007366:	fab3 f383 	clz	r3, r3
 800736a:	b2db      	uxtb	r3, r3
 800736c:	429a      	cmp	r2, r3
 800736e:	d106      	bne.n	800737e <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2200      	movs	r2, #0
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fb7f 	bl	8006a7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2101      	movs	r1, #1
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fb65 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 800738a:	4603      	mov	r3, r0
 800738c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <HAL_ADC_ConfigChannel+0x186>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2101      	movs	r1, #1
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fb5a 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 80073a0:	4603      	mov	r3, r0
 80073a2:	0e9b      	lsrs	r3, r3, #26
 80073a4:	f003 021f 	and.w	r2, r3, #31
 80073a8:	e010      	b.n	80073cc <HAL_ADC_ConfigChannel+0x1a8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2101      	movs	r1, #1
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fb4f 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 80073b6:	4603      	mov	r3, r0
 80073b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073bc:	fa93 f3a3 	rbit	r3, r3
 80073c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80073c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c4:	fab3 f383 	clz	r3, r3
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x1c0>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	0e9b      	lsrs	r3, r3, #26
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	e00a      	b.n	80073fa <HAL_ADC_ConfigChannel+0x1d6>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073ec:	fa93 f3a3 	rbit	r3, r3
 80073f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80073f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f4:	fab3 f383 	clz	r3, r3
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d106      	bne.n	800740c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	2101      	movs	r1, #1
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fb38 	bl	8006a7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2102      	movs	r1, #2
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fb1e 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 8007418:	4603      	mov	r3, r0
 800741a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <HAL_ADC_ConfigChannel+0x214>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2102      	movs	r1, #2
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fb13 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 800742e:	4603      	mov	r3, r0
 8007430:	0e9b      	lsrs	r3, r3, #26
 8007432:	f003 021f 	and.w	r2, r3, #31
 8007436:	e010      	b.n	800745a <HAL_ADC_ConfigChannel+0x236>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2102      	movs	r1, #2
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fb08 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 8007444:	4603      	mov	r3, r0
 8007446:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800744a:	fa93 f3a3 	rbit	r3, r3
 800744e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8007450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007452:	fab3 f383 	clz	r3, r3
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007462:	2b00      	cmp	r3, #0
 8007464:	d105      	bne.n	8007472 <HAL_ADC_ConfigChannel+0x24e>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	0e9b      	lsrs	r3, r3, #26
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	e00a      	b.n	8007488 <HAL_ADC_ConfigChannel+0x264>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800747a:	fa93 f3a3 	rbit	r3, r3
 800747e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007482:	fab3 f383 	clz	r3, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	429a      	cmp	r2, r3
 800748a:	d106      	bne.n	800749a <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2200      	movs	r2, #0
 8007492:	2102      	movs	r1, #2
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff faf1 	bl	8006a7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2103      	movs	r1, #3
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff fad7 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <HAL_ADC_ConfigChannel+0x2a2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2103      	movs	r1, #3
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff facc 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 80074bc:	4603      	mov	r3, r0
 80074be:	0e9b      	lsrs	r3, r3, #26
 80074c0:	f003 021f 	and.w	r2, r3, #31
 80074c4:	e010      	b.n	80074e8 <HAL_ADC_ConfigChannel+0x2c4>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2103      	movs	r1, #3
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fac1 	bl	8006a54 <LL_ADC_GetOffsetChannel>
 80074d2:	4603      	mov	r3, r0
 80074d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d8:	fa93 f3a3 	rbit	r3, r3
 80074dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80074de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e0:	fab3 f383 	clz	r3, r3
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <HAL_ADC_ConfigChannel+0x2dc>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	0e9b      	lsrs	r3, r3, #26
 80074fa:	f003 031f 	and.w	r3, r3, #31
 80074fe:	e00a      	b.n	8007516 <HAL_ADC_ConfigChannel+0x2f2>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007508:	fa93 f3a3 	rbit	r3, r3
 800750c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800750e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007510:	fab3 f383 	clz	r3, r3
 8007514:	b2db      	uxtb	r3, r3
 8007516:	429a      	cmp	r2, r3
 8007518:	d106      	bne.n	8007528 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	2103      	movs	r1, #3
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff faaa 	bl	8006a7c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff fbbb 	bl	8006ca8 <LL_ADC_IsEnabled>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 819f 	bne.w	8007878 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	6819      	ldr	r1, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	461a      	mov	r2, r3
 8007548:	f7ff fb14 	bl	8006b74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4aab      	ldr	r2, [pc, #684]	; (8007800 <HAL_ADC_ConfigChannel+0x5dc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f040 80fd 	bne.w	8007752 <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <HAL_ADC_ConfigChannel+0x35c>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0e9b      	lsrs	r3, r3, #26
 800756e:	3301      	adds	r3, #1
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2b09      	cmp	r3, #9
 8007576:	bf94      	ite	ls
 8007578:	2301      	movls	r3, #1
 800757a:	2300      	movhi	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e012      	b.n	80075a6 <HAL_ADC_ConfigChannel+0x382>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007588:	fa93 f3a3 	rbit	r3, r3
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800758e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007590:	fab3 f383 	clz	r3, r3
 8007594:	b2db      	uxtb	r3, r3
 8007596:	3301      	adds	r3, #1
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	2b09      	cmp	r3, #9
 800759e:	bf94      	ite	ls
 80075a0:	2301      	movls	r3, #1
 80075a2:	2300      	movhi	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d064      	beq.n	8007674 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <HAL_ADC_ConfigChannel+0x3a2>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	0e9b      	lsrs	r3, r3, #26
 80075bc:	3301      	adds	r3, #1
 80075be:	069b      	lsls	r3, r3, #26
 80075c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075c4:	e00e      	b.n	80075e4 <HAL_ADC_ConfigChannel+0x3c0>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	fa93 f3a3 	rbit	r3, r3
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	fab3 f383 	clz	r3, r3
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	3301      	adds	r3, #1
 80075de:	069b      	lsls	r3, r3, #26
 80075e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x3e0>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	0e9b      	lsrs	r3, r3, #26
 80075f6:	3301      	adds	r3, #1
 80075f8:	f003 031f 	and.w	r3, r3, #31
 80075fc:	2101      	movs	r1, #1
 80075fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007602:	e010      	b.n	8007626 <HAL_ADC_ConfigChannel+0x402>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	fa93 f3a3 	rbit	r3, r3
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	fab3 f383 	clz	r3, r3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	3301      	adds	r3, #1
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	2101      	movs	r1, #1
 8007622:	fa01 f303 	lsl.w	r3, r1, r3
 8007626:	ea42 0103 	orr.w	r1, r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_ADC_ConfigChannel+0x428>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	0e9b      	lsrs	r3, r3, #26
 800763c:	3301      	adds	r3, #1
 800763e:	f003 021f 	and.w	r2, r3, #31
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	051b      	lsls	r3, r3, #20
 800764a:	e011      	b.n	8007670 <HAL_ADC_ConfigChannel+0x44c>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	fa93 f3a3 	rbit	r3, r3
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	fab3 f383 	clz	r3, r3
 8007660:	b2db      	uxtb	r3, r3
 8007662:	3301      	adds	r3, #1
 8007664:	f003 021f 	and.w	r2, r3, #31
 8007668:	4613      	mov	r3, r2
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	4413      	add	r3, r2
 800766e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007670:	430b      	orrs	r3, r1
 8007672:	e069      	b.n	8007748 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800767c:	2b00      	cmp	r3, #0
 800767e:	d107      	bne.n	8007690 <HAL_ADC_ConfigChannel+0x46c>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	0e9b      	lsrs	r3, r3, #26
 8007686:	3301      	adds	r3, #1
 8007688:	069b      	lsls	r3, r3, #26
 800768a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800768e:	e00e      	b.n	80076ae <HAL_ADC_ConfigChannel+0x48a>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	fa93 f3a3 	rbit	r3, r3
 800769c:	61fb      	str	r3, [r7, #28]
  return result;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	fab3 f383 	clz	r3, r3
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	3301      	adds	r3, #1
 80076a8:	069b      	lsls	r3, r3, #26
 80076aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <HAL_ADC_ConfigChannel+0x4aa>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	0e9b      	lsrs	r3, r3, #26
 80076c0:	3301      	adds	r3, #1
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2101      	movs	r1, #1
 80076c8:	fa01 f303 	lsl.w	r3, r1, r3
 80076cc:	e010      	b.n	80076f0 <HAL_ADC_ConfigChannel+0x4cc>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	fa93 f3a3 	rbit	r3, r3
 80076da:	617b      	str	r3, [r7, #20]
  return result;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	fab3 f383 	clz	r3, r3
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	3301      	adds	r3, #1
 80076e6:	f003 031f 	and.w	r3, r3, #31
 80076ea:	2101      	movs	r1, #1
 80076ec:	fa01 f303 	lsl.w	r3, r1, r3
 80076f0:	ea42 0103 	orr.w	r1, r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10d      	bne.n	800771c <HAL_ADC_ConfigChannel+0x4f8>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	0e9b      	lsrs	r3, r3, #26
 8007706:	3301      	adds	r3, #1
 8007708:	f003 021f 	and.w	r2, r3, #31
 800770c:	4613      	mov	r3, r2
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	4413      	add	r3, r2
 8007712:	3b1e      	subs	r3, #30
 8007714:	051b      	lsls	r3, r3, #20
 8007716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800771a:	e014      	b.n	8007746 <HAL_ADC_ConfigChannel+0x522>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	fa93 f3a3 	rbit	r3, r3
 8007728:	60fb      	str	r3, [r7, #12]
  return result;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	fab3 f383 	clz	r3, r3
 8007730:	b2db      	uxtb	r3, r3
 8007732:	3301      	adds	r3, #1
 8007734:	f003 021f 	and.w	r2, r3, #31
 8007738:	4613      	mov	r3, r2
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	4413      	add	r3, r2
 800773e:	3b1e      	subs	r3, #30
 8007740:	051b      	lsls	r3, r3, #20
 8007742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007746:	430b      	orrs	r3, r1
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	6892      	ldr	r2, [r2, #8]
 800774c:	4619      	mov	r1, r3
 800774e:	f7ff f9e9 	bl	8006b24 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <HAL_ADC_ConfigChannel+0x5e0>)
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 808c 	beq.w	8007878 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007760:	4829      	ldr	r0, [pc, #164]	; (8007808 <HAL_ADC_ConfigChannel+0x5e4>)
 8007762:	f7ff f947 	bl	80069f4 <LL_ADC_GetCommonPathInternalCh>
 8007766:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800776a:	4828      	ldr	r0, [pc, #160]	; (800780c <HAL_ADC_ConfigChannel+0x5e8>)
 800776c:	f7ff fa9c 	bl	8006ca8 <LL_ADC_IsEnabled>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d16d      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a25      	ldr	r2, [pc, #148]	; (8007810 <HAL_ADC_ConfigChannel+0x5ec>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d126      	bne.n	80077ce <HAL_ADC_ConfigChannel+0x5aa>
 8007780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d120      	bne.n	80077ce <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1e      	ldr	r2, [pc, #120]	; (800780c <HAL_ADC_ConfigChannel+0x5e8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d170      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800779a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800779e:	4619      	mov	r1, r3
 80077a0:	4819      	ldr	r0, [pc, #100]	; (8007808 <HAL_ADC_ConfigChannel+0x5e4>)
 80077a2:	f7ff f914 	bl	80069ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80077a6:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <HAL_ADC_ConfigChannel+0x5f0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	099b      	lsrs	r3, r3, #6
 80077ac:	4a1a      	ldr	r2, [pc, #104]	; (8007818 <HAL_ADC_ConfigChannel+0x5f4>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	099a      	lsrs	r2, r3, #6
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80077be:	e002      	b.n	80077c6 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f9      	bne.n	80077c0 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077cc:	e054      	b.n	8007878 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a12      	ldr	r2, [pc, #72]	; (800781c <HAL_ADC_ConfigChannel+0x5f8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d123      	bne.n	8007820 <HAL_ADC_ConfigChannel+0x5fc>
 80077d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11d      	bne.n	8007820 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a08      	ldr	r2, [pc, #32]	; (800780c <HAL_ADC_ConfigChannel+0x5e8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d144      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80077ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077f6:	4619      	mov	r1, r3
 80077f8:	4803      	ldr	r0, [pc, #12]	; (8007808 <HAL_ADC_ConfigChannel+0x5e4>)
 80077fa:	f7ff f8e8 	bl	80069ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077fe:	e03b      	b.n	8007878 <HAL_ADC_ConfigChannel+0x654>
 8007800:	407f0000 	.word	0x407f0000
 8007804:	80080000 	.word	0x80080000
 8007808:	50040300 	.word	0x50040300
 800780c:	50040000 	.word	0x50040000
 8007810:	c7520000 	.word	0xc7520000
 8007814:	20000078 	.word	0x20000078
 8007818:	053e2d63 	.word	0x053e2d63
 800781c:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <HAL_ADC_ConfigChannel+0x668>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d126      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x654>
 800782a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800782e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d120      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a15      	ldr	r2, [pc, #84]	; (8007890 <HAL_ADC_ConfigChannel+0x66c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d11b      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007848:	4619      	mov	r1, r3
 800784a:	4812      	ldr	r0, [pc, #72]	; (8007894 <HAL_ADC_ConfigChannel+0x670>)
 800784c:	f7ff f8bf 	bl	80069ce <LL_ADC_SetCommonPathInternalCh>
 8007850:	e012      	b.n	8007878 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f043 0220 	orr.w	r2, r3, #32
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007864:	e008      	b.n	8007878 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f043 0220 	orr.w	r2, r3, #32
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007880:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8007884:	4618      	mov	r0, r3
 8007886:	3798      	adds	r7, #152	; 0x98
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	80000001 	.word	0x80000001
 8007890:	50040000 	.word	0x50040000
 8007894:	50040300 	.word	0x50040300

08007898 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fa48 	bl	8006d44 <LL_ADC_REG_IsConversionOngoing>
 80078b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fa69 	bl	8006d92 <LL_ADC_INJ_IsConversionOngoing>
 80078c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d103      	bne.n	80078d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8090 	beq.w	80079f0 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d02a      	beq.n	8007934 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7e5b      	ldrb	r3, [r3, #25]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d126      	bne.n	8007934 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	7e1b      	ldrb	r3, [r3, #24]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d122      	bne.n	8007934 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80078ee:	2301      	movs	r3, #1
 80078f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80078f2:	e014      	b.n	800791e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4a41      	ldr	r2, [pc, #260]	; (80079fc <ADC_ConversionStop+0x164>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d90d      	bls.n	8007918 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	f043 0210 	orr.w	r2, r3, #16
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e06c      	b.n	80079f2 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	3301      	adds	r3, #1
 800791c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d1e3      	bne.n	80078f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2240      	movs	r2, #64	; 0x40
 8007932:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d014      	beq.n	8007964 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff fa00 	bl	8006d44 <LL_ADC_REG_IsConversionOngoing>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00c      	beq.n	8007964 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff f9bd 	bl	8006cce <LL_ADC_IsDisableOngoing>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff f9dc 	bl	8006d1c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d014      	beq.n	8007994 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fa0f 	bl	8006d92 <LL_ADC_INJ_IsConversionOngoing>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff f9a5 	bl	8006cce <LL_ADC_IsDisableOngoing>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d104      	bne.n	8007994 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff f9eb 	bl	8006d6a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d004      	beq.n	80079a4 <ADC_ConversionStop+0x10c>
 800799a:	2b03      	cmp	r3, #3
 800799c:	d105      	bne.n	80079aa <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800799e:	230c      	movs	r3, #12
 80079a0:	617b      	str	r3, [r7, #20]
        break;
 80079a2:	e005      	b.n	80079b0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80079a4:	2308      	movs	r3, #8
 80079a6:	617b      	str	r3, [r7, #20]
        break;
 80079a8:	e002      	b.n	80079b0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80079aa:	2304      	movs	r3, #4
 80079ac:	617b      	str	r3, [r7, #20]
        break;
 80079ae:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80079b0:	f7fe ffc8 	bl	8006944 <HAL_GetTick>
 80079b4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80079b6:	e014      	b.n	80079e2 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80079b8:	f7fe ffc4 	bl	8006944 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d90d      	bls.n	80079e2 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	f043 0210 	orr.w	r2, r3, #16
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d6:	f043 0201 	orr.w	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e007      	b.n	80079f2 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e3      	bne.n	80079b8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3720      	adds	r7, #32
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	a33fffff 	.word	0xa33fffff

08007a00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff f94b 	bl	8006ca8 <LL_ADC_IsEnabled>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d146      	bne.n	8007aa6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	4b24      	ldr	r3, [pc, #144]	; (8007ab0 <ADC_Enable+0xb0>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00d      	beq.n	8007a42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f043 0210 	orr.w	r2, r3, #16
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	f043 0201 	orr.w	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e032      	b.n	8007aa8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff f906 	bl	8006c58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007a4c:	f7fe ff7a 	bl	8006944 <HAL_GetTick>
 8007a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a52:	e021      	b.n	8007a98 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff f925 	bl	8006ca8 <LL_ADC_IsEnabled>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff f8f5 	bl	8006c58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007a6e:	f7fe ff69 	bl	8006944 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d90d      	bls.n	8007a98 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a80:	f043 0210 	orr.w	r2, r3, #16
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8c:	f043 0201 	orr.w	r2, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e007      	b.n	8007aa8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d1d6      	bne.n	8007a54 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	8000003f 	.word	0x8000003f

08007ab4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff f904 	bl	8006cce <LL_ADC_IsDisableOngoing>
 8007ac6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff f8eb 	bl	8006ca8 <LL_ADC_IsEnabled>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d040      	beq.n	8007b5a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d13d      	bne.n	8007b5a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f003 030d 	and.w	r3, r3, #13
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d10c      	bne.n	8007b06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff f8c5 	bl	8006c80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2203      	movs	r2, #3
 8007afc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007afe:	f7fe ff21 	bl	8006944 <HAL_GetTick>
 8007b02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007b04:	e022      	b.n	8007b4c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	f043 0210 	orr.w	r2, r3, #16
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b16:	f043 0201 	orr.w	r2, r3, #1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e01c      	b.n	8007b5c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007b22:	f7fe ff0f 	bl	8006944 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d90d      	bls.n	8007b4c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b34:	f043 0210 	orr.w	r2, r3, #16
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b40:	f043 0201 	orr.w	r2, r3, #1
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e007      	b.n	8007b5c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e3      	bne.n	8007b22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d14b      	bne.n	8007c16 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d021      	beq.n	8007bdc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe ff85 	bl	8006aac <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d032      	beq.n	8007c0e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d12b      	bne.n	8007c0e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d11f      	bne.n	8007c0e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd2:	f043 0201 	orr.w	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	655a      	str	r2, [r3, #84]	; 0x54
 8007bda:	e018      	b.n	8007c0e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d111      	bne.n	8007c0e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c06:	f043 0201 	orr.w	r2, r3, #1
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7f9 fde0 	bl	80017d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007c14:	e00e      	b.n	8007c34 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff faf3 	bl	800720e <HAL_ADC_ErrorCallback>
}
 8007c28:	e004      	b.n	8007c34 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7f9 fdda 	bl	8001804 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c76:	f043 0204 	orr.w	r2, r3, #4
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff fac5 	bl	800720e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <LL_EXTI_EnableIT_0_31>:
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007c94:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8007c96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007c9a:	4905      	ldr	r1, [pc, #20]	; (8007cb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	58000800 	.word	0x58000800

08007cb4 <LL_EXTI_DisableIT_0_31>:
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <LL_EXTI_DisableIT_0_31+0x28>)
 8007cbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	4905      	ldr	r1, [pc, #20]	; (8007cdc <LL_EXTI_DisableIT_0_31+0x28>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	58000800 	.word	0x58000800

08007ce0 <LL_EXTI_EnableEvent_0_31>:
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007ce8:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007cea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007cee:	4905      	ldr	r1, [pc, #20]	; (8007d04 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	58000800 	.word	0x58000800

08007d08 <LL_EXTI_DisableEvent_0_31>:
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007d12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	4905      	ldr	r1, [pc, #20]	; (8007d30 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	58000800 	.word	0x58000800

08007d34 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	4904      	ldr	r1, [pc, #16]	; (8007d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	600b      	str	r3, [r1, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	58000800 	.word	0x58000800

08007d58 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007d60:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	43db      	mvns	r3, r3
 8007d68:	4904      	ldr	r1, [pc, #16]	; (8007d7c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	600b      	str	r3, [r1, #0]

}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	58000800 	.word	0x58000800

08007d80 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4904      	ldr	r1, [pc, #16]	; (8007da0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	604b      	str	r3, [r1, #4]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	58000800 	.word	0x58000800

08007da4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	43db      	mvns	r3, r3
 8007db4:	4904      	ldr	r1, [pc, #16]	; (8007dc8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	604b      	str	r3, [r1, #4]
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	58000800 	.word	0x58000800

08007dcc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007dd4:	4b07      	ldr	r3, [pc, #28]	; (8007df4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d101      	bne.n	8007de6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	58000800 	.word	0x58000800

08007df8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007e00:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60d3      	str	r3, [r2, #12]
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	58000800 	.word	0x58000800

08007e18 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e0c4      	b.n	8007fbe <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e42:	d102      	bne.n	8007e4a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e0b9      	b.n	8007fbe <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7f9 fd2d 	bl	80018c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e74:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4b49      	ldr	r3, [pc, #292]	; (8007fc8 <HAL_COMP_Init+0x1b0>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	6979      	ldr	r1, [r7, #20]
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb6:	d106      	bne.n	8007ec6 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007eb8:	4b44      	ldr	r3, [pc, #272]	; (8007fcc <HAL_COMP_Init+0x1b4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a43      	ldr	r2, [pc, #268]	; (8007fcc <HAL_COMP_Init+0x1b4>)
 8007ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	e005      	b.n	8007ed2 <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007ec6:	4b41      	ldr	r3, [pc, #260]	; (8007fcc <HAL_COMP_Init+0x1b4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a40      	ldr	r2, [pc, #256]	; (8007fcc <HAL_COMP_Init+0x1b4>)
 8007ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ed0:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d015      	beq.n	8007f0c <HAL_COMP_Init+0xf4>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d112      	bne.n	8007f0c <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	; (8007fd0 <HAL_COMP_Init+0x1b8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	099b      	lsrs	r3, r3, #6
 8007eec:	4a39      	ldr	r2, [pc, #228]	; (8007fd4 <HAL_COMP_Init+0x1bc>)
 8007eee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef2:	099a      	lsrs	r2, r3, #6
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007efe:	e002      	b.n	8007f06 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1f9      	bne.n	8007f00 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a31      	ldr	r2, [pc, #196]	; (8007fd8 <HAL_COMP_Init+0x1c0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d102      	bne.n	8007f1c <HAL_COMP_Init+0x104>
 8007f16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f1a:	e001      	b.n	8007f20 <HAL_COMP_Init+0x108>
 8007f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f20:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d037      	beq.n	8007f9e <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f003 0310 	and.w	r3, r3, #16
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f7ff fefa 	bl	8007d34 <LL_EXTI_EnableRisingTrig_0_31>
 8007f40:	e002      	b.n	8007f48 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007f42:	6938      	ldr	r0, [r7, #16]
 8007f44:	f7ff ff08 	bl	8007d58 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007f54:	6938      	ldr	r0, [r7, #16]
 8007f56:	f7ff ff13 	bl	8007d80 <LL_EXTI_EnableFallingTrig_0_31>
 8007f5a:	e002      	b.n	8007f62 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007f5c:	6938      	ldr	r0, [r7, #16]
 8007f5e:	f7ff ff21 	bl	8007da4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007f62:	6938      	ldr	r0, [r7, #16]
 8007f64:	f7ff ff48 	bl	8007df8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007f74:	6938      	ldr	r0, [r7, #16]
 8007f76:	f7ff feb3 	bl	8007ce0 <LL_EXTI_EnableEvent_0_31>
 8007f7a:	e002      	b.n	8007f82 <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007f7c:	6938      	ldr	r0, [r7, #16]
 8007f7e:	f7ff fec3 	bl	8007d08 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007f8e:	6938      	ldr	r0, [r7, #16]
 8007f90:	f7ff fe7c 	bl	8007c8c <LL_EXTI_EnableIT_0_31>
 8007f94:	e009      	b.n	8007faa <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f7ff fe8c 	bl	8007cb4 <LL_EXTI_DisableIT_0_31>
 8007f9c:	e005      	b.n	8007faa <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007f9e:	6938      	ldr	r0, [r7, #16]
 8007fa0:	f7ff feb2 	bl	8007d08 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007fa4:	6938      	ldr	r0, [r7, #16]
 8007fa6:	f7ff fe85 	bl	8007cb4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	f9207c03 	.word	0xf9207c03
 8007fcc:	40010204 	.word	0x40010204
 8007fd0:	20000078 	.word	0x20000078
 8007fd4:	053e2d63 	.word	0x053e2d63
 8007fd8:	40010200 	.word	0x40010200

08007fdc <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]
 8007ff6:	e02f      	b.n	8008058 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008006:	d102      	bne.n	800800e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
 800800c:	e024      	b.n	8008058 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b01      	cmp	r3, #1
 8008018:	d11c      	bne.n	8008054 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0201 	orr.w	r2, r2, #1
 8008028:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008032:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <HAL_COMP_Start+0x8c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	4a0c      	ldr	r2, [pc, #48]	; (800806c <HAL_COMP_Start+0x90>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	099b      	lsrs	r3, r3, #6
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008044:	e002      	b.n	800804c <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	3b01      	subs	r3, #1
 800804a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f9      	bne.n	8008046 <HAL_COMP_Start+0x6a>
 8008052:	e001      	b.n	8008058 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000078 	.word	0x20000078
 800806c:	053e2d63 	.word	0x053e2d63

08008070 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	73fb      	strb	r3, [r7, #15]
 8008086:	e01f      	b.n	80080c8 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008096:	d102      	bne.n	800809e <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]
 800809c:	e014      	b.n	80080c8 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00c      	beq.n	80080c4 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80080c2:	e001      	b.n	80080c8 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a11      	ldr	r2, [pc, #68]	; (800812c <HAL_COMP_IRQHandler+0x54>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d102      	bne.n	80080f0 <HAL_COMP_IRQHandler+0x18>
 80080ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80080ee:	e001      	b.n	80080f4 <HAL_COMP_IRQHandler+0x1c>
 80080f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff fe68 	bl	8007dcc <LL_EXTI_IsActiveFlag_0_31>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d010      	beq.n	8008124 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8008102:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <HAL_COMP_IRQHandler+0x58>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800810e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8008112:	f7ff fe71 	bl	8007df8 <LL_EXTI_ClearFlag_0_31>
 8008116:	e002      	b.n	800811e <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fe6d 	bl	8007df8 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fd ff70 	bl	8006004 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	40010200 	.word	0x40010200
 8008130:	40010204 	.word	0x40010204

08008134 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	0f9b      	lsrs	r3, r3, #30
 8008144:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <__NVIC_SetPriorityGrouping+0x44>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008170:	4013      	ands	r3, r2
 8008172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800817c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008186:	4a04      	ldr	r2, [pc, #16]	; (8008198 <__NVIC_SetPriorityGrouping+0x44>)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	60d3      	str	r3, [r2, #12]
}
 800818c:	bf00      	nop
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	e000ed00 	.word	0xe000ed00

0800819c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <__NVIC_GetPriorityGrouping+0x18>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	f003 0307 	and.w	r3, r3, #7
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	e000ed00 	.word	0xe000ed00

080081b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	db0b      	blt.n	80081e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	f003 021f 	and.w	r2, r3, #31
 80081d0:	4907      	ldr	r1, [pc, #28]	; (80081f0 <__NVIC_EnableIRQ+0x38>)
 80081d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	2001      	movs	r0, #1
 80081da:	fa00 f202 	lsl.w	r2, r0, r2
 80081de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	e000e100 	.word	0xe000e100

080081f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008202:	2b00      	cmp	r3, #0
 8008204:	db10      	blt.n	8008228 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	f003 021f 	and.w	r2, r3, #31
 800820c:	4909      	ldr	r1, [pc, #36]	; (8008234 <__NVIC_DisableIRQ+0x40>)
 800820e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	2001      	movs	r0, #1
 8008216:	fa00 f202 	lsl.w	r2, r0, r2
 800821a:	3320      	adds	r3, #32
 800821c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008224:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	e000e100 	.word	0xe000e100

08008238 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008246:	2b00      	cmp	r3, #0
 8008248:	db0c      	blt.n	8008264 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	f003 021f 	and.w	r2, r3, #31
 8008250:	4907      	ldr	r1, [pc, #28]	; (8008270 <__NVIC_SetPendingIRQ+0x38>)
 8008252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	2001      	movs	r0, #1
 800825a:	fa00 f202 	lsl.w	r2, r0, r2
 800825e:	3340      	adds	r3, #64	; 0x40
 8008260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	e000e100 	.word	0xe000e100

08008274 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800827e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008282:	2b00      	cmp	r3, #0
 8008284:	db0c      	blt.n	80082a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	f003 021f 	and.w	r2, r3, #31
 800828c:	4907      	ldr	r1, [pc, #28]	; (80082ac <__NVIC_ClearPendingIRQ+0x38>)
 800828e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	2001      	movs	r0, #1
 8008296:	fa00 f202 	lsl.w	r2, r0, r2
 800829a:	3360      	adds	r3, #96	; 0x60
 800829c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	e000e100 	.word	0xe000e100

080082b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db0a      	blt.n	80082da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	490c      	ldr	r1, [pc, #48]	; (80082fc <__NVIC_SetPriority+0x4c>)
 80082ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ce:	0112      	lsls	r2, r2, #4
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	440b      	add	r3, r1
 80082d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082d8:	e00a      	b.n	80082f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	4908      	ldr	r1, [pc, #32]	; (8008300 <__NVIC_SetPriority+0x50>)
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	3b04      	subs	r3, #4
 80082e8:	0112      	lsls	r2, r2, #4
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	440b      	add	r3, r1
 80082ee:	761a      	strb	r2, [r3, #24]
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	e000e100 	.word	0xe000e100
 8008300:	e000ed00 	.word	0xe000ed00

08008304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008304:	b480      	push	{r7}
 8008306:	b089      	sub	sp, #36	; 0x24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f1c3 0307 	rsb	r3, r3, #7
 800831e:	2b04      	cmp	r3, #4
 8008320:	bf28      	it	cs
 8008322:	2304      	movcs	r3, #4
 8008324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	3304      	adds	r3, #4
 800832a:	2b06      	cmp	r3, #6
 800832c:	d902      	bls.n	8008334 <NVIC_EncodePriority+0x30>
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	3b03      	subs	r3, #3
 8008332:	e000      	b.n	8008336 <NVIC_EncodePriority+0x32>
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008338:	f04f 32ff 	mov.w	r2, #4294967295
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	fa02 f303 	lsl.w	r3, r2, r3
 8008342:	43da      	mvns	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	401a      	ands	r2, r3
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800834c:	f04f 31ff 	mov.w	r1, #4294967295
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	fa01 f303 	lsl.w	r3, r1, r3
 8008356:	43d9      	mvns	r1, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800835c:	4313      	orrs	r3, r2
         );
}
 800835e:	4618      	mov	r0, r3
 8008360:	3724      	adds	r7, #36	; 0x24
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008370:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <__NVIC_SystemReset+0x20>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800837c:	4903      	ldr	r1, [pc, #12]	; (800838c <__NVIC_SystemReset+0x20>)
 800837e:	4b04      	ldr	r3, [pc, #16]	; (8008390 <__NVIC_SystemReset+0x24>)
 8008380:	4313      	orrs	r3, r2
 8008382:	60cb      	str	r3, [r1, #12]
 8008384:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <__NVIC_SystemReset+0x1c>
 800838c:	e000ed00 	.word	0xe000ed00
 8008390:	05fa0004 	.word	0x05fa0004

08008394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fed9 	bl	8008154 <__NVIC_SetPriorityGrouping>
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b086      	sub	sp, #24
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	4603      	mov	r3, r0
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80083b8:	f7ff fef0 	bl	800819c <__NVIC_GetPriorityGrouping>
 80083bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	6978      	ldr	r0, [r7, #20]
 80083c4:	f7ff ff9e 	bl	8008304 <NVIC_EncodePriority>
 80083c8:	4602      	mov	r2, r0
 80083ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff ff6d 	bl	80082b0 <__NVIC_SetPriority>
}
 80083d6:	bf00      	nop
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	4603      	mov	r3, r0
 80083e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff fee3 	bl	80081b8 <__NVIC_EnableIRQ>
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	4603      	mov	r3, r0
 8008402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff fef3 	bl	80081f4 <__NVIC_DisableIRQ>
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800841a:	f7ff ffa7 	bl	800836c <__NVIC_SystemReset>

0800841e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	4603      	mov	r3, r0
 8008426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff ff03 	bl	8008238 <__NVIC_SetPendingIRQ>
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	4603      	mov	r3, r0
 8008442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff ff13 	bl	8008274 <__NVIC_ClearPendingIRQ>
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e08d      	b.n	8008586 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	4b47      	ldr	r3, [pc, #284]	; (8008590 <HAL_DMA_Init+0x138>)
 8008472:	429a      	cmp	r2, r3
 8008474:	d80f      	bhi.n	8008496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	4b45      	ldr	r3, [pc, #276]	; (8008594 <HAL_DMA_Init+0x13c>)
 800847e:	4413      	add	r3, r2
 8008480:	4a45      	ldr	r2, [pc, #276]	; (8008598 <HAL_DMA_Init+0x140>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	009a      	lsls	r2, r3, #2
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a42      	ldr	r2, [pc, #264]	; (800859c <HAL_DMA_Init+0x144>)
 8008492:	641a      	str	r2, [r3, #64]	; 0x40
 8008494:	e00e      	b.n	80084b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	4b40      	ldr	r3, [pc, #256]	; (80085a0 <HAL_DMA_Init+0x148>)
 800849e:	4413      	add	r3, r2
 80084a0:	4a3d      	ldr	r2, [pc, #244]	; (8008598 <HAL_DMA_Init+0x140>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	091b      	lsrs	r3, r3, #4
 80084a8:	009a      	lsls	r2, r3, #2
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a3c      	ldr	r2, [pc, #240]	; (80085a4 <HAL_DMA_Init+0x14c>)
 80084b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80084d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa74 	bl	80089f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008514:	d102      	bne.n	800851c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008530:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d010      	beq.n	800855c <HAL_DMA_Init+0x104>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b04      	cmp	r3, #4
 8008540:	d80c      	bhi.n	800855c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa94 	bl	8008a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	e008      	b.n	800856e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40020407 	.word	0x40020407
 8008594:	bffdfff8 	.word	0xbffdfff8
 8008598:	cccccccd 	.word	0xcccccccd
 800859c:	40020000 	.word	0x40020000
 80085a0:	bffdfbf8 	.word	0xbffdfbf8
 80085a4:	40020400 	.word	0x40020400

080085a8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_DMA_Start_IT+0x20>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e066      	b.n	8008696 <HAL_DMA_Start_IT+0xee>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d155      	bne.n	8008688 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0201 	bic.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 f9b9 	bl	8008978 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d008      	beq.n	8008620 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 020e 	orr.w	r2, r2, #14
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	e00f      	b.n	8008640 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0204 	bic.w	r2, r2, #4
 800862e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 020a 	orr.w	r2, r2, #10
 800863e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800865c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008674:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f042 0201 	orr.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e005      	b.n	8008694 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008690:	2302      	movs	r3, #2
 8008692:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e04f      	b.n	8008750 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d008      	beq.n	80086ce <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2204      	movs	r2, #4
 80086c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e040      	b.n	8008750 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 020e 	bic.w	r2, r2, #14
 80086dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	f003 021c 	and.w	r2, r3, #28
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	2101      	movs	r1, #1
 800870c:	fa01 f202 	lsl.w	r2, r1, r2
 8008710:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800871a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00c      	beq.n	800873e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008732:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800873c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b02      	cmp	r3, #2
 8008772:	d005      	beq.n	8008780 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2204      	movs	r2, #4
 8008778:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
 800877e:	e047      	b.n	8008810 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 020e 	bic.w	r2, r2, #14
 800878e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0201 	bic.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b4:	f003 021c 	and.w	r2, r3, #28
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	2101      	movs	r1, #1
 80087be:	fa01 f202 	lsl.w	r2, r1, r2
 80087c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00c      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80087ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
    }
  }
  return status;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008836:	f003 031c 	and.w	r3, r3, #28
 800883a:	2204      	movs	r2, #4
 800883c:	409a      	lsls	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4013      	ands	r3, r2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d026      	beq.n	8008894 <HAL_DMA_IRQHandler+0x7a>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d021      	beq.n	8008894 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d107      	bne.n	800886e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0204 	bic.w	r2, r2, #4
 800886c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	f003 021c 	and.w	r2, r3, #28
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	2104      	movs	r1, #4
 800887c:	fa01 f202 	lsl.w	r2, r1, r2
 8008880:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	2b00      	cmp	r3, #0
 8008888:	d071      	beq.n	800896e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008892:	e06c      	b.n	800896e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008898:	f003 031c 	and.w	r3, r3, #28
 800889c:	2202      	movs	r2, #2
 800889e:	409a      	lsls	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d02e      	beq.n	8008906 <HAL_DMA_IRQHandler+0xec>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d029      	beq.n	8008906 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10b      	bne.n	80088d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 020a 	bic.w	r2, r2, #10
 80088ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088dc:	f003 021c 	and.w	r2, r3, #28
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	2102      	movs	r1, #2
 80088e6:	fa01 f202 	lsl.w	r2, r1, r2
 80088ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d038      	beq.n	800896e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008904:	e033      	b.n	800896e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890a:	f003 031c 	and.w	r3, r3, #28
 800890e:	2208      	movs	r2, #8
 8008910:	409a      	lsls	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4013      	ands	r3, r2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d02a      	beq.n	8008970 <HAL_DMA_IRQHandler+0x156>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b00      	cmp	r3, #0
 8008922:	d025      	beq.n	8008970 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 020e 	bic.w	r2, r2, #14
 8008932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008938:	f003 021c 	and.w	r2, r3, #28
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	2101      	movs	r1, #1
 8008942:	fa01 f202 	lsl.w	r2, r1, r2
 8008946:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800896e:	bf00      	nop
 8008970:	bf00      	nop
}
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800898e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80089a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	f003 021c 	and.w	r2, r3, #28
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	2101      	movs	r1, #1
 80089b0:	fa01 f202 	lsl.w	r2, r1, r2
 80089b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b10      	cmp	r3, #16
 80089c4:	d108      	bne.n	80089d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80089d6:	e007      	b.n	80089e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	60da      	str	r2, [r3, #12]
}
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d80a      	bhi.n	8008a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0c:	089b      	lsrs	r3, r3, #2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a14:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6493      	str	r3, [r2, #72]	; 0x48
 8008a1c:	e007      	b.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a22:	089b      	lsrs	r3, r3, #2
 8008a24:	009a      	lsls	r2, r3, #2
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008a28:	4413      	add	r3, r2
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	3b08      	subs	r3, #8
 8008a36:	4a0c      	ldr	r2, [pc, #48]	; (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008a38:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3c:	091b      	lsrs	r3, r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f003 031c 	and.w	r3, r3, #28
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	409a      	lsls	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	40020407 	.word	0x40020407
 8008a64:	4002081c 	.word	0x4002081c
 8008a68:	cccccccd 	.word	0xcccccccd
 8008a6c:	40020880 	.word	0x40020880

08008a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	461a      	mov	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008a92:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	f003 0303 	and.w	r3, r3, #3
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	409a      	lsls	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	1000823f 	.word	0x1000823f
 8008ab4:	40020940 	.word	0x40020940

08008ab8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ac6:	e14c      	b.n	8008d62 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	2101      	movs	r1, #1
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 813e 	beq.w	8008d5c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d003      	beq.n	8008af0 <HAL_GPIO_Init+0x38>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b12      	cmp	r3, #18
 8008aee:	d123      	bne.n	8008b38 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	08da      	lsrs	r2, r3, #3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3208      	adds	r2, #8
 8008af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	220f      	movs	r2, #15
 8008b08:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4013      	ands	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691a      	ldr	r2, [r3, #16]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	08da      	lsrs	r2, r3, #3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3208      	adds	r2, #8
 8008b32:	6939      	ldr	r1, [r7, #16]
 8008b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	2203      	movs	r2, #3
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	43db      	mvns	r3, r3
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f003 0203 	and.w	r2, r3, #3
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d00b      	beq.n	8008b8c <HAL_GPIO_Init+0xd4>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d007      	beq.n	8008b8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b80:	2b11      	cmp	r3, #17
 8008b82:	d003      	beq.n	8008b8c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b12      	cmp	r3, #18
 8008b8a:	d130      	bne.n	8008bee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	2203      	movs	r2, #3
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	43db      	mvns	r3, r3
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	091b      	lsrs	r3, r3, #4
 8008bd8:	f003 0201 	and.w	r2, r3, #1
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	4013      	ands	r3, r2
 8008c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8098 	beq.w	8008d5c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008c2c:	4a54      	ldr	r2, [pc, #336]	; (8008d80 <HAL_GPIO_Init+0x2c8>)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	089b      	lsrs	r3, r3, #2
 8008c32:	3302      	adds	r3, #2
 8008c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	220f      	movs	r2, #15
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	43db      	mvns	r3, r3
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008c56:	d019      	beq.n	8008c8c <HAL_GPIO_Init+0x1d4>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a4a      	ldr	r2, [pc, #296]	; (8008d84 <HAL_GPIO_Init+0x2cc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d013      	beq.n	8008c88 <HAL_GPIO_Init+0x1d0>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a49      	ldr	r2, [pc, #292]	; (8008d88 <HAL_GPIO_Init+0x2d0>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00d      	beq.n	8008c84 <HAL_GPIO_Init+0x1cc>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a48      	ldr	r2, [pc, #288]	; (8008d8c <HAL_GPIO_Init+0x2d4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d007      	beq.n	8008c80 <HAL_GPIO_Init+0x1c8>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a47      	ldr	r2, [pc, #284]	; (8008d90 <HAL_GPIO_Init+0x2d8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d101      	bne.n	8008c7c <HAL_GPIO_Init+0x1c4>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	e008      	b.n	8008c8e <HAL_GPIO_Init+0x1d6>
 8008c7c:	2307      	movs	r3, #7
 8008c7e:	e006      	b.n	8008c8e <HAL_GPIO_Init+0x1d6>
 8008c80:	2303      	movs	r3, #3
 8008c82:	e004      	b.n	8008c8e <HAL_GPIO_Init+0x1d6>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e002      	b.n	8008c8e <HAL_GPIO_Init+0x1d6>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <HAL_GPIO_Init+0x1d6>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	f002 0203 	and.w	r2, r2, #3
 8008c94:	0092      	lsls	r2, r2, #2
 8008c96:	4093      	lsls	r3, r2
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008c9e:	4938      	ldr	r1, [pc, #224]	; (8008d80 <HAL_GPIO_Init+0x2c8>)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	089b      	lsrs	r3, r3, #2
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008cac:	4b39      	ldr	r3, [pc, #228]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008cd2:	4a30      	ldr	r2, [pc, #192]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008cda:	4b2e      	ldr	r3, [pc, #184]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008d00:	4a24      	ldr	r2, [pc, #144]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d08:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	43db      	mvns	r3, r3
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4013      	ands	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d2c:	4a19      	ldr	r2, [pc, #100]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d32:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d56:	4a0f      	ldr	r2, [pc, #60]	; (8008d94 <HAL_GPIO_Init+0x2dc>)
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f47f aeab 	bne.w	8008ac8 <HAL_GPIO_Init+0x10>
  }
}
 8008d72:	bf00      	nop
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	40010000 	.word	0x40010000
 8008d84:	48000400 	.word	0x48000400
 8008d88:	48000800 	.word	0x48000800
 8008d8c:	48000c00 	.word	0x48000c00
 8008d90:	48001000 	.word	0x48001000
 8008d94:	58000800 	.word	0x58000800

08008d98 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	887b      	ldrh	r3, [r7, #2]
 8008daa:	4013      	ands	r3, r2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
 8008db4:	e001      	b.n	8008dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008dd2:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d006      	beq.n	8008dec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008dde:	4a05      	ldr	r2, [pc, #20]	; (8008df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fa fef2 	bl	8003bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	58000800 	.word	0x58000800

08008df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e081      	b.n	8008f0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fa fe18 	bl	8003a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2224      	movs	r2, #36	; 0x24
 8008e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0201 	bic.w	r2, r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d107      	bne.n	8008e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e6e:	609a      	str	r2, [r3, #8]
 8008e70:	e006      	b.n	8008e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d104      	bne.n	8008e92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691a      	ldr	r2, [r3, #16]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	ea42 0103 	orr.w	r1, r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	021a      	lsls	r2, r3, #8
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	69d9      	ldr	r1, [r3, #28]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a1a      	ldr	r2, [r3, #32]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f042 0201 	orr.w	r2, r2, #1
 8008eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	461a      	mov	r2, r3
 8008f24:	460b      	mov	r3, r1
 8008f26:	817b      	strh	r3, [r7, #10]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	f040 80da 	bne.w	80090ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_I2C_Master_Transmit+0x30>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e0d3      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x1d8>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f50:	f7fd fcf8 	bl	8006944 <HAL_GetTick>
 8008f54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	2319      	movs	r3, #25
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f001 fbba 	bl	800a6dc <I2C_WaitOnFlagUntilTimeout>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e0be      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2221      	movs	r2, #33	; 0x21
 8008f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2210      	movs	r2, #16
 8008f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	893a      	ldrh	r2, [r7, #8]
 8008f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	2bff      	cmp	r3, #255	; 0xff
 8008fa2:	d90e      	bls.n	8008fc2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	22ff      	movs	r2, #255	; 0xff
 8008fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	8979      	ldrh	r1, [r7, #10]
 8008fb2:	4b51      	ldr	r3, [pc, #324]	; (80090f8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f001 fd1c 	bl	800a9f8 <I2C_TransferConfig>
 8008fc0:	e06c      	b.n	800909c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	8979      	ldrh	r1, [r7, #10]
 8008fd4:	4b48      	ldr	r3, [pc, #288]	; (80090f8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f001 fd0b 	bl	800a9f8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008fe2:	e05b      	b.n	800909c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	6a39      	ldr	r1, [r7, #32]
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f001 fbb7 	bl	800a75c <I2C_WaitOnTXISFlagUntilTimeout>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e07b      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902c:	b29b      	uxth	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d034      	beq.n	800909c <HAL_I2C_Master_Transmit+0x184>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	d130      	bne.n	800909c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	2200      	movs	r2, #0
 8009042:	2180      	movs	r1, #128	; 0x80
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f001 fb49 	bl	800a6dc <I2C_WaitOnFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e04d      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009058:	b29b      	uxth	r3, r3
 800905a:	2bff      	cmp	r3, #255	; 0xff
 800905c:	d90e      	bls.n	800907c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	22ff      	movs	r2, #255	; 0xff
 8009062:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009068:	b2da      	uxtb	r2, r3
 800906a:	8979      	ldrh	r1, [r7, #10]
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f001 fcbf 	bl	800a9f8 <I2C_TransferConfig>
 800907a:	e00f      	b.n	800909c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29a      	uxth	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908a:	b2da      	uxtb	r2, r3
 800908c:	8979      	ldrh	r1, [r7, #10]
 800908e:	2300      	movs	r3, #0
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f001 fcae 	bl	800a9f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d19e      	bne.n	8008fe4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	6a39      	ldr	r1, [r7, #32]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f001 fb96 	bl	800a7dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e01a      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2220      	movs	r2, #32
 80090c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6859      	ldr	r1, [r3, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <HAL_I2C_Master_Transmit+0x1e4>)
 80090ce:	400b      	ands	r3, r1
 80090d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e000      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80090ee:	2302      	movs	r3, #2
  }
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	80002000 	.word	0x80002000
 80090fc:	fe00e800 	.word	0xfe00e800

08009100 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	461a      	mov	r2, r3
 800910c:	460b      	mov	r3, r1
 800910e:	817b      	strh	r3, [r7, #10]
 8009110:	4613      	mov	r3, r2
 8009112:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b20      	cmp	r3, #32
 800911e:	f040 80db 	bne.w	80092d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009128:	2b01      	cmp	r3, #1
 800912a:	d101      	bne.n	8009130 <HAL_I2C_Master_Receive+0x30>
 800912c:	2302      	movs	r3, #2
 800912e:	e0d4      	b.n	80092da <HAL_I2C_Master_Receive+0x1da>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009138:	f7fd fc04 	bl	8006944 <HAL_GetTick>
 800913c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	2319      	movs	r3, #25
 8009144:	2201      	movs	r2, #1
 8009146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f001 fac6 	bl	800a6dc <I2C_WaitOnFlagUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e0bf      	b.n	80092da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2222      	movs	r2, #34	; 0x22
 800915e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2210      	movs	r2, #16
 8009166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	893a      	ldrh	r2, [r7, #8]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009186:	b29b      	uxth	r3, r3
 8009188:	2bff      	cmp	r3, #255	; 0xff
 800918a:	d90e      	bls.n	80091aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	22ff      	movs	r2, #255	; 0xff
 8009190:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009196:	b2da      	uxtb	r2, r3
 8009198:	8979      	ldrh	r1, [r7, #10]
 800919a:	4b52      	ldr	r3, [pc, #328]	; (80092e4 <HAL_I2C_Master_Receive+0x1e4>)
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f001 fc28 	bl	800a9f8 <I2C_TransferConfig>
 80091a8:	e06d      	b.n	8009286 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	8979      	ldrh	r1, [r7, #10]
 80091bc:	4b49      	ldr	r3, [pc, #292]	; (80092e4 <HAL_I2C_Master_Receive+0x1e4>)
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f001 fc17 	bl	800a9f8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80091ca:	e05c      	b.n	8009286 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	6a39      	ldr	r1, [r7, #32]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f001 fb3f 	bl	800a854 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e07c      	b.n	80092da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009208:	b29b      	uxth	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009216:	b29b      	uxth	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d034      	beq.n	8009286 <HAL_I2C_Master_Receive+0x186>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009220:	2b00      	cmp	r3, #0
 8009222:	d130      	bne.n	8009286 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	2200      	movs	r2, #0
 800922c:	2180      	movs	r1, #128	; 0x80
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f001 fa54 	bl	800a6dc <I2C_WaitOnFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e04d      	b.n	80092da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009242:	b29b      	uxth	r3, r3
 8009244:	2bff      	cmp	r3, #255	; 0xff
 8009246:	d90e      	bls.n	8009266 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	22ff      	movs	r2, #255	; 0xff
 800924c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009252:	b2da      	uxtb	r2, r3
 8009254:	8979      	ldrh	r1, [r7, #10]
 8009256:	2300      	movs	r3, #0
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f001 fbca 	bl	800a9f8 <I2C_TransferConfig>
 8009264:	e00f      	b.n	8009286 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926a:	b29a      	uxth	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009274:	b2da      	uxtb	r2, r3
 8009276:	8979      	ldrh	r1, [r7, #10]
 8009278:	2300      	movs	r3, #0
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 fbb9 	bl	800a9f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928a:	b29b      	uxth	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d19d      	bne.n	80091cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	6a39      	ldr	r1, [r7, #32]
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f001 faa1 	bl	800a7dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e01a      	b.n	80092da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2220      	movs	r2, #32
 80092aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6859      	ldr	r1, [r3, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <HAL_I2C_Master_Receive+0x1e8>)
 80092b8:	400b      	ands	r3, r1
 80092ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2220      	movs	r2, #32
 80092c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	e000      	b.n	80092da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80092d8:	2302      	movs	r3, #2
  }
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	80002400 	.word	0x80002400
 80092e8:	fe00e800 	.word	0xfe00e800

080092ec <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	461a      	mov	r2, r3
 80092f8:	460b      	mov	r3, r1
 80092fa:	817b      	strh	r3, [r7, #10]
 80092fc:	4613      	mov	r3, r2
 80092fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b20      	cmp	r3, #32
 800930a:	d153      	bne.n	80093b4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800931a:	d101      	bne.n	8009320 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800931c:	2302      	movs	r3, #2
 800931e:	e04a      	b.n	80093b6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_I2C_Master_Receive_IT+0x42>
 800932a:	2302      	movs	r3, #2
 800932c:	e043      	b.n	80093b6 <HAL_I2C_Master_Receive_IT+0xca>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2222      	movs	r2, #34	; 0x22
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2210      	movs	r2, #16
 8009342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	893a      	ldrh	r2, [r7, #8]
 8009356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4a19      	ldr	r2, [pc, #100]	; (80093c0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800935c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4a18      	ldr	r2, [pc, #96]	; (80093c4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8009362:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2bff      	cmp	r3, #255	; 0xff
 800936c:	d906      	bls.n	800937c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	22ff      	movs	r2, #255	; 0xff
 8009372:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	e007      	b.n	800938c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009380:	b29a      	uxth	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800938a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009390:	b2da      	uxtb	r2, r3
 8009392:	8979      	ldrh	r1, [r7, #10]
 8009394:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f001 fb2c 	bl	800a9f8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80093a8:	2102      	movs	r1, #2
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f001 fb52 	bl	800aa54 <I2C_Enable_IRQ>

    return HAL_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e000      	b.n	80093b6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80093b4:	2302      	movs	r3, #2
  }
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	ffff0000 	.word	0xffff0000
 80093c4:	080096d1 	.word	0x080096d1
 80093c8:	80002400 	.word	0x80002400

080093cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	4608      	mov	r0, r1
 80093d6:	4611      	mov	r1, r2
 80093d8:	461a      	mov	r2, r3
 80093da:	4603      	mov	r3, r0
 80093dc:	817b      	strh	r3, [r7, #10]
 80093de:	460b      	mov	r3, r1
 80093e0:	813b      	strh	r3, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	f040 80f9 	bne.w	80095e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <HAL_I2C_Mem_Write+0x34>
 80093fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009406:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e0ed      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009412:	2b01      	cmp	r3, #1
 8009414:	d101      	bne.n	800941a <HAL_I2C_Mem_Write+0x4e>
 8009416:	2302      	movs	r3, #2
 8009418:	e0e6      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009422:	f7fd fa8f 	bl	8006944 <HAL_GetTick>
 8009426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2319      	movs	r3, #25
 800942e:	2201      	movs	r2, #1
 8009430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f001 f951 	bl	800a6dc <I2C_WaitOnFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e0d1      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2221      	movs	r2, #33	; 0x21
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2240      	movs	r2, #64	; 0x40
 8009450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a3a      	ldr	r2, [r7, #32]
 800945e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800946c:	88f8      	ldrh	r0, [r7, #6]
 800946e:	893a      	ldrh	r2, [r7, #8]
 8009470:	8979      	ldrh	r1, [r7, #10]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	4603      	mov	r3, r0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fd0f 	bl	8009ea0 <I2C_RequestMemoryWrite>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e0a9      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009498:	b29b      	uxth	r3, r3
 800949a:	2bff      	cmp	r3, #255	; 0xff
 800949c:	d90e      	bls.n	80094bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	22ff      	movs	r2, #255	; 0xff
 80094a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	8979      	ldrh	r1, [r7, #10]
 80094ac:	2300      	movs	r3, #0
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f001 fa9f 	bl	800a9f8 <I2C_TransferConfig>
 80094ba:	e00f      	b.n	80094dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	8979      	ldrh	r1, [r7, #10]
 80094ce:	2300      	movs	r3, #0
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f001 fa8e 	bl	800a9f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f001 f93b 	bl	800a75c <I2C_WaitOnTXISFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e07b      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	781a      	ldrb	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950a:	b29b      	uxth	r3, r3
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009524:	b29b      	uxth	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d034      	beq.n	8009594 <HAL_I2C_Mem_Write+0x1c8>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d130      	bne.n	8009594 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	2200      	movs	r2, #0
 800953a:	2180      	movs	r1, #128	; 0x80
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f001 f8cd 	bl	800a6dc <I2C_WaitOnFlagUntilTimeout>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e04d      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009550:	b29b      	uxth	r3, r3
 8009552:	2bff      	cmp	r3, #255	; 0xff
 8009554:	d90e      	bls.n	8009574 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	22ff      	movs	r2, #255	; 0xff
 800955a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009560:	b2da      	uxtb	r2, r3
 8009562:	8979      	ldrh	r1, [r7, #10]
 8009564:	2300      	movs	r3, #0
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f001 fa43 	bl	800a9f8 <I2C_TransferConfig>
 8009572:	e00f      	b.n	8009594 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009582:	b2da      	uxtb	r2, r3
 8009584:	8979      	ldrh	r1, [r7, #10]
 8009586:	2300      	movs	r3, #0
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f001 fa32 	bl	800a9f8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d19e      	bne.n	80094dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f001 f91a 	bl	800a7dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e01a      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2220      	movs	r2, #32
 80095b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6859      	ldr	r1, [r3, #4]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <HAL_I2C_Mem_Write+0x224>)
 80095c6:	400b      	ands	r3, r1
 80095c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e000      	b.n	80095e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80095e6:	2302      	movs	r3, #2
  }
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	fe00e800 	.word	0xfe00e800

080095f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	4798      	blx	r3
  }
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
 800965c:	4613      	mov	r3, r2
 800965e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <I2C_Master_ISR_IT+0x1e>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e115      	b.n	800991a <I2C_Master_ISR_IT+0x24a>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	091b      	lsrs	r3, r3, #4
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d013      	beq.n	800972a <I2C_Master_ISR_IT+0x5a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	091b      	lsrs	r3, r3, #4
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00d      	beq.n	800972a <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2210      	movs	r2, #16
 8009714:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971a:	f043 0204 	orr.w	r2, r3, #4
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 ff92 	bl	800a64c <I2C_Flush_TXDR>
 8009728:	e0e2      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	089b      	lsrs	r3, r3, #2
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d023      	beq.n	800977e <I2C_Master_ISR_IT+0xae>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	089b      	lsrs	r3, r3, #2
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01d      	beq.n	800977e <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f023 0304 	bic.w	r3, r3, #4
 8009748:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	b2d2      	uxtb	r2, r2
 8009756:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009772:	b29b      	uxth	r3, r3
 8009774:	3b01      	subs	r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800977c:	e0b8      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	085b      	lsrs	r3, r3, #1
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d01e      	beq.n	80097c8 <I2C_Master_ISR_IT+0xf8>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	085b      	lsrs	r3, r3, #1
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d018      	beq.n	80097c8 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097c6:	e093      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	09db      	lsrs	r3, r3, #7
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d05e      	beq.n	8009892 <I2C_Master_ISR_IT+0x1c2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	099b      	lsrs	r3, r3, #6
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d058      	beq.n	8009892 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d041      	beq.n	800986e <I2C_Master_ISR_IT+0x19e>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d13d      	bne.n	800986e <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097fe:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009804:	b29b      	uxth	r3, r3
 8009806:	2bff      	cmp	r3, #255	; 0xff
 8009808:	d90e      	bls.n	8009828 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	22ff      	movs	r2, #255	; 0xff
 800980e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009814:	b2da      	uxtb	r2, r3
 8009816:	8a79      	ldrh	r1, [r7, #18]
 8009818:	2300      	movs	r3, #0
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f001 f8e9 	bl	800a9f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009826:	e033      	b.n	8009890 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982c:	b29a      	uxth	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800983a:	d00c      	beq.n	8009856 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009840:	b2da      	uxtb	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009846:	8a79      	ldrh	r1, [r7, #18]
 8009848:	2300      	movs	r3, #0
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	4603      	mov	r3, r0
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f001 f8d2 	bl	800a9f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009854:	e01c      	b.n	8009890 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985a:	b2da      	uxtb	r2, r3
 800985c:	8a79      	ldrh	r1, [r7, #18]
 800985e:	2300      	movs	r3, #0
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f001 f8c6 	bl	800a9f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800986c:	e010      	b.n	8009890 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800987c:	d003      	beq.n	8009886 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fbe4 	bl	800a04c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009884:	e034      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009886:	2140      	movs	r1, #64	; 0x40
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 fe1f 	bl	800a4cc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800988e:	e02f      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
 8009890:	e02e      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	099b      	lsrs	r3, r3, #6
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d028      	beq.n	80098f0 <I2C_Master_ISR_IT+0x220>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	099b      	lsrs	r3, r3, #6
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d022      	beq.n	80098f0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d119      	bne.n	80098e8 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098c2:	d015      	beq.n	80098f0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098cc:	d108      	bne.n	80098e0 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	e007      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fbb3 	bl	800a04c <I2C_ITMasterSeqCplt>
 80098e6:	e003      	b.n	80098f0 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80098e8:	2140      	movs	r1, #64	; 0x40
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fdee 	bl	800a4cc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d009      	beq.n	8009910 <I2C_Master_ISR_IT+0x240>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009908:	6979      	ldr	r1, [r7, #20]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 fc18 	bl	800a140 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009932:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800993e:	2b01      	cmp	r3, #1
 8009940:	d101      	bne.n	8009946 <I2C_Slave_ISR_IT+0x24>
 8009942:	2302      	movs	r3, #2
 8009944:	e0ec      	b.n	8009b20 <I2C_Slave_ISR_IT+0x1fe>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <I2C_Slave_ISR_IT+0x4c>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	095b      	lsrs	r3, r3, #5
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009966:	6939      	ldr	r1, [r7, #16]
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 fc85 	bl	800a278 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	091b      	lsrs	r3, r3, #4
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d04d      	beq.n	8009a16 <I2C_Slave_ISR_IT+0xf4>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	091b      	lsrs	r3, r3, #4
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d047      	beq.n	8009a16 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d128      	bne.n	80099e2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b28      	cmp	r3, #40	; 0x28
 800999a:	d108      	bne.n	80099ae <I2C_Slave_ISR_IT+0x8c>
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099a2:	d104      	bne.n	80099ae <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80099a4:	6939      	ldr	r1, [r7, #16]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fd3c 	bl	800a424 <I2C_ITListenCplt>
 80099ac:	e032      	b.n	8009a14 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b29      	cmp	r3, #41	; 0x29
 80099b8:	d10e      	bne.n	80099d8 <I2C_Slave_ISR_IT+0xb6>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099c0:	d00a      	beq.n	80099d8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2210      	movs	r2, #16
 80099c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 fe3e 	bl	800a64c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 fb78 	bl	800a0c6 <I2C_ITSlaveSeqCplt>
 80099d6:	e01d      	b.n	8009a14 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2210      	movs	r2, #16
 80099de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80099e0:	e096      	b.n	8009b10 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2210      	movs	r2, #16
 80099e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ee:	f043 0204 	orr.w	r2, r3, #4
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d004      	beq.n	8009a06 <I2C_Slave_ISR_IT+0xe4>
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a02:	f040 8085 	bne.w	8009b10 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 fd5d 	bl	800a4cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009a12:	e07d      	b.n	8009b10 <I2C_Slave_ISR_IT+0x1ee>
 8009a14:	e07c      	b.n	8009b10 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	089b      	lsrs	r3, r3, #2
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d030      	beq.n	8009a84 <I2C_Slave_ISR_IT+0x162>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	089b      	lsrs	r3, r3, #2
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d02a      	beq.n	8009a84 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d018      	beq.n	8009a6a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	3b01      	subs	r3, #1
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d14f      	bne.n	8009b14 <I2C_Slave_ISR_IT+0x1f2>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a7a:	d04b      	beq.n	8009b14 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 fb22 	bl	800a0c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009a82:	e047      	b.n	8009b14 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	08db      	lsrs	r3, r3, #3
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00a      	beq.n	8009aa6 <I2C_Slave_ISR_IT+0x184>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	08db      	lsrs	r3, r3, #3
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009a9c:	6939      	ldr	r1, [r7, #16]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 fa52 	bl	8009f48 <I2C_ITAddrCplt>
 8009aa4:	e037      	b.n	8009b16 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	085b      	lsrs	r3, r3, #1
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d031      	beq.n	8009b16 <I2C_Slave_ISR_IT+0x1f4>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	085b      	lsrs	r3, r3, #1
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d02b      	beq.n	8009b16 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d018      	beq.n	8009afa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	781a      	ldrb	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	851a      	strh	r2, [r3, #40]	; 0x28
 8009af8:	e00d      	b.n	8009b16 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b00:	d002      	beq.n	8009b08 <I2C_Slave_ISR_IT+0x1e6>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d106      	bne.n	8009b16 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fadc 	bl	800a0c6 <I2C_ITSlaveSeqCplt>
 8009b0e:	e002      	b.n	8009b16 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009b10:	bf00      	nop
 8009b12:	e000      	b.n	8009b16 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009b14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d101      	bne.n	8009b42 <I2C_Master_ISR_DMA+0x1a>
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e0e1      	b.n	8009d06 <I2C_Master_ISR_DMA+0x1de>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	091b      	lsrs	r3, r3, #4
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d017      	beq.n	8009b86 <I2C_Master_ISR_DMA+0x5e>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	091b      	lsrs	r3, r3, #4
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d011      	beq.n	8009b86 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2210      	movs	r2, #16
 8009b68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	f043 0204 	orr.w	r2, r3, #4
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009b76:	2112      	movs	r1, #18
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 ff6b 	bl	800aa54 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 fd64 	bl	800a64c <I2C_Flush_TXDR>
 8009b84:	e0ba      	b.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	09db      	lsrs	r3, r3, #7
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d072      	beq.n	8009c78 <I2C_Master_ISR_DMA+0x150>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	099b      	lsrs	r3, r3, #6
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d06c      	beq.n	8009c78 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d04e      	beq.n	8009c56 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bc4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	2bff      	cmp	r3, #255	; 0xff
 8009bce:	d906      	bls.n	8009bde <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	22ff      	movs	r2, #255	; 0xff
 8009bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e010      	b.n	8009c00 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bf0:	d003      	beq.n	8009bfa <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	e002      	b.n	8009c00 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bfe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	8a79      	ldrh	r1, [r7, #18]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fef2 	bl	800a9f8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b22      	cmp	r3, #34	; 0x22
 8009c30:	d108      	bne.n	8009c44 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009c42:	e05b      	b.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c52:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009c54:	e052      	b.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c64:	d003      	beq.n	8009c6e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f9f0 	bl	800a04c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009c6c:	e046      	b.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c6e:	2140      	movs	r1, #64	; 0x40
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fc2b 	bl	800a4cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009c76:	e041      	b.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	099b      	lsrs	r3, r3, #6
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d029      	beq.n	8009cd8 <I2C_Master_ISR_DMA+0x1b0>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	099b      	lsrs	r3, r3, #6
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d023      	beq.n	8009cd8 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d119      	bne.n	8009cce <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ca8:	d027      	beq.n	8009cfa <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cb2:	d108      	bne.n	8009cc6 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cc2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009cc4:	e019      	b.n	8009cfa <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 f9c0 	bl	800a04c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009ccc:	e015      	b.n	8009cfa <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009cce:	2140      	movs	r1, #64	; 0x40
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fbfb 	bl	800a4cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009cd6:	e010      	b.n	8009cfa <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	095b      	lsrs	r3, r3, #5
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00b      	beq.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	095b      	lsrs	r3, r3, #5
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 fa24 	bl	800a140 <I2C_ITMasterCplt>
 8009cf8:	e000      	b.n	8009cfc <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009cfa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b086      	sub	sp, #24
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <I2C_Slave_ISR_DMA+0x24>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e0b1      	b.n	8009e96 <I2C_Slave_ISR_DMA+0x188>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	095b      	lsrs	r3, r3, #5
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <I2C_Slave_ISR_DMA+0x4c>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	095b      	lsrs	r3, r3, #5
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fa8f 	bl	800a278 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	091b      	lsrs	r3, r3, #4
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 8082 	beq.w	8009e6c <I2C_Slave_ISR_DMA+0x15e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	091b      	lsrs	r3, r3, #4
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d07b      	beq.n	8009e6c <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	0b9b      	lsrs	r3, r3, #14
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d105      	bne.n	8009d8c <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	0bdb      	lsrs	r3, r3, #15
 8009d84:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d068      	beq.n	8009e5e <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00d      	beq.n	8009db0 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	0bdb      	lsrs	r3, r3, #15
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d007      	beq.n	8009db0 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8009dac:	2301      	movs	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00d      	beq.n	8009dd4 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	0b9b      	lsrs	r3, r3, #14
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d007      	beq.n	8009dd4 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d128      	bne.n	8009e2c <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b28      	cmp	r3, #40	; 0x28
 8009de4:	d108      	bne.n	8009df8 <I2C_Slave_ISR_DMA+0xea>
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dec:	d104      	bne.n	8009df8 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 fb17 	bl	800a424 <I2C_ITListenCplt>
 8009df6:	e031      	b.n	8009e5c <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b29      	cmp	r3, #41	; 0x29
 8009e02:	d10e      	bne.n	8009e22 <I2C_Slave_ISR_DMA+0x114>
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e0a:	d00a      	beq.n	8009e22 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2210      	movs	r2, #16
 8009e12:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 fc19 	bl	800a64c <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 f953 	bl	800a0c6 <I2C_ITSlaveSeqCplt>
 8009e20:	e01c      	b.n	8009e5c <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2210      	movs	r2, #16
 8009e28:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009e2a:	e01d      	b.n	8009e68 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2210      	movs	r2, #16
 8009e32:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e38:	f043 0204 	orr.w	r2, r3, #4
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <I2C_Slave_ISR_DMA+0x140>
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e4c:	d10c      	bne.n	8009e68 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e52:	4619      	mov	r1, r3
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fb39 	bl	800a4cc <I2C_ITError>
      if (treatdmanack == 1U)
 8009e5a:	e005      	b.n	8009e68 <I2C_Slave_ISR_DMA+0x15a>
 8009e5c:	e004      	b.n	8009e68 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2210      	movs	r2, #16
 8009e64:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009e66:	e011      	b.n	8009e8c <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8009e68:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009e6a:	e00f      	b.n	8009e8c <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	08db      	lsrs	r3, r3, #3
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d009      	beq.n	8009e8c <I2C_Slave_ISR_DMA+0x17e>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	08db      	lsrs	r3, r3, #3
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 f85e 	bl	8009f48 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	461a      	mov	r2, r3
 8009eae:	4603      	mov	r3, r0
 8009eb0:	817b      	strh	r3, [r7, #10]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	813b      	strh	r3, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	8979      	ldrh	r1, [r7, #10]
 8009ec0:	4b20      	ldr	r3, [pc, #128]	; (8009f44 <I2C_RequestMemoryWrite+0xa4>)
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fd95 	bl	800a9f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ece:	69fa      	ldr	r2, [r7, #28]
 8009ed0:	69b9      	ldr	r1, [r7, #24]
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fc42 	bl	800a75c <I2C_WaitOnTXISFlagUntilTimeout>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e02c      	b.n	8009f3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d105      	bne.n	8009ef4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ee8:	893b      	ldrh	r3, [r7, #8]
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8009ef2:	e015      	b.n	8009f20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ef4:	893b      	ldrh	r3, [r7, #8]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f02:	69fa      	ldr	r2, [r7, #28]
 8009f04:	69b9      	ldr	r1, [r7, #24]
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 fc28 	bl	800a75c <I2C_WaitOnTXISFlagUntilTimeout>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e012      	b.n	8009f3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f16:	893b      	ldrh	r3, [r7, #8]
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2200      	movs	r2, #0
 8009f28:	2180      	movs	r1, #128	; 0x80
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 fbd6 	bl	800a6dc <I2C_WaitOnFlagUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e000      	b.n	8009f3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	80002000 	.word	0x80002000

08009f48 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009f5e:	2b28      	cmp	r3, #40	; 0x28
 8009f60:	d168      	bne.n	800a034 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	0c1b      	lsrs	r3, r3, #16
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009f80:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f8e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009f9c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d137      	bne.n	800a016 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009fa6:	897b      	ldrh	r3, [r7, #10]
 8009fa8:	09db      	lsrs	r3, r3, #7
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	89bb      	ldrh	r3, [r7, #12]
 8009fae:	4053      	eors	r3, r2
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	f003 0306 	and.w	r3, r3, #6
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d11c      	bne.n	8009ff4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009fba:	897b      	ldrh	r3, [r7, #10]
 8009fbc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d139      	bne.n	800a044 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2208      	movs	r2, #8
 8009fdc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009fe6:	89ba      	ldrh	r2, [r7, #12]
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff fb2f 	bl	8009650 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ff2:	e027      	b.n	800a044 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8009ff4:	893b      	ldrh	r3, [r7, #8]
 8009ff6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fd98 	bl	800ab30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a008:	89ba      	ldrh	r2, [r7, #12]
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff fb1e 	bl	8009650 <HAL_I2C_AddrCallback>
}
 800a014:	e016      	b.n	800a044 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a016:	2104      	movs	r1, #4
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fd89 	bl	800ab30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a026:	89ba      	ldrh	r2, [r7, #12]
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff fb0f 	bl	8009650 <HAL_I2C_AddrCallback>
}
 800a032:	e007      	b.n	800a044 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2208      	movs	r2, #8
 800a03a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a044:	bf00      	nop
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b21      	cmp	r3, #33	; 0x21
 800a066:	d115      	bne.n	800a094 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2211      	movs	r2, #17
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a07c:	2101      	movs	r1, #1
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fd56 	bl	800ab30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7f9 ffdf 	bl	8004050 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a092:	e014      	b.n	800a0be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2212      	movs	r2, #18
 800a0a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a0a8:	2102      	movs	r1, #2
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fd40 	bl	800ab30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7f9 ffdf 	bl	800407c <HAL_I2C_MasterRxCpltCallback>
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b29      	cmp	r3, #41	; 0x29
 800a0e0:	d112      	bne.n	800a108 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2228      	movs	r2, #40	; 0x28
 800a0e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2221      	movs	r2, #33	; 0x21
 800a0ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fd1c 	bl	800ab30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fa91 	bl	8009628 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a106:	e017      	b.n	800a138 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b2a      	cmp	r3, #42	; 0x2a
 800a112:	d111      	bne.n	800a138 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2228      	movs	r2, #40	; 0x28
 800a118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2222      	movs	r2, #34	; 0x22
 800a120:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a122:	2102      	movs	r1, #2
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fd03 	bl	800ab30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fa82 	bl	800963c <HAL_I2C_SlaveRxCpltCallback>
}
 800a138:	bf00      	nop
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2220      	movs	r2, #32
 800a150:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6859      	ldr	r1, [r3, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	4b44      	ldr	r3, [pc, #272]	; (800a270 <I2C_ITMasterCplt+0x130>)
 800a15e:	400b      	ands	r3, r1
 800a160:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a40      	ldr	r2, [pc, #256]	; (800a274 <I2C_ITMasterCplt+0x134>)
 800a172:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	091b      	lsrs	r3, r3, #4
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2210      	movs	r2, #16
 800a186:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18c:	f043 0204 	orr.w	r2, r3, #4
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fa59 	bl	800a64c <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a19a:	2103      	movs	r1, #3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fcc7 	bl	800ab30 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b60      	cmp	r3, #96	; 0x60
 800a1b2:	d002      	beq.n	800a1ba <I2C_ITMasterCplt+0x7a>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d006      	beq.n	800a1c8 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f983 	bl	800a4cc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1c6:	e04e      	b.n	800a266 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b21      	cmp	r3, #33	; 0x21
 800a1d2:	d121      	bne.n	800a218 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b40      	cmp	r3, #64	; 0x40
 800a1e6:	d10b      	bne.n	800a200 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff fa41 	bl	8009680 <HAL_I2C_MemTxCpltCallback>
}
 800a1fe:	e032      	b.n	800a266 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7f9 ff1d 	bl	8004050 <HAL_I2C_MasterTxCpltCallback>
}
 800a216:	e026      	b.n	800a266 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b22      	cmp	r3, #34	; 0x22
 800a222:	d120      	bne.n	800a266 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2220      	movs	r2, #32
 800a228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d10b      	bne.n	800a250 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7ff fa23 	bl	8009694 <HAL_I2C_MemRxCpltCallback>
}
 800a24e:	e00a      	b.n	800a266 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7f9 ff0b 	bl	800407c <HAL_I2C_MasterRxCpltCallback>
}
 800a266:	bf00      	nop
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	fe00e800 	.word	0xfe00e800
 800a274:	ffff0000 	.word	0xffff0000

0800a278 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2220      	movs	r2, #32
 800a294:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a296:	2107      	movs	r1, #7
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fc49 	bl	800ab30 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2ac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6859      	ldr	r1, [r3, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	4b58      	ldr	r3, [pc, #352]	; (800a41c <I2C_ITSlaveCplt+0x1a4>)
 800a2ba:	400b      	ands	r3, r1
 800a2bc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f9c4 	bl	800a64c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	0b9b      	lsrs	r3, r3, #14
 800a2c8:	f003 0301 	and.w	r3, r3, #1
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d018      	beq.n	800a30a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a2e6:	e010      	b.n	800a30a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	0bdb      	lsrs	r3, r3, #15
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00a      	beq.n	800a30a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d006      	beq.n	800a30a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	089b      	lsrs	r3, r3, #2
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	d020      	beq.n	800a358 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f023 0304 	bic.w	r3, r3, #4
 800a31c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	b2d2      	uxtb	r2, r2
 800a32a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00c      	beq.n	800a358 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a342:	3b01      	subs	r3, #1
 800a344:	b29a      	uxth	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3b01      	subs	r3, #1
 800a352:	b29a      	uxth	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a366:	f043 0204 	orr.w	r2, r3, #4
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a386:	2b00      	cmp	r3, #0
 800a388:	d010      	beq.n	800a3ac <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f89b 	bl	800a4cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b28      	cmp	r3, #40	; 0x28
 800a3a0:	d138      	bne.n	800a414 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a3a2:	68f9      	ldr	r1, [r7, #12]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f83d 	bl	800a424 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a3aa:	e033      	b.n	800a414 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a3b4:	d011      	beq.n	800a3da <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff fe85 	bl	800a0c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a18      	ldr	r2, [pc, #96]	; (800a420 <I2C_ITSlaveCplt+0x1a8>)
 800a3c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff f94a 	bl	800966c <HAL_I2C_ListenCpltCallback>
}
 800a3d8:	e01c      	b.n	800a414 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b22      	cmp	r3, #34	; 0x22
 800a3e4:	d10b      	bne.n	800a3fe <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff f920 	bl	800963c <HAL_I2C_SlaveRxCpltCallback>
}
 800a3fc:	e00a      	b.n	800a414 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff f90a 	bl	8009628 <HAL_I2C_SlaveTxCpltCallback>
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	fe00e800 	.word	0xfe00e800
 800a420:	ffff0000 	.word	0xffff0000

0800a424 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a25      	ldr	r2, [pc, #148]	; (800a4c8 <I2C_ITListenCplt+0xa4>)
 800a432:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2220      	movs	r2, #32
 800a43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	089b      	lsrs	r3, r3, #2
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d022      	beq.n	800a4a2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d012      	beq.n	800a4a2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a480:	3b01      	subs	r3, #1
 800a482:	b29a      	uxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49a:	f043 0204 	orr.w	r2, r3, #4
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a4a2:	2107      	movs	r1, #7
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb43 	bl	800ab30 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2210      	movs	r2, #16
 800a4b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff f8d6 	bl	800966c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	ffff0000 	.word	0xffff0000

0800a4cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4dc:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a55      	ldr	r2, [pc, #340]	; (800a640 <I2C_ITError+0x174>)
 800a4ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	2b28      	cmp	r3, #40	; 0x28
 800a502:	d005      	beq.n	800a510 <I2C_ITError+0x44>
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	2b29      	cmp	r3, #41	; 0x29
 800a508:	d002      	beq.n	800a510 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	2b2a      	cmp	r3, #42	; 0x2a
 800a50e:	d10e      	bne.n	800a52e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a510:	2103      	movs	r1, #3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fb0c 	bl	800ab30 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2228      	movs	r2, #40	; 0x28
 800a51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a46      	ldr	r2, [pc, #280]	; (800a644 <I2C_ITError+0x178>)
 800a52a:	635a      	str	r2, [r3, #52]	; 0x34
 800a52c:	e013      	b.n	800a556 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a52e:	2107      	movs	r1, #7
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fafd 	bl	800ab30 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b60      	cmp	r3, #96	; 0x60
 800a540:	d003      	beq.n	800a54a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2220      	movs	r2, #32
 800a546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a564:	d123      	bne.n	800a5ae <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a574:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d05c      	beq.n	800a638 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a582:	4a31      	ldr	r2, [pc, #196]	; (800a648 <I2C_ITError+0x17c>)
 800a584:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe f8e2 	bl	800875c <HAL_DMA_Abort_IT>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d04c      	beq.n	800a638 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a5ac:	e044      	b.n	800a638 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5bc:	d123      	bne.n	800a606 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5cc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d030      	beq.n	800a638 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5da:	4a1b      	ldr	r2, [pc, #108]	; (800a648 <I2C_ITError+0x17c>)
 800a5dc:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe f8b6 	bl	800875c <HAL_DMA_Abort_IT>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d020      	beq.n	800a638 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a600:	4610      	mov	r0, r2
 800a602:	4798      	blx	r3
}
 800a604:	e018      	b.n	800a638 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b60      	cmp	r3, #96	; 0x60
 800a610:	d10b      	bne.n	800a62a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff f84a 	bl	80096bc <HAL_I2C_AbortCpltCallback>
}
 800a628:	e006      	b.n	800a638 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff f838 	bl	80096a8 <HAL_I2C_ErrorCallback>
}
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	ffff0000 	.word	0xffff0000
 800a644:	08009923 	.word	0x08009923
 800a648:	0800a695 	.word	0x0800a695

0800a64c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d103      	bne.n	800a66a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2200      	movs	r2, #0
 800a668:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b01      	cmp	r3, #1
 800a676:	d007      	beq.n	800a688 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699a      	ldr	r2, [r3, #24]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0201 	orr.w	r2, r2, #1
 800a686:	619a      	str	r2, [r3, #24]
  }
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b60      	cmp	r3, #96	; 0x60
 800a6bc:	d107      	bne.n	800a6ce <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7fe fff8 	bl	80096bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a6cc:	e002      	b.n	800a6d4 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7fe ffea 	bl	80096a8 <HAL_I2C_ErrorCallback>
}
 800a6d4:	bf00      	nop
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6ec:	e022      	b.n	800a734 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d01e      	beq.n	800a734 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f6:	f7fc f925 	bl	8006944 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d302      	bcc.n	800a70c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d113      	bne.n	800a734 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a710:	f043 0220 	orr.w	r2, r3, #32
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e00f      	b.n	800a754 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	699a      	ldr	r2, [r3, #24]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	4013      	ands	r3, r2
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	429a      	cmp	r2, r3
 800a742:	bf0c      	ite	eq
 800a744:	2301      	moveq	r3, #1
 800a746:	2300      	movne	r3, #0
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	461a      	mov	r2, r3
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d0cd      	beq.n	800a6ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a768:	e02c      	b.n	800a7c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 f8dc 	bl	800a92c <I2C_IsAcknowledgeFailed>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e02a      	b.n	800a7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d01e      	beq.n	800a7c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a786:	f7fc f8dd 	bl	8006944 <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d302      	bcc.n	800a79c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d113      	bne.n	800a7c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a0:	f043 0220 	orr.w	r2, r3, #32
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e007      	b.n	800a7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d1cb      	bne.n	800a76a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7e8:	e028      	b.n	800a83c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f89c 	bl	800a92c <I2C_IsAcknowledgeFailed>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e026      	b.n	800a84c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7fe:	f7fc f8a1 	bl	8006944 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d302      	bcc.n	800a814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d113      	bne.n	800a83c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a818:	f043 0220 	orr.w	r2, r3, #32
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2220      	movs	r2, #32
 800a824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e007      	b.n	800a84c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b20      	cmp	r3, #32
 800a848:	d1cf      	bne.n	800a7ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a860:	e055      	b.n	800a90e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f000 f860 	bl	800a92c <I2C_IsAcknowledgeFailed>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e053      	b.n	800a91e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b20      	cmp	r3, #32
 800a882:	d129      	bne.n	800a8d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d105      	bne.n	800a89e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	e03f      	b.n	800a91e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6859      	ldr	r1, [r3, #4]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	4b1d      	ldr	r3, [pc, #116]	; (800a928 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a8b2:	400b      	ands	r3, r1
 800a8b4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e022      	b.n	800a91e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8d8:	f7fc f834 	bl	8006944 <HAL_GetTick>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d302      	bcc.n	800a8ee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10f      	bne.n	800a90e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	f043 0220 	orr.w	r2, r3, #32
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e007      	b.n	800a91e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	f003 0304 	and.w	r3, r3, #4
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d1a2      	bne.n	800a862 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	fe00e800 	.word	0xfe00e800

0800a92c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f003 0310 	and.w	r3, r3, #16
 800a942:	2b10      	cmp	r3, #16
 800a944:	d151      	bne.n	800a9ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a946:	e022      	b.n	800a98e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94e:	d01e      	beq.n	800a98e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a950:	f7fb fff8 	bl	8006944 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d302      	bcc.n	800a966 <I2C_IsAcknowledgeFailed+0x3a>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d113      	bne.n	800a98e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96a:	f043 0220 	orr.w	r2, r3, #32
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2220      	movs	r2, #32
 800a976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e02e      	b.n	800a9ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	f003 0320 	and.w	r3, r3, #32
 800a998:	2b20      	cmp	r3, #32
 800a99a:	d1d5      	bne.n	800a948 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f7ff fe4d 	bl	800a64c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6859      	ldr	r1, [r3, #4]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	4b0d      	ldr	r3, [pc, #52]	; (800a9f4 <I2C_IsAcknowledgeFailed+0xc8>)
 800a9be:	400b      	ands	r3, r1
 800a9c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	f043 0204 	orr.w	r2, r3, #4
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e000      	b.n	800a9ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	fe00e800 	.word	0xfe00e800

0800a9f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	607b      	str	r3, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	817b      	strh	r3, [r7, #10]
 800aa06:	4613      	mov	r3, r2
 800aa08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	0d5b      	lsrs	r3, r3, #21
 800aa14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <I2C_TransferConfig+0x58>)
 800aa1a:	430b      	orrs	r3, r1
 800aa1c:	43db      	mvns	r3, r3
 800aa1e:	ea02 0103 	and.w	r1, r2, r3
 800aa22:	897b      	ldrh	r3, [r7, #10]
 800aa24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa28:	7a7b      	ldrb	r3, [r7, #9]
 800aa2a:	041b      	lsls	r3, r3, #16
 800aa2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa30:	431a      	orrs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	431a      	orrs	r2, r3
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800aa42:	bf00      	nop
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	03ff63ff 	.word	0x03ff63ff

0800aa54 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa68:	4a2f      	ldr	r2, [pc, #188]	; (800ab28 <I2C_Enable_IRQ+0xd4>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d004      	beq.n	800aa78 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800aa72:	4a2e      	ldr	r2, [pc, #184]	; (800ab2c <I2C_Enable_IRQ+0xd8>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d124      	bne.n	800aac2 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aa78:	887b      	ldrh	r3, [r7, #2]
 800aa7a:	f003 0304 	and.w	r3, r3, #4
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aa88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800aa8a:	887b      	ldrh	r3, [r7, #2]
 800aa8c:	f003 0311 	and.w	r3, r3, #17
 800aa90:	2b11      	cmp	r3, #17
 800aa92:	d103      	bne.n	800aa9c <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800aa9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800aa9c:	887b      	ldrh	r3, [r7, #2]
 800aa9e:	f003 0312 	and.w	r3, r3, #18
 800aaa2:	2b12      	cmp	r3, #18
 800aaa4:	d103      	bne.n	800aaae <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f043 0320 	orr.w	r3, r3, #32
 800aaac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800aaae:	887b      	ldrh	r3, [r7, #2]
 800aab0:	f003 0312 	and.w	r3, r3, #18
 800aab4:	2b12      	cmp	r3, #18
 800aab6:	d128      	bne.n	800ab0a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aabe:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800aac0:	e023      	b.n	800ab0a <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aac2:	887b      	ldrh	r3, [r7, #2]
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aad2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aad4:	887b      	ldrh	r3, [r7, #2]
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800aae4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aae6:	887b      	ldrh	r3, [r7, #2]
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800aaf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800aaf8:	887b      	ldrh	r3, [r7, #2]
 800aafa:	f003 0312 	and.w	r3, r3, #18
 800aafe:	2b12      	cmp	r3, #18
 800ab00:	d103      	bne.n	800ab0a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f043 0320 	orr.w	r3, r3, #32
 800ab08:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6819      	ldr	r1, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	601a      	str	r2, [r3, #0]
}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	08009b29 	.word	0x08009b29
 800ab2c:	08009d0f 	.word	0x08009d0f

0800ab30 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ab40:	887b      	ldrh	r3, [r7, #2]
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00f      	beq.n	800ab6a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800ab50:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ab5e:	2b28      	cmp	r3, #40	; 0x28
 800ab60:	d003      	beq.n	800ab6a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ab68:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ab6a:	887b      	ldrh	r3, [r7, #2]
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00f      	beq.n	800ab94 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800ab7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ab88:	2b28      	cmp	r3, #40	; 0x28
 800ab8a:	d003      	beq.n	800ab94 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ab92:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ab94:	887b      	ldrh	r3, [r7, #2]
 800ab96:	f003 0304 	and.w	r3, r3, #4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aba4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800aba6:	887b      	ldrh	r3, [r7, #2]
 800aba8:	f003 0311 	and.w	r3, r3, #17
 800abac:	2b11      	cmp	r3, #17
 800abae:	d103      	bne.n	800abb8 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800abb6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800abb8:	887b      	ldrh	r3, [r7, #2]
 800abba:	f003 0312 	and.w	r3, r3, #18
 800abbe:	2b12      	cmp	r3, #18
 800abc0:	d103      	bne.n	800abca <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f043 0320 	orr.w	r3, r3, #32
 800abc8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800abca:	887b      	ldrh	r3, [r7, #2]
 800abcc:	f003 0312 	and.w	r3, r3, #18
 800abd0:	2b12      	cmp	r3, #18
 800abd2:	d103      	bne.n	800abdc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abda:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6819      	ldr	r1, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	43da      	mvns	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	400a      	ands	r2, r1
 800abec:	601a      	str	r2, [r3, #0]
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d138      	bne.n	800ac82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e032      	b.n	800ac84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2224      	movs	r2, #36	; 0x24
 800ac2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f022 0201 	bic.w	r2, r2, #1
 800ac3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f042 0201 	orr.w	r2, r2, #1
 800ac6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2220      	movs	r2, #32
 800ac72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	e000      	b.n	800ac84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac82:	2302      	movs	r3, #2
  }
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	d139      	bne.n	800ad1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acac:	2b01      	cmp	r3, #1
 800acae:	d101      	bne.n	800acb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e033      	b.n	800ad1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2224      	movs	r2, #36	; 0x24
 800acc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f022 0201 	bic.w	r2, r2, #1
 800acd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ace2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	021b      	lsls	r3, r3, #8
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f042 0201 	orr.w	r2, r2, #1
 800ad04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2220      	movs	r2, #32
 800ad0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	e000      	b.n	800ad1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ad1a:	2302      	movs	r3, #2
  }
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad2a:	b08b      	sub	sp, #44	; 0x2c
 800ad2c:	af06      	add	r7, sp, #24
 800ad2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e0ad      	b.n	800ae96 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f00e fcec 	bl	801972c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2203      	movs	r2, #3
 800ad58:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f004 f967 	bl	800f034 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad66:	2300      	movs	r3, #0
 800ad68:	73fb      	strb	r3, [r7, #15]
 800ad6a:	e035      	b.n	800add8 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	015b      	lsls	r3, r3, #5
 800ad72:	4413      	add	r3, r2
 800ad74:	3329      	adds	r3, #41	; 0x29
 800ad76:	2201      	movs	r2, #1
 800ad78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	015b      	lsls	r3, r3, #5
 800ad80:	4413      	add	r3, r2
 800ad82:	3328      	adds	r3, #40	; 0x28
 800ad84:	7bfa      	ldrb	r2, [r7, #15]
 800ad86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	7bfa      	ldrb	r2, [r7, #15]
 800ad8c:	b291      	uxth	r1, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	015b      	lsls	r3, r3, #5
 800ad92:	4413      	add	r3, r2
 800ad94:	3336      	adds	r3, #54	; 0x36
 800ad96:	460a      	mov	r2, r1
 800ad98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	015b      	lsls	r3, r3, #5
 800ada0:	4413      	add	r3, r2
 800ada2:	332b      	adds	r3, #43	; 0x2b
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	015b      	lsls	r3, r3, #5
 800adae:	4413      	add	r3, r2
 800adb0:	3338      	adds	r3, #56	; 0x38
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	015b      	lsls	r3, r3, #5
 800adbc:	4413      	add	r3, r2
 800adbe:	333c      	adds	r3, #60	; 0x3c
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	3302      	adds	r3, #2
 800adca:	015b      	lsls	r3, r3, #5
 800adcc:	4413      	add	r3, r2
 800adce:	2200      	movs	r2, #0
 800add0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800add2:	7bfb      	ldrb	r3, [r7, #15]
 800add4:	3301      	adds	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
 800add8:	7bfa      	ldrb	r2, [r7, #15]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d3c4      	bcc.n	800ad6c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]
 800ade6:	e031      	b.n	800ae4c <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	015b      	lsls	r3, r3, #5
 800adee:	4413      	add	r3, r2
 800adf0:	f203 1329 	addw	r3, r3, #297	; 0x129
 800adf4:	2200      	movs	r2, #0
 800adf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	015b      	lsls	r3, r3, #5
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae04:	7bfa      	ldrb	r2, [r7, #15]
 800ae06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	015b      	lsls	r3, r3, #5
 800ae0e:	4413      	add	r3, r2
 800ae10:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800ae14:	2200      	movs	r2, #0
 800ae16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	015b      	lsls	r3, r3, #5
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ae24:	2200      	movs	r2, #0
 800ae26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	015b      	lsls	r3, r3, #5
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	330a      	adds	r3, #10
 800ae3e:	015b      	lsls	r3, r3, #5
 800ae40:	4413      	add	r3, r2
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
 800ae4c:	7bfa      	ldrb	r2, [r7, #15]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d3c8      	bcc.n	800ade8 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	687e      	ldr	r6, [r7, #4]
 800ae5e:	466d      	mov	r5, sp
 800ae60:	f106 0410 	add.w	r4, r6, #16
 800ae64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	1d33      	adds	r3, r6, #4
 800ae6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae70:	6838      	ldr	r0, [r7, #0]
 800ae72:	f004 f8fc 	bl	800f06e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d102      	bne.n	800ae94 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fe5f 	bl	800bb52 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b082      	sub	sp, #8
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_PCD_Start+0x16>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e012      	b.n	800aeda <HAL_PCD_Start+0x3c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f005 f926 	bl	8010112 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f004 f89a 	bl	800f004 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d101      	bne.n	800aef8 <HAL_PCD_Stop+0x16>
 800aef4:	2302      	movs	r3, #2
 800aef6:	e012      	b.n	800af1e <HAL_PCD_Stop+0x3c>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f004 f895 	bl	800f034 <USB_DisableGlobalInt>

  (void)USB_StopDevice(hpcd->Instance);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4618      	mov	r0, r3
 800af10:	f005 f8d4 	bl	80100bc <USB_StopDevice>

  __HAL_UNLOCK(hpcd);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4618      	mov	r0, r3
 800af34:	f005 f904 	bl	8010140 <USB_ReadInterrupts>
 800af38:	4603      	mov	r3, r0
 800af3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af42:	d102      	bne.n	800af4a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fb3f 	bl	800b5c8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4618      	mov	r0, r3
 800af50:	f005 f8f6 	bl	8010140 <USB_ReadInterrupts>
 800af54:	4603      	mov	r3, r0
 800af56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af5e:	d112      	bne.n	800af86 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af68:	b29a      	uxth	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af72:	b292      	uxth	r2, r2
 800af74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f00e fc5e 	bl	801983a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800af7e:	2100      	movs	r1, #0
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f929 	bl	800b1d8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f005 f8d8 	bl	8010140 <USB_ReadInterrupts>
 800af90:	4603      	mov	r3, r0
 800af92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af9a:	d10b      	bne.n	800afb4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800afae:	b292      	uxth	r2, r2
 800afb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4618      	mov	r0, r3
 800afba:	f005 f8c1 	bl	8010140 <USB_ReadInterrupts>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afc8:	d10b      	bne.n	800afe2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afdc:	b292      	uxth	r2, r2
 800afde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f005 f8aa 	bl	8010140 <USB_ReadInterrupts>
 800afec:	4603      	mov	r3, r0
 800afee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff6:	d133      	bne.n	800b060 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b000:	b29a      	uxth	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0204 	bic.w	r2, r2, #4
 800b00a:	b292      	uxth	r2, r2
 800b00c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 0208 	bic.w	r2, r2, #8
 800b022:	b292      	uxth	r2, r2
 800b024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d107      	bne.n	800b042 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b03a:	2100      	movs	r1, #0
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f00e fe0b 	bl	8019c58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f00e fc32 	bl	80198ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b050:	b29a      	uxth	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b05a:	b292      	uxth	r2, r2
 800b05c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4618      	mov	r0, r3
 800b066:	f005 f86b 	bl	8010140 <USB_ReadInterrupts>
 800b06a:	4603      	mov	r3, r0
 800b06c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b074:	d131      	bne.n	800b0da <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b07e:	b29a      	uxth	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f042 0208 	orr.w	r2, r2, #8
 800b088:	b292      	uxth	r2, r2
 800b08a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b096:	b29a      	uxth	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0a0:	b292      	uxth	r2, r2
 800b0a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f042 0204 	orr.w	r2, r2, #4
 800b0b8:	b292      	uxth	r2, r2
 800b0ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f005 f83c 	bl	8010140 <USB_ReadInterrupts>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0d2:	d002      	beq.n	800b0da <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f00e fbcf 	bl	8019878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f005 f82e 	bl	8010140 <USB_ReadInterrupts>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ea:	2b80      	cmp	r3, #128	; 0x80
 800b0ec:	d13f      	bne.n	800b16e <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b100:	b292      	uxth	r2, r2
 800b102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d12b      	bne.n	800b168 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b118:	b29a      	uxth	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0204 	orr.w	r2, r2, #4
 800b122:	b292      	uxth	r2, r2
 800b124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b130:	b29a      	uxth	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0208 	orr.w	r2, r2, #8
 800b13a:	b292      	uxth	r2, r2
 800b13c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b150:	b29b      	uxth	r3, r3
 800b152:	089b      	lsrs	r3, r3, #2
 800b154:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b15e:	2101      	movs	r1, #1
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f00e fd79 	bl	8019c58 <HAL_PCDEx_LPM_Callback>
 800b166:	e002      	b.n	800b16e <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f00e fb85 	bl	8019878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4618      	mov	r0, r3
 800b174:	f004 ffe4 	bl	8010140 <USB_ReadInterrupts>
 800b178:	4603      	mov	r3, r0
 800b17a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b17e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b182:	d10e      	bne.n	800b1a2 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b196:	b292      	uxth	r2, r2
 800b198:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f00e fb3e 	bl	801981e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f004 ffca 	bl	8010140 <USB_ReadInterrupts>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1b6:	d10b      	bne.n	800b1d0 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1ca:	b292      	uxth	r2, r2
 800b1cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d101      	bne.n	800b1f2 <HAL_PCD_SetAddress+0x1a>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e013      	b.n	800b21a <HAL_PCD_SetAddress+0x42>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	78fa      	ldrb	r2, [r7, #3]
 800b1fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	4611      	mov	r1, r2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f004 ff6d 	bl	80100ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	4608      	mov	r0, r1
 800b22c:	4611      	mov	r1, r2
 800b22e:	461a      	mov	r2, r3
 800b230:	4603      	mov	r3, r0
 800b232:	70fb      	strb	r3, [r7, #3]
 800b234:	460b      	mov	r3, r1
 800b236:	803b      	strh	r3, [r7, #0]
 800b238:	4613      	mov	r3, r2
 800b23a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b244:	2b00      	cmp	r3, #0
 800b246:	da0b      	bge.n	800b260 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	015b      	lsls	r3, r3, #5
 800b250:	3328      	adds	r3, #40	; 0x28
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	4413      	add	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2201      	movs	r2, #1
 800b25c:	705a      	strb	r2, [r3, #1]
 800b25e:	e00b      	b.n	800b278 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	015b      	lsls	r3, r3, #5
 800b268:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	4413      	add	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	f003 0307 	and.w	r3, r3, #7
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b284:	883a      	ldrh	r2, [r7, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	78ba      	ldrb	r2, [r7, #2]
 800b28e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b2a2:	78bb      	ldrb	r3, [r7, #2]
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d102      	bne.n	800b2ae <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_PCD_EP_Open+0x9a>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e00e      	b.n	800b2da <HAL_PCD_EP_Open+0xb8>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68f9      	ldr	r1, [r7, #12]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f003 fef4 	bl	800f0b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800b2d8:	7afb      	ldrb	r3, [r7, #11]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b084      	sub	sp, #16
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b2ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	da0b      	bge.n	800b30e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	f003 0307 	and.w	r3, r3, #7
 800b2fc:	015b      	lsls	r3, r3, #5
 800b2fe:	3328      	adds	r3, #40	; 0x28
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	4413      	add	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2201      	movs	r2, #1
 800b30a:	705a      	strb	r2, [r3, #1]
 800b30c:	e00b      	b.n	800b326 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	015b      	lsls	r3, r3, #5
 800b316:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	4413      	add	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b326:	78fb      	ldrb	r3, [r7, #3]
 800b328:	f003 0307 	and.w	r3, r3, #7
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d101      	bne.n	800b340 <HAL_PCD_EP_Close+0x5e>
 800b33c:	2302      	movs	r3, #2
 800b33e:	e00e      	b.n	800b35e <HAL_PCD_EP_Close+0x7c>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68f9      	ldr	r1, [r7, #12]
 800b34e:	4618      	mov	r0, r3
 800b350:	f004 f99c 	bl	800f68c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b086      	sub	sp, #24
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
 800b372:	460b      	mov	r3, r1
 800b374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b376:	7afb      	ldrb	r3, [r7, #11]
 800b378:	f003 0307 	and.w	r3, r3, #7
 800b37c:	015b      	lsls	r3, r3, #5
 800b37e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	4413      	add	r3, r2
 800b386:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2200      	movs	r2, #0
 800b398:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2200      	movs	r2, #0
 800b39e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6979      	ldr	r1, [r7, #20]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f004 fafb 	bl	800f9b8 <USB_EPStartXfer>
 800b3c2:	e005      	b.n	800b3d0 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6979      	ldr	r1, [r7, #20]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f004 faf4 	bl	800f9b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b083      	sub	sp, #12
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b3e6:	78fb      	ldrb	r3, [r7, #3]
 800b3e8:	f003 0307 	and.w	r3, r3, #7
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	330a      	adds	r3, #10
 800b3f0:	015b      	lsls	r3, r3, #5
 800b3f2:	4413      	add	r3, r2
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	681b      	ldr	r3, [r3, #0]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	607a      	str	r2, [r7, #4]
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	460b      	mov	r3, r1
 800b412:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	015b      	lsls	r3, r3, #5
 800b41c:	3328      	adds	r3, #40	; 0x28
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4413      	add	r3, r2
 800b422:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2200      	movs	r2, #0
 800b434:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2201      	movs	r2, #1
 800b43a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b43c:	7afb      	ldrb	r3, [r7, #11]
 800b43e:	f003 0307 	and.w	r3, r3, #7
 800b442:	b2da      	uxtb	r2, r3
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b448:	7afb      	ldrb	r3, [r7, #11]
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d106      	bne.n	800b460 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6979      	ldr	r1, [r7, #20]
 800b458:	4618      	mov	r0, r3
 800b45a:	f004 faad 	bl	800f9b8 <USB_EPStartXfer>
 800b45e:	e005      	b.n	800b46c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6979      	ldr	r1, [r7, #20]
 800b466:	4618      	mov	r0, r3
 800b468:	f004 faa6 	bl	800f9b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3718      	adds	r7, #24
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	460b      	mov	r3, r1
 800b480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	f003 0207 	and.w	r2, r3, #7
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d901      	bls.n	800b494 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	e046      	b.n	800b522 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	da0b      	bge.n	800b4b4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	f003 0307 	and.w	r3, r3, #7
 800b4a2:	015b      	lsls	r3, r3, #5
 800b4a4:	3328      	adds	r3, #40	; 0x28
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	705a      	strb	r2, [r3, #1]
 800b4b2:	e009      	b.n	800b4c8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	015b      	lsls	r3, r3, #5
 800b4b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	4413      	add	r3, r2
 800b4c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_PCD_EP_SetStall+0x72>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e01c      	b.n	800b522 <HAL_PCD_EP_SetStall+0xac>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68f9      	ldr	r1, [r7, #12]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f004 fd0a 	bl	800ff10 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b4fc:	78fb      	ldrb	r3, [r7, #3]
 800b4fe:	f003 0307 	and.w	r3, r3, #7
 800b502:	2b00      	cmp	r3, #0
 800b504:	d108      	bne.n	800b518 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b510:	4619      	mov	r1, r3
 800b512:	4610      	mov	r0, r2
 800b514:	f004 fe24 	bl	8010160 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b536:	78fb      	ldrb	r3, [r7, #3]
 800b538:	f003 020f 	and.w	r2, r3, #15
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	429a      	cmp	r2, r3
 800b542:	d901      	bls.n	800b548 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e03a      	b.n	800b5be <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	da0b      	bge.n	800b568 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	015b      	lsls	r3, r3, #5
 800b558:	3328      	adds	r3, #40	; 0x28
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	705a      	strb	r2, [r3, #1]
 800b566:	e00b      	b.n	800b580 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b568:	78fb      	ldrb	r3, [r7, #3]
 800b56a:	f003 0307 	and.w	r3, r3, #7
 800b56e:	015b      	lsls	r3, r3, #5
 800b570:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	4413      	add	r3, r2
 800b578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b586:	78fb      	ldrb	r3, [r7, #3]
 800b588:	f003 0307 	and.w	r3, r3, #7
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d101      	bne.n	800b5a0 <HAL_PCD_EP_ClrStall+0x76>
 800b59c:	2302      	movs	r3, #2
 800b59e:	e00e      	b.n	800b5be <HAL_PCD_EP_ClrStall+0x94>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68f9      	ldr	r1, [r7, #12]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f004 fcf0 	bl	800ff94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
	...

0800b5c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b089      	sub	sp, #36	; 0x24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b5d0:	e26f      	b.n	800bab2 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5da:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b5dc:	8afb      	ldrh	r3, [r7, #22]
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	f003 030f 	and.w	r3, r3, #15
 800b5e4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800b5e6:	7d7b      	ldrb	r3, [r7, #21]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f040 8137 	bne.w	800b85c <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b5ee:	8afb      	ldrh	r3, [r7, #22]
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d14f      	bne.n	800b698 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b608:	b29c      	uxth	r4, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800b612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b616:	b29b      	uxth	r3, r3
 800b618:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3328      	adds	r3, #40	; 0x28
 800b61e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b628:	b29b      	uxth	r3, r3
 800b62a:	461a      	mov	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	4413      	add	r3, r2
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	6812      	ldr	r2, [r2, #0]
 800b638:	4413      	add	r3, r2
 800b63a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	695a      	ldr	r2, [r3, #20]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	69db      	ldr	r3, [r3, #28]
 800b650:	441a      	add	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b656:	2100      	movs	r1, #0
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f00e f8c9 	bl	80197f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 8223 	beq.w	800bab2 <PCD_EP_ISR_Handler+0x4ea>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 821e 	bne.w	800bab2 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b682:	b2da      	uxtb	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	b292      	uxth	r2, r2
 800b68a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b696:	e20c      	b.n	800bab2 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b69e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b6a8:	8a7b      	ldrh	r3, [r7, #18]
 800b6aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d031      	beq.n	800b716 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	461a      	mov	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	4413      	add	r3, r2
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6812      	ldr	r2, [r2, #0]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6818      	ldr	r0, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	f004 fd84 	bl	80101fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b6fe:	4013      	ands	r3, r2
 800b700:	b29c      	uxth	r4, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b70a:	b292      	uxth	r2, r2
 800b70c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f00e f844 	bl	801979c <HAL_PCD_SetupStageCallback>
 800b714:	e1cd      	b.n	800bab2 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b716:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f280 81c9 	bge.w	800bab2 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	b29a      	uxth	r2, r3
 800b728:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b72c:	4013      	ands	r3, r2
 800b72e:	b29c      	uxth	r4, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b738:	b292      	uxth	r2, r2
 800b73a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b744:	b29b      	uxth	r3, r3
 800b746:	461a      	mov	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	4413      	add	r3, r2
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	6812      	ldr	r2, [r2, #0]
 800b754:	4413      	add	r3, r2
 800b756:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	69db      	ldr	r3, [r3, #28]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d019      	beq.n	800b7a0 <PCD_EP_ISR_Handler+0x1d8>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d015      	beq.n	800b7a0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6818      	ldr	r0, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6959      	ldr	r1, [r3, #20]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b784:	b29b      	uxth	r3, r3
 800b786:	f004 fd38 	bl	80101fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	695a      	ldr	r2, [r3, #20]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	441a      	add	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b798:	2100      	movs	r1, #0
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f00e f810 	bl	80197c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	461c      	mov	r4, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	441c      	add	r4, r3
 800b7b2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800b7b6:	60bb      	str	r3, [r7, #8]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d110      	bne.n	800b7e2 <PCD_EP_ISR_Handler+0x21a>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	801a      	strh	r2, [r3, #0]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	881b      	ldrh	r3, [r3, #0]
 800b7d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	801a      	strh	r2, [r3, #0]
 800b7e0:	e026      	b.n	800b830 <PCD_EP_ISR_Handler+0x268>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	2b3d      	cmp	r3, #61	; 0x3d
 800b7e8:	d813      	bhi.n	800b812 <PCD_EP_ISR_Handler+0x24a>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	61bb      	str	r3, [r7, #24]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <PCD_EP_ISR_Handler+0x23c>
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	3301      	adds	r3, #1
 800b802:	61bb      	str	r3, [r7, #24]
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	b29b      	uxth	r3, r3
 800b808:	029b      	lsls	r3, r3, #10
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	801a      	strh	r2, [r3, #0]
 800b810:	e00e      	b.n	800b830 <PCD_EP_ISR_Handler+0x268>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	095b      	lsrs	r3, r3, #5
 800b818:	61bb      	str	r3, [r7, #24]
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	029b      	lsls	r3, r3, #10
 800b820:	b29b      	uxth	r3, r3
 800b822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	b29b      	uxth	r3, r3
 800b838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b840:	b29c      	uxth	r4, r3
 800b842:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b846:	b29c      	uxth	r4, r3
 800b848:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b84c:	b29c      	uxth	r4, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	4b9f      	ldr	r3, [pc, #636]	; (800bad0 <PCD_EP_ISR_Handler+0x508>)
 800b854:	4323      	orrs	r3, r4
 800b856:	b29b      	uxth	r3, r3
 800b858:	8013      	strh	r3, [r2, #0]
 800b85a:	e12a      	b.n	800bab2 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	7d7b      	ldrb	r3, [r7, #21]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b86c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f280 80cb 	bge.w	800ba0c <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	7d7b      	ldrb	r3, [r7, #21]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	b29a      	uxth	r2, r3
 800b886:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b88a:	4013      	ands	r3, r2
 800b88c:	b29c      	uxth	r4, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	7d7b      	ldrb	r3, [r7, #21]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b89e:	b292      	uxth	r2, r2
 800b8a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b8a2:	7d7b      	ldrb	r3, [r7, #21]
 800b8a4:	015b      	lsls	r3, r3, #5
 800b8a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	7b1b      	ldrb	r3, [r3, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d11f      	bne.n	800b8f8 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	4413      	add	r3, r2
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	6812      	ldr	r2, [r2, #0]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8d6:	881b      	ldrh	r3, [r3, #0]
 800b8d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8dc:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800b8de:	8bfb      	ldrh	r3, [r7, #30]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d06e      	beq.n	800b9c2 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6818      	ldr	r0, [r3, #0]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6959      	ldr	r1, [r3, #20]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	88da      	ldrh	r2, [r3, #6]
 800b8f0:	8bfb      	ldrh	r3, [r7, #30]
 800b8f2:	f004 fc82 	bl	80101fa <USB_ReadPMA>
 800b8f6:	e064      	b.n	800b9c2 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	b29b      	uxth	r3, r3
 800b90a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d01f      	beq.n	800b952 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	461a      	mov	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	4413      	add	r3, r2
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	6812      	ldr	r2, [r2, #0]
 800b92a:	4413      	add	r3, r2
 800b92c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b936:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800b938:	8bfb      	ldrh	r3, [r7, #30]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d028      	beq.n	800b990 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6818      	ldr	r0, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6959      	ldr	r1, [r3, #20]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	891a      	ldrh	r2, [r3, #8]
 800b94a:	8bfb      	ldrh	r3, [r7, #30]
 800b94c:	f004 fc55 	bl	80101fa <USB_ReadPMA>
 800b950:	e01e      	b.n	800b990 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	461a      	mov	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	4413      	add	r3, r2
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	4413      	add	r3, r2
 800b96c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b976:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800b978:	8bfb      	ldrh	r3, [r7, #30]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d008      	beq.n	800b990 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6959      	ldr	r1, [r3, #20]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	895a      	ldrh	r2, [r3, #10]
 800b98a:	8bfb      	ldrh	r3, [r7, #30]
 800b98c:	f004 fc35 	bl	80101fa <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	461a      	mov	r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9aa:	b29c      	uxth	r4, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	441a      	add	r2, r3
 800b9ba:	4b46      	ldr	r3, [pc, #280]	; (800bad4 <PCD_EP_ISR_Handler+0x50c>)
 800b9bc:	4323      	orrs	r3, r4
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	69da      	ldr	r2, [r3, #28]
 800b9c6:	8bfb      	ldrh	r3, [r7, #30]
 800b9c8:	441a      	add	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	695a      	ldr	r2, [r3, #20]
 800b9d2:	8bfb      	ldrh	r3, [r7, #30]
 800b9d4:	441a      	add	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d004      	beq.n	800b9ec <PCD_EP_ISR_Handler+0x424>
 800b9e2:	8bfa      	ldrh	r2, [r7, #30]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d206      	bcs.n	800b9fa <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f00d fee4 	bl	80197c0 <HAL_PCD_DataOutStageCallback>
 800b9f8:	e008      	b.n	800ba0c <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	7819      	ldrb	r1, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	695a      	ldr	r2, [r3, #20]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fcad 	bl	800b366 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ba0c:	8a7b      	ldrh	r3, [r7, #18]
 800ba0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d04d      	beq.n	800bab2 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 800ba16:	7d7b      	ldrb	r3, [r7, #21]
 800ba18:	015b      	lsls	r3, r3, #5
 800ba1a:	3328      	adds	r3, #40	; 0x28
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4413      	add	r3, r2
 800ba20:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	7d7b      	ldrb	r3, [r7, #21]
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ba36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba3a:	b29c      	uxth	r4, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	461a      	mov	r2, r3
 800ba42:	7d7b      	ldrb	r3, [r7, #21]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	441a      	add	r2, r3
 800ba48:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800ba4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	461a      	mov	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	4413      	add	r3, r2
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	6812      	ldr	r2, [r2, #0]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	695a      	ldr	r2, [r3, #20]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	441a      	add	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f00d fea9 	bl	80197f0 <HAL_PCD_DataInStageCallback>
 800ba9e:	e008      	b.n	800bab2 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	7819      	ldrb	r1, [r3, #0]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	695a      	ldr	r2, [r3, #20]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7ff fca9 	bl	800b404 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800baba:	b29b      	uxth	r3, r3
 800babc:	b21b      	sxth	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f6ff ad87 	blt.w	800b5d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3724      	adds	r7, #36	; 0x24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd90      	pop	{r4, r7, pc}
 800bace:	bf00      	nop
 800bad0:	ffff8080 	.word	0xffff8080
 800bad4:	ffff80c0 	.word	0xffff80c0

0800bad8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	607b      	str	r3, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	817b      	strh	r3, [r7, #10]
 800bae6:	4613      	mov	r3, r2
 800bae8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800baea:	897b      	ldrh	r3, [r7, #10]
 800baec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d008      	beq.n	800bb08 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800baf6:	897b      	ldrh	r3, [r7, #10]
 800baf8:	f003 0307 	and.w	r3, r3, #7
 800bafc:	015b      	lsls	r3, r3, #5
 800bafe:	3328      	adds	r3, #40	; 0x28
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4413      	add	r3, r2
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	e006      	b.n	800bb16 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bb08:	897b      	ldrh	r3, [r7, #10]
 800bb0a:	015b      	lsls	r3, r3, #5
 800bb0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	4413      	add	r3, r2
 800bb14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bb16:	893b      	ldrh	r3, [r7, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d107      	bne.n	800bb2c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	80da      	strh	r2, [r3, #6]
 800bb2a:	e00b      	b.n	800bb44 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	0c1b      	lsrs	r3, r3, #16
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	f043 0301 	orr.w	r3, r3, #1
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
	...

0800bba8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbac:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a04      	ldr	r2, [pc, #16]	; (800bbc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bbb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbb6:	6013      	str	r3, [r2, #0]
}
 800bbb8:	bf00      	nop
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	58000400 	.word	0x58000400

0800bbc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bbcc:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <HAL_PWREx_GetVoltageRange+0x18>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	58000400 	.word	0x58000400

0800bbe4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bbe8:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	4a04      	ldr	r2, [pc, #16]	; (800bc00 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bbee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bbf2:	6053      	str	r3, [r2, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	58000400 	.word	0x58000400

0800bc04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bc08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc16:	d101      	bne.n	800bc1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e000      	b.n	800bc1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <LL_RCC_HSE_EnableBypass>:
{
 800bc28:	b480      	push	{r7}
 800bc2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800bc2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc3a:	6013      	str	r3, [r2, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <LL_RCC_HSE_DisableBypass>:
{
 800bc46:	b480      	push	{r7}
 800bc48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800bc4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc58:	6013      	str	r3, [r2, #0]
}
 800bc5a:	bf00      	nop
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <LL_RCC_HSE_Enable>:
{
 800bc64:	b480      	push	{r7}
 800bc66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bc68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc76:	6013      	str	r3, [r2, #0]
}
 800bc78:	bf00      	nop
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <LL_RCC_HSE_Disable>:
{
 800bc82:	b480      	push	{r7}
 800bc84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bc86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc94:	6013      	str	r3, [r2, #0]
}
 800bc96:	bf00      	nop
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <LL_RCC_HSE_IsReady>:
{
 800bca0:	b480      	push	{r7}
 800bca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcb2:	d101      	bne.n	800bcb8 <LL_RCC_HSE_IsReady+0x18>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e000      	b.n	800bcba <LL_RCC_HSE_IsReady+0x1a>
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <LL_RCC_HSI_Enable>:
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bcc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bcd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcd6:	6013      	str	r3, [r2, #0]
}
 800bcd8:	bf00      	nop
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <LL_RCC_HSI_Disable>:
{
 800bce2:	b480      	push	{r7}
 800bce4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bcf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcf4:	6013      	str	r3, [r2, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <LL_RCC_HSI_IsReady>:
{
 800bd00:	b480      	push	{r7}
 800bd02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bd04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd12:	d101      	bne.n	800bd18 <LL_RCC_HSI_IsReady+0x18>
 800bd14:	2301      	movs	r3, #1
 800bd16:	e000      	b.n	800bd1a <LL_RCC_HSI_IsReady+0x1a>
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <LL_RCC_HSI_SetCalibTrimming>:
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bd2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	061b      	lsls	r3, r3, #24
 800bd3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	604b      	str	r3, [r1, #4]
}
 800bd42:	bf00      	nop
 800bd44:	370c      	adds	r7, #12
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <LL_RCC_HSI48_Enable>:
{
 800bd4e:	b480      	push	{r7}
 800bd50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bd52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd5e:	f043 0301 	orr.w	r3, r3, #1
 800bd62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800bd66:	bf00      	nop
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <LL_RCC_HSI48_Disable>:
{
 800bd70:	b480      	push	{r7}
 800bd72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bd74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd80:	f023 0301 	bic.w	r3, r3, #1
 800bd84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800bd88:	bf00      	nop
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <LL_RCC_HSI48_IsReady>:
{
 800bd92:	b480      	push	{r7}
 800bd94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bd96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d101      	bne.n	800bdaa <LL_RCC_HSI48_IsReady+0x18>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e000      	b.n	800bdac <LL_RCC_HSI48_IsReady+0x1a>
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <LL_RCC_LSE_Enable>:
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bdba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdc6:	f043 0301 	orr.w	r3, r3, #1
 800bdca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bdce:	bf00      	nop
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <LL_RCC_LSE_Disable>:
{
 800bdd8:	b480      	push	{r7}
 800bdda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bde8:	f023 0301 	bic.w	r3, r3, #1
 800bdec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bdf0:	bf00      	nop
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <LL_RCC_LSE_EnableBypass>:
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bdfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be0a:	f043 0304 	orr.w	r3, r3, #4
 800be0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800be12:	bf00      	nop
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <LL_RCC_LSE_DisableBypass>:
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800be20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be2c:	f023 0304 	bic.w	r3, r3, #4
 800be30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800be34:	bf00      	nop
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <LL_RCC_LSE_IsReady>:
{
 800be3e:	b480      	push	{r7}
 800be40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800be42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be4a:	f003 0302 	and.w	r3, r3, #2
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d101      	bne.n	800be56 <LL_RCC_LSE_IsReady+0x18>
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <LL_RCC_LSE_IsReady+0x1a>
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <LL_RCC_LSI1_Enable>:
{
 800be62:	b480      	push	{r7}
 800be64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800be66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be72:	f043 0301 	orr.w	r3, r3, #1
 800be76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800be7a:	bf00      	nop
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <LL_RCC_LSI1_Disable>:
{
 800be84:	b480      	push	{r7}
 800be86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800be88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be94:	f023 0301 	bic.w	r3, r3, #1
 800be98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800be9c:	bf00      	nop
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <LL_RCC_LSI1_IsReady>:
{
 800bea6:	b480      	push	{r7}
 800bea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800beaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800beae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d101      	bne.n	800bebe <LL_RCC_LSI1_IsReady+0x18>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <LL_RCC_LSI1_IsReady+0x1a>
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <LL_RCC_LSI2_Enable>:
{
 800beca:	b480      	push	{r7}
 800becc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800beda:	f043 0304 	orr.w	r3, r3, #4
 800bede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800bee2:	bf00      	nop
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <LL_RCC_LSI2_Disable>:
{
 800beec:	b480      	push	{r7}
 800beee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800befc:	f023 0304 	bic.w	r3, r3, #4
 800bf00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800bf04:	bf00      	nop
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <LL_RCC_LSI2_IsReady>:
{
 800bf0e:	b480      	push	{r7}
 800bf10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800bf12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf1a:	f003 0308 	and.w	r3, r3, #8
 800bf1e:	2b08      	cmp	r3, #8
 800bf20:	d101      	bne.n	800bf26 <LL_RCC_LSI2_IsReady+0x18>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <LL_RCC_LSI2_IsReady+0x1a>
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <LL_RCC_LSI2_SetTrimming>:
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800bf3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	021b      	lsls	r3, r3, #8
 800bf4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <LL_RCC_MSI_Enable>:
{
 800bf60:	b480      	push	{r7}
 800bf62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bf64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf6e:	f043 0301 	orr.w	r3, r3, #1
 800bf72:	6013      	str	r3, [r2, #0]
}
 800bf74:	bf00      	nop
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <LL_RCC_MSI_Disable>:
{
 800bf7e:	b480      	push	{r7}
 800bf80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bf82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf8c:	f023 0301 	bic.w	r3, r3, #1
 800bf90:	6013      	str	r3, [r2, #0]
}
 800bf92:	bf00      	nop
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <LL_RCC_MSI_IsReady>:
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bfa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 0302 	and.w	r3, r3, #2
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d101      	bne.n	800bfb2 <LL_RCC_MSI_IsReady+0x16>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e000      	b.n	800bfb4 <LL_RCC_MSI_IsReady+0x18>
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <LL_RCC_MSI_SetRange>:
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b083      	sub	sp, #12
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bfc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	600b      	str	r3, [r1, #0]
}
 800bfda:	bf00      	nop
 800bfdc:	370c      	adds	r7, #12
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <LL_RCC_MSI_GetRange>:
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b083      	sub	sp, #12
 800bfea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bfec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bff6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2bb0      	cmp	r3, #176	; 0xb0
 800bffc:	d901      	bls.n	800c002 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bffe:	23b0      	movs	r3, #176	; 0xb0
 800c000:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c002:	687b      	ldr	r3, [r7, #4]
}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	021b      	lsls	r3, r3, #8
 800c026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c02a:	4313      	orrs	r3, r2
 800c02c:	604b      	str	r3, [r1, #4]
}
 800c02e:	bf00      	nop
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <LL_RCC_SetSysClkSource>:
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	f023 0203 	bic.w	r2, r3, #3
 800c04c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4313      	orrs	r3, r2
 800c054:	608b      	str	r3, [r1, #8]
}
 800c056:	bf00      	nop
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <LL_RCC_GetSysClkSource>:
{
 800c062:	b480      	push	{r7}
 800c064:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f003 030c 	and.w	r3, r3, #12
}
 800c070:	4618      	mov	r0, r3
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <LL_RCC_SetAHBPrescaler>:
{
 800c07a:	b480      	push	{r7}
 800c07c:	b083      	sub	sp, #12
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c08c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4313      	orrs	r3, r2
 800c094:	608b      	str	r3, [r1, #8]
}
 800c096:	bf00      	nop
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b083      	sub	sp, #12
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c0aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c0b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <LL_RCC_SetAHB4Prescaler>:
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c0d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c0de:	f023 020f 	bic.w	r2, r3, #15
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	091b      	lsrs	r3, r3, #4
 800c0e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <LL_RCC_SetAPB1Prescaler>:
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c10e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4313      	orrs	r3, r2
 800c116:	608b      	str	r3, [r1, #8]
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <LL_RCC_SetAPB2Prescaler>:
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c12c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	608b      	str	r3, [r1, #8]
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <LL_RCC_GetAHBPrescaler>:
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <LL_C2_RCC_GetAHBPrescaler>:
{
 800c164:	b480      	push	{r7}
 800c166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800c168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c16c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c174:	4618      	mov	r0, r3
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <LL_RCC_GetAHB4Prescaler>:
{
 800c17e:	b480      	push	{r7}
 800c180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c186:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c190:	4618      	mov	r0, r3
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <LL_RCC_GetAPB1Prescaler>:
{
 800c19a:	b480      	push	{r7}
 800c19c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c19e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <LL_RCC_GetAPB2Prescaler>:
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c1b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c1ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1dc:	6013      	str	r3, [r2, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c1ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c1fa:	6013      	str	r3, [r2, #0]
}
 800c1fc:	bf00      	nop
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c206:	b480      	push	{r7}
 800c208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c20a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c218:	d101      	bne.n	800c21e <LL_RCC_PLL_IsReady+0x18>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e000      	b.n	800c220 <LL_RCC_PLL_IsReady+0x1a>
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c22a:	b480      	push	{r7}
 800c22c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c22e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	0a1b      	lsrs	r3, r3, #8
 800c236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c244:	b480      	push	{r7}
 800c246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800c252:	4618      	mov	r0, r3
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c25c:	b480      	push	{r7}
 800c25e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c274:	b480      	push	{r7}
 800c276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f003 0303 	and.w	r3, r3, #3
}
 800c282:	4618      	mov	r0, r3
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c29e:	d101      	bne.n	800c2a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c2b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2c4:	d101      	bne.n	800c2ca <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e000      	b.n	800c2cc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c2da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c2e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ea:	d101      	bne.n	800c2f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e000      	b.n	800c2f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c30a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30e:	d101      	bne.n	800c314 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c310:	2301      	movs	r3, #1
 800c312:	e000      	b.n	800c316 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c320:	b480      	push	{r7}
 800c322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c32e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c332:	d101      	bne.n	800c338 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c334:	2301      	movs	r3, #1
 800c336:	e000      	b.n	800c33a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c344:	b590      	push	{r4, r7, lr}
 800c346:	b08b      	sub	sp, #44	; 0x2c
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e34b      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f000 808f 	beq.w	800c482 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c364:	f7ff fe7d 	bl	800c062 <LL_RCC_GetSysClkSource>
 800c368:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c36a:	f7ff ff83 	bl	800c274 <LL_RCC_PLL_GetMainSource>
 800c36e:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	2b00      	cmp	r3, #0
 800c374:	d005      	beq.n	800c382 <HAL_RCC_OscConfig+0x3e>
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	2b0c      	cmp	r3, #12
 800c37a:	d149      	bne.n	800c410 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d146      	bne.n	800c410 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c382:	f7ff fe0b 	bl	800bf9c <LL_RCC_MSI_IsReady>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d005      	beq.n	800c398 <HAL_RCC_OscConfig+0x54>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	69db      	ldr	r3, [r3, #28]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e32a      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c39c:	f7ff fe23 	bl	800bfe6 <LL_RCC_MSI_GetRange>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	429c      	cmp	r4, r3
 800c3a4:	d914      	bls.n	800c3d0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fd2a 	bl	800ce04 <RCC_SetFlashLatencyFromMSIRange>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e319      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fdfd 	bl	800bfbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a1b      	ldr	r3, [r3, #32]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff fe21 	bl	800c010 <LL_RCC_MSI_SetCalibTrimming>
 800c3ce:	e013      	b.n	800c3f8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff fdf2 	bl	800bfbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fe16 	bl	800c010 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fd0b 	bl	800ce04 <RCC_SetFlashLatencyFromMSIRange>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e2fa      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800c3f8:	f7f9 fc2c 	bl	8005c54 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c3fc:	4bb4      	ldr	r3, [pc, #720]	; (800c6d0 <HAL_RCC_OscConfig+0x38c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f7f9 f917 	bl	8005634 <HAL_InitTick>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d039      	beq.n	800c480 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e2ee      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	69db      	ldr	r3, [r3, #28]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d01e      	beq.n	800c456 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c418:	f7ff fda2 	bl	800bf60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c41c:	f7fa fa92 	bl	8006944 <HAL_GetTick>
 800c420:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c422:	e008      	b.n	800c436 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c424:	f7fa fa8e 	bl	8006944 <HAL_GetTick>
 800c428:	4602      	mov	r2, r0
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d901      	bls.n	800c436 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e2db      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c436:	f7ff fdb1 	bl	800bf9c <LL_RCC_MSI_IsReady>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0f1      	beq.n	800c424 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff fdba 	bl	800bfbe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	4618      	mov	r0, r3
 800c450:	f7ff fdde 	bl	800c010 <LL_RCC_MSI_SetCalibTrimming>
 800c454:	e015      	b.n	800c482 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c456:	f7ff fd92 	bl	800bf7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c45a:	f7fa fa73 	bl	8006944 <HAL_GetTick>
 800c45e:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c460:	e008      	b.n	800c474 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c462:	f7fa fa6f 	bl	8006944 <HAL_GetTick>
 800c466:	4602      	mov	r2, r0
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d901      	bls.n	800c474 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800c470:	2303      	movs	r3, #3
 800c472:	e2bc      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c474:	f7ff fd92 	bl	800bf9c <LL_RCC_MSI_IsReady>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1f1      	bne.n	800c462 <HAL_RCC_OscConfig+0x11e>
 800c47e:	e000      	b.n	800c482 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c480:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 0301 	and.w	r3, r3, #1
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d05a      	beq.n	800c544 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c48e:	f7ff fde8 	bl	800c062 <LL_RCC_GetSysClkSource>
 800c492:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c494:	f7ff feee 	bl	800c274 <LL_RCC_PLL_GetMainSource>
 800c498:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	2b08      	cmp	r3, #8
 800c49e:	d005      	beq.n	800c4ac <HAL_RCC_OscConfig+0x168>
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	2b0c      	cmp	r3, #12
 800c4a4:	d10d      	bne.n	800c4c2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d10a      	bne.n	800c4c2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4ac:	f7ff fbf8 	bl	800bca0 <LL_RCC_HSE_IsReady>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d045      	beq.n	800c542 <HAL_RCC_OscConfig+0x1fe>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d141      	bne.n	800c542 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e295      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ca:	d102      	bne.n	800c4d2 <HAL_RCC_OscConfig+0x18e>
 800c4cc:	f7ff fbca 	bl	800bc64 <LL_RCC_HSE_Enable>
 800c4d0:	e00d      	b.n	800c4ee <HAL_RCC_OscConfig+0x1aa>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4da:	d104      	bne.n	800c4e6 <HAL_RCC_OscConfig+0x1a2>
 800c4dc:	f7ff fba4 	bl	800bc28 <LL_RCC_HSE_EnableBypass>
 800c4e0:	f7ff fbc0 	bl	800bc64 <LL_RCC_HSE_Enable>
 800c4e4:	e003      	b.n	800c4ee <HAL_RCC_OscConfig+0x1aa>
 800c4e6:	f7ff fbcc 	bl	800bc82 <LL_RCC_HSE_Disable>
 800c4ea:	f7ff fbac 	bl	800bc46 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d012      	beq.n	800c51c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f6:	f7fa fa25 	bl	8006944 <HAL_GetTick>
 800c4fa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c4fc:	e008      	b.n	800c510 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4fe:	f7fa fa21 	bl	8006944 <HAL_GetTick>
 800c502:	4602      	mov	r2, r0
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	2b64      	cmp	r3, #100	; 0x64
 800c50a:	d901      	bls.n	800c510 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e26e      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c510:	f7ff fbc6 	bl	800bca0 <LL_RCC_HSE_IsReady>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0f1      	beq.n	800c4fe <HAL_RCC_OscConfig+0x1ba>
 800c51a:	e013      	b.n	800c544 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c51c:	f7fa fa12 	bl	8006944 <HAL_GetTick>
 800c520:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c522:	e008      	b.n	800c536 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c524:	f7fa fa0e 	bl	8006944 <HAL_GetTick>
 800c528:	4602      	mov	r2, r0
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	2b64      	cmp	r3, #100	; 0x64
 800c530:	d901      	bls.n	800c536 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c532:	2303      	movs	r3, #3
 800c534:	e25b      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c536:	f7ff fbb3 	bl	800bca0 <LL_RCC_HSE_IsReady>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1f1      	bne.n	800c524 <HAL_RCC_OscConfig+0x1e0>
 800c540:	e000      	b.n	800c544 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c542:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0302 	and.w	r3, r3, #2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d051      	beq.n	800c5f4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c550:	f7ff fd87 	bl	800c062 <LL_RCC_GetSysClkSource>
 800c554:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c556:	f7ff fe8d 	bl	800c274 <LL_RCC_PLL_GetMainSource>
 800c55a:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2b04      	cmp	r3, #4
 800c560:	d005      	beq.n	800c56e <HAL_RCC_OscConfig+0x22a>
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	2b0c      	cmp	r3, #12
 800c566:	d113      	bne.n	800c590 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d110      	bne.n	800c590 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c56e:	f7ff fbc7 	bl	800bd00 <LL_RCC_HSI_IsReady>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d005      	beq.n	800c584 <HAL_RCC_OscConfig+0x240>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	e234      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	4618      	mov	r0, r3
 800c58a:	f7ff fbcb 	bl	800bd24 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c58e:	e031      	b.n	800c5f4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d019      	beq.n	800c5cc <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c598:	f7ff fb94 	bl	800bcc4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c59c:	f7fa f9d2 	bl	8006944 <HAL_GetTick>
 800c5a0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c5a2:	e008      	b.n	800c5b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5a4:	f7fa f9ce 	bl	8006944 <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e21b      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c5b6:	f7ff fba3 	bl	800bd00 <LL_RCC_HSI_IsReady>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d0f1      	beq.n	800c5a4 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fbad 	bl	800bd24 <LL_RCC_HSI_SetCalibTrimming>
 800c5ca:	e013      	b.n	800c5f4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5cc:	f7ff fb89 	bl	800bce2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5d0:	f7fa f9b8 	bl	8006944 <HAL_GetTick>
 800c5d4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c5d6:	e008      	b.n	800c5ea <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5d8:	f7fa f9b4 	bl	8006944 <HAL_GetTick>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d901      	bls.n	800c5ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e201      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c5ea:	f7ff fb89 	bl	800bd00 <LL_RCC_HSI_IsReady>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1f1      	bne.n	800c5d8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 0308 	and.w	r3, r3, #8
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d106      	bne.n	800c60e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 80a2 	beq.w	800c752 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d075      	beq.n	800c702 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 0310 	and.w	r3, r3, #16
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d046      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c622:	f7ff fc40 	bl	800bea6 <LL_RCC_LSI1_IsReady>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d113      	bne.n	800c654 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c62c:	f7ff fc19 	bl	800be62 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c630:	f7fa f988 	bl	8006944 <HAL_GetTick>
 800c634:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c636:	e008      	b.n	800c64a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c638:	f7fa f984 	bl	8006944 <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	2b02      	cmp	r3, #2
 800c644:	d901      	bls.n	800c64a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800c646:	2303      	movs	r3, #3
 800c648:	e1d1      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c64a:	f7ff fc2c 	bl	800bea6 <LL_RCC_LSI1_IsReady>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d0f1      	beq.n	800c638 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c654:	f7ff fc39 	bl	800beca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c658:	f7fa f974 	bl	8006944 <HAL_GetTick>
 800c65c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c65e:	e008      	b.n	800c672 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c660:	f7fa f970 	bl	8006944 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d901      	bls.n	800c672 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e1bd      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c672:	f7ff fc4c 	bl	800bf0e <LL_RCC_LSI2_IsReady>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d0f1      	beq.n	800c660 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff fc56 	bl	800bf32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c686:	f7ff fbfd 	bl	800be84 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c68a:	f7fa f95b 	bl	8006944 <HAL_GetTick>
 800c68e:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c690:	e008      	b.n	800c6a4 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c692:	f7fa f957 	bl	8006944 <HAL_GetTick>
 800c696:	4602      	mov	r2, r0
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e1a4      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c6a4:	f7ff fbff 	bl	800bea6 <LL_RCC_LSI1_IsReady>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f1      	bne.n	800c692 <HAL_RCC_OscConfig+0x34e>
 800c6ae:	e050      	b.n	800c752 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c6b0:	f7ff fbd7 	bl	800be62 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6b4:	f7fa f946 	bl	8006944 <HAL_GetTick>
 800c6b8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c6ba:	e00b      	b.n	800c6d4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c6bc:	f7fa f942 	bl	8006944 <HAL_GetTick>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d904      	bls.n	800c6d4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	e18f      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
 800c6ce:	bf00      	nop
 800c6d0:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c6d4:	f7ff fbe7 	bl	800bea6 <LL_RCC_LSI1_IsReady>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d0ee      	beq.n	800c6bc <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c6de:	f7ff fc05 	bl	800beec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c6e2:	e008      	b.n	800c6f6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c6e4:	f7fa f92e 	bl	8006944 <HAL_GetTick>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d901      	bls.n	800c6f6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	e17b      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c6f6:	f7ff fc0a 	bl	800bf0e <LL_RCC_LSI2_IsReady>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f1      	bne.n	800c6e4 <HAL_RCC_OscConfig+0x3a0>
 800c700:	e027      	b.n	800c752 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c702:	f7ff fbf3 	bl	800beec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c706:	f7fa f91d 	bl	8006944 <HAL_GetTick>
 800c70a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c70c:	e008      	b.n	800c720 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c70e:	f7fa f919 	bl	8006944 <HAL_GetTick>
 800c712:	4602      	mov	r2, r0
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d901      	bls.n	800c720 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e166      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c720:	f7ff fbf5 	bl	800bf0e <LL_RCC_LSI2_IsReady>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1f1      	bne.n	800c70e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c72a:	f7ff fbab 	bl	800be84 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c72e:	f7fa f909 	bl	8006944 <HAL_GetTick>
 800c732:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c734:	e008      	b.n	800c748 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c736:	f7fa f905 	bl	8006944 <HAL_GetTick>
 800c73a:	4602      	mov	r2, r0
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	2b02      	cmp	r3, #2
 800c742:	d901      	bls.n	800c748 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e152      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c748:	f7ff fbad 	bl	800bea6 <LL_RCC_LSI1_IsReady>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1f1      	bne.n	800c736 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 0304 	and.w	r3, r3, #4
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d05b      	beq.n	800c816 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c75e:	4ba6      	ldr	r3, [pc, #664]	; (800c9f8 <HAL_RCC_OscConfig+0x6b4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c766:	2b00      	cmp	r3, #0
 800c768:	d114      	bne.n	800c794 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c76a:	f7ff fa1d 	bl	800bba8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c76e:	f7fa f8e9 	bl	8006944 <HAL_GetTick>
 800c772:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c774:	e008      	b.n	800c788 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c776:	f7fa f8e5 	bl	8006944 <HAL_GetTick>
 800c77a:	4602      	mov	r2, r0
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	2b02      	cmp	r3, #2
 800c782:	d901      	bls.n	800c788 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800c784:	2303      	movs	r3, #3
 800c786:	e132      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c788:	4b9b      	ldr	r3, [pc, #620]	; (800c9f8 <HAL_RCC_OscConfig+0x6b4>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c790:	2b00      	cmp	r3, #0
 800c792:	d0f0      	beq.n	800c776 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d102      	bne.n	800c7a2 <HAL_RCC_OscConfig+0x45e>
 800c79c:	f7ff fb0b 	bl	800bdb6 <LL_RCC_LSE_Enable>
 800c7a0:	e00c      	b.n	800c7bc <HAL_RCC_OscConfig+0x478>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	2b05      	cmp	r3, #5
 800c7a8:	d104      	bne.n	800c7b4 <HAL_RCC_OscConfig+0x470>
 800c7aa:	f7ff fb26 	bl	800bdfa <LL_RCC_LSE_EnableBypass>
 800c7ae:	f7ff fb02 	bl	800bdb6 <LL_RCC_LSE_Enable>
 800c7b2:	e003      	b.n	800c7bc <HAL_RCC_OscConfig+0x478>
 800c7b4:	f7ff fb10 	bl	800bdd8 <LL_RCC_LSE_Disable>
 800c7b8:	f7ff fb30 	bl	800be1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d014      	beq.n	800c7ee <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7c4:	f7fa f8be 	bl	8006944 <HAL_GetTick>
 800c7c8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c7ca:	e00a      	b.n	800c7e2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7cc:	f7fa f8ba 	bl	8006944 <HAL_GetTick>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d901      	bls.n	800c7e2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e105      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c7e2:	f7ff fb2c 	bl	800be3e <LL_RCC_LSE_IsReady>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0ef      	beq.n	800c7cc <HAL_RCC_OscConfig+0x488>
 800c7ec:	e013      	b.n	800c816 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7ee:	f7fa f8a9 	bl	8006944 <HAL_GetTick>
 800c7f2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c7f4:	e00a      	b.n	800c80c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7f6:	f7fa f8a5 	bl	8006944 <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	f241 3288 	movw	r2, #5000	; 0x1388
 800c804:	4293      	cmp	r3, r2
 800c806:	d901      	bls.n	800c80c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800c808:	2303      	movs	r3, #3
 800c80a:	e0f0      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c80c:	f7ff fb17 	bl	800be3e <LL_RCC_LSE_IsReady>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1ef      	bne.n	800c7f6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d02c      	beq.n	800c87c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	2b00      	cmp	r3, #0
 800c828:	d014      	beq.n	800c854 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c82a:	f7ff fa90 	bl	800bd4e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c82e:	f7fa f889 	bl	8006944 <HAL_GetTick>
 800c832:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c834:	e008      	b.n	800c848 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c836:	f7fa f885 	bl	8006944 <HAL_GetTick>
 800c83a:	4602      	mov	r2, r0
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	2b02      	cmp	r3, #2
 800c842:	d901      	bls.n	800c848 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800c844:	2303      	movs	r3, #3
 800c846:	e0d2      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c848:	f7ff faa3 	bl	800bd92 <LL_RCC_HSI48_IsReady>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d0f1      	beq.n	800c836 <HAL_RCC_OscConfig+0x4f2>
 800c852:	e013      	b.n	800c87c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c854:	f7ff fa8c 	bl	800bd70 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c858:	f7fa f874 	bl	8006944 <HAL_GetTick>
 800c85c:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c85e:	e008      	b.n	800c872 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c860:	f7fa f870 	bl	8006944 <HAL_GetTick>
 800c864:	4602      	mov	r2, r0
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d901      	bls.n	800c872 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	e0bd      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c872:	f7ff fa8e 	bl	800bd92 <LL_RCC_HSI48_IsReady>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1f1      	bne.n	800c860 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 80b3 	beq.w	800c9ec <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c886:	f7ff fbec 	bl	800c062 <LL_RCC_GetSysClkSource>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b0c      	cmp	r3, #12
 800c88e:	d076      	beq.n	800c97e <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	2b02      	cmp	r3, #2
 800c896:	d14b      	bne.n	800c930 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c898:	f7ff fca6 	bl	800c1e8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c89c:	f7fa f852 	bl	8006944 <HAL_GetTick>
 800c8a0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800c8a2:	e008      	b.n	800c8b6 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8a4:	f7fa f84e 	bl	8006944 <HAL_GetTick>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d901      	bls.n	800c8b6 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	e09b      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800c8b6:	f7ff fca6 	bl	800c206 <LL_RCC_PLL_IsReady>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f1      	bne.n	800c8a4 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	4b4d      	ldr	r3, [pc, #308]	; (800c9fc <HAL_RCC_OscConfig+0x6b8>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c8d2:	4311      	orrs	r1, r2
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c8d8:	0212      	lsls	r2, r2, #8
 800c8da:	4311      	orrs	r1, r2
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c8e0:	4311      	orrs	r1, r2
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c8e6:	4311      	orrs	r1, r2
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c8ec:	430a      	orrs	r2, r1
 800c8ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8f6:	f7ff fc68 	bl	800c1ca <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c8fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c908:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c90a:	f7fa f81b 	bl	8006944 <HAL_GetTick>
 800c90e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800c910:	e008      	b.n	800c924 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c912:	f7fa f817 	bl	8006944 <HAL_GetTick>
 800c916:	4602      	mov	r2, r0
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d901      	bls.n	800c924 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800c920:	2303      	movs	r3, #3
 800c922:	e064      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800c924:	f7ff fc6f 	bl	800c206 <LL_RCC_PLL_IsReady>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0f1      	beq.n	800c912 <HAL_RCC_OscConfig+0x5ce>
 800c92e:	e05d      	b.n	800c9ec <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c930:	f7ff fc5a 	bl	800c1e8 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800c934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c93e:	f023 0303 	bic.w	r3, r3, #3
 800c942:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800c944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c94e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800c952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c956:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c958:	f7f9 fff4 	bl	8006944 <HAL_GetTick>
 800c95c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800c95e:	e008      	b.n	800c972 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c960:	f7f9 fff0 	bl	8006944 <HAL_GetTick>
 800c964:	4602      	mov	r2, r0
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d901      	bls.n	800c972 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800c96e:	2303      	movs	r3, #3
 800c970:	e03d      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800c972:	f7ff fc48 	bl	800c206 <LL_RCC_PLL_IsReady>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1f1      	bne.n	800c960 <HAL_RCC_OscConfig+0x61c>
 800c97c:	e036      	b.n	800c9ec <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c982:	2b01      	cmp	r3, #1
 800c984:	d101      	bne.n	800c98a <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e031      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800c98a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	f003 0203 	and.w	r2, r3, #3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d123      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d11c      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	0a1b      	lsrs	r3, r3, #8
 800c9b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d114      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d10d      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d106      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d001      	beq.n	800c9ec <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e000      	b.n	800c9ee <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	372c      	adds	r7, #44	; 0x2c
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd90      	pop	{r4, r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	58000400 	.word	0x58000400
 800c9fc:	11c1808c 	.word	0x11c1808c

0800ca00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e12a      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca14:	4b97      	ldr	r3, [pc, #604]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0307 	and.w	r3, r3, #7
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d91b      	bls.n	800ca5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca22:	4b94      	ldr	r3, [pc, #592]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f023 0207 	bic.w	r2, r3, #7
 800ca2a:	4992      	ldr	r1, [pc, #584]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca32:	f7f9 ff87 	bl	8006944 <HAL_GetTick>
 800ca36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca38:	e008      	b.n	800ca4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ca3a:	f7f9 ff83 	bl	8006944 <HAL_GetTick>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	d901      	bls.n	800ca4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e10e      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca4c:	4b89      	ldr	r3, [pc, #548]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f003 0307 	and.w	r3, r3, #7
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d1ef      	bne.n	800ca3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f003 0302 	and.w	r3, r3, #2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d016      	beq.n	800ca94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff fb05 	bl	800c07a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca70:	f7f9 ff68 	bl	8006944 <HAL_GetTick>
 800ca74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ca76:	e008      	b.n	800ca8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca78:	f7f9 ff64 	bl	8006944 <HAL_GetTick>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d901      	bls.n	800ca8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e0ef      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ca8a:	f7ff fbff 	bl	800c28c <LL_RCC_IsActiveFlag_HPRE>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d0f1      	beq.n	800ca78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0320 	and.w	r3, r3, #32
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d016      	beq.n	800cace <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	695b      	ldr	r3, [r3, #20]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7ff fafc 	bl	800c0a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800caaa:	f7f9 ff4b 	bl	8006944 <HAL_GetTick>
 800caae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cab0:	e008      	b.n	800cac4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cab2:	f7f9 ff47 	bl	8006944 <HAL_GetTick>
 800cab6:	4602      	mov	r2, r0
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d901      	bls.n	800cac4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800cac0:	2303      	movs	r3, #3
 800cac2:	e0d2      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cac4:	f7ff fbf4 	bl	800c2b0 <LL_RCC_IsActiveFlag_C2HPRE>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d0f1      	beq.n	800cab2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d016      	beq.n	800cb08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff faf5 	bl	800c0ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cae4:	f7f9 ff2e 	bl	8006944 <HAL_GetTick>
 800cae8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800caea:	e008      	b.n	800cafe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800caec:	f7f9 ff2a 	bl	8006944 <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d901      	bls.n	800cafe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e0b5      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cafe:	f7ff fbea 	bl	800c2d6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d0f1      	beq.n	800caec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d016      	beq.n	800cb42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff faef 	bl	800c0fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb1e:	f7f9 ff11 	bl	8006944 <HAL_GetTick>
 800cb22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cb24:	e008      	b.n	800cb38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb26:	f7f9 ff0d 	bl	8006944 <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d901      	bls.n	800cb38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cb34:	2303      	movs	r3, #3
 800cb36:	e098      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cb38:	f7ff fbe0 	bl	800c2fc <LL_RCC_IsActiveFlag_PPRE1>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0f1      	beq.n	800cb26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 0308 	and.w	r3, r3, #8
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d017      	beq.n	800cb7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	00db      	lsls	r3, r3, #3
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff fae5 	bl	800c124 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb5a:	f7f9 fef3 	bl	8006944 <HAL_GetTick>
 800cb5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb60:	e008      	b.n	800cb74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb62:	f7f9 feef 	bl	8006944 <HAL_GetTick>
 800cb66:	4602      	mov	r2, r0
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d901      	bls.n	800cb74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e07a      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb74:	f7ff fbd4 	bl	800c320 <LL_RCC_IsActiveFlag_PPRE2>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d0f1      	beq.n	800cb62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d043      	beq.n	800cc12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d106      	bne.n	800cba0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cb92:	f7ff f885 	bl	800bca0 <LL_RCC_HSE_IsReady>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d11e      	bne.n	800cbda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e064      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d106      	bne.n	800cbb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cba8:	f7ff fb2d 	bl	800c206 <LL_RCC_PLL_IsReady>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d113      	bne.n	800cbda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e059      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d106      	bne.n	800cbcc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cbbe:	f7ff f9ed 	bl	800bf9c <LL_RCC_MSI_IsReady>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d108      	bne.n	800cbda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e04e      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cbcc:	f7ff f898 	bl	800bd00 <LL_RCC_HSI_IsReady>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e047      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7ff fa2b 	bl	800c03a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbe4:	f7f9 feae 	bl	8006944 <HAL_GetTick>
 800cbe8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbea:	e00a      	b.n	800cc02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbec:	f7f9 feaa 	bl	8006944 <HAL_GetTick>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d901      	bls.n	800cc02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e033      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc02:	f7ff fa2e 	bl	800c062 <LL_RCC_GetSysClkSource>
 800cc06:	4602      	mov	r2, r0
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d1ec      	bne.n	800cbec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc12:	4b18      	ldr	r3, [pc, #96]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 0307 	and.w	r3, r3, #7
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d21b      	bcs.n	800cc58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc20:	4b14      	ldr	r3, [pc, #80]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f023 0207 	bic.w	r2, r3, #7
 800cc28:	4912      	ldr	r1, [pc, #72]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc30:	f7f9 fe88 	bl	8006944 <HAL_GetTick>
 800cc34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc36:	e008      	b.n	800cc4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cc38:	f7f9 fe84 	bl	8006944 <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d901      	bls.n	800cc4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e00f      	b.n	800cc6a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc4a:	4b0a      	ldr	r3, [pc, #40]	; (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0307 	and.w	r3, r3, #7
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d1ef      	bne.n	800cc38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800cc58:	f7f8 fffc 	bl	8005c54 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cc5c:	f7f9 fe7e 	bl	800695c <HAL_GetTickPrio>
 800cc60:	4603      	mov	r3, r0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f8 fce6 	bl	8005634 <HAL_InitTick>
 800cc68:	4603      	mov	r3, r0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	58004000 	.word	0x58004000

0800cc78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc78:	b590      	push	{r4, r7, lr}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc7e:	f7ff f9f0 	bl	800c062 <LL_RCC_GetSysClkSource>
 800cc82:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10a      	bne.n	800cca0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cc8a:	f7ff f9ac 	bl	800bfe6 <LL_RCC_MSI_GetRange>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	091b      	lsrs	r3, r3, #4
 800cc92:	f003 030f 	and.w	r3, r3, #15
 800cc96:	4a2a      	ldr	r2, [pc, #168]	; (800cd40 <HAL_RCC_GetSysClockFreq+0xc8>)
 800cc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	e04a      	b.n	800cd36 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b04      	cmp	r3, #4
 800cca4:	d102      	bne.n	800ccac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cca6:	4b27      	ldr	r3, [pc, #156]	; (800cd44 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cca8:	60fb      	str	r3, [r7, #12]
 800ccaa:	e044      	b.n	800cd36 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b08      	cmp	r3, #8
 800ccb0:	d10a      	bne.n	800ccc8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ccb2:	f7fe ffa7 	bl	800bc04 <LL_RCC_HSE_IsEnabledDiv2>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d102      	bne.n	800ccc2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800ccbc:	4b21      	ldr	r3, [pc, #132]	; (800cd44 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccbe:	60fb      	str	r3, [r7, #12]
 800ccc0:	e039      	b.n	800cd36 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800ccc2:	4b21      	ldr	r3, [pc, #132]	; (800cd48 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e036      	b.n	800cd36 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800ccc8:	f7ff fad4 	bl	800c274 <LL_RCC_PLL_GetMainSource>
 800cccc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d002      	beq.n	800ccda <HAL_RCC_GetSysClockFreq+0x62>
 800ccd4:	2b03      	cmp	r3, #3
 800ccd6:	d003      	beq.n	800cce0 <HAL_RCC_GetSysClockFreq+0x68>
 800ccd8:	e00d      	b.n	800ccf6 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800ccda:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccdc:	60bb      	str	r3, [r7, #8]
        break;
 800ccde:	e015      	b.n	800cd0c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cce0:	f7fe ff90 	bl	800bc04 <LL_RCC_HSE_IsEnabledDiv2>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d102      	bne.n	800ccf0 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ccea:	4b16      	ldr	r3, [pc, #88]	; (800cd44 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccec:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ccee:	e00d      	b.n	800cd0c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800ccf0:	4b15      	ldr	r3, [pc, #84]	; (800cd48 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ccf2:	60bb      	str	r3, [r7, #8]
        break;
 800ccf4:	e00a      	b.n	800cd0c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ccf6:	f7ff f976 	bl	800bfe6 <LL_RCC_MSI_GetRange>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	091b      	lsrs	r3, r3, #4
 800ccfe:	f003 030f 	and.w	r3, r3, #15
 800cd02:	4a0f      	ldr	r2, [pc, #60]	; (800cd40 <HAL_RCC_GetSysClockFreq+0xc8>)
 800cd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd08:	60bb      	str	r3, [r7, #8]
        break;
 800cd0a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800cd0c:	f7ff fa8d 	bl	800c22a <LL_RCC_PLL_GetN>
 800cd10:	4602      	mov	r2, r0
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	fb03 f402 	mul.w	r4, r3, r2
 800cd18:	f7ff faa0 	bl	800c25c <LL_RCC_PLL_GetDivider>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	091b      	lsrs	r3, r3, #4
 800cd20:	3301      	adds	r3, #1
 800cd22:	fbb4 f4f3 	udiv	r4, r4, r3
 800cd26:	f7ff fa8d 	bl	800c244 <LL_RCC_PLL_GetR>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	0f5b      	lsrs	r3, r3, #29
 800cd2e:	3301      	adds	r3, #1
 800cd30:	fbb4 f3f3 	udiv	r3, r4, r3
 800cd34:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800cd36:	68fb      	ldr	r3, [r7, #12]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3714      	adds	r7, #20
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd90      	pop	{r4, r7, pc}
 800cd40:	0801be68 	.word	0x0801be68
 800cd44:	00f42400 	.word	0x00f42400
 800cd48:	01e84800 	.word	0x01e84800

0800cd4c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd4c:	b598      	push	{r3, r4, r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cd50:	f7ff ff92 	bl	800cc78 <HAL_RCC_GetSysClockFreq>
 800cd54:	4604      	mov	r4, r0
 800cd56:	f7ff f9f9 	bl	800c14c <LL_RCC_GetAHBPrescaler>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	091b      	lsrs	r3, r3, #4
 800cd5e:	f003 030f 	and.w	r3, r3, #15
 800cd62:	4a03      	ldr	r2, [pc, #12]	; (800cd70 <HAL_RCC_GetHCLKFreq+0x24>)
 800cd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd68:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	bd98      	pop	{r3, r4, r7, pc}
 800cd70:	0801be08 	.word	0x0801be08

0800cd74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd74:	b598      	push	{r3, r4, r7, lr}
 800cd76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cd78:	f7ff ffe8 	bl	800cd4c <HAL_RCC_GetHCLKFreq>
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	f7ff fa18 	bl	800c1b2 <LL_RCC_GetAPB2Prescaler>
 800cd82:	4603      	mov	r3, r0
 800cd84:	0adb      	lsrs	r3, r3, #11
 800cd86:	f003 0307 	and.w	r3, r3, #7
 800cd8a:	4a04      	ldr	r2, [pc, #16]	; (800cd9c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	bd98      	pop	{r3, r4, r7, pc}
 800cd9c:	0801be48 	.word	0x0801be48

0800cda0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	226f      	movs	r2, #111	; 0x6f
 800cdae:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800cdb0:	f7ff f957 	bl	800c062 <LL_RCC_GetSysClkSource>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800cdba:	f7ff f9c7 	bl	800c14c <LL_RCC_GetAHBPrescaler>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800cdc4:	f7ff f9e9 	bl	800c19a <LL_RCC_GetAPB1Prescaler>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800cdce:	f7ff f9f0 	bl	800c1b2 <LL_RCC_GetAPB2Prescaler>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800cdd8:	f7ff f9c4 	bl	800c164 <LL_C2_RCC_GetAHBPrescaler>
 800cddc:	4602      	mov	r2, r0
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800cde2:	f7ff f9cc 	bl	800c17e <LL_RCC_GetAHB4Prescaler>
 800cde6:	4602      	mov	r2, r0
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cdec:	4b04      	ldr	r3, [pc, #16]	; (800ce00 <HAL_RCC_GetClockConfig+0x60>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 0207 	and.w	r2, r3, #7
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	601a      	str	r2, [r3, #0]
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	58004000 	.word	0x58004000

0800ce04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ce04:	b590      	push	{r4, r7, lr}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2bb0      	cmp	r3, #176	; 0xb0
 800ce10:	d903      	bls.n	800ce1a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ce12:	4b15      	ldr	r3, [pc, #84]	; (800ce68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ce14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	e007      	b.n	800ce2a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	091b      	lsrs	r3, r3, #4
 800ce1e:	f003 030f 	and.w	r3, r3, #15
 800ce22:	4a11      	ldr	r2, [pc, #68]	; (800ce68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ce24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce28:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ce2a:	f7ff f9a8 	bl	800c17e <LL_RCC_GetAHB4Prescaler>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	091b      	lsrs	r3, r3, #4
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	4a0d      	ldr	r2, [pc, #52]	; (800ce6c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ce38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce42:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	4a0a      	ldr	r2, [pc, #40]	; (800ce70 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ce48:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4c:	0c9c      	lsrs	r4, r3, #18
 800ce4e:	f7fe febb 	bl	800bbc8 <HAL_PWREx_GetVoltageRange>
 800ce52:	4603      	mov	r3, r0
 800ce54:	4619      	mov	r1, r3
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 f80c 	bl	800ce74 <RCC_SetFlashLatency>
 800ce5c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd90      	pop	{r4, r7, pc}
 800ce66:	bf00      	nop
 800ce68:	0801be68 	.word	0x0801be68
 800ce6c:	0801be08 	.word	0x0801be08
 800ce70:	431bde83 	.word	0x431bde83

0800ce74 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b093      	sub	sp, #76	; 0x4c
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ce7e:	4b39      	ldr	r3, [pc, #228]	; (800cf64 <RCC_SetFlashLatency+0xf0>)
 800ce80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ce84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ce8a:	4a37      	ldr	r2, [pc, #220]	; (800cf68 <RCC_SetFlashLatency+0xf4>)
 800ce8c:	f107 031c 	add.w	r3, r7, #28
 800ce90:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ce96:	4b35      	ldr	r3, [pc, #212]	; (800cf6c <RCC_SetFlashLatency+0xf8>)
 800ce98:	f107 040c 	add.w	r4, r7, #12
 800ce9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800cea2:	2300      	movs	r3, #0
 800cea4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceac:	d11c      	bne.n	800cee8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ceae:	2300      	movs	r3, #0
 800ceb0:	643b      	str	r3, [r7, #64]	; 0x40
 800ceb2:	e015      	b.n	800cee0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ceb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cebc:	4413      	add	r3, r2
 800cebe:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d808      	bhi.n	800ceda <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ced0:	4413      	add	r3, r2
 800ced2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ced6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800ced8:	e022      	b.n	800cf20 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ceda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cedc:	3301      	adds	r3, #1
 800cede:	643b      	str	r3, [r7, #64]	; 0x40
 800cee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	d9e6      	bls.n	800ceb4 <RCC_SetFlashLatency+0x40>
 800cee6:	e01b      	b.n	800cf20 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cee8:	2300      	movs	r3, #0
 800ceea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceec:	e015      	b.n	800cf1a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ceee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cef6:	4413      	add	r3, r2
 800cef8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d808      	bhi.n	800cf14 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cf02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cf10:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800cf12:	e005      	b.n	800cf20 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf16:	3301      	adds	r3, #1
 800cf18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d9e6      	bls.n	800ceee <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800cf20:	4b13      	ldr	r3, [pc, #76]	; (800cf70 <RCC_SetFlashLatency+0xfc>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f023 0207 	bic.w	r2, r3, #7
 800cf28:	4911      	ldr	r1, [pc, #68]	; (800cf70 <RCC_SetFlashLatency+0xfc>)
 800cf2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf30:	f7f9 fd08 	bl	8006944 <HAL_GetTick>
 800cf34:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cf36:	e008      	b.n	800cf4a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cf38:	f7f9 fd04 	bl	8006944 <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d901      	bls.n	800cf4a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e007      	b.n	800cf5a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cf4a:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <RCC_SetFlashLatency+0xfc>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d1ef      	bne.n	800cf38 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	374c      	adds	r7, #76	; 0x4c
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd90      	pop	{r4, r7, pc}
 800cf62:	bf00      	nop
 800cf64:	0801b76c 	.word	0x0801b76c
 800cf68:	0801b77c 	.word	0x0801b77c
 800cf6c:	0801b788 	.word	0x0801b788
 800cf70:	58004000 	.word	0x58004000

0800cf74 <LL_RCC_LSE_IsEnabled>:
{
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cf78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d101      	bne.n	800cf8c <LL_RCC_LSE_IsEnabled+0x18>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e000      	b.n	800cf8e <LL_RCC_LSE_IsEnabled+0x1a>
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <LL_RCC_LSE_IsReady>:
{
 800cf98:	b480      	push	{r7}
 800cf9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cf9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfa4:	f003 0302 	and.w	r3, r3, #2
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d101      	bne.n	800cfb0 <LL_RCC_LSE_IsReady+0x18>
 800cfac:	2301      	movs	r3, #1
 800cfae:	e000      	b.n	800cfb2 <LL_RCC_LSE_IsReady+0x1a>
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <LL_RCC_SetRFWKPClockSource>:
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800cfc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cfd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <LL_RCC_SetSMPSClockSource>:
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff6:	f023 0203 	bic.w	r2, r3, #3
 800cffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4313      	orrs	r3, r2
 800d002:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <LL_RCC_SetSMPSPrescaler>:
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4313      	orrs	r3, r2
 800d02a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <LL_RCC_SetUSARTClockSource>:
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d048:	f023 0203 	bic.w	r2, r3, #3
 800d04c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4313      	orrs	r3, r2
 800d054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d058:	bf00      	nop
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <LL_RCC_SetLPUARTClockSource>:
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d06c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d074:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4313      	orrs	r3, r2
 800d080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <LL_RCC_SetI2CClockSource>:
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d09c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	091b      	lsrs	r3, r3, #4
 800d0a4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d0a8:	43db      	mvns	r3, r3
 800d0aa:	401a      	ands	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	011b      	lsls	r3, r3, #4
 800d0b0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d0b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d0be:	bf00      	nop
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <LL_RCC_SetLPTIMClockSource>:
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b083      	sub	sp, #12
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d0d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	0c1b      	lsrs	r3, r3, #16
 800d0de:	041b      	lsls	r3, r3, #16
 800d0e0:	43db      	mvns	r3, r3
 800d0e2:	401a      	ands	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	041b      	lsls	r3, r3, #16
 800d0e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d0f2:	bf00      	nop
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <LL_RCC_SetSAIClockSource>:
{
 800d0fe:	b480      	push	{r7}
 800d100:	b083      	sub	sp, #12
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d10e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4313      	orrs	r3, r2
 800d11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d11e:	bf00      	nop
 800d120:	370c      	adds	r7, #12
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <LL_RCC_SetRNGClockSource>:
{
 800d12a:	b480      	push	{r7}
 800d12c:	b083      	sub	sp, #12
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d13a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d13e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4313      	orrs	r3, r2
 800d146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d14a:	bf00      	nop
 800d14c:	370c      	adds	r7, #12
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <LL_RCC_SetCLK48ClockSource>:
{
 800d156:	b480      	push	{r7}
 800d158:	b083      	sub	sp, #12
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d15e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d166:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d16a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4313      	orrs	r3, r2
 800d172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d176:	bf00      	nop
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <LL_RCC_SetUSBClockSource>:
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b082      	sub	sp, #8
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7ff ffe3 	bl	800d156 <LL_RCC_SetCLK48ClockSource>
}
 800d190:	bf00      	nop
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <LL_RCC_SetADCClockSource>:
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d1a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d1ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <LL_RCC_SetRTCClockSource>:
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d1cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <LL_RCC_GetRTCClockSource>:
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d1f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800d200:	4618      	mov	r0, r3
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <LL_RCC_ForceBackupDomainReset>:
{
 800d20a:	b480      	push	{r7}
 800d20c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d20e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d21a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d21e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d222:	bf00      	nop
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <LL_RCC_ReleaseBackupDomainReset>:
{
 800d22c:	b480      	push	{r7}
 800d22e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d23c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d244:	bf00      	nop
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <LL_RCC_PLLSAI1_Enable>:
{
 800d24e:	b480      	push	{r7}
 800d250:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d25c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d260:	6013      	str	r3, [r2, #0]
}
 800d262:	bf00      	nop
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <LL_RCC_PLLSAI1_Disable>:
{
 800d26c:	b480      	push	{r7}
 800d26e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d27a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d27e:	6013      	str	r3, [r2, #0]
}
 800d280:	bf00      	nop
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <LL_RCC_PLLSAI1_IsReady>:
{
 800d28a:	b480      	push	{r7}
 800d28c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d28e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d29c:	d101      	bne.n	800d2a2 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e000      	b.n	800d2a4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b088      	sub	sp, #32
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d033      	beq.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2d2:	d00c      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x40>
 800d2d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2d8:	d802      	bhi.n	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d010      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d2de:	e017      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d2e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d2e4:	d017      	beq.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800d2e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d2ea:	d016      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800d2ec:	e010      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d2ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d2f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d2fc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d2fe:	e00d      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3304      	adds	r3, #4
 800d304:	4618      	mov	r0, r3
 800d306:	f000 f947 	bl	800d598 <RCCEx_PLLSAI1_ConfigNP>
 800d30a:	4603      	mov	r3, r0
 800d30c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d30e:	e005      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	77fb      	strb	r3, [r7, #31]
        break;
 800d314:	e002      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d316:	bf00      	nop
 800d318:	e000      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d31c:	7ffb      	ldrb	r3, [r7, #31]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d105      	bne.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fee9 	bl	800d0fe <LL_RCC_SetSAIClockSource>
 800d32c:	e001      	b.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d32e:	7ffb      	ldrb	r3, [r7, #31]
 800d330:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d046      	beq.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d33e:	f7ff ff57 	bl	800d1f0 <LL_RCC_GetRTCClockSource>
 800d342:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d03c      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d34e:	f7fe fc2b 	bl	800bba8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d105      	bne.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff ff31 	bl	800d1c4 <LL_RCC_SetRTCClockSource>
 800d362:	e02e      	b.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d36c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d36e:	f7ff ff4c 	bl	800d20a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d372:	f7ff ff5b 	bl	800d22c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d380:	4313      	orrs	r3, r2
 800d382:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d38e:	f7ff fdf1 	bl	800cf74 <LL_RCC_LSE_IsEnabled>
 800d392:	4603      	mov	r3, r0
 800d394:	2b01      	cmp	r3, #1
 800d396:	d114      	bne.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d398:	f7f9 fad4 	bl	8006944 <HAL_GetTick>
 800d39c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d39e:	e00b      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3a0:	f7f9 fad0 	bl	8006944 <HAL_GetTick>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d902      	bls.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800d3b2:	2303      	movs	r3, #3
 800d3b4:	77fb      	strb	r3, [r7, #31]
              break;
 800d3b6:	e004      	b.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d3b8:	f7ff fdee 	bl	800cf98 <LL_RCC_LSE_IsReady>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d1ee      	bne.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d3c2:	7ffb      	ldrb	r3, [r7, #31]
 800d3c4:	77bb      	strb	r3, [r7, #30]
 800d3c6:	e001      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3c8:	7ffb      	ldrb	r3, [r7, #31]
 800d3ca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	699b      	ldr	r3, [r3, #24]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff fe2b 	bl	800d038 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d004      	beq.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	69db      	ldr	r3, [r3, #28]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7ff fe36 	bl	800d064 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0310 	and.w	r3, r3, #16
 800d400:	2b00      	cmp	r3, #0
 800d402:	d004      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fe5e 	bl	800d0ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 0320 	and.w	r3, r3, #32
 800d416:	2b00      	cmp	r3, #0
 800d418:	d004      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff fe53 	bl	800d0ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f003 0304 	and.w	r3, r3, #4
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d004      	beq.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a1b      	ldr	r3, [r3, #32]
 800d434:	4618      	mov	r0, r3
 800d436:	f7ff fe2b 	bl	800d090 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f003 0308 	and.w	r3, r3, #8
 800d442:	2b00      	cmp	r3, #0
 800d444:	d004      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff fe20 	bl	800d090 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d022      	beq.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d460:	4618      	mov	r0, r3
 800d462:	f7ff fe8e 	bl	800d182 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d46a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d46e:	d107      	bne.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d47a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d47e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d488:	d10b      	bne.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	3304      	adds	r3, #4
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 f8dd 	bl	800d64e <RCCEx_PLLSAI1_ConfigNQ>
 800d494:	4603      	mov	r3, r0
 800d496:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d498:	7ffb      	ldrb	r3, [r7, #31]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800d49e:	7ffb      	ldrb	r3, [r7, #31]
 800d4a0:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d02b      	beq.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4b6:	d008      	beq.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4c0:	d003      	beq.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d105      	bne.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff fe2b 	bl	800d12a <LL_RCC_SetRNGClockSource>
 800d4d4:	e00a      	b.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4de:	60fb      	str	r3, [r7, #12]
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	f7ff fe22 	bl	800d12a <LL_RCC_SetRNGClockSource>
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff fe35 	bl	800d156 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800d4f4:	d107      	bne.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d4f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d504:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d022      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff fe3e 	bl	800d198 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d524:	d107      	bne.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d534:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d53e:	d10b      	bne.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3304      	adds	r3, #4
 800d544:	4618      	mov	r0, r3
 800d546:	f000 f8dd 	bl	800d704 <RCCEx_PLLSAI1_ConfigNR>
 800d54a:	4603      	mov	r3, r0
 800d54c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d54e:	7ffb      	ldrb	r3, [r7, #31]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800d554:	7ffb      	ldrb	r3, [r7, #31]
 800d556:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d004      	beq.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d568:	4618      	mov	r0, r3
 800d56a:	f7ff fd27 	bl	800cfbc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d576:	2b00      	cmp	r3, #0
 800d578:	d009      	beq.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff fd46 	bl	800d010 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d588:	4618      	mov	r0, r3
 800d58a:	f7ff fd2d 	bl	800cfe8 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800d58e:	7fbb      	ldrb	r3, [r7, #30]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3720      	adds	r7, #32
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d5a4:	f7ff fe62 	bl	800d26c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5a8:	f7f9 f9cc 	bl	8006944 <HAL_GetTick>
 800d5ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5ae:	e009      	b.n	800d5c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5b0:	f7f9 f9c8 	bl	8006944 <HAL_GetTick>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d902      	bls.n	800d5c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d5be:	2303      	movs	r3, #3
 800d5c0:	73fb      	strb	r3, [r7, #15]
      break;
 800d5c2:	e004      	b.n	800d5ce <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5c4:	f7ff fe61 	bl	800d28a <LL_RCC_PLLSAI1_IsReady>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1f0      	bne.n	800d5b0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d137      	bne.n	800d644 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d5d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	021b      	lsls	r3, r3, #8
 800d5e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d5ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d5fe:	4313      	orrs	r3, r2
 800d600:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d602:	f7ff fe24 	bl	800d24e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d606:	f7f9 f99d 	bl	8006944 <HAL_GetTick>
 800d60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d60c:	e009      	b.n	800d622 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d60e:	f7f9 f999 	bl	8006944 <HAL_GetTick>
 800d612:	4602      	mov	r2, r0
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d902      	bls.n	800d622 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	73fb      	strb	r3, [r7, #15]
        break;
 800d620:	e004      	b.n	800d62c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d622:	f7ff fe32 	bl	800d28a <LL_RCC_PLLSAI1_IsReady>
 800d626:	4603      	mov	r3, r0
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d1f0      	bne.n	800d60e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d108      	bne.n	800d644 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d636:	691a      	ldr	r2, [r3, #16]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d640:	4313      	orrs	r3, r2
 800d642:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d65a:	f7ff fe07 	bl	800d26c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d65e:	f7f9 f971 	bl	8006944 <HAL_GetTick>
 800d662:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d664:	e009      	b.n	800d67a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d666:	f7f9 f96d 	bl	8006944 <HAL_GetTick>
 800d66a:	4602      	mov	r2, r0
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	2b02      	cmp	r3, #2
 800d672:	d902      	bls.n	800d67a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d674:	2303      	movs	r3, #3
 800d676:	73fb      	strb	r3, [r7, #15]
      break;
 800d678:	e004      	b.n	800d684 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d67a:	f7ff fe06 	bl	800d28a <LL_RCC_PLLSAI1_IsReady>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1f0      	bne.n	800d666 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d684:	7bfb      	ldrb	r3, [r7, #15]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d137      	bne.n	800d6fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d68a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	021b      	lsls	r3, r3, #8
 800d69a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d6a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d6b8:	f7ff fdc9 	bl	800d24e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6bc:	f7f9 f942 	bl	8006944 <HAL_GetTick>
 800d6c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6c2:	e009      	b.n	800d6d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d6c4:	f7f9 f93e 	bl	8006944 <HAL_GetTick>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d902      	bls.n	800d6d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	73fb      	strb	r3, [r7, #15]
        break;
 800d6d6:	e004      	b.n	800d6e2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6d8:	f7ff fdd7 	bl	800d28a <LL_RCC_PLLSAI1_IsReady>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d1f0      	bne.n	800d6c4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d108      	bne.n	800d6fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d6e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6ec:	691a      	ldr	r2, [r3, #16]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d710:	f7ff fdac 	bl	800d26c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d714:	f7f9 f916 	bl	8006944 <HAL_GetTick>
 800d718:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d71a:	e009      	b.n	800d730 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d71c:	f7f9 f912 	bl	8006944 <HAL_GetTick>
 800d720:	4602      	mov	r2, r0
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	2b02      	cmp	r3, #2
 800d728:	d902      	bls.n	800d730 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d72a:	2303      	movs	r3, #3
 800d72c:	73fb      	strb	r3, [r7, #15]
      break;
 800d72e:	e004      	b.n	800d73a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d730:	f7ff fdab 	bl	800d28a <LL_RCC_PLLSAI1_IsReady>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1f0      	bne.n	800d71c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d73a:	7bfb      	ldrb	r3, [r7, #15]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d137      	bne.n	800d7b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	021b      	lsls	r3, r3, #8
 800d750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d754:	4313      	orrs	r3, r2
 800d756:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d76a:	4313      	orrs	r3, r2
 800d76c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d76e:	f7ff fd6e 	bl	800d24e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d772:	f7f9 f8e7 	bl	8006944 <HAL_GetTick>
 800d776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d778:	e009      	b.n	800d78e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d77a:	f7f9 f8e3 	bl	8006944 <HAL_GetTick>
 800d77e:	4602      	mov	r2, r0
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	2b02      	cmp	r3, #2
 800d786:	d902      	bls.n	800d78e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d788:	2303      	movs	r3, #3
 800d78a:	73fb      	strb	r3, [r7, #15]
        break;
 800d78c:	e004      	b.n	800d798 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d78e:	f7ff fd7c 	bl	800d28a <LL_RCC_PLLSAI1_IsReady>
 800d792:	4603      	mov	r3, r0
 800d794:	2b01      	cmp	r3, #1
 800d796:	d1f0      	bne.n	800d77a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d108      	bne.n	800d7b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d79e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d7a2:	691a      	ldr	r2, [r3, #16]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d101      	bne.n	800d7cc <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e090      	b.n	800d8ee <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d106      	bne.n	800d7e6 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7f7 fcf9 	bl	80051d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	22ca      	movs	r2, #202	; 0xca
 800d7f4:	625a      	str	r2, [r3, #36]	; 0x24
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2253      	movs	r2, #83	; 0x53
 800d7fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 faba 	bl	800dd78 <RTC_EnterInitMode>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	22ff      	movs	r2, #255	; 0xff
 800d810:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2204      	movs	r2, #4
 800d816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e067      	b.n	800d8ee <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	6812      	ldr	r2, [r2, #0]
 800d828:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d82c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d830:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6899      	ldr	r1, [r3, #8]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	431a      	orrs	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	699b      	ldr	r3, [r3, #24]
 800d846:	431a      	orrs	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	430a      	orrs	r2, r1
 800d84e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	68d2      	ldr	r2, [r2, #12]
 800d858:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6919      	ldr	r1, [r3, #16]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	041a      	lsls	r2, r3, #16
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	430a      	orrs	r2, r1
 800d86c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68da      	ldr	r2, [r3, #12]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d87c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f022 0203 	bic.w	r2, r2, #3
 800d88c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	69da      	ldr	r2, [r3, #28]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	431a      	orrs	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	f003 0320 	and.w	r3, r3, #32
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d113      	bne.n	800d8dc <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fa39 	bl	800dd2c <HAL_RTC_WaitForSynchro>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00d      	beq.n	800d8dc <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	22ff      	movs	r2, #255	; 0xff
 800d8c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2204      	movs	r2, #4
 800d8cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e008      	b.n	800d8ee <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	22ff      	movs	r2, #255	; 0xff
 800d8e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800d8ec:	2300      	movs	r3, #0
  }
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d8f6:	b590      	push	{r4, r7, lr}
 800d8f8:	b087      	sub	sp, #28
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	60b9      	str	r1, [r7, #8]
 800d900:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d101      	bne.n	800d910 <HAL_RTC_SetTime+0x1a>
 800d90c:	2302      	movs	r3, #2
 800d90e:	e0b2      	b.n	800da76 <HAL_RTC_SetTime+0x180>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2201      	movs	r2, #1
 800d914:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2202      	movs	r2, #2
 800d91c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d126      	bne.n	800d974 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2200      	movs	r2, #0
 800d938:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 fa44 	bl	800ddcc <RTC_ByteToBcd2>
 800d944:	4603      	mov	r3, r0
 800d946:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	785b      	ldrb	r3, [r3, #1]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 fa3d 	bl	800ddcc <RTC_ByteToBcd2>
 800d952:	4603      	mov	r3, r0
 800d954:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d956:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	789b      	ldrb	r3, [r3, #2]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f000 fa35 	bl	800ddcc <RTC_ByteToBcd2>
 800d962:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d964:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	78db      	ldrb	r3, [r3, #3]
 800d96c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	e018      	b.n	800d9a6 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2200      	movs	r2, #0
 800d986:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	785b      	ldrb	r3, [r3, #1]
 800d992:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d994:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d99a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	78db      	ldrb	r3, [r3, #3]
 800d9a0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	22ca      	movs	r2, #202	; 0xca
 800d9ac:	625a      	str	r2, [r3, #36]	; 0x24
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2253      	movs	r2, #83	; 0x53
 800d9b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f000 f9de 	bl	800dd78 <RTC_EnterInitMode>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00d      	beq.n	800d9de <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	22ff      	movs	r2, #255	; 0xff
 800d9c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2204      	movs	r2, #4
 800d9ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e04b      	b.n	800da76 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d9e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d9ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d9fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6899      	ldr	r1, [r3, #8]
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	68da      	ldr	r2, [r3, #12]
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	431a      	orrs	r2, r3
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	430a      	orrs	r2, r1
 800da14:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68da      	ldr	r2, [r3, #12]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da24:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	f003 0320 	and.w	r3, r3, #32
 800da30:	2b00      	cmp	r3, #0
 800da32:	d113      	bne.n	800da5c <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 f979 	bl	800dd2c <HAL_RTC_WaitForSynchro>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00d      	beq.n	800da5c <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	22ff      	movs	r2, #255	; 0xff
 800da46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2204      	movs	r2, #4
 800da4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800da58:	2301      	movs	r3, #1
 800da5a:	e00c      	b.n	800da76 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	22ff      	movs	r2, #255	; 0xff
 800da62:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800da74:	2300      	movs	r3, #0
  }
}
 800da76:	4618      	mov	r0, r3
 800da78:	371c      	adds	r7, #28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd90      	pop	{r4, r7, pc}

0800da7e <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b086      	sub	sp, #24
 800da82:	af00      	add	r7, sp, #0
 800da84:	60f8      	str	r0, [r7, #12]
 800da86:	60b9      	str	r1, [r7, #8]
 800da88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	691b      	ldr	r3, [r3, #16]
 800da9a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800daac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800dab0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	0c1b      	lsrs	r3, r3, #16
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	0a1b      	lsrs	r3, r3, #8
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	0c1b      	lsrs	r3, r3, #16
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daea:	b2da      	uxtb	r2, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d11a      	bne.n	800db2c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f000 f986 	bl	800de0c <RTC_Bcd2ToByte>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	785b      	ldrb	r3, [r3, #1]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 f97d 	bl	800de0c <RTC_Bcd2ToByte>
 800db12:	4603      	mov	r3, r0
 800db14:	461a      	mov	r2, r3
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	789b      	ldrb	r3, [r3, #2]
 800db1e:	4618      	mov	r0, r3
 800db20:	f000 f974 	bl	800de0c <RTC_Bcd2ToByte>
 800db24:	4603      	mov	r3, r0
 800db26:	461a      	mov	r2, r3
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db36:	b590      	push	{r4, r7, lr}
 800db38:	b087      	sub	sp, #28
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	60f8      	str	r0, [r7, #12]
 800db3e:	60b9      	str	r1, [r7, #8]
 800db40:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d101      	bne.n	800db50 <HAL_RTC_SetDate+0x1a>
 800db4c:	2302      	movs	r3, #2
 800db4e:	e09c      	b.n	800dc8a <HAL_RTC_SetDate+0x154>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2202      	movs	r2, #2
 800db5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10e      	bne.n	800db84 <HAL_RTC_SetDate+0x4e>
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	785b      	ldrb	r3, [r3, #1]
 800db6a:	f003 0310 	and.w	r3, r3, #16
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d008      	beq.n	800db84 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	785b      	ldrb	r3, [r3, #1]
 800db76:	f023 0310 	bic.w	r3, r3, #16
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	330a      	adds	r3, #10
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d11c      	bne.n	800dbc4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	78db      	ldrb	r3, [r3, #3]
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 f91c 	bl	800ddcc <RTC_ByteToBcd2>
 800db94:	4603      	mov	r3, r0
 800db96:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	785b      	ldrb	r3, [r3, #1]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f000 f915 	bl	800ddcc <RTC_ByteToBcd2>
 800dba2:	4603      	mov	r3, r0
 800dba4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dba6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	789b      	ldrb	r3, [r3, #2]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 f90d 	bl	800ddcc <RTC_ByteToBcd2>
 800dbb2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dbb4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	e00e      	b.n	800dbe2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	78db      	ldrb	r3, [r3, #3]
 800dbc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	785b      	ldrb	r3, [r3, #1]
 800dbce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbd0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800dbd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	22ca      	movs	r2, #202	; 0xca
 800dbe8:	625a      	str	r2, [r3, #36]	; 0x24
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2253      	movs	r2, #83	; 0x53
 800dbf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f000 f8c0 	bl	800dd78 <RTC_EnterInitMode>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00d      	beq.n	800dc1a <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	22ff      	movs	r2, #255	; 0xff
 800dc04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2204      	movs	r2, #4
 800dc0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e037      	b.n	800dc8a <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dc24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dc28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc38:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	f003 0320 	and.w	r3, r3, #32
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d113      	bne.n	800dc70 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f000 f86f 	bl	800dd2c <HAL_RTC_WaitForSynchro>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00d      	beq.n	800dc70 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	22ff      	movs	r2, #255	; 0xff
 800dc5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2204      	movs	r2, #4
 800dc60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e00c      	b.n	800dc8a <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	22ff      	movs	r2, #255	; 0xff
 800dc76:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800dc88:	2300      	movs	r3, #0
  }
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	371c      	adds	r7, #28
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd90      	pop	{r4, r7, pc}

0800dc92 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b086      	sub	sp, #24
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	60f8      	str	r0, [r7, #12]
 800dc9a:	60b9      	str	r1, [r7, #8]
 800dc9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dca8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	0c1b      	lsrs	r3, r3, #16
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	0a1b      	lsrs	r3, r3, #8
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	f003 031f 	and.w	r3, r3, #31
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	0b5b      	lsrs	r3, r3, #13
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0307 	and.w	r3, r3, #7
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d11a      	bne.n	800dd22 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	78db      	ldrb	r3, [r3, #3]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 f88b 	bl	800de0c <RTC_Bcd2ToByte>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	785b      	ldrb	r3, [r3, #1]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 f882 	bl	800de0c <RTC_Bcd2ToByte>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	789b      	ldrb	r3, [r3, #2]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 f879 	bl	800de0c <RTC_Bcd2ToByte>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dd42:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dd44:	f7f8 fdfe 	bl	8006944 <HAL_GetTick>
 800dd48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd4a:	e009      	b.n	800dd60 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dd4c:	f7f8 fdfa 	bl	8006944 <HAL_GetTick>
 800dd50:	4602      	mov	r2, r0
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd5a:	d901      	bls.n	800dd60 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	e007      	b.n	800dd70 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	f003 0320 	and.w	r3, r3, #32
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d0ee      	beq.n	800dd4c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d119      	bne.n	800ddc2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f04f 32ff 	mov.w	r2, #4294967295
 800dd96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dd98:	f7f8 fdd4 	bl	8006944 <HAL_GetTick>
 800dd9c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd9e:	e009      	b.n	800ddb4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800dda0:	f7f8 fdd0 	bl	8006944 <HAL_GetTick>
 800dda4:	4602      	mov	r2, r0
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddae:	d901      	bls.n	800ddb4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e007      	b.n	800ddc4 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d0ee      	beq.n	800dda0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b085      	sub	sp, #20
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800ddda:	79fb      	ldrb	r3, [r7, #7]
 800dddc:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800ddde:	e005      	b.n	800ddec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	3301      	adds	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800dde6:	7afb      	ldrb	r3, [r7, #11]
 800dde8:	3b0a      	subs	r3, #10
 800ddea:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800ddec:	7afb      	ldrb	r3, [r7, #11]
 800ddee:	2b09      	cmp	r3, #9
 800ddf0:	d8f6      	bhi.n	800dde0 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	011b      	lsls	r3, r3, #4
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	7afb      	ldrb	r3, [r7, #11]
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	b2db      	uxtb	r3, r3
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	4603      	mov	r3, r0
 800de14:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	091b      	lsrs	r3, r3, #4
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	461a      	mov	r2, r3
 800de1e:	4613      	mov	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	f003 030f 	and.w	r3, r3, #15
 800de32:	b2db      	uxtb	r3, r3
 800de34:	4413      	add	r3, r2
 800de36:	b2db      	uxtb	r3, r3
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800de44:	b480      	push	{r7}
 800de46:	b087      	sub	sp, #28
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	3350      	adds	r3, #80	; 0x50
 800de56:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	697a      	ldr	r2, [r7, #20]
 800de5e:	4413      	add	r3, r2
 800de60:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	601a      	str	r2, [r3, #0]
}
 800de68:	bf00      	nop
 800de6a:	371c      	adds	r7, #28
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d101      	bne.n	800de86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	e01d      	b.n	800dec2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7f8 f864 	bl	8005f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2202      	movs	r2, #2
 800dea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	3304      	adds	r3, #4
 800deb0:	4619      	mov	r1, r3
 800deb2:	4610      	mov	r0, r2
 800deb4:	f000 fc84 	bl	800e7c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2202      	movs	r2, #2
 800ded8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	689a      	ldr	r2, [r3, #8]
 800dee2:	4b0e      	ldr	r3, [pc, #56]	; (800df1c <HAL_TIM_Base_Start+0x50>)
 800dee4:	4013      	ands	r3, r2
 800dee6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2b06      	cmp	r3, #6
 800deec:	d00b      	beq.n	800df06 <HAL_TIM_Base_Start+0x3a>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800def4:	d007      	beq.n	800df06 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f042 0201 	orr.w	r2, r2, #1
 800df04:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2201      	movs	r2, #1
 800df0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	00010007 	.word	0x00010007

0800df20 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6a1a      	ldr	r2, [r3, #32]
 800df36:	f241 1311 	movw	r3, #4369	; 0x1111
 800df3a:	4013      	ands	r3, r2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10f      	bne.n	800df60 <HAL_TIM_Base_Stop+0x40>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6a1a      	ldr	r2, [r3, #32]
 800df46:	f240 4344 	movw	r3, #1092	; 0x444
 800df4a:	4013      	ands	r3, r2
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d107      	bne.n	800df60 <HAL_TIM_Base_Stop+0x40>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 0201 	bic.w	r2, r2, #1
 800df5e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2201      	movs	r2, #1
 800df64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
	...

0800df78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68da      	ldr	r2, [r3, #12]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f042 0201 	orr.w	r2, r2, #1
 800df8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	689a      	ldr	r2, [r3, #8]
 800df96:	4b0c      	ldr	r3, [pc, #48]	; (800dfc8 <HAL_TIM_Base_Start_IT+0x50>)
 800df98:	4013      	ands	r3, r2
 800df9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b06      	cmp	r3, #6
 800dfa0:	d00b      	beq.n	800dfba <HAL_TIM_Base_Start_IT+0x42>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfa8:	d007      	beq.n	800dfba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f042 0201 	orr.w	r2, r2, #1
 800dfb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3714      	adds	r7, #20
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	00010007 	.word	0x00010007

0800dfcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e01d      	b.n	800e01a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d106      	bne.n	800dff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 f815 	bl	800e022 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2202      	movs	r2, #2
 800dffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3304      	adds	r3, #4
 800e008:	4619      	mov	r1, r3
 800e00a:	4610      	mov	r0, r2
 800e00c:	f000 fbd8 	bl	800e7c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e022:	b480      	push	{r7}
 800e024:	b083      	sub	sp, #12
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e02a:	bf00      	nop
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
	...

0800e038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2201      	movs	r2, #1
 800e048:	6839      	ldr	r1, [r7, #0]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 ff36 	bl	800eebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a19      	ldr	r2, [pc, #100]	; (800e0bc <HAL_TIM_PWM_Start+0x84>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d009      	beq.n	800e06e <HAL_TIM_PWM_Start+0x36>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a18      	ldr	r2, [pc, #96]	; (800e0c0 <HAL_TIM_PWM_Start+0x88>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d004      	beq.n	800e06e <HAL_TIM_PWM_Start+0x36>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a16      	ldr	r2, [pc, #88]	; (800e0c4 <HAL_TIM_PWM_Start+0x8c>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d101      	bne.n	800e072 <HAL_TIM_PWM_Start+0x3a>
 800e06e:	2301      	movs	r3, #1
 800e070:	e000      	b.n	800e074 <HAL_TIM_PWM_Start+0x3c>
 800e072:	2300      	movs	r3, #0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e086:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	689a      	ldr	r2, [r3, #8]
 800e08e:	4b0e      	ldr	r3, [pc, #56]	; (800e0c8 <HAL_TIM_PWM_Start+0x90>)
 800e090:	4013      	ands	r3, r2
 800e092:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b06      	cmp	r3, #6
 800e098:	d00b      	beq.n	800e0b2 <HAL_TIM_PWM_Start+0x7a>
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0a0:	d007      	beq.n	800e0b2 <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f042 0201 	orr.w	r2, r2, #1
 800e0b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0b2:	2300      	movs	r3, #0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	40012c00 	.word	0x40012c00
 800e0c0:	40014400 	.word	0x40014400
 800e0c4:	40014800 	.word	0x40014800
 800e0c8:	00010007 	.word	0x00010007

0800e0cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	6839      	ldr	r1, [r7, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 feec 	bl	800eebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a25      	ldr	r2, [pc, #148]	; (800e180 <HAL_TIM_PWM_Stop+0xb4>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d009      	beq.n	800e102 <HAL_TIM_PWM_Stop+0x36>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a24      	ldr	r2, [pc, #144]	; (800e184 <HAL_TIM_PWM_Stop+0xb8>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d004      	beq.n	800e102 <HAL_TIM_PWM_Stop+0x36>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a22      	ldr	r2, [pc, #136]	; (800e188 <HAL_TIM_PWM_Stop+0xbc>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d101      	bne.n	800e106 <HAL_TIM_PWM_Stop+0x3a>
 800e102:	2301      	movs	r3, #1
 800e104:	e000      	b.n	800e108 <HAL_TIM_PWM_Stop+0x3c>
 800e106:	2300      	movs	r3, #0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d017      	beq.n	800e13c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6a1a      	ldr	r2, [r3, #32]
 800e112:	f241 1311 	movw	r3, #4369	; 0x1111
 800e116:	4013      	ands	r3, r2
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10f      	bne.n	800e13c <HAL_TIM_PWM_Stop+0x70>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	6a1a      	ldr	r2, [r3, #32]
 800e122:	f240 4344 	movw	r3, #1092	; 0x444
 800e126:	4013      	ands	r3, r2
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d107      	bne.n	800e13c <HAL_TIM_PWM_Stop+0x70>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e13a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6a1a      	ldr	r2, [r3, #32]
 800e142:	f241 1311 	movw	r3, #4369	; 0x1111
 800e146:	4013      	ands	r3, r2
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10f      	bne.n	800e16c <HAL_TIM_PWM_Stop+0xa0>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	6a1a      	ldr	r2, [r3, #32]
 800e152:	f240 4344 	movw	r3, #1092	; 0x444
 800e156:	4013      	ands	r3, r2
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d107      	bne.n	800e16c <HAL_TIM_PWM_Stop+0xa0>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f022 0201 	bic.w	r2, r2, #1
 800e16a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	40012c00 	.word	0x40012c00
 800e184:	40014400 	.word	0x40014400
 800e188:	40014800 	.word	0x40014800

0800e18c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	691b      	ldr	r3, [r3, #16]
 800e19a:	f003 0302 	and.w	r3, r3, #2
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d122      	bne.n	800e1e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	f003 0302 	and.w	r3, r3, #2
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d11b      	bne.n	800e1e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f06f 0202 	mvn.w	r2, #2
 800e1b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699b      	ldr	r3, [r3, #24]
 800e1c6:	f003 0303 	and.w	r3, r3, #3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 fad7 	bl	800e782 <HAL_TIM_IC_CaptureCallback>
 800e1d4:	e005      	b.n	800e1e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fac9 	bl	800e76e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fada 	bl	800e796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	f003 0304 	and.w	r3, r3, #4
 800e1f2:	2b04      	cmp	r3, #4
 800e1f4:	d122      	bne.n	800e23c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b04      	cmp	r3, #4
 800e202:	d11b      	bne.n	800e23c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f06f 0204 	mvn.w	r2, #4
 800e20c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2202      	movs	r2, #2
 800e212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 faad 	bl	800e782 <HAL_TIM_IC_CaptureCallback>
 800e228:	e005      	b.n	800e236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 fa9f 	bl	800e76e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 fab0 	bl	800e796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	f003 0308 	and.w	r3, r3, #8
 800e246:	2b08      	cmp	r3, #8
 800e248:	d122      	bne.n	800e290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	f003 0308 	and.w	r3, r3, #8
 800e254:	2b08      	cmp	r3, #8
 800e256:	d11b      	bne.n	800e290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f06f 0208 	mvn.w	r2, #8
 800e260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2204      	movs	r2, #4
 800e266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	69db      	ldr	r3, [r3, #28]
 800e26e:	f003 0303 	and.w	r3, r3, #3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d003      	beq.n	800e27e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fa83 	bl	800e782 <HAL_TIM_IC_CaptureCallback>
 800e27c:	e005      	b.n	800e28a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fa75 	bl	800e76e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 fa86 	bl	800e796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	f003 0310 	and.w	r3, r3, #16
 800e29a:	2b10      	cmp	r3, #16
 800e29c:	d122      	bne.n	800e2e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	f003 0310 	and.w	r3, r3, #16
 800e2a8:	2b10      	cmp	r3, #16
 800e2aa:	d11b      	bne.n	800e2e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f06f 0210 	mvn.w	r2, #16
 800e2b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2208      	movs	r2, #8
 800e2ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d003      	beq.n	800e2d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 fa59 	bl	800e782 <HAL_TIM_IC_CaptureCallback>
 800e2d0:	e005      	b.n	800e2de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fa4b 	bl	800e76e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 fa5c 	bl	800e796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	f003 0301 	and.w	r3, r3, #1
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d10e      	bne.n	800e310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d107      	bne.n	800e310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f06f 0201 	mvn.w	r2, #1
 800e308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7f6 f8da 	bl	80044c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e31a:	2b80      	cmp	r3, #128	; 0x80
 800e31c:	d10e      	bne.n	800e33c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e328:	2b80      	cmp	r3, #128	; 0x80
 800e32a:	d107      	bne.n	800e33c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fe50 	bl	800efdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	691b      	ldr	r3, [r3, #16]
 800e342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e34a:	d10e      	bne.n	800e36a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e356:	2b80      	cmp	r3, #128	; 0x80
 800e358:	d107      	bne.n	800e36a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 fe43 	bl	800eff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	691b      	ldr	r3, [r3, #16]
 800e370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e374:	2b40      	cmp	r3, #64	; 0x40
 800e376:	d10e      	bne.n	800e396 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	d107      	bne.n	800e396 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fa0a 	bl	800e7aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	f003 0320 	and.w	r3, r3, #32
 800e3a0:	2b20      	cmp	r3, #32
 800e3a2:	d10e      	bne.n	800e3c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	f003 0320 	and.w	r3, r3, #32
 800e3ae:	2b20      	cmp	r3, #32
 800e3b0:	d107      	bne.n	800e3c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f06f 0220 	mvn.w	r2, #32
 800e3ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 fe03 	bl	800efc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3c2:	bf00      	nop
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
	...

0800e3cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d101      	bne.n	800e3e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e3e2:	2302      	movs	r3, #2
 800e3e4:	e105      	b.n	800e5f2 <HAL_TIM_PWM_ConfigChannel+0x226>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2202      	movs	r2, #2
 800e3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2b14      	cmp	r3, #20
 800e3fa:	f200 80f0 	bhi.w	800e5de <HAL_TIM_PWM_ConfigChannel+0x212>
 800e3fe:	a201      	add	r2, pc, #4	; (adr r2, 800e404 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e404:	0800e459 	.word	0x0800e459
 800e408:	0800e5df 	.word	0x0800e5df
 800e40c:	0800e5df 	.word	0x0800e5df
 800e410:	0800e5df 	.word	0x0800e5df
 800e414:	0800e499 	.word	0x0800e499
 800e418:	0800e5df 	.word	0x0800e5df
 800e41c:	0800e5df 	.word	0x0800e5df
 800e420:	0800e5df 	.word	0x0800e5df
 800e424:	0800e4db 	.word	0x0800e4db
 800e428:	0800e5df 	.word	0x0800e5df
 800e42c:	0800e5df 	.word	0x0800e5df
 800e430:	0800e5df 	.word	0x0800e5df
 800e434:	0800e51b 	.word	0x0800e51b
 800e438:	0800e5df 	.word	0x0800e5df
 800e43c:	0800e5df 	.word	0x0800e5df
 800e440:	0800e5df 	.word	0x0800e5df
 800e444:	0800e55d 	.word	0x0800e55d
 800e448:	0800e5df 	.word	0x0800e5df
 800e44c:	0800e5df 	.word	0x0800e5df
 800e450:	0800e5df 	.word	0x0800e5df
 800e454:	0800e59d 	.word	0x0800e59d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68b9      	ldr	r1, [r7, #8]
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 fa12 	bl	800e888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	699a      	ldr	r2, [r3, #24]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f042 0208 	orr.w	r2, r2, #8
 800e472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	699a      	ldr	r2, [r3, #24]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f022 0204 	bic.w	r2, r2, #4
 800e482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6999      	ldr	r1, [r3, #24]
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	691a      	ldr	r2, [r3, #16]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	430a      	orrs	r2, r1
 800e494:	619a      	str	r2, [r3, #24]
      break;
 800e496:	e0a3      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68b9      	ldr	r1, [r7, #8]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 fa6e 	bl	800e980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	699a      	ldr	r2, [r3, #24]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	699a      	ldr	r2, [r3, #24]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	6999      	ldr	r1, [r3, #24]
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	021a      	lsls	r2, r3, #8
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	430a      	orrs	r2, r1
 800e4d6:	619a      	str	r2, [r3, #24]
      break;
 800e4d8:	e082      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68b9      	ldr	r1, [r7, #8]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 fac7 	bl	800ea74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	69da      	ldr	r2, [r3, #28]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f042 0208 	orr.w	r2, r2, #8
 800e4f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	69da      	ldr	r2, [r3, #28]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f022 0204 	bic.w	r2, r2, #4
 800e504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	69d9      	ldr	r1, [r3, #28]
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	691a      	ldr	r2, [r3, #16]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	430a      	orrs	r2, r1
 800e516:	61da      	str	r2, [r3, #28]
      break;
 800e518:	e062      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68b9      	ldr	r1, [r7, #8]
 800e520:	4618      	mov	r0, r3
 800e522:	f000 fb1f 	bl	800eb64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	69da      	ldr	r2, [r3, #28]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	69da      	ldr	r2, [r3, #28]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	69d9      	ldr	r1, [r3, #28]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	021a      	lsls	r2, r3, #8
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	430a      	orrs	r2, r1
 800e558:	61da      	str	r2, [r3, #28]
      break;
 800e55a:	e041      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	68b9      	ldr	r1, [r7, #8]
 800e562:	4618      	mov	r0, r3
 800e564:	f000 fb5c 	bl	800ec20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f042 0208 	orr.w	r2, r2, #8
 800e576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f022 0204 	bic.w	r2, r2, #4
 800e586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	691a      	ldr	r2, [r3, #16]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	430a      	orrs	r2, r1
 800e598:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e59a:	e021      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	68b9      	ldr	r1, [r7, #8]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 fb94 	bl	800ecd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	021a      	lsls	r2, r3, #8
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	430a      	orrs	r2, r1
 800e5da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e5dc:	e000      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e5de:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop

0800e5fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d101      	bne.n	800e614 <HAL_TIM_ConfigClockSource+0x18>
 800e610:	2302      	movs	r3, #2
 800e612:	e0a8      	b.n	800e766 <HAL_TIM_ConfigClockSource+0x16a>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2202      	movs	r2, #2
 800e620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e63e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b40      	cmp	r3, #64	; 0x40
 800e64e:	d067      	beq.n	800e720 <HAL_TIM_ConfigClockSource+0x124>
 800e650:	2b40      	cmp	r3, #64	; 0x40
 800e652:	d80b      	bhi.n	800e66c <HAL_TIM_ConfigClockSource+0x70>
 800e654:	2b10      	cmp	r3, #16
 800e656:	d073      	beq.n	800e740 <HAL_TIM_ConfigClockSource+0x144>
 800e658:	2b10      	cmp	r3, #16
 800e65a:	d802      	bhi.n	800e662 <HAL_TIM_ConfigClockSource+0x66>
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d06f      	beq.n	800e740 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e660:	e078      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e662:	2b20      	cmp	r3, #32
 800e664:	d06c      	beq.n	800e740 <HAL_TIM_ConfigClockSource+0x144>
 800e666:	2b30      	cmp	r3, #48	; 0x30
 800e668:	d06a      	beq.n	800e740 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800e66a:	e073      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e66c:	2b70      	cmp	r3, #112	; 0x70
 800e66e:	d00d      	beq.n	800e68c <HAL_TIM_ConfigClockSource+0x90>
 800e670:	2b70      	cmp	r3, #112	; 0x70
 800e672:	d804      	bhi.n	800e67e <HAL_TIM_ConfigClockSource+0x82>
 800e674:	2b50      	cmp	r3, #80	; 0x50
 800e676:	d033      	beq.n	800e6e0 <HAL_TIM_ConfigClockSource+0xe4>
 800e678:	2b60      	cmp	r3, #96	; 0x60
 800e67a:	d041      	beq.n	800e700 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800e67c:	e06a      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e682:	d066      	beq.n	800e752 <HAL_TIM_ConfigClockSource+0x156>
 800e684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e688:	d017      	beq.n	800e6ba <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800e68a:	e063      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6818      	ldr	r0, [r3, #0]
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	6899      	ldr	r1, [r3, #8]
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	685a      	ldr	r2, [r3, #4]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	f000 fbee 	bl	800ee7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e6ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	68fa      	ldr	r2, [r7, #12]
 800e6b6:	609a      	str	r2, [r3, #8]
      break;
 800e6b8:	e04c      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6818      	ldr	r0, [r3, #0]
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	6899      	ldr	r1, [r3, #8]
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	f000 fbd7 	bl	800ee7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	689a      	ldr	r2, [r3, #8]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6dc:	609a      	str	r2, [r3, #8]
      break;
 800e6de:	e039      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6818      	ldr	r0, [r3, #0]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	6859      	ldr	r1, [r3, #4]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	f000 fb49 	bl	800ed84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2150      	movs	r1, #80	; 0x50
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f000 fba2 	bl	800ee42 <TIM_ITRx_SetConfig>
      break;
 800e6fe:	e029      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6818      	ldr	r0, [r3, #0]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	6859      	ldr	r1, [r3, #4]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	461a      	mov	r2, r3
 800e70e:	f000 fb68 	bl	800ede2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2160      	movs	r1, #96	; 0x60
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 fb92 	bl	800ee42 <TIM_ITRx_SetConfig>
      break;
 800e71e:	e019      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6818      	ldr	r0, [r3, #0]
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	6859      	ldr	r1, [r3, #4]
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	461a      	mov	r2, r3
 800e72e:	f000 fb29 	bl	800ed84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2140      	movs	r1, #64	; 0x40
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 fb82 	bl	800ee42 <TIM_ITRx_SetConfig>
      break;
 800e73e:	e009      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4619      	mov	r1, r3
 800e74a:	4610      	mov	r0, r2
 800e74c:	f000 fb79 	bl	800ee42 <TIM_ITRx_SetConfig>
      break;
 800e750:	e000      	b.n	800e754 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800e752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e76e:	b480      	push	{r7}
 800e770:	b083      	sub	sp, #12
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e776:	bf00      	nop
 800e778:	370c      	adds	r7, #12
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e782:	b480      	push	{r7}
 800e784:	b083      	sub	sp, #12
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e78a:	bf00      	nop
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e796:	b480      	push	{r7}
 800e798:	b083      	sub	sp, #12
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e79e:	bf00      	nop
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr

0800e7aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7aa:	b480      	push	{r7}
 800e7ac:	b083      	sub	sp, #12
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7b2:	bf00      	nop
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
	...

0800e7c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a2a      	ldr	r2, [pc, #168]	; (800e87c <TIM_Base_SetConfig+0xbc>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d003      	beq.n	800e7e0 <TIM_Base_SetConfig+0x20>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7de:	d108      	bne.n	800e7f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4a21      	ldr	r2, [pc, #132]	; (800e87c <TIM_Base_SetConfig+0xbc>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d00b      	beq.n	800e812 <TIM_Base_SetConfig+0x52>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e800:	d007      	beq.n	800e812 <TIM_Base_SetConfig+0x52>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a1e      	ldr	r2, [pc, #120]	; (800e880 <TIM_Base_SetConfig+0xc0>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d003      	beq.n	800e812 <TIM_Base_SetConfig+0x52>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a1d      	ldr	r2, [pc, #116]	; (800e884 <TIM_Base_SetConfig+0xc4>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d108      	bne.n	800e824 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	4313      	orrs	r3, r2
 800e822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	4313      	orrs	r3, r2
 800e830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4a0c      	ldr	r2, [pc, #48]	; (800e87c <TIM_Base_SetConfig+0xbc>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d007      	beq.n	800e860 <TIM_Base_SetConfig+0xa0>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a0b      	ldr	r2, [pc, #44]	; (800e880 <TIM_Base_SetConfig+0xc0>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d003      	beq.n	800e860 <TIM_Base_SetConfig+0xa0>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a0a      	ldr	r2, [pc, #40]	; (800e884 <TIM_Base_SetConfig+0xc4>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d103      	bne.n	800e868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	691a      	ldr	r2, [r3, #16]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	615a      	str	r2, [r3, #20]
}
 800e86e:	bf00      	nop
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	40012c00 	.word	0x40012c00
 800e880:	40014400 	.word	0x40014400
 800e884:	40014800 	.word	0x40014800

0800e888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e888:	b480      	push	{r7}
 800e88a:	b087      	sub	sp, #28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a1b      	ldr	r3, [r3, #32]
 800e896:	f023 0201 	bic.w	r2, r3, #1
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a1b      	ldr	r3, [r3, #32]
 800e8a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f023 0303 	bic.w	r3, r3, #3
 800e8c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	f023 0302 	bic.w	r3, r3, #2
 800e8d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	697a      	ldr	r2, [r7, #20]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a24      	ldr	r2, [pc, #144]	; (800e974 <TIM_OC1_SetConfig+0xec>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d007      	beq.n	800e8f8 <TIM_OC1_SetConfig+0x70>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a23      	ldr	r2, [pc, #140]	; (800e978 <TIM_OC1_SetConfig+0xf0>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d003      	beq.n	800e8f8 <TIM_OC1_SetConfig+0x70>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a22      	ldr	r2, [pc, #136]	; (800e97c <TIM_OC1_SetConfig+0xf4>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d10c      	bne.n	800e912 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	f023 0308 	bic.w	r3, r3, #8
 800e8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	4313      	orrs	r3, r2
 800e908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f023 0304 	bic.w	r3, r3, #4
 800e910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a17      	ldr	r2, [pc, #92]	; (800e974 <TIM_OC1_SetConfig+0xec>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d007      	beq.n	800e92a <TIM_OC1_SetConfig+0xa2>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a17      	ldr	r2, [pc, #92]	; (800e97c <TIM_OC1_SetConfig+0xf4>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d003      	beq.n	800e92a <TIM_OC1_SetConfig+0xa2>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4a14      	ldr	r2, [pc, #80]	; (800e978 <TIM_OC1_SetConfig+0xf0>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d111      	bne.n	800e94e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	693a      	ldr	r2, [r7, #16]
 800e940:	4313      	orrs	r3, r2
 800e942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	693a      	ldr	r2, [r7, #16]
 800e952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	685a      	ldr	r2, [r3, #4]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	621a      	str	r2, [r3, #32]
}
 800e968:	bf00      	nop
 800e96a:	371c      	adds	r7, #28
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	40012c00 	.word	0x40012c00
 800e978:	40014800 	.word	0x40014800
 800e97c:	40014400 	.word	0x40014400

0800e980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e980:	b480      	push	{r7}
 800e982:	b087      	sub	sp, #28
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	f023 0210 	bic.w	r2, r3, #16
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6a1b      	ldr	r3, [r3, #32]
 800e99a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	699b      	ldr	r3, [r3, #24]
 800e9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e9ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	021b      	lsls	r3, r3, #8
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	f023 0320 	bic.w	r3, r3, #32
 800e9ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	011b      	lsls	r3, r3, #4
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a22      	ldr	r2, [pc, #136]	; (800ea68 <TIM_OC2_SetConfig+0xe8>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d10d      	bne.n	800ea00 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	011b      	lsls	r3, r3, #4
 800e9f2:	697a      	ldr	r2, [r7, #20]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a19      	ldr	r2, [pc, #100]	; (800ea68 <TIM_OC2_SetConfig+0xe8>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d007      	beq.n	800ea18 <TIM_OC2_SetConfig+0x98>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	4a18      	ldr	r2, [pc, #96]	; (800ea6c <TIM_OC2_SetConfig+0xec>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d003      	beq.n	800ea18 <TIM_OC2_SetConfig+0x98>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4a17      	ldr	r2, [pc, #92]	; (800ea70 <TIM_OC2_SetConfig+0xf0>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d113      	bne.n	800ea40 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	695b      	ldr	r3, [r3, #20]
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	693a      	ldr	r2, [r7, #16]
 800ea30:	4313      	orrs	r3, r2
 800ea32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	699b      	ldr	r3, [r3, #24]
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	693a      	ldr	r2, [r7, #16]
 800ea44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	685a      	ldr	r2, [r3, #4]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	697a      	ldr	r2, [r7, #20]
 800ea58:	621a      	str	r2, [r3, #32]
}
 800ea5a:	bf00      	nop
 800ea5c:	371c      	adds	r7, #28
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	40012c00 	.word	0x40012c00
 800ea6c:	40014400 	.word	0x40014400
 800ea70:	40014800 	.word	0x40014800

0800ea74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b087      	sub	sp, #28
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a1b      	ldr	r3, [r3, #32]
 800ea8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	69db      	ldr	r3, [r3, #28]
 800ea9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eaa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f023 0303 	bic.w	r3, r3, #3
 800eaae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	021b      	lsls	r3, r3, #8
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a21      	ldr	r2, [pc, #132]	; (800eb58 <TIM_OC3_SetConfig+0xe4>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d10d      	bne.n	800eaf2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eadc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	021b      	lsls	r3, r3, #8
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eaf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4a18      	ldr	r2, [pc, #96]	; (800eb58 <TIM_OC3_SetConfig+0xe4>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d007      	beq.n	800eb0a <TIM_OC3_SetConfig+0x96>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4a17      	ldr	r2, [pc, #92]	; (800eb5c <TIM_OC3_SetConfig+0xe8>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d003      	beq.n	800eb0a <TIM_OC3_SetConfig+0x96>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4a16      	ldr	r2, [pc, #88]	; (800eb60 <TIM_OC3_SetConfig+0xec>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d113      	bne.n	800eb32 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	695b      	ldr	r3, [r3, #20]
 800eb1e:	011b      	lsls	r3, r3, #4
 800eb20:	693a      	ldr	r2, [r7, #16]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	011b      	lsls	r3, r3, #4
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	693a      	ldr	r2, [r7, #16]
 800eb36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	685a      	ldr	r2, [r3, #4]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	697a      	ldr	r2, [r7, #20]
 800eb4a:	621a      	str	r2, [r3, #32]
}
 800eb4c:	bf00      	nop
 800eb4e:	371c      	adds	r7, #28
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr
 800eb58:	40012c00 	.word	0x40012c00
 800eb5c:	40014400 	.word	0x40014400
 800eb60:	40014800 	.word	0x40014800

0800eb64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b087      	sub	sp, #28
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eb92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	031b      	lsls	r3, r3, #12
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a14      	ldr	r2, [pc, #80]	; (800ec14 <TIM_OC4_SetConfig+0xb0>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d007      	beq.n	800ebd8 <TIM_OC4_SetConfig+0x74>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4a13      	ldr	r2, [pc, #76]	; (800ec18 <TIM_OC4_SetConfig+0xb4>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d003      	beq.n	800ebd8 <TIM_OC4_SetConfig+0x74>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a12      	ldr	r2, [pc, #72]	; (800ec1c <TIM_OC4_SetConfig+0xb8>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d109      	bne.n	800ebec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	695b      	ldr	r3, [r3, #20]
 800ebe4:	019b      	lsls	r3, r3, #6
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	685a      	ldr	r2, [r3, #4]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	621a      	str	r2, [r3, #32]
}
 800ec06:	bf00      	nop
 800ec08:	371c      	adds	r7, #28
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	40012c00 	.word	0x40012c00
 800ec18:	40014400 	.word	0x40014400
 800ec1c:	40014800 	.word	0x40014800

0800ec20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a1b      	ldr	r3, [r3, #32]
 800ec2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ec64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	041b      	lsls	r3, r3, #16
 800ec6c:	693a      	ldr	r2, [r7, #16]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4a13      	ldr	r2, [pc, #76]	; (800ecc4 <TIM_OC5_SetConfig+0xa4>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d007      	beq.n	800ec8a <TIM_OC5_SetConfig+0x6a>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4a12      	ldr	r2, [pc, #72]	; (800ecc8 <TIM_OC5_SetConfig+0xa8>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d003      	beq.n	800ec8a <TIM_OC5_SetConfig+0x6a>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a11      	ldr	r2, [pc, #68]	; (800eccc <TIM_OC5_SetConfig+0xac>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d109      	bne.n	800ec9e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	695b      	ldr	r3, [r3, #20]
 800ec96:	021b      	lsls	r3, r3, #8
 800ec98:	697a      	ldr	r2, [r7, #20]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	697a      	ldr	r2, [r7, #20]
 800eca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	685a      	ldr	r2, [r3, #4]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	621a      	str	r2, [r3, #32]
}
 800ecb8:	bf00      	nop
 800ecba:	371c      	adds	r7, #28
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	40012c00 	.word	0x40012c00
 800ecc8:	40014400 	.word	0x40014400
 800eccc:	40014800 	.word	0x40014800

0800ecd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a1b      	ldr	r3, [r3, #32]
 800ecde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ecfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	021b      	lsls	r3, r3, #8
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	051b      	lsls	r3, r3, #20
 800ed1e:	693a      	ldr	r2, [r7, #16]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a14      	ldr	r2, [pc, #80]	; (800ed78 <TIM_OC6_SetConfig+0xa8>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d007      	beq.n	800ed3c <TIM_OC6_SetConfig+0x6c>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a13      	ldr	r2, [pc, #76]	; (800ed7c <TIM_OC6_SetConfig+0xac>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d003      	beq.n	800ed3c <TIM_OC6_SetConfig+0x6c>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4a12      	ldr	r2, [pc, #72]	; (800ed80 <TIM_OC6_SetConfig+0xb0>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d109      	bne.n	800ed50 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ed42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	029b      	lsls	r3, r3, #10
 800ed4a:	697a      	ldr	r2, [r7, #20]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	685a      	ldr	r2, [r3, #4]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	693a      	ldr	r2, [r7, #16]
 800ed68:	621a      	str	r2, [r3, #32]
}
 800ed6a:	bf00      	nop
 800ed6c:	371c      	adds	r7, #28
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	40012c00 	.word	0x40012c00
 800ed7c:	40014400 	.word	0x40014400
 800ed80:	40014800 	.word	0x40014800

0800ed84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b087      	sub	sp, #28
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	6a1b      	ldr	r3, [r3, #32]
 800ed9a:	f023 0201 	bic.w	r2, r3, #1
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	699b      	ldr	r3, [r3, #24]
 800eda6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800edae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	011b      	lsls	r3, r3, #4
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	f023 030a 	bic.w	r3, r3, #10
 800edc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800edc2:	697a      	ldr	r2, [r7, #20]
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	693a      	ldr	r2, [r7, #16]
 800edce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	621a      	str	r2, [r3, #32]
}
 800edd6:	bf00      	nop
 800edd8:	371c      	adds	r7, #28
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ede2:	b480      	push	{r7}
 800ede4:	b087      	sub	sp, #28
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	60f8      	str	r0, [r7, #12]
 800edea:	60b9      	str	r1, [r7, #8]
 800edec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	f023 0210 	bic.w	r2, r3, #16
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6a1b      	ldr	r3, [r3, #32]
 800ee04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ee0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	031b      	lsls	r3, r3, #12
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ee1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	011b      	lsls	r3, r3, #4
 800ee24:	693a      	ldr	r2, [r7, #16]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	697a      	ldr	r2, [r7, #20]
 800ee2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	621a      	str	r2, [r3, #32]
}
 800ee36:	bf00      	nop
 800ee38:	371c      	adds	r7, #28
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr

0800ee42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee42:	b480      	push	{r7}
 800ee44:	b085      	sub	sp, #20
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ee58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	f043 0307 	orr.w	r3, r3, #7
 800ee68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	609a      	str	r2, [r3, #8]
}
 800ee70:	bf00      	nop
 800ee72:	3714      	adds	r7, #20
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b087      	sub	sp, #28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	021a      	lsls	r2, r3, #8
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	431a      	orrs	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	4313      	orrs	r3, r2
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	609a      	str	r2, [r3, #8]
}
 800eeb0:	bf00      	nop
 800eeb2:	371c      	adds	r7, #28
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b087      	sub	sp, #28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f003 031f 	and.w	r3, r3, #31
 800eece:	2201      	movs	r2, #1
 800eed0:	fa02 f303 	lsl.w	r3, r2, r3
 800eed4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6a1a      	ldr	r2, [r3, #32]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	43db      	mvns	r3, r3
 800eede:	401a      	ands	r2, r3
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6a1a      	ldr	r2, [r3, #32]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f003 031f 	and.w	r3, r3, #31
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	fa01 f303 	lsl.w	r3, r1, r3
 800eef4:	431a      	orrs	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	621a      	str	r2, [r3, #32]
}
 800eefa:	bf00      	nop
 800eefc:	371c      	adds	r7, #28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
	...

0800ef08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d101      	bne.n	800ef20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	e04a      	b.n	800efb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a1f      	ldr	r2, [pc, #124]	; (800efc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d108      	bne.n	800ef5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ef50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a12      	ldr	r2, [pc, #72]	; (800efc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d004      	beq.n	800ef8a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef88:	d10c      	bne.n	800efa4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3714      	adds	r7, #20
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	40012c00 	.word	0x40012c00

0800efc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800efe4:	bf00      	nop
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eff8:	bf00      	nop
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f00c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f010:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f018:	b29a      	uxth	r2, r3
 800f01a:	89fb      	ldrh	r3, [r7, #14]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	b29a      	uxth	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3714      	adds	r7, #20
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f03c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f040:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f048:	b29b      	uxth	r3, r3
 800f04a:	b21a      	sxth	r2, r3
 800f04c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f050:	43db      	mvns	r3, r3
 800f052:	b21b      	sxth	r3, r3
 800f054:	4013      	ands	r3, r2
 800f056:	b21b      	sxth	r3, r3
 800f058:	b29a      	uxth	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f06e:	b084      	sub	sp, #16
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	f107 0014 	add.w	r0, r7, #20
 800f07c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2200      	movs	r2, #0
 800f094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f7ff ffaf 	bl	800f004 <USB_EnableGlobalInt>

  return HAL_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0b2:	b004      	add	sp, #16
 800f0b4:	4770      	bx	lr
	...

0800f0b8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f0b8:	b490      	push	{r4, r7}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	4413      	add	r3, r2
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f0d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0dc:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	78db      	ldrb	r3, [r3, #3]
 800f0e2:	2b03      	cmp	r3, #3
 800f0e4:	d819      	bhi.n	800f11a <USB_ActivateEndpoint+0x62>
 800f0e6:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <USB_ActivateEndpoint+0x34>)
 800f0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ec:	0800f0fd 	.word	0x0800f0fd
 800f0f0:	0800f111 	.word	0x0800f111
 800f0f4:	0800f121 	.word	0x0800f121
 800f0f8:	0800f107 	.word	0x0800f107
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f0fc:	8abb      	ldrh	r3, [r7, #20]
 800f0fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f102:	82bb      	strh	r3, [r7, #20]
      break;
 800f104:	e00d      	b.n	800f122 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f106:	8abb      	ldrh	r3, [r7, #20]
 800f108:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f10c:	82bb      	strh	r3, [r7, #20]
      break;
 800f10e:	e008      	b.n	800f122 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f110:	8abb      	ldrh	r3, [r7, #20]
 800f112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f116:	82bb      	strh	r3, [r7, #20]
      break;
 800f118:	e003      	b.n	800f122 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	75fb      	strb	r3, [r7, #23]
      break;
 800f11e:	e000      	b.n	800f122 <USB_ActivateEndpoint+0x6a>
      break;
 800f120:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	441a      	add	r2, r3
 800f12c:	8abb      	ldrh	r3, [r7, #20]
 800f12e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f13e:	b29b      	uxth	r3, r3
 800f140:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4413      	add	r3, r2
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	b29b      	uxth	r3, r3
 800f150:	b21b      	sxth	r3, r3
 800f152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f15a:	b21a      	sxth	r2, r3
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	b21b      	sxth	r3, r3
 800f162:	4313      	orrs	r3, r2
 800f164:	b21b      	sxth	r3, r3
 800f166:	b29c      	uxth	r4, r3
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	441a      	add	r2, r3
 800f172:	4b87      	ldr	r3, [pc, #540]	; (800f390 <USB_ActivateEndpoint+0x2d8>)
 800f174:	4323      	orrs	r3, r4
 800f176:	b29b      	uxth	r3, r3
 800f178:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	7b1b      	ldrb	r3, [r3, #12]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f040 810c 	bne.w	800f39c <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d067      	beq.n	800f25c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f18c:	687c      	ldr	r4, [r7, #4]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f194:	b29b      	uxth	r3, r3
 800f196:	441c      	add	r4, r3
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	4423      	add	r3, r4
 800f1a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1a4:	461c      	mov	r4, r3
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	88db      	ldrh	r3, [r3, #6]
 800f1aa:	085b      	lsrs	r3, r3, #1
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	4413      	add	r3, r2
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	b29c      	uxth	r4, r3
 800f1c2:	4623      	mov	r3, r4
 800f1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d014      	beq.n	800f1f6 <USB_ActivateEndpoint+0x13e>
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	4413      	add	r3, r2
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1e2:	b29c      	uxth	r4, r3
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	441a      	add	r2, r3
 800f1ee:	4b69      	ldr	r3, [pc, #420]	; (800f394 <USB_ActivateEndpoint+0x2dc>)
 800f1f0:	4323      	orrs	r3, r4
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	78db      	ldrb	r3, [r3, #3]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d018      	beq.n	800f230 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f214:	b29c      	uxth	r4, r3
 800f216:	f084 0320 	eor.w	r3, r4, #32
 800f21a:	b29c      	uxth	r4, r3
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	441a      	add	r2, r3
 800f226:	4b5a      	ldr	r3, [pc, #360]	; (800f390 <USB_ActivateEndpoint+0x2d8>)
 800f228:	4323      	orrs	r3, r4
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	8013      	strh	r3, [r2, #0]
 800f22e:	e225      	b.n	800f67c <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f246:	b29c      	uxth	r4, r3
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	441a      	add	r2, r3
 800f252:	4b4f      	ldr	r3, [pc, #316]	; (800f390 <USB_ActivateEndpoint+0x2d8>)
 800f254:	4323      	orrs	r3, r4
 800f256:	b29b      	uxth	r3, r3
 800f258:	8013      	strh	r3, [r2, #0]
 800f25a:	e20f      	b.n	800f67c <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f25c:	687c      	ldr	r4, [r7, #4]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f264:	b29b      	uxth	r3, r3
 800f266:	441c      	add	r4, r3
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	4423      	add	r3, r4
 800f270:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f274:	461c      	mov	r4, r3
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	88db      	ldrh	r3, [r3, #6]
 800f27a:	085b      	lsrs	r3, r3, #1
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	b29b      	uxth	r3, r3
 800f282:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f284:	687c      	ldr	r4, [r7, #4]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	441c      	add	r4, r3
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	00db      	lsls	r3, r3, #3
 800f296:	4423      	add	r3, r4
 800f298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	691b      	ldr	r3, [r3, #16]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d110      	bne.n	800f2c8 <USB_ActivateEndpoint+0x210>
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	881b      	ldrh	r3, [r3, #0]
 800f2aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f2ae:	b29a      	uxth	r2, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	801a      	strh	r2, [r3, #0]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	881b      	ldrh	r3, [r3, #0]
 800f2b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2c0:	b29a      	uxth	r2, r3
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	801a      	strh	r2, [r3, #0]
 800f2c6:	e026      	b.n	800f316 <USB_ActivateEndpoint+0x25e>
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	691b      	ldr	r3, [r3, #16]
 800f2cc:	2b3d      	cmp	r3, #61	; 0x3d
 800f2ce:	d813      	bhi.n	800f2f8 <USB_ActivateEndpoint+0x240>
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	691b      	ldr	r3, [r3, #16]
 800f2d4:	085b      	lsrs	r3, r3, #1
 800f2d6:	613b      	str	r3, [r7, #16]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	691b      	ldr	r3, [r3, #16]
 800f2dc:	f003 0301 	and.w	r3, r3, #1
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <USB_ActivateEndpoint+0x232>
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	613b      	str	r3, [r7, #16]
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	029b      	lsls	r3, r3, #10
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	801a      	strh	r2, [r3, #0]
 800f2f6:	e00e      	b.n	800f316 <USB_ActivateEndpoint+0x25e>
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	691b      	ldr	r3, [r3, #16]
 800f2fc:	095b      	lsrs	r3, r3, #5
 800f2fe:	613b      	str	r3, [r7, #16]
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	b29b      	uxth	r3, r3
 800f304:	029b      	lsls	r3, r3, #10
 800f306:	b29b      	uxth	r3, r3
 800f308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f30c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f310:	b29a      	uxth	r2, r3
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	4413      	add	r3, r2
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	b29c      	uxth	r4, r3
 800f324:	4623      	mov	r3, r4
 800f326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d014      	beq.n	800f358 <USB_ActivateEndpoint+0x2a0>
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	4413      	add	r3, r2
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f344:	b29c      	uxth	r4, r3
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	441a      	add	r2, r3
 800f350:	4b11      	ldr	r3, [pc, #68]	; (800f398 <USB_ActivateEndpoint+0x2e0>)
 800f352:	4323      	orrs	r3, r4
 800f354:	b29b      	uxth	r3, r3
 800f356:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4413      	add	r3, r2
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	b29b      	uxth	r3, r3
 800f366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f36a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f36e:	b29c      	uxth	r4, r3
 800f370:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f374:	b29c      	uxth	r4, r3
 800f376:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800f37a:	b29c      	uxth	r4, r3
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	441a      	add	r2, r3
 800f386:	4b02      	ldr	r3, [pc, #8]	; (800f390 <USB_ActivateEndpoint+0x2d8>)
 800f388:	4323      	orrs	r3, r4
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	8013      	strh	r3, [r2, #0]
 800f38e:	e175      	b.n	800f67c <USB_ActivateEndpoint+0x5c4>
 800f390:	ffff8080 	.word	0xffff8080
 800f394:	ffff80c0 	.word	0xffff80c0
 800f398:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	881b      	ldrh	r3, [r3, #0]
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3b2:	b29c      	uxth	r4, r3
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	441a      	add	r2, r3
 800f3be:	4b96      	ldr	r3, [pc, #600]	; (800f618 <USB_ActivateEndpoint+0x560>)
 800f3c0:	4323      	orrs	r3, r4
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f3c6:	687c      	ldr	r4, [r7, #4]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	441c      	add	r4, r3
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	00db      	lsls	r3, r3, #3
 800f3d8:	4423      	add	r3, r4
 800f3da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3de:	461c      	mov	r4, r3
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	891b      	ldrh	r3, [r3, #8]
 800f3e4:	085b      	lsrs	r3, r3, #1
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	8023      	strh	r3, [r4, #0]
 800f3ee:	687c      	ldr	r4, [r7, #4]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	441c      	add	r4, r3
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	00db      	lsls	r3, r3, #3
 800f400:	4423      	add	r3, r4
 800f402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f406:	461c      	mov	r4, r3
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	895b      	ldrh	r3, [r3, #10]
 800f40c:	085b      	lsrs	r3, r3, #1
 800f40e:	b29b      	uxth	r3, r3
 800f410:	005b      	lsls	r3, r3, #1
 800f412:	b29b      	uxth	r3, r3
 800f414:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	785b      	ldrb	r3, [r3, #1]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f040 8088 	bne.w	800f530 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	4413      	add	r3, r2
 800f42a:	881b      	ldrh	r3, [r3, #0]
 800f42c:	b29c      	uxth	r4, r3
 800f42e:	4623      	mov	r3, r4
 800f430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f434:	2b00      	cmp	r3, #0
 800f436:	d014      	beq.n	800f462 <USB_ActivateEndpoint+0x3aa>
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	b29b      	uxth	r3, r3
 800f446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f44e:	b29c      	uxth	r4, r3
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	441a      	add	r2, r3
 800f45a:	4b70      	ldr	r3, [pc, #448]	; (800f61c <USB_ActivateEndpoint+0x564>)
 800f45c:	4323      	orrs	r3, r4
 800f45e:	b29b      	uxth	r3, r3
 800f460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	b29c      	uxth	r4, r3
 800f470:	4623      	mov	r3, r4
 800f472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f476:	2b00      	cmp	r3, #0
 800f478:	d014      	beq.n	800f4a4 <USB_ActivateEndpoint+0x3ec>
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	4413      	add	r3, r2
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	b29b      	uxth	r3, r3
 800f488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f48c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f490:	b29c      	uxth	r4, r3
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	441a      	add	r2, r3
 800f49c:	4b60      	ldr	r3, [pc, #384]	; (800f620 <USB_ActivateEndpoint+0x568>)
 800f49e:	4323      	orrs	r3, r4
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	881b      	ldrh	r3, [r3, #0]
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4ba:	b29c      	uxth	r4, r3
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	441a      	add	r2, r3
 800f4c6:	4b56      	ldr	r3, [pc, #344]	; (800f620 <USB_ActivateEndpoint+0x568>)
 800f4c8:	4323      	orrs	r3, r4
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	4413      	add	r3, r2
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4e4:	b29c      	uxth	r4, r3
 800f4e6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f4ea:	b29c      	uxth	r4, r3
 800f4ec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800f4f0:	b29c      	uxth	r4, r3
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	441a      	add	r2, r3
 800f4fc:	4b49      	ldr	r3, [pc, #292]	; (800f624 <USB_ActivateEndpoint+0x56c>)
 800f4fe:	4323      	orrs	r3, r4
 800f500:	b29b      	uxth	r3, r3
 800f502:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4413      	add	r3, r2
 800f50e:	881b      	ldrh	r3, [r3, #0]
 800f510:	b29b      	uxth	r3, r3
 800f512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f51a:	b29c      	uxth	r4, r3
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	441a      	add	r2, r3
 800f526:	4b3f      	ldr	r3, [pc, #252]	; (800f624 <USB_ActivateEndpoint+0x56c>)
 800f528:	4323      	orrs	r3, r4
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	8013      	strh	r3, [r2, #0]
 800f52e:	e0a5      	b.n	800f67c <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	4413      	add	r3, r2
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	b29c      	uxth	r4, r3
 800f53e:	4623      	mov	r3, r4
 800f540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f544:	2b00      	cmp	r3, #0
 800f546:	d014      	beq.n	800f572 <USB_ActivateEndpoint+0x4ba>
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	881b      	ldrh	r3, [r3, #0]
 800f554:	b29b      	uxth	r3, r3
 800f556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f55e:	b29c      	uxth	r4, r3
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	441a      	add	r2, r3
 800f56a:	4b2c      	ldr	r3, [pc, #176]	; (800f61c <USB_ActivateEndpoint+0x564>)
 800f56c:	4323      	orrs	r3, r4
 800f56e:	b29b      	uxth	r3, r3
 800f570:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	4413      	add	r3, r2
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	b29c      	uxth	r4, r3
 800f580:	4623      	mov	r3, r4
 800f582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f586:	2b00      	cmp	r3, #0
 800f588:	d014      	beq.n	800f5b4 <USB_ActivateEndpoint+0x4fc>
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	b29b      	uxth	r3, r3
 800f598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5a0:	b29c      	uxth	r4, r3
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	441a      	add	r2, r3
 800f5ac:	4b1c      	ldr	r3, [pc, #112]	; (800f620 <USB_ActivateEndpoint+0x568>)
 800f5ae:	4323      	orrs	r3, r4
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	4413      	add	r3, r2
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ca:	b29c      	uxth	r4, r3
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	441a      	add	r2, r3
 800f5d6:	4b11      	ldr	r3, [pc, #68]	; (800f61c <USB_ActivateEndpoint+0x564>)
 800f5d8:	4323      	orrs	r3, r4
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	78db      	ldrb	r3, [r3, #3]
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d020      	beq.n	800f628 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	4413      	add	r3, r2
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5fc:	b29c      	uxth	r4, r3
 800f5fe:	f084 0320 	eor.w	r3, r4, #32
 800f602:	b29c      	uxth	r4, r3
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	441a      	add	r2, r3
 800f60e:	4b05      	ldr	r3, [pc, #20]	; (800f624 <USB_ActivateEndpoint+0x56c>)
 800f610:	4323      	orrs	r3, r4
 800f612:	b29b      	uxth	r3, r3
 800f614:	8013      	strh	r3, [r2, #0]
 800f616:	e01c      	b.n	800f652 <USB_ActivateEndpoint+0x59a>
 800f618:	ffff8180 	.word	0xffff8180
 800f61c:	ffffc080 	.word	0xffffc080
 800f620:	ffff80c0 	.word	0xffff80c0
 800f624:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	4413      	add	r3, r2
 800f632:	881b      	ldrh	r3, [r3, #0]
 800f634:	b29b      	uxth	r3, r3
 800f636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f63a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f63e:	b29c      	uxth	r4, r3
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	441a      	add	r2, r3
 800f64a:	4b0f      	ldr	r3, [pc, #60]	; (800f688 <USB_ActivateEndpoint+0x5d0>)
 800f64c:	4323      	orrs	r3, r4
 800f64e:	b29b      	uxth	r3, r3
 800f650:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	b29b      	uxth	r3, r3
 800f660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f668:	b29c      	uxth	r4, r3
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	441a      	add	r2, r3
 800f674:	4b04      	ldr	r3, [pc, #16]	; (800f688 <USB_ActivateEndpoint+0x5d0>)
 800f676:	4323      	orrs	r3, r4
 800f678:	b29b      	uxth	r3, r3
 800f67a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3718      	adds	r7, #24
 800f682:	46bd      	mov	sp, r7
 800f684:	bc90      	pop	{r4, r7}
 800f686:	4770      	bx	lr
 800f688:	ffff8080 	.word	0xffff8080

0800f68c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f68c:	b490      	push	{r4, r7}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	7b1b      	ldrb	r3, [r3, #12]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d171      	bne.n	800f782 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	785b      	ldrb	r3, [r3, #1]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d036      	beq.n	800f714 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	4413      	add	r3, r2
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	b29c      	uxth	r4, r3
 800f6b4:	4623      	mov	r3, r4
 800f6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d014      	beq.n	800f6e8 <USB_DeactivateEndpoint+0x5c>
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	4413      	add	r3, r2
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6d4:	b29c      	uxth	r4, r3
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	441a      	add	r2, r3
 800f6e0:	4b6b      	ldr	r3, [pc, #428]	; (800f890 <USB_DeactivateEndpoint+0x204>)
 800f6e2:	4323      	orrs	r3, r4
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	4413      	add	r3, r2
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6fe:	b29c      	uxth	r4, r3
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	441a      	add	r2, r3
 800f70a:	4b62      	ldr	r3, [pc, #392]	; (800f894 <USB_DeactivateEndpoint+0x208>)
 800f70c:	4323      	orrs	r3, r4
 800f70e:	b29b      	uxth	r3, r3
 800f710:	8013      	strh	r3, [r2, #0]
 800f712:	e144      	b.n	800f99e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	4413      	add	r3, r2
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	b29c      	uxth	r4, r3
 800f722:	4623      	mov	r3, r4
 800f724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d014      	beq.n	800f756 <USB_DeactivateEndpoint+0xca>
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	b29b      	uxth	r3, r3
 800f73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f73e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f742:	b29c      	uxth	r4, r3
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	441a      	add	r2, r3
 800f74e:	4b52      	ldr	r3, [pc, #328]	; (800f898 <USB_DeactivateEndpoint+0x20c>)
 800f750:	4323      	orrs	r3, r4
 800f752:	b29b      	uxth	r3, r3
 800f754:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4413      	add	r3, r2
 800f760:	881b      	ldrh	r3, [r3, #0]
 800f762:	b29b      	uxth	r3, r3
 800f764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f76c:	b29c      	uxth	r4, r3
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	441a      	add	r2, r3
 800f778:	4b46      	ldr	r3, [pc, #280]	; (800f894 <USB_DeactivateEndpoint+0x208>)
 800f77a:	4323      	orrs	r3, r4
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	8013      	strh	r3, [r2, #0]
 800f780:	e10d      	b.n	800f99e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	785b      	ldrb	r3, [r3, #1]
 800f786:	2b00      	cmp	r3, #0
 800f788:	f040 8088 	bne.w	800f89c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	b29c      	uxth	r4, r3
 800f79a:	4623      	mov	r3, r4
 800f79c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d014      	beq.n	800f7ce <USB_DeactivateEndpoint+0x142>
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	4413      	add	r3, r2
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7ba:	b29c      	uxth	r4, r3
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	441a      	add	r2, r3
 800f7c6:	4b34      	ldr	r3, [pc, #208]	; (800f898 <USB_DeactivateEndpoint+0x20c>)
 800f7c8:	4323      	orrs	r3, r4
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4413      	add	r3, r2
 800f7d8:	881b      	ldrh	r3, [r3, #0]
 800f7da:	b29c      	uxth	r4, r3
 800f7dc:	4623      	mov	r3, r4
 800f7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d014      	beq.n	800f810 <USB_DeactivateEndpoint+0x184>
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4413      	add	r3, r2
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7fc:	b29c      	uxth	r4, r3
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	441a      	add	r2, r3
 800f808:	4b21      	ldr	r3, [pc, #132]	; (800f890 <USB_DeactivateEndpoint+0x204>)
 800f80a:	4323      	orrs	r3, r4
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	4413      	add	r3, r2
 800f81a:	881b      	ldrh	r3, [r3, #0]
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f826:	b29c      	uxth	r4, r3
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	441a      	add	r2, r3
 800f832:	4b17      	ldr	r3, [pc, #92]	; (800f890 <USB_DeactivateEndpoint+0x204>)
 800f834:	4323      	orrs	r3, r4
 800f836:	b29b      	uxth	r3, r3
 800f838:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	4413      	add	r3, r2
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	b29b      	uxth	r3, r3
 800f848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f84c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f850:	b29c      	uxth	r4, r3
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	441a      	add	r2, r3
 800f85c:	4b0d      	ldr	r3, [pc, #52]	; (800f894 <USB_DeactivateEndpoint+0x208>)
 800f85e:	4323      	orrs	r3, r4
 800f860:	b29b      	uxth	r3, r3
 800f862:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	4413      	add	r3, r2
 800f86e:	881b      	ldrh	r3, [r3, #0]
 800f870:	b29b      	uxth	r3, r3
 800f872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f87a:	b29c      	uxth	r4, r3
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	441a      	add	r2, r3
 800f886:	4b03      	ldr	r3, [pc, #12]	; (800f894 <USB_DeactivateEndpoint+0x208>)
 800f888:	4323      	orrs	r3, r4
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	8013      	strh	r3, [r2, #0]
 800f88e:	e086      	b.n	800f99e <USB_DeactivateEndpoint+0x312>
 800f890:	ffff80c0 	.word	0xffff80c0
 800f894:	ffff8080 	.word	0xffff8080
 800f898:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	4413      	add	r3, r2
 800f8a6:	881b      	ldrh	r3, [r3, #0]
 800f8a8:	b29c      	uxth	r4, r3
 800f8aa:	4623      	mov	r3, r4
 800f8ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d014      	beq.n	800f8de <USB_DeactivateEndpoint+0x252>
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	881b      	ldrh	r3, [r3, #0]
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8ca:	b29c      	uxth	r4, r3
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	441a      	add	r2, r3
 800f8d6:	4b35      	ldr	r3, [pc, #212]	; (800f9ac <USB_DeactivateEndpoint+0x320>)
 800f8d8:	4323      	orrs	r3, r4
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	4413      	add	r3, r2
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	b29c      	uxth	r4, r3
 800f8ec:	4623      	mov	r3, r4
 800f8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d014      	beq.n	800f920 <USB_DeactivateEndpoint+0x294>
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	b29b      	uxth	r3, r3
 800f904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f90c:	b29c      	uxth	r4, r3
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	441a      	add	r2, r3
 800f918:	4b25      	ldr	r3, [pc, #148]	; (800f9b0 <USB_DeactivateEndpoint+0x324>)
 800f91a:	4323      	orrs	r3, r4
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	4413      	add	r3, r2
 800f92a:	881b      	ldrh	r3, [r3, #0]
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f936:	b29c      	uxth	r4, r3
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	441a      	add	r2, r3
 800f942:	4b1a      	ldr	r3, [pc, #104]	; (800f9ac <USB_DeactivateEndpoint+0x320>)
 800f944:	4323      	orrs	r3, r4
 800f946:	b29b      	uxth	r3, r3
 800f948:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	4413      	add	r3, r2
 800f954:	881b      	ldrh	r3, [r3, #0]
 800f956:	b29b      	uxth	r3, r3
 800f958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f95c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f960:	b29c      	uxth	r4, r3
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	441a      	add	r2, r3
 800f96c:	4b11      	ldr	r3, [pc, #68]	; (800f9b4 <USB_DeactivateEndpoint+0x328>)
 800f96e:	4323      	orrs	r3, r4
 800f970:	b29b      	uxth	r3, r3
 800f972:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	4413      	add	r3, r2
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	b29b      	uxth	r3, r3
 800f982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f98a:	b29c      	uxth	r4, r3
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	441a      	add	r2, r3
 800f996:	4b07      	ldr	r3, [pc, #28]	; (800f9b4 <USB_DeactivateEndpoint+0x328>)
 800f998:	4323      	orrs	r3, r4
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bc90      	pop	{r4, r7}
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	ffffc080 	.word	0xffffc080
 800f9b0:	ffff80c0 	.word	0xffff80c0
 800f9b4:	ffff8080 	.word	0xffff8080

0800f9b8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f9b8:	b590      	push	{r4, r7, lr}
 800f9ba:	b095      	sub	sp, #84	; 0x54
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	785b      	ldrb	r3, [r3, #1]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	f040 815d 	bne.w	800fc86 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	699a      	ldr	r2, [r3, #24]
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d909      	bls.n	800f9ec <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	699a      	ldr	r2, [r3, #24]
 800f9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9e4:	1ad2      	subs	r2, r2, r3
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	619a      	str	r2, [r3, #24]
 800f9ea:	e005      	b.n	800f9f8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	699b      	ldr	r3, [r3, #24]
 800f9f0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	7b1b      	ldrb	r3, [r3, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d11a      	bne.n	800fa36 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	6959      	ldr	r1, [r3, #20]
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	88da      	ldrh	r2, [r3, #6]
 800fa08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 fbb3 	bl	8010178 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fa12:	687c      	ldr	r4, [r7, #4]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	441c      	add	r4, r3
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	4423      	add	r3, r4
 800fa26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fa2a:	60fb      	str	r3, [r7, #12]
 800fa2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	801a      	strh	r2, [r3, #0]
 800fa34:	e10b      	b.n	800fc4e <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4413      	add	r3, r2
 800fa40:	881b      	ldrh	r3, [r3, #0]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d062      	beq.n	800fb12 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fa4c:	687c      	ldr	r4, [r7, #4]
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	785b      	ldrb	r3, [r3, #1]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d144      	bne.n	800fae0 <USB_EPStartXfer+0x128>
 800fa56:	687c      	ldr	r4, [r7, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	441c      	add	r4, r3
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	00db      	lsls	r3, r3, #3
 800fa68:	4423      	add	r3, r4
 800fa6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fa6e:	613b      	str	r3, [r7, #16]
 800fa70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d110      	bne.n	800fa98 <USB_EPStartXfer+0xe0>
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	881b      	ldrh	r3, [r3, #0]
 800fa7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	801a      	strh	r2, [r3, #0]
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	801a      	strh	r2, [r3, #0]
 800fa96:	e037      	b.n	800fb08 <USB_EPStartXfer+0x150>
 800fa98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa9a:	2b3d      	cmp	r3, #61	; 0x3d
 800fa9c:	d811      	bhi.n	800fac2 <USB_EPStartXfer+0x10a>
 800fa9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa0:	085b      	lsrs	r3, r3, #1
 800faa2:	647b      	str	r3, [r7, #68]	; 0x44
 800faa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa6:	f003 0301 	and.w	r3, r3, #1
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <USB_EPStartXfer+0xfc>
 800faae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fab0:	3301      	adds	r3, #1
 800fab2:	647b      	str	r3, [r7, #68]	; 0x44
 800fab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	029b      	lsls	r3, r3, #10
 800faba:	b29a      	uxth	r2, r3
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	801a      	strh	r2, [r3, #0]
 800fac0:	e022      	b.n	800fb08 <USB_EPStartXfer+0x150>
 800fac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac4:	095b      	lsrs	r3, r3, #5
 800fac6:	647b      	str	r3, [r7, #68]	; 0x44
 800fac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faca:	b29b      	uxth	r3, r3
 800facc:	029b      	lsls	r3, r3, #10
 800face:	b29b      	uxth	r3, r3
 800fad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fad8:	b29a      	uxth	r2, r3
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	801a      	strh	r2, [r3, #0]
 800fade:	e013      	b.n	800fb08 <USB_EPStartXfer+0x150>
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	785b      	ldrb	r3, [r3, #1]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d10f      	bne.n	800fb08 <USB_EPStartXfer+0x150>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800faee:	b29b      	uxth	r3, r3
 800faf0:	441c      	add	r4, r3
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	4423      	add	r3, r4
 800fafa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fafe:	617b      	str	r3, [r7, #20]
 800fb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	895b      	ldrh	r3, [r3, #10]
 800fb0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800fb10:	e061      	b.n	800fbd6 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	785b      	ldrb	r3, [r3, #1]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d144      	bne.n	800fba4 <USB_EPStartXfer+0x1ec>
 800fb1a:	687c      	ldr	r4, [r7, #4]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	441c      	add	r4, r3
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	00db      	lsls	r3, r3, #3
 800fb2c:	4423      	add	r3, r4
 800fb2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fb32:	61bb      	str	r3, [r7, #24]
 800fb34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d110      	bne.n	800fb5c <USB_EPStartXfer+0x1a4>
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	881b      	ldrh	r3, [r3, #0]
 800fb3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	801a      	strh	r2, [r3, #0]
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	881b      	ldrh	r3, [r3, #0]
 800fb4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	801a      	strh	r2, [r3, #0]
 800fb5a:	e038      	b.n	800fbce <USB_EPStartXfer+0x216>
 800fb5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb5e:	2b3d      	cmp	r3, #61	; 0x3d
 800fb60:	d811      	bhi.n	800fb86 <USB_EPStartXfer+0x1ce>
 800fb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb64:	085b      	lsrs	r3, r3, #1
 800fb66:	643b      	str	r3, [r7, #64]	; 0x40
 800fb68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb6a:	f003 0301 	and.w	r3, r3, #1
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d002      	beq.n	800fb78 <USB_EPStartXfer+0x1c0>
 800fb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb74:	3301      	adds	r3, #1
 800fb76:	643b      	str	r3, [r7, #64]	; 0x40
 800fb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	029b      	lsls	r3, r3, #10
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	801a      	strh	r2, [r3, #0]
 800fb84:	e023      	b.n	800fbce <USB_EPStartXfer+0x216>
 800fb86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb88:	095b      	lsrs	r3, r3, #5
 800fb8a:	643b      	str	r3, [r7, #64]	; 0x40
 800fb8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	029b      	lsls	r3, r3, #10
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	801a      	strh	r2, [r3, #0]
 800fba2:	e014      	b.n	800fbce <USB_EPStartXfer+0x216>
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	785b      	ldrb	r3, [r3, #1]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d110      	bne.n	800fbce <USB_EPStartXfer+0x216>
 800fbac:	687c      	ldr	r4, [r7, #4]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	441c      	add	r4, r3
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	00db      	lsls	r3, r3, #3
 800fbbe:	4423      	add	r3, r4
 800fbc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fbc4:	61fb      	str	r3, [r7, #28]
 800fbc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	891b      	ldrh	r3, [r3, #8]
 800fbd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	6959      	ldr	r1, [r3, #20]
 800fbda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 fac8 	bl	8010178 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	785b      	ldrb	r3, [r3, #1]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d115      	bne.n	800fc1c <USB_EPStartXfer+0x264>
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	4413      	add	r3, r2
 800fbfa:	881b      	ldrh	r3, [r3, #0]
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc06:	b29c      	uxth	r4, r3
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	441a      	add	r2, r3
 800fc12:	4b99      	ldr	r3, [pc, #612]	; (800fe78 <USB_EPStartXfer+0x4c0>)
 800fc14:	4323      	orrs	r3, r4
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	8013      	strh	r3, [r2, #0]
 800fc1a:	e018      	b.n	800fc4e <USB_EPStartXfer+0x296>
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	785b      	ldrb	r3, [r3, #1]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d114      	bne.n	800fc4e <USB_EPStartXfer+0x296>
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	881b      	ldrh	r3, [r3, #0]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc3a:	b29c      	uxth	r4, r3
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	441a      	add	r2, r3
 800fc46:	4b8d      	ldr	r3, [pc, #564]	; (800fe7c <USB_EPStartXfer+0x4c4>)
 800fc48:	4323      	orrs	r3, r4
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	4413      	add	r3, r2
 800fc58:	881b      	ldrh	r3, [r3, #0]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc64:	b29c      	uxth	r4, r3
 800fc66:	f084 0310 	eor.w	r3, r4, #16
 800fc6a:	b29c      	uxth	r4, r3
 800fc6c:	f084 0320 	eor.w	r3, r4, #32
 800fc70:	b29c      	uxth	r4, r3
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	441a      	add	r2, r3
 800fc7c:	4b80      	ldr	r3, [pc, #512]	; (800fe80 <USB_EPStartXfer+0x4c8>)
 800fc7e:	4323      	orrs	r3, r4
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	8013      	strh	r3, [r2, #0]
 800fc84:	e13c      	b.n	800ff00 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	699a      	ldr	r2, [r3, #24]
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d909      	bls.n	800fca6 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	699a      	ldr	r2, [r3, #24]
 800fc9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc9e:	1ad2      	subs	r2, r2, r3
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	619a      	str	r2, [r3, #24]
 800fca4:	e005      	b.n	800fcb2 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	699b      	ldr	r3, [r3, #24]
 800fcaa:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	7b1b      	ldrb	r3, [r3, #12]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d144      	bne.n	800fd44 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fcba:	687c      	ldr	r4, [r7, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	441c      	add	r4, r3
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	00db      	lsls	r3, r3, #3
 800fccc:	4423      	add	r3, r4
 800fcce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fcd2:	623b      	str	r3, [r7, #32]
 800fcd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d110      	bne.n	800fcfc <USB_EPStartXfer+0x344>
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	6a3b      	ldr	r3, [r7, #32]
 800fce6:	801a      	strh	r2, [r3, #0]
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	881b      	ldrh	r3, [r3, #0]
 800fcec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fcf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcf4:	b29a      	uxth	r2, r3
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	801a      	strh	r2, [r3, #0]
 800fcfa:	e0e6      	b.n	800feca <USB_EPStartXfer+0x512>
 800fcfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcfe:	2b3d      	cmp	r3, #61	; 0x3d
 800fd00:	d811      	bhi.n	800fd26 <USB_EPStartXfer+0x36e>
 800fd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd04:	085b      	lsrs	r3, r3, #1
 800fd06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd0a:	f003 0301 	and.w	r3, r3, #1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d002      	beq.n	800fd18 <USB_EPStartXfer+0x360>
 800fd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd14:	3301      	adds	r3, #1
 800fd16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	029b      	lsls	r3, r3, #10
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	6a3b      	ldr	r3, [r7, #32]
 800fd22:	801a      	strh	r2, [r3, #0]
 800fd24:	e0d1      	b.n	800feca <USB_EPStartXfer+0x512>
 800fd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd28:	095b      	lsrs	r3, r3, #5
 800fd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	029b      	lsls	r3, r3, #10
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd3c:	b29a      	uxth	r2, r3
 800fd3e:	6a3b      	ldr	r3, [r7, #32]
 800fd40:	801a      	strh	r2, [r3, #0]
 800fd42:	e0c2      	b.n	800feca <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	785b      	ldrb	r3, [r3, #1]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d144      	bne.n	800fdd6 <USB_EPStartXfer+0x41e>
 800fd4c:	687c      	ldr	r4, [r7, #4]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	441c      	add	r4, r3
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	00db      	lsls	r3, r3, #3
 800fd5e:	4423      	add	r3, r4
 800fd60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fd64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d110      	bne.n	800fd8e <USB_EPStartXfer+0x3d6>
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd78:	801a      	strh	r2, [r3, #0]
 800fd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8a:	801a      	strh	r2, [r3, #0]
 800fd8c:	e038      	b.n	800fe00 <USB_EPStartXfer+0x448>
 800fd8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd90:	2b3d      	cmp	r3, #61	; 0x3d
 800fd92:	d811      	bhi.n	800fdb8 <USB_EPStartXfer+0x400>
 800fd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd96:	085b      	lsrs	r3, r3, #1
 800fd98:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <USB_EPStartXfer+0x3f2>
 800fda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda6:	3301      	adds	r3, #1
 800fda8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	029b      	lsls	r3, r3, #10
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb4:	801a      	strh	r2, [r3, #0]
 800fdb6:	e023      	b.n	800fe00 <USB_EPStartXfer+0x448>
 800fdb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdba:	095b      	lsrs	r3, r3, #5
 800fdbc:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	029b      	lsls	r3, r3, #10
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	801a      	strh	r2, [r3, #0]
 800fdd4:	e014      	b.n	800fe00 <USB_EPStartXfer+0x448>
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	785b      	ldrb	r3, [r3, #1]
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d110      	bne.n	800fe00 <USB_EPStartXfer+0x448>
 800fdde:	687c      	ldr	r4, [r7, #4]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	441c      	add	r4, r3
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	00db      	lsls	r3, r3, #3
 800fdf0:	4423      	add	r3, r4
 800fdf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fdf6:	633b      	str	r3, [r7, #48]	; 0x30
 800fdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfe:	801a      	strh	r2, [r3, #0]
 800fe00:	687c      	ldr	r4, [r7, #4]
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	785b      	ldrb	r3, [r3, #1]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d14b      	bne.n	800fea2 <USB_EPStartXfer+0x4ea>
 800fe0a:	687c      	ldr	r4, [r7, #4]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	441c      	add	r4, r3
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	00db      	lsls	r3, r3, #3
 800fe1c:	4423      	add	r3, r4
 800fe1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fe22:	627b      	str	r3, [r7, #36]	; 0x24
 800fe24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d110      	bne.n	800fe4c <USB_EPStartXfer+0x494>
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2c:	881b      	ldrh	r3, [r3, #0]
 800fe2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe36:	801a      	strh	r2, [r3, #0]
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	881b      	ldrh	r3, [r3, #0]
 800fe3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe48:	801a      	strh	r2, [r3, #0]
 800fe4a:	e03e      	b.n	800feca <USB_EPStartXfer+0x512>
 800fe4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe4e:	2b3d      	cmp	r3, #61	; 0x3d
 800fe50:	d818      	bhi.n	800fe84 <USB_EPStartXfer+0x4cc>
 800fe52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe54:	085b      	lsrs	r3, r3, #1
 800fe56:	637b      	str	r3, [r7, #52]	; 0x34
 800fe58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d002      	beq.n	800fe68 <USB_EPStartXfer+0x4b0>
 800fe62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe64:	3301      	adds	r3, #1
 800fe66:	637b      	str	r3, [r7, #52]	; 0x34
 800fe68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	029b      	lsls	r3, r3, #10
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	801a      	strh	r2, [r3, #0]
 800fe74:	e029      	b.n	800feca <USB_EPStartXfer+0x512>
 800fe76:	bf00      	nop
 800fe78:	ffff80c0 	.word	0xffff80c0
 800fe7c:	ffffc080 	.word	0xffffc080
 800fe80:	ffff8080 	.word	0xffff8080
 800fe84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe86:	095b      	lsrs	r3, r3, #5
 800fe88:	637b      	str	r3, [r7, #52]	; 0x34
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	029b      	lsls	r3, r3, #10
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9e:	801a      	strh	r2, [r3, #0]
 800fea0:	e013      	b.n	800feca <USB_EPStartXfer+0x512>
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	785b      	ldrb	r3, [r3, #1]
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d10f      	bne.n	800feca <USB_EPStartXfer+0x512>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	441c      	add	r4, r3
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	4423      	add	r3, r4
 800febc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fec0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec8:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	4413      	add	r3, r2
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fedc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fee0:	b29c      	uxth	r4, r3
 800fee2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800fee6:	b29c      	uxth	r4, r3
 800fee8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800feec:	b29c      	uxth	r4, r3
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	441a      	add	r2, r3
 800fef8:	4b04      	ldr	r3, [pc, #16]	; (800ff0c <USB_EPStartXfer+0x554>)
 800fefa:	4323      	orrs	r3, r4
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ff00:	2300      	movs	r3, #0
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3754      	adds	r7, #84	; 0x54
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd90      	pop	{r4, r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	ffff8080 	.word	0xffff8080

0800ff10 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff10:	b490      	push	{r4, r7}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	785b      	ldrb	r3, [r3, #1]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d018      	beq.n	800ff54 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	4413      	add	r3, r2
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff38:	b29c      	uxth	r4, r3
 800ff3a:	f084 0310 	eor.w	r3, r4, #16
 800ff3e:	b29c      	uxth	r4, r3
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	441a      	add	r2, r3
 800ff4a:	4b11      	ldr	r3, [pc, #68]	; (800ff90 <USB_EPSetStall+0x80>)
 800ff4c:	4323      	orrs	r3, r4
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	8013      	strh	r3, [r2, #0]
 800ff52:	e017      	b.n	800ff84 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	4413      	add	r3, r2
 800ff5e:	881b      	ldrh	r3, [r3, #0]
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff6a:	b29c      	uxth	r4, r3
 800ff6c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ff70:	b29c      	uxth	r4, r3
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	441a      	add	r2, r3
 800ff7c:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <USB_EPSetStall+0x80>)
 800ff7e:	4323      	orrs	r3, r4
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ff84:	2300      	movs	r3, #0
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bc90      	pop	{r4, r7}
 800ff8e:	4770      	bx	lr
 800ff90:	ffff8080 	.word	0xffff8080

0800ff94 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff94:	b490      	push	{r4, r7}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	7b1b      	ldrb	r3, [r3, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d17d      	bne.n	80100a2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	785b      	ldrb	r3, [r3, #1]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d03d      	beq.n	801002a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b29c      	uxth	r4, r3
 800ffbc:	4623      	mov	r3, r4
 800ffbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d014      	beq.n	800fff0 <USB_EPClearStall+0x5c>
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffdc:	b29c      	uxth	r4, r3
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	441a      	add	r2, r3
 800ffe8:	4b31      	ldr	r3, [pc, #196]	; (80100b0 <USB_EPClearStall+0x11c>)
 800ffea:	4323      	orrs	r3, r4
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	78db      	ldrb	r3, [r3, #3]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d054      	beq.n	80100a2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	4413      	add	r3, r2
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	b29b      	uxth	r3, r3
 8010006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801000a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801000e:	b29c      	uxth	r4, r3
 8010010:	f084 0320 	eor.w	r3, r4, #32
 8010014:	b29c      	uxth	r4, r3
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	441a      	add	r2, r3
 8010020:	4b24      	ldr	r3, [pc, #144]	; (80100b4 <USB_EPClearStall+0x120>)
 8010022:	4323      	orrs	r3, r4
 8010024:	b29b      	uxth	r3, r3
 8010026:	8013      	strh	r3, [r2, #0]
 8010028:	e03b      	b.n	80100a2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	4413      	add	r3, r2
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	b29c      	uxth	r4, r3
 8010038:	4623      	mov	r3, r4
 801003a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801003e:	2b00      	cmp	r3, #0
 8010040:	d014      	beq.n	801006c <USB_EPClearStall+0xd8>
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	4413      	add	r3, r2
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	b29b      	uxth	r3, r3
 8010050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010058:	b29c      	uxth	r4, r3
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	441a      	add	r2, r3
 8010064:	4b14      	ldr	r3, [pc, #80]	; (80100b8 <USB_EPClearStall+0x124>)
 8010066:	4323      	orrs	r3, r4
 8010068:	b29b      	uxth	r3, r3
 801006a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	4413      	add	r3, r2
 8010076:	881b      	ldrh	r3, [r3, #0]
 8010078:	b29b      	uxth	r3, r3
 801007a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801007e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010082:	b29c      	uxth	r4, r3
 8010084:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8010088:	b29c      	uxth	r4, r3
 801008a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 801008e:	b29c      	uxth	r4, r3
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	441a      	add	r2, r3
 801009a:	4b06      	ldr	r3, [pc, #24]	; (80100b4 <USB_EPClearStall+0x120>)
 801009c:	4323      	orrs	r3, r4
 801009e:	b29b      	uxth	r3, r3
 80100a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80100a2:	2300      	movs	r3, #0
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3708      	adds	r7, #8
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bc90      	pop	{r4, r7}
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	ffff80c0 	.word	0xffff80c0
 80100b4:	ffff8080 	.word	0xffff8080
 80100b8:	ffffc080 	.word	0xffffc080

080100bc <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2201      	movs	r2, #1
 80100c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2203      	movs	r2, #3
 80100d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80100dc:	2300      	movs	r3, #0
}
 80100de:	4618      	mov	r0, r3
 80100e0:	370c      	adds	r7, #12
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b083      	sub	sp, #12
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
 80100f2:	460b      	mov	r3, r1
 80100f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80100f6:	78fb      	ldrb	r3, [r7, #3]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d103      	bne.n	8010104 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2280      	movs	r2, #128	; 0x80
 8010100:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010112:	b480      	push	{r7}
 8010114:	b083      	sub	sp, #12
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010120:	b29b      	uxth	r3, r3
 8010122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010140:	b480      	push	{r7}
 8010142:	b085      	sub	sp, #20
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801014e:	b29b      	uxth	r3, r3
 8010150:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010152:	68fb      	ldr	r3, [r7, #12]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3714      	adds	r7, #20
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801016a:	2300      	movs	r3, #0
}
 801016c:	4618      	mov	r0, r3
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010178:	b480      	push	{r7}
 801017a:	b08d      	sub	sp, #52	; 0x34
 801017c:	af00      	add	r7, sp, #0
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	4611      	mov	r1, r2
 8010184:	461a      	mov	r2, r3
 8010186:	460b      	mov	r3, r1
 8010188:	80fb      	strh	r3, [r7, #6]
 801018a:	4613      	mov	r3, r2
 801018c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801018e:	88bb      	ldrh	r3, [r7, #4]
 8010190:	3301      	adds	r3, #1
 8010192:	085b      	lsrs	r3, r3, #1
 8010194:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801019e:	88fa      	ldrh	r2, [r7, #6]
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	4413      	add	r3, r2
 80101a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101a8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101ae:	e01b      	b.n	80101e8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80101b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b8:	3301      	adds	r3, #1
 80101ba:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	461a      	mov	r2, r3
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80101d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d8:	3302      	adds	r3, #2
 80101da:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	3301      	adds	r3, #1
 80101e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80101e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e4:	3b01      	subs	r3, #1
 80101e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1e0      	bne.n	80101b0 <USB_WritePMA+0x38>
  }
}
 80101ee:	bf00      	nop
 80101f0:	3734      	adds	r7, #52	; 0x34
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr

080101fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80101fa:	b480      	push	{r7}
 80101fc:	b08b      	sub	sp, #44	; 0x2c
 80101fe:	af00      	add	r7, sp, #0
 8010200:	60f8      	str	r0, [r7, #12]
 8010202:	60b9      	str	r1, [r7, #8]
 8010204:	4611      	mov	r1, r2
 8010206:	461a      	mov	r2, r3
 8010208:	460b      	mov	r3, r1
 801020a:	80fb      	strh	r3, [r7, #6]
 801020c:	4613      	mov	r3, r2
 801020e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010210:	88bb      	ldrh	r3, [r7, #4]
 8010212:	085b      	lsrs	r3, r3, #1
 8010214:	b29b      	uxth	r3, r3
 8010216:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010220:	88fa      	ldrh	r2, [r7, #6]
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	4413      	add	r3, r2
 8010226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801022a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	627b      	str	r3, [r7, #36]	; 0x24
 8010230:	e018      	b.n	8010264 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8010232:	6a3b      	ldr	r3, [r7, #32]
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	b29b      	uxth	r3, r3
 8010238:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	3302      	adds	r3, #2
 801023e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	b2da      	uxtb	r2, r3
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	3301      	adds	r3, #1
 801024c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	0a1b      	lsrs	r3, r3, #8
 8010252:	b2da      	uxtb	r2, r3
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	3301      	adds	r3, #1
 801025c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	3b01      	subs	r3, #1
 8010262:	627b      	str	r3, [r7, #36]	; 0x24
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1e3      	bne.n	8010232 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 801026a:	88bb      	ldrh	r3, [r7, #4]
 801026c:	f003 0301 	and.w	r3, r3, #1
 8010270:	b29b      	uxth	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	d007      	beq.n	8010286 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8010276:	6a3b      	ldr	r3, [r7, #32]
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	b29b      	uxth	r3, r3
 801027c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	b2da      	uxtb	r2, r3
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	701a      	strb	r2, [r3, #0]
  }
}
 8010286:	bf00      	nop
 8010288:	372c      	adds	r7, #44	; 0x2c
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
	...

08010294 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801029a:	f3ef 8305 	mrs	r3, IPSR
 801029e:	60bb      	str	r3, [r7, #8]
  return(result);
 80102a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10f      	bne.n	80102c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102a6:	f3ef 8310 	mrs	r3, PRIMASK
 80102aa:	607b      	str	r3, [r7, #4]
  return(result);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d109      	bne.n	80102c6 <osKernelInitialize+0x32>
 80102b2:	4b11      	ldr	r3, [pc, #68]	; (80102f8 <osKernelInitialize+0x64>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b02      	cmp	r3, #2
 80102b8:	d109      	bne.n	80102ce <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102ba:	f3ef 8311 	mrs	r3, BASEPRI
 80102be:	603b      	str	r3, [r7, #0]
  return(result);
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d003      	beq.n	80102ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80102c6:	f06f 0305 	mvn.w	r3, #5
 80102ca:	60fb      	str	r3, [r7, #12]
 80102cc:	e00c      	b.n	80102e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80102ce:	4b0a      	ldr	r3, [pc, #40]	; (80102f8 <osKernelInitialize+0x64>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d105      	bne.n	80102e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80102d6:	4b08      	ldr	r3, [pc, #32]	; (80102f8 <osKernelInitialize+0x64>)
 80102d8:	2201      	movs	r2, #1
 80102da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80102dc:	2300      	movs	r3, #0
 80102de:	60fb      	str	r3, [r7, #12]
 80102e0:	e002      	b.n	80102e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80102e2:	f04f 33ff 	mov.w	r3, #4294967295
 80102e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80102e8:	68fb      	ldr	r3, [r7, #12]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	20000ca0 	.word	0x20000ca0

080102fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010302:	f3ef 8305 	mrs	r3, IPSR
 8010306:	60bb      	str	r3, [r7, #8]
  return(result);
 8010308:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10f      	bne.n	801032e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801030e:	f3ef 8310 	mrs	r3, PRIMASK
 8010312:	607b      	str	r3, [r7, #4]
  return(result);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d109      	bne.n	801032e <osKernelStart+0x32>
 801031a:	4b11      	ldr	r3, [pc, #68]	; (8010360 <osKernelStart+0x64>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b02      	cmp	r3, #2
 8010320:	d109      	bne.n	8010336 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010322:	f3ef 8311 	mrs	r3, BASEPRI
 8010326:	603b      	str	r3, [r7, #0]
  return(result);
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d003      	beq.n	8010336 <osKernelStart+0x3a>
    stat = osErrorISR;
 801032e:	f06f 0305 	mvn.w	r3, #5
 8010332:	60fb      	str	r3, [r7, #12]
 8010334:	e00e      	b.n	8010354 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8010336:	4b0a      	ldr	r3, [pc, #40]	; (8010360 <osKernelStart+0x64>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b01      	cmp	r3, #1
 801033c:	d107      	bne.n	801034e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 801033e:	4b08      	ldr	r3, [pc, #32]	; (8010360 <osKernelStart+0x64>)
 8010340:	2202      	movs	r2, #2
 8010342:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8010344:	f002 fee6 	bl	8013114 <vTaskStartScheduler>
      stat = osOK;
 8010348:	2300      	movs	r3, #0
 801034a:	60fb      	str	r3, [r7, #12]
 801034c:	e002      	b.n	8010354 <osKernelStart+0x58>
    } else {
      stat = osError;
 801034e:	f04f 33ff 	mov.w	r3, #4294967295
 8010352:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010354:	68fb      	ldr	r3, [r7, #12]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	20000ca0 	.word	0x20000ca0

08010364 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010364:	b580      	push	{r7, lr}
 8010366:	b092      	sub	sp, #72	; 0x48
 8010368:	af04      	add	r7, sp, #16
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010370:	2300      	movs	r3, #0
 8010372:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010374:	f3ef 8305 	mrs	r3, IPSR
 8010378:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 801037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 801037c:	2b00      	cmp	r3, #0
 801037e:	f040 8095 	bne.w	80104ac <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010382:	f3ef 8310 	mrs	r3, PRIMASK
 8010386:	623b      	str	r3, [r7, #32]
  return(result);
 8010388:	6a3b      	ldr	r3, [r7, #32]
 801038a:	2b00      	cmp	r3, #0
 801038c:	f040 808e 	bne.w	80104ac <osThreadNew+0x148>
 8010390:	4b49      	ldr	r3, [pc, #292]	; (80104b8 <osThreadNew+0x154>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b02      	cmp	r3, #2
 8010396:	d106      	bne.n	80103a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010398:	f3ef 8311 	mrs	r3, BASEPRI
 801039c:	61fb      	str	r3, [r7, #28]
  return(result);
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f040 8083 	bne.w	80104ac <osThreadNew+0x148>
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d07f      	beq.n	80104ac <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 80103ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103b0:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80103b2:	2318      	movs	r3, #24
 80103b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80103b6:	2300      	movs	r3, #0
 80103b8:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80103ba:	f107 031b 	add.w	r3, r7, #27
 80103be:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80103c0:	f04f 33ff 	mov.w	r3, #4294967295
 80103c4:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d045      	beq.n	8010458 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d002      	beq.n	80103da <osThreadNew+0x76>
        name = attr->name;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	699b      	ldr	r3, [r3, #24]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d002      	beq.n	80103e8 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	699b      	ldr	r3, [r3, #24]
 80103e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80103e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d008      	beq.n	8010400 <osThreadNew+0x9c>
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	2b38      	cmp	r3, #56	; 0x38
 80103f2:	d805      	bhi.n	8010400 <osThreadNew+0x9c>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	f003 0301 	and.w	r3, r3, #1
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <osThreadNew+0xa0>
        return (NULL);
 8010400:	2300      	movs	r3, #0
 8010402:	e054      	b.n	80104ae <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	695b      	ldr	r3, [r3, #20]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	695b      	ldr	r3, [r3, #20]
 8010410:	089b      	lsrs	r3, r3, #2
 8010412:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00e      	beq.n	801043a <osThreadNew+0xd6>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	2b63      	cmp	r3, #99	; 0x63
 8010422:	d90a      	bls.n	801043a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010428:	2b00      	cmp	r3, #0
 801042a:	d006      	beq.n	801043a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	695b      	ldr	r3, [r3, #20]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d002      	beq.n	801043a <osThreadNew+0xd6>
        mem = 1;
 8010434:	2301      	movs	r3, #1
 8010436:	62bb      	str	r3, [r7, #40]	; 0x28
 8010438:	e010      	b.n	801045c <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d10c      	bne.n	801045c <osThreadNew+0xf8>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d108      	bne.n	801045c <osThreadNew+0xf8>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d104      	bne.n	801045c <osThreadNew+0xf8>
          mem = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	62bb      	str	r3, [r7, #40]	; 0x28
 8010456:	e001      	b.n	801045c <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8010458:	2300      	movs	r3, #0
 801045a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 801045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045e:	2b01      	cmp	r3, #1
 8010460:	d110      	bne.n	8010484 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801046a:	9202      	str	r2, [sp, #8]
 801046c:	9301      	str	r3, [sp, #4]
 801046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010476:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	f002 fc7d 	bl	8012d78 <xTaskCreateStatic>
 801047e:	4603      	mov	r3, r0
 8010480:	617b      	str	r3, [r7, #20]
 8010482:	e013      	b.n	80104ac <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8010484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010486:	2b00      	cmp	r3, #0
 8010488:	d110      	bne.n	80104ac <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048c:	b29a      	uxth	r2, r3
 801048e:	f107 0314 	add.w	r3, r7, #20
 8010492:	9301      	str	r3, [sp, #4]
 8010494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f002 fcc4 	bl	8012e2a <xTaskCreate>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d001      	beq.n	80104ac <osThreadNew+0x148>
          hTask = NULL;
 80104a8:	2300      	movs	r3, #0
 80104aa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80104ac:	697b      	ldr	r3, [r7, #20]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3738      	adds	r7, #56	; 0x38
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20000ca0 	.word	0x20000ca0

080104bc <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08a      	sub	sp, #40	; 0x28
 80104c0:	af02      	add	r7, sp, #8
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <osThreadFlagsSet+0x1a>
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	da03      	bge.n	80104de <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80104d6:	f06f 0303 	mvn.w	r3, #3
 80104da:	60fb      	str	r3, [r7, #12]
 80104dc:	e046      	b.n	801056c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80104de:	f04f 33ff 	mov.w	r3, #4294967295
 80104e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104e4:	f3ef 8305 	mrs	r3, IPSR
 80104e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80104ea:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d10f      	bne.n	8010510 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104f0:	f3ef 8310 	mrs	r3, PRIMASK
 80104f4:	617b      	str	r3, [r7, #20]
  return(result);
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d109      	bne.n	8010510 <osThreadFlagsSet+0x54>
 80104fc:	4b1e      	ldr	r3, [pc, #120]	; (8010578 <osThreadFlagsSet+0xbc>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d126      	bne.n	8010552 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010504:	f3ef 8311 	mrs	r3, BASEPRI
 8010508:	613b      	str	r3, [r7, #16]
  return(result);
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d020      	beq.n	8010552 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8010510:	2300      	movs	r3, #0
 8010512:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8010514:	f107 0308 	add.w	r3, r7, #8
 8010518:	9300      	str	r3, [sp, #0]
 801051a:	2300      	movs	r3, #0
 801051c:	2201      	movs	r2, #1
 801051e:	6839      	ldr	r1, [r7, #0]
 8010520:	69f8      	ldr	r0, [r7, #28]
 8010522:	f003 fdc1 	bl	80140a8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8010526:	f107 020c 	add.w	r2, r7, #12
 801052a:	2300      	movs	r3, #0
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	4613      	mov	r3, r2
 8010530:	2200      	movs	r2, #0
 8010532:	2100      	movs	r1, #0
 8010534:	69f8      	ldr	r0, [r7, #28]
 8010536:	f003 fdb7 	bl	80140a8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d015      	beq.n	801056c <osThreadFlagsSet+0xb0>
 8010540:	4b0e      	ldr	r3, [pc, #56]	; (801057c <osThreadFlagsSet+0xc0>)
 8010542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	f3bf 8f6f 	isb	sy
 8010550:	e00c      	b.n	801056c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8010552:	2300      	movs	r3, #0
 8010554:	2201      	movs	r2, #1
 8010556:	6839      	ldr	r1, [r7, #0]
 8010558:	69f8      	ldr	r0, [r7, #28]
 801055a:	f003 fd01 	bl	8013f60 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801055e:	f107 030c 	add.w	r3, r7, #12
 8010562:	2200      	movs	r2, #0
 8010564:	2100      	movs	r1, #0
 8010566:	69f8      	ldr	r0, [r7, #28]
 8010568:	f003 fcfa 	bl	8013f60 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801056c:	68fb      	ldr	r3, [r7, #12]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3720      	adds	r7, #32
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	20000ca0 	.word	0x20000ca0
 801057c:	e000ed04 	.word	0xe000ed04

08010580 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010588:	f3ef 8305 	mrs	r3, IPSR
 801058c:	617b      	str	r3, [r7, #20]
  return(result);
 801058e:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8010590:	2b00      	cmp	r3, #0
 8010592:	d10f      	bne.n	80105b4 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010594:	f3ef 8310 	mrs	r3, PRIMASK
 8010598:	613b      	str	r3, [r7, #16]
  return(result);
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d109      	bne.n	80105b4 <osThreadFlagsClear+0x34>
 80105a0:	4b1e      	ldr	r3, [pc, #120]	; (801061c <osThreadFlagsClear+0x9c>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b02      	cmp	r3, #2
 80105a6:	d109      	bne.n	80105bc <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105a8:	f3ef 8311 	mrs	r3, BASEPRI
 80105ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d003      	beq.n	80105bc <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 80105b4:	f06f 0305 	mvn.w	r3, #5
 80105b8:	61fb      	str	r3, [r7, #28]
 80105ba:	e02a      	b.n	8010612 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	da03      	bge.n	80105ca <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 80105c2:	f06f 0303 	mvn.w	r3, #3
 80105c6:	61fb      	str	r3, [r7, #28]
 80105c8:	e023      	b.n	8010612 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80105ca:	f003 facf 	bl	8013b6c <xTaskGetCurrentTaskHandle>
 80105ce:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80105d0:	f107 0308 	add.w	r3, r7, #8
 80105d4:	2200      	movs	r2, #0
 80105d6:	2100      	movs	r1, #0
 80105d8:	69b8      	ldr	r0, [r7, #24]
 80105da:	f003 fcc1 	bl	8013f60 <xTaskGenericNotify>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b01      	cmp	r3, #1
 80105e2:	d113      	bne.n	801060c <osThreadFlagsClear+0x8c>
      rflags = cflags;
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	43da      	mvns	r2, r3
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	4013      	ands	r3, r2
 80105f0:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80105f2:	68b9      	ldr	r1, [r7, #8]
 80105f4:	2300      	movs	r3, #0
 80105f6:	2203      	movs	r2, #3
 80105f8:	69b8      	ldr	r0, [r7, #24]
 80105fa:	f003 fcb1 	bl	8013f60 <xTaskGenericNotify>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b01      	cmp	r3, #1
 8010602:	d006      	beq.n	8010612 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 8010604:	f04f 33ff 	mov.w	r3, #4294967295
 8010608:	61fb      	str	r3, [r7, #28]
 801060a:	e002      	b.n	8010612 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 801060c:	f04f 33ff 	mov.w	r3, #4294967295
 8010610:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8010612:	69fb      	ldr	r3, [r7, #28]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3720      	adds	r7, #32
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	20000ca0 	.word	0x20000ca0

08010620 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8010620:	b580      	push	{r7, lr}
 8010622:	b08e      	sub	sp, #56	; 0x38
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801062c:	f3ef 8305 	mrs	r3, IPSR
 8010630:	61fb      	str	r3, [r7, #28]
  return(result);
 8010632:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10f      	bne.n	8010658 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010638:	f3ef 8310 	mrs	r3, PRIMASK
 801063c:	61bb      	str	r3, [r7, #24]
  return(result);
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d109      	bne.n	8010658 <osThreadFlagsWait+0x38>
 8010644:	4b3f      	ldr	r3, [pc, #252]	; (8010744 <osThreadFlagsWait+0x124>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b02      	cmp	r3, #2
 801064a:	d109      	bne.n	8010660 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801064c:	f3ef 8311 	mrs	r3, BASEPRI
 8010650:	617b      	str	r3, [r7, #20]
  return(result);
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d003      	beq.n	8010660 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8010658:	f06f 0305 	mvn.w	r3, #5
 801065c:	637b      	str	r3, [r7, #52]	; 0x34
 801065e:	e06b      	b.n	8010738 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	da03      	bge.n	801066e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8010666:	f06f 0303 	mvn.w	r3, #3
 801066a:	637b      	str	r3, [r7, #52]	; 0x34
 801066c:	e064      	b.n	8010738 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	f003 0302 	and.w	r3, r3, #2
 8010674:	2b00      	cmp	r3, #0
 8010676:	d002      	beq.n	801067e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8010678:	2300      	movs	r3, #0
 801067a:	633b      	str	r3, [r7, #48]	; 0x30
 801067c:	e001      	b.n	8010682 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8010682:	2300      	movs	r3, #0
 8010684:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 801068a:	f002 fe8b 	bl	80133a4 <xTaskGetTickCount>
 801068e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8010690:	f107 0210 	add.w	r2, r7, #16
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010698:	2000      	movs	r0, #0
 801069a:	f003 fc07 	bl	8013eac <xTaskNotifyWait>
 801069e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80106a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d137      	bne.n	8010716 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80106a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	4013      	ands	r3, r2
 80106ac:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106b2:	4313      	orrs	r3, r2
 80106b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	f003 0301 	and.w	r3, r3, #1
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00c      	beq.n	80106da <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c4:	4013      	ands	r3, r2
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d032      	beq.n	8010732 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10f      	bne.n	80106f2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80106d2:	f06f 0302 	mvn.w	r3, #2
 80106d6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80106d8:	e02e      	b.n	8010738 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106de:	4013      	ands	r3, r2
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d128      	bne.n	8010736 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d103      	bne.n	80106f2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80106ea:	f06f 0302 	mvn.w	r3, #2
 80106ee:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80106f0:	e022      	b.n	8010738 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80106f2:	f002 fe57 	bl	80133a4 <xTaskGetTickCount>
 80106f6:	4602      	mov	r2, r0
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	1ad3      	subs	r3, r2, r3
 80106fc:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80106fe:	6a3a      	ldr	r2, [r7, #32]
 8010700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010702:	429a      	cmp	r2, r3
 8010704:	d902      	bls.n	801070c <osThreadFlagsWait+0xec>
          tout  = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801070a:	e00e      	b.n	801072a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 801070c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801070e:	6a3b      	ldr	r3, [r7, #32]
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010714:	e009      	b.n	801072a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d103      	bne.n	8010724 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 801071c:	f06f 0302 	mvn.w	r3, #2
 8010720:	637b      	str	r3, [r7, #52]	; 0x34
 8010722:	e002      	b.n	801072a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8010724:	f06f 0301 	mvn.w	r3, #1
 8010728:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1af      	bne.n	8010690 <osThreadFlagsWait+0x70>
 8010730:	e002      	b.n	8010738 <osThreadFlagsWait+0x118>
            break;
 8010732:	bf00      	nop
 8010734:	e000      	b.n	8010738 <osThreadFlagsWait+0x118>
            break;
 8010736:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801073a:	4618      	mov	r0, r3
 801073c:	3738      	adds	r7, #56	; 0x38
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	20000ca0 	.word	0x20000ca0

08010748 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010750:	f3ef 8305 	mrs	r3, IPSR
 8010754:	613b      	str	r3, [r7, #16]
  return(result);
 8010756:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10f      	bne.n	801077c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801075c:	f3ef 8310 	mrs	r3, PRIMASK
 8010760:	60fb      	str	r3, [r7, #12]
  return(result);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d109      	bne.n	801077c <osDelay+0x34>
 8010768:	4b0d      	ldr	r3, [pc, #52]	; (80107a0 <osDelay+0x58>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d109      	bne.n	8010784 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010770:	f3ef 8311 	mrs	r3, BASEPRI
 8010774:	60bb      	str	r3, [r7, #8]
  return(result);
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d003      	beq.n	8010784 <osDelay+0x3c>
    stat = osErrorISR;
 801077c:	f06f 0305 	mvn.w	r3, #5
 8010780:	617b      	str	r3, [r7, #20]
 8010782:	e007      	b.n	8010794 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010784:	2300      	movs	r3, #0
 8010786:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d002      	beq.n	8010794 <osDelay+0x4c>
      vTaskDelay(ticks);
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f002 fc8c 	bl	80130ac <vTaskDelay>
    }
  }

  return (stat);
 8010794:	697b      	ldr	r3, [r7, #20]
}
 8010796:	4618      	mov	r0, r3
 8010798:	3718      	adds	r7, #24
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	20000ca0 	.word	0x20000ca0

080107a4 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f004 f953 	bl	8014a58 <pvTimerGetTimerID>
 80107b2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d005      	beq.n	80107c6 <TimerCallback+0x22>
    callb->func (callb->arg);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	6852      	ldr	r2, [r2, #4]
 80107c2:	4610      	mov	r0, r2
 80107c4:	4798      	blx	r3
  }
}
 80107c6:	bf00      	nop
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
	...

080107d0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b08e      	sub	sp, #56	; 0x38
 80107d4:	af02      	add	r7, sp, #8
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	607a      	str	r2, [r7, #4]
 80107da:	603b      	str	r3, [r7, #0]
 80107dc:	460b      	mov	r3, r1
 80107de:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80107e0:	2300      	movs	r3, #0
 80107e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107e4:	f3ef 8305 	mrs	r3, IPSR
 80107e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80107ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d16a      	bne.n	80108c6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107f0:	f3ef 8310 	mrs	r3, PRIMASK
 80107f4:	617b      	str	r3, [r7, #20]
  return(result);
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d164      	bne.n	80108c6 <osTimerNew+0xf6>
 80107fc:	4b34      	ldr	r3, [pc, #208]	; (80108d0 <osTimerNew+0x100>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	2b02      	cmp	r3, #2
 8010802:	d105      	bne.n	8010810 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010804:	f3ef 8311 	mrs	r3, BASEPRI
 8010808:	613b      	str	r3, [r7, #16]
  return(result);
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d15a      	bne.n	80108c6 <osTimerNew+0xf6>
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d057      	beq.n	80108c6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8010816:	2008      	movs	r0, #8
 8010818:	f000 fd60 	bl	80112dc <pvPortMalloc>
 801081c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d050      	beq.n	80108c6 <osTimerNew+0xf6>
      callb->func = func;
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	68fa      	ldr	r2, [r7, #12]
 8010828:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8010830:	7afb      	ldrb	r3, [r7, #11]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d102      	bne.n	801083c <osTimerNew+0x6c>
        reload = pdFALSE;
 8010836:	2300      	movs	r3, #0
 8010838:	627b      	str	r3, [r7, #36]	; 0x24
 801083a:	e001      	b.n	8010840 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 801083c:	2301      	movs	r3, #1
 801083e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8010840:	f04f 33ff 	mov.w	r3, #4294967295
 8010844:	623b      	str	r3, [r7, #32]
      name = NULL;
 8010846:	2300      	movs	r3, #0
 8010848:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d01c      	beq.n	801088a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d002      	beq.n	801085e <osTimerNew+0x8e>
          name = attr->name;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	689b      	ldr	r3, [r3, #8]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d006      	beq.n	8010874 <osTimerNew+0xa4>
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	2b2f      	cmp	r3, #47	; 0x2f
 801086c:	d902      	bls.n	8010874 <osTimerNew+0xa4>
          mem = 1;
 801086e:	2301      	movs	r3, #1
 8010870:	623b      	str	r3, [r7, #32]
 8010872:	e00c      	b.n	801088e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d108      	bne.n	801088e <osTimerNew+0xbe>
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d104      	bne.n	801088e <osTimerNew+0xbe>
            mem = 0;
 8010884:	2300      	movs	r3, #0
 8010886:	623b      	str	r3, [r7, #32]
 8010888:	e001      	b.n	801088e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 801088a:	2300      	movs	r3, #0
 801088c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	2b01      	cmp	r3, #1
 8010892:	d10c      	bne.n	80108ae <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	9301      	str	r3, [sp, #4]
 801089a:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <osTimerNew+0x104>)
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a2:	2101      	movs	r1, #1
 80108a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108a6:	f003 fd84 	bl	80143b2 <xTimerCreateStatic>
 80108aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80108ac:	e00b      	b.n	80108c6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80108ae:	6a3b      	ldr	r3, [r7, #32]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d108      	bne.n	80108c6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80108b4:	4b07      	ldr	r3, [pc, #28]	; (80108d4 <osTimerNew+0x104>)
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108bc:	2101      	movs	r1, #1
 80108be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108c0:	f003 fd56 	bl	8014370 <xTimerCreate>
 80108c4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3730      	adds	r7, #48	; 0x30
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	20000ca0 	.word	0x20000ca0
 80108d4:	080107a5 	.word	0x080107a5

080108d8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80108d8:	b580      	push	{r7, lr}
 80108da:	b08a      	sub	sp, #40	; 0x28
 80108dc:	af02      	add	r7, sp, #8
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108e6:	f3ef 8305 	mrs	r3, IPSR
 80108ea:	617b      	str	r3, [r7, #20]
  return(result);
 80108ec:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d10f      	bne.n	8010912 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108f2:	f3ef 8310 	mrs	r3, PRIMASK
 80108f6:	613b      	str	r3, [r7, #16]
  return(result);
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d109      	bne.n	8010912 <osTimerStart+0x3a>
 80108fe:	4b15      	ldr	r3, [pc, #84]	; (8010954 <osTimerStart+0x7c>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2b02      	cmp	r3, #2
 8010904:	d109      	bne.n	801091a <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010906:	f3ef 8311 	mrs	r3, BASEPRI
 801090a:	60fb      	str	r3, [r7, #12]
  return(result);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d003      	beq.n	801091a <osTimerStart+0x42>
    stat = osErrorISR;
 8010912:	f06f 0305 	mvn.w	r3, #5
 8010916:	61fb      	str	r3, [r7, #28]
 8010918:	e017      	b.n	801094a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 801091a:	69bb      	ldr	r3, [r7, #24]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d103      	bne.n	8010928 <osTimerStart+0x50>
    stat = osErrorParameter;
 8010920:	f06f 0303 	mvn.w	r3, #3
 8010924:	61fb      	str	r3, [r7, #28]
 8010926:	e010      	b.n	801094a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8010928:	2300      	movs	r3, #0
 801092a:	9300      	str	r3, [sp, #0]
 801092c:	2300      	movs	r3, #0
 801092e:	683a      	ldr	r2, [r7, #0]
 8010930:	2104      	movs	r1, #4
 8010932:	69b8      	ldr	r0, [r7, #24]
 8010934:	f003 fdaa 	bl	801448c <xTimerGenericCommand>
 8010938:	4603      	mov	r3, r0
 801093a:	2b01      	cmp	r3, #1
 801093c:	d102      	bne.n	8010944 <osTimerStart+0x6c>
      stat = osOK;
 801093e:	2300      	movs	r3, #0
 8010940:	61fb      	str	r3, [r7, #28]
 8010942:	e002      	b.n	801094a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8010944:	f06f 0302 	mvn.w	r3, #2
 8010948:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801094a:	69fb      	ldr	r3, [r7, #28]
}
 801094c:	4618      	mov	r0, r3
 801094e:	3720      	adds	r7, #32
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	20000ca0 	.word	0x20000ca0

08010958 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8010958:	b580      	push	{r7, lr}
 801095a:	b08a      	sub	sp, #40	; 0x28
 801095c:	af02      	add	r7, sp, #8
 801095e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010964:	f3ef 8305 	mrs	r3, IPSR
 8010968:	617b      	str	r3, [r7, #20]
  return(result);
 801096a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801096c:	2b00      	cmp	r3, #0
 801096e:	d10f      	bne.n	8010990 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010970:	f3ef 8310 	mrs	r3, PRIMASK
 8010974:	613b      	str	r3, [r7, #16]
  return(result);
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d109      	bne.n	8010990 <osTimerStop+0x38>
 801097c:	4b1a      	ldr	r3, [pc, #104]	; (80109e8 <osTimerStop+0x90>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b02      	cmp	r3, #2
 8010982:	d109      	bne.n	8010998 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010984:	f3ef 8311 	mrs	r3, BASEPRI
 8010988:	60fb      	str	r3, [r7, #12]
  return(result);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d003      	beq.n	8010998 <osTimerStop+0x40>
    stat = osErrorISR;
 8010990:	f06f 0305 	mvn.w	r3, #5
 8010994:	61fb      	str	r3, [r7, #28]
 8010996:	e021      	b.n	80109dc <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d103      	bne.n	80109a6 <osTimerStop+0x4e>
    stat = osErrorParameter;
 801099e:	f06f 0303 	mvn.w	r3, #3
 80109a2:	61fb      	str	r3, [r7, #28]
 80109a4:	e01a      	b.n	80109dc <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80109a6:	69b8      	ldr	r0, [r7, #24]
 80109a8:	f004 f832 	bl	8014a10 <xTimerIsTimerActive>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d103      	bne.n	80109ba <osTimerStop+0x62>
      stat = osErrorResource;
 80109b2:	f06f 0302 	mvn.w	r3, #2
 80109b6:	61fb      	str	r3, [r7, #28]
 80109b8:	e010      	b.n	80109dc <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80109ba:	2300      	movs	r3, #0
 80109bc:	9300      	str	r3, [sp, #0]
 80109be:	2300      	movs	r3, #0
 80109c0:	2200      	movs	r2, #0
 80109c2:	2103      	movs	r1, #3
 80109c4:	69b8      	ldr	r0, [r7, #24]
 80109c6:	f003 fd61 	bl	801448c <xTimerGenericCommand>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b01      	cmp	r3, #1
 80109ce:	d102      	bne.n	80109d6 <osTimerStop+0x7e>
        stat = osOK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	61fb      	str	r3, [r7, #28]
 80109d4:	e002      	b.n	80109dc <osTimerStop+0x84>
      } else {
        stat = osError;
 80109d6:	f04f 33ff 	mov.w	r3, #4294967295
 80109da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80109dc:	69fb      	ldr	r3, [r7, #28]
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3720      	adds	r7, #32
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	20000ca0 	.word	0x20000ca0

080109ec <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08a      	sub	sp, #40	; 0x28
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80109f4:	2300      	movs	r3, #0
 80109f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109f8:	f3ef 8305 	mrs	r3, IPSR
 80109fc:	613b      	str	r3, [r7, #16]
  return(result);
 80109fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f040 8085 	bne.w	8010b10 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a06:	f3ef 8310 	mrs	r3, PRIMASK
 8010a0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d17e      	bne.n	8010b10 <osMutexNew+0x124>
 8010a12:	4b42      	ldr	r3, [pc, #264]	; (8010b1c <osMutexNew+0x130>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	d105      	bne.n	8010a26 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8010a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d174      	bne.n	8010b10 <osMutexNew+0x124>
    if (attr != NULL) {
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d003      	beq.n	8010a34 <osMutexNew+0x48>
      type = attr->attr_bits;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	623b      	str	r3, [r7, #32]
 8010a32:	e001      	b.n	8010a38 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010a34:	2300      	movs	r3, #0
 8010a36:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010a38:	6a3b      	ldr	r3, [r7, #32]
 8010a3a:	f003 0301 	and.w	r3, r3, #1
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d002      	beq.n	8010a48 <osMutexNew+0x5c>
      rmtx = 1U;
 8010a42:	2301      	movs	r3, #1
 8010a44:	61fb      	str	r3, [r7, #28]
 8010a46:	e001      	b.n	8010a4c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010a4c:	6a3b      	ldr	r3, [r7, #32]
 8010a4e:	f003 0308 	and.w	r3, r3, #8
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d15c      	bne.n	8010b10 <osMutexNew+0x124>
      mem = -1;
 8010a56:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d015      	beq.n	8010a8e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	689b      	ldr	r3, [r3, #8]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d006      	beq.n	8010a78 <osMutexNew+0x8c>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	2b4f      	cmp	r3, #79	; 0x4f
 8010a70:	d902      	bls.n	8010a78 <osMutexNew+0x8c>
          mem = 1;
 8010a72:	2301      	movs	r3, #1
 8010a74:	61bb      	str	r3, [r7, #24]
 8010a76:	e00c      	b.n	8010a92 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	689b      	ldr	r3, [r3, #8]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d108      	bne.n	8010a92 <osMutexNew+0xa6>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d104      	bne.n	8010a92 <osMutexNew+0xa6>
            mem = 0;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	61bb      	str	r3, [r7, #24]
 8010a8c:	e001      	b.n	8010a92 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d112      	bne.n	8010abe <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d007      	beq.n	8010aae <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	689b      	ldr	r3, [r3, #8]
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	2004      	movs	r0, #4
 8010aa6:	f001 fa33 	bl	8011f10 <xQueueCreateMutexStatic>
 8010aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8010aac:	e016      	b.n	8010adc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	f001 fa2b 	bl	8011f10 <xQueueCreateMutexStatic>
 8010aba:	6278      	str	r0, [r7, #36]	; 0x24
 8010abc:	e00e      	b.n	8010adc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10b      	bne.n	8010adc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d004      	beq.n	8010ad4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8010aca:	2004      	movs	r0, #4
 8010acc:	f001 fa08 	bl	8011ee0 <xQueueCreateMutex>
 8010ad0:	6278      	str	r0, [r7, #36]	; 0x24
 8010ad2:	e003      	b.n	8010adc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010ad4:	2001      	movs	r0, #1
 8010ad6:	f001 fa03 	bl	8011ee0 <xQueueCreateMutex>
 8010ada:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d00c      	beq.n	8010afc <osMutexNew+0x110>
        if (attr != NULL) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d003      	beq.n	8010af0 <osMutexNew+0x104>
          name = attr->name;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	617b      	str	r3, [r7, #20]
 8010aee:	e001      	b.n	8010af4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8010af0:	2300      	movs	r3, #0
 8010af2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8010af4:	6979      	ldr	r1, [r7, #20]
 8010af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010af8:	f002 f8b8 	bl	8012c6c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d006      	beq.n	8010b10 <osMutexNew+0x124>
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d003      	beq.n	8010b10 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0a:	f043 0301 	orr.w	r3, r3, #1
 8010b0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3728      	adds	r7, #40	; 0x28
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	20000ca0 	.word	0x20000ca0

08010b20 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f023 0301 	bic.w	r3, r3, #1
 8010b30:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f003 0301 	and.w	r3, r3, #1
 8010b38:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b3e:	f3ef 8305 	mrs	r3, IPSR
 8010b42:	613b      	str	r3, [r7, #16]
  return(result);
 8010b44:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d10f      	bne.n	8010b6a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8010b4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d109      	bne.n	8010b6a <osMutexAcquire+0x4a>
 8010b56:	4b20      	ldr	r3, [pc, #128]	; (8010bd8 <osMutexAcquire+0xb8>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d109      	bne.n	8010b72 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8010b62:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d003      	beq.n	8010b72 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010b6a:	f06f 0305 	mvn.w	r3, #5
 8010b6e:	61fb      	str	r3, [r7, #28]
 8010b70:	e02c      	b.n	8010bcc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d103      	bne.n	8010b80 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010b78:	f06f 0303 	mvn.w	r3, #3
 8010b7c:	61fb      	str	r3, [r7, #28]
 8010b7e:	e025      	b.n	8010bcc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d011      	beq.n	8010baa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010b86:	6839      	ldr	r1, [r7, #0]
 8010b88:	69b8      	ldr	r0, [r7, #24]
 8010b8a:	f001 fa0f 	bl	8011fac <xQueueTakeMutexRecursive>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d01b      	beq.n	8010bcc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010b9a:	f06f 0301 	mvn.w	r3, #1
 8010b9e:	61fb      	str	r3, [r7, #28]
 8010ba0:	e014      	b.n	8010bcc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010ba2:	f06f 0302 	mvn.w	r3, #2
 8010ba6:	61fb      	str	r3, [r7, #28]
 8010ba8:	e010      	b.n	8010bcc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010baa:	6839      	ldr	r1, [r7, #0]
 8010bac:	69b8      	ldr	r0, [r7, #24]
 8010bae:	f001 fd8d 	bl	80126cc <xQueueSemaphoreTake>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d009      	beq.n	8010bcc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d003      	beq.n	8010bc6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010bbe:	f06f 0301 	mvn.w	r3, #1
 8010bc2:	61fb      	str	r3, [r7, #28]
 8010bc4:	e002      	b.n	8010bcc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010bc6:	f06f 0302 	mvn.w	r3, #2
 8010bca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010bcc:	69fb      	ldr	r3, [r7, #28]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3720      	adds	r7, #32
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	20000ca0 	.word	0x20000ca0

08010bdc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b088      	sub	sp, #32
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f023 0301 	bic.w	r3, r3, #1
 8010bea:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f003 0301 	and.w	r3, r3, #1
 8010bf2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bf8:	f3ef 8305 	mrs	r3, IPSR
 8010bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8010bfe:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10f      	bne.n	8010c24 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c04:	f3ef 8310 	mrs	r3, PRIMASK
 8010c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d109      	bne.n	8010c24 <osMutexRelease+0x48>
 8010c10:	4b19      	ldr	r3, [pc, #100]	; (8010c78 <osMutexRelease+0x9c>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b02      	cmp	r3, #2
 8010c16:	d109      	bne.n	8010c2c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c18:	f3ef 8311 	mrs	r3, BASEPRI
 8010c1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d003      	beq.n	8010c2c <osMutexRelease+0x50>
    stat = osErrorISR;
 8010c24:	f06f 0305 	mvn.w	r3, #5
 8010c28:	61fb      	str	r3, [r7, #28]
 8010c2a:	e01f      	b.n	8010c6c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d103      	bne.n	8010c3a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010c32:	f06f 0303 	mvn.w	r3, #3
 8010c36:	61fb      	str	r3, [r7, #28]
 8010c38:	e018      	b.n	8010c6c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d009      	beq.n	8010c54 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010c40:	69b8      	ldr	r0, [r7, #24]
 8010c42:	f001 f980 	bl	8011f46 <xQueueGiveMutexRecursive>
 8010c46:	4603      	mov	r3, r0
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d00f      	beq.n	8010c6c <osMutexRelease+0x90>
        stat = osErrorResource;
 8010c4c:	f06f 0302 	mvn.w	r3, #2
 8010c50:	61fb      	str	r3, [r7, #28]
 8010c52:	e00b      	b.n	8010c6c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010c54:	2300      	movs	r3, #0
 8010c56:	2200      	movs	r2, #0
 8010c58:	2100      	movs	r1, #0
 8010c5a:	69b8      	ldr	r0, [r7, #24]
 8010c5c:	f001 fa42 	bl	80120e4 <xQueueGenericSend>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d002      	beq.n	8010c6c <osMutexRelease+0x90>
        stat = osErrorResource;
 8010c66:	f06f 0302 	mvn.w	r3, #2
 8010c6a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010c6c:	69fb      	ldr	r3, [r7, #28]
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3720      	adds	r7, #32
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	20000ca0 	.word	0x20000ca0

08010c7c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b08c      	sub	sp, #48	; 0x30
 8010c80:	af02      	add	r7, sp, #8
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c8c:	f3ef 8305 	mrs	r3, IPSR
 8010c90:	61bb      	str	r3, [r7, #24]
  return(result);
 8010c92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f040 8088 	bne.w	8010daa <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8010c9e:	617b      	str	r3, [r7, #20]
  return(result);
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f040 8081 	bne.w	8010daa <osSemaphoreNew+0x12e>
 8010ca8:	4b42      	ldr	r3, [pc, #264]	; (8010db4 <osSemaphoreNew+0x138>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b02      	cmp	r3, #2
 8010cae:	d105      	bne.n	8010cbc <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8010cb4:	613b      	str	r3, [r7, #16]
  return(result);
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d176      	bne.n	8010daa <osSemaphoreNew+0x12e>
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d073      	beq.n	8010daa <osSemaphoreNew+0x12e>
 8010cc2:	68ba      	ldr	r2, [r7, #8]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d86f      	bhi.n	8010daa <osSemaphoreNew+0x12e>
    mem = -1;
 8010cca:	f04f 33ff 	mov.w	r3, #4294967295
 8010cce:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d015      	beq.n	8010d02 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	689b      	ldr	r3, [r3, #8]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d006      	beq.n	8010cec <osSemaphoreNew+0x70>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	2b4f      	cmp	r3, #79	; 0x4f
 8010ce4:	d902      	bls.n	8010cec <osSemaphoreNew+0x70>
        mem = 1;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	623b      	str	r3, [r7, #32]
 8010cea:	e00c      	b.n	8010d06 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	689b      	ldr	r3, [r3, #8]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d108      	bne.n	8010d06 <osSemaphoreNew+0x8a>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d104      	bne.n	8010d06 <osSemaphoreNew+0x8a>
          mem = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	623b      	str	r3, [r7, #32]
 8010d00:	e001      	b.n	8010d06 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d0c:	d04d      	beq.n	8010daa <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d129      	bne.n	8010d68 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d10b      	bne.n	8010d32 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	689a      	ldr	r2, [r3, #8]
 8010d1e:	2303      	movs	r3, #3
 8010d20:	9300      	str	r3, [sp, #0]
 8010d22:	4613      	mov	r3, r2
 8010d24:	2200      	movs	r2, #0
 8010d26:	2100      	movs	r1, #0
 8010d28:	2001      	movs	r0, #1
 8010d2a:	f000 ffed 	bl	8011d08 <xQueueGenericCreateStatic>
 8010d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8010d30:	e005      	b.n	8010d3e <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010d32:	2203      	movs	r2, #3
 8010d34:	2100      	movs	r1, #0
 8010d36:	2001      	movs	r0, #1
 8010d38:	f001 f858 	bl	8011dec <xQueueGenericCreate>
 8010d3c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d022      	beq.n	8010d8a <osSemaphoreNew+0x10e>
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d01f      	beq.n	8010d8a <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	2100      	movs	r1, #0
 8010d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d52:	f001 f9c7 	bl	80120e4 <xQueueGenericSend>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d016      	beq.n	8010d8a <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8010d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d5e:	f001 fe3a 	bl	80129d6 <vQueueDelete>
            hSemaphore = NULL;
 8010d62:	2300      	movs	r3, #0
 8010d64:	627b      	str	r3, [r7, #36]	; 0x24
 8010d66:	e010      	b.n	8010d8a <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8010d68:	6a3b      	ldr	r3, [r7, #32]
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	d108      	bne.n	8010d80 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	689b      	ldr	r3, [r3, #8]
 8010d72:	461a      	mov	r2, r3
 8010d74:	68b9      	ldr	r1, [r7, #8]
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	f001 f94d 	bl	8012016 <xQueueCreateCountingSemaphoreStatic>
 8010d7c:	6278      	str	r0, [r7, #36]	; 0x24
 8010d7e:	e004      	b.n	8010d8a <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010d80:	68b9      	ldr	r1, [r7, #8]
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	f001 f97c 	bl	8012080 <xQueueCreateCountingSemaphore>
 8010d88:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00c      	beq.n	8010daa <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d003      	beq.n	8010d9e <osSemaphoreNew+0x122>
          name = attr->name;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	61fb      	str	r3, [r7, #28]
 8010d9c:	e001      	b.n	8010da2 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010da2:	69f9      	ldr	r1, [r7, #28]
 8010da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010da6:	f001 ff61 	bl	8012c6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3728      	adds	r7, #40	; 0x28
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	20000ca0 	.word	0x20000ca0

08010db8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b088      	sub	sp, #32
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d103      	bne.n	8010dd8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010dd0:	f06f 0303 	mvn.w	r3, #3
 8010dd4:	61fb      	str	r3, [r7, #28]
 8010dd6:	e04b      	b.n	8010e70 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dd8:	f3ef 8305 	mrs	r3, IPSR
 8010ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8010dde:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d10f      	bne.n	8010e04 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010de4:	f3ef 8310 	mrs	r3, PRIMASK
 8010de8:	613b      	str	r3, [r7, #16]
  return(result);
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d109      	bne.n	8010e04 <osSemaphoreAcquire+0x4c>
 8010df0:	4b22      	ldr	r3, [pc, #136]	; (8010e7c <osSemaphoreAcquire+0xc4>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	d128      	bne.n	8010e4a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010df8:	f3ef 8311 	mrs	r3, BASEPRI
 8010dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d022      	beq.n	8010e4a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d003      	beq.n	8010e12 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010e0a:	f06f 0303 	mvn.w	r3, #3
 8010e0e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010e10:	e02d      	b.n	8010e6e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010e12:	2300      	movs	r3, #0
 8010e14:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010e16:	f107 0308 	add.w	r3, r7, #8
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	69b8      	ldr	r0, [r7, #24]
 8010e20:	f001 fd5c 	bl	80128dc <xQueueReceiveFromISR>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d003      	beq.n	8010e32 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010e2a:	f06f 0302 	mvn.w	r3, #2
 8010e2e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010e30:	e01d      	b.n	8010e6e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01a      	beq.n	8010e6e <osSemaphoreAcquire+0xb6>
 8010e38:	4b11      	ldr	r3, [pc, #68]	; (8010e80 <osSemaphoreAcquire+0xc8>)
 8010e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e3e:	601a      	str	r2, [r3, #0]
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010e48:	e011      	b.n	8010e6e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	69b8      	ldr	r0, [r7, #24]
 8010e4e:	f001 fc3d 	bl	80126cc <xQueueSemaphoreTake>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d00b      	beq.n	8010e70 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d003      	beq.n	8010e66 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010e5e:	f06f 0301 	mvn.w	r3, #1
 8010e62:	61fb      	str	r3, [r7, #28]
 8010e64:	e004      	b.n	8010e70 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010e66:	f06f 0302 	mvn.w	r3, #2
 8010e6a:	61fb      	str	r3, [r7, #28]
 8010e6c:	e000      	b.n	8010e70 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010e6e:	bf00      	nop
      }
    }
  }

  return (stat);
 8010e70:	69fb      	ldr	r3, [r7, #28]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3720      	adds	r7, #32
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20000ca0 	.word	0x20000ca0
 8010e80:	e000ed04 	.word	0xe000ed04

08010e84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b088      	sub	sp, #32
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010e90:	2300      	movs	r3, #0
 8010e92:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d103      	bne.n	8010ea2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010e9a:	f06f 0303 	mvn.w	r3, #3
 8010e9e:	61fb      	str	r3, [r7, #28]
 8010ea0:	e03e      	b.n	8010f20 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ea2:	f3ef 8305 	mrs	r3, IPSR
 8010ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8010ea8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10f      	bne.n	8010ece <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eae:	f3ef 8310 	mrs	r3, PRIMASK
 8010eb2:	613b      	str	r3, [r7, #16]
  return(result);
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d109      	bne.n	8010ece <osSemaphoreRelease+0x4a>
 8010eba:	4b1c      	ldr	r3, [pc, #112]	; (8010f2c <osSemaphoreRelease+0xa8>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2b02      	cmp	r3, #2
 8010ec0:	d120      	bne.n	8010f04 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8010ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d01a      	beq.n	8010f04 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010ed2:	f107 0308 	add.w	r3, r7, #8
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	69b8      	ldr	r0, [r7, #24]
 8010eda:	f001 fa91 	bl	8012400 <xQueueGiveFromISR>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d003      	beq.n	8010eec <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010ee4:	f06f 0302 	mvn.w	r3, #2
 8010ee8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010eea:	e018      	b.n	8010f1e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d015      	beq.n	8010f1e <osSemaphoreRelease+0x9a>
 8010ef2:	4b0f      	ldr	r3, [pc, #60]	; (8010f30 <osSemaphoreRelease+0xac>)
 8010ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	f3bf 8f4f 	dsb	sy
 8010efe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010f02:	e00c      	b.n	8010f1e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010f04:	2300      	movs	r3, #0
 8010f06:	2200      	movs	r2, #0
 8010f08:	2100      	movs	r1, #0
 8010f0a:	69b8      	ldr	r0, [r7, #24]
 8010f0c:	f001 f8ea 	bl	80120e4 <xQueueGenericSend>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d004      	beq.n	8010f20 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010f16:	f06f 0302 	mvn.w	r3, #2
 8010f1a:	61fb      	str	r3, [r7, #28]
 8010f1c:	e000      	b.n	8010f20 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010f1e:	bf00      	nop
    }
  }

  return (stat);
 8010f20:	69fb      	ldr	r3, [r7, #28]
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3720      	adds	r7, #32
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	20000ca0 	.word	0x20000ca0
 8010f30:	e000ed04 	.word	0xe000ed04

08010f34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b08c      	sub	sp, #48	; 0x30
 8010f38:	af02      	add	r7, sp, #8
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010f40:	2300      	movs	r3, #0
 8010f42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f44:	f3ef 8305 	mrs	r3, IPSR
 8010f48:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d170      	bne.n	8011032 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f50:	f3ef 8310 	mrs	r3, PRIMASK
 8010f54:	617b      	str	r3, [r7, #20]
  return(result);
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d16a      	bne.n	8011032 <osMessageQueueNew+0xfe>
 8010f5c:	4b37      	ldr	r3, [pc, #220]	; (801103c <osMessageQueueNew+0x108>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	2b02      	cmp	r3, #2
 8010f62:	d105      	bne.n	8010f70 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f64:	f3ef 8311 	mrs	r3, BASEPRI
 8010f68:	613b      	str	r3, [r7, #16]
  return(result);
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d160      	bne.n	8011032 <osMessageQueueNew+0xfe>
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d05d      	beq.n	8011032 <osMessageQueueNew+0xfe>
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d05a      	beq.n	8011032 <osMessageQueueNew+0xfe>
    mem = -1;
 8010f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d029      	beq.n	8010fdc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	689b      	ldr	r3, [r3, #8]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d012      	beq.n	8010fb6 <osMessageQueueNew+0x82>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	2b4f      	cmp	r3, #79	; 0x4f
 8010f96:	d90e      	bls.n	8010fb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d00a      	beq.n	8010fb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	695a      	ldr	r2, [r3, #20]
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	68b9      	ldr	r1, [r7, #8]
 8010fa8:	fb01 f303 	mul.w	r3, r1, r3
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d302      	bcc.n	8010fb6 <osMessageQueueNew+0x82>
        mem = 1;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	623b      	str	r3, [r7, #32]
 8010fb4:	e014      	b.n	8010fe0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	689b      	ldr	r3, [r3, #8]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d110      	bne.n	8010fe0 <osMessageQueueNew+0xac>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	68db      	ldr	r3, [r3, #12]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10c      	bne.n	8010fe0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d108      	bne.n	8010fe0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	695b      	ldr	r3, [r3, #20]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d104      	bne.n	8010fe0 <osMessageQueueNew+0xac>
          mem = 0;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	623b      	str	r3, [r7, #32]
 8010fda:	e001      	b.n	8010fe0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d10c      	bne.n	8011000 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	691a      	ldr	r2, [r3, #16]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6899      	ldr	r1, [r3, #8]
 8010fee:	2300      	movs	r3, #0
 8010ff0:	9300      	str	r3, [sp, #0]
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	68b9      	ldr	r1, [r7, #8]
 8010ff6:	68f8      	ldr	r0, [r7, #12]
 8010ff8:	f000 fe86 	bl	8011d08 <xQueueGenericCreateStatic>
 8010ffc:	6278      	str	r0, [r7, #36]	; 0x24
 8010ffe:	e008      	b.n	8011012 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8011000:	6a3b      	ldr	r3, [r7, #32]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d105      	bne.n	8011012 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011006:	2200      	movs	r2, #0
 8011008:	68b9      	ldr	r1, [r7, #8]
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f000 feee 	bl	8011dec <xQueueGenericCreate>
 8011010:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00c      	beq.n	8011032 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d003      	beq.n	8011026 <osMessageQueueNew+0xf2>
        name = attr->name;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	61fb      	str	r3, [r7, #28]
 8011024:	e001      	b.n	801102a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801102a:	69f9      	ldr	r1, [r7, #28]
 801102c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801102e:	f001 fe1d 	bl	8012c6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011034:	4618      	mov	r0, r3
 8011036:	3728      	adds	r7, #40	; 0x28
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	20000ca0 	.word	0x20000ca0

08011040 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011040:	b580      	push	{r7, lr}
 8011042:	b08a      	sub	sp, #40	; 0x28
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	603b      	str	r3, [r7, #0]
 801104c:	4613      	mov	r3, r2
 801104e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011054:	2300      	movs	r3, #0
 8011056:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011058:	f3ef 8305 	mrs	r3, IPSR
 801105c:	61fb      	str	r3, [r7, #28]
  return(result);
 801105e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011060:	2b00      	cmp	r3, #0
 8011062:	d10f      	bne.n	8011084 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011064:	f3ef 8310 	mrs	r3, PRIMASK
 8011068:	61bb      	str	r3, [r7, #24]
  return(result);
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d109      	bne.n	8011084 <osMessageQueuePut+0x44>
 8011070:	4b2b      	ldr	r3, [pc, #172]	; (8011120 <osMessageQueuePut+0xe0>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b02      	cmp	r3, #2
 8011076:	d12e      	bne.n	80110d6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011078:	f3ef 8311 	mrs	r3, BASEPRI
 801107c:	617b      	str	r3, [r7, #20]
  return(result);
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d028      	beq.n	80110d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011084:	6a3b      	ldr	r3, [r7, #32]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d005      	beq.n	8011096 <osMessageQueuePut+0x56>
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <osMessageQueuePut+0x56>
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8011096:	f06f 0303 	mvn.w	r3, #3
 801109a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801109c:	e039      	b.n	8011112 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801109e:	2300      	movs	r3, #0
 80110a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80110a2:	f107 0210 	add.w	r2, r7, #16
 80110a6:	2300      	movs	r3, #0
 80110a8:	68b9      	ldr	r1, [r7, #8]
 80110aa:	6a38      	ldr	r0, [r7, #32]
 80110ac:	f001 f914 	bl	80122d8 <xQueueGenericSendFromISR>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d003      	beq.n	80110be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80110b6:	f06f 0302 	mvn.w	r3, #2
 80110ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110bc:	e029      	b.n	8011112 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d026      	beq.n	8011112 <osMessageQueuePut+0xd2>
 80110c4:	4b17      	ldr	r3, [pc, #92]	; (8011124 <osMessageQueuePut+0xe4>)
 80110c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ca:	601a      	str	r2, [r3, #0]
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110d4:	e01d      	b.n	8011112 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80110d6:	6a3b      	ldr	r3, [r7, #32]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d002      	beq.n	80110e2 <osMessageQueuePut+0xa2>
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d103      	bne.n	80110ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80110e2:	f06f 0303 	mvn.w	r3, #3
 80110e6:	627b      	str	r3, [r7, #36]	; 0x24
 80110e8:	e014      	b.n	8011114 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80110ea:	2300      	movs	r3, #0
 80110ec:	683a      	ldr	r2, [r7, #0]
 80110ee:	68b9      	ldr	r1, [r7, #8]
 80110f0:	6a38      	ldr	r0, [r7, #32]
 80110f2:	f000 fff7 	bl	80120e4 <xQueueGenericSend>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d00b      	beq.n	8011114 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d003      	beq.n	801110a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8011102:	f06f 0301 	mvn.w	r3, #1
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
 8011108:	e004      	b.n	8011114 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801110a:	f06f 0302 	mvn.w	r3, #2
 801110e:	627b      	str	r3, [r7, #36]	; 0x24
 8011110:	e000      	b.n	8011114 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011112:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011116:	4618      	mov	r0, r3
 8011118:	3728      	adds	r7, #40	; 0x28
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	20000ca0 	.word	0x20000ca0
 8011124:	e000ed04 	.word	0xe000ed04

08011128 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011128:	b580      	push	{r7, lr}
 801112a:	b08a      	sub	sp, #40	; 0x28
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
 8011134:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801113a:	2300      	movs	r3, #0
 801113c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801113e:	f3ef 8305 	mrs	r3, IPSR
 8011142:	61fb      	str	r3, [r7, #28]
  return(result);
 8011144:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011146:	2b00      	cmp	r3, #0
 8011148:	d10f      	bne.n	801116a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801114a:	f3ef 8310 	mrs	r3, PRIMASK
 801114e:	61bb      	str	r3, [r7, #24]
  return(result);
 8011150:	69bb      	ldr	r3, [r7, #24]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d109      	bne.n	801116a <osMessageQueueGet+0x42>
 8011156:	4b2b      	ldr	r3, [pc, #172]	; (8011204 <osMessageQueueGet+0xdc>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b02      	cmp	r3, #2
 801115c:	d12e      	bne.n	80111bc <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801115e:	f3ef 8311 	mrs	r3, BASEPRI
 8011162:	617b      	str	r3, [r7, #20]
  return(result);
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d028      	beq.n	80111bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801116a:	6a3b      	ldr	r3, [r7, #32]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d005      	beq.n	801117c <osMessageQueueGet+0x54>
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d002      	beq.n	801117c <osMessageQueueGet+0x54>
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d003      	beq.n	8011184 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801117c:	f06f 0303 	mvn.w	r3, #3
 8011180:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011182:	e038      	b.n	80111f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8011184:	2300      	movs	r3, #0
 8011186:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011188:	f107 0310 	add.w	r3, r7, #16
 801118c:	461a      	mov	r2, r3
 801118e:	68b9      	ldr	r1, [r7, #8]
 8011190:	6a38      	ldr	r0, [r7, #32]
 8011192:	f001 fba3 	bl	80128dc <xQueueReceiveFromISR>
 8011196:	4603      	mov	r3, r0
 8011198:	2b01      	cmp	r3, #1
 801119a:	d003      	beq.n	80111a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801119c:	f06f 0302 	mvn.w	r3, #2
 80111a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111a2:	e028      	b.n	80111f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d025      	beq.n	80111f6 <osMessageQueueGet+0xce>
 80111aa:	4b17      	ldr	r3, [pc, #92]	; (8011208 <osMessageQueueGet+0xe0>)
 80111ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111b0:	601a      	str	r2, [r3, #0]
 80111b2:	f3bf 8f4f 	dsb	sy
 80111b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111ba:	e01c      	b.n	80111f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <osMessageQueueGet+0xa0>
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d103      	bne.n	80111d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80111c8:	f06f 0303 	mvn.w	r3, #3
 80111cc:	627b      	str	r3, [r7, #36]	; 0x24
 80111ce:	e013      	b.n	80111f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80111d0:	683a      	ldr	r2, [r7, #0]
 80111d2:	68b9      	ldr	r1, [r7, #8]
 80111d4:	6a38      	ldr	r0, [r7, #32]
 80111d6:	f001 f99d 	bl	8012514 <xQueueReceive>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d00b      	beq.n	80111f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d003      	beq.n	80111ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80111e6:	f06f 0301 	mvn.w	r3, #1
 80111ea:	627b      	str	r3, [r7, #36]	; 0x24
 80111ec:	e004      	b.n	80111f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80111ee:	f06f 0302 	mvn.w	r3, #2
 80111f2:	627b      	str	r3, [r7, #36]	; 0x24
 80111f4:	e000      	b.n	80111f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80111f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3728      	adds	r7, #40	; 0x28
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	20000ca0 	.word	0x20000ca0
 8011208:	e000ed04 	.word	0xe000ed04

0801120c <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 801120c:	b580      	push	{r7, lr}
 801120e:	b088      	sub	sp, #32
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011218:	f3ef 8305 	mrs	r3, IPSR
 801121c:	617b      	str	r3, [r7, #20]
  return(result);
 801121e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011220:	2b00      	cmp	r3, #0
 8011222:	d10f      	bne.n	8011244 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011224:	f3ef 8310 	mrs	r3, PRIMASK
 8011228:	613b      	str	r3, [r7, #16]
  return(result);
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d109      	bne.n	8011244 <osMessageQueueReset+0x38>
 8011230:	4b0f      	ldr	r3, [pc, #60]	; (8011270 <osMessageQueueReset+0x64>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b02      	cmp	r3, #2
 8011236:	d109      	bne.n	801124c <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011238:	f3ef 8311 	mrs	r3, BASEPRI
 801123c:	60fb      	str	r3, [r7, #12]
  return(result);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d003      	beq.n	801124c <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8011244:	f06f 0305 	mvn.w	r3, #5
 8011248:	61fb      	str	r3, [r7, #28]
 801124a:	e00c      	b.n	8011266 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d103      	bne.n	801125a <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8011252:	f06f 0303 	mvn.w	r3, #3
 8011256:	61fb      	str	r3, [r7, #28]
 8011258:	e005      	b.n	8011266 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 801125a:	2300      	movs	r3, #0
 801125c:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 801125e:	2100      	movs	r1, #0
 8011260:	69b8      	ldr	r0, [r7, #24]
 8011262:	f000 fce9 	bl	8011c38 <xQueueGenericReset>
  }

  return (stat);
 8011266:	69fb      	ldr	r3, [r7, #28]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3720      	adds	r7, #32
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	20000ca0 	.word	0x20000ca0

08011274 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	4a07      	ldr	r2, [pc, #28]	; (80112a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8011284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	4a06      	ldr	r2, [pc, #24]	; (80112a4 <vApplicationGetIdleTaskMemory+0x30>)
 801128a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011292:	601a      	str	r2, [r3, #0]
}
 8011294:	bf00      	nop
 8011296:	3714      	adds	r7, #20
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	20000ca4 	.word	0x20000ca4
 80112a4:	20000d08 	.word	0x20000d08

080112a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	4a07      	ldr	r2, [pc, #28]	; (80112d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80112b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	4a06      	ldr	r2, [pc, #24]	; (80112d8 <vApplicationGetTimerTaskMemory+0x30>)
 80112be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80112c6:	601a      	str	r2, [r3, #0]
}
 80112c8:	bf00      	nop
 80112ca:	3714      	adds	r7, #20
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr
 80112d4:	20001508 	.word	0x20001508
 80112d8:	2000156c 	.word	0x2000156c

080112dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b08a      	sub	sp, #40	; 0x28
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80112e4:	2300      	movs	r3, #0
 80112e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80112e8:	f001 ff7a 	bl	80131e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80112ec:	4b59      	ldr	r3, [pc, #356]	; (8011454 <pvPortMalloc+0x178>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d101      	bne.n	80112f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80112f4:	f000 f910 	bl	8011518 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80112f8:	4b57      	ldr	r3, [pc, #348]	; (8011458 <pvPortMalloc+0x17c>)
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	4013      	ands	r3, r2
 8011300:	2b00      	cmp	r3, #0
 8011302:	f040 808c 	bne.w	801141e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d01c      	beq.n	8011346 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 801130c:	2208      	movs	r2, #8
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4413      	add	r3, r2
 8011312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f003 0307 	and.w	r3, r3, #7
 801131a:	2b00      	cmp	r3, #0
 801131c:	d013      	beq.n	8011346 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f023 0307 	bic.w	r3, r3, #7
 8011324:	3308      	adds	r3, #8
 8011326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f003 0307 	and.w	r3, r3, #7
 801132e:	2b00      	cmp	r3, #0
 8011330:	d009      	beq.n	8011346 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011336:	f383 8811 	msr	BASEPRI, r3
 801133a:	f3bf 8f6f 	isb	sy
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	617b      	str	r3, [r7, #20]
 8011344:	e7fe      	b.n	8011344 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d068      	beq.n	801141e <pvPortMalloc+0x142>
 801134c:	4b43      	ldr	r3, [pc, #268]	; (801145c <pvPortMalloc+0x180>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	429a      	cmp	r2, r3
 8011354:	d863      	bhi.n	801141e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011356:	4b42      	ldr	r3, [pc, #264]	; (8011460 <pvPortMalloc+0x184>)
 8011358:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801135a:	4b41      	ldr	r3, [pc, #260]	; (8011460 <pvPortMalloc+0x184>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011360:	e004      	b.n	801136c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	429a      	cmp	r2, r3
 8011374:	d903      	bls.n	801137e <pvPortMalloc+0xa2>
 8011376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d1f1      	bne.n	8011362 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801137e:	4b35      	ldr	r3, [pc, #212]	; (8011454 <pvPortMalloc+0x178>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011384:	429a      	cmp	r2, r3
 8011386:	d04a      	beq.n	801141e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011388:	6a3b      	ldr	r3, [r7, #32]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2208      	movs	r2, #8
 801138e:	4413      	add	r3, r2
 8011390:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	6a3b      	ldr	r3, [r7, #32]
 8011398:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	1ad2      	subs	r2, r2, r3
 80113a2:	2308      	movs	r3, #8
 80113a4:	005b      	lsls	r3, r3, #1
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d91e      	bls.n	80113e8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80113aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4413      	add	r3, r2
 80113b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	f003 0307 	and.w	r3, r3, #7
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d009      	beq.n	80113d0 <pvPortMalloc+0xf4>
 80113bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c0:	f383 8811 	msr	BASEPRI, r3
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	613b      	str	r3, [r7, #16]
 80113ce:	e7fe      	b.n	80113ce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	1ad2      	subs	r2, r2, r3
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80113e2:	69b8      	ldr	r0, [r7, #24]
 80113e4:	f000 f8fc 	bl	80115e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80113e8:	4b1c      	ldr	r3, [pc, #112]	; (801145c <pvPortMalloc+0x180>)
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	4a1a      	ldr	r2, [pc, #104]	; (801145c <pvPortMalloc+0x180>)
 80113f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80113f6:	4b19      	ldr	r3, [pc, #100]	; (801145c <pvPortMalloc+0x180>)
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	4b1a      	ldr	r3, [pc, #104]	; (8011464 <pvPortMalloc+0x188>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d203      	bcs.n	801140a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011402:	4b16      	ldr	r3, [pc, #88]	; (801145c <pvPortMalloc+0x180>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a17      	ldr	r2, [pc, #92]	; (8011464 <pvPortMalloc+0x188>)
 8011408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	685a      	ldr	r2, [r3, #4]
 801140e:	4b12      	ldr	r3, [pc, #72]	; (8011458 <pvPortMalloc+0x17c>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	431a      	orrs	r2, r3
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141a:	2200      	movs	r2, #0
 801141c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801141e:	f001 ff25 	bl	801326c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011428:	f7ef ff2a 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	f003 0307 	and.w	r3, r3, #7
 8011432:	2b00      	cmp	r3, #0
 8011434:	d009      	beq.n	801144a <pvPortMalloc+0x16e>
 8011436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801143a:	f383 8811 	msr	BASEPRI, r3
 801143e:	f3bf 8f6f 	isb	sy
 8011442:	f3bf 8f4f 	dsb	sy
 8011446:	60fb      	str	r3, [r7, #12]
 8011448:	e7fe      	b.n	8011448 <pvPortMalloc+0x16c>
	return pvReturn;
 801144a:	69fb      	ldr	r3, [r7, #28]
}
 801144c:	4618      	mov	r0, r3
 801144e:	3728      	adds	r7, #40	; 0x28
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	20026f64 	.word	0x20026f64
 8011458:	20026f70 	.word	0x20026f70
 801145c:	20026f68 	.word	0x20026f68
 8011460:	20026f5c 	.word	0x20026f5c
 8011464:	20026f6c 	.word	0x20026f6c

08011468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b086      	sub	sp, #24
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d046      	beq.n	8011508 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801147a:	2308      	movs	r3, #8
 801147c:	425b      	negs	r3, r3
 801147e:	697a      	ldr	r2, [r7, #20]
 8011480:	4413      	add	r3, r2
 8011482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	685a      	ldr	r2, [r3, #4]
 801148c:	4b20      	ldr	r3, [pc, #128]	; (8011510 <vPortFree+0xa8>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4013      	ands	r3, r2
 8011492:	2b00      	cmp	r3, #0
 8011494:	d109      	bne.n	80114aa <vPortFree+0x42>
 8011496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149a:	f383 8811 	msr	BASEPRI, r3
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f3bf 8f4f 	dsb	sy
 80114a6:	60fb      	str	r3, [r7, #12]
 80114a8:	e7fe      	b.n	80114a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d009      	beq.n	80114c6 <vPortFree+0x5e>
 80114b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b6:	f383 8811 	msr	BASEPRI, r3
 80114ba:	f3bf 8f6f 	isb	sy
 80114be:	f3bf 8f4f 	dsb	sy
 80114c2:	60bb      	str	r3, [r7, #8]
 80114c4:	e7fe      	b.n	80114c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	685a      	ldr	r2, [r3, #4]
 80114ca:	4b11      	ldr	r3, [pc, #68]	; (8011510 <vPortFree+0xa8>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4013      	ands	r3, r2
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d019      	beq.n	8011508 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d115      	bne.n	8011508 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	685a      	ldr	r2, [r3, #4]
 80114e0:	4b0b      	ldr	r3, [pc, #44]	; (8011510 <vPortFree+0xa8>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	43db      	mvns	r3, r3
 80114e6:	401a      	ands	r2, r3
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80114ec:	f001 fe78 	bl	80131e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	4b07      	ldr	r3, [pc, #28]	; (8011514 <vPortFree+0xac>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4413      	add	r3, r2
 80114fa:	4a06      	ldr	r2, [pc, #24]	; (8011514 <vPortFree+0xac>)
 80114fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80114fe:	6938      	ldr	r0, [r7, #16]
 8011500:	f000 f86e 	bl	80115e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011504:	f001 feb2 	bl	801326c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011508:	bf00      	nop
 801150a:	3718      	adds	r7, #24
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	20026f70 	.word	0x20026f70
 8011514:	20026f68 	.word	0x20026f68

08011518 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011518:	b480      	push	{r7}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801151e:	4b29      	ldr	r3, [pc, #164]	; (80115c4 <prvHeapInit+0xac>)
 8011520:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011522:	4b29      	ldr	r3, [pc, #164]	; (80115c8 <prvHeapInit+0xb0>)
 8011524:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f003 0307 	and.w	r3, r3, #7
 801152c:	2b00      	cmp	r3, #0
 801152e:	d00c      	beq.n	801154a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	3307      	adds	r3, #7
 8011534:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f023 0307 	bic.w	r3, r3, #7
 801153c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	4a20      	ldr	r2, [pc, #128]	; (80115c8 <prvHeapInit+0xb0>)
 8011546:	4413      	add	r3, r2
 8011548:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801154e:	4a1f      	ldr	r2, [pc, #124]	; (80115cc <prvHeapInit+0xb4>)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011554:	4b1d      	ldr	r3, [pc, #116]	; (80115cc <prvHeapInit+0xb4>)
 8011556:	2200      	movs	r2, #0
 8011558:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	68ba      	ldr	r2, [r7, #8]
 801155e:	4413      	add	r3, r2
 8011560:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011562:	2208      	movs	r2, #8
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	1a9b      	subs	r3, r3, r2
 8011568:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f023 0307 	bic.w	r3, r3, #7
 8011570:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	4a16      	ldr	r2, [pc, #88]	; (80115d0 <prvHeapInit+0xb8>)
 8011576:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011578:	4b15      	ldr	r3, [pc, #84]	; (80115d0 <prvHeapInit+0xb8>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2200      	movs	r2, #0
 801157e:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011580:	4b13      	ldr	r3, [pc, #76]	; (80115d0 <prvHeapInit+0xb8>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	2200      	movs	r2, #0
 8011586:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	1ad2      	subs	r2, r2, r3
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011596:	4b0e      	ldr	r3, [pc, #56]	; (80115d0 <prvHeapInit+0xb8>)
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	4a0c      	ldr	r2, [pc, #48]	; (80115d4 <prvHeapInit+0xbc>)
 80115a4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	4a0b      	ldr	r2, [pc, #44]	; (80115d8 <prvHeapInit+0xc0>)
 80115ac:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80115ae:	4b0b      	ldr	r3, [pc, #44]	; (80115dc <prvHeapInit+0xc4>)
 80115b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80115b4:	601a      	str	r2, [r3, #0]
}
 80115b6:	bf00      	nop
 80115b8:	3714      	adds	r7, #20
 80115ba:	46bd      	mov	sp, r7
 80115bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c0:	4770      	bx	lr
 80115c2:	bf00      	nop
 80115c4:	000249f0 	.word	0x000249f0
 80115c8:	2000256c 	.word	0x2000256c
 80115cc:	20026f5c 	.word	0x20026f5c
 80115d0:	20026f64 	.word	0x20026f64
 80115d4:	20026f6c 	.word	0x20026f6c
 80115d8:	20026f68 	.word	0x20026f68
 80115dc:	20026f70 	.word	0x20026f70

080115e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80115e0:	b480      	push	{r7}
 80115e2:	b085      	sub	sp, #20
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80115e8:	4b28      	ldr	r3, [pc, #160]	; (801168c <prvInsertBlockIntoFreeList+0xac>)
 80115ea:	60fb      	str	r3, [r7, #12]
 80115ec:	e002      	b.n	80115f4 <prvInsertBlockIntoFreeList+0x14>
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	60fb      	str	r3, [r7, #12]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d8f7      	bhi.n	80115ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	68ba      	ldr	r2, [r7, #8]
 8011608:	4413      	add	r3, r2
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	429a      	cmp	r2, r3
 801160e:	d108      	bne.n	8011622 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	685a      	ldr	r2, [r3, #4]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	441a      	add	r2, r3
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	68ba      	ldr	r2, [r7, #8]
 801162c:	441a      	add	r2, r3
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	429a      	cmp	r2, r3
 8011634:	d118      	bne.n	8011668 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	4b15      	ldr	r3, [pc, #84]	; (8011690 <prvInsertBlockIntoFreeList+0xb0>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	429a      	cmp	r2, r3
 8011640:	d00d      	beq.n	801165e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	441a      	add	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	601a      	str	r2, [r3, #0]
 801165c:	e008      	b.n	8011670 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801165e:	4b0c      	ldr	r3, [pc, #48]	; (8011690 <prvInsertBlockIntoFreeList+0xb0>)
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	e003      	b.n	8011670 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	429a      	cmp	r2, r3
 8011676:	d002      	beq.n	801167e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	687a      	ldr	r2, [r7, #4]
 801167c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801167e:	bf00      	nop
 8011680:	3714      	adds	r7, #20
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop
 801168c:	20026f5c 	.word	0x20026f5c
 8011690:	20026f64 	.word	0x20026f64

08011694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f103 0208 	add.w	r2, r3, #8
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f04f 32ff 	mov.w	r2, #4294967295
 80116ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f103 0208 	add.w	r2, r3, #8
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f103 0208 	add.w	r2, r3, #8
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80116c8:	bf00      	nop
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80116e2:	bf00      	nop
 80116e4:	370c      	adds	r7, #12
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116ee:	b480      	push	{r7}
 80116f0:	b085      	sub	sp, #20
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	68fa      	ldr	r2, [r7, #12]
 8011702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	689a      	ldr	r2, [r3, #8]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	689b      	ldr	r3, [r3, #8]
 8011710:	683a      	ldr	r2, [r7, #0]
 8011712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	1c5a      	adds	r2, r3, #1
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	601a      	str	r2, [r3, #0]
}
 801172a:	bf00      	nop
 801172c:	3714      	adds	r7, #20
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr

08011736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011736:	b480      	push	{r7}
 8011738:	b085      	sub	sp, #20
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801174c:	d103      	bne.n	8011756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	691b      	ldr	r3, [r3, #16]
 8011752:	60fb      	str	r3, [r7, #12]
 8011754:	e00c      	b.n	8011770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	3308      	adds	r3, #8
 801175a:	60fb      	str	r3, [r7, #12]
 801175c:	e002      	b.n	8011764 <vListInsert+0x2e>
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	60fb      	str	r3, [r7, #12]
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	68ba      	ldr	r2, [r7, #8]
 801176c:	429a      	cmp	r2, r3
 801176e:	d2f6      	bcs.n	801175e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	685a      	ldr	r2, [r3, #4]
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	683a      	ldr	r2, [r7, #0]
 801177e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	687a      	ldr	r2, [r7, #4]
 8011790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	1c5a      	adds	r2, r3, #1
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	601a      	str	r2, [r3, #0]
}
 801179c:	bf00      	nop
 801179e:	3714      	adds	r7, #20
 80117a0:	46bd      	mov	sp, r7
 80117a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a6:	4770      	bx	lr

080117a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80117a8:	b480      	push	{r7}
 80117aa:	b085      	sub	sp, #20
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	6892      	ldr	r2, [r2, #8]
 80117be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	6852      	ldr	r2, [r2, #4]
 80117c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d103      	bne.n	80117dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	689a      	ldr	r2, [r3, #8]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	1e5a      	subs	r2, r3, #1
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	681b      	ldr	r3, [r3, #0]
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3714      	adds	r7, #20
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr

080117fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117fc:	b480      	push	{r7}
 80117fe:	b085      	sub	sp, #20
 8011800:	af00      	add	r7, sp, #0
 8011802:	60f8      	str	r0, [r7, #12]
 8011804:	60b9      	str	r1, [r7, #8]
 8011806:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	3b04      	subs	r3, #4
 801180c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	3b04      	subs	r3, #4
 801181a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	f023 0201 	bic.w	r2, r3, #1
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3b04      	subs	r3, #4
 801182a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801182c:	4a0c      	ldr	r2, [pc, #48]	; (8011860 <pxPortInitialiseStack+0x64>)
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	3b14      	subs	r3, #20
 8011836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	3b04      	subs	r3, #4
 8011842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f06f 0202 	mvn.w	r2, #2
 801184a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	3b20      	subs	r3, #32
 8011850:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011852:	68fb      	ldr	r3, [r7, #12]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3714      	adds	r7, #20
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr
 8011860:	08011865 	.word	0x08011865

08011864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011864:	b480      	push	{r7}
 8011866:	b085      	sub	sp, #20
 8011868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801186a:	2300      	movs	r3, #0
 801186c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801186e:	4b11      	ldr	r3, [pc, #68]	; (80118b4 <prvTaskExitError+0x50>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011876:	d009      	beq.n	801188c <prvTaskExitError+0x28>
 8011878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187c:	f383 8811 	msr	BASEPRI, r3
 8011880:	f3bf 8f6f 	isb	sy
 8011884:	f3bf 8f4f 	dsb	sy
 8011888:	60fb      	str	r3, [r7, #12]
 801188a:	e7fe      	b.n	801188a <prvTaskExitError+0x26>
 801188c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011890:	f383 8811 	msr	BASEPRI, r3
 8011894:	f3bf 8f6f 	isb	sy
 8011898:	f3bf 8f4f 	dsb	sy
 801189c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801189e:	bf00      	nop
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d0fc      	beq.n	80118a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80118a6:	bf00      	nop
 80118a8:	3714      	adds	r7, #20
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	20000084 	.word	0x20000084
	...

080118c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80118c0:	4b07      	ldr	r3, [pc, #28]	; (80118e0 <pxCurrentTCBConst2>)
 80118c2:	6819      	ldr	r1, [r3, #0]
 80118c4:	6808      	ldr	r0, [r1, #0]
 80118c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ca:	f380 8809 	msr	PSP, r0
 80118ce:	f3bf 8f6f 	isb	sy
 80118d2:	f04f 0000 	mov.w	r0, #0
 80118d6:	f380 8811 	msr	BASEPRI, r0
 80118da:	4770      	bx	lr
 80118dc:	f3af 8000 	nop.w

080118e0 <pxCurrentTCBConst2>:
 80118e0:	20026f7c 	.word	0x20026f7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80118e4:	bf00      	nop
 80118e6:	bf00      	nop

080118e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80118e8:	4808      	ldr	r0, [pc, #32]	; (801190c <prvPortStartFirstTask+0x24>)
 80118ea:	6800      	ldr	r0, [r0, #0]
 80118ec:	6800      	ldr	r0, [r0, #0]
 80118ee:	f380 8808 	msr	MSP, r0
 80118f2:	f04f 0000 	mov.w	r0, #0
 80118f6:	f380 8814 	msr	CONTROL, r0
 80118fa:	b662      	cpsie	i
 80118fc:	b661      	cpsie	f
 80118fe:	f3bf 8f4f 	dsb	sy
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	df00      	svc	0
 8011908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801190a:	bf00      	nop
 801190c:	e000ed08 	.word	0xe000ed08

08011910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011916:	4b44      	ldr	r3, [pc, #272]	; (8011a28 <xPortStartScheduler+0x118>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	4a44      	ldr	r2, [pc, #272]	; (8011a2c <xPortStartScheduler+0x11c>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d109      	bne.n	8011934 <xPortStartScheduler+0x24>
 8011920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	613b      	str	r3, [r7, #16]
 8011932:	e7fe      	b.n	8011932 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011934:	4b3c      	ldr	r3, [pc, #240]	; (8011a28 <xPortStartScheduler+0x118>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	4a3d      	ldr	r2, [pc, #244]	; (8011a30 <xPortStartScheduler+0x120>)
 801193a:	4293      	cmp	r3, r2
 801193c:	d109      	bne.n	8011952 <xPortStartScheduler+0x42>
 801193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	60fb      	str	r3, [r7, #12]
 8011950:	e7fe      	b.n	8011950 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011952:	4b38      	ldr	r3, [pc, #224]	; (8011a34 <xPortStartScheduler+0x124>)
 8011954:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	b2db      	uxtb	r3, r3
 801195c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	22ff      	movs	r2, #255	; 0xff
 8011962:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	b2db      	uxtb	r3, r3
 801196a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801196c:	78fb      	ldrb	r3, [r7, #3]
 801196e:	b2db      	uxtb	r3, r3
 8011970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011974:	b2da      	uxtb	r2, r3
 8011976:	4b30      	ldr	r3, [pc, #192]	; (8011a38 <xPortStartScheduler+0x128>)
 8011978:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801197a:	4b30      	ldr	r3, [pc, #192]	; (8011a3c <xPortStartScheduler+0x12c>)
 801197c:	2207      	movs	r2, #7
 801197e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011980:	e009      	b.n	8011996 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011982:	4b2e      	ldr	r3, [pc, #184]	; (8011a3c <xPortStartScheduler+0x12c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	3b01      	subs	r3, #1
 8011988:	4a2c      	ldr	r2, [pc, #176]	; (8011a3c <xPortStartScheduler+0x12c>)
 801198a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801198c:	78fb      	ldrb	r3, [r7, #3]
 801198e:	b2db      	uxtb	r3, r3
 8011990:	005b      	lsls	r3, r3, #1
 8011992:	b2db      	uxtb	r3, r3
 8011994:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011996:	78fb      	ldrb	r3, [r7, #3]
 8011998:	b2db      	uxtb	r3, r3
 801199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801199e:	2b80      	cmp	r3, #128	; 0x80
 80119a0:	d0ef      	beq.n	8011982 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80119a2:	4b26      	ldr	r3, [pc, #152]	; (8011a3c <xPortStartScheduler+0x12c>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f1c3 0307 	rsb	r3, r3, #7
 80119aa:	2b04      	cmp	r3, #4
 80119ac:	d009      	beq.n	80119c2 <xPortStartScheduler+0xb2>
 80119ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b2:	f383 8811 	msr	BASEPRI, r3
 80119b6:	f3bf 8f6f 	isb	sy
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	60bb      	str	r3, [r7, #8]
 80119c0:	e7fe      	b.n	80119c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80119c2:	4b1e      	ldr	r3, [pc, #120]	; (8011a3c <xPortStartScheduler+0x12c>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	021b      	lsls	r3, r3, #8
 80119c8:	4a1c      	ldr	r2, [pc, #112]	; (8011a3c <xPortStartScheduler+0x12c>)
 80119ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80119cc:	4b1b      	ldr	r3, [pc, #108]	; (8011a3c <xPortStartScheduler+0x12c>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80119d4:	4a19      	ldr	r2, [pc, #100]	; (8011a3c <xPortStartScheduler+0x12c>)
 80119d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	b2da      	uxtb	r2, r3
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119e0:	4b17      	ldr	r3, [pc, #92]	; (8011a40 <xPortStartScheduler+0x130>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	4a16      	ldr	r2, [pc, #88]	; (8011a40 <xPortStartScheduler+0x130>)
 80119e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119ec:	4b14      	ldr	r3, [pc, #80]	; (8011a40 <xPortStartScheduler+0x130>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	4a13      	ldr	r2, [pc, #76]	; (8011a40 <xPortStartScheduler+0x130>)
 80119f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80119f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119f8:	f7f0 fd94 	bl	8002524 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119fc:	4b11      	ldr	r3, [pc, #68]	; (8011a44 <xPortStartScheduler+0x134>)
 80119fe:	2200      	movs	r2, #0
 8011a00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011a02:	f000 f8d1 	bl	8011ba8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011a06:	4b10      	ldr	r3, [pc, #64]	; (8011a48 <xPortStartScheduler+0x138>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4a0f      	ldr	r2, [pc, #60]	; (8011a48 <xPortStartScheduler+0x138>)
 8011a0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011a10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011a12:	f7ff ff69 	bl	80118e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011a16:	f001 fdc1 	bl	801359c <vTaskSwitchContext>
	prvTaskExitError();
 8011a1a:	f7ff ff23 	bl	8011864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011a1e:	2300      	movs	r3, #0
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	e000ed00 	.word	0xe000ed00
 8011a2c:	410fc271 	.word	0x410fc271
 8011a30:	410fc270 	.word	0x410fc270
 8011a34:	e000e400 	.word	0xe000e400
 8011a38:	20026f74 	.word	0x20026f74
 8011a3c:	20026f78 	.word	0x20026f78
 8011a40:	e000ed20 	.word	0xe000ed20
 8011a44:	20000084 	.word	0x20000084
 8011a48:	e000ef34 	.word	0xe000ef34

08011a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a56:	f383 8811 	msr	BASEPRI, r3
 8011a5a:	f3bf 8f6f 	isb	sy
 8011a5e:	f3bf 8f4f 	dsb	sy
 8011a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a64:	4b0e      	ldr	r3, [pc, #56]	; (8011aa0 <vPortEnterCritical+0x54>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	3301      	adds	r3, #1
 8011a6a:	4a0d      	ldr	r2, [pc, #52]	; (8011aa0 <vPortEnterCritical+0x54>)
 8011a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a6e:	4b0c      	ldr	r3, [pc, #48]	; (8011aa0 <vPortEnterCritical+0x54>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d10e      	bne.n	8011a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a76:	4b0b      	ldr	r3, [pc, #44]	; (8011aa4 <vPortEnterCritical+0x58>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d009      	beq.n	8011a94 <vPortEnterCritical+0x48>
 8011a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a84:	f383 8811 	msr	BASEPRI, r3
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	603b      	str	r3, [r7, #0]
 8011a92:	e7fe      	b.n	8011a92 <vPortEnterCritical+0x46>
	}
}
 8011a94:	bf00      	nop
 8011a96:	370c      	adds	r7, #12
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr
 8011aa0:	20000084 	.word	0x20000084
 8011aa4:	e000ed04 	.word	0xe000ed04

08011aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011aae:	4b11      	ldr	r3, [pc, #68]	; (8011af4 <vPortExitCritical+0x4c>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d109      	bne.n	8011aca <vPortExitCritical+0x22>
 8011ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aba:	f383 8811 	msr	BASEPRI, r3
 8011abe:	f3bf 8f6f 	isb	sy
 8011ac2:	f3bf 8f4f 	dsb	sy
 8011ac6:	607b      	str	r3, [r7, #4]
 8011ac8:	e7fe      	b.n	8011ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8011aca:	4b0a      	ldr	r3, [pc, #40]	; (8011af4 <vPortExitCritical+0x4c>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	4a08      	ldr	r2, [pc, #32]	; (8011af4 <vPortExitCritical+0x4c>)
 8011ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011ad4:	4b07      	ldr	r3, [pc, #28]	; (8011af4 <vPortExitCritical+0x4c>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d104      	bne.n	8011ae6 <vPortExitCritical+0x3e>
 8011adc:	2300      	movs	r3, #0
 8011ade:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011ae6:	bf00      	nop
 8011ae8:	370c      	adds	r7, #12
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
 8011af2:	bf00      	nop
 8011af4:	20000084 	.word	0x20000084
	...

08011b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b00:	f3ef 8009 	mrs	r0, PSP
 8011b04:	f3bf 8f6f 	isb	sy
 8011b08:	4b15      	ldr	r3, [pc, #84]	; (8011b60 <pxCurrentTCBConst>)
 8011b0a:	681a      	ldr	r2, [r3, #0]
 8011b0c:	f01e 0f10 	tst.w	lr, #16
 8011b10:	bf08      	it	eq
 8011b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1a:	6010      	str	r0, [r2, #0]
 8011b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011b24:	f380 8811 	msr	BASEPRI, r0
 8011b28:	f3bf 8f4f 	dsb	sy
 8011b2c:	f3bf 8f6f 	isb	sy
 8011b30:	f001 fd34 	bl	801359c <vTaskSwitchContext>
 8011b34:	f04f 0000 	mov.w	r0, #0
 8011b38:	f380 8811 	msr	BASEPRI, r0
 8011b3c:	bc09      	pop	{r0, r3}
 8011b3e:	6819      	ldr	r1, [r3, #0]
 8011b40:	6808      	ldr	r0, [r1, #0]
 8011b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b46:	f01e 0f10 	tst.w	lr, #16
 8011b4a:	bf08      	it	eq
 8011b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b50:	f380 8809 	msr	PSP, r0
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	f3af 8000 	nop.w

08011b60 <pxCurrentTCBConst>:
 8011b60:	20026f7c 	.word	0x20026f7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b64:	bf00      	nop
 8011b66:	bf00      	nop

08011b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b72:	f383 8811 	msr	BASEPRI, r3
 8011b76:	f3bf 8f6f 	isb	sy
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b80:	f001 fc46 	bl	8013410 <xTaskIncrementTick>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d003      	beq.n	8011b92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b8a:	4b06      	ldr	r3, [pc, #24]	; (8011ba4 <SysTick_Handler+0x3c>)
 8011b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b90:	601a      	str	r2, [r3, #0]
 8011b92:	2300      	movs	r3, #0
 8011b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b9c:	bf00      	nop
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	e000ed04 	.word	0xe000ed04

08011ba8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011ba8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011bb8 <vPortEnableVFP+0x10>
 8011bac:	6801      	ldr	r1, [r0, #0]
 8011bae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011bb2:	6001      	str	r1, [r0, #0]
 8011bb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011bb6:	bf00      	nop
 8011bb8:	e000ed88 	.word	0xe000ed88

08011bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011bc2:	f3ef 8305 	mrs	r3, IPSR
 8011bc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2b0f      	cmp	r3, #15
 8011bcc:	d913      	bls.n	8011bf6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bce:	4a16      	ldr	r2, [pc, #88]	; (8011c28 <vPortValidateInterruptPriority+0x6c>)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011bd8:	4b14      	ldr	r3, [pc, #80]	; (8011c2c <vPortValidateInterruptPriority+0x70>)
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	7afa      	ldrb	r2, [r7, #11]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d209      	bcs.n	8011bf6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be6:	f383 8811 	msr	BASEPRI, r3
 8011bea:	f3bf 8f6f 	isb	sy
 8011bee:	f3bf 8f4f 	dsb	sy
 8011bf2:	607b      	str	r3, [r7, #4]
 8011bf4:	e7fe      	b.n	8011bf4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011bf6:	4b0e      	ldr	r3, [pc, #56]	; (8011c30 <vPortValidateInterruptPriority+0x74>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011bfe:	4b0d      	ldr	r3, [pc, #52]	; (8011c34 <vPortValidateInterruptPriority+0x78>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d909      	bls.n	8011c1a <vPortValidateInterruptPriority+0x5e>
 8011c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0a:	f383 8811 	msr	BASEPRI, r3
 8011c0e:	f3bf 8f6f 	isb	sy
 8011c12:	f3bf 8f4f 	dsb	sy
 8011c16:	603b      	str	r3, [r7, #0]
 8011c18:	e7fe      	b.n	8011c18 <vPortValidateInterruptPriority+0x5c>
	}
 8011c1a:	bf00      	nop
 8011c1c:	3714      	adds	r7, #20
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr
 8011c26:	bf00      	nop
 8011c28:	e000e3f0 	.word	0xe000e3f0
 8011c2c:	20026f74 	.word	0x20026f74
 8011c30:	e000ed0c 	.word	0xe000ed0c
 8011c34:	20026f78 	.word	0x20026f78

08011c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d109      	bne.n	8011c60 <xQueueGenericReset+0x28>
 8011c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c50:	f383 8811 	msr	BASEPRI, r3
 8011c54:	f3bf 8f6f 	isb	sy
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	60bb      	str	r3, [r7, #8]
 8011c5e:	e7fe      	b.n	8011c5e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011c60:	f7ff fef4 	bl	8011a4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681a      	ldr	r2, [r3, #0]
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c6c:	68f9      	ldr	r1, [r7, #12]
 8011c6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c70:	fb01 f303 	mul.w	r3, r1, r3
 8011c74:	441a      	add	r2, r3
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c90:	3b01      	subs	r3, #1
 8011c92:	68f9      	ldr	r1, [r7, #12]
 8011c94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c96:	fb01 f303 	mul.w	r3, r1, r3
 8011c9a:	441a      	add	r2, r3
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	22ff      	movs	r2, #255	; 0xff
 8011ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	22ff      	movs	r2, #255	; 0xff
 8011cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d114      	bne.n	8011ce0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	691b      	ldr	r3, [r3, #16]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d01a      	beq.n	8011cf4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	3310      	adds	r3, #16
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f001 fd40 	bl	8013748 <xTaskRemoveFromEventList>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d012      	beq.n	8011cf4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011cce:	4b0d      	ldr	r3, [pc, #52]	; (8011d04 <xQueueGenericReset+0xcc>)
 8011cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cd4:	601a      	str	r2, [r3, #0]
 8011cd6:	f3bf 8f4f 	dsb	sy
 8011cda:	f3bf 8f6f 	isb	sy
 8011cde:	e009      	b.n	8011cf4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	3310      	adds	r3, #16
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ff fcd5 	bl	8011694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	3324      	adds	r3, #36	; 0x24
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ff fcd0 	bl	8011694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011cf4:	f7ff fed8 	bl	8011aa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011cf8:	2301      	movs	r3, #1
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	e000ed04 	.word	0xe000ed04

08011d08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b08e      	sub	sp, #56	; 0x38
 8011d0c:	af02      	add	r7, sp, #8
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d109      	bne.n	8011d30 <xQueueGenericCreateStatic+0x28>
 8011d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d20:	f383 8811 	msr	BASEPRI, r3
 8011d24:	f3bf 8f6f 	isb	sy
 8011d28:	f3bf 8f4f 	dsb	sy
 8011d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d2e:	e7fe      	b.n	8011d2e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d109      	bne.n	8011d4a <xQueueGenericCreateStatic+0x42>
 8011d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3a:	f383 8811 	msr	BASEPRI, r3
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
 8011d48:	e7fe      	b.n	8011d48 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d002      	beq.n	8011d56 <xQueueGenericCreateStatic+0x4e>
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d001      	beq.n	8011d5a <xQueueGenericCreateStatic+0x52>
 8011d56:	2301      	movs	r3, #1
 8011d58:	e000      	b.n	8011d5c <xQueueGenericCreateStatic+0x54>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d109      	bne.n	8011d74 <xQueueGenericCreateStatic+0x6c>
 8011d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	623b      	str	r3, [r7, #32]
 8011d72:	e7fe      	b.n	8011d72 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d102      	bne.n	8011d80 <xQueueGenericCreateStatic+0x78>
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d101      	bne.n	8011d84 <xQueueGenericCreateStatic+0x7c>
 8011d80:	2301      	movs	r3, #1
 8011d82:	e000      	b.n	8011d86 <xQueueGenericCreateStatic+0x7e>
 8011d84:	2300      	movs	r3, #0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d109      	bne.n	8011d9e <xQueueGenericCreateStatic+0x96>
 8011d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d8e:	f383 8811 	msr	BASEPRI, r3
 8011d92:	f3bf 8f6f 	isb	sy
 8011d96:	f3bf 8f4f 	dsb	sy
 8011d9a:	61fb      	str	r3, [r7, #28]
 8011d9c:	e7fe      	b.n	8011d9c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011d9e:	2350      	movs	r3, #80	; 0x50
 8011da0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	2b50      	cmp	r3, #80	; 0x50
 8011da6:	d009      	beq.n	8011dbc <xQueueGenericCreateStatic+0xb4>
 8011da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dac:	f383 8811 	msr	BASEPRI, r3
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	f3bf 8f4f 	dsb	sy
 8011db8:	61bb      	str	r3, [r7, #24]
 8011dba:	e7fe      	b.n	8011dba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d00d      	beq.n	8011de2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc8:	2201      	movs	r2, #1
 8011dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011dce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	68b9      	ldr	r1, [r7, #8]
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f000 f842 	bl	8011e66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3730      	adds	r7, #48	; 0x30
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b08a      	sub	sp, #40	; 0x28
 8011df0:	af02      	add	r7, sp, #8
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	4613      	mov	r3, r2
 8011df8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d109      	bne.n	8011e14 <xQueueGenericCreate+0x28>
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	613b      	str	r3, [r7, #16]
 8011e12:	e7fe      	b.n	8011e12 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d102      	bne.n	8011e20 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	61fb      	str	r3, [r7, #28]
 8011e1e:	e004      	b.n	8011e2a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	68ba      	ldr	r2, [r7, #8]
 8011e24:	fb02 f303 	mul.w	r3, r2, r3
 8011e28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	3350      	adds	r3, #80	; 0x50
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff fa54 	bl	80112dc <pvPortMalloc>
 8011e34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011e36:	69bb      	ldr	r3, [r7, #24]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00f      	beq.n	8011e5c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	3350      	adds	r3, #80	; 0x50
 8011e40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011e42:	69bb      	ldr	r3, [r7, #24]
 8011e44:	2200      	movs	r2, #0
 8011e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011e4a:	79fa      	ldrb	r2, [r7, #7]
 8011e4c:	69bb      	ldr	r3, [r7, #24]
 8011e4e:	9300      	str	r3, [sp, #0]
 8011e50:	4613      	mov	r3, r2
 8011e52:	697a      	ldr	r2, [r7, #20]
 8011e54:	68b9      	ldr	r1, [r7, #8]
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	f000 f805 	bl	8011e66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011e5c:	69bb      	ldr	r3, [r7, #24]
	}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3720      	adds	r7, #32
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b084      	sub	sp, #16
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	60f8      	str	r0, [r7, #12]
 8011e6e:	60b9      	str	r1, [r7, #8]
 8011e70:	607a      	str	r2, [r7, #4]
 8011e72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d103      	bne.n	8011e82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	69ba      	ldr	r2, [r7, #24]
 8011e7e:	601a      	str	r2, [r3, #0]
 8011e80:	e002      	b.n	8011e88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011e82:	69bb      	ldr	r3, [r7, #24]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	68fa      	ldr	r2, [r7, #12]
 8011e8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011e8e:	69bb      	ldr	r3, [r7, #24]
 8011e90:	68ba      	ldr	r2, [r7, #8]
 8011e92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011e94:	2101      	movs	r1, #1
 8011e96:	69b8      	ldr	r0, [r7, #24]
 8011e98:	f7ff fece 	bl	8011c38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	78fa      	ldrb	r2, [r7, #3]
 8011ea0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011ea4:	bf00      	nop
 8011ea6:	3710      	adds	r7, #16
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d00e      	beq.n	8011ed8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011ecc:	2300      	movs	r3, #0
 8011ece:	2200      	movs	r2, #0
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 f906 	bl	80120e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011ed8:	bf00      	nop
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011eea:	2301      	movs	r3, #1
 8011eec:	617b      	str	r3, [r7, #20]
 8011eee:	2300      	movs	r3, #0
 8011ef0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011ef2:	79fb      	ldrb	r3, [r7, #7]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	6939      	ldr	r1, [r7, #16]
 8011ef8:	6978      	ldr	r0, [r7, #20]
 8011efa:	f7ff ff77 	bl	8011dec <xQueueGenericCreate>
 8011efe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f7ff ffd3 	bl	8011eac <prvInitialiseMutex>

		return pxNewQueue;
 8011f06:	68fb      	ldr	r3, [r7, #12]
	}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3718      	adds	r7, #24
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b088      	sub	sp, #32
 8011f14:	af02      	add	r7, sp, #8
 8011f16:	4603      	mov	r3, r0
 8011f18:	6039      	str	r1, [r7, #0]
 8011f1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	617b      	str	r3, [r7, #20]
 8011f20:	2300      	movs	r3, #0
 8011f22:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	9300      	str	r3, [sp, #0]
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	6939      	ldr	r1, [r7, #16]
 8011f2e:	6978      	ldr	r0, [r7, #20]
 8011f30:	f7ff feea 	bl	8011d08 <xQueueGenericCreateStatic>
 8011f34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f7ff ffb8 	bl	8011eac <prvInitialiseMutex>

		return pxNewQueue;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
	}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3718      	adds	r7, #24
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011f46:	b590      	push	{r4, r7, lr}
 8011f48:	b087      	sub	sp, #28
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d109      	bne.n	8011f6c <xQueueGiveMutexRecursive+0x26>
 8011f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f5c:	f383 8811 	msr	BASEPRI, r3
 8011f60:	f3bf 8f6f 	isb	sy
 8011f64:	f3bf 8f4f 	dsb	sy
 8011f68:	60fb      	str	r3, [r7, #12]
 8011f6a:	e7fe      	b.n	8011f6a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	685c      	ldr	r4, [r3, #4]
 8011f70:	f001 fdfc 	bl	8013b6c <xTaskGetCurrentTaskHandle>
 8011f74:	4603      	mov	r3, r0
 8011f76:	429c      	cmp	r4, r3
 8011f78:	d111      	bne.n	8011f9e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	1e5a      	subs	r2, r3, #1
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d105      	bne.n	8011f98 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	2200      	movs	r2, #0
 8011f90:	2100      	movs	r1, #0
 8011f92:	6938      	ldr	r0, [r7, #16]
 8011f94:	f000 f8a6 	bl	80120e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011f98:	2301      	movs	r3, #1
 8011f9a:	617b      	str	r3, [r7, #20]
 8011f9c:	e001      	b.n	8011fa2 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011fa2:	697b      	ldr	r3, [r7, #20]
	}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	371c      	adds	r7, #28
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd90      	pop	{r4, r7, pc}

08011fac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011fac:	b590      	push	{r4, r7, lr}
 8011fae:	b087      	sub	sp, #28
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d109      	bne.n	8011fd4 <xQueueTakeMutexRecursive+0x28>
 8011fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc4:	f383 8811 	msr	BASEPRI, r3
 8011fc8:	f3bf 8f6f 	isb	sy
 8011fcc:	f3bf 8f4f 	dsb	sy
 8011fd0:	60fb      	str	r3, [r7, #12]
 8011fd2:	e7fe      	b.n	8011fd2 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	685c      	ldr	r4, [r3, #4]
 8011fd8:	f001 fdc8 	bl	8013b6c <xTaskGetCurrentTaskHandle>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	429c      	cmp	r4, r3
 8011fe0:	d107      	bne.n	8011ff2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	1c5a      	adds	r2, r3, #1
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011fec:	2301      	movs	r3, #1
 8011fee:	617b      	str	r3, [r7, #20]
 8011ff0:	e00c      	b.n	801200c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011ff2:	6839      	ldr	r1, [r7, #0]
 8011ff4:	6938      	ldr	r0, [r7, #16]
 8011ff6:	f000 fb69 	bl	80126cc <xQueueSemaphoreTake>
 8011ffa:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d004      	beq.n	801200c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	68db      	ldr	r3, [r3, #12]
 8012006:	1c5a      	adds	r2, r3, #1
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801200c:	697b      	ldr	r3, [r7, #20]
	}
 801200e:	4618      	mov	r0, r3
 8012010:	371c      	adds	r7, #28
 8012012:	46bd      	mov	sp, r7
 8012014:	bd90      	pop	{r4, r7, pc}

08012016 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012016:	b580      	push	{r7, lr}
 8012018:	b08a      	sub	sp, #40	; 0x28
 801201a:	af02      	add	r7, sp, #8
 801201c:	60f8      	str	r0, [r7, #12]
 801201e:	60b9      	str	r1, [r7, #8]
 8012020:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d109      	bne.n	801203c <xQueueCreateCountingSemaphoreStatic+0x26>
 8012028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202c:	f383 8811 	msr	BASEPRI, r3
 8012030:	f3bf 8f6f 	isb	sy
 8012034:	f3bf 8f4f 	dsb	sy
 8012038:	61bb      	str	r3, [r7, #24]
 801203a:	e7fe      	b.n	801203a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801203c:	68ba      	ldr	r2, [r7, #8]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	429a      	cmp	r2, r3
 8012042:	d909      	bls.n	8012058 <xQueueCreateCountingSemaphoreStatic+0x42>
 8012044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012048:	f383 8811 	msr	BASEPRI, r3
 801204c:	f3bf 8f6f 	isb	sy
 8012050:	f3bf 8f4f 	dsb	sy
 8012054:	617b      	str	r3, [r7, #20]
 8012056:	e7fe      	b.n	8012056 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012058:	2302      	movs	r3, #2
 801205a:	9300      	str	r3, [sp, #0]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	2100      	movs	r1, #0
 8012062:	68f8      	ldr	r0, [r7, #12]
 8012064:	f7ff fe50 	bl	8011d08 <xQueueGenericCreateStatic>
 8012068:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d002      	beq.n	8012076 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	68ba      	ldr	r2, [r7, #8]
 8012074:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012076:	69fb      	ldr	r3, [r7, #28]
	}
 8012078:	4618      	mov	r0, r3
 801207a:	3720      	adds	r7, #32
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012080:	b580      	push	{r7, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d109      	bne.n	80120a4 <xQueueCreateCountingSemaphore+0x24>
 8012090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012094:	f383 8811 	msr	BASEPRI, r3
 8012098:	f3bf 8f6f 	isb	sy
 801209c:	f3bf 8f4f 	dsb	sy
 80120a0:	613b      	str	r3, [r7, #16]
 80120a2:	e7fe      	b.n	80120a2 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80120a4:	683a      	ldr	r2, [r7, #0]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d909      	bls.n	80120c0 <xQueueCreateCountingSemaphore+0x40>
 80120ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b0:	f383 8811 	msr	BASEPRI, r3
 80120b4:	f3bf 8f6f 	isb	sy
 80120b8:	f3bf 8f4f 	dsb	sy
 80120bc:	60fb      	str	r3, [r7, #12]
 80120be:	e7fe      	b.n	80120be <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80120c0:	2202      	movs	r2, #2
 80120c2:	2100      	movs	r1, #0
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f7ff fe91 	bl	8011dec <xQueueGenericCreate>
 80120ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d002      	beq.n	80120d8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	683a      	ldr	r2, [r7, #0]
 80120d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80120d8:	697b      	ldr	r3, [r7, #20]
	}
 80120da:	4618      	mov	r0, r3
 80120dc:	3718      	adds	r7, #24
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
	...

080120e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b08e      	sub	sp, #56	; 0x38
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	607a      	str	r2, [r7, #4]
 80120f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80120f2:	2300      	movs	r3, #0
 80120f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80120fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d109      	bne.n	8012114 <xQueueGenericSend+0x30>
 8012100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	62bb      	str	r3, [r7, #40]	; 0x28
 8012112:	e7fe      	b.n	8012112 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d103      	bne.n	8012122 <xQueueGenericSend+0x3e>
 801211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801211e:	2b00      	cmp	r3, #0
 8012120:	d101      	bne.n	8012126 <xQueueGenericSend+0x42>
 8012122:	2301      	movs	r3, #1
 8012124:	e000      	b.n	8012128 <xQueueGenericSend+0x44>
 8012126:	2300      	movs	r3, #0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d109      	bne.n	8012140 <xQueueGenericSend+0x5c>
 801212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012130:	f383 8811 	msr	BASEPRI, r3
 8012134:	f3bf 8f6f 	isb	sy
 8012138:	f3bf 8f4f 	dsb	sy
 801213c:	627b      	str	r3, [r7, #36]	; 0x24
 801213e:	e7fe      	b.n	801213e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	2b02      	cmp	r3, #2
 8012144:	d103      	bne.n	801214e <xQueueGenericSend+0x6a>
 8012146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801214a:	2b01      	cmp	r3, #1
 801214c:	d101      	bne.n	8012152 <xQueueGenericSend+0x6e>
 801214e:	2301      	movs	r3, #1
 8012150:	e000      	b.n	8012154 <xQueueGenericSend+0x70>
 8012152:	2300      	movs	r3, #0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d109      	bne.n	801216c <xQueueGenericSend+0x88>
 8012158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215c:	f383 8811 	msr	BASEPRI, r3
 8012160:	f3bf 8f6f 	isb	sy
 8012164:	f3bf 8f4f 	dsb	sy
 8012168:	623b      	str	r3, [r7, #32]
 801216a:	e7fe      	b.n	801216a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801216c:	f001 fd0e 	bl	8013b8c <xTaskGetSchedulerState>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d102      	bne.n	801217c <xQueueGenericSend+0x98>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d101      	bne.n	8012180 <xQueueGenericSend+0x9c>
 801217c:	2301      	movs	r3, #1
 801217e:	e000      	b.n	8012182 <xQueueGenericSend+0x9e>
 8012180:	2300      	movs	r3, #0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d109      	bne.n	801219a <xQueueGenericSend+0xb6>
 8012186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218a:	f383 8811 	msr	BASEPRI, r3
 801218e:	f3bf 8f6f 	isb	sy
 8012192:	f3bf 8f4f 	dsb	sy
 8012196:	61fb      	str	r3, [r7, #28]
 8012198:	e7fe      	b.n	8012198 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801219a:	f7ff fc57 	bl	8011a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d302      	bcc.n	80121b0 <xQueueGenericSend+0xcc>
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	d129      	bne.n	8012204 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80121b0:	683a      	ldr	r2, [r7, #0]
 80121b2:	68b9      	ldr	r1, [r7, #8]
 80121b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121b6:	f000 fc48 	bl	8012a4a <prvCopyDataToQueue>
 80121ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80121bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d010      	beq.n	80121e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80121c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c6:	3324      	adds	r3, #36	; 0x24
 80121c8:	4618      	mov	r0, r3
 80121ca:	f001 fabd 	bl	8013748 <xTaskRemoveFromEventList>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d013      	beq.n	80121fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80121d4:	4b3f      	ldr	r3, [pc, #252]	; (80122d4 <xQueueGenericSend+0x1f0>)
 80121d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121da:	601a      	str	r2, [r3, #0]
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	f3bf 8f6f 	isb	sy
 80121e4:	e00a      	b.n	80121fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80121e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d007      	beq.n	80121fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80121ec:	4b39      	ldr	r3, [pc, #228]	; (80122d4 <xQueueGenericSend+0x1f0>)
 80121ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121f2:	601a      	str	r2, [r3, #0]
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80121fc:	f7ff fc54 	bl	8011aa8 <vPortExitCritical>
				return pdPASS;
 8012200:	2301      	movs	r3, #1
 8012202:	e063      	b.n	80122cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d103      	bne.n	8012212 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801220a:	f7ff fc4d 	bl	8011aa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801220e:	2300      	movs	r3, #0
 8012210:	e05c      	b.n	80122cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012214:	2b00      	cmp	r3, #0
 8012216:	d106      	bne.n	8012226 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012218:	f107 0314 	add.w	r3, r7, #20
 801221c:	4618      	mov	r0, r3
 801221e:	f001 faf7 	bl	8013810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012222:	2301      	movs	r3, #1
 8012224:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012226:	f7ff fc3f 	bl	8011aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801222a:	f000 ffd9 	bl	80131e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801222e:	f7ff fc0d 	bl	8011a4c <vPortEnterCritical>
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012238:	b25b      	sxtb	r3, r3
 801223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801223e:	d103      	bne.n	8012248 <xQueueGenericSend+0x164>
 8012240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012242:	2200      	movs	r2, #0
 8012244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801224e:	b25b      	sxtb	r3, r3
 8012250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012254:	d103      	bne.n	801225e <xQueueGenericSend+0x17a>
 8012256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012258:	2200      	movs	r2, #0
 801225a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801225e:	f7ff fc23 	bl	8011aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012262:	1d3a      	adds	r2, r7, #4
 8012264:	f107 0314 	add.w	r3, r7, #20
 8012268:	4611      	mov	r1, r2
 801226a:	4618      	mov	r0, r3
 801226c:	f001 fae6 	bl	801383c <xTaskCheckForTimeOut>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d124      	bne.n	80122c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012278:	f000 fcdf 	bl	8012c3a <prvIsQueueFull>
 801227c:	4603      	mov	r3, r0
 801227e:	2b00      	cmp	r3, #0
 8012280:	d018      	beq.n	80122b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012284:	3310      	adds	r3, #16
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	4611      	mov	r1, r2
 801228a:	4618      	mov	r0, r3
 801228c:	f001 fa0e 	bl	80136ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012292:	f000 fc6a 	bl	8012b6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012296:	f000 ffe9 	bl	801326c <xTaskResumeAll>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	f47f af7c 	bne.w	801219a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80122a2:	4b0c      	ldr	r3, [pc, #48]	; (80122d4 <xQueueGenericSend+0x1f0>)
 80122a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122a8:	601a      	str	r2, [r3, #0]
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	f3bf 8f6f 	isb	sy
 80122b2:	e772      	b.n	801219a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80122b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122b6:	f000 fc58 	bl	8012b6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122ba:	f000 ffd7 	bl	801326c <xTaskResumeAll>
 80122be:	e76c      	b.n	801219a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80122c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122c2:	f000 fc52 	bl	8012b6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122c6:	f000 ffd1 	bl	801326c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80122ca:	2300      	movs	r3, #0
		}
	}
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3738      	adds	r7, #56	; 0x38
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	e000ed04 	.word	0xe000ed04

080122d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b08e      	sub	sp, #56	; 0x38
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	607a      	str	r2, [r7, #4]
 80122e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80122ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d109      	bne.n	8012304 <xQueueGenericSendFromISR+0x2c>
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	627b      	str	r3, [r7, #36]	; 0x24
 8012302:	e7fe      	b.n	8012302 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d103      	bne.n	8012312 <xQueueGenericSendFromISR+0x3a>
 801230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <xQueueGenericSendFromISR+0x3e>
 8012312:	2301      	movs	r3, #1
 8012314:	e000      	b.n	8012318 <xQueueGenericSendFromISR+0x40>
 8012316:	2300      	movs	r3, #0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d109      	bne.n	8012330 <xQueueGenericSendFromISR+0x58>
 801231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	623b      	str	r3, [r7, #32]
 801232e:	e7fe      	b.n	801232e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	2b02      	cmp	r3, #2
 8012334:	d103      	bne.n	801233e <xQueueGenericSendFromISR+0x66>
 8012336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801233a:	2b01      	cmp	r3, #1
 801233c:	d101      	bne.n	8012342 <xQueueGenericSendFromISR+0x6a>
 801233e:	2301      	movs	r3, #1
 8012340:	e000      	b.n	8012344 <xQueueGenericSendFromISR+0x6c>
 8012342:	2300      	movs	r3, #0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d109      	bne.n	801235c <xQueueGenericSendFromISR+0x84>
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	f383 8811 	msr	BASEPRI, r3
 8012350:	f3bf 8f6f 	isb	sy
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	61fb      	str	r3, [r7, #28]
 801235a:	e7fe      	b.n	801235a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801235c:	f7ff fc2e 	bl	8011bbc <vPortValidateInterruptPriority>
	__asm volatile
 8012360:	f3ef 8211 	mrs	r2, BASEPRI
 8012364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012368:	f383 8811 	msr	BASEPRI, r3
 801236c:	f3bf 8f6f 	isb	sy
 8012370:	f3bf 8f4f 	dsb	sy
 8012374:	61ba      	str	r2, [r7, #24]
 8012376:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012378:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801237a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012384:	429a      	cmp	r2, r3
 8012386:	d302      	bcc.n	801238e <xQueueGenericSendFromISR+0xb6>
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	2b02      	cmp	r3, #2
 801238c:	d12c      	bne.n	80123e8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012398:	683a      	ldr	r2, [r7, #0]
 801239a:	68b9      	ldr	r1, [r7, #8]
 801239c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801239e:	f000 fb54 	bl	8012a4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80123a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80123a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123aa:	d112      	bne.n	80123d2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d016      	beq.n	80123e2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b6:	3324      	adds	r3, #36	; 0x24
 80123b8:	4618      	mov	r0, r3
 80123ba:	f001 f9c5 	bl	8013748 <xTaskRemoveFromEventList>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00e      	beq.n	80123e2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d00b      	beq.n	80123e2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2201      	movs	r2, #1
 80123ce:	601a      	str	r2, [r3, #0]
 80123d0:	e007      	b.n	80123e2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80123d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80123d6:	3301      	adds	r3, #1
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	b25a      	sxtb	r2, r3
 80123dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80123e2:	2301      	movs	r3, #1
 80123e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80123e6:	e001      	b.n	80123ec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80123e8:	2300      	movs	r3, #0
 80123ea:	637b      	str	r3, [r7, #52]	; 0x34
 80123ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ee:	613b      	str	r3, [r7, #16]
	__asm volatile
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80123f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3738      	adds	r7, #56	; 0x38
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b08e      	sub	sp, #56	; 0x38
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	2b00      	cmp	r3, #0
 8012412:	d109      	bne.n	8012428 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012418:	f383 8811 	msr	BASEPRI, r3
 801241c:	f3bf 8f6f 	isb	sy
 8012420:	f3bf 8f4f 	dsb	sy
 8012424:	623b      	str	r3, [r7, #32]
 8012426:	e7fe      	b.n	8012426 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801242c:	2b00      	cmp	r3, #0
 801242e:	d009      	beq.n	8012444 <xQueueGiveFromISR+0x44>
 8012430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	61fb      	str	r3, [r7, #28]
 8012442:	e7fe      	b.n	8012442 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d103      	bne.n	8012454 <xQueueGiveFromISR+0x54>
 801244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d101      	bne.n	8012458 <xQueueGiveFromISR+0x58>
 8012454:	2301      	movs	r3, #1
 8012456:	e000      	b.n	801245a <xQueueGiveFromISR+0x5a>
 8012458:	2300      	movs	r3, #0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d109      	bne.n	8012472 <xQueueGiveFromISR+0x72>
 801245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012462:	f383 8811 	msr	BASEPRI, r3
 8012466:	f3bf 8f6f 	isb	sy
 801246a:	f3bf 8f4f 	dsb	sy
 801246e:	61bb      	str	r3, [r7, #24]
 8012470:	e7fe      	b.n	8012470 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012472:	f7ff fba3 	bl	8011bbc <vPortValidateInterruptPriority>
	__asm volatile
 8012476:	f3ef 8211 	mrs	r2, BASEPRI
 801247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801247e:	f383 8811 	msr	BASEPRI, r3
 8012482:	f3bf 8f6f 	isb	sy
 8012486:	f3bf 8f4f 	dsb	sy
 801248a:	617a      	str	r2, [r7, #20]
 801248c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801248e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012490:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012496:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801249c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801249e:	429a      	cmp	r2, r3
 80124a0:	d22b      	bcs.n	80124fa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80124ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ae:	1c5a      	adds	r2, r3, #1
 80124b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80124b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80124b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124bc:	d112      	bne.n	80124e4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d016      	beq.n	80124f4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c8:	3324      	adds	r3, #36	; 0x24
 80124ca:	4618      	mov	r0, r3
 80124cc:	f001 f93c 	bl	8013748 <xTaskRemoveFromEventList>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00e      	beq.n	80124f4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d00b      	beq.n	80124f4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	2201      	movs	r2, #1
 80124e0:	601a      	str	r2, [r3, #0]
 80124e2:	e007      	b.n	80124f4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80124e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124e8:	3301      	adds	r3, #1
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	b25a      	sxtb	r2, r3
 80124ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80124f4:	2301      	movs	r3, #1
 80124f6:	637b      	str	r3, [r7, #52]	; 0x34
 80124f8:	e001      	b.n	80124fe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80124fa:	2300      	movs	r3, #0
 80124fc:	637b      	str	r3, [r7, #52]	; 0x34
 80124fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012500:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801250a:	4618      	mov	r0, r3
 801250c:	3738      	adds	r7, #56	; 0x38
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}
	...

08012514 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b08c      	sub	sp, #48	; 0x30
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012520:	2300      	movs	r3, #0
 8012522:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	2b00      	cmp	r3, #0
 801252c:	d109      	bne.n	8012542 <xQueueReceive+0x2e>
	__asm volatile
 801252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012532:	f383 8811 	msr	BASEPRI, r3
 8012536:	f3bf 8f6f 	isb	sy
 801253a:	f3bf 8f4f 	dsb	sy
 801253e:	623b      	str	r3, [r7, #32]
 8012540:	e7fe      	b.n	8012540 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d103      	bne.n	8012550 <xQueueReceive+0x3c>
 8012548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801254c:	2b00      	cmp	r3, #0
 801254e:	d101      	bne.n	8012554 <xQueueReceive+0x40>
 8012550:	2301      	movs	r3, #1
 8012552:	e000      	b.n	8012556 <xQueueReceive+0x42>
 8012554:	2300      	movs	r3, #0
 8012556:	2b00      	cmp	r3, #0
 8012558:	d109      	bne.n	801256e <xQueueReceive+0x5a>
 801255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255e:	f383 8811 	msr	BASEPRI, r3
 8012562:	f3bf 8f6f 	isb	sy
 8012566:	f3bf 8f4f 	dsb	sy
 801256a:	61fb      	str	r3, [r7, #28]
 801256c:	e7fe      	b.n	801256c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801256e:	f001 fb0d 	bl	8013b8c <xTaskGetSchedulerState>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d102      	bne.n	801257e <xQueueReceive+0x6a>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d101      	bne.n	8012582 <xQueueReceive+0x6e>
 801257e:	2301      	movs	r3, #1
 8012580:	e000      	b.n	8012584 <xQueueReceive+0x70>
 8012582:	2300      	movs	r3, #0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d109      	bne.n	801259c <xQueueReceive+0x88>
 8012588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258c:	f383 8811 	msr	BASEPRI, r3
 8012590:	f3bf 8f6f 	isb	sy
 8012594:	f3bf 8f4f 	dsb	sy
 8012598:	61bb      	str	r3, [r7, #24]
 801259a:	e7fe      	b.n	801259a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801259c:	f7ff fa56 	bl	8011a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d01f      	beq.n	80125ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80125ac:	68b9      	ldr	r1, [r7, #8]
 80125ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125b0:	f000 fab5 	bl	8012b1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80125b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b6:	1e5a      	subs	r2, r3, #1
 80125b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125be:	691b      	ldr	r3, [r3, #16]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00f      	beq.n	80125e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c6:	3310      	adds	r3, #16
 80125c8:	4618      	mov	r0, r3
 80125ca:	f001 f8bd 	bl	8013748 <xTaskRemoveFromEventList>
 80125ce:	4603      	mov	r3, r0
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d007      	beq.n	80125e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80125d4:	4b3c      	ldr	r3, [pc, #240]	; (80126c8 <xQueueReceive+0x1b4>)
 80125d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125da:	601a      	str	r2, [r3, #0]
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80125e4:	f7ff fa60 	bl	8011aa8 <vPortExitCritical>
				return pdPASS;
 80125e8:	2301      	movs	r3, #1
 80125ea:	e069      	b.n	80126c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d103      	bne.n	80125fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80125f2:	f7ff fa59 	bl	8011aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80125f6:	2300      	movs	r3, #0
 80125f8:	e062      	b.n	80126c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80125fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d106      	bne.n	801260e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012600:	f107 0310 	add.w	r3, r7, #16
 8012604:	4618      	mov	r0, r3
 8012606:	f001 f903 	bl	8013810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801260a:	2301      	movs	r3, #1
 801260c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801260e:	f7ff fa4b 	bl	8011aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012612:	f000 fde5 	bl	80131e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012616:	f7ff fa19 	bl	8011a4c <vPortEnterCritical>
 801261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012620:	b25b      	sxtb	r3, r3
 8012622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012626:	d103      	bne.n	8012630 <xQueueReceive+0x11c>
 8012628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262a:	2200      	movs	r2, #0
 801262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012636:	b25b      	sxtb	r3, r3
 8012638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801263c:	d103      	bne.n	8012646 <xQueueReceive+0x132>
 801263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012640:	2200      	movs	r2, #0
 8012642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012646:	f7ff fa2f 	bl	8011aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801264a:	1d3a      	adds	r2, r7, #4
 801264c:	f107 0310 	add.w	r3, r7, #16
 8012650:	4611      	mov	r1, r2
 8012652:	4618      	mov	r0, r3
 8012654:	f001 f8f2 	bl	801383c <xTaskCheckForTimeOut>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d123      	bne.n	80126a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801265e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012660:	f000 fad5 	bl	8012c0e <prvIsQueueEmpty>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d017      	beq.n	801269a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	3324      	adds	r3, #36	; 0x24
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	4611      	mov	r1, r2
 8012672:	4618      	mov	r0, r3
 8012674:	f001 f81a 	bl	80136ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801267a:	f000 fa76 	bl	8012b6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801267e:	f000 fdf5 	bl	801326c <xTaskResumeAll>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d189      	bne.n	801259c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012688:	4b0f      	ldr	r3, [pc, #60]	; (80126c8 <xQueueReceive+0x1b4>)
 801268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801268e:	601a      	str	r2, [r3, #0]
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	f3bf 8f6f 	isb	sy
 8012698:	e780      	b.n	801259c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801269a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801269c:	f000 fa65 	bl	8012b6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80126a0:	f000 fde4 	bl	801326c <xTaskResumeAll>
 80126a4:	e77a      	b.n	801259c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80126a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126a8:	f000 fa5f 	bl	8012b6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80126ac:	f000 fdde 	bl	801326c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126b2:	f000 faac 	bl	8012c0e <prvIsQueueEmpty>
 80126b6:	4603      	mov	r3, r0
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	f43f af6f 	beq.w	801259c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80126be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3730      	adds	r7, #48	; 0x30
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	e000ed04 	.word	0xe000ed04

080126cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b08e      	sub	sp, #56	; 0x38
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80126d6:	2300      	movs	r3, #0
 80126d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80126de:	2300      	movs	r3, #0
 80126e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80126e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d109      	bne.n	80126fc <xQueueSemaphoreTake+0x30>
 80126e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ec:	f383 8811 	msr	BASEPRI, r3
 80126f0:	f3bf 8f6f 	isb	sy
 80126f4:	f3bf 8f4f 	dsb	sy
 80126f8:	623b      	str	r3, [r7, #32]
 80126fa:	e7fe      	b.n	80126fa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012700:	2b00      	cmp	r3, #0
 8012702:	d009      	beq.n	8012718 <xQueueSemaphoreTake+0x4c>
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	61fb      	str	r3, [r7, #28]
 8012716:	e7fe      	b.n	8012716 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012718:	f001 fa38 	bl	8013b8c <xTaskGetSchedulerState>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d102      	bne.n	8012728 <xQueueSemaphoreTake+0x5c>
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d101      	bne.n	801272c <xQueueSemaphoreTake+0x60>
 8012728:	2301      	movs	r3, #1
 801272a:	e000      	b.n	801272e <xQueueSemaphoreTake+0x62>
 801272c:	2300      	movs	r3, #0
 801272e:	2b00      	cmp	r3, #0
 8012730:	d109      	bne.n	8012746 <xQueueSemaphoreTake+0x7a>
 8012732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012736:	f383 8811 	msr	BASEPRI, r3
 801273a:	f3bf 8f6f 	isb	sy
 801273e:	f3bf 8f4f 	dsb	sy
 8012742:	61bb      	str	r3, [r7, #24]
 8012744:	e7fe      	b.n	8012744 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012746:	f7ff f981 	bl	8011a4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801274e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012752:	2b00      	cmp	r3, #0
 8012754:	d024      	beq.n	80127a0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012758:	1e5a      	subs	r2, r3, #1
 801275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d104      	bne.n	8012770 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012766:	f001 fb8d 	bl	8013e84 <pvTaskIncrementMutexHeldCount>
 801276a:	4602      	mov	r2, r0
 801276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d00f      	beq.n	8012798 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277a:	3310      	adds	r3, #16
 801277c:	4618      	mov	r0, r3
 801277e:	f000 ffe3 	bl	8013748 <xTaskRemoveFromEventList>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d007      	beq.n	8012798 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012788:	4b53      	ldr	r3, [pc, #332]	; (80128d8 <xQueueSemaphoreTake+0x20c>)
 801278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801278e:	601a      	str	r2, [r3, #0]
 8012790:	f3bf 8f4f 	dsb	sy
 8012794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012798:	f7ff f986 	bl	8011aa8 <vPortExitCritical>
				return pdPASS;
 801279c:	2301      	movs	r3, #1
 801279e:	e096      	b.n	80128ce <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d110      	bne.n	80127c8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80127a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d009      	beq.n	80127c0 <xQueueSemaphoreTake+0xf4>
 80127ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	617b      	str	r3, [r7, #20]
 80127be:	e7fe      	b.n	80127be <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80127c0:	f7ff f972 	bl	8011aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80127c4:	2300      	movs	r3, #0
 80127c6:	e082      	b.n	80128ce <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80127c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d106      	bne.n	80127dc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80127ce:	f107 030c 	add.w	r3, r7, #12
 80127d2:	4618      	mov	r0, r3
 80127d4:	f001 f81c 	bl	8013810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80127d8:	2301      	movs	r3, #1
 80127da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80127dc:	f7ff f964 	bl	8011aa8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80127e0:	f000 fcfe 	bl	80131e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80127e4:	f7ff f932 	bl	8011a4c <vPortEnterCritical>
 80127e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127ee:	b25b      	sxtb	r3, r3
 80127f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127f4:	d103      	bne.n	80127fe <xQueueSemaphoreTake+0x132>
 80127f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f8:	2200      	movs	r2, #0
 80127fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012804:	b25b      	sxtb	r3, r3
 8012806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801280a:	d103      	bne.n	8012814 <xQueueSemaphoreTake+0x148>
 801280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280e:	2200      	movs	r2, #0
 8012810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012814:	f7ff f948 	bl	8011aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012818:	463a      	mov	r2, r7
 801281a:	f107 030c 	add.w	r3, r7, #12
 801281e:	4611      	mov	r1, r2
 8012820:	4618      	mov	r0, r3
 8012822:	f001 f80b 	bl	801383c <xTaskCheckForTimeOut>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d132      	bne.n	8012892 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801282c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801282e:	f000 f9ee 	bl	8012c0e <prvIsQueueEmpty>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d026      	beq.n	8012886 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d109      	bne.n	8012854 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012840:	f7ff f904 	bl	8011a4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	f001 f9bd 	bl	8013bc8 <xTaskPriorityInherit>
 801284e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012850:	f7ff f92a 	bl	8011aa8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012856:	3324      	adds	r3, #36	; 0x24
 8012858:	683a      	ldr	r2, [r7, #0]
 801285a:	4611      	mov	r1, r2
 801285c:	4618      	mov	r0, r3
 801285e:	f000 ff25 	bl	80136ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012864:	f000 f981 	bl	8012b6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012868:	f000 fd00 	bl	801326c <xTaskResumeAll>
 801286c:	4603      	mov	r3, r0
 801286e:	2b00      	cmp	r3, #0
 8012870:	f47f af69 	bne.w	8012746 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012874:	4b18      	ldr	r3, [pc, #96]	; (80128d8 <xQueueSemaphoreTake+0x20c>)
 8012876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801287a:	601a      	str	r2, [r3, #0]
 801287c:	f3bf 8f4f 	dsb	sy
 8012880:	f3bf 8f6f 	isb	sy
 8012884:	e75f      	b.n	8012746 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012888:	f000 f96f 	bl	8012b6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801288c:	f000 fcee 	bl	801326c <xTaskResumeAll>
 8012890:	e759      	b.n	8012746 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012894:	f000 f969 	bl	8012b6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012898:	f000 fce8 	bl	801326c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801289c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801289e:	f000 f9b6 	bl	8012c0e <prvIsQueueEmpty>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f43f af4e 	beq.w	8012746 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80128aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00d      	beq.n	80128cc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80128b0:	f7ff f8cc 	bl	8011a4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80128b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128b6:	f000 f8b0 	bl	8012a1a <prvGetDisinheritPriorityAfterTimeout>
 80128ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80128bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128be:	685b      	ldr	r3, [r3, #4]
 80128c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128c2:	4618      	mov	r0, r3
 80128c4:	f001 fa5a 	bl	8013d7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80128c8:	f7ff f8ee 	bl	8011aa8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80128cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3738      	adds	r7, #56	; 0x38
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	e000ed04 	.word	0xe000ed04

080128dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b08e      	sub	sp, #56	; 0x38
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80128ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d109      	bne.n	8012906 <xQueueReceiveFromISR+0x2a>
 80128f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	623b      	str	r3, [r7, #32]
 8012904:	e7fe      	b.n	8012904 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d103      	bne.n	8012914 <xQueueReceiveFromISR+0x38>
 801290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012910:	2b00      	cmp	r3, #0
 8012912:	d101      	bne.n	8012918 <xQueueReceiveFromISR+0x3c>
 8012914:	2301      	movs	r3, #1
 8012916:	e000      	b.n	801291a <xQueueReceiveFromISR+0x3e>
 8012918:	2300      	movs	r3, #0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d109      	bne.n	8012932 <xQueueReceiveFromISR+0x56>
 801291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012922:	f383 8811 	msr	BASEPRI, r3
 8012926:	f3bf 8f6f 	isb	sy
 801292a:	f3bf 8f4f 	dsb	sy
 801292e:	61fb      	str	r3, [r7, #28]
 8012930:	e7fe      	b.n	8012930 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012932:	f7ff f943 	bl	8011bbc <vPortValidateInterruptPriority>
	__asm volatile
 8012936:	f3ef 8211 	mrs	r2, BASEPRI
 801293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293e:	f383 8811 	msr	BASEPRI, r3
 8012942:	f3bf 8f6f 	isb	sy
 8012946:	f3bf 8f4f 	dsb	sy
 801294a:	61ba      	str	r2, [r7, #24]
 801294c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801294e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012950:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012956:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295a:	2b00      	cmp	r3, #0
 801295c:	d02f      	beq.n	80129be <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012968:	68b9      	ldr	r1, [r7, #8]
 801296a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801296c:	f000 f8d7 	bl	8012b1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012972:	1e5a      	subs	r2, r3, #1
 8012974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012976:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012980:	d112      	bne.n	80129a8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012984:	691b      	ldr	r3, [r3, #16]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d016      	beq.n	80129b8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298c:	3310      	adds	r3, #16
 801298e:	4618      	mov	r0, r3
 8012990:	f000 feda 	bl	8013748 <xTaskRemoveFromEventList>
 8012994:	4603      	mov	r3, r0
 8012996:	2b00      	cmp	r3, #0
 8012998:	d00e      	beq.n	80129b8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00b      	beq.n	80129b8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2201      	movs	r2, #1
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	e007      	b.n	80129b8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80129a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129ac:	3301      	adds	r3, #1
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	b25a      	sxtb	r2, r3
 80129b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80129b8:	2301      	movs	r3, #1
 80129ba:	637b      	str	r3, [r7, #52]	; 0x34
 80129bc:	e001      	b.n	80129c2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80129be:	2300      	movs	r3, #0
 80129c0:	637b      	str	r3, [r7, #52]	; 0x34
 80129c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80129cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3738      	adds	r7, #56	; 0x38
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80129d6:	b580      	push	{r7, lr}
 80129d8:	b084      	sub	sp, #16
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d109      	bne.n	80129fc <vQueueDelete+0x26>
	__asm volatile
 80129e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ec:	f383 8811 	msr	BASEPRI, r3
 80129f0:	f3bf 8f6f 	isb	sy
 80129f4:	f3bf 8f4f 	dsb	sy
 80129f8:	60bb      	str	r3, [r7, #8]
 80129fa:	e7fe      	b.n	80129fa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80129fc:	68f8      	ldr	r0, [r7, #12]
 80129fe:	f000 f95d 	bl	8012cbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d102      	bne.n	8012a12 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8012a0c:	68f8      	ldr	r0, [r7, #12]
 8012a0e:	f7fe fd2b 	bl	8011468 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012a12:	bf00      	nop
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012a1a:	b480      	push	{r7}
 8012a1c:	b085      	sub	sp, #20
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d006      	beq.n	8012a38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012a34:	60fb      	str	r3, [r7, #12]
 8012a36:	e001      	b.n	8012a3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
	}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3714      	adds	r7, #20
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr

08012a4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012a4a:	b580      	push	{r7, lr}
 8012a4c:	b086      	sub	sp, #24
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	60f8      	str	r0, [r7, #12]
 8012a52:	60b9      	str	r1, [r7, #8]
 8012a54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012a56:	2300      	movs	r3, #0
 8012a58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10d      	bne.n	8012a84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d14d      	bne.n	8012b0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	f001 f915 	bl	8013ca4 <xTaskPriorityDisinherit>
 8012a7a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	605a      	str	r2, [r3, #4]
 8012a82:	e043      	b.n	8012b0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d119      	bne.n	8012abe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	6898      	ldr	r0, [r3, #8]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a92:	461a      	mov	r2, r3
 8012a94:	68b9      	ldr	r1, [r7, #8]
 8012a96:	f007 fc8f 	bl	801a3b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	689a      	ldr	r2, [r3, #8]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aa2:	441a      	add	r2, r3
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	689a      	ldr	r2, [r3, #8]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d32b      	bcc.n	8012b0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	609a      	str	r2, [r3, #8]
 8012abc:	e026      	b.n	8012b0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	68d8      	ldr	r0, [r3, #12]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	68b9      	ldr	r1, [r7, #8]
 8012aca:	f007 fc75 	bl	801a3b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	68da      	ldr	r2, [r3, #12]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ad6:	425b      	negs	r3, r3
 8012ad8:	441a      	add	r2, r3
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	68da      	ldr	r2, [r3, #12]
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d207      	bcs.n	8012afa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	685a      	ldr	r2, [r3, #4]
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012af2:	425b      	negs	r3, r3
 8012af4:	441a      	add	r2, r3
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2b02      	cmp	r3, #2
 8012afe:	d105      	bne.n	8012b0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d002      	beq.n	8012b0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	3b01      	subs	r3, #1
 8012b0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	1c5a      	adds	r2, r3, #1
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012b14:	697b      	ldr	r3, [r7, #20]
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3718      	adds	r7, #24
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b082      	sub	sp, #8
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
 8012b26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d018      	beq.n	8012b62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	68da      	ldr	r2, [r3, #12]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b38:	441a      	add	r2, r3
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	68da      	ldr	r2, [r3, #12]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d303      	bcc.n	8012b52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	68d9      	ldr	r1, [r3, #12]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	6838      	ldr	r0, [r7, #0]
 8012b5e:	f007 fc2b 	bl	801a3b8 <memcpy>
	}
}
 8012b62:	bf00      	nop
 8012b64:	3708      	adds	r7, #8
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b084      	sub	sp, #16
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012b72:	f7fe ff6b 	bl	8011a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b7e:	e011      	b.n	8012ba4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d012      	beq.n	8012bae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	3324      	adds	r3, #36	; 0x24
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f000 fddb 	bl	8013748 <xTaskRemoveFromEventList>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d001      	beq.n	8012b9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012b98:	f000 feb0 	bl	80138fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012b9c:	7bfb      	ldrb	r3, [r7, #15]
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	dce9      	bgt.n	8012b80 <prvUnlockQueue+0x16>
 8012bac:	e000      	b.n	8012bb0 <prvUnlockQueue+0x46>
					break;
 8012bae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	22ff      	movs	r2, #255	; 0xff
 8012bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012bb8:	f7fe ff76 	bl	8011aa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012bbc:	f7fe ff46 	bl	8011a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bc8:	e011      	b.n	8012bee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	691b      	ldr	r3, [r3, #16]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d012      	beq.n	8012bf8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	3310      	adds	r3, #16
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f000 fdb6 	bl	8013748 <xTaskRemoveFromEventList>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d001      	beq.n	8012be6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012be2:	f000 fe8b 	bl	80138fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012be6:	7bbb      	ldrb	r3, [r7, #14]
 8012be8:	3b01      	subs	r3, #1
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	dce9      	bgt.n	8012bca <prvUnlockQueue+0x60>
 8012bf6:	e000      	b.n	8012bfa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012bf8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	22ff      	movs	r2, #255	; 0xff
 8012bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012c02:	f7fe ff51 	bl	8011aa8 <vPortExitCritical>
}
 8012c06:	bf00      	nop
 8012c08:	3710      	adds	r7, #16
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b084      	sub	sp, #16
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c16:	f7fe ff19 	bl	8011a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d102      	bne.n	8012c28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012c22:	2301      	movs	r3, #1
 8012c24:	60fb      	str	r3, [r7, #12]
 8012c26:	e001      	b.n	8012c2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c2c:	f7fe ff3c 	bl	8011aa8 <vPortExitCritical>

	return xReturn;
 8012c30:	68fb      	ldr	r3, [r7, #12]
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3710      	adds	r7, #16
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b084      	sub	sp, #16
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c42:	f7fe ff03 	bl	8011a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d102      	bne.n	8012c58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012c52:	2301      	movs	r3, #1
 8012c54:	60fb      	str	r3, [r7, #12]
 8012c56:	e001      	b.n	8012c5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c5c:	f7fe ff24 	bl	8011aa8 <vPortExitCritical>

	return xReturn;
 8012c60:	68fb      	ldr	r3, [r7, #12]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3710      	adds	r7, #16
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
	...

08012c6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b085      	sub	sp, #20
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c76:	2300      	movs	r3, #0
 8012c78:	60fb      	str	r3, [r7, #12]
 8012c7a:	e014      	b.n	8012ca6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012c7c:	4a0e      	ldr	r2, [pc, #56]	; (8012cb8 <vQueueAddToRegistry+0x4c>)
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d10b      	bne.n	8012ca0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012c88:	490b      	ldr	r1, [pc, #44]	; (8012cb8 <vQueueAddToRegistry+0x4c>)
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	683a      	ldr	r2, [r7, #0]
 8012c8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012c92:	4a09      	ldr	r2, [pc, #36]	; (8012cb8 <vQueueAddToRegistry+0x4c>)
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	00db      	lsls	r3, r3, #3
 8012c98:	4413      	add	r3, r2
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012c9e:	e005      	b.n	8012cac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	60fb      	str	r3, [r7, #12]
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2b0b      	cmp	r3, #11
 8012caa:	d9e7      	bls.n	8012c7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012cac:	bf00      	nop
 8012cae:	3714      	adds	r7, #20
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr
 8012cb8:	20028944 	.word	0x20028944

08012cbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b085      	sub	sp, #20
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60fb      	str	r3, [r7, #12]
 8012cc8:	e016      	b.n	8012cf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012cca:	4a10      	ldr	r2, [pc, #64]	; (8012d0c <vQueueUnregisterQueue+0x50>)
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	00db      	lsls	r3, r3, #3
 8012cd0:	4413      	add	r3, r2
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d10b      	bne.n	8012cf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012cda:	4a0c      	ldr	r2, [pc, #48]	; (8012d0c <vQueueUnregisterQueue+0x50>)
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	2100      	movs	r1, #0
 8012ce0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012ce4:	4a09      	ldr	r2, [pc, #36]	; (8012d0c <vQueueUnregisterQueue+0x50>)
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	4413      	add	r3, r2
 8012cec:	2200      	movs	r2, #0
 8012cee:	605a      	str	r2, [r3, #4]
				break;
 8012cf0:	e005      	b.n	8012cfe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	60fb      	str	r3, [r7, #12]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2b0b      	cmp	r3, #11
 8012cfc:	d9e5      	bls.n	8012cca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012cfe:	bf00      	nop
 8012d00:	3714      	adds	r7, #20
 8012d02:	46bd      	mov	sp, r7
 8012d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d08:	4770      	bx	lr
 8012d0a:	bf00      	nop
 8012d0c:	20028944 	.word	0x20028944

08012d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b086      	sub	sp, #24
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012d20:	f7fe fe94 	bl	8011a4c <vPortEnterCritical>
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d2a:	b25b      	sxtb	r3, r3
 8012d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d30:	d103      	bne.n	8012d3a <vQueueWaitForMessageRestricted+0x2a>
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	2200      	movs	r2, #0
 8012d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d40:	b25b      	sxtb	r3, r3
 8012d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d46:	d103      	bne.n	8012d50 <vQueueWaitForMessageRestricted+0x40>
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d50:	f7fe feaa 	bl	8011aa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d106      	bne.n	8012d6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	3324      	adds	r3, #36	; 0x24
 8012d60:	687a      	ldr	r2, [r7, #4]
 8012d62:	68b9      	ldr	r1, [r7, #8]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f000 fcc5 	bl	80136f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012d6a:	6978      	ldr	r0, [r7, #20]
 8012d6c:	f7ff fefd 	bl	8012b6a <prvUnlockQueue>
	}
 8012d70:	bf00      	nop
 8012d72:	3718      	adds	r7, #24
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b08e      	sub	sp, #56	; 0x38
 8012d7c:	af04      	add	r7, sp, #16
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d109      	bne.n	8012da0 <xTaskCreateStatic+0x28>
 8012d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d90:	f383 8811 	msr	BASEPRI, r3
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	623b      	str	r3, [r7, #32]
 8012d9e:	e7fe      	b.n	8012d9e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8012da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d109      	bne.n	8012dba <xTaskCreateStatic+0x42>
 8012da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012daa:	f383 8811 	msr	BASEPRI, r3
 8012dae:	f3bf 8f6f 	isb	sy
 8012db2:	f3bf 8f4f 	dsb	sy
 8012db6:	61fb      	str	r3, [r7, #28]
 8012db8:	e7fe      	b.n	8012db8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012dba:	2364      	movs	r3, #100	; 0x64
 8012dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	2b64      	cmp	r3, #100	; 0x64
 8012dc2:	d009      	beq.n	8012dd8 <xTaskCreateStatic+0x60>
 8012dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	61bb      	str	r3, [r7, #24]
 8012dd6:	e7fe      	b.n	8012dd6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d01e      	beq.n	8012e1c <xTaskCreateStatic+0xa4>
 8012dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d01b      	beq.n	8012e1c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df0:	2202      	movs	r2, #2
 8012df2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012df6:	2300      	movs	r3, #0
 8012df8:	9303      	str	r3, [sp, #12]
 8012dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfc:	9302      	str	r3, [sp, #8]
 8012dfe:	f107 0314 	add.w	r3, r7, #20
 8012e02:	9301      	str	r3, [sp, #4]
 8012e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	687a      	ldr	r2, [r7, #4]
 8012e0c:	68b9      	ldr	r1, [r7, #8]
 8012e0e:	68f8      	ldr	r0, [r7, #12]
 8012e10:	f000 f850 	bl	8012eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e16:	f000 f8d9 	bl	8012fcc <prvAddNewTaskToReadyList>
 8012e1a:	e001      	b.n	8012e20 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012e20:	697b      	ldr	r3, [r7, #20]
	}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3728      	adds	r7, #40	; 0x28
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}

08012e2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012e2a:	b580      	push	{r7, lr}
 8012e2c:	b08c      	sub	sp, #48	; 0x30
 8012e2e:	af04      	add	r7, sp, #16
 8012e30:	60f8      	str	r0, [r7, #12]
 8012e32:	60b9      	str	r1, [r7, #8]
 8012e34:	603b      	str	r3, [r7, #0]
 8012e36:	4613      	mov	r3, r2
 8012e38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e3a:	88fb      	ldrh	r3, [r7, #6]
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7fe fa4c 	bl	80112dc <pvPortMalloc>
 8012e44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00e      	beq.n	8012e6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012e4c:	2064      	movs	r0, #100	; 0x64
 8012e4e:	f7fe fa45 	bl	80112dc <pvPortMalloc>
 8012e52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d003      	beq.n	8012e62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	697a      	ldr	r2, [r7, #20]
 8012e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8012e60:	e005      	b.n	8012e6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012e62:	6978      	ldr	r0, [r7, #20]
 8012e64:	f7fe fb00 	bl	8011468 <vPortFree>
 8012e68:	e001      	b.n	8012e6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012e6e:	69fb      	ldr	r3, [r7, #28]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d017      	beq.n	8012ea4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	2200      	movs	r2, #0
 8012e78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012e7c:	88fa      	ldrh	r2, [r7, #6]
 8012e7e:	2300      	movs	r3, #0
 8012e80:	9303      	str	r3, [sp, #12]
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	9302      	str	r3, [sp, #8]
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	9301      	str	r3, [sp, #4]
 8012e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8c:	9300      	str	r3, [sp, #0]
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	68b9      	ldr	r1, [r7, #8]
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	f000 f80e 	bl	8012eb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e98:	69f8      	ldr	r0, [r7, #28]
 8012e9a:	f000 f897 	bl	8012fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	61bb      	str	r3, [r7, #24]
 8012ea2:	e002      	b.n	8012eaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3720      	adds	r7, #32
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b088      	sub	sp, #32
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	009b      	lsls	r3, r3, #2
 8012eca:	461a      	mov	r2, r3
 8012ecc:	21a5      	movs	r1, #165	; 0xa5
 8012ece:	f007 fa7e 	bl	801a3ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012edc:	3b01      	subs	r3, #1
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	4413      	add	r3, r2
 8012ee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	f023 0307 	bic.w	r3, r3, #7
 8012eea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	f003 0307 	and.w	r3, r3, #7
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d009      	beq.n	8012f0a <prvInitialiseNewTask+0x56>
 8012ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efa:	f383 8811 	msr	BASEPRI, r3
 8012efe:	f3bf 8f6f 	isb	sy
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	617b      	str	r3, [r7, #20]
 8012f08:	e7fe      	b.n	8012f08 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8012f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0c:	69ba      	ldr	r2, [r7, #24]
 8012f0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012f10:	2300      	movs	r3, #0
 8012f12:	61fb      	str	r3, [r7, #28]
 8012f14:	e012      	b.n	8012f3c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	7819      	ldrb	r1, [r3, #0]
 8012f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	4413      	add	r3, r2
 8012f24:	3334      	adds	r3, #52	; 0x34
 8012f26:	460a      	mov	r2, r1
 8012f28:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012f2a:	68ba      	ldr	r2, [r7, #8]
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	4413      	add	r3, r2
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d006      	beq.n	8012f44 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	3301      	adds	r3, #1
 8012f3a:	61fb      	str	r3, [r7, #28]
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	2b0f      	cmp	r3, #15
 8012f40:	d9e9      	bls.n	8012f16 <prvInitialiseNewTask+0x62>
 8012f42:	e000      	b.n	8012f46 <prvInitialiseNewTask+0x92>
		{
			break;
 8012f44:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f48:	2200      	movs	r2, #0
 8012f4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f50:	2b37      	cmp	r3, #55	; 0x37
 8012f52:	d901      	bls.n	8012f58 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012f54:	2337      	movs	r3, #55	; 0x37
 8012f56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f62:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8012f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f66:	2200      	movs	r2, #0
 8012f68:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6c:	3304      	adds	r3, #4
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fe fbb0 	bl	80116d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f76:	3318      	adds	r3, #24
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fe fbab 	bl	80116d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8012f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f96:	2200      	movs	r2, #0
 8012f98:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	68f9      	ldr	r1, [r7, #12]
 8012fac:	69b8      	ldr	r0, [r7, #24]
 8012fae:	f7fe fc25 	bl	80117fc <pxPortInitialiseStack>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d002      	beq.n	8012fc4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fc4:	bf00      	nop
 8012fc6:	3720      	adds	r7, #32
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012fd4:	f7fe fd3a 	bl	8011a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012fd8:	4b2d      	ldr	r3, [pc, #180]	; (8013090 <prvAddNewTaskToReadyList+0xc4>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	4a2c      	ldr	r2, [pc, #176]	; (8013090 <prvAddNewTaskToReadyList+0xc4>)
 8012fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012fe2:	4b2c      	ldr	r3, [pc, #176]	; (8013094 <prvAddNewTaskToReadyList+0xc8>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d109      	bne.n	8012ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012fea:	4a2a      	ldr	r2, [pc, #168]	; (8013094 <prvAddNewTaskToReadyList+0xc8>)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012ff0:	4b27      	ldr	r3, [pc, #156]	; (8013090 <prvAddNewTaskToReadyList+0xc4>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	2b01      	cmp	r3, #1
 8012ff6:	d110      	bne.n	801301a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012ff8:	f000 fcf8 	bl	80139ec <prvInitialiseTaskLists>
 8012ffc:	e00d      	b.n	801301a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012ffe:	4b26      	ldr	r3, [pc, #152]	; (8013098 <prvAddNewTaskToReadyList+0xcc>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d109      	bne.n	801301a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013006:	4b23      	ldr	r3, [pc, #140]	; (8013094 <prvAddNewTaskToReadyList+0xc8>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013010:	429a      	cmp	r2, r3
 8013012:	d802      	bhi.n	801301a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013014:	4a1f      	ldr	r2, [pc, #124]	; (8013094 <prvAddNewTaskToReadyList+0xc8>)
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801301a:	4b20      	ldr	r3, [pc, #128]	; (801309c <prvAddNewTaskToReadyList+0xd0>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	3301      	adds	r3, #1
 8013020:	4a1e      	ldr	r2, [pc, #120]	; (801309c <prvAddNewTaskToReadyList+0xd0>)
 8013022:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013024:	4b1d      	ldr	r3, [pc, #116]	; (801309c <prvAddNewTaskToReadyList+0xd0>)
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013030:	4b1b      	ldr	r3, [pc, #108]	; (80130a0 <prvAddNewTaskToReadyList+0xd4>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	429a      	cmp	r2, r3
 8013036:	d903      	bls.n	8013040 <prvAddNewTaskToReadyList+0x74>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801303c:	4a18      	ldr	r2, [pc, #96]	; (80130a0 <prvAddNewTaskToReadyList+0xd4>)
 801303e:	6013      	str	r3, [r2, #0]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013044:	4613      	mov	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	4413      	add	r3, r2
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	4a15      	ldr	r2, [pc, #84]	; (80130a4 <prvAddNewTaskToReadyList+0xd8>)
 801304e:	441a      	add	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	3304      	adds	r3, #4
 8013054:	4619      	mov	r1, r3
 8013056:	4610      	mov	r0, r2
 8013058:	f7fe fb49 	bl	80116ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801305c:	f7fe fd24 	bl	8011aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013060:	4b0d      	ldr	r3, [pc, #52]	; (8013098 <prvAddNewTaskToReadyList+0xcc>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d00e      	beq.n	8013086 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013068:	4b0a      	ldr	r3, [pc, #40]	; (8013094 <prvAddNewTaskToReadyList+0xc8>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013072:	429a      	cmp	r2, r3
 8013074:	d207      	bcs.n	8013086 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013076:	4b0c      	ldr	r3, [pc, #48]	; (80130a8 <prvAddNewTaskToReadyList+0xdc>)
 8013078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801307c:	601a      	str	r2, [r3, #0]
 801307e:	f3bf 8f4f 	dsb	sy
 8013082:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013086:	bf00      	nop
 8013088:	3708      	adds	r7, #8
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	20027450 	.word	0x20027450
 8013094:	20026f7c 	.word	0x20026f7c
 8013098:	2002745c 	.word	0x2002745c
 801309c:	2002746c 	.word	0x2002746c
 80130a0:	20027458 	.word	0x20027458
 80130a4:	20026f80 	.word	0x20026f80
 80130a8:	e000ed04 	.word	0xe000ed04

080130ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b084      	sub	sp, #16
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80130b4:	2300      	movs	r3, #0
 80130b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d016      	beq.n	80130ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80130be:	4b13      	ldr	r3, [pc, #76]	; (801310c <vTaskDelay+0x60>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d009      	beq.n	80130da <vTaskDelay+0x2e>
 80130c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	60bb      	str	r3, [r7, #8]
 80130d8:	e7fe      	b.n	80130d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80130da:	f000 f881 	bl	80131e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80130de:	2100      	movs	r1, #0
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f001 f8a9 	bl	8014238 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80130e6:	f000 f8c1 	bl	801326c <xTaskResumeAll>
 80130ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d107      	bne.n	8013102 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80130f2:	4b07      	ldr	r3, [pc, #28]	; (8013110 <vTaskDelay+0x64>)
 80130f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130f8:	601a      	str	r2, [r3, #0]
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013102:	bf00      	nop
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	20027478 	.word	0x20027478
 8013110:	e000ed04 	.word	0xe000ed04

08013114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b08a      	sub	sp, #40	; 0x28
 8013118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801311a:	2300      	movs	r3, #0
 801311c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801311e:	2300      	movs	r3, #0
 8013120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013122:	463a      	mov	r2, r7
 8013124:	1d39      	adds	r1, r7, #4
 8013126:	f107 0308 	add.w	r3, r7, #8
 801312a:	4618      	mov	r0, r3
 801312c:	f7fe f8a2 	bl	8011274 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013130:	6839      	ldr	r1, [r7, #0]
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	68ba      	ldr	r2, [r7, #8]
 8013136:	9202      	str	r2, [sp, #8]
 8013138:	9301      	str	r3, [sp, #4]
 801313a:	2300      	movs	r3, #0
 801313c:	9300      	str	r3, [sp, #0]
 801313e:	2300      	movs	r3, #0
 8013140:	460a      	mov	r2, r1
 8013142:	4921      	ldr	r1, [pc, #132]	; (80131c8 <vTaskStartScheduler+0xb4>)
 8013144:	4821      	ldr	r0, [pc, #132]	; (80131cc <vTaskStartScheduler+0xb8>)
 8013146:	f7ff fe17 	bl	8012d78 <xTaskCreateStatic>
 801314a:	4602      	mov	r2, r0
 801314c:	4b20      	ldr	r3, [pc, #128]	; (80131d0 <vTaskStartScheduler+0xbc>)
 801314e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013150:	4b1f      	ldr	r3, [pc, #124]	; (80131d0 <vTaskStartScheduler+0xbc>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d002      	beq.n	801315e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013158:	2301      	movs	r3, #1
 801315a:	617b      	str	r3, [r7, #20]
 801315c:	e001      	b.n	8013162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801315e:	2300      	movs	r3, #0
 8013160:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	2b01      	cmp	r3, #1
 8013166:	d102      	bne.n	801316e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013168:	f001 f8ba 	bl	80142e0 <xTimerCreateTimerTask>
 801316c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b01      	cmp	r3, #1
 8013172:	d117      	bne.n	80131a4 <vTaskStartScheduler+0x90>
 8013174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013178:	f383 8811 	msr	BASEPRI, r3
 801317c:	f3bf 8f6f 	isb	sy
 8013180:	f3bf 8f4f 	dsb	sy
 8013184:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013186:	4b13      	ldr	r3, [pc, #76]	; (80131d4 <vTaskStartScheduler+0xc0>)
 8013188:	f04f 32ff 	mov.w	r2, #4294967295
 801318c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801318e:	4b12      	ldr	r3, [pc, #72]	; (80131d8 <vTaskStartScheduler+0xc4>)
 8013190:	2201      	movs	r2, #1
 8013192:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013194:	4b11      	ldr	r3, [pc, #68]	; (80131dc <vTaskStartScheduler+0xc8>)
 8013196:	2200      	movs	r2, #0
 8013198:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801319a:	f7ee f848 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801319e:	f7fe fbb7 	bl	8011910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80131a2:	e00d      	b.n	80131c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131aa:	d109      	bne.n	80131c0 <vTaskStartScheduler+0xac>
 80131ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b0:	f383 8811 	msr	BASEPRI, r3
 80131b4:	f3bf 8f6f 	isb	sy
 80131b8:	f3bf 8f4f 	dsb	sy
 80131bc:	60fb      	str	r3, [r7, #12]
 80131be:	e7fe      	b.n	80131be <vTaskStartScheduler+0xaa>
}
 80131c0:	bf00      	nop
 80131c2:	3718      	adds	r7, #24
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	0801b798 	.word	0x0801b798
 80131cc:	08013915 	.word	0x08013915
 80131d0:	20027474 	.word	0x20027474
 80131d4:	20027470 	.word	0x20027470
 80131d8:	2002745c 	.word	0x2002745c
 80131dc:	20027454 	.word	0x20027454

080131e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80131e0:	b480      	push	{r7}
 80131e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80131e4:	4b04      	ldr	r3, [pc, #16]	; (80131f8 <vTaskSuspendAll+0x18>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	3301      	adds	r3, #1
 80131ea:	4a03      	ldr	r2, [pc, #12]	; (80131f8 <vTaskSuspendAll+0x18>)
 80131ec:	6013      	str	r3, [r2, #0]
}
 80131ee:	bf00      	nop
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr
 80131f8:	20027478 	.word	0x20027478

080131fc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8013202:	2300      	movs	r3, #0
 8013204:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8013206:	4b14      	ldr	r3, [pc, #80]	; (8013258 <prvGetExpectedIdleTime+0x5c>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d001      	beq.n	8013212 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801320e:	2301      	movs	r3, #1
 8013210:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8013212:	4b12      	ldr	r3, [pc, #72]	; (801325c <prvGetExpectedIdleTime+0x60>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013218:	2b00      	cmp	r3, #0
 801321a:	d002      	beq.n	8013222 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801321c:	2300      	movs	r3, #0
 801321e:	607b      	str	r3, [r7, #4]
 8013220:	e012      	b.n	8013248 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8013222:	4b0f      	ldr	r3, [pc, #60]	; (8013260 <prvGetExpectedIdleTime+0x64>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b01      	cmp	r3, #1
 8013228:	d902      	bls.n	8013230 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801322a:	2300      	movs	r3, #0
 801322c:	607b      	str	r3, [r7, #4]
 801322e:	e00b      	b.n	8013248 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d002      	beq.n	801323c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8013236:	2300      	movs	r3, #0
 8013238:	607b      	str	r3, [r7, #4]
 801323a:	e005      	b.n	8013248 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 801323c:	4b09      	ldr	r3, [pc, #36]	; (8013264 <prvGetExpectedIdleTime+0x68>)
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	4b09      	ldr	r3, [pc, #36]	; (8013268 <prvGetExpectedIdleTime+0x6c>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	1ad3      	subs	r3, r2, r3
 8013246:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8013248:	687b      	ldr	r3, [r7, #4]
	}
 801324a:	4618      	mov	r0, r3
 801324c:	370c      	adds	r7, #12
 801324e:	46bd      	mov	sp, r7
 8013250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013254:	4770      	bx	lr
 8013256:	bf00      	nop
 8013258:	20027458 	.word	0x20027458
 801325c:	20026f7c 	.word	0x20026f7c
 8013260:	20026f80 	.word	0x20026f80
 8013264:	20027470 	.word	0x20027470
 8013268:	20027454 	.word	0x20027454

0801326c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013272:	2300      	movs	r3, #0
 8013274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013276:	2300      	movs	r3, #0
 8013278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801327a:	4b41      	ldr	r3, [pc, #260]	; (8013380 <xTaskResumeAll+0x114>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d109      	bne.n	8013296 <xTaskResumeAll+0x2a>
 8013282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013286:	f383 8811 	msr	BASEPRI, r3
 801328a:	f3bf 8f6f 	isb	sy
 801328e:	f3bf 8f4f 	dsb	sy
 8013292:	603b      	str	r3, [r7, #0]
 8013294:	e7fe      	b.n	8013294 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013296:	f7fe fbd9 	bl	8011a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801329a:	4b39      	ldr	r3, [pc, #228]	; (8013380 <xTaskResumeAll+0x114>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	3b01      	subs	r3, #1
 80132a0:	4a37      	ldr	r2, [pc, #220]	; (8013380 <xTaskResumeAll+0x114>)
 80132a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132a4:	4b36      	ldr	r3, [pc, #216]	; (8013380 <xTaskResumeAll+0x114>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d162      	bne.n	8013372 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80132ac:	4b35      	ldr	r3, [pc, #212]	; (8013384 <xTaskResumeAll+0x118>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d05e      	beq.n	8013372 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80132b4:	e02f      	b.n	8013316 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80132b6:	4b34      	ldr	r3, [pc, #208]	; (8013388 <xTaskResumeAll+0x11c>)
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	3318      	adds	r3, #24
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fe fa70 	bl	80117a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	3304      	adds	r3, #4
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fe fa6b 	bl	80117a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132d6:	4b2d      	ldr	r3, [pc, #180]	; (801338c <xTaskResumeAll+0x120>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d903      	bls.n	80132e6 <xTaskResumeAll+0x7a>
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132e2:	4a2a      	ldr	r2, [pc, #168]	; (801338c <xTaskResumeAll+0x120>)
 80132e4:	6013      	str	r3, [r2, #0]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ea:	4613      	mov	r3, r2
 80132ec:	009b      	lsls	r3, r3, #2
 80132ee:	4413      	add	r3, r2
 80132f0:	009b      	lsls	r3, r3, #2
 80132f2:	4a27      	ldr	r2, [pc, #156]	; (8013390 <xTaskResumeAll+0x124>)
 80132f4:	441a      	add	r2, r3
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	3304      	adds	r3, #4
 80132fa:	4619      	mov	r1, r3
 80132fc:	4610      	mov	r0, r2
 80132fe:	f7fe f9f6 	bl	80116ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013306:	4b23      	ldr	r3, [pc, #140]	; (8013394 <xTaskResumeAll+0x128>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801330c:	429a      	cmp	r2, r3
 801330e:	d302      	bcc.n	8013316 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013310:	4b21      	ldr	r3, [pc, #132]	; (8013398 <xTaskResumeAll+0x12c>)
 8013312:	2201      	movs	r2, #1
 8013314:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013316:	4b1c      	ldr	r3, [pc, #112]	; (8013388 <xTaskResumeAll+0x11c>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1cb      	bne.n	80132b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d001      	beq.n	8013328 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013324:	f000 fbfc 	bl	8013b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013328:	4b1c      	ldr	r3, [pc, #112]	; (801339c <xTaskResumeAll+0x130>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d010      	beq.n	8013356 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013334:	f000 f86c 	bl	8013410 <xTaskIncrementTick>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d002      	beq.n	8013344 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801333e:	4b16      	ldr	r3, [pc, #88]	; (8013398 <xTaskResumeAll+0x12c>)
 8013340:	2201      	movs	r2, #1
 8013342:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	3b01      	subs	r3, #1
 8013348:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d1f1      	bne.n	8013334 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013350:	4b12      	ldr	r3, [pc, #72]	; (801339c <xTaskResumeAll+0x130>)
 8013352:	2200      	movs	r2, #0
 8013354:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013356:	4b10      	ldr	r3, [pc, #64]	; (8013398 <xTaskResumeAll+0x12c>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d009      	beq.n	8013372 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801335e:	2301      	movs	r3, #1
 8013360:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013362:	4b0f      	ldr	r3, [pc, #60]	; (80133a0 <xTaskResumeAll+0x134>)
 8013364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	f3bf 8f4f 	dsb	sy
 801336e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013372:	f7fe fb99 	bl	8011aa8 <vPortExitCritical>

	return xAlreadyYielded;
 8013376:	68bb      	ldr	r3, [r7, #8]
}
 8013378:	4618      	mov	r0, r3
 801337a:	3710      	adds	r7, #16
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}
 8013380:	20027478 	.word	0x20027478
 8013384:	20027450 	.word	0x20027450
 8013388:	20027410 	.word	0x20027410
 801338c:	20027458 	.word	0x20027458
 8013390:	20026f80 	.word	0x20026f80
 8013394:	20026f7c 	.word	0x20026f7c
 8013398:	20027464 	.word	0x20027464
 801339c:	20027460 	.word	0x20027460
 80133a0:	e000ed04 	.word	0xe000ed04

080133a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80133aa:	4b05      	ldr	r3, [pc, #20]	; (80133c0 <xTaskGetTickCount+0x1c>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80133b0:	687b      	ldr	r3, [r7, #4]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133bc:	4770      	bx	lr
 80133be:	bf00      	nop
 80133c0:	20027454 	.word	0x20027454

080133c4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80133c4:	b480      	push	{r7}
 80133c6:	b085      	sub	sp, #20
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80133cc:	4b0e      	ldr	r3, [pc, #56]	; (8013408 <vTaskStepTick+0x44>)
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	441a      	add	r2, r3
 80133d4:	4b0d      	ldr	r3, [pc, #52]	; (801340c <vTaskStepTick+0x48>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d909      	bls.n	80133f0 <vTaskStepTick+0x2c>
 80133dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e0:	f383 8811 	msr	BASEPRI, r3
 80133e4:	f3bf 8f6f 	isb	sy
 80133e8:	f3bf 8f4f 	dsb	sy
 80133ec:	60fb      	str	r3, [r7, #12]
 80133ee:	e7fe      	b.n	80133ee <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80133f0:	4b05      	ldr	r3, [pc, #20]	; (8013408 <vTaskStepTick+0x44>)
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	4413      	add	r3, r2
 80133f8:	4a03      	ldr	r2, [pc, #12]	; (8013408 <vTaskStepTick+0x44>)
 80133fa:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80133fc:	bf00      	nop
 80133fe:	3714      	adds	r7, #20
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr
 8013408:	20027454 	.word	0x20027454
 801340c:	20027470 	.word	0x20027470

08013410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b086      	sub	sp, #24
 8013414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013416:	2300      	movs	r3, #0
 8013418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801341a:	4b55      	ldr	r3, [pc, #340]	; (8013570 <xTaskIncrementTick+0x160>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	f040 8093 	bne.w	801354a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013424:	4b53      	ldr	r3, [pc, #332]	; (8013574 <xTaskIncrementTick+0x164>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	3301      	adds	r3, #1
 801342a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801342c:	4a51      	ldr	r2, [pc, #324]	; (8013574 <xTaskIncrementTick+0x164>)
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d11f      	bne.n	8013478 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013438:	4b4f      	ldr	r3, [pc, #316]	; (8013578 <xTaskIncrementTick+0x168>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d009      	beq.n	8013456 <xTaskIncrementTick+0x46>
 8013442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013446:	f383 8811 	msr	BASEPRI, r3
 801344a:	f3bf 8f6f 	isb	sy
 801344e:	f3bf 8f4f 	dsb	sy
 8013452:	603b      	str	r3, [r7, #0]
 8013454:	e7fe      	b.n	8013454 <xTaskIncrementTick+0x44>
 8013456:	4b48      	ldr	r3, [pc, #288]	; (8013578 <xTaskIncrementTick+0x168>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	60fb      	str	r3, [r7, #12]
 801345c:	4b47      	ldr	r3, [pc, #284]	; (801357c <xTaskIncrementTick+0x16c>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	4a45      	ldr	r2, [pc, #276]	; (8013578 <xTaskIncrementTick+0x168>)
 8013462:	6013      	str	r3, [r2, #0]
 8013464:	4a45      	ldr	r2, [pc, #276]	; (801357c <xTaskIncrementTick+0x16c>)
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	6013      	str	r3, [r2, #0]
 801346a:	4b45      	ldr	r3, [pc, #276]	; (8013580 <xTaskIncrementTick+0x170>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	3301      	adds	r3, #1
 8013470:	4a43      	ldr	r2, [pc, #268]	; (8013580 <xTaskIncrementTick+0x170>)
 8013472:	6013      	str	r3, [r2, #0]
 8013474:	f000 fb54 	bl	8013b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013478:	4b42      	ldr	r3, [pc, #264]	; (8013584 <xTaskIncrementTick+0x174>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	693a      	ldr	r2, [r7, #16]
 801347e:	429a      	cmp	r2, r3
 8013480:	d34e      	bcc.n	8013520 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013482:	4b3d      	ldr	r3, [pc, #244]	; (8013578 <xTaskIncrementTick+0x168>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d101      	bne.n	8013490 <xTaskIncrementTick+0x80>
 801348c:	2301      	movs	r3, #1
 801348e:	e000      	b.n	8013492 <xTaskIncrementTick+0x82>
 8013490:	2300      	movs	r3, #0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d004      	beq.n	80134a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013496:	4b3b      	ldr	r3, [pc, #236]	; (8013584 <xTaskIncrementTick+0x174>)
 8013498:	f04f 32ff 	mov.w	r2, #4294967295
 801349c:	601a      	str	r2, [r3, #0]
					break;
 801349e:	e03f      	b.n	8013520 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80134a0:	4b35      	ldr	r3, [pc, #212]	; (8013578 <xTaskIncrementTick+0x168>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80134b0:	693a      	ldr	r2, [r7, #16]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d203      	bcs.n	80134c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80134b8:	4a32      	ldr	r2, [pc, #200]	; (8013584 <xTaskIncrementTick+0x174>)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6013      	str	r3, [r2, #0]
						break;
 80134be:	e02f      	b.n	8013520 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	3304      	adds	r3, #4
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fe f96f 	bl	80117a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d004      	beq.n	80134dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	3318      	adds	r3, #24
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7fe f966 	bl	80117a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e0:	4b29      	ldr	r3, [pc, #164]	; (8013588 <xTaskIncrementTick+0x178>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d903      	bls.n	80134f0 <xTaskIncrementTick+0xe0>
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ec:	4a26      	ldr	r2, [pc, #152]	; (8013588 <xTaskIncrementTick+0x178>)
 80134ee:	6013      	str	r3, [r2, #0]
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f4:	4613      	mov	r3, r2
 80134f6:	009b      	lsls	r3, r3, #2
 80134f8:	4413      	add	r3, r2
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	4a23      	ldr	r2, [pc, #140]	; (801358c <xTaskIncrementTick+0x17c>)
 80134fe:	441a      	add	r2, r3
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	3304      	adds	r3, #4
 8013504:	4619      	mov	r1, r3
 8013506:	4610      	mov	r0, r2
 8013508:	f7fe f8f1 	bl	80116ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013510:	4b1f      	ldr	r3, [pc, #124]	; (8013590 <xTaskIncrementTick+0x180>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013516:	429a      	cmp	r2, r3
 8013518:	d3b3      	bcc.n	8013482 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801351a:	2301      	movs	r3, #1
 801351c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801351e:	e7b0      	b.n	8013482 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013520:	4b1b      	ldr	r3, [pc, #108]	; (8013590 <xTaskIncrementTick+0x180>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013526:	4919      	ldr	r1, [pc, #100]	; (801358c <xTaskIncrementTick+0x17c>)
 8013528:	4613      	mov	r3, r2
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	4413      	add	r3, r2
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	440b      	add	r3, r1
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2b01      	cmp	r3, #1
 8013536:	d901      	bls.n	801353c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013538:	2301      	movs	r3, #1
 801353a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801353c:	4b15      	ldr	r3, [pc, #84]	; (8013594 <xTaskIncrementTick+0x184>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d109      	bne.n	8013558 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8013544:	f7ed fe81 	bl	800124a <vApplicationTickHook>
 8013548:	e006      	b.n	8013558 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801354a:	4b12      	ldr	r3, [pc, #72]	; (8013594 <xTaskIncrementTick+0x184>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	3301      	adds	r3, #1
 8013550:	4a10      	ldr	r2, [pc, #64]	; (8013594 <xTaskIncrementTick+0x184>)
 8013552:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8013554:	f7ed fe79 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013558:	4b0f      	ldr	r3, [pc, #60]	; (8013598 <xTaskIncrementTick+0x188>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d001      	beq.n	8013564 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8013560:	2301      	movs	r3, #1
 8013562:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013564:	697b      	ldr	r3, [r7, #20]
}
 8013566:	4618      	mov	r0, r3
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	20027478 	.word	0x20027478
 8013574:	20027454 	.word	0x20027454
 8013578:	20027408 	.word	0x20027408
 801357c:	2002740c 	.word	0x2002740c
 8013580:	20027468 	.word	0x20027468
 8013584:	20027470 	.word	0x20027470
 8013588:	20027458 	.word	0x20027458
 801358c:	20026f80 	.word	0x20026f80
 8013590:	20026f7c 	.word	0x20026f7c
 8013594:	20027460 	.word	0x20027460
 8013598:	20027464 	.word	0x20027464

0801359c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80135a2:	4b3b      	ldr	r3, [pc, #236]	; (8013690 <vTaskSwitchContext+0xf4>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d003      	beq.n	80135b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80135aa:	4b3a      	ldr	r3, [pc, #232]	; (8013694 <vTaskSwitchContext+0xf8>)
 80135ac:	2201      	movs	r2, #1
 80135ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80135b0:	e06a      	b.n	8013688 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 80135b2:	4b38      	ldr	r3, [pc, #224]	; (8013694 <vTaskSwitchContext+0xf8>)
 80135b4:	2200      	movs	r2, #0
 80135b6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80135b8:	f7ed fe40 	bl	800123c <getRunTimeCounterValue>
 80135bc:	4602      	mov	r2, r0
 80135be:	4b36      	ldr	r3, [pc, #216]	; (8013698 <vTaskSwitchContext+0xfc>)
 80135c0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80135c2:	4b35      	ldr	r3, [pc, #212]	; (8013698 <vTaskSwitchContext+0xfc>)
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	4b35      	ldr	r3, [pc, #212]	; (801369c <vTaskSwitchContext+0x100>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d909      	bls.n	80135e2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80135ce:	4b34      	ldr	r3, [pc, #208]	; (80136a0 <vTaskSwitchContext+0x104>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80135d4:	4a30      	ldr	r2, [pc, #192]	; (8013698 <vTaskSwitchContext+0xfc>)
 80135d6:	6810      	ldr	r0, [r2, #0]
 80135d8:	4a30      	ldr	r2, [pc, #192]	; (801369c <vTaskSwitchContext+0x100>)
 80135da:	6812      	ldr	r2, [r2, #0]
 80135dc:	1a82      	subs	r2, r0, r2
 80135de:	440a      	add	r2, r1
 80135e0:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80135e2:	4b2d      	ldr	r3, [pc, #180]	; (8013698 <vTaskSwitchContext+0xfc>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	4a2d      	ldr	r2, [pc, #180]	; (801369c <vTaskSwitchContext+0x100>)
 80135e8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80135ea:	4b2d      	ldr	r3, [pc, #180]	; (80136a0 <vTaskSwitchContext+0x104>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	4b2b      	ldr	r3, [pc, #172]	; (80136a0 <vTaskSwitchContext+0x104>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d808      	bhi.n	801360c <vTaskSwitchContext+0x70>
 80135fa:	4b29      	ldr	r3, [pc, #164]	; (80136a0 <vTaskSwitchContext+0x104>)
 80135fc:	681a      	ldr	r2, [r3, #0]
 80135fe:	4b28      	ldr	r3, [pc, #160]	; (80136a0 <vTaskSwitchContext+0x104>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	3334      	adds	r3, #52	; 0x34
 8013604:	4619      	mov	r1, r3
 8013606:	4610      	mov	r0, r2
 8013608:	f7ed fe26 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801360c:	4b25      	ldr	r3, [pc, #148]	; (80136a4 <vTaskSwitchContext+0x108>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	60fb      	str	r3, [r7, #12]
 8013612:	e00f      	b.n	8013634 <vTaskSwitchContext+0x98>
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d109      	bne.n	801362e <vTaskSwitchContext+0x92>
 801361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361e:	f383 8811 	msr	BASEPRI, r3
 8013622:	f3bf 8f6f 	isb	sy
 8013626:	f3bf 8f4f 	dsb	sy
 801362a:	607b      	str	r3, [r7, #4]
 801362c:	e7fe      	b.n	801362c <vTaskSwitchContext+0x90>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	3b01      	subs	r3, #1
 8013632:	60fb      	str	r3, [r7, #12]
 8013634:	491c      	ldr	r1, [pc, #112]	; (80136a8 <vTaskSwitchContext+0x10c>)
 8013636:	68fa      	ldr	r2, [r7, #12]
 8013638:	4613      	mov	r3, r2
 801363a:	009b      	lsls	r3, r3, #2
 801363c:	4413      	add	r3, r2
 801363e:	009b      	lsls	r3, r3, #2
 8013640:	440b      	add	r3, r1
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d0e5      	beq.n	8013614 <vTaskSwitchContext+0x78>
 8013648:	68fa      	ldr	r2, [r7, #12]
 801364a:	4613      	mov	r3, r2
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	4413      	add	r3, r2
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	4a15      	ldr	r2, [pc, #84]	; (80136a8 <vTaskSwitchContext+0x10c>)
 8013654:	4413      	add	r3, r2
 8013656:	60bb      	str	r3, [r7, #8]
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	685a      	ldr	r2, [r3, #4]
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	605a      	str	r2, [r3, #4]
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	685a      	ldr	r2, [r3, #4]
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	3308      	adds	r3, #8
 801366a:	429a      	cmp	r2, r3
 801366c:	d104      	bne.n	8013678 <vTaskSwitchContext+0xdc>
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	685a      	ldr	r2, [r3, #4]
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	605a      	str	r2, [r3, #4]
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	68db      	ldr	r3, [r3, #12]
 801367e:	4a08      	ldr	r2, [pc, #32]	; (80136a0 <vTaskSwitchContext+0x104>)
 8013680:	6013      	str	r3, [r2, #0]
 8013682:	4a08      	ldr	r2, [pc, #32]	; (80136a4 <vTaskSwitchContext+0x108>)
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	6013      	str	r3, [r2, #0]
}
 8013688:	bf00      	nop
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	20027478 	.word	0x20027478
 8013694:	20027464 	.word	0x20027464
 8013698:	20027480 	.word	0x20027480
 801369c:	2002747c 	.word	0x2002747c
 80136a0:	20026f7c 	.word	0x20026f7c
 80136a4:	20027458 	.word	0x20027458
 80136a8:	20026f80 	.word	0x20026f80

080136ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d109      	bne.n	80136d0 <vTaskPlaceOnEventList+0x24>
 80136bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c0:	f383 8811 	msr	BASEPRI, r3
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	60fb      	str	r3, [r7, #12]
 80136ce:	e7fe      	b.n	80136ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136d0:	4b07      	ldr	r3, [pc, #28]	; (80136f0 <vTaskPlaceOnEventList+0x44>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	3318      	adds	r3, #24
 80136d6:	4619      	mov	r1, r3
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7fe f82c 	bl	8011736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80136de:	2101      	movs	r1, #1
 80136e0:	6838      	ldr	r0, [r7, #0]
 80136e2:	f000 fda9 	bl	8014238 <prvAddCurrentTaskToDelayedList>
}
 80136e6:	bf00      	nop
 80136e8:	3710      	adds	r7, #16
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20026f7c 	.word	0x20026f7c

080136f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b086      	sub	sp, #24
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d109      	bne.n	801371a <vTaskPlaceOnEventListRestricted+0x26>
 8013706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370a:	f383 8811 	msr	BASEPRI, r3
 801370e:	f3bf 8f6f 	isb	sy
 8013712:	f3bf 8f4f 	dsb	sy
 8013716:	617b      	str	r3, [r7, #20]
 8013718:	e7fe      	b.n	8013718 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801371a:	4b0a      	ldr	r3, [pc, #40]	; (8013744 <vTaskPlaceOnEventListRestricted+0x50>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	3318      	adds	r3, #24
 8013720:	4619      	mov	r1, r3
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	f7fd ffe3 	bl	80116ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d002      	beq.n	8013734 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801372e:	f04f 33ff 	mov.w	r3, #4294967295
 8013732:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013734:	6879      	ldr	r1, [r7, #4]
 8013736:	68b8      	ldr	r0, [r7, #8]
 8013738:	f000 fd7e 	bl	8014238 <prvAddCurrentTaskToDelayedList>
	}
 801373c:	bf00      	nop
 801373e:	3718      	adds	r7, #24
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}
 8013744:	20026f7c 	.word	0x20026f7c

08013748 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b086      	sub	sp, #24
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	68db      	ldr	r3, [r3, #12]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d109      	bne.n	8013772 <xTaskRemoveFromEventList+0x2a>
 801375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013762:	f383 8811 	msr	BASEPRI, r3
 8013766:	f3bf 8f6f 	isb	sy
 801376a:	f3bf 8f4f 	dsb	sy
 801376e:	60fb      	str	r3, [r7, #12]
 8013770:	e7fe      	b.n	8013770 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	3318      	adds	r3, #24
 8013776:	4618      	mov	r0, r3
 8013778:	f7fe f816 	bl	80117a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801377c:	4b1e      	ldr	r3, [pc, #120]	; (80137f8 <xTaskRemoveFromEventList+0xb0>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d11d      	bne.n	80137c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	3304      	adds	r3, #4
 8013788:	4618      	mov	r0, r3
 801378a:	f7fe f80d 	bl	80117a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013792:	4b1a      	ldr	r3, [pc, #104]	; (80137fc <xTaskRemoveFromEventList+0xb4>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	429a      	cmp	r2, r3
 8013798:	d903      	bls.n	80137a2 <xTaskRemoveFromEventList+0x5a>
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801379e:	4a17      	ldr	r2, [pc, #92]	; (80137fc <xTaskRemoveFromEventList+0xb4>)
 80137a0:	6013      	str	r3, [r2, #0]
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137a6:	4613      	mov	r3, r2
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	4413      	add	r3, r2
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	4a14      	ldr	r2, [pc, #80]	; (8013800 <xTaskRemoveFromEventList+0xb8>)
 80137b0:	441a      	add	r2, r3
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	3304      	adds	r3, #4
 80137b6:	4619      	mov	r1, r3
 80137b8:	4610      	mov	r0, r2
 80137ba:	f7fd ff98 	bl	80116ee <vListInsertEnd>
 80137be:	e005      	b.n	80137cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	3318      	adds	r3, #24
 80137c4:	4619      	mov	r1, r3
 80137c6:	480f      	ldr	r0, [pc, #60]	; (8013804 <xTaskRemoveFromEventList+0xbc>)
 80137c8:	f7fd ff91 	bl	80116ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137d0:	4b0d      	ldr	r3, [pc, #52]	; (8013808 <xTaskRemoveFromEventList+0xc0>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d905      	bls.n	80137e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80137da:	2301      	movs	r3, #1
 80137dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80137de:	4b0b      	ldr	r3, [pc, #44]	; (801380c <xTaskRemoveFromEventList+0xc4>)
 80137e0:	2201      	movs	r2, #1
 80137e2:	601a      	str	r2, [r3, #0]
 80137e4:	e001      	b.n	80137ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80137e6:	2300      	movs	r3, #0
 80137e8:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 80137ea:	f000 f999 	bl	8013b20 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 80137ee:	697b      	ldr	r3, [r7, #20]
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3718      	adds	r7, #24
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	20027478 	.word	0x20027478
 80137fc:	20027458 	.word	0x20027458
 8013800:	20026f80 	.word	0x20026f80
 8013804:	20027410 	.word	0x20027410
 8013808:	20026f7c 	.word	0x20026f7c
 801380c:	20027464 	.word	0x20027464

08013810 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013818:	4b06      	ldr	r3, [pc, #24]	; (8013834 <vTaskInternalSetTimeOutState+0x24>)
 801381a:	681a      	ldr	r2, [r3, #0]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013820:	4b05      	ldr	r3, [pc, #20]	; (8013838 <vTaskInternalSetTimeOutState+0x28>)
 8013822:	681a      	ldr	r2, [r3, #0]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	605a      	str	r2, [r3, #4]
}
 8013828:	bf00      	nop
 801382a:	370c      	adds	r7, #12
 801382c:	46bd      	mov	sp, r7
 801382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013832:	4770      	bx	lr
 8013834:	20027468 	.word	0x20027468
 8013838:	20027454 	.word	0x20027454

0801383c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b088      	sub	sp, #32
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d109      	bne.n	8013860 <xTaskCheckForTimeOut+0x24>
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	f383 8811 	msr	BASEPRI, r3
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	613b      	str	r3, [r7, #16]
 801385e:	e7fe      	b.n	801385e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d109      	bne.n	801387a <xTaskCheckForTimeOut+0x3e>
 8013866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801386a:	f383 8811 	msr	BASEPRI, r3
 801386e:	f3bf 8f6f 	isb	sy
 8013872:	f3bf 8f4f 	dsb	sy
 8013876:	60fb      	str	r3, [r7, #12]
 8013878:	e7fe      	b.n	8013878 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801387a:	f7fe f8e7 	bl	8011a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801387e:	4b1d      	ldr	r3, [pc, #116]	; (80138f4 <xTaskCheckForTimeOut+0xb8>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	69ba      	ldr	r2, [r7, #24]
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013896:	d102      	bne.n	801389e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013898:	2300      	movs	r3, #0
 801389a:	61fb      	str	r3, [r7, #28]
 801389c:	e023      	b.n	80138e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681a      	ldr	r2, [r3, #0]
 80138a2:	4b15      	ldr	r3, [pc, #84]	; (80138f8 <xTaskCheckForTimeOut+0xbc>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d007      	beq.n	80138ba <xTaskCheckForTimeOut+0x7e>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	69ba      	ldr	r2, [r7, #24]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d302      	bcc.n	80138ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80138b4:	2301      	movs	r3, #1
 80138b6:	61fb      	str	r3, [r7, #28]
 80138b8:	e015      	b.n	80138e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	697a      	ldr	r2, [r7, #20]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d20b      	bcs.n	80138dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	681a      	ldr	r2, [r3, #0]
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	1ad2      	subs	r2, r2, r3
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f7ff ff9d 	bl	8013810 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80138d6:	2300      	movs	r3, #0
 80138d8:	61fb      	str	r3, [r7, #28]
 80138da:	e004      	b.n	80138e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	2200      	movs	r2, #0
 80138e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80138e2:	2301      	movs	r3, #1
 80138e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80138e6:	f7fe f8df 	bl	8011aa8 <vPortExitCritical>

	return xReturn;
 80138ea:	69fb      	ldr	r3, [r7, #28]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3720      	adds	r7, #32
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	20027454 	.word	0x20027454
 80138f8:	20027468 	.word	0x20027468

080138fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80138fc:	b480      	push	{r7}
 80138fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013900:	4b03      	ldr	r3, [pc, #12]	; (8013910 <vTaskMissedYield+0x14>)
 8013902:	2201      	movs	r2, #1
 8013904:	601a      	str	r2, [r3, #0]
}
 8013906:	bf00      	nop
 8013908:	46bd      	mov	sp, r7
 801390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390e:	4770      	bx	lr
 8013910:	20027464 	.word	0x20027464

08013914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801391c:	f000 f8a6 	bl	8013a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013920:	4b17      	ldr	r3, [pc, #92]	; (8013980 <prvIdleTask+0x6c>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2b01      	cmp	r3, #1
 8013926:	d907      	bls.n	8013938 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013928:	4b16      	ldr	r3, [pc, #88]	; (8013984 <prvIdleTask+0x70>)
 801392a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801392e:	601a      	str	r2, [r3, #0]
 8013930:	f3bf 8f4f 	dsb	sy
 8013934:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8013938:	f7ff fc60 	bl	80131fc <prvGetExpectedIdleTime>
 801393c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2b01      	cmp	r3, #1
 8013942:	d9eb      	bls.n	801391c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8013944:	f7ff fc4c 	bl	80131e0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8013948:	4b0f      	ldr	r3, [pc, #60]	; (8013988 <prvIdleTask+0x74>)
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	4b0f      	ldr	r3, [pc, #60]	; (801398c <prvIdleTask+0x78>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	429a      	cmp	r2, r3
 8013952:	d209      	bcs.n	8013968 <prvIdleTask+0x54>
 8013954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013958:	f383 8811 	msr	BASEPRI, r3
 801395c:	f3bf 8f6f 	isb	sy
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	60bb      	str	r3, [r7, #8]
 8013966:	e7fe      	b.n	8013966 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8013968:	f7ff fc48 	bl	80131fc <prvGetExpectedIdleTime>
 801396c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2b01      	cmp	r3, #1
 8013972:	d902      	bls.n	801397a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8013974:	68f8      	ldr	r0, [r7, #12]
 8013976:	f7ee fd8b 	bl	8002490 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801397a:	f7ff fc77 	bl	801326c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801397e:	e7cd      	b.n	801391c <prvIdleTask+0x8>
 8013980:	20026f80 	.word	0x20026f80
 8013984:	e000ed04 	.word	0xe000ed04
 8013988:	20027470 	.word	0x20027470
 801398c:	20027454 	.word	0x20027454

08013990 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8013990:	b480      	push	{r7}
 8013992:	b083      	sub	sp, #12
 8013994:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8013996:	2301      	movs	r3, #1
 8013998:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 801399a:	2301      	movs	r3, #1
 801399c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 801399e:	4b0f      	ldr	r3, [pc, #60]	; (80139dc <eTaskConfirmSleepModeStatus+0x4c>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d002      	beq.n	80139ac <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80139a6:	2300      	movs	r3, #0
 80139a8:	71fb      	strb	r3, [r7, #7]
 80139aa:	e010      	b.n	80139ce <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80139ac:	4b0c      	ldr	r3, [pc, #48]	; (80139e0 <eTaskConfirmSleepModeStatus+0x50>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d002      	beq.n	80139ba <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80139b4:	2300      	movs	r3, #0
 80139b6:	71fb      	strb	r3, [r7, #7]
 80139b8:	e009      	b.n	80139ce <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80139ba:	4b0a      	ldr	r3, [pc, #40]	; (80139e4 <eTaskConfirmSleepModeStatus+0x54>)
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	4b0a      	ldr	r3, [pc, #40]	; (80139e8 <eTaskConfirmSleepModeStatus+0x58>)
 80139c0:	6819      	ldr	r1, [r3, #0]
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	1acb      	subs	r3, r1, r3
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d101      	bne.n	80139ce <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80139ca:	2302      	movs	r3, #2
 80139cc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80139ce:	79fb      	ldrb	r3, [r7, #7]
	}
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr
 80139dc:	20027410 	.word	0x20027410
 80139e0:	20027464 	.word	0x20027464
 80139e4:	2002743c 	.word	0x2002743c
 80139e8:	20027450 	.word	0x20027450

080139ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139f2:	2300      	movs	r3, #0
 80139f4:	607b      	str	r3, [r7, #4]
 80139f6:	e00c      	b.n	8013a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	4613      	mov	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	4413      	add	r3, r2
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	4a12      	ldr	r2, [pc, #72]	; (8013a4c <prvInitialiseTaskLists+0x60>)
 8013a04:	4413      	add	r3, r2
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fd fe44 	bl	8011694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	3301      	adds	r3, #1
 8013a10:	607b      	str	r3, [r7, #4]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	2b37      	cmp	r3, #55	; 0x37
 8013a16:	d9ef      	bls.n	80139f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013a18:	480d      	ldr	r0, [pc, #52]	; (8013a50 <prvInitialiseTaskLists+0x64>)
 8013a1a:	f7fd fe3b 	bl	8011694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013a1e:	480d      	ldr	r0, [pc, #52]	; (8013a54 <prvInitialiseTaskLists+0x68>)
 8013a20:	f7fd fe38 	bl	8011694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013a24:	480c      	ldr	r0, [pc, #48]	; (8013a58 <prvInitialiseTaskLists+0x6c>)
 8013a26:	f7fd fe35 	bl	8011694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013a2a:	480c      	ldr	r0, [pc, #48]	; (8013a5c <prvInitialiseTaskLists+0x70>)
 8013a2c:	f7fd fe32 	bl	8011694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013a30:	480b      	ldr	r0, [pc, #44]	; (8013a60 <prvInitialiseTaskLists+0x74>)
 8013a32:	f7fd fe2f 	bl	8011694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013a36:	4b0b      	ldr	r3, [pc, #44]	; (8013a64 <prvInitialiseTaskLists+0x78>)
 8013a38:	4a05      	ldr	r2, [pc, #20]	; (8013a50 <prvInitialiseTaskLists+0x64>)
 8013a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013a3c:	4b0a      	ldr	r3, [pc, #40]	; (8013a68 <prvInitialiseTaskLists+0x7c>)
 8013a3e:	4a05      	ldr	r2, [pc, #20]	; (8013a54 <prvInitialiseTaskLists+0x68>)
 8013a40:	601a      	str	r2, [r3, #0]
}
 8013a42:	bf00      	nop
 8013a44:	3708      	adds	r7, #8
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	20026f80 	.word	0x20026f80
 8013a50:	200273e0 	.word	0x200273e0
 8013a54:	200273f4 	.word	0x200273f4
 8013a58:	20027410 	.word	0x20027410
 8013a5c:	20027424 	.word	0x20027424
 8013a60:	2002743c 	.word	0x2002743c
 8013a64:	20027408 	.word	0x20027408
 8013a68:	2002740c 	.word	0x2002740c

08013a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a72:	e019      	b.n	8013aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013a74:	f7fd ffea 	bl	8011a4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013a78:	4b0f      	ldr	r3, [pc, #60]	; (8013ab8 <prvCheckTasksWaitingTermination+0x4c>)
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	68db      	ldr	r3, [r3, #12]
 8013a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	3304      	adds	r3, #4
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fd fe8f 	bl	80117a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013a8a:	4b0c      	ldr	r3, [pc, #48]	; (8013abc <prvCheckTasksWaitingTermination+0x50>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	4a0a      	ldr	r2, [pc, #40]	; (8013abc <prvCheckTasksWaitingTermination+0x50>)
 8013a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a94:	4b0a      	ldr	r3, [pc, #40]	; (8013ac0 <prvCheckTasksWaitingTermination+0x54>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	4a09      	ldr	r2, [pc, #36]	; (8013ac0 <prvCheckTasksWaitingTermination+0x54>)
 8013a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a9e:	f7fe f803 	bl	8011aa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f000 f80e 	bl	8013ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013aa8:	4b05      	ldr	r3, [pc, #20]	; (8013ac0 <prvCheckTasksWaitingTermination+0x54>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d1e1      	bne.n	8013a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013ab0:	bf00      	nop
 8013ab2:	3708      	adds	r7, #8
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}
 8013ab8:	20027424 	.word	0x20027424
 8013abc:	20027450 	.word	0x20027450
 8013ac0:	20027438 	.word	0x20027438

08013ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d108      	bne.n	8013ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7fd fcc4 	bl	8011468 <vPortFree>
				vPortFree( pxTCB );
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7fd fcc1 	bl	8011468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ae6:	e017      	b.n	8013b18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	d103      	bne.n	8013afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7fd fcb8 	bl	8011468 <vPortFree>
	}
 8013af8:	e00e      	b.n	8013b18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013b00:	2b02      	cmp	r3, #2
 8013b02:	d009      	beq.n	8013b18 <prvDeleteTCB+0x54>
 8013b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b08:	f383 8811 	msr	BASEPRI, r3
 8013b0c:	f3bf 8f6f 	isb	sy
 8013b10:	f3bf 8f4f 	dsb	sy
 8013b14:	60fb      	str	r3, [r7, #12]
 8013b16:	e7fe      	b.n	8013b16 <prvDeleteTCB+0x52>
	}
 8013b18:	bf00      	nop
 8013b1a:	3710      	adds	r7, #16
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}

08013b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013b20:	b480      	push	{r7}
 8013b22:	b083      	sub	sp, #12
 8013b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b26:	4b0f      	ldr	r3, [pc, #60]	; (8013b64 <prvResetNextTaskUnblockTime+0x44>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d101      	bne.n	8013b34 <prvResetNextTaskUnblockTime+0x14>
 8013b30:	2301      	movs	r3, #1
 8013b32:	e000      	b.n	8013b36 <prvResetNextTaskUnblockTime+0x16>
 8013b34:	2300      	movs	r3, #0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d004      	beq.n	8013b44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013b3a:	4b0b      	ldr	r3, [pc, #44]	; (8013b68 <prvResetNextTaskUnblockTime+0x48>)
 8013b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013b42:	e008      	b.n	8013b56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013b44:	4b07      	ldr	r3, [pc, #28]	; (8013b64 <prvResetNextTaskUnblockTime+0x44>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	685b      	ldr	r3, [r3, #4]
 8013b52:	4a05      	ldr	r2, [pc, #20]	; (8013b68 <prvResetNextTaskUnblockTime+0x48>)
 8013b54:	6013      	str	r3, [r2, #0]
}
 8013b56:	bf00      	nop
 8013b58:	370c      	adds	r7, #12
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop
 8013b64:	20027408 	.word	0x20027408
 8013b68:	20027470 	.word	0x20027470

08013b6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013b72:	4b05      	ldr	r3, [pc, #20]	; (8013b88 <xTaskGetCurrentTaskHandle+0x1c>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013b78:	687b      	ldr	r3, [r7, #4]
	}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	20026f7c 	.word	0x20026f7c

08013b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013b92:	4b0b      	ldr	r3, [pc, #44]	; (8013bc0 <xTaskGetSchedulerState+0x34>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d102      	bne.n	8013ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	607b      	str	r3, [r7, #4]
 8013b9e:	e008      	b.n	8013bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ba0:	4b08      	ldr	r3, [pc, #32]	; (8013bc4 <xTaskGetSchedulerState+0x38>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d102      	bne.n	8013bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013ba8:	2302      	movs	r3, #2
 8013baa:	607b      	str	r3, [r7, #4]
 8013bac:	e001      	b.n	8013bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013bb2:	687b      	ldr	r3, [r7, #4]
	}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	370c      	adds	r7, #12
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbe:	4770      	bx	lr
 8013bc0:	2002745c 	.word	0x2002745c
 8013bc4:	20027478 	.word	0x20027478

08013bc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b084      	sub	sp, #16
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d056      	beq.n	8013c8c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013be2:	4b2d      	ldr	r3, [pc, #180]	; (8013c98 <xTaskPriorityInherit+0xd0>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d246      	bcs.n	8013c7a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	699b      	ldr	r3, [r3, #24]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	db06      	blt.n	8013c02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bf4:	4b28      	ldr	r3, [pc, #160]	; (8013c98 <xTaskPriorityInherit+0xd0>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013bfe:	68bb      	ldr	r3, [r7, #8]
 8013c00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	6959      	ldr	r1, [r3, #20]
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c0a:	4613      	mov	r3, r2
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	4413      	add	r3, r2
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	4a22      	ldr	r2, [pc, #136]	; (8013c9c <xTaskPriorityInherit+0xd4>)
 8013c14:	4413      	add	r3, r2
 8013c16:	4299      	cmp	r1, r3
 8013c18:	d101      	bne.n	8013c1e <xTaskPriorityInherit+0x56>
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e000      	b.n	8013c20 <xTaskPriorityInherit+0x58>
 8013c1e:	2300      	movs	r3, #0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d022      	beq.n	8013c6a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	3304      	adds	r3, #4
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fd fdbd 	bl	80117a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013c2e:	4b1a      	ldr	r3, [pc, #104]	; (8013c98 <xTaskPriorityInherit+0xd0>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c3c:	4b18      	ldr	r3, [pc, #96]	; (8013ca0 <xTaskPriorityInherit+0xd8>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d903      	bls.n	8013c4c <xTaskPriorityInherit+0x84>
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c48:	4a15      	ldr	r2, [pc, #84]	; (8013ca0 <xTaskPriorityInherit+0xd8>)
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c50:	4613      	mov	r3, r2
 8013c52:	009b      	lsls	r3, r3, #2
 8013c54:	4413      	add	r3, r2
 8013c56:	009b      	lsls	r3, r3, #2
 8013c58:	4a10      	ldr	r2, [pc, #64]	; (8013c9c <xTaskPriorityInherit+0xd4>)
 8013c5a:	441a      	add	r2, r3
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	3304      	adds	r3, #4
 8013c60:	4619      	mov	r1, r3
 8013c62:	4610      	mov	r0, r2
 8013c64:	f7fd fd43 	bl	80116ee <vListInsertEnd>
 8013c68:	e004      	b.n	8013c74 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013c6a:	4b0b      	ldr	r3, [pc, #44]	; (8013c98 <xTaskPriorityInherit+0xd0>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013c74:	2301      	movs	r3, #1
 8013c76:	60fb      	str	r3, [r7, #12]
 8013c78:	e008      	b.n	8013c8c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c7e:	4b06      	ldr	r3, [pc, #24]	; (8013c98 <xTaskPriorityInherit+0xd0>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d201      	bcs.n	8013c8c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013c88:	2301      	movs	r3, #1
 8013c8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
	}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3710      	adds	r7, #16
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}
 8013c96:	bf00      	nop
 8013c98:	20026f7c 	.word	0x20026f7c
 8013c9c:	20026f80 	.word	0x20026f80
 8013ca0:	20027458 	.word	0x20027458

08013ca4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b086      	sub	sp, #24
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d054      	beq.n	8013d64 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013cba:	4b2d      	ldr	r3, [pc, #180]	; (8013d70 <xTaskPriorityDisinherit+0xcc>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	693a      	ldr	r2, [r7, #16]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d009      	beq.n	8013cd8 <xTaskPriorityDisinherit+0x34>
 8013cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc8:	f383 8811 	msr	BASEPRI, r3
 8013ccc:	f3bf 8f6f 	isb	sy
 8013cd0:	f3bf 8f4f 	dsb	sy
 8013cd4:	60fb      	str	r3, [r7, #12]
 8013cd6:	e7fe      	b.n	8013cd6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d109      	bne.n	8013cf4 <xTaskPriorityDisinherit+0x50>
 8013ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce4:	f383 8811 	msr	BASEPRI, r3
 8013ce8:	f3bf 8f6f 	isb	sy
 8013cec:	f3bf 8f4f 	dsb	sy
 8013cf0:	60bb      	str	r3, [r7, #8]
 8013cf2:	e7fe      	b.n	8013cf2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cf8:	1e5a      	subs	r2, r3, #1
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d02c      	beq.n	8013d64 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d128      	bne.n	8013d64 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	3304      	adds	r3, #4
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7fd fd46 	bl	80117a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d34:	4b0f      	ldr	r3, [pc, #60]	; (8013d74 <xTaskPriorityDisinherit+0xd0>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d903      	bls.n	8013d44 <xTaskPriorityDisinherit+0xa0>
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d40:	4a0c      	ldr	r2, [pc, #48]	; (8013d74 <xTaskPriorityDisinherit+0xd0>)
 8013d42:	6013      	str	r3, [r2, #0]
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d48:	4613      	mov	r3, r2
 8013d4a:	009b      	lsls	r3, r3, #2
 8013d4c:	4413      	add	r3, r2
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	4a09      	ldr	r2, [pc, #36]	; (8013d78 <xTaskPriorityDisinherit+0xd4>)
 8013d52:	441a      	add	r2, r3
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	3304      	adds	r3, #4
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7fd fcc7 	bl	80116ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013d60:	2301      	movs	r3, #1
 8013d62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013d64:	697b      	ldr	r3, [r7, #20]
	}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3718      	adds	r7, #24
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}
 8013d6e:	bf00      	nop
 8013d70:	20026f7c 	.word	0x20026f7c
 8013d74:	20027458 	.word	0x20027458
 8013d78:	20026f80 	.word	0x20026f80

08013d7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b088      	sub	sp, #32
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d06d      	beq.n	8013e70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013d94:	69bb      	ldr	r3, [r7, #24]
 8013d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d109      	bne.n	8013db0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da0:	f383 8811 	msr	BASEPRI, r3
 8013da4:	f3bf 8f6f 	isb	sy
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	60fb      	str	r3, [r7, #12]
 8013dae:	e7fe      	b.n	8013dae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013db4:	683a      	ldr	r2, [r7, #0]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d902      	bls.n	8013dc0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	61fb      	str	r3, [r7, #28]
 8013dbe:	e002      	b.n	8013dc6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013dc0:	69bb      	ldr	r3, [r7, #24]
 8013dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013dc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dca:	69fa      	ldr	r2, [r7, #28]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d04f      	beq.n	8013e70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dd4:	697a      	ldr	r2, [r7, #20]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d14a      	bne.n	8013e70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013dda:	4b27      	ldr	r3, [pc, #156]	; (8013e78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	69ba      	ldr	r2, [r7, #24]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d109      	bne.n	8013df8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de8:	f383 8811 	msr	BASEPRI, r3
 8013dec:	f3bf 8f6f 	isb	sy
 8013df0:	f3bf 8f4f 	dsb	sy
 8013df4:	60bb      	str	r3, [r7, #8]
 8013df6:	e7fe      	b.n	8013df6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	69fa      	ldr	r2, [r7, #28]
 8013e02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	db04      	blt.n	8013e16 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	6959      	ldr	r1, [r3, #20]
 8013e1a:	693a      	ldr	r2, [r7, #16]
 8013e1c:	4613      	mov	r3, r2
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	4413      	add	r3, r2
 8013e22:	009b      	lsls	r3, r3, #2
 8013e24:	4a15      	ldr	r2, [pc, #84]	; (8013e7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013e26:	4413      	add	r3, r2
 8013e28:	4299      	cmp	r1, r3
 8013e2a:	d101      	bne.n	8013e30 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e000      	b.n	8013e32 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8013e30:	2300      	movs	r3, #0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d01c      	beq.n	8013e70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e36:	69bb      	ldr	r3, [r7, #24]
 8013e38:	3304      	adds	r3, #4
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7fd fcb4 	bl	80117a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013e40:	69bb      	ldr	r3, [r7, #24]
 8013e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e44:	4b0e      	ldr	r3, [pc, #56]	; (8013e80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d903      	bls.n	8013e54 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8013e4c:	69bb      	ldr	r3, [r7, #24]
 8013e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e50:	4a0b      	ldr	r2, [pc, #44]	; (8013e80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013e52:	6013      	str	r3, [r2, #0]
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e58:	4613      	mov	r3, r2
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	4413      	add	r3, r2
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	4a06      	ldr	r2, [pc, #24]	; (8013e7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013e62:	441a      	add	r2, r3
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	3304      	adds	r3, #4
 8013e68:	4619      	mov	r1, r3
 8013e6a:	4610      	mov	r0, r2
 8013e6c:	f7fd fc3f 	bl	80116ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e70:	bf00      	nop
 8013e72:	3720      	adds	r7, #32
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}
 8013e78:	20026f7c 	.word	0x20026f7c
 8013e7c:	20026f80 	.word	0x20026f80
 8013e80:	20027458 	.word	0x20027458

08013e84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013e84:	b480      	push	{r7}
 8013e86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013e88:	4b07      	ldr	r3, [pc, #28]	; (8013ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d004      	beq.n	8013e9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013e90:	4b05      	ldr	r3, [pc, #20]	; (8013ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e96:	3201      	adds	r2, #1
 8013e98:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8013e9a:	4b03      	ldr	r3, [pc, #12]	; (8013ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
	}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr
 8013ea8:	20026f7c 	.word	0x20026f7c

08013eac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b086      	sub	sp, #24
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	60b9      	str	r1, [r7, #8]
 8013eb6:	607a      	str	r2, [r7, #4]
 8013eb8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013eba:	f7fd fdc7 	bl	8011a4c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013ebe:	4b26      	ldr	r3, [pc, #152]	; (8013f58 <xTaskNotifyWait+0xac>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	2b02      	cmp	r3, #2
 8013eca:	d01a      	beq.n	8013f02 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013ecc:	4b22      	ldr	r3, [pc, #136]	; (8013f58 <xTaskNotifyWait+0xac>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	43d2      	mvns	r2, r2
 8013ed6:	400a      	ands	r2, r1
 8013ed8:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013eda:	4b1f      	ldr	r3, [pc, #124]	; (8013f58 <xTaskNotifyWait+0xac>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2201      	movs	r2, #1
 8013ee0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d00b      	beq.n	8013f02 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013eea:	2101      	movs	r1, #1
 8013eec:	6838      	ldr	r0, [r7, #0]
 8013eee:	f000 f9a3 	bl	8014238 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013ef2:	4b1a      	ldr	r3, [pc, #104]	; (8013f5c <xTaskNotifyWait+0xb0>)
 8013ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ef8:	601a      	str	r2, [r3, #0]
 8013efa:	f3bf 8f4f 	dsb	sy
 8013efe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013f02:	f7fd fdd1 	bl	8011aa8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013f06:	f7fd fda1 	bl	8011a4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d004      	beq.n	8013f1a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013f10:	4b11      	ldr	r3, [pc, #68]	; (8013f58 <xTaskNotifyWait+0xac>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013f1a:	4b0f      	ldr	r3, [pc, #60]	; (8013f58 <xTaskNotifyWait+0xac>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	2b02      	cmp	r3, #2
 8013f26:	d002      	beq.n	8013f2e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	617b      	str	r3, [r7, #20]
 8013f2c:	e008      	b.n	8013f40 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013f2e:	4b0a      	ldr	r3, [pc, #40]	; (8013f58 <xTaskNotifyWait+0xac>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013f34:	68ba      	ldr	r2, [r7, #8]
 8013f36:	43d2      	mvns	r2, r2
 8013f38:	400a      	ands	r2, r1
 8013f3a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f40:	4b05      	ldr	r3, [pc, #20]	; (8013f58 <xTaskNotifyWait+0xac>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	2200      	movs	r2, #0
 8013f46:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8013f4a:	f7fd fdad 	bl	8011aa8 <vPortExitCritical>

		return xReturn;
 8013f4e:	697b      	ldr	r3, [r7, #20]
	}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3718      	adds	r7, #24
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	20026f7c 	.word	0x20026f7c
 8013f5c:	e000ed04 	.word	0xe000ed04

08013f60 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b08a      	sub	sp, #40	; 0x28
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	603b      	str	r3, [r7, #0]
 8013f6c:	4613      	mov	r3, r2
 8013f6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013f70:	2301      	movs	r3, #1
 8013f72:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d109      	bne.n	8013f8e <xTaskGenericNotify+0x2e>
 8013f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f7e:	f383 8811 	msr	BASEPRI, r3
 8013f82:	f3bf 8f6f 	isb	sy
 8013f86:	f3bf 8f4f 	dsb	sy
 8013f8a:	61bb      	str	r3, [r7, #24]
 8013f8c:	e7fe      	b.n	8013f8c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013f92:	f7fd fd5b 	bl	8011a4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d003      	beq.n	8013fa4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013f9c:	6a3b      	ldr	r3, [r7, #32]
 8013f9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013fa4:	6a3b      	ldr	r3, [r7, #32]
 8013fa6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013faa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013fac:	6a3b      	ldr	r3, [r7, #32]
 8013fae:	2202      	movs	r2, #2
 8013fb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8013fb4:	79fb      	ldrb	r3, [r7, #7]
 8013fb6:	2b04      	cmp	r3, #4
 8013fb8:	d827      	bhi.n	801400a <xTaskGenericNotify+0xaa>
 8013fba:	a201      	add	r2, pc, #4	; (adr r2, 8013fc0 <xTaskGenericNotify+0x60>)
 8013fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fc0:	0801400b 	.word	0x0801400b
 8013fc4:	08013fd5 	.word	0x08013fd5
 8013fc8:	08013fe3 	.word	0x08013fe3
 8013fcc:	08013fef 	.word	0x08013fef
 8013fd0:	08013ff7 	.word	0x08013ff7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013fd4:	6a3b      	ldr	r3, [r7, #32]
 8013fd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	431a      	orrs	r2, r3
 8013fdc:	6a3b      	ldr	r3, [r7, #32]
 8013fde:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013fe0:	e013      	b.n	801400a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013fe2:	6a3b      	ldr	r3, [r7, #32]
 8013fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fe6:	1c5a      	adds	r2, r3, #1
 8013fe8:	6a3b      	ldr	r3, [r7, #32]
 8013fea:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013fec:	e00d      	b.n	801400a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013fee:	6a3b      	ldr	r3, [r7, #32]
 8013ff0:	68ba      	ldr	r2, [r7, #8]
 8013ff2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013ff4:	e009      	b.n	801400a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013ff6:	7ffb      	ldrb	r3, [r7, #31]
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	d003      	beq.n	8014004 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013ffc:	6a3b      	ldr	r3, [r7, #32]
 8013ffe:	68ba      	ldr	r2, [r7, #8]
 8014000:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014002:	e001      	b.n	8014008 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8014004:	2300      	movs	r3, #0
 8014006:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014008:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801400a:	7ffb      	ldrb	r3, [r7, #31]
 801400c:	2b01      	cmp	r3, #1
 801400e:	d13b      	bne.n	8014088 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014010:	6a3b      	ldr	r3, [r7, #32]
 8014012:	3304      	adds	r3, #4
 8014014:	4618      	mov	r0, r3
 8014016:	f7fd fbc7 	bl	80117a8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801401a:	6a3b      	ldr	r3, [r7, #32]
 801401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801401e:	4b1e      	ldr	r3, [pc, #120]	; (8014098 <xTaskGenericNotify+0x138>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	429a      	cmp	r2, r3
 8014024:	d903      	bls.n	801402e <xTaskGenericNotify+0xce>
 8014026:	6a3b      	ldr	r3, [r7, #32]
 8014028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801402a:	4a1b      	ldr	r2, [pc, #108]	; (8014098 <xTaskGenericNotify+0x138>)
 801402c:	6013      	str	r3, [r2, #0]
 801402e:	6a3b      	ldr	r3, [r7, #32]
 8014030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014032:	4613      	mov	r3, r2
 8014034:	009b      	lsls	r3, r3, #2
 8014036:	4413      	add	r3, r2
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	4a18      	ldr	r2, [pc, #96]	; (801409c <xTaskGenericNotify+0x13c>)
 801403c:	441a      	add	r2, r3
 801403e:	6a3b      	ldr	r3, [r7, #32]
 8014040:	3304      	adds	r3, #4
 8014042:	4619      	mov	r1, r3
 8014044:	4610      	mov	r0, r2
 8014046:	f7fd fb52 	bl	80116ee <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801404a:	6a3b      	ldr	r3, [r7, #32]
 801404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801404e:	2b00      	cmp	r3, #0
 8014050:	d009      	beq.n	8014066 <xTaskGenericNotify+0x106>
 8014052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014056:	f383 8811 	msr	BASEPRI, r3
 801405a:	f3bf 8f6f 	isb	sy
 801405e:	f3bf 8f4f 	dsb	sy
 8014062:	617b      	str	r3, [r7, #20]
 8014064:	e7fe      	b.n	8014064 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8014066:	f7ff fd5b 	bl	8013b20 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801406a:	6a3b      	ldr	r3, [r7, #32]
 801406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801406e:	4b0c      	ldr	r3, [pc, #48]	; (80140a0 <xTaskGenericNotify+0x140>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014074:	429a      	cmp	r2, r3
 8014076:	d907      	bls.n	8014088 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014078:	4b0a      	ldr	r3, [pc, #40]	; (80140a4 <xTaskGenericNotify+0x144>)
 801407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801407e:	601a      	str	r2, [r3, #0]
 8014080:	f3bf 8f4f 	dsb	sy
 8014084:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014088:	f7fd fd0e 	bl	8011aa8 <vPortExitCritical>

		return xReturn;
 801408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801408e:	4618      	mov	r0, r3
 8014090:	3728      	adds	r7, #40	; 0x28
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20027458 	.word	0x20027458
 801409c:	20026f80 	.word	0x20026f80
 80140a0:	20026f7c 	.word	0x20026f7c
 80140a4:	e000ed04 	.word	0xe000ed04

080140a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b08e      	sub	sp, #56	; 0x38
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	60b9      	str	r1, [r7, #8]
 80140b2:	603b      	str	r3, [r7, #0]
 80140b4:	4613      	mov	r3, r2
 80140b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80140b8:	2301      	movs	r3, #1
 80140ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d109      	bne.n	80140d6 <xTaskGenericNotifyFromISR+0x2e>
 80140c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c6:	f383 8811 	msr	BASEPRI, r3
 80140ca:	f3bf 8f6f 	isb	sy
 80140ce:	f3bf 8f4f 	dsb	sy
 80140d2:	627b      	str	r3, [r7, #36]	; 0x24
 80140d4:	e7fe      	b.n	80140d4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80140d6:	f7fd fd71 	bl	8011bbc <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80140de:	f3ef 8211 	mrs	r2, BASEPRI
 80140e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e6:	f383 8811 	msr	BASEPRI, r3
 80140ea:	f3bf 8f6f 	isb	sy
 80140ee:	f3bf 8f4f 	dsb	sy
 80140f2:	623a      	str	r2, [r7, #32]
 80140f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80140f6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d003      	beq.n	8014108 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801410e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014114:	2202      	movs	r2, #2
 8014116:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 801411a:	79fb      	ldrb	r3, [r7, #7]
 801411c:	2b04      	cmp	r3, #4
 801411e:	d829      	bhi.n	8014174 <xTaskGenericNotifyFromISR+0xcc>
 8014120:	a201      	add	r2, pc, #4	; (adr r2, 8014128 <xTaskGenericNotifyFromISR+0x80>)
 8014122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014126:	bf00      	nop
 8014128:	08014175 	.word	0x08014175
 801412c:	0801413d 	.word	0x0801413d
 8014130:	0801414b 	.word	0x0801414b
 8014134:	08014157 	.word	0x08014157
 8014138:	0801415f 	.word	0x0801415f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	431a      	orrs	r2, r3
 8014144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014146:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8014148:	e014      	b.n	8014174 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801414e:	1c5a      	adds	r2, r3, #1
 8014150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014152:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8014154:	e00e      	b.n	8014174 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014158:	68ba      	ldr	r2, [r7, #8]
 801415a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 801415c:	e00a      	b.n	8014174 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801415e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014162:	2b02      	cmp	r3, #2
 8014164:	d003      	beq.n	801416e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014168:	68ba      	ldr	r2, [r7, #8]
 801416a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801416c:	e001      	b.n	8014172 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 801416e:	2300      	movs	r3, #0
 8014170:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014172:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014178:	2b01      	cmp	r3, #1
 801417a:	d146      	bne.n	801420a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014180:	2b00      	cmp	r3, #0
 8014182:	d009      	beq.n	8014198 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014188:	f383 8811 	msr	BASEPRI, r3
 801418c:	f3bf 8f6f 	isb	sy
 8014190:	f3bf 8f4f 	dsb	sy
 8014194:	61bb      	str	r3, [r7, #24]
 8014196:	e7fe      	b.n	8014196 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014198:	4b21      	ldr	r3, [pc, #132]	; (8014220 <xTaskGenericNotifyFromISR+0x178>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d11d      	bne.n	80141dc <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a2:	3304      	adds	r3, #4
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7fd faff 	bl	80117a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80141aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141ae:	4b1d      	ldr	r3, [pc, #116]	; (8014224 <xTaskGenericNotifyFromISR+0x17c>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d903      	bls.n	80141be <xTaskGenericNotifyFromISR+0x116>
 80141b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ba:	4a1a      	ldr	r2, [pc, #104]	; (8014224 <xTaskGenericNotifyFromISR+0x17c>)
 80141bc:	6013      	str	r3, [r2, #0]
 80141be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141c2:	4613      	mov	r3, r2
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	4413      	add	r3, r2
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	4a17      	ldr	r2, [pc, #92]	; (8014228 <xTaskGenericNotifyFromISR+0x180>)
 80141cc:	441a      	add	r2, r3
 80141ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d0:	3304      	adds	r3, #4
 80141d2:	4619      	mov	r1, r3
 80141d4:	4610      	mov	r0, r2
 80141d6:	f7fd fa8a 	bl	80116ee <vListInsertEnd>
 80141da:	e005      	b.n	80141e8 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80141dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141de:	3318      	adds	r3, #24
 80141e0:	4619      	mov	r1, r3
 80141e2:	4812      	ldr	r0, [pc, #72]	; (801422c <xTaskGenericNotifyFromISR+0x184>)
 80141e4:	f7fd fa83 	bl	80116ee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80141e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141ec:	4b10      	ldr	r3, [pc, #64]	; (8014230 <xTaskGenericNotifyFromISR+0x188>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d909      	bls.n	801420a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80141f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d003      	beq.n	8014204 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80141fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141fe:	2201      	movs	r2, #1
 8014200:	601a      	str	r2, [r3, #0]
 8014202:	e002      	b.n	801420a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8014204:	4b0b      	ldr	r3, [pc, #44]	; (8014234 <xTaskGenericNotifyFromISR+0x18c>)
 8014206:	2201      	movs	r2, #1
 8014208:	601a      	str	r2, [r3, #0]
 801420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801420c:	617b      	str	r3, [r7, #20]
	__asm volatile
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014216:	4618      	mov	r0, r3
 8014218:	3738      	adds	r7, #56	; 0x38
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	20027478 	.word	0x20027478
 8014224:	20027458 	.word	0x20027458
 8014228:	20026f80 	.word	0x20026f80
 801422c:	20027410 	.word	0x20027410
 8014230:	20026f7c 	.word	0x20026f7c
 8014234:	20027464 	.word	0x20027464

08014238 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014242:	4b21      	ldr	r3, [pc, #132]	; (80142c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014248:	4b20      	ldr	r3, [pc, #128]	; (80142cc <prvAddCurrentTaskToDelayedList+0x94>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	3304      	adds	r3, #4
 801424e:	4618      	mov	r0, r3
 8014250:	f7fd faaa 	bl	80117a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801425a:	d10a      	bne.n	8014272 <prvAddCurrentTaskToDelayedList+0x3a>
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d007      	beq.n	8014272 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014262:	4b1a      	ldr	r3, [pc, #104]	; (80142cc <prvAddCurrentTaskToDelayedList+0x94>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	3304      	adds	r3, #4
 8014268:	4619      	mov	r1, r3
 801426a:	4819      	ldr	r0, [pc, #100]	; (80142d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801426c:	f7fd fa3f 	bl	80116ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014270:	e026      	b.n	80142c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014272:	68fa      	ldr	r2, [r7, #12]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	4413      	add	r3, r2
 8014278:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801427a:	4b14      	ldr	r3, [pc, #80]	; (80142cc <prvAddCurrentTaskToDelayedList+0x94>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	68ba      	ldr	r2, [r7, #8]
 8014280:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014282:	68ba      	ldr	r2, [r7, #8]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	429a      	cmp	r2, r3
 8014288:	d209      	bcs.n	801429e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801428a:	4b12      	ldr	r3, [pc, #72]	; (80142d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801428c:	681a      	ldr	r2, [r3, #0]
 801428e:	4b0f      	ldr	r3, [pc, #60]	; (80142cc <prvAddCurrentTaskToDelayedList+0x94>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	3304      	adds	r3, #4
 8014294:	4619      	mov	r1, r3
 8014296:	4610      	mov	r0, r2
 8014298:	f7fd fa4d 	bl	8011736 <vListInsert>
}
 801429c:	e010      	b.n	80142c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801429e:	4b0e      	ldr	r3, [pc, #56]	; (80142d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	4b0a      	ldr	r3, [pc, #40]	; (80142cc <prvAddCurrentTaskToDelayedList+0x94>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	3304      	adds	r3, #4
 80142a8:	4619      	mov	r1, r3
 80142aa:	4610      	mov	r0, r2
 80142ac:	f7fd fa43 	bl	8011736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80142b0:	4b0a      	ldr	r3, [pc, #40]	; (80142dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	68ba      	ldr	r2, [r7, #8]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d202      	bcs.n	80142c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80142ba:	4a08      	ldr	r2, [pc, #32]	; (80142dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	6013      	str	r3, [r2, #0]
}
 80142c0:	bf00      	nop
 80142c2:	3710      	adds	r7, #16
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	20027454 	.word	0x20027454
 80142cc:	20026f7c 	.word	0x20026f7c
 80142d0:	2002743c 	.word	0x2002743c
 80142d4:	2002740c 	.word	0x2002740c
 80142d8:	20027408 	.word	0x20027408
 80142dc:	20027470 	.word	0x20027470

080142e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b08a      	sub	sp, #40	; 0x28
 80142e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80142e6:	2300      	movs	r3, #0
 80142e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80142ea:	f000 fb51 	bl	8014990 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80142ee:	4b1c      	ldr	r3, [pc, #112]	; (8014360 <xTimerCreateTimerTask+0x80>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d021      	beq.n	801433a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80142f6:	2300      	movs	r3, #0
 80142f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80142fa:	2300      	movs	r3, #0
 80142fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80142fe:	1d3a      	adds	r2, r7, #4
 8014300:	f107 0108 	add.w	r1, r7, #8
 8014304:	f107 030c 	add.w	r3, r7, #12
 8014308:	4618      	mov	r0, r3
 801430a:	f7fc ffcd 	bl	80112a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801430e:	6879      	ldr	r1, [r7, #4]
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	9202      	str	r2, [sp, #8]
 8014316:	9301      	str	r3, [sp, #4]
 8014318:	2302      	movs	r3, #2
 801431a:	9300      	str	r3, [sp, #0]
 801431c:	2300      	movs	r3, #0
 801431e:	460a      	mov	r2, r1
 8014320:	4910      	ldr	r1, [pc, #64]	; (8014364 <xTimerCreateTimerTask+0x84>)
 8014322:	4811      	ldr	r0, [pc, #68]	; (8014368 <xTimerCreateTimerTask+0x88>)
 8014324:	f7fe fd28 	bl	8012d78 <xTaskCreateStatic>
 8014328:	4602      	mov	r2, r0
 801432a:	4b10      	ldr	r3, [pc, #64]	; (801436c <xTimerCreateTimerTask+0x8c>)
 801432c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801432e:	4b0f      	ldr	r3, [pc, #60]	; (801436c <xTimerCreateTimerTask+0x8c>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d001      	beq.n	801433a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014336:	2301      	movs	r3, #1
 8014338:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d109      	bne.n	8014354 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8014340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014344:	f383 8811 	msr	BASEPRI, r3
 8014348:	f3bf 8f6f 	isb	sy
 801434c:	f3bf 8f4f 	dsb	sy
 8014350:	613b      	str	r3, [r7, #16]
 8014352:	e7fe      	b.n	8014352 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8014354:	697b      	ldr	r3, [r7, #20]
}
 8014356:	4618      	mov	r0, r3
 8014358:	3718      	adds	r7, #24
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}
 801435e:	bf00      	nop
 8014360:	200274b4 	.word	0x200274b4
 8014364:	0801b7a0 	.word	0x0801b7a0
 8014368:	080145a5 	.word	0x080145a5
 801436c:	200274b8 	.word	0x200274b8

08014370 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014370:	b580      	push	{r7, lr}
 8014372:	b088      	sub	sp, #32
 8014374:	af02      	add	r7, sp, #8
 8014376:	60f8      	str	r0, [r7, #12]
 8014378:	60b9      	str	r1, [r7, #8]
 801437a:	607a      	str	r2, [r7, #4]
 801437c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801437e:	2030      	movs	r0, #48	; 0x30
 8014380:	f7fc ffac 	bl	80112dc <pvPortMalloc>
 8014384:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d00d      	beq.n	80143a8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	9301      	str	r3, [sp, #4]
 8014390:	6a3b      	ldr	r3, [r7, #32]
 8014392:	9300      	str	r3, [sp, #0]
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	68b9      	ldr	r1, [r7, #8]
 801439a:	68f8      	ldr	r0, [r7, #12]
 801439c:	f000 f844 	bl	8014428 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80143a8:	697b      	ldr	r3, [r7, #20]
	}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3718      	adds	r7, #24
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}

080143b2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b08a      	sub	sp, #40	; 0x28
 80143b6:	af02      	add	r7, sp, #8
 80143b8:	60f8      	str	r0, [r7, #12]
 80143ba:	60b9      	str	r1, [r7, #8]
 80143bc:	607a      	str	r2, [r7, #4]
 80143be:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80143c0:	2330      	movs	r3, #48	; 0x30
 80143c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	2b30      	cmp	r3, #48	; 0x30
 80143c8:	d009      	beq.n	80143de <xTimerCreateStatic+0x2c>
 80143ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ce:	f383 8811 	msr	BASEPRI, r3
 80143d2:	f3bf 8f6f 	isb	sy
 80143d6:	f3bf 8f4f 	dsb	sy
 80143da:	61bb      	str	r3, [r7, #24]
 80143dc:	e7fe      	b.n	80143dc <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80143de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d109      	bne.n	80143f8 <xTimerCreateStatic+0x46>
 80143e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e8:	f383 8811 	msr	BASEPRI, r3
 80143ec:	f3bf 8f6f 	isb	sy
 80143f0:	f3bf 8f4f 	dsb	sy
 80143f4:	617b      	str	r3, [r7, #20]
 80143f6:	e7fe      	b.n	80143f6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fa:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d00d      	beq.n	801441e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014402:	69fb      	ldr	r3, [r7, #28]
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	687a      	ldr	r2, [r7, #4]
 801440e:	68b9      	ldr	r1, [r7, #8]
 8014410:	68f8      	ldr	r0, [r7, #12]
 8014412:	f000 f809 	bl	8014428 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8014416:	69fb      	ldr	r3, [r7, #28]
 8014418:	2201      	movs	r2, #1
 801441a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 801441e:	69fb      	ldr	r3, [r7, #28]
	}
 8014420:	4618      	mov	r0, r3
 8014422:	3720      	adds	r7, #32
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}

08014428 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b086      	sub	sp, #24
 801442c:	af00      	add	r7, sp, #0
 801442e:	60f8      	str	r0, [r7, #12]
 8014430:	60b9      	str	r1, [r7, #8]
 8014432:	607a      	str	r2, [r7, #4]
 8014434:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d109      	bne.n	8014450 <prvInitialiseNewTimer+0x28>
 801443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014440:	f383 8811 	msr	BASEPRI, r3
 8014444:	f3bf 8f6f 	isb	sy
 8014448:	f3bf 8f4f 	dsb	sy
 801444c:	617b      	str	r3, [r7, #20]
 801444e:	e7fe      	b.n	801444e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8014450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014452:	2b00      	cmp	r3, #0
 8014454:	d015      	beq.n	8014482 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8014456:	f000 fa9b 	bl	8014990 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8014460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014462:	68ba      	ldr	r2, [r7, #8]
 8014464:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8014466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 801446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446e:	683a      	ldr	r2, [r7, #0]
 8014470:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8014472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014474:	6a3a      	ldr	r2, [r7, #32]
 8014476:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447a:	3304      	adds	r3, #4
 801447c:	4618      	mov	r0, r3
 801447e:	f7fd f929 	bl	80116d4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014482:	bf00      	nop
 8014484:	3718      	adds	r7, #24
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
	...

0801448c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b08a      	sub	sp, #40	; 0x28
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	607a      	str	r2, [r7, #4]
 8014498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801449a:	2300      	movs	r3, #0
 801449c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d109      	bne.n	80144b8 <xTimerGenericCommand+0x2c>
 80144a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a8:	f383 8811 	msr	BASEPRI, r3
 80144ac:	f3bf 8f6f 	isb	sy
 80144b0:	f3bf 8f4f 	dsb	sy
 80144b4:	623b      	str	r3, [r7, #32]
 80144b6:	e7fe      	b.n	80144b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80144b8:	4b19      	ldr	r3, [pc, #100]	; (8014520 <xTimerGenericCommand+0x94>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d02a      	beq.n	8014516 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	2b05      	cmp	r3, #5
 80144d0:	dc18      	bgt.n	8014504 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80144d2:	f7ff fb5b 	bl	8013b8c <xTaskGetSchedulerState>
 80144d6:	4603      	mov	r3, r0
 80144d8:	2b02      	cmp	r3, #2
 80144da:	d109      	bne.n	80144f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80144dc:	4b10      	ldr	r3, [pc, #64]	; (8014520 <xTimerGenericCommand+0x94>)
 80144de:	6818      	ldr	r0, [r3, #0]
 80144e0:	f107 0110 	add.w	r1, r7, #16
 80144e4:	2300      	movs	r3, #0
 80144e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144e8:	f7fd fdfc 	bl	80120e4 <xQueueGenericSend>
 80144ec:	6278      	str	r0, [r7, #36]	; 0x24
 80144ee:	e012      	b.n	8014516 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80144f0:	4b0b      	ldr	r3, [pc, #44]	; (8014520 <xTimerGenericCommand+0x94>)
 80144f2:	6818      	ldr	r0, [r3, #0]
 80144f4:	f107 0110 	add.w	r1, r7, #16
 80144f8:	2300      	movs	r3, #0
 80144fa:	2200      	movs	r2, #0
 80144fc:	f7fd fdf2 	bl	80120e4 <xQueueGenericSend>
 8014500:	6278      	str	r0, [r7, #36]	; 0x24
 8014502:	e008      	b.n	8014516 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014504:	4b06      	ldr	r3, [pc, #24]	; (8014520 <xTimerGenericCommand+0x94>)
 8014506:	6818      	ldr	r0, [r3, #0]
 8014508:	f107 0110 	add.w	r1, r7, #16
 801450c:	2300      	movs	r3, #0
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	f7fd fee2 	bl	80122d8 <xQueueGenericSendFromISR>
 8014514:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014518:	4618      	mov	r0, r3
 801451a:	3728      	adds	r7, #40	; 0x28
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}
 8014520:	200274b4 	.word	0x200274b4

08014524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b088      	sub	sp, #32
 8014528:	af02      	add	r7, sp, #8
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801452e:	4b1c      	ldr	r3, [pc, #112]	; (80145a0 <prvProcessExpiredTimer+0x7c>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	3304      	adds	r3, #4
 801453c:	4618      	mov	r0, r3
 801453e:	f7fd f933 	bl	80117a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	69db      	ldr	r3, [r3, #28]
 8014546:	2b01      	cmp	r3, #1
 8014548:	d121      	bne.n	801458e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	699a      	ldr	r2, [r3, #24]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	18d1      	adds	r1, r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	683a      	ldr	r2, [r7, #0]
 8014556:	6978      	ldr	r0, [r7, #20]
 8014558:	f000 f8c8 	bl	80146ec <prvInsertTimerInActiveList>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d015      	beq.n	801458e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014562:	2300      	movs	r3, #0
 8014564:	9300      	str	r3, [sp, #0]
 8014566:	2300      	movs	r3, #0
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	2100      	movs	r1, #0
 801456c:	6978      	ldr	r0, [r7, #20]
 801456e:	f7ff ff8d 	bl	801448c <xTimerGenericCommand>
 8014572:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d109      	bne.n	801458e <prvProcessExpiredTimer+0x6a>
 801457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	60fb      	str	r3, [r7, #12]
 801458c:	e7fe      	b.n	801458c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014592:	6978      	ldr	r0, [r7, #20]
 8014594:	4798      	blx	r3
}
 8014596:	bf00      	nop
 8014598:	3718      	adds	r7, #24
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	200274ac 	.word	0x200274ac

080145a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80145ac:	f107 0308 	add.w	r3, r7, #8
 80145b0:	4618      	mov	r0, r3
 80145b2:	f000 f857 	bl	8014664 <prvGetNextExpireTime>
 80145b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	4619      	mov	r1, r3
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f000 f803 	bl	80145c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80145c2:	f000 f8d5 	bl	8014770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80145c6:	e7f1      	b.n	80145ac <prvTimerTask+0x8>

080145c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b084      	sub	sp, #16
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80145d2:	f7fe fe05 	bl	80131e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80145d6:	f107 0308 	add.w	r3, r7, #8
 80145da:	4618      	mov	r0, r3
 80145dc:	f000 f866 	bl	80146ac <prvSampleTimeNow>
 80145e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d130      	bne.n	801464a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d10a      	bne.n	8014604 <prvProcessTimerOrBlockTask+0x3c>
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d806      	bhi.n	8014604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80145f6:	f7fe fe39 	bl	801326c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80145fa:	68f9      	ldr	r1, [r7, #12]
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f7ff ff91 	bl	8014524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014602:	e024      	b.n	801464e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d008      	beq.n	801461c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801460a:	4b13      	ldr	r3, [pc, #76]	; (8014658 <prvProcessTimerOrBlockTask+0x90>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	bf0c      	ite	eq
 8014614:	2301      	moveq	r3, #1
 8014616:	2300      	movne	r3, #0
 8014618:	b2db      	uxtb	r3, r3
 801461a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801461c:	4b0f      	ldr	r3, [pc, #60]	; (801465c <prvProcessTimerOrBlockTask+0x94>)
 801461e:	6818      	ldr	r0, [r3, #0]
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	1ad3      	subs	r3, r2, r3
 8014626:	683a      	ldr	r2, [r7, #0]
 8014628:	4619      	mov	r1, r3
 801462a:	f7fe fb71 	bl	8012d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801462e:	f7fe fe1d 	bl	801326c <xTaskResumeAll>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d10a      	bne.n	801464e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014638:	4b09      	ldr	r3, [pc, #36]	; (8014660 <prvProcessTimerOrBlockTask+0x98>)
 801463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801463e:	601a      	str	r2, [r3, #0]
 8014640:	f3bf 8f4f 	dsb	sy
 8014644:	f3bf 8f6f 	isb	sy
}
 8014648:	e001      	b.n	801464e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801464a:	f7fe fe0f 	bl	801326c <xTaskResumeAll>
}
 801464e:	bf00      	nop
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	200274b0 	.word	0x200274b0
 801465c:	200274b4 	.word	0x200274b4
 8014660:	e000ed04 	.word	0xe000ed04

08014664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014664:	b480      	push	{r7}
 8014666:	b085      	sub	sp, #20
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801466c:	4b0e      	ldr	r3, [pc, #56]	; (80146a8 <prvGetNextExpireTime+0x44>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	bf0c      	ite	eq
 8014676:	2301      	moveq	r3, #1
 8014678:	2300      	movne	r3, #0
 801467a:	b2db      	uxtb	r3, r3
 801467c:	461a      	mov	r2, r3
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d105      	bne.n	8014696 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801468a:	4b07      	ldr	r3, [pc, #28]	; (80146a8 <prvGetNextExpireTime+0x44>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	60fb      	str	r3, [r7, #12]
 8014694:	e001      	b.n	801469a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014696:	2300      	movs	r3, #0
 8014698:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801469a:	68fb      	ldr	r3, [r7, #12]
}
 801469c:	4618      	mov	r0, r3
 801469e:	3714      	adds	r7, #20
 80146a0:	46bd      	mov	sp, r7
 80146a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a6:	4770      	bx	lr
 80146a8:	200274ac 	.word	0x200274ac

080146ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80146b4:	f7fe fe76 	bl	80133a4 <xTaskGetTickCount>
 80146b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80146ba:	4b0b      	ldr	r3, [pc, #44]	; (80146e8 <prvSampleTimeNow+0x3c>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	68fa      	ldr	r2, [r7, #12]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d205      	bcs.n	80146d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80146c4:	f000 f904 	bl	80148d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2201      	movs	r2, #1
 80146cc:	601a      	str	r2, [r3, #0]
 80146ce:	e002      	b.n	80146d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2200      	movs	r2, #0
 80146d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80146d6:	4a04      	ldr	r2, [pc, #16]	; (80146e8 <prvSampleTimeNow+0x3c>)
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80146dc:	68fb      	ldr	r3, [r7, #12]
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3710      	adds	r7, #16
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	200274bc 	.word	0x200274bc

080146ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b086      	sub	sp, #24
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80146fa:	2300      	movs	r3, #0
 80146fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	68ba      	ldr	r2, [r7, #8]
 8014702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	68fa      	ldr	r2, [r7, #12]
 8014708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801470a:	68ba      	ldr	r2, [r7, #8]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	429a      	cmp	r2, r3
 8014710:	d812      	bhi.n	8014738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	1ad2      	subs	r2, r2, r3
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	699b      	ldr	r3, [r3, #24]
 801471c:	429a      	cmp	r2, r3
 801471e:	d302      	bcc.n	8014726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014720:	2301      	movs	r3, #1
 8014722:	617b      	str	r3, [r7, #20]
 8014724:	e01b      	b.n	801475e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014726:	4b10      	ldr	r3, [pc, #64]	; (8014768 <prvInsertTimerInActiveList+0x7c>)
 8014728:	681a      	ldr	r2, [r3, #0]
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	3304      	adds	r3, #4
 801472e:	4619      	mov	r1, r3
 8014730:	4610      	mov	r0, r2
 8014732:	f7fd f800 	bl	8011736 <vListInsert>
 8014736:	e012      	b.n	801475e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	429a      	cmp	r2, r3
 801473e:	d206      	bcs.n	801474e <prvInsertTimerInActiveList+0x62>
 8014740:	68ba      	ldr	r2, [r7, #8]
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	429a      	cmp	r2, r3
 8014746:	d302      	bcc.n	801474e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014748:	2301      	movs	r3, #1
 801474a:	617b      	str	r3, [r7, #20]
 801474c:	e007      	b.n	801475e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801474e:	4b07      	ldr	r3, [pc, #28]	; (801476c <prvInsertTimerInActiveList+0x80>)
 8014750:	681a      	ldr	r2, [r3, #0]
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	3304      	adds	r3, #4
 8014756:	4619      	mov	r1, r3
 8014758:	4610      	mov	r0, r2
 801475a:	f7fc ffec 	bl	8011736 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801475e:	697b      	ldr	r3, [r7, #20]
}
 8014760:	4618      	mov	r0, r3
 8014762:	3718      	adds	r7, #24
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}
 8014768:	200274b0 	.word	0x200274b0
 801476c:	200274ac 	.word	0x200274ac

08014770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b08e      	sub	sp, #56	; 0x38
 8014774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014776:	e099      	b.n	80148ac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	da17      	bge.n	80147ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801477e:	1d3b      	adds	r3, r7, #4
 8014780:	3304      	adds	r3, #4
 8014782:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014786:	2b00      	cmp	r3, #0
 8014788:	d109      	bne.n	801479e <prvProcessReceivedCommands+0x2e>
 801478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801478e:	f383 8811 	msr	BASEPRI, r3
 8014792:	f3bf 8f6f 	isb	sy
 8014796:	f3bf 8f4f 	dsb	sy
 801479a:	61fb      	str	r3, [r7, #28]
 801479c:	e7fe      	b.n	801479c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147a4:	6850      	ldr	r0, [r2, #4]
 80147a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147a8:	6892      	ldr	r2, [r2, #8]
 80147aa:	4611      	mov	r1, r2
 80147ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	db7a      	blt.n	80148aa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80147b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ba:	695b      	ldr	r3, [r3, #20]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d004      	beq.n	80147ca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80147c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c2:	3304      	adds	r3, #4
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7fc ffef 	bl	80117a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80147ca:	463b      	mov	r3, r7
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7ff ff6d 	bl	80146ac <prvSampleTimeNow>
 80147d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2b09      	cmp	r3, #9
 80147d8:	d868      	bhi.n	80148ac <prvProcessReceivedCommands+0x13c>
 80147da:	a201      	add	r2, pc, #4	; (adr r2, 80147e0 <prvProcessReceivedCommands+0x70>)
 80147dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147e0:	08014809 	.word	0x08014809
 80147e4:	08014809 	.word	0x08014809
 80147e8:	08014809 	.word	0x08014809
 80147ec:	080148ad 	.word	0x080148ad
 80147f0:	08014863 	.word	0x08014863
 80147f4:	08014899 	.word	0x08014899
 80147f8:	08014809 	.word	0x08014809
 80147fc:	08014809 	.word	0x08014809
 8014800:	080148ad 	.word	0x080148ad
 8014804:	08014863 	.word	0x08014863
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014808:	68ba      	ldr	r2, [r7, #8]
 801480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480c:	699b      	ldr	r3, [r3, #24]
 801480e:	18d1      	adds	r1, r2, r3
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014816:	f7ff ff69 	bl	80146ec <prvInsertTimerInActiveList>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d045      	beq.n	80148ac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014826:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482a:	69db      	ldr	r3, [r3, #28]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d13d      	bne.n	80148ac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014834:	699b      	ldr	r3, [r3, #24]
 8014836:	441a      	add	r2, r3
 8014838:	2300      	movs	r3, #0
 801483a:	9300      	str	r3, [sp, #0]
 801483c:	2300      	movs	r3, #0
 801483e:	2100      	movs	r1, #0
 8014840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014842:	f7ff fe23 	bl	801448c <xTimerGenericCommand>
 8014846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014848:	6a3b      	ldr	r3, [r7, #32]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d12e      	bne.n	80148ac <prvProcessReceivedCommands+0x13c>
 801484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014852:	f383 8811 	msr	BASEPRI, r3
 8014856:	f3bf 8f6f 	isb	sy
 801485a:	f3bf 8f4f 	dsb	sy
 801485e:	61bb      	str	r3, [r7, #24]
 8014860:	e7fe      	b.n	8014860 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014862:	68ba      	ldr	r2, [r7, #8]
 8014864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014866:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486a:	699b      	ldr	r3, [r3, #24]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d109      	bne.n	8014884 <prvProcessReceivedCommands+0x114>
 8014870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014874:	f383 8811 	msr	BASEPRI, r3
 8014878:	f3bf 8f6f 	isb	sy
 801487c:	f3bf 8f4f 	dsb	sy
 8014880:	617b      	str	r3, [r7, #20]
 8014882:	e7fe      	b.n	8014882 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014886:	699a      	ldr	r2, [r3, #24]
 8014888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488a:	18d1      	adds	r1, r2, r3
 801488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014892:	f7ff ff2b 	bl	80146ec <prvInsertTimerInActiveList>
					break;
 8014896:	e009      	b.n	80148ac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d104      	bne.n	80148ac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80148a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148a4:	f7fc fde0 	bl	8011468 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80148a8:	e000      	b.n	80148ac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80148aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80148ac:	4b07      	ldr	r3, [pc, #28]	; (80148cc <prvProcessReceivedCommands+0x15c>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	1d39      	adds	r1, r7, #4
 80148b2:	2200      	movs	r2, #0
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7fd fe2d 	bl	8012514 <xQueueReceive>
 80148ba:	4603      	mov	r3, r0
 80148bc:	2b00      	cmp	r3, #0
 80148be:	f47f af5b 	bne.w	8014778 <prvProcessReceivedCommands+0x8>
	}
}
 80148c2:	bf00      	nop
 80148c4:	3730      	adds	r7, #48	; 0x30
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	200274b4 	.word	0x200274b4

080148d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b088      	sub	sp, #32
 80148d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80148d6:	e044      	b.n	8014962 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148d8:	4b2b      	ldr	r3, [pc, #172]	; (8014988 <prvSwitchTimerLists+0xb8>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	68db      	ldr	r3, [r3, #12]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148e2:	4b29      	ldr	r3, [pc, #164]	; (8014988 <prvSwitchTimerLists+0xb8>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	3304      	adds	r3, #4
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fc ff59 	bl	80117a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fa:	68f8      	ldr	r0, [r7, #12]
 80148fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	69db      	ldr	r3, [r3, #28]
 8014902:	2b01      	cmp	r3, #1
 8014904:	d12d      	bne.n	8014962 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	699b      	ldr	r3, [r3, #24]
 801490a:	693a      	ldr	r2, [r7, #16]
 801490c:	4413      	add	r3, r2
 801490e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014910:	68ba      	ldr	r2, [r7, #8]
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	429a      	cmp	r2, r3
 8014916:	d90e      	bls.n	8014936 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	68ba      	ldr	r2, [r7, #8]
 801491c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	68fa      	ldr	r2, [r7, #12]
 8014922:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014924:	4b18      	ldr	r3, [pc, #96]	; (8014988 <prvSwitchTimerLists+0xb8>)
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	3304      	adds	r3, #4
 801492c:	4619      	mov	r1, r3
 801492e:	4610      	mov	r0, r2
 8014930:	f7fc ff01 	bl	8011736 <vListInsert>
 8014934:	e015      	b.n	8014962 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014936:	2300      	movs	r3, #0
 8014938:	9300      	str	r3, [sp, #0]
 801493a:	2300      	movs	r3, #0
 801493c:	693a      	ldr	r2, [r7, #16]
 801493e:	2100      	movs	r1, #0
 8014940:	68f8      	ldr	r0, [r7, #12]
 8014942:	f7ff fda3 	bl	801448c <xTimerGenericCommand>
 8014946:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d109      	bne.n	8014962 <prvSwitchTimerLists+0x92>
 801494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014952:	f383 8811 	msr	BASEPRI, r3
 8014956:	f3bf 8f6f 	isb	sy
 801495a:	f3bf 8f4f 	dsb	sy
 801495e:	603b      	str	r3, [r7, #0]
 8014960:	e7fe      	b.n	8014960 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014962:	4b09      	ldr	r3, [pc, #36]	; (8014988 <prvSwitchTimerLists+0xb8>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1b5      	bne.n	80148d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801496c:	4b06      	ldr	r3, [pc, #24]	; (8014988 <prvSwitchTimerLists+0xb8>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014972:	4b06      	ldr	r3, [pc, #24]	; (801498c <prvSwitchTimerLists+0xbc>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	4a04      	ldr	r2, [pc, #16]	; (8014988 <prvSwitchTimerLists+0xb8>)
 8014978:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801497a:	4a04      	ldr	r2, [pc, #16]	; (801498c <prvSwitchTimerLists+0xbc>)
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	6013      	str	r3, [r2, #0]
}
 8014980:	bf00      	nop
 8014982:	3718      	adds	r7, #24
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	200274ac 	.word	0x200274ac
 801498c:	200274b0 	.word	0x200274b0

08014990 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014996:	f7fd f859 	bl	8011a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801499a:	4b15      	ldr	r3, [pc, #84]	; (80149f0 <prvCheckForValidListAndQueue+0x60>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d120      	bne.n	80149e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80149a2:	4814      	ldr	r0, [pc, #80]	; (80149f4 <prvCheckForValidListAndQueue+0x64>)
 80149a4:	f7fc fe76 	bl	8011694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80149a8:	4813      	ldr	r0, [pc, #76]	; (80149f8 <prvCheckForValidListAndQueue+0x68>)
 80149aa:	f7fc fe73 	bl	8011694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80149ae:	4b13      	ldr	r3, [pc, #76]	; (80149fc <prvCheckForValidListAndQueue+0x6c>)
 80149b0:	4a10      	ldr	r2, [pc, #64]	; (80149f4 <prvCheckForValidListAndQueue+0x64>)
 80149b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80149b4:	4b12      	ldr	r3, [pc, #72]	; (8014a00 <prvCheckForValidListAndQueue+0x70>)
 80149b6:	4a10      	ldr	r2, [pc, #64]	; (80149f8 <prvCheckForValidListAndQueue+0x68>)
 80149b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80149ba:	2300      	movs	r3, #0
 80149bc:	9300      	str	r3, [sp, #0]
 80149be:	4b11      	ldr	r3, [pc, #68]	; (8014a04 <prvCheckForValidListAndQueue+0x74>)
 80149c0:	4a11      	ldr	r2, [pc, #68]	; (8014a08 <prvCheckForValidListAndQueue+0x78>)
 80149c2:	2110      	movs	r1, #16
 80149c4:	200a      	movs	r0, #10
 80149c6:	f7fd f99f 	bl	8011d08 <xQueueGenericCreateStatic>
 80149ca:	4602      	mov	r2, r0
 80149cc:	4b08      	ldr	r3, [pc, #32]	; (80149f0 <prvCheckForValidListAndQueue+0x60>)
 80149ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80149d0:	4b07      	ldr	r3, [pc, #28]	; (80149f0 <prvCheckForValidListAndQueue+0x60>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d005      	beq.n	80149e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80149d8:	4b05      	ldr	r3, [pc, #20]	; (80149f0 <prvCheckForValidListAndQueue+0x60>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	490b      	ldr	r1, [pc, #44]	; (8014a0c <prvCheckForValidListAndQueue+0x7c>)
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fe f944 	bl	8012c6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80149e4:	f7fd f860 	bl	8011aa8 <vPortExitCritical>
}
 80149e8:	bf00      	nop
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	200274b4 	.word	0x200274b4
 80149f4:	20027484 	.word	0x20027484
 80149f8:	20027498 	.word	0x20027498
 80149fc:	200274ac 	.word	0x200274ac
 8014a00:	200274b0 	.word	0x200274b0
 8014a04:	20027560 	.word	0x20027560
 8014a08:	200274c0 	.word	0x200274c0
 8014a0c:	0801b7a8 	.word	0x0801b7a8

08014a10 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b086      	sub	sp, #24
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d109      	bne.n	8014a36 <xTimerIsTimerActive+0x26>
 8014a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a26:	f383 8811 	msr	BASEPRI, r3
 8014a2a:	f3bf 8f6f 	isb	sy
 8014a2e:	f3bf 8f4f 	dsb	sy
 8014a32:	60fb      	str	r3, [r7, #12]
 8014a34:	e7fe      	b.n	8014a34 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8014a36:	f7fd f809 	bl	8011a4c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	695b      	ldr	r3, [r3, #20]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	bf14      	ite	ne
 8014a42:	2301      	movne	r3, #1
 8014a44:	2300      	moveq	r3, #0
 8014a46:	b2db      	uxtb	r3, r3
 8014a48:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014a4a:	f7fd f82d 	bl	8011aa8 <vPortExitCritical>

	return xTimerIsInActiveList;
 8014a4e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8014a50:	4618      	mov	r0, r3
 8014a52:	3718      	adds	r7, #24
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b086      	sub	sp, #24
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d109      	bne.n	8014a7e <pvTimerGetTimerID+0x26>
 8014a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a6e:	f383 8811 	msr	BASEPRI, r3
 8014a72:	f3bf 8f6f 	isb	sy
 8014a76:	f3bf 8f4f 	dsb	sy
 8014a7a:	60fb      	str	r3, [r7, #12]
 8014a7c:	e7fe      	b.n	8014a7c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8014a7e:	f7fc ffe5 	bl	8011a4c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	6a1b      	ldr	r3, [r3, #32]
 8014a86:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014a88:	f7fd f80e 	bl	8011aa8 <vPortExitCritical>

	return pvReturn;
 8014a8c:	693b      	ldr	r3, [r7, #16]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3718      	adds	r7, #24
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}

08014a96 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 8014a96:	b580      	push	{r7, lr}
 8014a98:	b084      	sub	sp, #16
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014aa2:	f004 f851 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014aa6:	f003 ffed 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014aaa:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2200      	movs	r2, #0
 8014ab0:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8014ab4:	701a      	strb	r2, [r3, #0]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	f042 0201 	orr.w	r2, r2, #1
 8014abc:	705a      	strb	r2, [r3, #1]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	709a      	strb	r2, [r3, #2]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	f042 0201 	orr.w	r2, r2, #1
 8014ace:	711a      	strb	r2, [r3, #4]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	715a      	strb	r2, [r3, #5]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	719a      	strb	r2, [r3, #6]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 8014adc:	887a      	ldrh	r2, [r7, #2]
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014ae2:	f003 fff3 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ae6:	f003 ffd9 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014aea:	60f8      	str	r0, [r7, #12]
}
 8014aec:	bf00      	nop
 8014aee:	3710      	adds	r7, #16
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b084      	sub	sp, #16
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	460b      	mov	r3, r1
 8014afe:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014b00:	f004 f822 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014b04:	f003 ffbe 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014b08:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8014b12:	701a      	strb	r2, [r3, #0]
 8014b14:	2200      	movs	r2, #0
 8014b16:	f042 0201 	orr.w	r2, r2, #1
 8014b1a:	705a      	strb	r2, [r3, #1]
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	709a      	strb	r2, [r3, #2]
 8014b20:	2200      	movs	r2, #0
 8014b22:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	2200      	movs	r2, #0
 8014b28:	f042 0201 	orr.w	r2, r2, #1
 8014b2c:	711a      	strb	r2, [r3, #4]
 8014b2e:	2200      	movs	r2, #0
 8014b30:	715a      	strb	r2, [r3, #5]
 8014b32:	2200      	movs	r2, #0
 8014b34:	719a      	strb	r2, [r3, #6]
 8014b36:	2200      	movs	r2, #0
 8014b38:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 8014b3a:	887a      	ldrh	r2, [r7, #2]
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014b40:	f003 ffc4 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014b44:	f003 ffaa 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014b48:	60f8      	str	r0, [r7, #12]
}
 8014b4a:	bf00      	nop
 8014b4c:	3710      	adds	r7, #16
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}

08014b52 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8014b52:	b580      	push	{r7, lr}
 8014b54:	b084      	sub	sp, #16
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6078      	str	r0, [r7, #4]
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	70fb      	strb	r3, [r7, #3]
 8014b5e:	4613      	mov	r3, r2
 8014b60:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014b62:	f003 fff1 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014b66:	f003 ff8d 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014b6a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	f062 0260 	orn	r2, r2, #96	; 0x60
 8014b74:	701a      	strb	r2, [r3, #0]
 8014b76:	2200      	movs	r2, #0
 8014b78:	705a      	strb	r2, [r3, #1]
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	709a      	strb	r2, [r3, #2]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2200      	movs	r2, #0
 8014b86:	f042 0203 	orr.w	r2, r2, #3
 8014b8a:	711a      	strb	r2, [r3, #4]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	715a      	strb	r2, [r3, #5]
 8014b90:	2200      	movs	r2, #0
 8014b92:	719a      	strb	r2, [r3, #6]
 8014b94:	2200      	movs	r2, #0
 8014b96:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8014b9e:	78fa      	ldrb	r2, [r7, #3]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8014ba4:	78ba      	ldrb	r2, [r7, #2]
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014baa:	f003 ff8f 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014bae:	f003 ff75 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014bb2:	60f8      	str	r0, [r7, #12]
}
 8014bb4:	bf00      	nop
 8014bb6:	3710      	adds	r7, #16
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	60f8      	str	r0, [r7, #12]
 8014bc4:	60b9      	str	r1, [r7, #8]
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8014bca:	f003 ffbd 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014bce:	f003 ff59 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014bd2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8014bdc:	701a      	strb	r2, [r3, #0]
 8014bde:	2200      	movs	r2, #0
 8014be0:	705a      	strb	r2, [r3, #1]
 8014be2:	2200      	movs	r2, #0
 8014be4:	709a      	strb	r2, [r3, #2]
 8014be6:	2200      	movs	r2, #0
 8014be8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	2200      	movs	r2, #0
 8014bee:	f042 0203 	orr.w	r2, r2, #3
 8014bf2:	711a      	strb	r2, [r3, #4]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	715a      	strb	r2, [r3, #5]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	719a      	strb	r2, [r3, #6]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	697b      	ldr	r3, [r7, #20]
 8014c04:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8014c06:	68ba      	ldr	r2, [r7, #8]
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8014c0c:	79fa      	ldrb	r2, [r7, #7]
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014c12:	f003 ff5b 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014c16:	f003 ff41 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014c1a:	6178      	str	r0, [r7, #20]
}
 8014c1c:	bf00      	nop
 8014c1e:	3718      	adds	r7, #24
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014c30:	f003 ff8a 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014c34:	f003 ff26 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014c38:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8014c42:	701a      	strb	r2, [r3, #0]
 8014c44:	2200      	movs	r2, #0
 8014c46:	705a      	strb	r2, [r3, #1]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	709a      	strb	r2, [r3, #2]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2200      	movs	r2, #0
 8014c54:	f042 0202 	orr.w	r2, r2, #2
 8014c58:	711a      	strb	r2, [r3, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	715a      	strb	r2, [r3, #5]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	719a      	strb	r2, [r3, #6]
 8014c62:	2200      	movs	r2, #0
 8014c64:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014c66:	687a      	ldr	r2, [r7, #4]
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8014c6c:	78fa      	ldrb	r2, [r7, #3]
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014c72:	f003 ff2b 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014c76:	f003 ff11 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014c7a:	60f8      	str	r0, [r7, #12]
}
 8014c7c:	bf00      	nop
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b084      	sub	sp, #16
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014c90:	f003 ff5a 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014c94:	f003 fef6 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014c98:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8014ca2:	701a      	strb	r2, [r3, #0]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	705a      	strb	r2, [r3, #1]
 8014ca8:	2200      	movs	r2, #0
 8014caa:	709a      	strb	r2, [r3, #2]
 8014cac:	2200      	movs	r2, #0
 8014cae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f042 0202 	orr.w	r2, r2, #2
 8014cb8:	711a      	strb	r2, [r3, #4]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	715a      	strb	r2, [r3, #5]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	719a      	strb	r2, [r3, #6]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014cc6:	687a      	ldr	r2, [r7, #4]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8014ccc:	78fa      	ldrb	r2, [r7, #3]
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014cd2:	f003 fefb 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014cd6:	f003 fee1 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014cda:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	689b      	ldr	r3, [r3, #8]
 8014ce0:	b2db      	uxtb	r3, r3
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3710      	adds	r7, #16
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}

08014cea <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8014cea:	b580      	push	{r7, lr}
 8014cec:	b084      	sub	sp, #16
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
 8014cf2:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014cf4:	f003 ff28 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014cf8:	f003 fec4 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014cfc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	2200      	movs	r2, #0
 8014d02:	f062 0250 	orn	r2, r2, #80	; 0x50
 8014d06:	701a      	strb	r2, [r3, #0]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	705a      	strb	r2, [r3, #1]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	709a      	strb	r2, [r3, #2]
 8014d10:	2200      	movs	r2, #0
 8014d12:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	2200      	movs	r2, #0
 8014d18:	f042 0202 	orr.w	r2, r2, #2
 8014d1c:	711a      	strb	r2, [r3, #4]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	715a      	strb	r2, [r3, #5]
 8014d22:	2200      	movs	r2, #0
 8014d24:	719a      	strb	r2, [r3, #6]
 8014d26:	2200      	movs	r2, #0
 8014d28:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8014d30:	683a      	ldr	r2, [r7, #0]
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014d36:	f003 fec9 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d3a:	f003 feaf 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d3e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	689b      	ldr	r3, [r3, #8]
 8014d44:	b2db      	uxtb	r3, r3
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3710      	adds	r7, #16
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8014d4e:	b580      	push	{r7, lr}
 8014d50:	b084      	sub	sp, #16
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014d56:	f003 fef7 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d5a:	f003 fe93 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014d5e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2200      	movs	r2, #0
 8014d64:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8014d68:	701a      	strb	r2, [r3, #0]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	705a      	strb	r2, [r3, #1]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	709a      	strb	r2, [r3, #2]
 8014d72:	2200      	movs	r2, #0
 8014d74:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	f042 0201 	orr.w	r2, r2, #1
 8014d7e:	711a      	strb	r2, [r3, #4]
 8014d80:	2200      	movs	r2, #0
 8014d82:	715a      	strb	r2, [r3, #5]
 8014d84:	2200      	movs	r2, #0
 8014d86:	719a      	strb	r2, [r3, #6]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014d92:	f003 fe9b 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d96:	f003 fe81 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d9a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	689b      	ldr	r3, [r3, #8]
 8014da0:	b2db      	uxtb	r3, r3
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3710      	adds	r7, #16
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}

08014daa <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8014daa:	b580      	push	{r7, lr}
 8014dac:	b084      	sub	sp, #16
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	460b      	mov	r3, r1
 8014db4:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014db6:	f003 fec7 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014dba:	f003 fe63 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014dbe:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f062 0256 	orn	r2, r2, #86	; 0x56
 8014dc8:	701a      	strb	r2, [r3, #0]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	705a      	strb	r2, [r3, #1]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	709a      	strb	r2, [r3, #2]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	f042 0202 	orr.w	r2, r2, #2
 8014dde:	711a      	strb	r2, [r3, #4]
 8014de0:	2200      	movs	r2, #0
 8014de2:	715a      	strb	r2, [r3, #5]
 8014de4:	2200      	movs	r2, #0
 8014de6:	719a      	strb	r2, [r3, #6]
 8014de8:	2200      	movs	r2, #0
 8014dea:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8014df2:	887a      	ldrh	r2, [r7, #2]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014df8:	f003 fe68 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014dfc:	f003 fe4e 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e00:	60f8      	str	r0, [r7, #12]
}
 8014e02:	bf00      	nop
 8014e04:	3710      	adds	r7, #16
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b084      	sub	sp, #16
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014e12:	f003 fe99 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014e16:	f003 fe35 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014e1a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	f062 0261 	orn	r2, r2, #97	; 0x61
 8014e24:	701a      	strb	r2, [r3, #0]
 8014e26:	2200      	movs	r2, #0
 8014e28:	705a      	strb	r2, [r3, #1]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	709a      	strb	r2, [r3, #2]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2200      	movs	r2, #0
 8014e36:	f042 0201 	orr.w	r2, r2, #1
 8014e3a:	711a      	strb	r2, [r3, #4]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	715a      	strb	r2, [r3, #5]
 8014e40:	2200      	movs	r2, #0
 8014e42:	719a      	strb	r2, [r3, #6]
 8014e44:	2200      	movs	r2, #0
 8014e46:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014e4e:	f003 fe3d 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e52:	f003 fe23 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e56:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	689b      	ldr	r3, [r3, #8]
 8014e5c:	b2db      	uxtb	r3, r3
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3710      	adds	r7, #16
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b084      	sub	sp, #16
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014e6e:	f003 fe6b 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014e72:	f003 fe07 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014e76:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8014e80:	701a      	strb	r2, [r3, #0]
 8014e82:	2200      	movs	r2, #0
 8014e84:	705a      	strb	r2, [r3, #1]
 8014e86:	2200      	movs	r2, #0
 8014e88:	709a      	strb	r2, [r3, #2]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2200      	movs	r2, #0
 8014e92:	f042 0201 	orr.w	r2, r2, #1
 8014e96:	711a      	strb	r2, [r3, #4]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	715a      	strb	r2, [r3, #5]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	719a      	strb	r2, [r3, #6]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014eaa:	f003 fe0f 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014eae:	f003 fdf5 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014eb2:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	689b      	ldr	r3, [r3, #8]
 8014eb8:	b2db      	uxtb	r3, r3
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3710      	adds	r7, #16
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}

08014ec2 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	b084      	sub	sp, #16
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014eca:	f003 fe3d 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014ece:	f003 fdd9 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014ed2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	f062 0255 	orn	r2, r2, #85	; 0x55
 8014edc:	701a      	strb	r2, [r3, #0]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	705a      	strb	r2, [r3, #1]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	709a      	strb	r2, [r3, #2]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2200      	movs	r2, #0
 8014eee:	f042 0201 	orr.w	r2, r2, #1
 8014ef2:	711a      	strb	r2, [r3, #4]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	715a      	strb	r2, [r3, #5]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	719a      	strb	r2, [r3, #6]
 8014efc:	2200      	movs	r2, #0
 8014efe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014f06:	f003 fde1 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014f0a:	f003 fdc7 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014f0e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	689b      	ldr	r3, [r3, #8]
 8014f14:	b29b      	uxth	r3, r3
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}

08014f1e <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8014f1e:	b580      	push	{r7, lr}
 8014f20:	b084      	sub	sp, #16
 8014f22:	af00      	add	r7, sp, #0
 8014f24:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014f26:	f003 fe0f 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f2a:	f003 fdab 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014f2e:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2200      	movs	r2, #0
 8014f34:	f062 0254 	orn	r2, r2, #84	; 0x54
 8014f38:	701a      	strb	r2, [r3, #0]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	705a      	strb	r2, [r3, #1]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	709a      	strb	r2, [r3, #2]
 8014f42:	2200      	movs	r2, #0
 8014f44:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	f042 0201 	orr.w	r2, r2, #1
 8014f4e:	711a      	strb	r2, [r3, #4]
 8014f50:	2200      	movs	r2, #0
 8014f52:	715a      	strb	r2, [r3, #5]
 8014f54:	2200      	movs	r2, #0
 8014f56:	719a      	strb	r2, [r3, #6]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8014f5c:	687a      	ldr	r2, [r7, #4]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014f62:	f003 fdb3 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014f66:	f003 fd99 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014f6a:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	689b      	ldr	r3, [r3, #8]
 8014f70:	b2db      	uxtb	r3, r3
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b084      	sub	sp, #16
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014f82:	f003 fde1 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f86:	f003 fd7d 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014f8a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f062 0253 	orn	r2, r2, #83	; 0x53
 8014f94:	701a      	strb	r2, [r3, #0]
 8014f96:	2200      	movs	r2, #0
 8014f98:	705a      	strb	r2, [r3, #1]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	709a      	strb	r2, [r3, #2]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	f042 0201 	orr.w	r2, r2, #1
 8014faa:	711a      	strb	r2, [r3, #4]
 8014fac:	2200      	movs	r2, #0
 8014fae:	715a      	strb	r2, [r3, #5]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	719a      	strb	r2, [r3, #6]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014fb8:	687a      	ldr	r2, [r7, #4]
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014fbe:	f003 fd85 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014fc2:	f003 fd6b 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8014fc6:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	689b      	ldr	r3, [r3, #8]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3710      	adds	r7, #16
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b084      	sub	sp, #16
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014fde:	f003 fdb3 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014fe2:	f003 fd4f 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8014fe6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2200      	movs	r2, #0
 8014fec:	f062 0259 	orn	r2, r2, #89	; 0x59
 8014ff0:	701a      	strb	r2, [r3, #0]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	705a      	strb	r2, [r3, #1]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	709a      	strb	r2, [r3, #2]
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	2200      	movs	r2, #0
 8015002:	f042 0201 	orr.w	r2, r2, #1
 8015006:	711a      	strb	r2, [r3, #4]
 8015008:	2200      	movs	r2, #0
 801500a:	715a      	strb	r2, [r3, #5]
 801500c:	2200      	movs	r2, #0
 801500e:	719a      	strb	r2, [r3, #6]
 8015010:	2200      	movs	r2, #0
 8015012:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8015014:	683a      	ldr	r2, [r7, #0]
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801501a:	f003 fd57 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801501e:	f003 fd3d 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015022:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	689b      	ldr	r3, [r3, #8]

}
 8015028:	4618      	mov	r0, r3
 801502a:	3710      	adds	r7, #16
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}

08015030 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b086      	sub	sp, #24
 8015034:	af00      	add	r7, sp, #0
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	607a      	str	r2, [r7, #4]
 801503c:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 801503e:	f003 fd83 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015042:	f003 fd1f 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015046:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	2200      	movs	r2, #0
 801504c:	f062 0258 	orn	r2, r2, #88	; 0x58
 8015050:	701a      	strb	r2, [r3, #0]
 8015052:	2200      	movs	r2, #0
 8015054:	705a      	strb	r2, [r3, #1]
 8015056:	2200      	movs	r2, #0
 8015058:	709a      	strb	r2, [r3, #2]
 801505a:	2200      	movs	r2, #0
 801505c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	2200      	movs	r2, #0
 8015062:	f042 0203 	orr.w	r2, r2, #3
 8015066:	711a      	strb	r2, [r3, #4]
 8015068:	2200      	movs	r2, #0
 801506a:	715a      	strb	r2, [r3, #5]
 801506c:	2200      	movs	r2, #0
 801506e:	719a      	strb	r2, [r3, #6]
 8015070:	2200      	movs	r2, #0
 8015072:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015074:	68ba      	ldr	r2, [r7, #8]
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8015080:	683a      	ldr	r2, [r7, #0]
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8015086:	6a3a      	ldr	r2, [r7, #32]
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 801508c:	f003 fd1e 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015090:	f003 fd04 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015094:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	689b      	ldr	r3, [r3, #8]
 801509a:	b2db      	uxtb	r3, r3
}
 801509c:	4618      	mov	r0, r3
 801509e:	3718      	adds	r7, #24
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b084      	sub	sp, #16
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	460b      	mov	r3, r1
 80150ae:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80150b0:	f003 fd4a 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80150b4:	f003 fce6 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 80150b8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2200      	movs	r2, #0
 80150be:	f062 024b 	orn	r2, r2, #75	; 0x4b
 80150c2:	701a      	strb	r2, [r3, #0]
 80150c4:	2200      	movs	r2, #0
 80150c6:	705a      	strb	r2, [r3, #1]
 80150c8:	2200      	movs	r2, #0
 80150ca:	709a      	strb	r2, [r3, #2]
 80150cc:	2200      	movs	r2, #0
 80150ce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2200      	movs	r2, #0
 80150d4:	f042 0201 	orr.w	r2, r2, #1
 80150d8:	711a      	strb	r2, [r3, #4]
 80150da:	2200      	movs	r2, #0
 80150dc:	715a      	strb	r2, [r3, #5]
 80150de:	2200      	movs	r2, #0
 80150e0:	719a      	strb	r2, [r3, #6]
 80150e2:	2200      	movs	r2, #0
 80150e4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 80150e6:	887a      	ldrh	r2, [r7, #2]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80150ec:	f003 fcee 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80150f0:	f003 fcd4 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80150f4:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	689b      	ldr	r3, [r3, #8]
 80150fa:	b2db      	uxtb	r3, r3
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 801510e:	f003 fd1b 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015112:	f003 fcb7 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015116:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	2200      	movs	r2, #0
 801511c:	f062 0249 	orn	r2, r2, #73	; 0x49
 8015120:	701a      	strb	r2, [r3, #0]
 8015122:	2200      	movs	r2, #0
 8015124:	705a      	strb	r2, [r3, #1]
 8015126:	2200      	movs	r2, #0
 8015128:	709a      	strb	r2, [r3, #2]
 801512a:	2200      	movs	r2, #0
 801512c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2200      	movs	r2, #0
 8015132:	f042 0201 	orr.w	r2, r2, #1
 8015136:	711a      	strb	r2, [r3, #4]
 8015138:	2200      	movs	r2, #0
 801513a:	715a      	strb	r2, [r3, #5]
 801513c:	2200      	movs	r2, #0
 801513e:	719a      	strb	r2, [r3, #6]
 8015140:	2200      	movs	r2, #0
 8015142:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8015144:	683a      	ldr	r2, [r7, #0]
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801514a:	f003 fcbf 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801514e:	f003 fca5 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015152:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	689b      	ldr	r3, [r3, #8]
 8015158:	b2db      	uxtb	r3, r3
}
 801515a:	4618      	mov	r0, r3
 801515c:	3710      	adds	r7, #16
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8015162:	b580      	push	{r7, lr}
 8015164:	b086      	sub	sp, #24
 8015166:	af00      	add	r7, sp, #0
 8015168:	60f8      	str	r0, [r7, #12]
 801516a:	60b9      	str	r1, [r7, #8]
 801516c:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 801516e:	f003 fceb 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015172:	f003 fc87 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015176:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	2200      	movs	r2, #0
 801517c:	f062 0257 	orn	r2, r2, #87	; 0x57
 8015180:	701a      	strb	r2, [r3, #0]
 8015182:	2200      	movs	r2, #0
 8015184:	705a      	strb	r2, [r3, #1]
 8015186:	2200      	movs	r2, #0
 8015188:	709a      	strb	r2, [r3, #2]
 801518a:	2200      	movs	r2, #0
 801518c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	2200      	movs	r2, #0
 8015192:	f042 0202 	orr.w	r2, r2, #2
 8015196:	711a      	strb	r2, [r3, #4]
 8015198:	2200      	movs	r2, #0
 801519a:	715a      	strb	r2, [r3, #5]
 801519c:	2200      	movs	r2, #0
 801519e:	719a      	strb	r2, [r3, #6]
 80151a0:	2200      	movs	r2, #0
 80151a2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80151a4:	68ba      	ldr	r2, [r7, #8]
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80151aa:	687a      	ldr	r2, [r7, #4]
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80151b0:	f003 fc8c 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80151b4:	f003 fc72 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80151b8:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	689b      	ldr	r3, [r3, #8]
 80151be:	b2db      	uxtb	r3, r3
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3718      	adds	r7, #24
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 80151ce:	f003 fcbb 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80151d2:	f003 fc57 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 80151d6:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2200      	movs	r2, #0
 80151dc:	f062 026b 	orn	r2, r2, #107	; 0x6b
 80151e0:	701a      	strb	r2, [r3, #0]
 80151e2:	2200      	movs	r2, #0
 80151e4:	705a      	strb	r2, [r3, #1]
 80151e6:	2200      	movs	r2, #0
 80151e8:	709a      	strb	r2, [r3, #2]
 80151ea:	2200      	movs	r2, #0
 80151ec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2200      	movs	r2, #0
 80151f2:	711a      	strb	r2, [r3, #4]
 80151f4:	2200      	movs	r2, #0
 80151f6:	715a      	strb	r2, [r3, #5]
 80151f8:	2200      	movs	r2, #0
 80151fa:	719a      	strb	r2, [r3, #6]
 80151fc:	2200      	movs	r2, #0
 80151fe:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8015200:	f003 fc64 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015204:	f003 fc4a 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015208:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	689b      	ldr	r3, [r3, #8]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3708      	adds	r7, #8
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}

08015216 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8015216:	b580      	push	{r7, lr}
 8015218:	b084      	sub	sp, #16
 801521a:	af00      	add	r7, sp, #0
 801521c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801521e:	f003 fc93 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015222:	f003 fc2f 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015226:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2200      	movs	r2, #0
 801522c:	f062 0269 	orn	r2, r2, #105	; 0x69
 8015230:	701a      	strb	r2, [r3, #0]
 8015232:	2200      	movs	r2, #0
 8015234:	705a      	strb	r2, [r3, #1]
 8015236:	2200      	movs	r2, #0
 8015238:	709a      	strb	r2, [r3, #2]
 801523a:	2200      	movs	r2, #0
 801523c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2200      	movs	r2, #0
 8015242:	711a      	strb	r2, [r3, #4]
 8015244:	2200      	movs	r2, #0
 8015246:	715a      	strb	r2, [r3, #5]
 8015248:	2200      	movs	r2, #0
 801524a:	719a      	strb	r2, [r3, #6]
 801524c:	2200      	movs	r2, #0
 801524e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8015250:	f003 fc3c 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015254:	f003 fc22 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015258:	60f8      	str	r0, [r7, #12]
}
 801525a:	bf00      	nop
 801525c:	3710      	adds	r7, #16
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
	...

08015264 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b086      	sub	sp, #24
 8015268:	af00      	add	r7, sp, #0
 801526a:	60f8      	str	r0, [r7, #12]
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8015270:	f003 fc6a 	bl	8018b48 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8015274:	4a15      	ldr	r2, [pc, #84]	; (80152cc <otSetStateChangedCallback+0x68>)
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801527a:	f003 fc03 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 801527e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	2200      	movs	r2, #0
 8015284:	f062 0268 	orn	r2, r2, #104	; 0x68
 8015288:	701a      	strb	r2, [r3, #0]
 801528a:	2200      	movs	r2, #0
 801528c:	705a      	strb	r2, [r3, #1]
 801528e:	2200      	movs	r2, #0
 8015290:	709a      	strb	r2, [r3, #2]
 8015292:	2200      	movs	r2, #0
 8015294:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	2200      	movs	r2, #0
 801529a:	f042 0201 	orr.w	r2, r2, #1
 801529e:	711a      	strb	r2, [r3, #4]
 80152a0:	2200      	movs	r2, #0
 80152a2:	715a      	strb	r2, [r3, #5]
 80152a4:	2200      	movs	r2, #0
 80152a6:	719a      	strb	r2, [r3, #6]
 80152a8:	2200      	movs	r2, #0
 80152aa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 80152ac:	687a      	ldr	r2, [r7, #4]
 80152ae:	697b      	ldr	r3, [r7, #20]
 80152b0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80152b2:	f003 fc0b 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80152b6:	f003 fbf1 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80152ba:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	689b      	ldr	r3, [r3, #8]
 80152c0:	b2db      	uxtb	r3, r3
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3718      	adds	r7, #24
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}
 80152ca:	bf00      	nop
 80152cc:	200275b0 	.word	0x200275b0

080152d0 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80152d8:	f003 fc36 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80152dc:	f003 fbd2 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 80152e0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2200      	movs	r2, #0
 80152e6:	f062 0264 	orn	r2, r2, #100	; 0x64
 80152ea:	701a      	strb	r2, [r3, #0]
 80152ec:	2200      	movs	r2, #0
 80152ee:	705a      	strb	r2, [r3, #1]
 80152f0:	2200      	movs	r2, #0
 80152f2:	709a      	strb	r2, [r3, #2]
 80152f4:	2200      	movs	r2, #0
 80152f6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2200      	movs	r2, #0
 80152fc:	711a      	strb	r2, [r3, #4]
 80152fe:	2200      	movs	r2, #0
 8015300:	715a      	strb	r2, [r3, #5]
 8015302:	2200      	movs	r2, #0
 8015304:	719a      	strb	r2, [r3, #6]
 8015306:	2200      	movs	r2, #0
 8015308:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801530a:	f003 fbdf 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801530e:	f003 fbc5 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015312:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	689b      	ldr	r3, [r3, #8]
 8015318:	b2db      	uxtb	r3, r3
}
 801531a:	4618      	mov	r0, r3
 801531c:	3710      	adds	r7, #16
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}

08015322 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8015322:	b580      	push	{r7, lr}
 8015324:	b084      	sub	sp, #16
 8015326:	af00      	add	r7, sp, #0
 8015328:	6078      	str	r0, [r7, #4]
 801532a:	460b      	mov	r3, r1
 801532c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801532e:	f003 fc0b 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015332:	f003 fba7 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015336:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2200      	movs	r2, #0
 801533c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8015340:	701a      	strb	r2, [r3, #0]
 8015342:	2200      	movs	r2, #0
 8015344:	705a      	strb	r2, [r3, #1]
 8015346:	2200      	movs	r2, #0
 8015348:	709a      	strb	r2, [r3, #2]
 801534a:	2200      	movs	r2, #0
 801534c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2200      	movs	r2, #0
 8015352:	f042 0201 	orr.w	r2, r2, #1
 8015356:	711a      	strb	r2, [r3, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	715a      	strb	r2, [r3, #5]
 801535c:	2200      	movs	r2, #0
 801535e:	719a      	strb	r2, [r3, #6]
 8015360:	2200      	movs	r2, #0
 8015362:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8015364:	78fa      	ldrb	r2, [r7, #3]
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801536a:	f003 fbaf 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801536e:	f003 fb95 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015372:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	689b      	ldr	r3, [r3, #8]
 8015378:	b2db      	uxtb	r3, r3
}
 801537a:	4618      	mov	r0, r3
 801537c:	3710      	adds	r7, #16
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}

08015382 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8015382:	b580      	push	{r7, lr}
 8015384:	b084      	sub	sp, #16
 8015386:	af00      	add	r7, sp, #0
 8015388:	6078      	str	r0, [r7, #4]
 801538a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801538c:	f003 fbdc 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015390:	f003 fb78 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015394:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	2200      	movs	r2, #0
 801539a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 801539e:	701a      	strb	r2, [r3, #0]
 80153a0:	2200      	movs	r2, #0
 80153a2:	705a      	strb	r2, [r3, #1]
 80153a4:	2200      	movs	r2, #0
 80153a6:	709a      	strb	r2, [r3, #2]
 80153a8:	2200      	movs	r2, #0
 80153aa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2200      	movs	r2, #0
 80153b0:	f042 0202 	orr.w	r2, r2, #2
 80153b4:	711a      	strb	r2, [r3, #4]
 80153b6:	2200      	movs	r2, #0
 80153b8:	715a      	strb	r2, [r3, #5]
 80153ba:	2200      	movs	r2, #0
 80153bc:	719a      	strb	r2, [r3, #6]
 80153be:	2200      	movs	r2, #0
 80153c0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 80153c8:	683a      	ldr	r2, [r7, #0]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80153ce:	f003 fb7d 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80153d2:	f003 fb63 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80153d6:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	689b      	ldr	r3, [r3, #8]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	bf14      	ite	ne
 80153e0:	2301      	movne	r3, #1
 80153e2:	2300      	moveq	r3, #0
 80153e4:	b2db      	uxtb	r3, r3
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3710      	adds	r7, #16
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}

080153ee <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b084      	sub	sp, #16
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
 80153f6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80153f8:	f003 fba6 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80153fc:	f003 fb42 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015400:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	2200      	movs	r2, #0
 8015406:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801540a:	701a      	strb	r2, [r3, #0]
 801540c:	2200      	movs	r2, #0
 801540e:	705a      	strb	r2, [r3, #1]
 8015410:	2200      	movs	r2, #0
 8015412:	709a      	strb	r2, [r3, #2]
 8015414:	2200      	movs	r2, #0
 8015416:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2200      	movs	r2, #0
 801541c:	f042 0202 	orr.w	r2, r2, #2
 8015420:	711a      	strb	r2, [r3, #4]
 8015422:	2200      	movs	r2, #0
 8015424:	715a      	strb	r2, [r3, #5]
 8015426:	2200      	movs	r2, #0
 8015428:	719a      	strb	r2, [r3, #6]
 801542a:	2200      	movs	r2, #0
 801542c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8015434:	683a      	ldr	r2, [r7, #0]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801543a:	f003 fb47 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801543e:	f003 fb2d 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015442:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	689b      	ldr	r3, [r3, #8]
 8015448:	b2db      	uxtb	r3, r3
}
 801544a:	4618      	mov	r0, r3
 801544c:	3710      	adds	r7, #16
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}

08015452 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8015452:	b580      	push	{r7, lr}
 8015454:	b084      	sub	sp, #16
 8015456:	af00      	add	r7, sp, #0
 8015458:	6078      	str	r0, [r7, #4]
 801545a:	460b      	mov	r3, r1
 801545c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801545e:	f003 fb73 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015462:	f003 fb0f 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015466:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	2200      	movs	r2, #0
 801546c:	f042 0208 	orr.w	r2, r2, #8
 8015470:	701a      	strb	r2, [r3, #0]
 8015472:	2200      	movs	r2, #0
 8015474:	705a      	strb	r2, [r3, #1]
 8015476:	2200      	movs	r2, #0
 8015478:	709a      	strb	r2, [r3, #2]
 801547a:	2200      	movs	r2, #0
 801547c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	2200      	movs	r2, #0
 8015482:	f042 0201 	orr.w	r2, r2, #1
 8015486:	711a      	strb	r2, [r3, #4]
 8015488:	2200      	movs	r2, #0
 801548a:	715a      	strb	r2, [r3, #5]
 801548c:	2200      	movs	r2, #0
 801548e:	719a      	strb	r2, [r3, #6]
 8015490:	2200      	movs	r2, #0
 8015492:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8015494:	78fa      	ldrb	r2, [r7, #3]
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801549a:	f003 fb17 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801549e:	f003 fafd 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80154a2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	689b      	ldr	r3, [r3, #8]
 80154a8:	b2db      	uxtb	r3, r3
}
 80154aa:	4618      	mov	r0, r3
 80154ac:	3710      	adds	r7, #16
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}

080154b2 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 80154b2:	b580      	push	{r7, lr}
 80154b4:	b084      	sub	sp, #16
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
 80154ba:	460b      	mov	r3, r1
 80154bc:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80154be:	f003 fb43 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80154c2:	f003 fadf 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 80154c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2200      	movs	r2, #0
 80154cc:	f042 020f 	orr.w	r2, r2, #15
 80154d0:	701a      	strb	r2, [r3, #0]
 80154d2:	2200      	movs	r2, #0
 80154d4:	705a      	strb	r2, [r3, #1]
 80154d6:	2200      	movs	r2, #0
 80154d8:	709a      	strb	r2, [r3, #2]
 80154da:	2200      	movs	r2, #0
 80154dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2200      	movs	r2, #0
 80154e2:	f042 0201 	orr.w	r2, r2, #1
 80154e6:	711a      	strb	r2, [r3, #4]
 80154e8:	2200      	movs	r2, #0
 80154ea:	715a      	strb	r2, [r3, #5]
 80154ec:	2200      	movs	r2, #0
 80154ee:	719a      	strb	r2, [r3, #6]
 80154f0:	2200      	movs	r2, #0
 80154f2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80154f4:	887a      	ldrh	r2, [r7, #2]
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80154fa:	f003 fae7 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80154fe:	f003 facd 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015502:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	689b      	ldr	r3, [r3, #8]
 8015508:	b2db      	uxtb	r3, r3
}
 801550a:	4618      	mov	r0, r3
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}

08015512 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8015512:	b580      	push	{r7, lr}
 8015514:	b084      	sub	sp, #16
 8015516:	af00      	add	r7, sp, #0
 8015518:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801551a:	f003 fb15 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801551e:	f003 fab1 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015522:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	2200      	movs	r2, #0
 8015528:	f062 0246 	orn	r2, r2, #70	; 0x46
 801552c:	701a      	strb	r2, [r3, #0]
 801552e:	2200      	movs	r2, #0
 8015530:	705a      	strb	r2, [r3, #1]
 8015532:	2200      	movs	r2, #0
 8015534:	709a      	strb	r2, [r3, #2]
 8015536:	2200      	movs	r2, #0
 8015538:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	2200      	movs	r2, #0
 801553e:	f042 0201 	orr.w	r2, r2, #1
 8015542:	711a      	strb	r2, [r3, #4]
 8015544:	2200      	movs	r2, #0
 8015546:	715a      	strb	r2, [r3, #5]
 8015548:	2200      	movs	r2, #0
 801554a:	719a      	strb	r2, [r3, #6]
 801554c:	2200      	movs	r2, #0
 801554e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015550:	687a      	ldr	r2, [r7, #4]
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015556:	f003 fab9 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801555a:	f003 fa9f 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 801555e:	60f8      	str	r0, [r7, #12]
}
 8015560:	bf00      	nop
 8015562:	3710      	adds	r7, #16
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}

08015568 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8015570:	f003 faea 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015574:	f003 fa86 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015578:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	2200      	movs	r2, #0
 801557e:	f062 0243 	orn	r2, r2, #67	; 0x43
 8015582:	701a      	strb	r2, [r3, #0]
 8015584:	2200      	movs	r2, #0
 8015586:	705a      	strb	r2, [r3, #1]
 8015588:	2200      	movs	r2, #0
 801558a:	709a      	strb	r2, [r3, #2]
 801558c:	2200      	movs	r2, #0
 801558e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	2200      	movs	r2, #0
 8015594:	f042 0201 	orr.w	r2, r2, #1
 8015598:	711a      	strb	r2, [r3, #4]
 801559a:	2200      	movs	r2, #0
 801559c:	715a      	strb	r2, [r3, #5]
 801559e:	2200      	movs	r2, #0
 80155a0:	719a      	strb	r2, [r3, #6]
 80155a2:	2200      	movs	r2, #0
 80155a4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80155ac:	f003 fa8e 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80155b0:	f003 fa74 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80155b4:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	689b      	ldr	r3, [r3, #8]
 80155ba:	b29b      	uxth	r3, r3
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3710      	adds	r7, #16
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}

080155c4 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b086      	sub	sp, #24
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	60f8      	str	r0, [r7, #12]
 80155cc:	60b9      	str	r1, [r7, #8]
 80155ce:	4613      	mov	r3, r2
 80155d0:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 80155d2:	f003 fab9 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80155d6:	f003 fa55 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 80155da:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	2200      	movs	r2, #0
 80155e0:	f062 023e 	orn	r2, r2, #62	; 0x3e
 80155e4:	701a      	strb	r2, [r3, #0]
 80155e6:	2200      	movs	r2, #0
 80155e8:	705a      	strb	r2, [r3, #1]
 80155ea:	2200      	movs	r2, #0
 80155ec:	709a      	strb	r2, [r3, #2]
 80155ee:	2200      	movs	r2, #0
 80155f0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	2200      	movs	r2, #0
 80155f6:	f042 0203 	orr.w	r2, r2, #3
 80155fa:	711a      	strb	r2, [r3, #4]
 80155fc:	2200      	movs	r2, #0
 80155fe:	715a      	strb	r2, [r3, #5]
 8015600:	2200      	movs	r2, #0
 8015602:	719a      	strb	r2, [r3, #6]
 8015604:	2200      	movs	r2, #0
 8015606:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015608:	68fa      	ldr	r2, [r7, #12]
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 801560e:	68ba      	ldr	r2, [r7, #8]
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8015614:	88fa      	ldrh	r2, [r7, #6]
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801561a:	f003 fa57 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801561e:	f003 fa3d 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015622:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	689b      	ldr	r3, [r3, #8]
 8015628:	b2db      	uxtb	r3, r3
}
 801562a:	4618      	mov	r0, r3
 801562c:	3718      	adds	r7, #24
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}

08015632 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8015632:	b580      	push	{r7, lr}
 8015634:	b086      	sub	sp, #24
 8015636:	af00      	add	r7, sp, #0
 8015638:	60f8      	str	r0, [r7, #12]
 801563a:	607a      	str	r2, [r7, #4]
 801563c:	461a      	mov	r2, r3
 801563e:	460b      	mov	r3, r1
 8015640:	817b      	strh	r3, [r7, #10]
 8015642:	4613      	mov	r3, r2
 8015644:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8015646:	f003 fa7f 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801564a:	f003 fa1b 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 801564e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	2200      	movs	r2, #0
 8015654:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8015658:	701a      	strb	r2, [r3, #0]
 801565a:	2200      	movs	r2, #0
 801565c:	705a      	strb	r2, [r3, #1]
 801565e:	2200      	movs	r2, #0
 8015660:	709a      	strb	r2, [r3, #2]
 8015662:	2200      	movs	r2, #0
 8015664:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	2200      	movs	r2, #0
 801566a:	f042 0204 	orr.w	r2, r2, #4
 801566e:	711a      	strb	r2, [r3, #4]
 8015670:	2200      	movs	r2, #0
 8015672:	715a      	strb	r2, [r3, #5]
 8015674:	2200      	movs	r2, #0
 8015676:	719a      	strb	r2, [r3, #6]
 8015678:	2200      	movs	r2, #0
 801567a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801567c:	68fa      	ldr	r2, [r7, #12]
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8015682:	897a      	ldrh	r2, [r7, #10]
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8015688:	687a      	ldr	r2, [r7, #4]
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 801568e:	893a      	ldrh	r2, [r7, #8]
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8015694:	f003 fa1a 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015698:	f003 fa00 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 801569c:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	689b      	ldr	r3, [r3, #8]
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3718      	adds	r7, #24
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
	...

080156ac <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 80156ac:	b5b0      	push	{r4, r5, r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80156b2:	2300      	movs	r3, #0
 80156b4:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 80156b6:	f003 f9fd 	bl	8018ab4 <THREAD_Get_NotificationPayloadBuffer>
 80156ba:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	3b01      	subs	r3, #1
 80156c2:	2b14      	cmp	r3, #20
 80156c4:	f200 8172 	bhi.w	80159ac <OpenThread_CallBack_Processing+0x300>
 80156c8:	a201      	add	r2, pc, #4	; (adr r2, 80156d0 <OpenThread_CallBack_Processing+0x24>)
 80156ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ce:	bf00      	nop
 80156d0:	08015725 	.word	0x08015725
 80156d4:	08015741 	.word	0x08015741
 80156d8:	0801576d 	.word	0x0801576d
 80156dc:	080157a1 	.word	0x080157a1
 80156e0:	080157ad 	.word	0x080157ad
 80156e4:	080157cb 	.word	0x080157cb
 80156e8:	080157e9 	.word	0x080157e9
 80156ec:	08015807 	.word	0x08015807
 80156f0:	08015825 	.word	0x08015825
 80156f4:	08015843 	.word	0x08015843
 80156f8:	08015865 	.word	0x08015865
 80156fc:	08015883 	.word	0x08015883
 8015700:	080159ad 	.word	0x080159ad
 8015704:	080158a9 	.word	0x080158a9
 8015708:	080158dd 	.word	0x080158dd
 801570c:	08015905 	.word	0x08015905
 8015710:	08015923 	.word	0x08015923
 8015714:	08015947 	.word	0x08015947
 8015718:	0801596f 	.word	0x0801596f
 801571c:	080159ad 	.word	0x080159ad
 8015720:	0801598d 	.word	0x0801598d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8015724:	4ba3      	ldr	r3, [pc, #652]	; (80159b4 <OpenThread_CallBack_Processing+0x308>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	f000 8167 	beq.w	80159fc <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801572e:	4ba1      	ldr	r3, [pc, #644]	; (80159b4 <OpenThread_CallBack_Processing+0x308>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	683a      	ldr	r2, [r7, #0]
 8015734:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8015736:	683a      	ldr	r2, [r7, #0]
 8015738:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801573a:	4611      	mov	r1, r2
 801573c:	4798      	blx	r3
        }
        break;
 801573e:	e15d      	b.n	80159fc <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	689b      	ldr	r3, [r3, #8]
 8015744:	461a      	mov	r2, r3
 8015746:	4b9c      	ldr	r3, [pc, #624]	; (80159b8 <OpenThread_CallBack_Processing+0x30c>)
 8015748:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 801574a:	4b9b      	ldr	r3, [pc, #620]	; (80159b8 <OpenThread_CallBack_Processing+0x30c>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	f000 8156 	beq.w	8015a00 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015754:	4b98      	ldr	r3, [pc, #608]	; (80159b8 <OpenThread_CallBack_Processing+0x30c>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	683a      	ldr	r2, [r7, #0]
 801575a:	68d2      	ldr	r2, [r2, #12]
 801575c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 801575e:	683a      	ldr	r2, [r7, #0]
 8015760:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015762:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8015764:	683a      	ldr	r2, [r7, #0]
 8015766:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015768:	4798      	blx	r3
        }
        break;
 801576a:	e149      	b.n	8015a00 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	689b      	ldr	r3, [r3, #8]
 8015770:	461a      	mov	r2, r3
 8015772:	4b92      	ldr	r3, [pc, #584]	; (80159bc <OpenThread_CallBack_Processing+0x310>)
 8015774:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8015776:	4b91      	ldr	r3, [pc, #580]	; (80159bc <OpenThread_CallBack_Processing+0x310>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	f000 8142 	beq.w	8015a04 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015780:	4b8e      	ldr	r3, [pc, #568]	; (80159bc <OpenThread_CallBack_Processing+0x310>)
 8015782:	681c      	ldr	r4, [r3, #0]
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	68db      	ldr	r3, [r3, #12]
 8015788:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801578e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015794:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801579a:	b2db      	uxtb	r3, r3
 801579c:	47a0      	blx	r4
        }
        break;
 801579e:	e131      	b.n	8015a04 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 80157a0:	2001      	movs	r0, #1
 80157a2:	f000 f99b 	bl	8015adc <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 80157a6:	f7f2 fe36 	bl	8008416 <HAL_NVIC_SystemReset>
        break;
 80157aa:	e14a      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 80157ac:	4b84      	ldr	r3, [pc, #528]	; (80159c0 <OpenThread_CallBack_Processing+0x314>)
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	f000 8129 	beq.w	8015a08 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80157b6:	4b82      	ldr	r3, [pc, #520]	; (80159c0 <OpenThread_CallBack_Processing+0x314>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	683a      	ldr	r2, [r7, #0]
 80157bc:	6892      	ldr	r2, [r2, #8]
 80157be:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80157c0:	683a      	ldr	r2, [r7, #0]
 80157c2:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80157c4:	4611      	mov	r1, r2
 80157c6:	4798      	blx	r3
        }
        break;
 80157c8:	e11e      	b.n	8015a08 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 80157ca:	4b7e      	ldr	r3, [pc, #504]	; (80159c4 <OpenThread_CallBack_Processing+0x318>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	f000 811c 	beq.w	8015a0c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80157d4:	4b7b      	ldr	r3, [pc, #492]	; (80159c4 <OpenThread_CallBack_Processing+0x318>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	683a      	ldr	r2, [r7, #0]
 80157da:	6892      	ldr	r2, [r2, #8]
 80157dc:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 80157de:	683a      	ldr	r2, [r7, #0]
 80157e0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80157e2:	2000      	movs	r0, #0
 80157e4:	4798      	blx	r3
        }
        break;
 80157e6:	e111      	b.n	8015a0c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80157e8:	4b77      	ldr	r3, [pc, #476]	; (80159c8 <OpenThread_CallBack_Processing+0x31c>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f000 810f 	beq.w	8015a10 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80157f2:	4b75      	ldr	r3, [pc, #468]	; (80159c8 <OpenThread_CallBack_Processing+0x31c>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	683a      	ldr	r2, [r7, #0]
 80157f8:	6892      	ldr	r2, [r2, #8]
 80157fa:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80157fc:	683a      	ldr	r2, [r7, #0]
 80157fe:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8015800:	4611      	mov	r1, r2
 8015802:	4798      	blx	r3
        }
        break;
 8015804:	e104      	b.n	8015a10 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8015806:	4b71      	ldr	r3, [pc, #452]	; (80159cc <OpenThread_CallBack_Processing+0x320>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	f000 8102 	beq.w	8015a14 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8015810:	4b6e      	ldr	r3, [pc, #440]	; (80159cc <OpenThread_CallBack_Processing+0x320>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	683a      	ldr	r2, [r7, #0]
 8015816:	6892      	ldr	r2, [r2, #8]
 8015818:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801581a:	683a      	ldr	r2, [r7, #0]
 801581c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 801581e:	4611      	mov	r1, r2
 8015820:	4798      	blx	r3
        }
        break;
 8015822:	e0f7      	b.n	8015a14 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8015824:	4b6a      	ldr	r3, [pc, #424]	; (80159d0 <OpenThread_CallBack_Processing+0x324>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	f000 80f5 	beq.w	8015a18 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801582e:	4b68      	ldr	r3, [pc, #416]	; (80159d0 <OpenThread_CallBack_Processing+0x324>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	683a      	ldr	r2, [r7, #0]
 8015834:	6892      	ldr	r2, [r2, #8]
 8015836:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015838:	683a      	ldr	r2, [r7, #0]
 801583a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801583c:	4611      	mov	r1, r2
 801583e:	4798      	blx	r3
        }
        break;
 8015840:	e0ea      	b.n	8015a18 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8015842:	4b64      	ldr	r3, [pc, #400]	; (80159d4 <OpenThread_CallBack_Processing+0x328>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	f000 80e8 	beq.w	8015a1c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801584c:	4b61      	ldr	r3, [pc, #388]	; (80159d4 <OpenThread_CallBack_Processing+0x328>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	683a      	ldr	r2, [r7, #0]
 8015852:	6892      	ldr	r2, [r2, #8]
 8015854:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8015856:	683a      	ldr	r2, [r7, #0]
 8015858:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801585a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801585c:	683a      	ldr	r2, [r7, #0]
 801585e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015860:	4798      	blx	r3
        }
        break;
 8015862:	e0db      	b.n	8015a1c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8015864:	4b5c      	ldr	r3, [pc, #368]	; (80159d8 <OpenThread_CallBack_Processing+0x32c>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	f000 80d9 	beq.w	8015a20 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801586e:	4b5a      	ldr	r3, [pc, #360]	; (80159d8 <OpenThread_CallBack_Processing+0x32c>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	683a      	ldr	r2, [r7, #0]
 8015874:	6892      	ldr	r2, [r2, #8]
 8015876:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8015878:	683a      	ldr	r2, [r7, #0]
 801587a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801587c:	4611      	mov	r1, r2
 801587e:	4798      	blx	r3
        }
        break;
 8015880:	e0ce      	b.n	8015a20 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8015882:	4b56      	ldr	r3, [pc, #344]	; (80159dc <OpenThread_CallBack_Processing+0x330>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	2b00      	cmp	r3, #0
 8015888:	f000 80cc 	beq.w	8015a24 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801588c:	4b53      	ldr	r3, [pc, #332]	; (80159dc <OpenThread_CallBack_Processing+0x330>)
 801588e:	681c      	ldr	r4, [r3, #0]
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015898:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801589e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80158a4:	47a0      	blx	r4
        }
        break;
 80158a6:	e0bd      	b.n	8015a24 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 80158a8:	4b4d      	ldr	r3, [pc, #308]	; (80159e0 <OpenThread_CallBack_Processing+0x334>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	f000 80bb 	beq.w	8015a28 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80158b2:	4b4b      	ldr	r3, [pc, #300]	; (80159e0 <OpenThread_CallBack_Processing+0x334>)
 80158b4:	681c      	ldr	r4, [r3, #0]
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80158c0:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80158c6:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	9300      	str	r3, [sp, #0]
 80158d4:	4613      	mov	r3, r2
 80158d6:	462a      	mov	r2, r5
 80158d8:	47a0      	blx	r4
        }
        break;
 80158da:	e0a5      	b.n	8015a28 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 80158dc:	4b41      	ldr	r3, [pc, #260]	; (80159e4 <OpenThread_CallBack_Processing+0x338>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	f000 80a3 	beq.w	8015a2c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80158e6:	4b3f      	ldr	r3, [pc, #252]	; (80159e4 <OpenThread_CallBack_Processing+0x338>)
 80158e8:	681c      	ldr	r4, [r3, #0]
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	689b      	ldr	r3, [r3, #8]
 80158ee:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80158f4:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80158fa:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8015900:	47a0      	blx	r4
        }
        break;
 8015902:	e093      	b.n	8015a2c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8015904:	4b38      	ldr	r3, [pc, #224]	; (80159e8 <OpenThread_CallBack_Processing+0x33c>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2b00      	cmp	r3, #0
 801590a:	f000 8091 	beq.w	8015a30 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 801590e:	4b36      	ldr	r3, [pc, #216]	; (80159e8 <OpenThread_CallBack_Processing+0x33c>)
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	683a      	ldr	r2, [r7, #0]
 8015914:	6892      	ldr	r2, [r2, #8]
 8015916:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8015918:	683a      	ldr	r2, [r7, #0]
 801591a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 801591c:	4611      	mov	r1, r2
 801591e:	4798      	blx	r3
        }
        break;
 8015920:	e086      	b.n	8015a30 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8015922:	4b32      	ldr	r3, [pc, #200]	; (80159ec <OpenThread_CallBack_Processing+0x340>)
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2b00      	cmp	r3, #0
 8015928:	f000 8084 	beq.w	8015a34 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801592c:	4b2f      	ldr	r3, [pc, #188]	; (80159ec <OpenThread_CallBack_Processing+0x340>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	683a      	ldr	r2, [r7, #0]
 8015932:	6892      	ldr	r2, [r2, #8]
 8015934:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8015936:	683a      	ldr	r2, [r7, #0]
 8015938:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801593a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 801593c:	683a      	ldr	r2, [r7, #0]
 801593e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015940:	b2d2      	uxtb	r2, r2
 8015942:	4798      	blx	r3
        }
        break;
 8015944:	e076      	b.n	8015a34 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8015946:	4b2a      	ldr	r3, [pc, #168]	; (80159f0 <OpenThread_CallBack_Processing+0x344>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d074      	beq.n	8015a38 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801594e:	4b28      	ldr	r3, [pc, #160]	; (80159f0 <OpenThread_CallBack_Processing+0x344>)
 8015950:	681c      	ldr	r4, [r3, #0]
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	689b      	ldr	r3, [r3, #8]
 8015956:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801595c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015962:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015968:	b2db      	uxtb	r3, r3
 801596a:	47a0      	blx	r4
        }
        break;
 801596c:	e064      	b.n	8015a38 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 801596e:	4b21      	ldr	r3, [pc, #132]	; (80159f4 <OpenThread_CallBack_Processing+0x348>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d062      	beq.n	8015a3c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015976:	4b1f      	ldr	r3, [pc, #124]	; (80159f4 <OpenThread_CallBack_Processing+0x348>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	683a      	ldr	r2, [r7, #0]
 801597c:	6892      	ldr	r2, [r2, #8]
 801597e:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8015980:	683a      	ldr	r2, [r7, #0]
 8015982:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015984:	b252      	sxtb	r2, r2
 8015986:	4611      	mov	r1, r2
 8015988:	4798      	blx	r3
        }
        break;
 801598a:	e057      	b.n	8015a3c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 801598c:	4b1a      	ldr	r3, [pc, #104]	; (80159f8 <OpenThread_CallBack_Processing+0x34c>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d055      	beq.n	8015a40 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015994:	4b18      	ldr	r3, [pc, #96]	; (80159f8 <OpenThread_CallBack_Processing+0x34c>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	683a      	ldr	r2, [r7, #0]
 801599a:	6892      	ldr	r2, [r2, #8]
 801599c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 801599e:	683a      	ldr	r2, [r7, #0]
 80159a0:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80159a2:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80159a4:	683a      	ldr	r2, [r7, #0]
 80159a6:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80159a8:	4798      	blx	r3
        }
        break;
 80159aa:	e049      	b.n	8015a40 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80159ac:	2301      	movs	r3, #1
 80159ae:	71fb      	strb	r3, [r7, #7]
        break;
 80159b0:	e047      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
 80159b2:	bf00      	nop
 80159b4:	200275b0 	.word	0x200275b0
 80159b8:	200275f0 	.word	0x200275f0
 80159bc:	200275f4 	.word	0x200275f4
 80159c0:	200275b8 	.word	0x200275b8
 80159c4:	200275b4 	.word	0x200275b4
 80159c8:	200275bc 	.word	0x200275bc
 80159cc:	200275c0 	.word	0x200275c0
 80159d0:	200275c4 	.word	0x200275c4
 80159d4:	200275c8 	.word	0x200275c8
 80159d8:	200275cc 	.word	0x200275cc
 80159dc:	200275d0 	.word	0x200275d0
 80159e0:	200275d4 	.word	0x200275d4
 80159e4:	200275d8 	.word	0x200275d8
 80159e8:	200275dc 	.word	0x200275dc
 80159ec:	200275e0 	.word	0x200275e0
 80159f0:	200275e4 	.word	0x200275e4
 80159f4:	200275e8 	.word	0x200275e8
 80159f8:	200275ec 	.word	0x200275ec
        break;
 80159fc:	bf00      	nop
 80159fe:	e020      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a00:	bf00      	nop
 8015a02:	e01e      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a04:	bf00      	nop
 8015a06:	e01c      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a08:	bf00      	nop
 8015a0a:	e01a      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a0c:	bf00      	nop
 8015a0e:	e018      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a10:	bf00      	nop
 8015a12:	e016      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a14:	bf00      	nop
 8015a16:	e014      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a18:	bf00      	nop
 8015a1a:	e012      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a1c:	bf00      	nop
 8015a1e:	e010      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a20:	bf00      	nop
 8015a22:	e00e      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a24:	bf00      	nop
 8015a26:	e00c      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a28:	bf00      	nop
 8015a2a:	e00a      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a2c:	bf00      	nop
 8015a2e:	e008      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a30:	bf00      	nop
 8015a32:	e006      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a34:	bf00      	nop
 8015a36:	e004      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a38:	bf00      	nop
 8015a3a:	e002      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a3c:	bf00      	nop
 8015a3e:	e000      	b.n	8015a42 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a40:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8015a42:	f000 fcc1 	bl	80163c8 <TL_THREAD_SendAck>
    return status;
 8015a46:	79fb      	ldrb	r3, [r7, #7]

}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3708      	adds	r7, #8
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bdb0      	pop	{r4, r5, r7, pc}

08015a50 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	460b      	mov	r3, r1
 8015a5a:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8015a5c:	f003 f874 	bl	8018b48 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015a60:	f003 f810 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8015a64:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2200      	movs	r2, #0
 8015a6a:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8015a6e:	701a      	strb	r2, [r3, #0]
 8015a70:	2200      	movs	r2, #0
 8015a72:	f042 0201 	orr.w	r2, r2, #1
 8015a76:	705a      	strb	r2, [r3, #1]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	709a      	strb	r2, [r3, #2]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2200      	movs	r2, #0
 8015a84:	f042 0201 	orr.w	r2, r2, #1
 8015a88:	711a      	strb	r2, [r3, #4]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	715a      	strb	r2, [r3, #5]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	719a      	strb	r2, [r3, #6]
 8015a92:	2200      	movs	r2, #0
 8015a94:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8015a96:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015a9e:	f003 f815 	bl	8018acc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015aa2:	f002 fffb 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8015aa6:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	689b      	ldr	r3, [r3, #8]
 8015aac:	b2db      	uxtb	r3, r3
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3710      	adds	r7, #16
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}

08015ab6 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8015ab6:	b580      	push	{r7, lr}
 8015ab8:	b086      	sub	sp, #24
 8015aba:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015abc:	1d3b      	adds	r3, r7, #4
 8015abe:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	2100      	movs	r1, #0
 8015ac6:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8015aca:	f000 f915 	bl	8015cf8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	330b      	adds	r3, #11
 8015ad2:	78db      	ldrb	r3, [r3, #3]
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3718      	adds	r7, #24
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}

08015adc <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b088      	sub	sp, #32
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015ae6:	f107 030c 	add.w	r3, r7, #12
 8015aea:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8015aec:	79fb      	ldrb	r3, [r7, #7]
 8015aee:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8015af0:	f107 020c 	add.w	r2, r7, #12
 8015af4:	69fb      	ldr	r3, [r7, #28]
 8015af6:	2101      	movs	r1, #1
 8015af8:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8015afc:	f000 f8fc 	bl	8015cf8 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b00:	69fb      	ldr	r3, [r7, #28]
 8015b02:	330b      	adds	r3, #11
 8015b04:	78db      	ldrb	r3, [r3, #3]
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3720      	adds	r7, #32
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}
	...

08015b10 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015b10:	b480      	push	{r7}
 8015b12:	b089      	sub	sp, #36	; 0x24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8015b24:	2300      	movs	r3, #0
 8015b26:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015b2c:	4b3c      	ldr	r3, [pc, #240]	; (8015c20 <SHCI_GetWirelessFwInfo+0x110>)
 8015b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015b34:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015b3e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015b42:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	691b      	ldr	r3, [r3, #16]
 8015b4a:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	0e1b      	lsrs	r3, r3, #24
 8015b50:	b2da      	uxtb	r2, r3
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	0c1b      	lsrs	r3, r3, #16
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	0a1b      	lsrs	r3, r3, #8
 8015b64:	b2da      	uxtb	r2, r3
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	091b      	lsrs	r3, r3, #4
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	f003 030f 	and.w	r3, r3, #15
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	f003 030f 	and.w	r3, r3, #15
 8015b82:	b2da      	uxtb	r2, r3
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015b88:	69bb      	ldr	r3, [r7, #24]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	695b      	ldr	r3, [r3, #20]
 8015b8e:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	0e1b      	lsrs	r3, r3, #24
 8015b94:	b2da      	uxtb	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	0c1b      	lsrs	r3, r3, #16
 8015b9e:	b2da      	uxtb	r2, r3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	0a1b      	lsrs	r3, r3, #8
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015bae:	693b      	ldr	r3, [r7, #16]
 8015bb0:	b2da      	uxtb	r2, r3
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015bb6:	69bb      	ldr	r3, [r7, #24]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	699b      	ldr	r3, [r3, #24]
 8015bbc:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	b2da      	uxtb	r2, r3
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015bc6:	69bb      	ldr	r3, [r7, #24]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015bce:	697b      	ldr	r3, [r7, #20]
 8015bd0:	0e1b      	lsrs	r3, r3, #24
 8015bd2:	b2da      	uxtb	r2, r3
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	0c1b      	lsrs	r3, r3, #16
 8015bdc:	b2da      	uxtb	r2, r3
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	0a1b      	lsrs	r3, r3, #8
 8015be6:	b2da      	uxtb	r2, r3
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015bec:	69bb      	ldr	r3, [r7, #24]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	689b      	ldr	r3, [r3, #8]
 8015bf2:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	0e1b      	lsrs	r3, r3, #24
 8015bf8:	b2da      	uxtb	r2, r3
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	0c1b      	lsrs	r3, r3, #16
 8015c02:	b2da      	uxtb	r2, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	b2da      	uxtb	r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015c10:	2300      	movs	r3, #0
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	3724      	adds	r7, #36	; 0x24
 8015c16:	46bd      	mov	sp, r7
 8015c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1c:	4770      	bx	lr
 8015c1e:	bf00      	nop
 8015c20:	58004000 	.word	0x58004000

08015c24 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b082      	sub	sp, #8
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	4a08      	ldr	r2, [pc, #32]	; (8015c54 <shci_init+0x30>)
 8015c34:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8015c36:	4a08      	ldr	r2, [pc, #32]	; (8015c58 <shci_init+0x34>)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015c3c:	4806      	ldr	r0, [pc, #24]	; (8015c58 <shci_init+0x34>)
 8015c3e:	f000 f911 	bl	8015e64 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f000 f894 	bl	8015d74 <TlInit>

  return;
 8015c4c:	bf00      	nop
}
 8015c4e:	3708      	adds	r7, #8
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	20027618 	.word	0x20027618
 8015c58:	200275f8 	.word	0x200275f8

08015c5c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b084      	sub	sp, #16
 8015c60:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015c62:	4822      	ldr	r0, [pc, #136]	; (8015cec <shci_user_evt_proc+0x90>)
 8015c64:	f000 f922 	bl	8015eac <LST_is_empty>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d12b      	bne.n	8015cc6 <shci_user_evt_proc+0x6a>
 8015c6e:	4b20      	ldr	r3, [pc, #128]	; (8015cf0 <shci_user_evt_proc+0x94>)
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d027      	beq.n	8015cc6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015c76:	f107 030c 	add.w	r3, r7, #12
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	481b      	ldr	r0, [pc, #108]	; (8015cec <shci_user_evt_proc+0x90>)
 8015c7e:	f000 f99c 	bl	8015fba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8015c82:	4b1c      	ldr	r3, [pc, #112]	; (8015cf4 <shci_user_evt_proc+0x98>)
 8015c84:	69db      	ldr	r3, [r3, #28]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d00c      	beq.n	8015ca4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8015c8e:	2301      	movs	r3, #1
 8015c90:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015c92:	4b18      	ldr	r3, [pc, #96]	; (8015cf4 <shci_user_evt_proc+0x98>)
 8015c94:	69db      	ldr	r3, [r3, #28]
 8015c96:	1d3a      	adds	r2, r7, #4
 8015c98:	4610      	mov	r0, r2
 8015c9a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8015c9c:	793a      	ldrb	r2, [r7, #4]
 8015c9e:	4b14      	ldr	r3, [pc, #80]	; (8015cf0 <shci_user_evt_proc+0x94>)
 8015ca0:	701a      	strb	r2, [r3, #0]
 8015ca2:	e002      	b.n	8015caa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015ca4:	4b12      	ldr	r3, [pc, #72]	; (8015cf0 <shci_user_evt_proc+0x94>)
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8015caa:	4b11      	ldr	r3, [pc, #68]	; (8015cf0 <shci_user_evt_proc+0x94>)
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d004      	beq.n	8015cbc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f000 fc03 	bl	80164c0 <TL_MM_EvtDone>
 8015cba:	e004      	b.n	8015cc6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	4619      	mov	r1, r3
 8015cc0:	480a      	ldr	r0, [pc, #40]	; (8015cec <shci_user_evt_proc+0x90>)
 8015cc2:	f000 f913 	bl	8015eec <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015cc6:	4809      	ldr	r0, [pc, #36]	; (8015cec <shci_user_evt_proc+0x90>)
 8015cc8:	f000 f8f0 	bl	8015eac <LST_is_empty>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d107      	bne.n	8015ce2 <shci_user_evt_proc+0x86>
 8015cd2:	4b07      	ldr	r3, [pc, #28]	; (8015cf0 <shci_user_evt_proc+0x94>)
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d003      	beq.n	8015ce2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015cda:	4804      	ldr	r0, [pc, #16]	; (8015cec <shci_user_evt_proc+0x90>)
 8015cdc:	f7eb fa6a 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 8015ce0:	bf00      	nop
 8015ce2:	bf00      	nop
}
 8015ce4:	3710      	adds	r7, #16
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	20000370 	.word	0x20000370
 8015cf0:	20000380 	.word	0x20000380
 8015cf4:	200275f8 	.word	0x200275f8

08015cf8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60ba      	str	r2, [r7, #8]
 8015d00:	607b      	str	r3, [r7, #4]
 8015d02:	4603      	mov	r3, r0
 8015d04:	81fb      	strh	r3, [r7, #14]
 8015d06:	460b      	mov	r3, r1
 8015d08:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	f000 f864 	bl	8015dd8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015d10:	4b16      	ldr	r3, [pc, #88]	; (8015d6c <shci_send+0x74>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	89fa      	ldrh	r2, [r7, #14]
 8015d16:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015d1a:	4b14      	ldr	r3, [pc, #80]	; (8015d6c <shci_send+0x74>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	7b7a      	ldrb	r2, [r7, #13]
 8015d20:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8015d22:	4b12      	ldr	r3, [pc, #72]	; (8015d6c <shci_send+0x74>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	330c      	adds	r3, #12
 8015d28:	7b7a      	ldrb	r2, [r7, #13]
 8015d2a:	68b9      	ldr	r1, [r7, #8]
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f004 fb43 	bl	801a3b8 <memcpy>

  shciContext.io.Send(0,0);
 8015d32:	4b0f      	ldr	r3, [pc, #60]	; (8015d70 <shci_send+0x78>)
 8015d34:	691b      	ldr	r3, [r3, #16]
 8015d36:	2100      	movs	r1, #0
 8015d38:	2000      	movs	r0, #0
 8015d3a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8015d3c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8015d40:	f7eb fa58 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f103 0008 	add.w	r0, r3, #8
 8015d4a:	4b08      	ldr	r3, [pc, #32]	; (8015d6c <shci_send+0x74>)
 8015d4c:	6819      	ldr	r1, [r3, #0]
 8015d4e:	4b07      	ldr	r3, [pc, #28]	; (8015d6c <shci_send+0x74>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	789b      	ldrb	r3, [r3, #2]
 8015d54:	3303      	adds	r3, #3
 8015d56:	461a      	mov	r2, r3
 8015d58:	f004 fb2e 	bl	801a3b8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015d5c:	2001      	movs	r0, #1
 8015d5e:	f000 f83b 	bl	8015dd8 <Cmd_SetStatus>

  return;
 8015d62:	bf00      	nop
}
 8015d64:	3710      	adds	r7, #16
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	2000037c 	.word	0x2000037c
 8015d70:	200275f8 	.word	0x200275f8

08015d74 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8015d7c:	4a10      	ldr	r2, [pc, #64]	; (8015dc0 <TlInit+0x4c>)
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8015d82:	4810      	ldr	r0, [pc, #64]	; (8015dc4 <TlInit+0x50>)
 8015d84:	f000 f882 	bl	8015e8c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015d88:	2001      	movs	r0, #1
 8015d8a:	f000 f825 	bl	8015dd8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015d8e:	4b0e      	ldr	r3, [pc, #56]	; (8015dc8 <TlInit+0x54>)
 8015d90:	2201      	movs	r2, #1
 8015d92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8015d94:	4b0d      	ldr	r3, [pc, #52]	; (8015dcc <TlInit+0x58>)
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d00c      	beq.n	8015db6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8015da0:	4b0b      	ldr	r3, [pc, #44]	; (8015dd0 <TlInit+0x5c>)
 8015da2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8015da4:	4b0b      	ldr	r3, [pc, #44]	; (8015dd4 <TlInit+0x60>)
 8015da6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8015da8:	4b08      	ldr	r3, [pc, #32]	; (8015dcc <TlInit+0x58>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	f107 020c 	add.w	r2, r7, #12
 8015db0:	4610      	mov	r0, r2
 8015db2:	4798      	blx	r3
  }

  return;
 8015db4:	bf00      	nop
 8015db6:	bf00      	nop
}
 8015db8:	3718      	adds	r7, #24
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	2000037c 	.word	0x2000037c
 8015dc4:	20000370 	.word	0x20000370
 8015dc8:	20000380 	.word	0x20000380
 8015dcc:	200275f8 	.word	0x200275f8
 8015dd0:	08015e29 	.word	0x08015e29
 8015dd4:	08015e41 	.word	0x08015e41

08015dd8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b082      	sub	sp, #8
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	4603      	mov	r3, r0
 8015de0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8015de2:	79fb      	ldrb	r3, [r7, #7]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d10b      	bne.n	8015e00 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8015de8:	4b0d      	ldr	r3, [pc, #52]	; (8015e20 <Cmd_SetStatus+0x48>)
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d003      	beq.n	8015df8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015df0:	4b0b      	ldr	r3, [pc, #44]	; (8015e20 <Cmd_SetStatus+0x48>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2000      	movs	r0, #0
 8015df6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8015df8:	4b0a      	ldr	r3, [pc, #40]	; (8015e24 <Cmd_SetStatus+0x4c>)
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015dfe:	e00b      	b.n	8015e18 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015e00:	4b08      	ldr	r3, [pc, #32]	; (8015e24 <Cmd_SetStatus+0x4c>)
 8015e02:	2201      	movs	r2, #1
 8015e04:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8015e06:	4b06      	ldr	r3, [pc, #24]	; (8015e20 <Cmd_SetStatus+0x48>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d004      	beq.n	8015e18 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015e0e:	4b04      	ldr	r3, [pc, #16]	; (8015e20 <Cmd_SetStatus+0x48>)
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	2001      	movs	r0, #1
 8015e14:	4798      	blx	r3
  return;
 8015e16:	bf00      	nop
 8015e18:	bf00      	nop
}
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	20027618 	.word	0x20027618
 8015e24:	20000378 	.word	0x20000378

08015e28 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015e30:	2000      	movs	r0, #0
 8015e32:	f7eb f9cf 	bl	80011d4 <shci_cmd_resp_release>

  return;
 8015e36:	bf00      	nop
}
 8015e38:	3708      	adds	r7, #8
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
	...

08015e40 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8015e48:	6879      	ldr	r1, [r7, #4]
 8015e4a:	4805      	ldr	r0, [pc, #20]	; (8015e60 <TlUserEvtReceived+0x20>)
 8015e4c:	f000 f872 	bl	8015f34 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015e50:	4803      	ldr	r0, [pc, #12]	; (8015e60 <TlUserEvtReceived+0x20>)
 8015e52:	f7eb f9af 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 8015e56:	bf00      	nop
}
 8015e58:	3708      	adds	r7, #8
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}
 8015e5e:	bf00      	nop
 8015e60:	20000370 	.word	0x20000370

08015e64 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8015e64:	b480      	push	{r7}
 8015e66:	b083      	sub	sp, #12
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	4a05      	ldr	r2, [pc, #20]	; (8015e84 <shci_register_io_bus+0x20>)
 8015e70:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	4a04      	ldr	r2, [pc, #16]	; (8015e88 <shci_register_io_bus+0x24>)
 8015e76:	611a      	str	r2, [r3, #16]

  return;
 8015e78:	bf00      	nop
}
 8015e7a:	370c      	adds	r7, #12
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e82:	4770      	bx	lr
 8015e84:	08016285 	.word	0x08016285
 8015e88:	080162d9 	.word	0x080162d9

08015e8c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b083      	sub	sp, #12
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	605a      	str	r2, [r3, #4]
}
 8015ea0:	bf00      	nop
 8015ea2:	370c      	adds	r7, #12
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eaa:	4770      	bx	lr

08015eac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8015eac:	b480      	push	{r7}
 8015eae:	b087      	sub	sp, #28
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8015eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8015eba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ebe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d102      	bne.n	8015ed0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8015eca:	2301      	movs	r3, #1
 8015ecc:	75fb      	strb	r3, [r7, #23]
 8015ece:	e001      	b.n	8015ed4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	75fb      	strb	r3, [r7, #23]
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8015ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	371c      	adds	r7, #28
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eea:	4770      	bx	lr

08015eec <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b087      	sub	sp, #28
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8015efa:	60fb      	str	r3, [r7, #12]
  return(result);
 8015efc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f00:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681a      	ldr	r2, [r3, #0]
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	683a      	ldr	r2, [r7, #0]
 8015f14:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	683a      	ldr	r2, [r7, #0]
 8015f1c:	605a      	str	r2, [r3, #4]
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015f28:	bf00      	nop
 8015f2a:	371c      	adds	r7, #28
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr

08015f34 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8015f34:	b480      	push	{r7}
 8015f36:	b087      	sub	sp, #28
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8015f42:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f44:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015f46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f48:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	687a      	ldr	r2, [r7, #4]
 8015f4e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	685a      	ldr	r2, [r3, #4]
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	683a      	ldr	r2, [r7, #0]
 8015f5c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	683a      	ldr	r2, [r7, #0]
 8015f64:	601a      	str	r2, [r3, #0]
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015f70:	bf00      	nop
 8015f72:	371c      	adds	r7, #28
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr

08015f7c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	b087      	sub	sp, #28
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f84:	f3ef 8310 	mrs	r3, PRIMASK
 8015f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015f8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f8e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	6812      	ldr	r2, [r2, #0]
 8015f98:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	6852      	ldr	r2, [r2, #4]
 8015fa2:	605a      	str	r2, [r3, #4]
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015fae:	bf00      	nop
 8015fb0:	371c      	adds	r7, #28
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb8:	4770      	bx	lr

08015fba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b086      	sub	sp, #24
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	6078      	str	r0, [r7, #4]
 8015fc2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8015fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015fcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015fce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681a      	ldr	r2, [r3, #0]
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7ff ffcd 	bl	8015f7c <LST_remove_node>
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015fec:	bf00      	nop
 8015fee:	3718      	adds	r7, #24
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}

08015ff4 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b084      	sub	sp, #16
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8016000:	f002 fda2 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016004:	f002 fd3e 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8016008:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2200      	movs	r2, #0
 801600e:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8016012:	701a      	strb	r2, [r3, #0]
 8016014:	2200      	movs	r2, #0
 8016016:	705a      	strb	r2, [r3, #1]
 8016018:	2200      	movs	r2, #0
 801601a:	709a      	strb	r2, [r3, #2]
 801601c:	2200      	movs	r2, #0
 801601e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	2200      	movs	r2, #0
 8016024:	f042 0201 	orr.w	r2, r2, #1
 8016028:	711a      	strb	r2, [r3, #4]
 801602a:	2200      	movs	r2, #0
 801602c:	715a      	strb	r2, [r3, #5]
 801602e:	2200      	movs	r2, #0
 8016030:	719a      	strb	r2, [r3, #6]
 8016032:	2200      	movs	r2, #0
 8016034:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8016036:	78fa      	ldrb	r2, [r7, #3]
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801603c:	f002 fd46 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016040:	f002 fd2c 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8016044:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	689b      	ldr	r3, [r3, #8]
 801604a:	b2db      	uxtb	r3, r3
}
 801604c:	4618      	mov	r0, r3
 801604e:	3710      	adds	r7, #16
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}

08016054 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801605e:	f002 fd73 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016062:	f002 fd0f 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8016066:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2200      	movs	r2, #0
 801606c:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8016070:	701a      	strb	r2, [r3, #0]
 8016072:	2200      	movs	r2, #0
 8016074:	705a      	strb	r2, [r3, #1]
 8016076:	2200      	movs	r2, #0
 8016078:	709a      	strb	r2, [r3, #2]
 801607a:	2200      	movs	r2, #0
 801607c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2200      	movs	r2, #0
 8016082:	f042 0201 	orr.w	r2, r2, #1
 8016086:	711a      	strb	r2, [r3, #4]
 8016088:	2200      	movs	r2, #0
 801608a:	715a      	strb	r2, [r3, #5]
 801608c:	2200      	movs	r2, #0
 801608e:	719a      	strb	r2, [r3, #6]
 8016090:	2200      	movs	r2, #0
 8016092:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8016094:	683a      	ldr	r2, [r7, #0]
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801609a:	f002 fd17 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801609e:	f002 fcfd 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80160a2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	689b      	ldr	r3, [r3, #8]
 80160a8:	b2db      	uxtb	r3, r3
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3710      	adds	r7, #16
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}

080160b2 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 80160b2:	b580      	push	{r7, lr}
 80160b4:	b084      	sub	sp, #16
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	6078      	str	r0, [r7, #4]
 80160ba:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80160bc:	f002 fd44 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80160c0:	f002 fce0 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 80160c4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	2200      	movs	r2, #0
 80160ca:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80160ce:	701a      	strb	r2, [r3, #0]
 80160d0:	2200      	movs	r2, #0
 80160d2:	705a      	strb	r2, [r3, #1]
 80160d4:	2200      	movs	r2, #0
 80160d6:	709a      	strb	r2, [r3, #2]
 80160d8:	2200      	movs	r2, #0
 80160da:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2200      	movs	r2, #0
 80160e0:	f042 0201 	orr.w	r2, r2, #1
 80160e4:	711a      	strb	r2, [r3, #4]
 80160e6:	2200      	movs	r2, #0
 80160e8:	715a      	strb	r2, [r3, #5]
 80160ea:	2200      	movs	r2, #0
 80160ec:	719a      	strb	r2, [r3, #6]
 80160ee:	2200      	movs	r2, #0
 80160f0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 80160f2:	683a      	ldr	r2, [r7, #0]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80160f8:	f002 fce8 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80160fc:	f002 fcce 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 8016100:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	689b      	ldr	r3, [r3, #8]
 8016106:	b2db      	uxtb	r3, r3
}
 8016108:	4618      	mov	r0, r3
 801610a:	3710      	adds	r7, #16
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801611a:	f002 fd15 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801611e:	f002 fcb1 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 8016122:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2200      	movs	r2, #0
 8016128:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 801612c:	701a      	strb	r2, [r3, #0]
 801612e:	2200      	movs	r2, #0
 8016130:	705a      	strb	r2, [r3, #1]
 8016132:	2200      	movs	r2, #0
 8016134:	709a      	strb	r2, [r3, #2]
 8016136:	2200      	movs	r2, #0
 8016138:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2200      	movs	r2, #0
 801613e:	f042 0201 	orr.w	r2, r2, #1
 8016142:	711a      	strb	r2, [r3, #4]
 8016144:	2200      	movs	r2, #0
 8016146:	715a      	strb	r2, [r3, #5]
 8016148:	2200      	movs	r2, #0
 801614a:	719a      	strb	r2, [r3, #6]
 801614c:	2200      	movs	r2, #0
 801614e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8016150:	683a      	ldr	r2, [r7, #0]
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8016156:	f002 fcb9 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801615a:	f002 fc9f 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 801615e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	689b      	ldr	r3, [r3, #8]
 8016164:	b2db      	uxtb	r3, r3
}
 8016166:	4618      	mov	r0, r3
 8016168:	3710      	adds	r7, #16
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}

0801616e <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 801616e:	b580      	push	{r7, lr}
 8016170:	b084      	sub	sp, #16
 8016172:	af00      	add	r7, sp, #0
 8016174:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8016176:	f002 fce7 	bl	8018b48 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801617a:	f002 fc83 	bl	8018a84 <THREAD_Get_OTCmdPayloadBuffer>
 801617e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2200      	movs	r2, #0
 8016184:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8016188:	701a      	strb	r2, [r3, #0]
 801618a:	2200      	movs	r2, #0
 801618c:	705a      	strb	r2, [r3, #1]
 801618e:	2200      	movs	r2, #0
 8016190:	709a      	strb	r2, [r3, #2]
 8016192:	2200      	movs	r2, #0
 8016194:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	2200      	movs	r2, #0
 801619a:	711a      	strb	r2, [r3, #4]
 801619c:	2200      	movs	r2, #0
 801619e:	715a      	strb	r2, [r3, #5]
 80161a0:	2200      	movs	r2, #0
 80161a2:	719a      	strb	r2, [r3, #6]
 80161a4:	2200      	movs	r2, #0
 80161a6:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80161a8:	f002 fc90 	bl	8018acc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80161ac:	f002 fc76 	bl	8018a9c <THREAD_Get_OTCmdRspPayloadBuffer>
 80161b0:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	689b      	ldr	r3, [r3, #8]
 80161b6:	b2db      	uxtb	r3, r3
}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3710      	adds	r7, #16
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80161c4:	f002 ff44 	bl	8019050 <HW_IPCC_Enable>

  return;
 80161c8:	bf00      	nop
}
 80161ca:	bd80      	pop	{r7, pc}

080161cc <TL_Init>:


void TL_Init( void )
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80161d0:	4b0f      	ldr	r3, [pc, #60]	; (8016210 <TL_Init+0x44>)
 80161d2:	4a10      	ldr	r2, [pc, #64]	; (8016214 <TL_Init+0x48>)
 80161d4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80161d6:	4b0e      	ldr	r3, [pc, #56]	; (8016210 <TL_Init+0x44>)
 80161d8:	4a0f      	ldr	r2, [pc, #60]	; (8016218 <TL_Init+0x4c>)
 80161da:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80161dc:	4b0c      	ldr	r3, [pc, #48]	; (8016210 <TL_Init+0x44>)
 80161de:	4a0f      	ldr	r2, [pc, #60]	; (801621c <TL_Init+0x50>)
 80161e0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80161e2:	4b0b      	ldr	r3, [pc, #44]	; (8016210 <TL_Init+0x44>)
 80161e4:	4a0e      	ldr	r2, [pc, #56]	; (8016220 <TL_Init+0x54>)
 80161e6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 80161e8:	4b09      	ldr	r3, [pc, #36]	; (8016210 <TL_Init+0x44>)
 80161ea:	4a0e      	ldr	r2, [pc, #56]	; (8016224 <TL_Init+0x58>)
 80161ec:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80161ee:	4b08      	ldr	r3, [pc, #32]	; (8016210 <TL_Init+0x44>)
 80161f0:	4a0d      	ldr	r2, [pc, #52]	; (8016228 <TL_Init+0x5c>)
 80161f2:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80161f4:	4b06      	ldr	r3, [pc, #24]	; (8016210 <TL_Init+0x44>)
 80161f6:	4a0d      	ldr	r2, [pc, #52]	; (801622c <TL_Init+0x60>)
 80161f8:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80161fa:	4b05      	ldr	r3, [pc, #20]	; (8016210 <TL_Init+0x44>)
 80161fc:	4a0c      	ldr	r2, [pc, #48]	; (8016230 <TL_Init+0x64>)
 80161fe:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8016200:	4b03      	ldr	r3, [pc, #12]	; (8016210 <TL_Init+0x44>)
 8016202:	4a0c      	ldr	r2, [pc, #48]	; (8016234 <TL_Init+0x68>)
 8016204:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016206:	f002 ff33 	bl	8019070 <HW_IPCC_Init>

  return;
 801620a:	bf00      	nop
}
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	20030000 	.word	0x20030000
 8016214:	20030024 	.word	0x20030024
 8016218:	20030044 	.word	0x20030044
 801621c:	20030054 	.word	0x20030054
 8016220:	20030060 	.word	0x20030060
 8016224:	20030068 	.word	0x20030068
 8016228:	20030070 	.word	0x20030070
 801622c:	2003008c 	.word	0x2003008c
 8016230:	20030090 	.word	0x20030090
 8016234:	2003009c 	.word	0x2003009c

08016238 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b082      	sub	sp, #8
 801623c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801623e:	e009      	b.n	8016254 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016240:	1d3b      	adds	r3, r7, #4
 8016242:	4619      	mov	r1, r3
 8016244:	4808      	ldr	r0, [pc, #32]	; (8016268 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8016246:	f7ff feb8 	bl	8015fba <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 801624a:	4b08      	ldr	r3, [pc, #32]	; (801626c <HW_IPCC_BLE_RxEvtNot+0x34>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	687a      	ldr	r2, [r7, #4]
 8016250:	4610      	mov	r0, r2
 8016252:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016254:	4804      	ldr	r0, [pc, #16]	; (8016268 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8016256:	f7ff fe29 	bl	8015eac <LST_is_empty>
 801625a:	4603      	mov	r3, r0
 801625c:	2b00      	cmp	r3, #0
 801625e:	d0ef      	beq.n	8016240 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016260:	bf00      	nop
}
 8016262:	3708      	adds	r7, #8
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}
 8016268:	20030828 	.word	0x20030828
 801626c:	20027624 	.word	0x20027624

08016270 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016274:	4b02      	ldr	r3, [pc, #8]	; (8016280 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	4798      	blx	r3

  return;
 801627a:	bf00      	nop
}
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	20027628 	.word	0x20027628

08016284 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b084      	sub	sp, #16
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016290:	480d      	ldr	r0, [pc, #52]	; (80162c8 <TL_SYS_Init+0x44>)
 8016292:	f7ff fdfb 	bl	8015e8c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016296:	4b0d      	ldr	r3, [pc, #52]	; (80162cc <TL_SYS_Init+0x48>)
 8016298:	68db      	ldr	r3, [r3, #12]
 801629a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	689a      	ldr	r2, [r3, #8]
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	4a08      	ldr	r2, [pc, #32]	; (80162c8 <TL_SYS_Init+0x44>)
 80162a8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80162aa:	f002 ff0f 	bl	80190cc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4a07      	ldr	r2, [pc, #28]	; (80162d0 <TL_SYS_Init+0x4c>)
 80162b4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	4a06      	ldr	r2, [pc, #24]	; (80162d4 <TL_SYS_Init+0x50>)
 80162bc:	6013      	str	r3, [r2, #0]

  return 0;
 80162be:	2300      	movs	r3, #0
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3710      	adds	r7, #16
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}
 80162c8:	20030830 	.word	0x20030830
 80162cc:	20030000 	.word	0x20030000
 80162d0:	2002762c 	.word	0x2002762c
 80162d4:	20027630 	.word	0x20027630

080162d8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	460b      	mov	r3, r1
 80162e2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80162e4:	4b05      	ldr	r3, [pc, #20]	; (80162fc <TL_SYS_SendCmd+0x24>)
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	2210      	movs	r2, #16
 80162ec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80162ee:	f002 fef7 	bl	80190e0 <HW_IPCC_SYS_SendCmd>

  return 0;
 80162f2:	2300      	movs	r3, #0
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3708      	adds	r7, #8
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	20030000 	.word	0x20030000

08016300 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016304:	4b04      	ldr	r3, [pc, #16]	; (8016318 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	4a04      	ldr	r2, [pc, #16]	; (801631c <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 801630a:	68d2      	ldr	r2, [r2, #12]
 801630c:	6812      	ldr	r2, [r2, #0]
 801630e:	4610      	mov	r0, r2
 8016310:	4798      	blx	r3

  return;
 8016312:	bf00      	nop
}
 8016314:	bd80      	pop	{r7, pc}
 8016316:	bf00      	nop
 8016318:	2002762c 	.word	0x2002762c
 801631c:	20030000 	.word	0x20030000

08016320 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016326:	e009      	b.n	801633c <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016328:	1d3b      	adds	r3, r7, #4
 801632a:	4619      	mov	r1, r3
 801632c:	4808      	ldr	r0, [pc, #32]	; (8016350 <HW_IPCC_SYS_EvtNot+0x30>)
 801632e:	f7ff fe44 	bl	8015fba <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016332:	4b08      	ldr	r3, [pc, #32]	; (8016354 <HW_IPCC_SYS_EvtNot+0x34>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	687a      	ldr	r2, [r7, #4]
 8016338:	4610      	mov	r0, r2
 801633a:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801633c:	4804      	ldr	r0, [pc, #16]	; (8016350 <HW_IPCC_SYS_EvtNot+0x30>)
 801633e:	f7ff fdb5 	bl	8015eac <LST_is_empty>
 8016342:	4603      	mov	r3, r0
 8016344:	2b00      	cmp	r3, #0
 8016346:	d0ef      	beq.n	8016328 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016348:	bf00      	nop
}
 801634a:	3708      	adds	r7, #8
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}
 8016350:	20030830 	.word	0x20030830
 8016354:	20027630 	.word	0x20027630

08016358 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b084      	sub	sp, #16
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8016360:	4b0a      	ldr	r3, [pc, #40]	; (801638c <TL_THREAD_Init+0x34>)
 8016362:	689b      	ldr	r3, [r3, #8]
 8016364:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	685a      	ldr	r2, [r3, #4]
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	689a      	ldr	r2, [r3, #8]
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 801637e:	f002 fed5 	bl	801912c <HW_IPCC_THREAD_Init>

  return;
 8016382:	bf00      	nop
}
 8016384:	3710      	adds	r7, #16
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	20030000 	.word	0x20030000

08016390 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8016390:	b580      	push	{r7, lr}
 8016392:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8016394:	4b04      	ldr	r3, [pc, #16]	; (80163a8 <TL_OT_SendCmd+0x18>)
 8016396:	689b      	ldr	r3, [r3, #8]
 8016398:	689b      	ldr	r3, [r3, #8]
 801639a:	2208      	movs	r2, #8
 801639c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 801639e:	f002 fed3 	bl	8019148 <HW_IPCC_OT_SendCmd>

  return;
 80163a2:	bf00      	nop
}
 80163a4:	bd80      	pop	{r7, pc}
 80163a6:	bf00      	nop
 80163a8:	20030000 	.word	0x20030000

080163ac <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80163b0:	4b04      	ldr	r3, [pc, #16]	; (80163c4 <TL_CLI_SendCmd+0x18>)
 80163b2:	689b      	ldr	r3, [r3, #8]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	220a      	movs	r2, #10
 80163b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80163ba:	f002 fed3 	bl	8019164 <HW_IPCC_CLI_SendCmd>

  return;
 80163be:	bf00      	nop
}
 80163c0:	bd80      	pop	{r7, pc}
 80163c2:	bf00      	nop
 80163c4:	20030000 	.word	0x20030000

080163c8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80163cc:	4b04      	ldr	r3, [pc, #16]	; (80163e0 <TL_THREAD_SendAck+0x18>)
 80163ce:	689b      	ldr	r3, [r3, #8]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	220d      	movs	r2, #13
 80163d4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80163d6:	f002 fecf 	bl	8019178 <HW_IPCC_THREAD_SendAck>

  return;
 80163da:	bf00      	nop
}
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	20030000 	.word	0x20030000

080163e4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80163e8:	4b04      	ldr	r3, [pc, #16]	; (80163fc <TL_THREAD_CliSendAck+0x18>)
 80163ea:	689b      	ldr	r3, [r3, #8]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	220d      	movs	r2, #13
 80163f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80163f2:	f002 fecf 	bl	8019194 <HW_IPCC_THREAD_CliSendAck>

  return;
 80163f6:	bf00      	nop
}
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	20030000 	.word	0x20030000

08016400 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8016404:	4b03      	ldr	r3, [pc, #12]	; (8016414 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8016406:	689b      	ldr	r3, [r3, #8]
 8016408:	689b      	ldr	r3, [r3, #8]
 801640a:	4618      	mov	r0, r3
 801640c:	f002 fb82 	bl	8018b14 <TL_OT_CmdEvtReceived>

  return;
 8016410:	bf00      	nop
}
 8016412:	bd80      	pop	{r7, pc}
 8016414:	20030000 	.word	0x20030000

08016418 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 801641c:	4b03      	ldr	r3, [pc, #12]	; (801642c <HW_IPCC_THREAD_EvtNot+0x14>)
 801641e:	689b      	ldr	r3, [r3, #8]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	4618      	mov	r0, r3
 8016424:	f002 fb80 	bl	8018b28 <TL_THREAD_NotReceived>

  return;
 8016428:	bf00      	nop
}
 801642a:	bd80      	pop	{r7, pc}
 801642c:	20030000 	.word	0x20030000

08016430 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8016430:	b580      	push	{r7, lr}
 8016432:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8016434:	4b03      	ldr	r3, [pc, #12]	; (8016444 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8016436:	689b      	ldr	r3, [r3, #8]
 8016438:	685b      	ldr	r3, [r3, #4]
 801643a:	4618      	mov	r0, r3
 801643c:	f002 fc22 	bl	8018c84 <TL_THREAD_CliNotReceived>

  return;
 8016440:	bf00      	nop
}
 8016442:	bd80      	pop	{r7, pc}
 8016444:	20030000 	.word	0x20030000

08016448 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016450:	4817      	ldr	r0, [pc, #92]	; (80164b0 <TL_MM_Init+0x68>)
 8016452:	f7ff fd1b 	bl	8015e8c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016456:	4817      	ldr	r0, [pc, #92]	; (80164b4 <TL_MM_Init+0x6c>)
 8016458:	f7ff fd18 	bl	8015e8c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801645c:	4b16      	ldr	r3, [pc, #88]	; (80164b8 <TL_MM_Init+0x70>)
 801645e:	691b      	ldr	r3, [r3, #16]
 8016460:	4a16      	ldr	r2, [pc, #88]	; (80164bc <TL_MM_Init+0x74>)
 8016462:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016464:	4b15      	ldr	r3, [pc, #84]	; (80164bc <TL_MM_Init+0x74>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	687a      	ldr	r2, [r7, #4]
 801646a:	6892      	ldr	r2, [r2, #8]
 801646c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801646e:	4b13      	ldr	r3, [pc, #76]	; (80164bc <TL_MM_Init+0x74>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	68d2      	ldr	r2, [r2, #12]
 8016476:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016478:	4b10      	ldr	r3, [pc, #64]	; (80164bc <TL_MM_Init+0x74>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	4a0c      	ldr	r2, [pc, #48]	; (80164b0 <TL_MM_Init+0x68>)
 801647e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016480:	4b0e      	ldr	r3, [pc, #56]	; (80164bc <TL_MM_Init+0x74>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	687a      	ldr	r2, [r7, #4]
 8016486:	6812      	ldr	r2, [r2, #0]
 8016488:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801648a:	4b0c      	ldr	r3, [pc, #48]	; (80164bc <TL_MM_Init+0x74>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	6852      	ldr	r2, [r2, #4]
 8016492:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016494:	4b09      	ldr	r3, [pc, #36]	; (80164bc <TL_MM_Init+0x74>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	6912      	ldr	r2, [r2, #16]
 801649c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801649e:	4b07      	ldr	r3, [pc, #28]	; (80164bc <TL_MM_Init+0x74>)
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	687a      	ldr	r2, [r7, #4]
 80164a4:	6952      	ldr	r2, [r2, #20]
 80164a6:	619a      	str	r2, [r3, #24]

  return;
 80164a8:	bf00      	nop
}
 80164aa:	3708      	adds	r7, #8
 80164ac:	46bd      	mov	sp, r7
 80164ae:	bd80      	pop	{r7, pc}
 80164b0:	200300a8 	.word	0x200300a8
 80164b4:	2002761c 	.word	0x2002761c
 80164b8:	20030000 	.word	0x20030000
 80164bc:	20027634 	.word	0x20027634

080164c0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80164c8:	6879      	ldr	r1, [r7, #4]
 80164ca:	4805      	ldr	r0, [pc, #20]	; (80164e0 <TL_MM_EvtDone+0x20>)
 80164cc:	f7ff fd32 	bl	8015f34 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80164d0:	4804      	ldr	r0, [pc, #16]	; (80164e4 <TL_MM_EvtDone+0x24>)
 80164d2:	f002 fe91 	bl	80191f8 <HW_IPCC_MM_SendFreeBuf>

  return;
 80164d6:	bf00      	nop
}
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	2002761c 	.word	0x2002761c
 80164e4:	080164e9 	.word	0x080164e9

080164e8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80164ee:	e00c      	b.n	801650a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80164f0:	1d3b      	adds	r3, r7, #4
 80164f2:	4619      	mov	r1, r3
 80164f4:	480a      	ldr	r0, [pc, #40]	; (8016520 <SendFreeBuf+0x38>)
 80164f6:	f7ff fd60 	bl	8015fba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80164fa:	4b0a      	ldr	r3, [pc, #40]	; (8016524 <SendFreeBuf+0x3c>)
 80164fc:	691b      	ldr	r3, [r3, #16]
 80164fe:	691b      	ldr	r3, [r3, #16]
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	4611      	mov	r1, r2
 8016504:	4618      	mov	r0, r3
 8016506:	f7ff fd15 	bl	8015f34 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801650a:	4805      	ldr	r0, [pc, #20]	; (8016520 <SendFreeBuf+0x38>)
 801650c:	f7ff fcce 	bl	8015eac <LST_is_empty>
 8016510:	4603      	mov	r3, r0
 8016512:	2b00      	cmp	r3, #0
 8016514:	d0ec      	beq.n	80164f0 <SendFreeBuf+0x8>
  }

  return;
 8016516:	bf00      	nop
}
 8016518:	3708      	adds	r7, #8
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	2002761c 	.word	0x2002761c
 8016524:	20030000 	.word	0x20030000

08016528 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016528:	b580      	push	{r7, lr}
 801652a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801652c:	4805      	ldr	r0, [pc, #20]	; (8016544 <TL_TRACES_Init+0x1c>)
 801652e:	f7ff fcad 	bl	8015e8c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016532:	4b05      	ldr	r3, [pc, #20]	; (8016548 <TL_TRACES_Init+0x20>)
 8016534:	695b      	ldr	r3, [r3, #20]
 8016536:	4a03      	ldr	r2, [pc, #12]	; (8016544 <TL_TRACES_Init+0x1c>)
 8016538:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801653a:	f002 fe93 	bl	8019264 <HW_IPCC_TRACES_Init>

  return;
 801653e:	bf00      	nop
}
 8016540:	bd80      	pop	{r7, pc}
 8016542:	bf00      	nop
 8016544:	200300b0 	.word	0x200300b0
 8016548:	20030000 	.word	0x20030000

0801654c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016552:	e008      	b.n	8016566 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016554:	1d3b      	adds	r3, r7, #4
 8016556:	4619      	mov	r1, r3
 8016558:	4808      	ldr	r0, [pc, #32]	; (801657c <HW_IPCC_TRACES_EvtNot+0x30>)
 801655a:	f7ff fd2e 	bl	8015fba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	4618      	mov	r0, r3
 8016562:	f7ea fe59 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016566:	4805      	ldr	r0, [pc, #20]	; (801657c <HW_IPCC_TRACES_EvtNot+0x30>)
 8016568:	f7ff fca0 	bl	8015eac <LST_is_empty>
 801656c:	4603      	mov	r3, r0
 801656e:	2b00      	cmp	r3, #0
 8016570:	d0f0      	beq.n	8016554 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016572:	bf00      	nop
}
 8016574:	3708      	adds	r7, #8
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop
 801657c:	200300b0 	.word	0x200300b0

08016580 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	460b      	mov	r3, r1
 801658a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801658c:	2300      	movs	r3, #0
 801658e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	7c1b      	ldrb	r3, [r3, #16]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d115      	bne.n	80165c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016598:	f44f 7300 	mov.w	r3, #512	; 0x200
 801659c:	2202      	movs	r2, #2
 801659e:	2181      	movs	r1, #129	; 0x81
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f003 fa37 	bl	8019a14 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2201      	movs	r2, #1
 80165aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80165ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80165b0:	2202      	movs	r2, #2
 80165b2:	2101      	movs	r1, #1
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f003 fa2d 	bl	8019a14 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2201      	movs	r2, #1
 80165be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80165c2:	e012      	b.n	80165ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80165c4:	2340      	movs	r3, #64	; 0x40
 80165c6:	2202      	movs	r2, #2
 80165c8:	2181      	movs	r1, #129	; 0x81
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f003 fa22 	bl	8019a14 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80165d6:	2340      	movs	r3, #64	; 0x40
 80165d8:	2202      	movs	r2, #2
 80165da:	2101      	movs	r1, #1
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f003 fa19 	bl	8019a14 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2201      	movs	r2, #1
 80165e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80165ea:	2308      	movs	r3, #8
 80165ec:	2203      	movs	r2, #3
 80165ee:	2182      	movs	r1, #130	; 0x82
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f003 fa0f 	bl	8019a14 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2201      	movs	r2, #1
 80165fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80165fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8016600:	f003 fb60 	bl	8019cc4 <USBD_static_malloc>
 8016604:	4602      	mov	r2, r0
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016612:	2b00      	cmp	r3, #0
 8016614:	d102      	bne.n	801661c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8016616:	2301      	movs	r3, #1
 8016618:	73fb      	strb	r3, [r7, #15]
 801661a:	e026      	b.n	801666a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016622:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	2200      	movs	r2, #0
 8016632:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8016636:	68bb      	ldr	r3, [r7, #8]
 8016638:	2200      	movs	r2, #0
 801663a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	7c1b      	ldrb	r3, [r3, #16]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d109      	bne.n	801665a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801664c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016650:	2101      	movs	r1, #1
 8016652:	6878      	ldr	r0, [r7, #4]
 8016654:	f003 fac9 	bl	8019bea <USBD_LL_PrepareReceive>
 8016658:	e007      	b.n	801666a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016660:	2340      	movs	r3, #64	; 0x40
 8016662:	2101      	movs	r1, #1
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f003 fac0 	bl	8019bea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801666a:	7bfb      	ldrb	r3, [r7, #15]
}
 801666c:	4618      	mov	r0, r3
 801666e:	3710      	adds	r7, #16
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}

08016674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	460b      	mov	r3, r1
 801667e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8016680:	2300      	movs	r3, #0
 8016682:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016684:	2181      	movs	r1, #129	; 0x81
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f003 f9ea 	bl	8019a60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2200      	movs	r2, #0
 8016690:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016692:	2101      	movs	r1, #1
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f003 f9e3 	bl	8019a60 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2200      	movs	r2, #0
 801669e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80166a2:	2182      	movs	r1, #130	; 0x82
 80166a4:	6878      	ldr	r0, [r7, #4]
 80166a6:	f003 f9db 	bl	8019a60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2200      	movs	r2, #0
 80166ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d00e      	beq.n	80166d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166ca:	4618      	mov	r0, r3
 80166cc:	f003 fb08 	bl	8019ce0 <USBD_static_free>
    pdev->pClassData = NULL;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2200      	movs	r2, #0
 80166d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80166d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3710      	adds	r7, #16
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80166e2:	b580      	push	{r7, lr}
 80166e4:	b086      	sub	sp, #24
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	6078      	str	r0, [r7, #4]
 80166ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80166f4:	2300      	movs	r3, #0
 80166f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80166f8:	2300      	movs	r3, #0
 80166fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80166fc:	2300      	movs	r3, #0
 80166fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	781b      	ldrb	r3, [r3, #0]
 8016704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016708:	2b00      	cmp	r3, #0
 801670a:	d039      	beq.n	8016780 <USBD_CDC_Setup+0x9e>
 801670c:	2b20      	cmp	r3, #32
 801670e:	d17c      	bne.n	801680a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	88db      	ldrh	r3, [r3, #6]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d029      	beq.n	801676c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8016718:	683b      	ldr	r3, [r7, #0]
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	b25b      	sxtb	r3, r3
 801671e:	2b00      	cmp	r3, #0
 8016720:	da11      	bge.n	8016746 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016728:	689b      	ldr	r3, [r3, #8]
 801672a:	683a      	ldr	r2, [r7, #0]
 801672c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801672e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016730:	683a      	ldr	r2, [r7, #0]
 8016732:	88d2      	ldrh	r2, [r2, #6]
 8016734:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8016736:	6939      	ldr	r1, [r7, #16]
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	88db      	ldrh	r3, [r3, #6]
 801673c:	461a      	mov	r2, r3
 801673e:	6878      	ldr	r0, [r7, #4]
 8016740:	f001 fa10 	bl	8017b64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8016744:	e068      	b.n	8016818 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	785a      	ldrb	r2, [r3, #1]
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	88db      	ldrh	r3, [r3, #6]
 8016754:	b2da      	uxtb	r2, r3
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801675c:	6939      	ldr	r1, [r7, #16]
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	88db      	ldrh	r3, [r3, #6]
 8016762:	461a      	mov	r2, r3
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f001 fa2b 	bl	8017bc0 <USBD_CtlPrepareRx>
      break;
 801676a:	e055      	b.n	8016818 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016772:	689b      	ldr	r3, [r3, #8]
 8016774:	683a      	ldr	r2, [r7, #0]
 8016776:	7850      	ldrb	r0, [r2, #1]
 8016778:	2200      	movs	r2, #0
 801677a:	6839      	ldr	r1, [r7, #0]
 801677c:	4798      	blx	r3
      break;
 801677e:	e04b      	b.n	8016818 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	785b      	ldrb	r3, [r3, #1]
 8016784:	2b0a      	cmp	r3, #10
 8016786:	d017      	beq.n	80167b8 <USBD_CDC_Setup+0xd6>
 8016788:	2b0b      	cmp	r3, #11
 801678a:	d029      	beq.n	80167e0 <USBD_CDC_Setup+0xfe>
 801678c:	2b00      	cmp	r3, #0
 801678e:	d133      	bne.n	80167f8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016796:	2b03      	cmp	r3, #3
 8016798:	d107      	bne.n	80167aa <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801679a:	f107 030c 	add.w	r3, r7, #12
 801679e:	2202      	movs	r2, #2
 80167a0:	4619      	mov	r1, r3
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	f001 f9de 	bl	8017b64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80167a8:	e02e      	b.n	8016808 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80167aa:	6839      	ldr	r1, [r7, #0]
 80167ac:	6878      	ldr	r0, [r7, #4]
 80167ae:	f001 f96e 	bl	8017a8e <USBD_CtlError>
            ret = USBD_FAIL;
 80167b2:	2302      	movs	r3, #2
 80167b4:	75fb      	strb	r3, [r7, #23]
          break;
 80167b6:	e027      	b.n	8016808 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167be:	2b03      	cmp	r3, #3
 80167c0:	d107      	bne.n	80167d2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80167c2:	f107 030f 	add.w	r3, r7, #15
 80167c6:	2201      	movs	r2, #1
 80167c8:	4619      	mov	r1, r3
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	f001 f9ca 	bl	8017b64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80167d0:	e01a      	b.n	8016808 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80167d2:	6839      	ldr	r1, [r7, #0]
 80167d4:	6878      	ldr	r0, [r7, #4]
 80167d6:	f001 f95a 	bl	8017a8e <USBD_CtlError>
            ret = USBD_FAIL;
 80167da:	2302      	movs	r3, #2
 80167dc:	75fb      	strb	r3, [r7, #23]
          break;
 80167de:	e013      	b.n	8016808 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167e6:	2b03      	cmp	r3, #3
 80167e8:	d00d      	beq.n	8016806 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80167ea:	6839      	ldr	r1, [r7, #0]
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f001 f94e 	bl	8017a8e <USBD_CtlError>
            ret = USBD_FAIL;
 80167f2:	2302      	movs	r3, #2
 80167f4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80167f6:	e006      	b.n	8016806 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80167f8:	6839      	ldr	r1, [r7, #0]
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f001 f947 	bl	8017a8e <USBD_CtlError>
          ret = USBD_FAIL;
 8016800:	2302      	movs	r3, #2
 8016802:	75fb      	strb	r3, [r7, #23]
          break;
 8016804:	e000      	b.n	8016808 <USBD_CDC_Setup+0x126>
          break;
 8016806:	bf00      	nop
      }
      break;
 8016808:	e006      	b.n	8016818 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 801680a:	6839      	ldr	r1, [r7, #0]
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f001 f93e 	bl	8017a8e <USBD_CtlError>
      ret = USBD_FAIL;
 8016812:	2302      	movs	r3, #2
 8016814:	75fb      	strb	r3, [r7, #23]
      break;
 8016816:	bf00      	nop
  }

  return ret;
 8016818:	7dfb      	ldrb	r3, [r7, #23]
}
 801681a:	4618      	mov	r0, r3
 801681c:	3718      	adds	r7, #24
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016822:	b580      	push	{r7, lr}
 8016824:	b084      	sub	sp, #16
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
 801682a:	460b      	mov	r3, r1
 801682c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016834:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801683c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016844:	2b00      	cmp	r3, #0
 8016846:	d037      	beq.n	80168b8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016848:	78fa      	ldrb	r2, [r7, #3]
 801684a:	6879      	ldr	r1, [r7, #4]
 801684c:	4613      	mov	r3, r2
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	4413      	add	r3, r2
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	440b      	add	r3, r1
 8016856:	331c      	adds	r3, #28
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d026      	beq.n	80168ac <USBD_CDC_DataIn+0x8a>
 801685e:	78fa      	ldrb	r2, [r7, #3]
 8016860:	6879      	ldr	r1, [r7, #4]
 8016862:	4613      	mov	r3, r2
 8016864:	009b      	lsls	r3, r3, #2
 8016866:	4413      	add	r3, r2
 8016868:	009b      	lsls	r3, r3, #2
 801686a:	440b      	add	r3, r1
 801686c:	331c      	adds	r3, #28
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	78fa      	ldrb	r2, [r7, #3]
 8016872:	68b9      	ldr	r1, [r7, #8]
 8016874:	0152      	lsls	r2, r2, #5
 8016876:	440a      	add	r2, r1
 8016878:	3238      	adds	r2, #56	; 0x38
 801687a:	6812      	ldr	r2, [r2, #0]
 801687c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016880:	fb02 f201 	mul.w	r2, r2, r1
 8016884:	1a9b      	subs	r3, r3, r2
 8016886:	2b00      	cmp	r3, #0
 8016888:	d110      	bne.n	80168ac <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801688a:	78fa      	ldrb	r2, [r7, #3]
 801688c:	6879      	ldr	r1, [r7, #4]
 801688e:	4613      	mov	r3, r2
 8016890:	009b      	lsls	r3, r3, #2
 8016892:	4413      	add	r3, r2
 8016894:	009b      	lsls	r3, r3, #2
 8016896:	440b      	add	r3, r1
 8016898:	331c      	adds	r3, #28
 801689a:	2200      	movs	r2, #0
 801689c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801689e:	78f9      	ldrb	r1, [r7, #3]
 80168a0:	2300      	movs	r3, #0
 80168a2:	2200      	movs	r2, #0
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f003 f97d 	bl	8019ba4 <USBD_LL_Transmit>
 80168aa:	e003      	b.n	80168b4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	2200      	movs	r2, #0
 80168b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80168b4:	2300      	movs	r3, #0
 80168b6:	e000      	b.n	80168ba <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80168b8:	2302      	movs	r3, #2
  }
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b084      	sub	sp, #16
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
 80168ca:	460b      	mov	r3, r1
 80168cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80168d6:	78fb      	ldrb	r3, [r7, #3]
 80168d8:	4619      	mov	r1, r3
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f003 f9a8 	bl	8019c30 <USBD_LL_GetRxDataSize>
 80168e0:	4602      	mov	r2, r0
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d00d      	beq.n	801690e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168f8:	68db      	ldr	r3, [r3, #12]
 80168fa:	68fa      	ldr	r2, [r7, #12]
 80168fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016900:	68fa      	ldr	r2, [r7, #12]
 8016902:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016906:	4611      	mov	r1, r2
 8016908:	4798      	blx	r3

    return USBD_OK;
 801690a:	2300      	movs	r3, #0
 801690c:	e000      	b.n	8016910 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801690e:	2302      	movs	r3, #2
  }
}
 8016910:	4618      	mov	r0, r3
 8016912:	3710      	adds	r7, #16
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b084      	sub	sp, #16
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016926:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801692e:	2b00      	cmp	r3, #0
 8016930:	d015      	beq.n	801695e <USBD_CDC_EP0_RxReady+0x46>
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016938:	2bff      	cmp	r3, #255	; 0xff
 801693a:	d010      	beq.n	801695e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016942:	689b      	ldr	r3, [r3, #8]
 8016944:	68fa      	ldr	r2, [r7, #12]
 8016946:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801694a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801694c:	68fa      	ldr	r2, [r7, #12]
 801694e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016952:	b292      	uxth	r2, r2
 8016954:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	22ff      	movs	r2, #255	; 0xff
 801695a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801695e:	2300      	movs	r3, #0
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016968:	b480      	push	{r7}
 801696a:	b083      	sub	sp, #12
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2243      	movs	r2, #67	; 0x43
 8016974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8016976:	4b03      	ldr	r3, [pc, #12]	; (8016984 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016978:	4618      	mov	r0, r3
 801697a:	370c      	adds	r7, #12
 801697c:	46bd      	mov	sp, r7
 801697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016982:	4770      	bx	lr
 8016984:	20000110 	.word	0x20000110

08016988 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016988:	b480      	push	{r7}
 801698a:	b083      	sub	sp, #12
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2243      	movs	r2, #67	; 0x43
 8016994:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8016996:	4b03      	ldr	r3, [pc, #12]	; (80169a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016998:	4618      	mov	r0, r3
 801699a:	370c      	adds	r7, #12
 801699c:	46bd      	mov	sp, r7
 801699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a2:	4770      	bx	lr
 80169a4:	200000cc 	.word	0x200000cc

080169a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80169a8:	b480      	push	{r7}
 80169aa:	b083      	sub	sp, #12
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2243      	movs	r2, #67	; 0x43
 80169b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80169b6:	4b03      	ldr	r3, [pc, #12]	; (80169c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	370c      	adds	r7, #12
 80169bc:	46bd      	mov	sp, r7
 80169be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c2:	4770      	bx	lr
 80169c4:	20000154 	.word	0x20000154

080169c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80169c8:	b480      	push	{r7}
 80169ca:	b083      	sub	sp, #12
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	220a      	movs	r2, #10
 80169d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80169d6:	4b03      	ldr	r3, [pc, #12]	; (80169e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80169d8:	4618      	mov	r0, r3
 80169da:	370c      	adds	r7, #12
 80169dc:	46bd      	mov	sp, r7
 80169de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e2:	4770      	bx	lr
 80169e4:	20000088 	.word	0x20000088

080169e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80169e8:	b480      	push	{r7}
 80169ea:	b085      	sub	sp, #20
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80169f2:	2302      	movs	r3, #2
 80169f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d005      	beq.n	8016a08 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	683a      	ldr	r2, [r7, #0]
 8016a00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8016a04:	2300      	movs	r3, #0
 8016a06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3714      	adds	r7, #20
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a14:	4770      	bx	lr

08016a16 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8016a16:	b480      	push	{r7}
 8016a18:	b087      	sub	sp, #28
 8016a1a:	af00      	add	r7, sp, #0
 8016a1c:	60f8      	str	r0, [r7, #12]
 8016a1e:	60b9      	str	r1, [r7, #8]
 8016a20:	4613      	mov	r3, r2
 8016a22:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a2a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	68ba      	ldr	r2, [r7, #8]
 8016a30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016a34:	88fa      	ldrh	r2, [r7, #6]
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8016a3c:	2300      	movs	r3, #0
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	371c      	adds	r7, #28
 8016a42:	46bd      	mov	sp, r7
 8016a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a48:	4770      	bx	lr

08016a4a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8016a4a:	b480      	push	{r7}
 8016a4c:	b085      	sub	sp, #20
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
 8016a52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a5a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	683a      	ldr	r2, [r7, #0]
 8016a60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8016a64:	2300      	movs	r3, #0
}
 8016a66:	4618      	mov	r0, r3
 8016a68:	3714      	adds	r7, #20
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a70:	4770      	bx	lr

08016a72 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b084      	sub	sp, #16
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a80:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d017      	beq.n	8016abc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	7c1b      	ldrb	r3, [r3, #16]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d109      	bne.n	8016aa8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016a9e:	2101      	movs	r1, #1
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f003 f8a2 	bl	8019bea <USBD_LL_PrepareReceive>
 8016aa6:	e007      	b.n	8016ab8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016aae:	2340      	movs	r3, #64	; 0x40
 8016ab0:	2101      	movs	r1, #1
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f003 f899 	bl	8019bea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	e000      	b.n	8016abe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8016abc:	2302      	movs	r3, #2
  }
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3710      	adds	r7, #16
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b084      	sub	sp, #16
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	60f8      	str	r0, [r7, #12]
 8016ace:	60b9      	str	r1, [r7, #8]
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d101      	bne.n	8016ade <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016ada:	2302      	movs	r3, #2
 8016adc:	e01a      	b.n	8016b14 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d003      	beq.n	8016af0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2200      	movs	r2, #0
 8016aec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016af0:	68bb      	ldr	r3, [r7, #8]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d003      	beq.n	8016afe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	68ba      	ldr	r2, [r7, #8]
 8016afa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	2201      	movs	r2, #1
 8016b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	79fa      	ldrb	r2, [r7, #7]
 8016b0a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8016b0c:	68f8      	ldr	r0, [r7, #12]
 8016b0e:	f002 fee9 	bl	80198e4 <USBD_LL_Init>

  return USBD_OK;
 8016b12:	2300      	movs	r3, #0
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3710      	adds	r7, #16
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016b1c:	b480      	push	{r7}
 8016b1e:	b085      	sub	sp, #20
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8016b26:	2300      	movs	r3, #0
 8016b28:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d006      	beq.n	8016b3e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	683a      	ldr	r2, [r7, #0]
 8016b34:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	73fb      	strb	r3, [r7, #15]
 8016b3c:	e001      	b.n	8016b42 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8016b3e:	2302      	movs	r3, #2
 8016b40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	3714      	adds	r7, #20
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4e:	4770      	bx	lr

08016b50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f002 ff25 	bl	80199a8 <USBD_LL_Start>

  return USBD_OK;
 8016b5e:	2300      	movs	r3, #0
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3708      	adds	r7, #8
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b082      	sub	sp, #8
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	687a      	ldr	r2, [r7, #4]
 8016b7a:	6852      	ldr	r2, [r2, #4]
 8016b7c:	b2d2      	uxtb	r2, r2
 8016b7e:	4611      	mov	r1, r2
 8016b80:	6878      	ldr	r0, [r7, #4]
 8016b82:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f002 ff2a 	bl	80199de <USBD_LL_Stop>

  return USBD_OK;
 8016b8a:	2300      	movs	r3, #0
}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3708      	adds	r7, #8
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}

08016b94 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016b94:	b480      	push	{r7}
 8016b96:	b083      	sub	sp, #12
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b9c:	2300      	movs	r3, #0
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	370c      	adds	r7, #12
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr

08016baa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016baa:	b580      	push	{r7, lr}
 8016bac:	b084      	sub	sp, #16
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016bb6:	2302      	movs	r3, #2
 8016bb8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d00c      	beq.n	8016bde <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	78fa      	ldrb	r2, [r7, #3]
 8016bce:	4611      	mov	r1, r2
 8016bd0:	6878      	ldr	r0, [r7, #4]
 8016bd2:	4798      	blx	r3
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d101      	bne.n	8016bde <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8016bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3710      	adds	r7, #16
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}

08016be8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
 8016bf0:	460b      	mov	r3, r1
 8016bf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	78fa      	ldrb	r2, [r7, #3]
 8016bfe:	4611      	mov	r1, r2
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	4798      	blx	r3

  return USBD_OK;
 8016c04:	2300      	movs	r3, #0
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b082      	sub	sp, #8
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c1e:	6839      	ldr	r1, [r7, #0]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f000 fef7 	bl	8017a14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2201      	movs	r2, #1
 8016c2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016c34:	461a      	mov	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8016c42:	f003 031f 	and.w	r3, r3, #31
 8016c46:	2b01      	cmp	r3, #1
 8016c48:	d00c      	beq.n	8016c64 <USBD_LL_SetupStage+0x56>
 8016c4a:	2b01      	cmp	r3, #1
 8016c4c:	d302      	bcc.n	8016c54 <USBD_LL_SetupStage+0x46>
 8016c4e:	2b02      	cmp	r3, #2
 8016c50:	d010      	beq.n	8016c74 <USBD_LL_SetupStage+0x66>
 8016c52:	e017      	b.n	8016c84 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c5a:	4619      	mov	r1, r3
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f000 f9cd 	bl	8016ffc <USBD_StdDevReq>
      break;
 8016c62:	e01a      	b.n	8016c9a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f000 fa2f 	bl	80170d0 <USBD_StdItfReq>
      break;
 8016c72:	e012      	b.n	8016c9a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f000 fa6d 	bl	801715c <USBD_StdEPReq>
      break;
 8016c82:	e00a      	b.n	8016c9a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8016c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016c8e:	b2db      	uxtb	r3, r3
 8016c90:	4619      	mov	r1, r3
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f002 ff03 	bl	8019a9e <USBD_LL_StallEP>
      break;
 8016c98:	bf00      	nop
  }

  return USBD_OK;
 8016c9a:	2300      	movs	r3, #0
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3708      	adds	r7, #8
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b086      	sub	sp, #24
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	460b      	mov	r3, r1
 8016cae:	607a      	str	r2, [r7, #4]
 8016cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016cb2:	7afb      	ldrb	r3, [r7, #11]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d14b      	bne.n	8016d50 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016cbe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016cc6:	2b03      	cmp	r3, #3
 8016cc8:	d134      	bne.n	8016d34 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	68da      	ldr	r2, [r3, #12]
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	691b      	ldr	r3, [r3, #16]
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d919      	bls.n	8016d0a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	68da      	ldr	r2, [r3, #12]
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	691b      	ldr	r3, [r3, #16]
 8016cde:	1ad2      	subs	r2, r2, r3
 8016ce0:	697b      	ldr	r3, [r7, #20]
 8016ce2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	68da      	ldr	r2, [r3, #12]
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d203      	bcs.n	8016cf8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8016cf4:	b29b      	uxth	r3, r3
 8016cf6:	e002      	b.n	8016cfe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016cfc:	b29b      	uxth	r3, r3
 8016cfe:	461a      	mov	r2, r3
 8016d00:	6879      	ldr	r1, [r7, #4]
 8016d02:	68f8      	ldr	r0, [r7, #12]
 8016d04:	f000 ff7a 	bl	8017bfc <USBD_CtlContinueRx>
 8016d08:	e038      	b.n	8016d7c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d10:	691b      	ldr	r3, [r3, #16]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d00a      	beq.n	8016d2c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016d1c:	2b03      	cmp	r3, #3
 8016d1e:	d105      	bne.n	8016d2c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d26:	691b      	ldr	r3, [r3, #16]
 8016d28:	68f8      	ldr	r0, [r7, #12]
 8016d2a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	f000 ff77 	bl	8017c20 <USBD_CtlSendStatus>
 8016d32:	e023      	b.n	8016d7c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016d3a:	2b05      	cmp	r3, #5
 8016d3c:	d11e      	bne.n	8016d7c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	2200      	movs	r2, #0
 8016d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8016d46:	2100      	movs	r1, #0
 8016d48:	68f8      	ldr	r0, [r7, #12]
 8016d4a:	f002 fea8 	bl	8019a9e <USBD_LL_StallEP>
 8016d4e:	e015      	b.n	8016d7c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d56:	699b      	ldr	r3, [r3, #24]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d00d      	beq.n	8016d78 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8016d62:	2b03      	cmp	r3, #3
 8016d64:	d108      	bne.n	8016d78 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d6c:	699b      	ldr	r3, [r3, #24]
 8016d6e:	7afa      	ldrb	r2, [r7, #11]
 8016d70:	4611      	mov	r1, r2
 8016d72:	68f8      	ldr	r0, [r7, #12]
 8016d74:	4798      	blx	r3
 8016d76:	e001      	b.n	8016d7c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016d78:	2302      	movs	r3, #2
 8016d7a:	e000      	b.n	8016d7e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8016d7c:	2300      	movs	r3, #0
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3718      	adds	r7, #24
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}

08016d86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016d86:	b580      	push	{r7, lr}
 8016d88:	b086      	sub	sp, #24
 8016d8a:	af00      	add	r7, sp, #0
 8016d8c:	60f8      	str	r0, [r7, #12]
 8016d8e:	460b      	mov	r3, r1
 8016d90:	607a      	str	r2, [r7, #4]
 8016d92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016d94:	7afb      	ldrb	r3, [r7, #11]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d17f      	bne.n	8016e9a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	3314      	adds	r3, #20
 8016d9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016da6:	2b02      	cmp	r3, #2
 8016da8:	d15c      	bne.n	8016e64 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	68da      	ldr	r2, [r3, #12]
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	691b      	ldr	r3, [r3, #16]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d915      	bls.n	8016de2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	68da      	ldr	r2, [r3, #12]
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	691b      	ldr	r3, [r3, #16]
 8016dbe:	1ad2      	subs	r2, r2, r3
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	68db      	ldr	r3, [r3, #12]
 8016dc8:	b29b      	uxth	r3, r3
 8016dca:	461a      	mov	r2, r3
 8016dcc:	6879      	ldr	r1, [r7, #4]
 8016dce:	68f8      	ldr	r0, [r7, #12]
 8016dd0:	f000 fee4 	bl	8017b9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	2100      	movs	r1, #0
 8016dda:	68f8      	ldr	r0, [r7, #12]
 8016ddc:	f002 ff05 	bl	8019bea <USBD_LL_PrepareReceive>
 8016de0:	e04e      	b.n	8016e80 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	689b      	ldr	r3, [r3, #8]
 8016de6:	697a      	ldr	r2, [r7, #20]
 8016de8:	6912      	ldr	r2, [r2, #16]
 8016dea:	fbb3 f1f2 	udiv	r1, r3, r2
 8016dee:	fb02 f201 	mul.w	r2, r2, r1
 8016df2:	1a9b      	subs	r3, r3, r2
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d11c      	bne.n	8016e32 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	689a      	ldr	r2, [r3, #8]
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d316      	bcc.n	8016e32 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	689a      	ldr	r2, [r3, #8]
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	d20f      	bcs.n	8016e32 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016e12:	2200      	movs	r2, #0
 8016e14:	2100      	movs	r1, #0
 8016e16:	68f8      	ldr	r0, [r7, #12]
 8016e18:	f000 fec0 	bl	8017b9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e24:	2300      	movs	r3, #0
 8016e26:	2200      	movs	r2, #0
 8016e28:	2100      	movs	r1, #0
 8016e2a:	68f8      	ldr	r0, [r7, #12]
 8016e2c:	f002 fedd 	bl	8019bea <USBD_LL_PrepareReceive>
 8016e30:	e026      	b.n	8016e80 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d00a      	beq.n	8016e54 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016e44:	2b03      	cmp	r3, #3
 8016e46:	d105      	bne.n	8016e54 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e4e:	68db      	ldr	r3, [r3, #12]
 8016e50:	68f8      	ldr	r0, [r7, #12]
 8016e52:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8016e54:	2180      	movs	r1, #128	; 0x80
 8016e56:	68f8      	ldr	r0, [r7, #12]
 8016e58:	f002 fe21 	bl	8019a9e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	f000 fef2 	bl	8017c46 <USBD_CtlReceiveStatus>
 8016e62:	e00d      	b.n	8016e80 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016e6a:	2b04      	cmp	r3, #4
 8016e6c:	d004      	beq.n	8016e78 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d103      	bne.n	8016e80 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8016e78:	2180      	movs	r1, #128	; 0x80
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	f002 fe0f 	bl	8019a9e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016e86:	2b01      	cmp	r3, #1
 8016e88:	d11d      	bne.n	8016ec6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8016e8a:	68f8      	ldr	r0, [r7, #12]
 8016e8c:	f7ff fe82 	bl	8016b94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	2200      	movs	r2, #0
 8016e94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016e98:	e015      	b.n	8016ec6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ea0:	695b      	ldr	r3, [r3, #20]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00d      	beq.n	8016ec2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8016eac:	2b03      	cmp	r3, #3
 8016eae:	d108      	bne.n	8016ec2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016eb6:	695b      	ldr	r3, [r3, #20]
 8016eb8:	7afa      	ldrb	r2, [r7, #11]
 8016eba:	4611      	mov	r1, r2
 8016ebc:	68f8      	ldr	r0, [r7, #12]
 8016ebe:	4798      	blx	r3
 8016ec0:	e001      	b.n	8016ec6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016ec2:	2302      	movs	r3, #2
 8016ec4:	e000      	b.n	8016ec8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8016ec6:	2300      	movs	r3, #0
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3718      	adds	r7, #24
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016ed8:	2340      	movs	r3, #64	; 0x40
 8016eda:	2200      	movs	r2, #0
 8016edc:	2100      	movs	r1, #0
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f002 fd98 	bl	8019a14 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2201      	movs	r2, #1
 8016ee8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2240      	movs	r2, #64	; 0x40
 8016ef0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016ef4:	2340      	movs	r3, #64	; 0x40
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	2180      	movs	r1, #128	; 0x80
 8016efa:	6878      	ldr	r0, [r7, #4]
 8016efc:	f002 fd8a 	bl	8019a14 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	2201      	movs	r2, #1
 8016f04:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2240      	movs	r2, #64	; 0x40
 8016f0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2201      	movs	r2, #1
 8016f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2200      	movs	r2, #0
 8016f18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	2200      	movs	r2, #0
 8016f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d009      	beq.n	8016f48 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	6852      	ldr	r2, [r2, #4]
 8016f40:	b2d2      	uxtb	r2, r2
 8016f42:	4611      	mov	r1, r2
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	4798      	blx	r3
  }

  return USBD_OK;
 8016f48:	2300      	movs	r3, #0
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3708      	adds	r7, #8
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016f52:	b480      	push	{r7}
 8016f54:	b083      	sub	sp, #12
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	6078      	str	r0, [r7, #4]
 8016f5a:	460b      	mov	r3, r1
 8016f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	78fa      	ldrb	r2, [r7, #3]
 8016f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016f64:	2300      	movs	r3, #0
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	370c      	adds	r7, #12
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f70:	4770      	bx	lr

08016f72 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016f72:	b480      	push	{r7}
 8016f74:	b083      	sub	sp, #12
 8016f76:	af00      	add	r7, sp, #0
 8016f78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2204      	movs	r2, #4
 8016f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016f8e:	2300      	movs	r3, #0
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	370c      	adds	r7, #12
 8016f94:	46bd      	mov	sp, r7
 8016f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9a:	4770      	bx	lr

08016f9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016f9c:	b480      	push	{r7}
 8016f9e:	b083      	sub	sp, #12
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016faa:	2b04      	cmp	r3, #4
 8016fac:	d105      	bne.n	8016fba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016fba:	2300      	movs	r3, #0
}
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	370c      	adds	r7, #12
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc6:	4770      	bx	lr

08016fc8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fd6:	2b03      	cmp	r3, #3
 8016fd8:	d10b      	bne.n	8016ff2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fe0:	69db      	ldr	r3, [r3, #28]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d005      	beq.n	8016ff2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fec:	69db      	ldr	r3, [r3, #28]
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016ff2:	2300      	movs	r3, #0
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3708      	adds	r7, #8
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017006:	2300      	movs	r3, #0
 8017008:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017012:	2b20      	cmp	r3, #32
 8017014:	d004      	beq.n	8017020 <USBD_StdDevReq+0x24>
 8017016:	2b40      	cmp	r3, #64	; 0x40
 8017018:	d002      	beq.n	8017020 <USBD_StdDevReq+0x24>
 801701a:	2b00      	cmp	r3, #0
 801701c:	d008      	beq.n	8017030 <USBD_StdDevReq+0x34>
 801701e:	e04c      	b.n	80170ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017026:	689b      	ldr	r3, [r3, #8]
 8017028:	6839      	ldr	r1, [r7, #0]
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	4798      	blx	r3
      break;
 801702e:	e049      	b.n	80170c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	785b      	ldrb	r3, [r3, #1]
 8017034:	2b09      	cmp	r3, #9
 8017036:	d83a      	bhi.n	80170ae <USBD_StdDevReq+0xb2>
 8017038:	a201      	add	r2, pc, #4	; (adr r2, 8017040 <USBD_StdDevReq+0x44>)
 801703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801703e:	bf00      	nop
 8017040:	08017091 	.word	0x08017091
 8017044:	080170a5 	.word	0x080170a5
 8017048:	080170af 	.word	0x080170af
 801704c:	0801709b 	.word	0x0801709b
 8017050:	080170af 	.word	0x080170af
 8017054:	08017073 	.word	0x08017073
 8017058:	08017069 	.word	0x08017069
 801705c:	080170af 	.word	0x080170af
 8017060:	08017087 	.word	0x08017087
 8017064:	0801707d 	.word	0x0801707d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017068:	6839      	ldr	r1, [r7, #0]
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f000 f9d4 	bl	8017418 <USBD_GetDescriptor>
          break;
 8017070:	e022      	b.n	80170b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017072:	6839      	ldr	r1, [r7, #0]
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f000 fb61 	bl	801773c <USBD_SetAddress>
          break;
 801707a:	e01d      	b.n	80170b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801707c:	6839      	ldr	r1, [r7, #0]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 fb9e 	bl	80177c0 <USBD_SetConfig>
          break;
 8017084:	e018      	b.n	80170b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017086:	6839      	ldr	r1, [r7, #0]
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f000 fc27 	bl	80178dc <USBD_GetConfig>
          break;
 801708e:	e013      	b.n	80170b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017090:	6839      	ldr	r1, [r7, #0]
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f000 fc56 	bl	8017944 <USBD_GetStatus>
          break;
 8017098:	e00e      	b.n	80170b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801709a:	6839      	ldr	r1, [r7, #0]
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f000 fc84 	bl	80179aa <USBD_SetFeature>
          break;
 80170a2:	e009      	b.n	80170b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80170a4:	6839      	ldr	r1, [r7, #0]
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f000 fc93 	bl	80179d2 <USBD_ClrFeature>
          break;
 80170ac:	e004      	b.n	80170b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80170ae:	6839      	ldr	r1, [r7, #0]
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f000 fcec 	bl	8017a8e <USBD_CtlError>
          break;
 80170b6:	bf00      	nop
      }
      break;
 80170b8:	e004      	b.n	80170c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80170ba:	6839      	ldr	r1, [r7, #0]
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f000 fce6 	bl	8017a8e <USBD_CtlError>
      break;
 80170c2:	bf00      	nop
  }

  return ret;
 80170c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3710      	adds	r7, #16
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop

080170d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80170da:	2300      	movs	r3, #0
 80170dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	781b      	ldrb	r3, [r3, #0]
 80170e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80170e6:	2b20      	cmp	r3, #32
 80170e8:	d003      	beq.n	80170f2 <USBD_StdItfReq+0x22>
 80170ea:	2b40      	cmp	r3, #64	; 0x40
 80170ec:	d001      	beq.n	80170f2 <USBD_StdItfReq+0x22>
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d12a      	bne.n	8017148 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170f8:	3b01      	subs	r3, #1
 80170fa:	2b02      	cmp	r3, #2
 80170fc:	d81d      	bhi.n	801713a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	889b      	ldrh	r3, [r3, #4]
 8017102:	b2db      	uxtb	r3, r3
 8017104:	2b01      	cmp	r3, #1
 8017106:	d813      	bhi.n	8017130 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801710e:	689b      	ldr	r3, [r3, #8]
 8017110:	6839      	ldr	r1, [r7, #0]
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	4798      	blx	r3
 8017116:	4603      	mov	r3, r0
 8017118:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	88db      	ldrh	r3, [r3, #6]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d110      	bne.n	8017144 <USBD_StdItfReq+0x74>
 8017122:	7bfb      	ldrb	r3, [r7, #15]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d10d      	bne.n	8017144 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f000 fd79 	bl	8017c20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801712e:	e009      	b.n	8017144 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8017130:	6839      	ldr	r1, [r7, #0]
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f000 fcab 	bl	8017a8e <USBD_CtlError>
          break;
 8017138:	e004      	b.n	8017144 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801713a:	6839      	ldr	r1, [r7, #0]
 801713c:	6878      	ldr	r0, [r7, #4]
 801713e:	f000 fca6 	bl	8017a8e <USBD_CtlError>
          break;
 8017142:	e000      	b.n	8017146 <USBD_StdItfReq+0x76>
          break;
 8017144:	bf00      	nop
      }
      break;
 8017146:	e004      	b.n	8017152 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8017148:	6839      	ldr	r1, [r7, #0]
 801714a:	6878      	ldr	r0, [r7, #4]
 801714c:	f000 fc9f 	bl	8017a8e <USBD_CtlError>
      break;
 8017150:	bf00      	nop
  }

  return USBD_OK;
 8017152:	2300      	movs	r3, #0
}
 8017154:	4618      	mov	r0, r3
 8017156:	3710      	adds	r7, #16
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}

0801715c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017166:	2300      	movs	r3, #0
 8017168:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	889b      	ldrh	r3, [r3, #4]
 801716e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017178:	2b20      	cmp	r3, #32
 801717a:	d004      	beq.n	8017186 <USBD_StdEPReq+0x2a>
 801717c:	2b40      	cmp	r3, #64	; 0x40
 801717e:	d002      	beq.n	8017186 <USBD_StdEPReq+0x2a>
 8017180:	2b00      	cmp	r3, #0
 8017182:	d008      	beq.n	8017196 <USBD_StdEPReq+0x3a>
 8017184:	e13d      	b.n	8017402 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801718c:	689b      	ldr	r3, [r3, #8]
 801718e:	6839      	ldr	r1, [r7, #0]
 8017190:	6878      	ldr	r0, [r7, #4]
 8017192:	4798      	blx	r3
      break;
 8017194:	e13a      	b.n	801740c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801719e:	2b20      	cmp	r3, #32
 80171a0:	d10a      	bne.n	80171b8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171a8:	689b      	ldr	r3, [r3, #8]
 80171aa:	6839      	ldr	r1, [r7, #0]
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	4798      	blx	r3
 80171b0:	4603      	mov	r3, r0
 80171b2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80171b4:	7bfb      	ldrb	r3, [r7, #15]
 80171b6:	e12a      	b.n	801740e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	785b      	ldrb	r3, [r3, #1]
 80171bc:	2b01      	cmp	r3, #1
 80171be:	d03e      	beq.n	801723e <USBD_StdEPReq+0xe2>
 80171c0:	2b03      	cmp	r3, #3
 80171c2:	d002      	beq.n	80171ca <USBD_StdEPReq+0x6e>
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d070      	beq.n	80172aa <USBD_StdEPReq+0x14e>
 80171c8:	e115      	b.n	80173f6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171d0:	2b02      	cmp	r3, #2
 80171d2:	d002      	beq.n	80171da <USBD_StdEPReq+0x7e>
 80171d4:	2b03      	cmp	r3, #3
 80171d6:	d015      	beq.n	8017204 <USBD_StdEPReq+0xa8>
 80171d8:	e02b      	b.n	8017232 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80171da:	7bbb      	ldrb	r3, [r7, #14]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d00c      	beq.n	80171fa <USBD_StdEPReq+0x9e>
 80171e0:	7bbb      	ldrb	r3, [r7, #14]
 80171e2:	2b80      	cmp	r3, #128	; 0x80
 80171e4:	d009      	beq.n	80171fa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80171e6:	7bbb      	ldrb	r3, [r7, #14]
 80171e8:	4619      	mov	r1, r3
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f002 fc57 	bl	8019a9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80171f0:	2180      	movs	r1, #128	; 0x80
 80171f2:	6878      	ldr	r0, [r7, #4]
 80171f4:	f002 fc53 	bl	8019a9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80171f8:	e020      	b.n	801723c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80171fa:	6839      	ldr	r1, [r7, #0]
 80171fc:	6878      	ldr	r0, [r7, #4]
 80171fe:	f000 fc46 	bl	8017a8e <USBD_CtlError>
              break;
 8017202:	e01b      	b.n	801723c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	885b      	ldrh	r3, [r3, #2]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d10e      	bne.n	801722a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801720c:	7bbb      	ldrb	r3, [r7, #14]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d00b      	beq.n	801722a <USBD_StdEPReq+0xce>
 8017212:	7bbb      	ldrb	r3, [r7, #14]
 8017214:	2b80      	cmp	r3, #128	; 0x80
 8017216:	d008      	beq.n	801722a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	88db      	ldrh	r3, [r3, #6]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d104      	bne.n	801722a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8017220:	7bbb      	ldrb	r3, [r7, #14]
 8017222:	4619      	mov	r1, r3
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f002 fc3a 	bl	8019a9e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f000 fcf8 	bl	8017c20 <USBD_CtlSendStatus>

              break;
 8017230:	e004      	b.n	801723c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8017232:	6839      	ldr	r1, [r7, #0]
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f000 fc2a 	bl	8017a8e <USBD_CtlError>
              break;
 801723a:	bf00      	nop
          }
          break;
 801723c:	e0e0      	b.n	8017400 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017244:	2b02      	cmp	r3, #2
 8017246:	d002      	beq.n	801724e <USBD_StdEPReq+0xf2>
 8017248:	2b03      	cmp	r3, #3
 801724a:	d015      	beq.n	8017278 <USBD_StdEPReq+0x11c>
 801724c:	e026      	b.n	801729c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801724e:	7bbb      	ldrb	r3, [r7, #14]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d00c      	beq.n	801726e <USBD_StdEPReq+0x112>
 8017254:	7bbb      	ldrb	r3, [r7, #14]
 8017256:	2b80      	cmp	r3, #128	; 0x80
 8017258:	d009      	beq.n	801726e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801725a:	7bbb      	ldrb	r3, [r7, #14]
 801725c:	4619      	mov	r1, r3
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f002 fc1d 	bl	8019a9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017264:	2180      	movs	r1, #128	; 0x80
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f002 fc19 	bl	8019a9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801726c:	e01c      	b.n	80172a8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801726e:	6839      	ldr	r1, [r7, #0]
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f000 fc0c 	bl	8017a8e <USBD_CtlError>
              break;
 8017276:	e017      	b.n	80172a8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	885b      	ldrh	r3, [r3, #2]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d112      	bne.n	80172a6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017280:	7bbb      	ldrb	r3, [r7, #14]
 8017282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017286:	2b00      	cmp	r3, #0
 8017288:	d004      	beq.n	8017294 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801728a:	7bbb      	ldrb	r3, [r7, #14]
 801728c:	4619      	mov	r1, r3
 801728e:	6878      	ldr	r0, [r7, #4]
 8017290:	f002 fc24 	bl	8019adc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f000 fcc3 	bl	8017c20 <USBD_CtlSendStatus>
              }
              break;
 801729a:	e004      	b.n	80172a6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801729c:	6839      	ldr	r1, [r7, #0]
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f000 fbf5 	bl	8017a8e <USBD_CtlError>
              break;
 80172a4:	e000      	b.n	80172a8 <USBD_StdEPReq+0x14c>
              break;
 80172a6:	bf00      	nop
          }
          break;
 80172a8:	e0aa      	b.n	8017400 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172b0:	2b02      	cmp	r3, #2
 80172b2:	d002      	beq.n	80172ba <USBD_StdEPReq+0x15e>
 80172b4:	2b03      	cmp	r3, #3
 80172b6:	d032      	beq.n	801731e <USBD_StdEPReq+0x1c2>
 80172b8:	e097      	b.n	80173ea <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80172ba:	7bbb      	ldrb	r3, [r7, #14]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d007      	beq.n	80172d0 <USBD_StdEPReq+0x174>
 80172c0:	7bbb      	ldrb	r3, [r7, #14]
 80172c2:	2b80      	cmp	r3, #128	; 0x80
 80172c4:	d004      	beq.n	80172d0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80172c6:	6839      	ldr	r1, [r7, #0]
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	f000 fbe0 	bl	8017a8e <USBD_CtlError>
                break;
 80172ce:	e091      	b.n	80173f4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80172d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	da0b      	bge.n	80172f0 <USBD_StdEPReq+0x194>
 80172d8:	7bbb      	ldrb	r3, [r7, #14]
 80172da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80172de:	4613      	mov	r3, r2
 80172e0:	009b      	lsls	r3, r3, #2
 80172e2:	4413      	add	r3, r2
 80172e4:	009b      	lsls	r3, r3, #2
 80172e6:	3310      	adds	r3, #16
 80172e8:	687a      	ldr	r2, [r7, #4]
 80172ea:	4413      	add	r3, r2
 80172ec:	3304      	adds	r3, #4
 80172ee:	e00b      	b.n	8017308 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80172f0:	7bbb      	ldrb	r3, [r7, #14]
 80172f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80172f6:	4613      	mov	r3, r2
 80172f8:	009b      	lsls	r3, r3, #2
 80172fa:	4413      	add	r3, r2
 80172fc:	009b      	lsls	r3, r3, #2
 80172fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	4413      	add	r3, r2
 8017306:	3304      	adds	r3, #4
 8017308:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	2200      	movs	r2, #0
 801730e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	2202      	movs	r2, #2
 8017314:	4619      	mov	r1, r3
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f000 fc24 	bl	8017b64 <USBD_CtlSendData>
              break;
 801731c:	e06a      	b.n	80173f4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801731e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017322:	2b00      	cmp	r3, #0
 8017324:	da11      	bge.n	801734a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017326:	7bbb      	ldrb	r3, [r7, #14]
 8017328:	f003 020f 	and.w	r2, r3, #15
 801732c:	6879      	ldr	r1, [r7, #4]
 801732e:	4613      	mov	r3, r2
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	4413      	add	r3, r2
 8017334:	009b      	lsls	r3, r3, #2
 8017336:	440b      	add	r3, r1
 8017338:	3318      	adds	r3, #24
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d117      	bne.n	8017370 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8017340:	6839      	ldr	r1, [r7, #0]
 8017342:	6878      	ldr	r0, [r7, #4]
 8017344:	f000 fba3 	bl	8017a8e <USBD_CtlError>
                  break;
 8017348:	e054      	b.n	80173f4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801734a:	7bbb      	ldrb	r3, [r7, #14]
 801734c:	f003 020f 	and.w	r2, r3, #15
 8017350:	6879      	ldr	r1, [r7, #4]
 8017352:	4613      	mov	r3, r2
 8017354:	009b      	lsls	r3, r3, #2
 8017356:	4413      	add	r3, r2
 8017358:	009b      	lsls	r3, r3, #2
 801735a:	440b      	add	r3, r1
 801735c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d104      	bne.n	8017370 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8017366:	6839      	ldr	r1, [r7, #0]
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f000 fb90 	bl	8017a8e <USBD_CtlError>
                  break;
 801736e:	e041      	b.n	80173f4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017374:	2b00      	cmp	r3, #0
 8017376:	da0b      	bge.n	8017390 <USBD_StdEPReq+0x234>
 8017378:	7bbb      	ldrb	r3, [r7, #14]
 801737a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801737e:	4613      	mov	r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	4413      	add	r3, r2
 8017384:	009b      	lsls	r3, r3, #2
 8017386:	3310      	adds	r3, #16
 8017388:	687a      	ldr	r2, [r7, #4]
 801738a:	4413      	add	r3, r2
 801738c:	3304      	adds	r3, #4
 801738e:	e00b      	b.n	80173a8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017390:	7bbb      	ldrb	r3, [r7, #14]
 8017392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017396:	4613      	mov	r3, r2
 8017398:	009b      	lsls	r3, r3, #2
 801739a:	4413      	add	r3, r2
 801739c:	009b      	lsls	r3, r3, #2
 801739e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80173a2:	687a      	ldr	r2, [r7, #4]
 80173a4:	4413      	add	r3, r2
 80173a6:	3304      	adds	r3, #4
 80173a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80173aa:	7bbb      	ldrb	r3, [r7, #14]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d002      	beq.n	80173b6 <USBD_StdEPReq+0x25a>
 80173b0:	7bbb      	ldrb	r3, [r7, #14]
 80173b2:	2b80      	cmp	r3, #128	; 0x80
 80173b4:	d103      	bne.n	80173be <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	2200      	movs	r2, #0
 80173ba:	601a      	str	r2, [r3, #0]
 80173bc:	e00e      	b.n	80173dc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80173be:	7bbb      	ldrb	r3, [r7, #14]
 80173c0:	4619      	mov	r1, r3
 80173c2:	6878      	ldr	r0, [r7, #4]
 80173c4:	f002 fba9 	bl	8019b1a <USBD_LL_IsStallEP>
 80173c8:	4603      	mov	r3, r0
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d003      	beq.n	80173d6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80173ce:	68bb      	ldr	r3, [r7, #8]
 80173d0:	2201      	movs	r2, #1
 80173d2:	601a      	str	r2, [r3, #0]
 80173d4:	e002      	b.n	80173dc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80173d6:	68bb      	ldr	r3, [r7, #8]
 80173d8:	2200      	movs	r2, #0
 80173da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	2202      	movs	r2, #2
 80173e0:	4619      	mov	r1, r3
 80173e2:	6878      	ldr	r0, [r7, #4]
 80173e4:	f000 fbbe 	bl	8017b64 <USBD_CtlSendData>
              break;
 80173e8:	e004      	b.n	80173f4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80173ea:	6839      	ldr	r1, [r7, #0]
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f000 fb4e 	bl	8017a8e <USBD_CtlError>
              break;
 80173f2:	bf00      	nop
          }
          break;
 80173f4:	e004      	b.n	8017400 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80173f6:	6839      	ldr	r1, [r7, #0]
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f000 fb48 	bl	8017a8e <USBD_CtlError>
          break;
 80173fe:	bf00      	nop
      }
      break;
 8017400:	e004      	b.n	801740c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8017402:	6839      	ldr	r1, [r7, #0]
 8017404:	6878      	ldr	r0, [r7, #4]
 8017406:	f000 fb42 	bl	8017a8e <USBD_CtlError>
      break;
 801740a:	bf00      	nop
  }

  return ret;
 801740c:	7bfb      	ldrb	r3, [r7, #15]
}
 801740e:	4618      	mov	r0, r3
 8017410:	3710      	adds	r7, #16
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}
	...

08017418 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017418:	b580      	push	{r7, lr}
 801741a:	b084      	sub	sp, #16
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
 8017420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017422:	2300      	movs	r3, #0
 8017424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017426:	2300      	movs	r3, #0
 8017428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801742a:	2300      	movs	r3, #0
 801742c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	885b      	ldrh	r3, [r3, #2]
 8017432:	0a1b      	lsrs	r3, r3, #8
 8017434:	b29b      	uxth	r3, r3
 8017436:	3b01      	subs	r3, #1
 8017438:	2b0e      	cmp	r3, #14
 801743a:	f200 8152 	bhi.w	80176e2 <USBD_GetDescriptor+0x2ca>
 801743e:	a201      	add	r2, pc, #4	; (adr r2, 8017444 <USBD_GetDescriptor+0x2c>)
 8017440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017444:	080174b5 	.word	0x080174b5
 8017448:	080174cd 	.word	0x080174cd
 801744c:	0801750d 	.word	0x0801750d
 8017450:	080176e3 	.word	0x080176e3
 8017454:	080176e3 	.word	0x080176e3
 8017458:	08017683 	.word	0x08017683
 801745c:	080176af 	.word	0x080176af
 8017460:	080176e3 	.word	0x080176e3
 8017464:	080176e3 	.word	0x080176e3
 8017468:	080176e3 	.word	0x080176e3
 801746c:	080176e3 	.word	0x080176e3
 8017470:	080176e3 	.word	0x080176e3
 8017474:	080176e3 	.word	0x080176e3
 8017478:	080176e3 	.word	0x080176e3
 801747c:	08017481 	.word	0x08017481
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017486:	69db      	ldr	r3, [r3, #28]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d00b      	beq.n	80174a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017492:	69db      	ldr	r3, [r3, #28]
 8017494:	687a      	ldr	r2, [r7, #4]
 8017496:	7c12      	ldrb	r2, [r2, #16]
 8017498:	f107 0108 	add.w	r1, r7, #8
 801749c:	4610      	mov	r0, r2
 801749e:	4798      	blx	r3
 80174a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80174a2:	e126      	b.n	80176f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80174a4:	6839      	ldr	r1, [r7, #0]
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f000 faf1 	bl	8017a8e <USBD_CtlError>
        err++;
 80174ac:	7afb      	ldrb	r3, [r7, #11]
 80174ae:	3301      	adds	r3, #1
 80174b0:	72fb      	strb	r3, [r7, #11]
      break;
 80174b2:	e11e      	b.n	80176f2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	687a      	ldr	r2, [r7, #4]
 80174be:	7c12      	ldrb	r2, [r2, #16]
 80174c0:	f107 0108 	add.w	r1, r7, #8
 80174c4:	4610      	mov	r0, r2
 80174c6:	4798      	blx	r3
 80174c8:	60f8      	str	r0, [r7, #12]
      break;
 80174ca:	e112      	b.n	80176f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	7c1b      	ldrb	r3, [r3, #16]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d10d      	bne.n	80174f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80174da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174dc:	f107 0208 	add.w	r2, r7, #8
 80174e0:	4610      	mov	r0, r2
 80174e2:	4798      	blx	r3
 80174e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	3301      	adds	r3, #1
 80174ea:	2202      	movs	r2, #2
 80174ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80174ee:	e100      	b.n	80176f2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80174f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174f8:	f107 0208 	add.w	r2, r7, #8
 80174fc:	4610      	mov	r0, r2
 80174fe:	4798      	blx	r3
 8017500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	3301      	adds	r3, #1
 8017506:	2202      	movs	r2, #2
 8017508:	701a      	strb	r2, [r3, #0]
      break;
 801750a:	e0f2      	b.n	80176f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	885b      	ldrh	r3, [r3, #2]
 8017510:	b2db      	uxtb	r3, r3
 8017512:	2b05      	cmp	r3, #5
 8017514:	f200 80ac 	bhi.w	8017670 <USBD_GetDescriptor+0x258>
 8017518:	a201      	add	r2, pc, #4	; (adr r2, 8017520 <USBD_GetDescriptor+0x108>)
 801751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801751e:	bf00      	nop
 8017520:	08017539 	.word	0x08017539
 8017524:	0801756d 	.word	0x0801756d
 8017528:	080175a1 	.word	0x080175a1
 801752c:	080175d5 	.word	0x080175d5
 8017530:	08017609 	.word	0x08017609
 8017534:	0801763d 	.word	0x0801763d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801753e:	685b      	ldr	r3, [r3, #4]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d00b      	beq.n	801755c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	687a      	ldr	r2, [r7, #4]
 801754e:	7c12      	ldrb	r2, [r2, #16]
 8017550:	f107 0108 	add.w	r1, r7, #8
 8017554:	4610      	mov	r0, r2
 8017556:	4798      	blx	r3
 8017558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801755a:	e091      	b.n	8017680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801755c:	6839      	ldr	r1, [r7, #0]
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f000 fa95 	bl	8017a8e <USBD_CtlError>
            err++;
 8017564:	7afb      	ldrb	r3, [r7, #11]
 8017566:	3301      	adds	r3, #1
 8017568:	72fb      	strb	r3, [r7, #11]
          break;
 801756a:	e089      	b.n	8017680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017572:	689b      	ldr	r3, [r3, #8]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d00b      	beq.n	8017590 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801757e:	689b      	ldr	r3, [r3, #8]
 8017580:	687a      	ldr	r2, [r7, #4]
 8017582:	7c12      	ldrb	r2, [r2, #16]
 8017584:	f107 0108 	add.w	r1, r7, #8
 8017588:	4610      	mov	r0, r2
 801758a:	4798      	blx	r3
 801758c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801758e:	e077      	b.n	8017680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017590:	6839      	ldr	r1, [r7, #0]
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f000 fa7b 	bl	8017a8e <USBD_CtlError>
            err++;
 8017598:	7afb      	ldrb	r3, [r7, #11]
 801759a:	3301      	adds	r3, #1
 801759c:	72fb      	strb	r3, [r7, #11]
          break;
 801759e:	e06f      	b.n	8017680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175a6:	68db      	ldr	r3, [r3, #12]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d00b      	beq.n	80175c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	687a      	ldr	r2, [r7, #4]
 80175b6:	7c12      	ldrb	r2, [r2, #16]
 80175b8:	f107 0108 	add.w	r1, r7, #8
 80175bc:	4610      	mov	r0, r2
 80175be:	4798      	blx	r3
 80175c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175c2:	e05d      	b.n	8017680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80175c4:	6839      	ldr	r1, [r7, #0]
 80175c6:	6878      	ldr	r0, [r7, #4]
 80175c8:	f000 fa61 	bl	8017a8e <USBD_CtlError>
            err++;
 80175cc:	7afb      	ldrb	r3, [r7, #11]
 80175ce:	3301      	adds	r3, #1
 80175d0:	72fb      	strb	r3, [r7, #11]
          break;
 80175d2:	e055      	b.n	8017680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175da:	691b      	ldr	r3, [r3, #16]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d00b      	beq.n	80175f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175e6:	691b      	ldr	r3, [r3, #16]
 80175e8:	687a      	ldr	r2, [r7, #4]
 80175ea:	7c12      	ldrb	r2, [r2, #16]
 80175ec:	f107 0108 	add.w	r1, r7, #8
 80175f0:	4610      	mov	r0, r2
 80175f2:	4798      	blx	r3
 80175f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175f6:	e043      	b.n	8017680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80175f8:	6839      	ldr	r1, [r7, #0]
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f000 fa47 	bl	8017a8e <USBD_CtlError>
            err++;
 8017600:	7afb      	ldrb	r3, [r7, #11]
 8017602:	3301      	adds	r3, #1
 8017604:	72fb      	strb	r3, [r7, #11]
          break;
 8017606:	e03b      	b.n	8017680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801760e:	695b      	ldr	r3, [r3, #20]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d00b      	beq.n	801762c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801761a:	695b      	ldr	r3, [r3, #20]
 801761c:	687a      	ldr	r2, [r7, #4]
 801761e:	7c12      	ldrb	r2, [r2, #16]
 8017620:	f107 0108 	add.w	r1, r7, #8
 8017624:	4610      	mov	r0, r2
 8017626:	4798      	blx	r3
 8017628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801762a:	e029      	b.n	8017680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801762c:	6839      	ldr	r1, [r7, #0]
 801762e:	6878      	ldr	r0, [r7, #4]
 8017630:	f000 fa2d 	bl	8017a8e <USBD_CtlError>
            err++;
 8017634:	7afb      	ldrb	r3, [r7, #11]
 8017636:	3301      	adds	r3, #1
 8017638:	72fb      	strb	r3, [r7, #11]
          break;
 801763a:	e021      	b.n	8017680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017642:	699b      	ldr	r3, [r3, #24]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d00b      	beq.n	8017660 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801764e:	699b      	ldr	r3, [r3, #24]
 8017650:	687a      	ldr	r2, [r7, #4]
 8017652:	7c12      	ldrb	r2, [r2, #16]
 8017654:	f107 0108 	add.w	r1, r7, #8
 8017658:	4610      	mov	r0, r2
 801765a:	4798      	blx	r3
 801765c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801765e:	e00f      	b.n	8017680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017660:	6839      	ldr	r1, [r7, #0]
 8017662:	6878      	ldr	r0, [r7, #4]
 8017664:	f000 fa13 	bl	8017a8e <USBD_CtlError>
            err++;
 8017668:	7afb      	ldrb	r3, [r7, #11]
 801766a:	3301      	adds	r3, #1
 801766c:	72fb      	strb	r3, [r7, #11]
          break;
 801766e:	e007      	b.n	8017680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8017670:	6839      	ldr	r1, [r7, #0]
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	f000 fa0b 	bl	8017a8e <USBD_CtlError>
          err++;
 8017678:	7afb      	ldrb	r3, [r7, #11]
 801767a:	3301      	adds	r3, #1
 801767c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801767e:	e038      	b.n	80176f2 <USBD_GetDescriptor+0x2da>
 8017680:	e037      	b.n	80176f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	7c1b      	ldrb	r3, [r3, #16]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d109      	bne.n	801769e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017692:	f107 0208 	add.w	r2, r7, #8
 8017696:	4610      	mov	r0, r2
 8017698:	4798      	blx	r3
 801769a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801769c:	e029      	b.n	80176f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801769e:	6839      	ldr	r1, [r7, #0]
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f000 f9f4 	bl	8017a8e <USBD_CtlError>
        err++;
 80176a6:	7afb      	ldrb	r3, [r7, #11]
 80176a8:	3301      	adds	r3, #1
 80176aa:	72fb      	strb	r3, [r7, #11]
      break;
 80176ac:	e021      	b.n	80176f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	7c1b      	ldrb	r3, [r3, #16]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d10d      	bne.n	80176d2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176be:	f107 0208 	add.w	r2, r7, #8
 80176c2:	4610      	mov	r0, r2
 80176c4:	4798      	blx	r3
 80176c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	3301      	adds	r3, #1
 80176cc:	2207      	movs	r2, #7
 80176ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80176d0:	e00f      	b.n	80176f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80176d2:	6839      	ldr	r1, [r7, #0]
 80176d4:	6878      	ldr	r0, [r7, #4]
 80176d6:	f000 f9da 	bl	8017a8e <USBD_CtlError>
        err++;
 80176da:	7afb      	ldrb	r3, [r7, #11]
 80176dc:	3301      	adds	r3, #1
 80176de:	72fb      	strb	r3, [r7, #11]
      break;
 80176e0:	e007      	b.n	80176f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80176e2:	6839      	ldr	r1, [r7, #0]
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f000 f9d2 	bl	8017a8e <USBD_CtlError>
      err++;
 80176ea:	7afb      	ldrb	r3, [r7, #11]
 80176ec:	3301      	adds	r3, #1
 80176ee:	72fb      	strb	r3, [r7, #11]
      break;
 80176f0:	bf00      	nop
  }

  if (err != 0U)
 80176f2:	7afb      	ldrb	r3, [r7, #11]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d11c      	bne.n	8017732 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80176f8:	893b      	ldrh	r3, [r7, #8]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d011      	beq.n	8017722 <USBD_GetDescriptor+0x30a>
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	88db      	ldrh	r3, [r3, #6]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d00d      	beq.n	8017722 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	88da      	ldrh	r2, [r3, #6]
 801770a:	893b      	ldrh	r3, [r7, #8]
 801770c:	4293      	cmp	r3, r2
 801770e:	bf28      	it	cs
 8017710:	4613      	movcs	r3, r2
 8017712:	b29b      	uxth	r3, r3
 8017714:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017716:	893b      	ldrh	r3, [r7, #8]
 8017718:	461a      	mov	r2, r3
 801771a:	68f9      	ldr	r1, [r7, #12]
 801771c:	6878      	ldr	r0, [r7, #4]
 801771e:	f000 fa21 	bl	8017b64 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	88db      	ldrh	r3, [r3, #6]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d104      	bne.n	8017734 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f000 fa78 	bl	8017c20 <USBD_CtlSendStatus>
 8017730:	e000      	b.n	8017734 <USBD_GetDescriptor+0x31c>
    return;
 8017732:	bf00      	nop
    }
  }
}
 8017734:	3710      	adds	r7, #16
 8017736:	46bd      	mov	sp, r7
 8017738:	bd80      	pop	{r7, pc}
 801773a:	bf00      	nop

0801773c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	889b      	ldrh	r3, [r3, #4]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d130      	bne.n	80177b0 <USBD_SetAddress+0x74>
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	88db      	ldrh	r3, [r3, #6]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d12c      	bne.n	80177b0 <USBD_SetAddress+0x74>
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	885b      	ldrh	r3, [r3, #2]
 801775a:	2b7f      	cmp	r3, #127	; 0x7f
 801775c:	d828      	bhi.n	80177b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801775e:	683b      	ldr	r3, [r7, #0]
 8017760:	885b      	ldrh	r3, [r3, #2]
 8017762:	b2db      	uxtb	r3, r3
 8017764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017768:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017770:	2b03      	cmp	r3, #3
 8017772:	d104      	bne.n	801777e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8017774:	6839      	ldr	r1, [r7, #0]
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f000 f989 	bl	8017a8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801777c:	e01c      	b.n	80177b8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	7bfa      	ldrb	r2, [r7, #15]
 8017782:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017786:	7bfb      	ldrb	r3, [r7, #15]
 8017788:	4619      	mov	r1, r3
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f002 f9eb 	bl	8019b66 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f000 fa45 	bl	8017c20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017796:	7bfb      	ldrb	r3, [r7, #15]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d004      	beq.n	80177a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2202      	movs	r2, #2
 80177a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177a4:	e008      	b.n	80177b8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2201      	movs	r2, #1
 80177aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177ae:	e003      	b.n	80177b8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80177b0:	6839      	ldr	r1, [r7, #0]
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 f96b 	bl	8017a8e <USBD_CtlError>
  }
}
 80177b8:	bf00      	nop
 80177ba:	3710      	adds	r7, #16
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}

080177c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b082      	sub	sp, #8
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	885b      	ldrh	r3, [r3, #2]
 80177ce:	b2da      	uxtb	r2, r3
 80177d0:	4b41      	ldr	r3, [pc, #260]	; (80178d8 <USBD_SetConfig+0x118>)
 80177d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80177d4:	4b40      	ldr	r3, [pc, #256]	; (80178d8 <USBD_SetConfig+0x118>)
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	2b01      	cmp	r3, #1
 80177da:	d904      	bls.n	80177e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80177dc:	6839      	ldr	r1, [r7, #0]
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f000 f955 	bl	8017a8e <USBD_CtlError>
 80177e4:	e075      	b.n	80178d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80177ec:	2b02      	cmp	r3, #2
 80177ee:	d002      	beq.n	80177f6 <USBD_SetConfig+0x36>
 80177f0:	2b03      	cmp	r3, #3
 80177f2:	d023      	beq.n	801783c <USBD_SetConfig+0x7c>
 80177f4:	e062      	b.n	80178bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80177f6:	4b38      	ldr	r3, [pc, #224]	; (80178d8 <USBD_SetConfig+0x118>)
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d01a      	beq.n	8017834 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80177fe:	4b36      	ldr	r3, [pc, #216]	; (80178d8 <USBD_SetConfig+0x118>)
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	461a      	mov	r2, r3
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2203      	movs	r2, #3
 801780c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017810:	4b31      	ldr	r3, [pc, #196]	; (80178d8 <USBD_SetConfig+0x118>)
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	4619      	mov	r1, r3
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7ff f9c7 	bl	8016baa <USBD_SetClassConfig>
 801781c:	4603      	mov	r3, r0
 801781e:	2b02      	cmp	r3, #2
 8017820:	d104      	bne.n	801782c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8017822:	6839      	ldr	r1, [r7, #0]
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f000 f932 	bl	8017a8e <USBD_CtlError>
            return;
 801782a:	e052      	b.n	80178d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f000 f9f7 	bl	8017c20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017832:	e04e      	b.n	80178d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017834:	6878      	ldr	r0, [r7, #4]
 8017836:	f000 f9f3 	bl	8017c20 <USBD_CtlSendStatus>
        break;
 801783a:	e04a      	b.n	80178d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801783c:	4b26      	ldr	r3, [pc, #152]	; (80178d8 <USBD_SetConfig+0x118>)
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d112      	bne.n	801786a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2202      	movs	r2, #2
 8017848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801784c:	4b22      	ldr	r3, [pc, #136]	; (80178d8 <USBD_SetConfig+0x118>)
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	461a      	mov	r2, r3
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8017856:	4b20      	ldr	r3, [pc, #128]	; (80178d8 <USBD_SetConfig+0x118>)
 8017858:	781b      	ldrb	r3, [r3, #0]
 801785a:	4619      	mov	r1, r3
 801785c:	6878      	ldr	r0, [r7, #4]
 801785e:	f7ff f9c3 	bl	8016be8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f000 f9dc 	bl	8017c20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017868:	e033      	b.n	80178d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801786a:	4b1b      	ldr	r3, [pc, #108]	; (80178d8 <USBD_SetConfig+0x118>)
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	461a      	mov	r2, r3
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	429a      	cmp	r2, r3
 8017876:	d01d      	beq.n	80178b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	685b      	ldr	r3, [r3, #4]
 801787c:	b2db      	uxtb	r3, r3
 801787e:	4619      	mov	r1, r3
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f7ff f9b1 	bl	8016be8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8017886:	4b14      	ldr	r3, [pc, #80]	; (80178d8 <USBD_SetConfig+0x118>)
 8017888:	781b      	ldrb	r3, [r3, #0]
 801788a:	461a      	mov	r2, r3
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017890:	4b11      	ldr	r3, [pc, #68]	; (80178d8 <USBD_SetConfig+0x118>)
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	4619      	mov	r1, r3
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f7ff f987 	bl	8016baa <USBD_SetClassConfig>
 801789c:	4603      	mov	r3, r0
 801789e:	2b02      	cmp	r3, #2
 80178a0:	d104      	bne.n	80178ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80178a2:	6839      	ldr	r1, [r7, #0]
 80178a4:	6878      	ldr	r0, [r7, #4]
 80178a6:	f000 f8f2 	bl	8017a8e <USBD_CtlError>
            return;
 80178aa:	e012      	b.n	80178d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80178ac:	6878      	ldr	r0, [r7, #4]
 80178ae:	f000 f9b7 	bl	8017c20 <USBD_CtlSendStatus>
        break;
 80178b2:	e00e      	b.n	80178d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f000 f9b3 	bl	8017c20 <USBD_CtlSendStatus>
        break;
 80178ba:	e00a      	b.n	80178d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80178bc:	6839      	ldr	r1, [r7, #0]
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f000 f8e5 	bl	8017a8e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80178c4:	4b04      	ldr	r3, [pc, #16]	; (80178d8 <USBD_SetConfig+0x118>)
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	4619      	mov	r1, r3
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f7ff f98c 	bl	8016be8 <USBD_ClrClassConfig>
        break;
 80178d0:	bf00      	nop
    }
  }
}
 80178d2:	3708      	adds	r7, #8
 80178d4:	46bd      	mov	sp, r7
 80178d6:	bd80      	pop	{r7, pc}
 80178d8:	20027638 	.word	0x20027638

080178dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80178e6:	683b      	ldr	r3, [r7, #0]
 80178e8:	88db      	ldrh	r3, [r3, #6]
 80178ea:	2b01      	cmp	r3, #1
 80178ec:	d004      	beq.n	80178f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80178ee:	6839      	ldr	r1, [r7, #0]
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f000 f8cc 	bl	8017a8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80178f6:	e021      	b.n	801793c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178fe:	2b01      	cmp	r3, #1
 8017900:	db17      	blt.n	8017932 <USBD_GetConfig+0x56>
 8017902:	2b02      	cmp	r3, #2
 8017904:	dd02      	ble.n	801790c <USBD_GetConfig+0x30>
 8017906:	2b03      	cmp	r3, #3
 8017908:	d00b      	beq.n	8017922 <USBD_GetConfig+0x46>
 801790a:	e012      	b.n	8017932 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	2200      	movs	r2, #0
 8017910:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	3308      	adds	r3, #8
 8017916:	2201      	movs	r2, #1
 8017918:	4619      	mov	r1, r3
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f000 f922 	bl	8017b64 <USBD_CtlSendData>
        break;
 8017920:	e00c      	b.n	801793c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	3304      	adds	r3, #4
 8017926:	2201      	movs	r2, #1
 8017928:	4619      	mov	r1, r3
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f000 f91a 	bl	8017b64 <USBD_CtlSendData>
        break;
 8017930:	e004      	b.n	801793c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8017932:	6839      	ldr	r1, [r7, #0]
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f000 f8aa 	bl	8017a8e <USBD_CtlError>
        break;
 801793a:	bf00      	nop
}
 801793c:	bf00      	nop
 801793e:	3708      	adds	r7, #8
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}

08017944 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b082      	sub	sp, #8
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
 801794c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017954:	3b01      	subs	r3, #1
 8017956:	2b02      	cmp	r3, #2
 8017958:	d81e      	bhi.n	8017998 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	88db      	ldrh	r3, [r3, #6]
 801795e:	2b02      	cmp	r3, #2
 8017960:	d004      	beq.n	801796c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8017962:	6839      	ldr	r1, [r7, #0]
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f000 f892 	bl	8017a8e <USBD_CtlError>
        break;
 801796a:	e01a      	b.n	80179a2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	2201      	movs	r2, #1
 8017970:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017978:	2b00      	cmp	r3, #0
 801797a:	d005      	beq.n	8017988 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	f043 0202 	orr.w	r2, r3, #2
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	330c      	adds	r3, #12
 801798c:	2202      	movs	r2, #2
 801798e:	4619      	mov	r1, r3
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f000 f8e7 	bl	8017b64 <USBD_CtlSendData>
      break;
 8017996:	e004      	b.n	80179a2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8017998:	6839      	ldr	r1, [r7, #0]
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f000 f877 	bl	8017a8e <USBD_CtlError>
      break;
 80179a0:	bf00      	nop
  }
}
 80179a2:	bf00      	nop
 80179a4:	3708      	adds	r7, #8
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}

080179aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b082      	sub	sp, #8
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	6078      	str	r0, [r7, #4]
 80179b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	885b      	ldrh	r3, [r3, #2]
 80179b8:	2b01      	cmp	r3, #1
 80179ba:	d106      	bne.n	80179ca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2201      	movs	r2, #1
 80179c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	f000 f92b 	bl	8017c20 <USBD_CtlSendStatus>
  }
}
 80179ca:	bf00      	nop
 80179cc:	3708      	adds	r7, #8
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}

080179d2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80179d2:	b580      	push	{r7, lr}
 80179d4:	b082      	sub	sp, #8
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	6078      	str	r0, [r7, #4]
 80179da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80179e2:	3b01      	subs	r3, #1
 80179e4:	2b02      	cmp	r3, #2
 80179e6:	d80b      	bhi.n	8017a00 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	885b      	ldrh	r3, [r3, #2]
 80179ec:	2b01      	cmp	r3, #1
 80179ee:	d10c      	bne.n	8017a0a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2200      	movs	r2, #0
 80179f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	f000 f911 	bl	8017c20 <USBD_CtlSendStatus>
      }
      break;
 80179fe:	e004      	b.n	8017a0a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8017a00:	6839      	ldr	r1, [r7, #0]
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f000 f843 	bl	8017a8e <USBD_CtlError>
      break;
 8017a08:	e000      	b.n	8017a0c <USBD_ClrFeature+0x3a>
      break;
 8017a0a:	bf00      	nop
  }
}
 8017a0c:	bf00      	nop
 8017a0e:	3708      	adds	r7, #8
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}

08017a14 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017a14:	b480      	push	{r7}
 8017a16:	b083      	sub	sp, #12
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
 8017a1c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8017a1e:	683b      	ldr	r3, [r7, #0]
 8017a20:	781a      	ldrb	r2, [r3, #0]
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8017a26:	683b      	ldr	r3, [r7, #0]
 8017a28:	785a      	ldrb	r2, [r3, #1]
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8017a2e:	683b      	ldr	r3, [r7, #0]
 8017a30:	3302      	adds	r3, #2
 8017a32:	781b      	ldrb	r3, [r3, #0]
 8017a34:	b29a      	uxth	r2, r3
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	3303      	adds	r3, #3
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	021b      	lsls	r3, r3, #8
 8017a40:	b29b      	uxth	r3, r3
 8017a42:	4413      	add	r3, r2
 8017a44:	b29a      	uxth	r2, r3
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	3304      	adds	r3, #4
 8017a4e:	781b      	ldrb	r3, [r3, #0]
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	683b      	ldr	r3, [r7, #0]
 8017a54:	3305      	adds	r3, #5
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	021b      	lsls	r3, r3, #8
 8017a5c:	b29b      	uxth	r3, r3
 8017a5e:	4413      	add	r3, r2
 8017a60:	b29a      	uxth	r2, r3
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	3306      	adds	r3, #6
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	b29a      	uxth	r2, r3
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	3307      	adds	r3, #7
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	021b      	lsls	r3, r3, #8
 8017a78:	b29b      	uxth	r3, r3
 8017a7a:	4413      	add	r3, r2
 8017a7c:	b29a      	uxth	r2, r3
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	80da      	strh	r2, [r3, #6]

}
 8017a82:	bf00      	nop
 8017a84:	370c      	adds	r7, #12
 8017a86:	46bd      	mov	sp, r7
 8017a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8c:	4770      	bx	lr

08017a8e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8017a8e:	b580      	push	{r7, lr}
 8017a90:	b082      	sub	sp, #8
 8017a92:	af00      	add	r7, sp, #0
 8017a94:	6078      	str	r0, [r7, #4]
 8017a96:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8017a98:	2180      	movs	r1, #128	; 0x80
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f001 ffff 	bl	8019a9e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8017aa0:	2100      	movs	r1, #0
 8017aa2:	6878      	ldr	r0, [r7, #4]
 8017aa4:	f001 fffb 	bl	8019a9e <USBD_LL_StallEP>
}
 8017aa8:	bf00      	nop
 8017aaa:	3708      	adds	r7, #8
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}

08017ab0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b086      	sub	sp, #24
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	60f8      	str	r0, [r7, #12]
 8017ab8:	60b9      	str	r1, [r7, #8]
 8017aba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017abc:	2300      	movs	r3, #0
 8017abe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d032      	beq.n	8017b2c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8017ac6:	68f8      	ldr	r0, [r7, #12]
 8017ac8:	f000 f834 	bl	8017b34 <USBD_GetLen>
 8017acc:	4603      	mov	r3, r0
 8017ace:	3301      	adds	r3, #1
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	005b      	lsls	r3, r3, #1
 8017ad4:	b29a      	uxth	r2, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8017ada:	7dfb      	ldrb	r3, [r7, #23]
 8017adc:	1c5a      	adds	r2, r3, #1
 8017ade:	75fa      	strb	r2, [r7, #23]
 8017ae0:	461a      	mov	r2, r3
 8017ae2:	68bb      	ldr	r3, [r7, #8]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	7812      	ldrb	r2, [r2, #0]
 8017aea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8017aec:	7dfb      	ldrb	r3, [r7, #23]
 8017aee:	1c5a      	adds	r2, r3, #1
 8017af0:	75fa      	strb	r2, [r7, #23]
 8017af2:	461a      	mov	r2, r3
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	4413      	add	r3, r2
 8017af8:	2203      	movs	r2, #3
 8017afa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8017afc:	e012      	b.n	8017b24 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	1c5a      	adds	r2, r3, #1
 8017b02:	60fa      	str	r2, [r7, #12]
 8017b04:	7dfa      	ldrb	r2, [r7, #23]
 8017b06:	1c51      	adds	r1, r2, #1
 8017b08:	75f9      	strb	r1, [r7, #23]
 8017b0a:	4611      	mov	r1, r2
 8017b0c:	68ba      	ldr	r2, [r7, #8]
 8017b0e:	440a      	add	r2, r1
 8017b10:	781b      	ldrb	r3, [r3, #0]
 8017b12:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8017b14:	7dfb      	ldrb	r3, [r7, #23]
 8017b16:	1c5a      	adds	r2, r3, #1
 8017b18:	75fa      	strb	r2, [r7, #23]
 8017b1a:	461a      	mov	r2, r3
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	4413      	add	r3, r2
 8017b20:	2200      	movs	r2, #0
 8017b22:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d1e8      	bne.n	8017afe <USBD_GetString+0x4e>
    }
  }
}
 8017b2c:	bf00      	nop
 8017b2e:	3718      	adds	r7, #24
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}

08017b34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017b34:	b480      	push	{r7}
 8017b36:	b085      	sub	sp, #20
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8017b40:	e005      	b.n	8017b4e <USBD_GetLen+0x1a>
  {
    len++;
 8017b42:	7bfb      	ldrb	r3, [r7, #15]
 8017b44:	3301      	adds	r3, #1
 8017b46:	73fb      	strb	r3, [r7, #15]
    buf++;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	781b      	ldrb	r3, [r3, #0]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d1f5      	bne.n	8017b42 <USBD_GetLen+0xe>
  }

  return len;
 8017b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3714      	adds	r7, #20
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b62:	4770      	bx	lr

08017b64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b084      	sub	sp, #16
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	60f8      	str	r0, [r7, #12]
 8017b6c:	60b9      	str	r1, [r7, #8]
 8017b6e:	4613      	mov	r3, r2
 8017b70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	2202      	movs	r2, #2
 8017b76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017b7a:	88fa      	ldrh	r2, [r7, #6]
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8017b80:	88fa      	ldrh	r2, [r7, #6]
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017b86:	88fb      	ldrh	r3, [r7, #6]
 8017b88:	68ba      	ldr	r2, [r7, #8]
 8017b8a:	2100      	movs	r1, #0
 8017b8c:	68f8      	ldr	r0, [r7, #12]
 8017b8e:	f002 f809 	bl	8019ba4 <USBD_LL_Transmit>

  return USBD_OK;
 8017b92:	2300      	movs	r3, #0
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	3710      	adds	r7, #16
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b084      	sub	sp, #16
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	4613      	mov	r3, r2
 8017ba8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017baa:	88fb      	ldrh	r3, [r7, #6]
 8017bac:	68ba      	ldr	r2, [r7, #8]
 8017bae:	2100      	movs	r1, #0
 8017bb0:	68f8      	ldr	r0, [r7, #12]
 8017bb2:	f001 fff7 	bl	8019ba4 <USBD_LL_Transmit>

  return USBD_OK;
 8017bb6:	2300      	movs	r3, #0
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	3710      	adds	r7, #16
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}

08017bc0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	60f8      	str	r0, [r7, #12]
 8017bc8:	60b9      	str	r1, [r7, #8]
 8017bca:	4613      	mov	r3, r2
 8017bcc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	2203      	movs	r2, #3
 8017bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017bd6:	88fa      	ldrh	r2, [r7, #6]
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8017bde:	88fa      	ldrh	r2, [r7, #6]
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017be6:	88fb      	ldrh	r3, [r7, #6]
 8017be8:	68ba      	ldr	r2, [r7, #8]
 8017bea:	2100      	movs	r1, #0
 8017bec:	68f8      	ldr	r0, [r7, #12]
 8017bee:	f001 fffc 	bl	8019bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017bf2:	2300      	movs	r3, #0
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	3710      	adds	r7, #16
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}

08017bfc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b084      	sub	sp, #16
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	60f8      	str	r0, [r7, #12]
 8017c04:	60b9      	str	r1, [r7, #8]
 8017c06:	4613      	mov	r3, r2
 8017c08:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017c0a:	88fb      	ldrh	r3, [r7, #6]
 8017c0c:	68ba      	ldr	r2, [r7, #8]
 8017c0e:	2100      	movs	r1, #0
 8017c10:	68f8      	ldr	r0, [r7, #12]
 8017c12:	f001 ffea 	bl	8019bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c16:	2300      	movs	r3, #0
}
 8017c18:	4618      	mov	r0, r3
 8017c1a:	3710      	adds	r7, #16
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}

08017c20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b082      	sub	sp, #8
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2204      	movs	r2, #4
 8017c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017c30:	2300      	movs	r3, #0
 8017c32:	2200      	movs	r2, #0
 8017c34:	2100      	movs	r1, #0
 8017c36:	6878      	ldr	r0, [r7, #4]
 8017c38:	f001 ffb4 	bl	8019ba4 <USBD_LL_Transmit>

  return USBD_OK;
 8017c3c:	2300      	movs	r3, #0
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	3708      	adds	r7, #8
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b082      	sub	sp, #8
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2205      	movs	r2, #5
 8017c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017c56:	2300      	movs	r3, #0
 8017c58:	2200      	movs	r2, #0
 8017c5a:	2100      	movs	r1, #0
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f001 ffc4 	bl	8019bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c62:	2300      	movs	r3, #0
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8017c72:	f000 fa21 	bl	80180b8 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8017c76:	480e      	ldr	r0, [pc, #56]	; (8017cb0 <APP_THREAD_Init+0x44>)
 8017c78:	f000 fef4 	bl	8018a64 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8017c7c:	2101      	movs	r1, #1
 8017c7e:	2002      	movs	r0, #2
 8017c80:	f002 f87c 	bl	8019d7c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8017c84:	f000 ffe6 	bl	8018c54 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8017c88:	f000 ffd2 	bl	8018c30 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8017c8c:	f7fd ff13 	bl	8015ab6 <SHCI_C2_THREAD_Init>
 8017c90:	4603      	mov	r3, r0
 8017c92:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8017c94:	4a07      	ldr	r2, [pc, #28]	; (8017cb4 <APP_THREAD_Init+0x48>)
 8017c96:	2100      	movs	r1, #0
 8017c98:	4807      	ldr	r0, [pc, #28]	; (8017cb8 <APP_THREAD_Init+0x4c>)
 8017c9a:	f7f8 fb63 	bl	8010364 <osThreadNew>
 8017c9e:	4602      	mov	r2, r0
 8017ca0:	4b06      	ldr	r3, [pc, #24]	; (8017cbc <APP_THREAD_Init+0x50>)
 8017ca2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8017ca4:	f000 f892 	bl	8017dcc <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8017ca8:	bf00      	nop
 8017caa:	3708      	adds	r7, #8
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}
 8017cb0:	20030838 	.word	0x20030838
 8017cb4:	0801bea8 	.word	0x0801bea8
 8017cb8:	08018175 	.word	0x08018175
 8017cbc:	20027750 	.word	0x20027750

08017cc0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2b1a      	cmp	r3, #26
 8017cce:	d861      	bhi.n	8017d94 <APP_THREAD_Error+0xd4>
 8017cd0:	a201      	add	r2, pc, #4	; (adr r2, 8017cd8 <APP_THREAD_Error+0x18>)
 8017cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cd6:	bf00      	nop
 8017cd8:	08017d45 	.word	0x08017d45
 8017cdc:	08017d4f 	.word	0x08017d4f
 8017ce0:	08017d59 	.word	0x08017d59
 8017ce4:	08017d63 	.word	0x08017d63
 8017ce8:	08017d6d 	.word	0x08017d6d
 8017cec:	08017d77 	.word	0x08017d77
 8017cf0:	08017d81 	.word	0x08017d81
 8017cf4:	08017d95 	.word	0x08017d95
 8017cf8:	08017d95 	.word	0x08017d95
 8017cfc:	08017d95 	.word	0x08017d95
 8017d00:	08017d95 	.word	0x08017d95
 8017d04:	08017d95 	.word	0x08017d95
 8017d08:	08017d95 	.word	0x08017d95
 8017d0c:	08017d95 	.word	0x08017d95
 8017d10:	08017d95 	.word	0x08017d95
 8017d14:	08017d95 	.word	0x08017d95
 8017d18:	08017d95 	.word	0x08017d95
 8017d1c:	08017d95 	.word	0x08017d95
 8017d20:	08017d95 	.word	0x08017d95
 8017d24:	08017d95 	.word	0x08017d95
 8017d28:	08017d95 	.word	0x08017d95
 8017d2c:	08017d95 	.word	0x08017d95
 8017d30:	08017d95 	.word	0x08017d95
 8017d34:	08017d95 	.word	0x08017d95
 8017d38:	08017d95 	.word	0x08017d95
 8017d3c:	08017d95 	.word	0x08017d95
 8017d40:	08017d8b 	.word	0x08017d8b
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8017d44:	6839      	ldr	r1, [r7, #0]
 8017d46:	4818      	ldr	r0, [pc, #96]	; (8017da8 <APP_THREAD_Error+0xe8>)
 8017d48:	f000 f9aa 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d4c:	e027      	b.n	8017d9e <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8017d4e:	6839      	ldr	r1, [r7, #0]
 8017d50:	4816      	ldr	r0, [pc, #88]	; (8017dac <APP_THREAD_Error+0xec>)
 8017d52:	f000 f9a5 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d56:	e022      	b.n	8017d9e <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8017d58:	6839      	ldr	r1, [r7, #0]
 8017d5a:	4815      	ldr	r0, [pc, #84]	; (8017db0 <APP_THREAD_Error+0xf0>)
 8017d5c:	f000 f9a0 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d60:	e01d      	b.n	8017d9e <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8017d62:	6839      	ldr	r1, [r7, #0]
 8017d64:	4813      	ldr	r0, [pc, #76]	; (8017db4 <APP_THREAD_Error+0xf4>)
 8017d66:	f000 f99b 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d6a:	e018      	b.n	8017d9e <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8017d6c:	6839      	ldr	r1, [r7, #0]
 8017d6e:	4812      	ldr	r0, [pc, #72]	; (8017db8 <APP_THREAD_Error+0xf8>)
 8017d70:	f000 f996 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d74:	e013      	b.n	8017d9e <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8017d76:	6839      	ldr	r1, [r7, #0]
 8017d78:	4810      	ldr	r0, [pc, #64]	; (8017dbc <APP_THREAD_Error+0xfc>)
 8017d7a:	f000 f991 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d7e:	e00e      	b.n	8017d9e <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8017d80:	6839      	ldr	r1, [r7, #0]
 8017d82:	480f      	ldr	r0, [pc, #60]	; (8017dc0 <APP_THREAD_Error+0x100>)
 8017d84:	f000 f98c 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d88:	e009      	b.n	8017d9e <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8017d8a:	6839      	ldr	r1, [r7, #0]
 8017d8c:	480d      	ldr	r0, [pc, #52]	; (8017dc4 <APP_THREAD_Error+0x104>)
 8017d8e:	f000 f987 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d92:	e004      	b.n	8017d9e <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8017d94:	2100      	movs	r1, #0
 8017d96:	480c      	ldr	r0, [pc, #48]	; (8017dc8 <APP_THREAD_Error+0x108>)
 8017d98:	f000 f982 	bl	80180a0 <APP_THREAD_TraceError>
    break;
 8017d9c:	bf00      	nop
  }
}
 8017d9e:	bf00      	nop
 8017da0:	3708      	adds	r7, #8
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	0801b810 	.word	0x0801b810
 8017dac:	0801b834 	.word	0x0801b834
 8017db0:	0801b858 	.word	0x0801b858
 8017db4:	0801b878 	.word	0x0801b878
 8017db8:	0801b898 	.word	0x0801b898
 8017dbc:	0801b8b8 	.word	0x0801b8b8
 8017dc0:	0801b8d4 	.word	0x0801b8d4
 8017dc4:	0801b900 	.word	0x0801b900
 8017dc8:	0801b924 	.word	0x0801b924

08017dcc <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8017dcc:	b590      	push	{r4, r7, lr}
 8017dce:	b083      	sub	sp, #12
 8017dd0:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8017dd2:	2000      	movs	r0, #0
 8017dd4:	f7fd fa7c 	bl	80152d0 <otInstanceErasePersistentInfo>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017ddc:	79fb      	ldrb	r3, [r7, #7]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d004      	beq.n	8017dec <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8017de2:	79fb      	ldrb	r3, [r7, #7]
 8017de4:	4619      	mov	r1, r3
 8017de6:	2006      	movs	r0, #6
 8017de8:	f7ff ff6a 	bl	8017cc0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8017dec:	2000      	movs	r0, #0
 8017dee:	f7fd fa12 	bl	8015216 <otInstanceFinalize>
  otInstanceInitSingle();
 8017df2:	f7fd f9e9 	bl	80151c8 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8017df6:	2200      	movs	r2, #0
 8017df8:	497b      	ldr	r1, [pc, #492]	; (8017fe8 <APP_THREAD_DeviceConfig+0x21c>)
 8017dfa:	2000      	movs	r0, #0
 8017dfc:	f7fd fa32 	bl	8015264 <otSetStateChangedCallback>
 8017e00:	4603      	mov	r3, r0
 8017e02:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e04:	79fb      	ldrb	r3, [r7, #7]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d004      	beq.n	8017e14 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8017e0a:	79fb      	ldrb	r3, [r7, #7]
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	2001      	movs	r0, #1
 8017e10:	f7ff ff56 	bl	8017cc0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8017e14:	2117      	movs	r1, #23
 8017e16:	2000      	movs	r0, #0
 8017e18:	f7fd fb1b 	bl	8015452 <otLinkSetChannel>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e20:	79fb      	ldrb	r3, [r7, #7]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d004      	beq.n	8017e30 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8017e26:	79fb      	ldrb	r3, [r7, #7]
 8017e28:	4619      	mov	r1, r3
 8017e2a:	2002      	movs	r0, #2
 8017e2c:	f7ff ff48 	bl	8017cc0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8017e30:	f241 2134 	movw	r1, #4660	; 0x1234
 8017e34:	2000      	movs	r0, #0
 8017e36:	f7fd fb3c 	bl	80154b2 <otLinkSetPanId>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e3e:	79fb      	ldrb	r3, [r7, #7]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d004      	beq.n	8017e4e <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8017e44:	79fb      	ldrb	r3, [r7, #7]
 8017e46:	4619      	mov	r1, r3
 8017e48:	2003      	movs	r0, #3
 8017e4a:	f7ff ff39 	bl	8017cc0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8017e4e:	2101      	movs	r1, #1
 8017e50:	2000      	movs	r0, #0
 8017e52:	f7fd fa66 	bl	8015322 <otIp6SetEnabled>
 8017e56:	4603      	mov	r3, r0
 8017e58:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e5a:	79fb      	ldrb	r3, [r7, #7]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d004      	beq.n	8017e6a <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8017e60:	79fb      	ldrb	r3, [r7, #7]
 8017e62:	4619      	mov	r1, r3
 8017e64:	2004      	movs	r0, #4
 8017e66:	f7ff ff2b 	bl	8017cc0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8017e6a:	2101      	movs	r1, #1
 8017e6c:	2000      	movs	r0, #0
 8017e6e:	f7fe f8c1 	bl	8015ff4 <otThreadSetEnabled>
 8017e72:	4603      	mov	r3, r0
 8017e74:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e76:	79fb      	ldrb	r3, [r7, #7]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d004      	beq.n	8017e86 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8017e7c:	79fb      	ldrb	r3, [r7, #7]
 8017e7e:	4619      	mov	r1, r3
 8017e80:	2005      	movs	r0, #5
 8017e82:	f7ff ff1d 	bl	8017cc0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 8017e86:	2100      	movs	r1, #0
 8017e88:	2000      	movs	r0, #0
 8017e8a:	f7fe f8b3 	bl	8015ff4 <otThreadSetEnabled>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017e92:	79fb      	ldrb	r3, [r7, #7]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d004      	beq.n	8017ea2 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8017e98:	79fb      	ldrb	r3, [r7, #7]
 8017e9a:	4619      	mov	r1, r3
 8017e9c:	2005      	movs	r0, #5
 8017e9e:	f7ff ff0f 	bl	8017cc0 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8017ea2:	2100      	movs	r1, #0
 8017ea4:	2000      	movs	r0, #0
 8017ea6:	f7fd fa3c 	bl	8015322 <otIp6SetEnabled>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017eae:	79fb      	ldrb	r3, [r7, #7]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d004      	beq.n	8017ebe <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8017eb4:	79fb      	ldrb	r3, [r7, #7]
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	2004      	movs	r0, #4
 8017eba:	f7ff ff01 	bl	8017cc0 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8017ebe:	2106      	movs	r1, #6
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	f7fd fdc5 	bl	8015a50 <otPlatRadioSetTransmitPower>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017eca:	79fb      	ldrb	r3, [r7, #7]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d004      	beq.n	8017eda <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017ed0:	79fb      	ldrb	r3, [r7, #7]
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	2002      	movs	r0, #2
 8017ed6:	f7ff fef3 	bl	8017cc0 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8017eda:	2103      	movs	r1, #3
 8017edc:	2000      	movs	r0, #0
 8017ede:	f7fc fe09 	bl	8014af4 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 8017ee2:	2102      	movs	r1, #2
 8017ee4:	2000      	movs	r0, #0
 8017ee6:	f7fc fdd6 	bl	8014a96 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 8017eea:	4940      	ldr	r1, [pc, #256]	; (8017fec <APP_THREAD_DeviceConfig+0x220>)
 8017eec:	2000      	movs	r0, #0
 8017eee:	f7fe f8e0 	bl	80160b2 <otThreadSetMasterKey>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017ef6:	79fb      	ldrb	r3, [r7, #7]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d004      	beq.n	8017f06 <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017efc:	79fb      	ldrb	r3, [r7, #7]
 8017efe:	4619      	mov	r1, r3
 8017f00:	2002      	movs	r0, #2
 8017f02:	f7ff fedd 	bl	8017cc0 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 8017f06:	493a      	ldr	r1, [pc, #232]	; (8017ff0 <APP_THREAD_DeviceConfig+0x224>)
 8017f08:	2000      	movs	r0, #0
 8017f0a:	f7fe f901 	bl	8016110 <otThreadSetNetworkName>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f12:	79fb      	ldrb	r3, [r7, #7]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d004      	beq.n	8017f22 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017f18:	79fb      	ldrb	r3, [r7, #7]
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	2002      	movs	r0, #2
 8017f1e:	f7ff fecf 	bl	8017cc0 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 8017f22:	4934      	ldr	r1, [pc, #208]	; (8017ff4 <APP_THREAD_DeviceConfig+0x228>)
 8017f24:	2000      	movs	r0, #0
 8017f26:	f7fe f895 	bl	8016054 <otThreadSetExtendedPanId>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f2e:	79fb      	ldrb	r3, [r7, #7]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d004      	beq.n	8017f3e <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017f34:	79fb      	ldrb	r3, [r7, #7]
 8017f36:	4619      	mov	r1, r3
 8017f38:	2002      	movs	r0, #2
 8017f3a:	f7ff fec1 	bl	8017cc0 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8017f3e:	2101      	movs	r1, #1
 8017f40:	2000      	movs	r0, #0
 8017f42:	f7fd f9ee 	bl	8015322 <otIp6SetEnabled>
 8017f46:	4603      	mov	r3, r0
 8017f48:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f4a:	79fb      	ldrb	r3, [r7, #7]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d004      	beq.n	8017f5a <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8017f50:	79fb      	ldrb	r3, [r7, #7]
 8017f52:	4619      	mov	r1, r3
 8017f54:	2004      	movs	r0, #4
 8017f56:	f7ff feb3 	bl	8017cc0 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 8017f5a:	2101      	movs	r1, #1
 8017f5c:	2000      	movs	r0, #0
 8017f5e:	f7fe f849 	bl	8015ff4 <otThreadSetEnabled>
 8017f62:	4603      	mov	r3, r0
 8017f64:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f66:	79fb      	ldrb	r3, [r7, #7]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d004      	beq.n	8017f76 <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8017f6c:	79fb      	ldrb	r3, [r7, #7]
 8017f6e:	4619      	mov	r1, r3
 8017f70:	2005      	movs	r0, #5
 8017f72:	f7ff fea5 	bl	8017cc0 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8017f76:	f241 6133 	movw	r1, #5683	; 0x1633
 8017f7a:	2000      	movs	r0, #0
 8017f7c:	f7fd f892 	bl	80150a4 <otCoapStart>
 8017f80:	4603      	mov	r3, r0
 8017f82:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8017f84:	491c      	ldr	r1, [pc, #112]	; (8017ff8 <APP_THREAD_DeviceConfig+0x22c>)
 8017f86:	2000      	movs	r0, #0
 8017f88:	f7fd f8bc 	bl	8015104 <otCoapAddResource>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8017f90:	491a      	ldr	r1, [pc, #104]	; (8017ffc <APP_THREAD_DeviceConfig+0x230>)
 8017f92:	2000      	movs	r0, #0
 8017f94:	f7fd f8b6 	bl	8015104 <otCoapAddResource>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8017f9c:	4918      	ldr	r1, [pc, #96]	; (8018000 <APP_THREAD_DeviceConfig+0x234>)
 8017f9e:	2000      	movs	r0, #0
 8017fa0:	f7fd f8b0 	bl	8015104 <otCoapAddResource>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 8017fa8:	4916      	ldr	r1, [pc, #88]	; (8018004 <APP_THREAD_DeviceConfig+0x238>)
 8017faa:	2000      	movs	r0, #0
 8017fac:	f7fd f8aa 	bl	8015104 <otCoapAddResource>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8017fb4:	4914      	ldr	r1, [pc, #80]	; (8018008 <APP_THREAD_DeviceConfig+0x23c>)
 8017fb6:	2000      	movs	r0, #0
 8017fb8:	f7fd f8a4 	bl	8015104 <otCoapAddResource>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8017fc0:	4912      	ldr	r1, [pc, #72]	; (801800c <APP_THREAD_DeviceConfig+0x240>)
 8017fc2:	4813      	ldr	r0, [pc, #76]	; (8018010 <APP_THREAD_DeviceConfig+0x244>)
 8017fc4:	f7fd fa13 	bl	80153ee <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 8017fc8:	4a12      	ldr	r2, [pc, #72]	; (8018014 <APP_THREAD_DeviceConfig+0x248>)
 8017fca:	4b10      	ldr	r3, [pc, #64]	; (801800c <APP_THREAD_DeviceConfig+0x240>)
 8017fcc:	4614      	mov	r4, r2
 8017fce:	6818      	ldr	r0, [r3, #0]
 8017fd0:	6859      	ldr	r1, [r3, #4]
 8017fd2:	689a      	ldr	r2, [r3, #8]
 8017fd4:	68db      	ldr	r3, [r3, #12]
 8017fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 8017fd8:	480f      	ldr	r0, [pc, #60]	; (8018018 <APP_THREAD_DeviceConfig+0x24c>)
 8017fda:	f000 f8e5 	bl	80181a8 <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 8017fde:	bf00      	nop
 8017fe0:	370c      	adds	r7, #12
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd90      	pop	{r4, r7, pc}
 8017fe6:	bf00      	nop
 8017fe8:	0801801d 	.word	0x0801801d
 8017fec:	0801bf20 	.word	0x0801bf20
 8017ff0:	0801bf38 	.word	0x0801bf38
 8017ff4:	0801bf30 	.word	0x0801bf30
 8017ff8:	20000198 	.word	0x20000198
 8017ffc:	200001a8 	.word	0x200001a8
 8018000:	200001b8 	.word	0x200001b8
 8018004:	200001c8 	.word	0x200001c8
 8018008:	200001d8 	.word	0x200001d8
 801800c:	200289e8 	.word	0x200289e8
 8018010:	0801b934 	.word	0x0801b934
 8018014:	20027820 	.word	0x20027820
 8018018:	20000200 	.word	0x20000200

0801801c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 801801c:	b590      	push	{r4, r7, lr}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	f003 0304 	and.w	r3, r3, #4
 801802c:	2b00      	cmp	r3, #0
 801802e:	d02f      	beq.n	8018090 <APP_THREAD_StateNotif+0x74>
  {
    switch (otThreadGetDeviceRole(NULL))
 8018030:	2000      	movs	r0, #0
 8018032:	f7fe f89c 	bl	801616e <otThreadGetDeviceRole>
 8018036:	4603      	mov	r3, r0
 8018038:	2b04      	cmp	r3, #4
 801803a:	d826      	bhi.n	801808a <APP_THREAD_StateNotif+0x6e>
 801803c:	a201      	add	r2, pc, #4	; (adr r2, 8018044 <APP_THREAD_StateNotif+0x28>)
 801803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018042:	bf00      	nop
 8018044:	08018059 	.word	0x08018059
 8018048:	08018069 	.word	0x08018069
 801804c:	08018079 	.word	0x08018079
 8018050:	0801807f 	.word	0x0801807f
 8018054:	08018085 	.word	0x08018085
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 8018058:	4a10      	ldr	r2, [pc, #64]	; (801809c <APP_THREAD_StateNotif+0x80>)
 801805a:	f04f 0300 	mov.w	r3, #0
 801805e:	f04f 0400 	mov.w	r4, #0
 8018062:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 8018066:	e014      	b.n	8018092 <APP_THREAD_StateNotif+0x76>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 8018068:	4a0c      	ldr	r2, [pc, #48]	; (801809c <APP_THREAD_StateNotif+0x80>)
 801806a:	f04f 0300 	mov.w	r3, #0
 801806e:	f04f 0400 	mov.w	r4, #0
 8018072:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8018076:	e00c      	b.n	8018092 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8018078:	f000 f90a 	bl	8018290 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 801807c:	e009      	b.n	8018092 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 801807e:	f000 f907 	bl	8018290 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8018082:	e006      	b.n	8018092 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8018084:	f000 f904 	bl	8018290 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8018088:	e003      	b.n	8018092 <APP_THREAD_StateNotif+0x76>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 801808a:	f000 f901 	bl	8018290 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 801808e:	e000      	b.n	8018092 <APP_THREAD_StateNotif+0x76>
    }
  }
 8018090:	bf00      	nop
}
 8018092:	bf00      	nop
 8018094:	370c      	adds	r7, #12
 8018096:	46bd      	mov	sp, r7
 8018098:	bd90      	pop	{r4, r7, pc}
 801809a:	bf00      	nop
 801809c:	20027820 	.word	0x20027820

080180a0 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 80180a0:	b480      	push	{r7}
 80180a2:	b083      	sub	sp, #12
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
 80180a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 80180aa:	bf00      	nop
 80180ac:	370c      	adds	r7, #12
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr
	...

080180b8 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b088      	sub	sp, #32
 80180bc:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 80180be:	1d3b      	adds	r3, r7, #4
 80180c0:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80180c2:	6978      	ldr	r0, [r7, #20]
 80180c4:	f7fd fd24 	bl	8015b10 <SHCI_GetWirelessFwInfo>
 80180c8:	4603      	mov	r3, r0
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d004      	beq.n	80180d8 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80180ce:	2101      	movs	r1, #1
 80180d0:	201a      	movs	r0, #26
 80180d2:	f7ff fdf5 	bl	8017cc0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80180d6:	e03d      	b.n	8018154 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 80180d8:	4a20      	ldr	r2, [pc, #128]	; (801815c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80180da:	2101      	movs	r1, #1
 80180dc:	2000      	movs	r0, #0
 80180de:	f7ed fd53 	bl	8005b88 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80180e2:	4a1f      	ldr	r2, [pc, #124]	; (8018160 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80180e4:	2101      	movs	r1, #1
 80180e6:	2000      	movs	r0, #0
 80180e8:	f7ed fd4e 	bl	8005b88 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	4619      	mov	r1, r3
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	785b      	ldrb	r3, [r3, #1]
 80180f6:	461a      	mov	r2, r3
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	789b      	ldrb	r3, [r3, #2]
 80180fc:	9301      	str	r3, [sp, #4]
 80180fe:	9200      	str	r2, [sp, #0]
 8018100:	460b      	mov	r3, r1
 8018102:	4a18      	ldr	r2, [pc, #96]	; (8018164 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8018104:	2101      	movs	r1, #1
 8018106:	2000      	movs	r0, #0
 8018108:	f7ed fd3e 	bl	8005b88 <logApplication>
    switch(p_wireless_info->StackType)
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	7a5b      	ldrb	r3, [r3, #9]
 8018110:	2b11      	cmp	r3, #17
 8018112:	d009      	beq.n	8018128 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8018114:	2b50      	cmp	r3, #80	; 0x50
 8018116:	d00d      	beq.n	8018134 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8018118:	2b10      	cmp	r3, #16
 801811a:	d111      	bne.n	8018140 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 801811c:	4a12      	ldr	r2, [pc, #72]	; (8018168 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 801811e:	2101      	movs	r1, #1
 8018120:	2000      	movs	r0, #0
 8018122:	f7ed fd31 	bl	8005b88 <logApplication>
      break;
 8018126:	e010      	b.n	801814a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8018128:	4a10      	ldr	r2, [pc, #64]	; (801816c <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 801812a:	2101      	movs	r1, #1
 801812c:	2000      	movs	r0, #0
 801812e:	f7ed fd2b 	bl	8005b88 <logApplication>
      break;
 8018132:	e00a      	b.n	801814a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8018134:	4a0e      	ldr	r2, [pc, #56]	; (8018170 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8018136:	2101      	movs	r1, #1
 8018138:	2000      	movs	r0, #0
 801813a:	f7ed fd25 	bl	8005b88 <logApplication>
      break;
 801813e:	e004      	b.n	801814a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8018140:	2101      	movs	r1, #1
 8018142:	201a      	movs	r0, #26
 8018144:	f7ff fdbc 	bl	8017cc0 <APP_THREAD_Error>
      break;
 8018148:	bf00      	nop
    APP_DBG("**********************************************************");
 801814a:	4a04      	ldr	r2, [pc, #16]	; (801815c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801814c:	2101      	movs	r1, #1
 801814e:	2000      	movs	r0, #0
 8018150:	f7ed fd1a 	bl	8005b88 <logApplication>
}
 8018154:	bf00      	nop
 8018156:	3718      	adds	r7, #24
 8018158:	46bd      	mov	sp, r7
 801815a:	bd80      	pop	{r7, pc}
 801815c:	0801b93c 	.word	0x0801b93c
 8018160:	0801b978 	.word	0x0801b978
 8018164:	0801b994 	.word	0x0801b994
 8018168:	0801b9ac 	.word	0x0801b9ac
 801816c:	0801b9c4 	.word	0x0801b9c4
 8018170:	0801b9dc 	.word	0x0801b9dc

08018174 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801817c:	f04f 32ff 	mov.w	r2, #4294967295
 8018180:	2101      	movs	r1, #1
 8018182:	2001      	movs	r0, #1
 8018184:	f7f8 fa4c 	bl	8010620 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8018188:	f000 fd96 	bl	8018cb8 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801818c:	e7f6      	b.n	801817c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0801818e <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 801818e:	b580      	push	{r7, lr}
 8018190:	b082      	sub	sp, #8
 8018192:	af00      	add	r7, sp, #0
 8018194:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8018196:	f04f 32ff 	mov.w	r2, #4294967295
 801819a:	2101      	movs	r1, #1
 801819c:	2001      	movs	r0, #1
 801819e:	f7f8 fa3f 	bl	8010620 <osThreadFlagsWait>
    Send_CLI_To_M0();
 80181a2:	f000 fd0b 	bl	8018bbc <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80181a6:	e7f6      	b.n	8018196 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

080181a8 <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 80181a8:	b480      	push	{r7}
 80181aa:	b085      	sub	sp, #20
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 80181b0:	2300      	movs	r3, #0
 80181b2:	73fb      	strb	r3, [r7, #15]
 80181b4:	e00c      	b.n	80181d0 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 80181b6:	7bfa      	ldrb	r2, [r7, #15]
 80181b8:	4b0a      	ldr	r3, [pc, #40]	; (80181e4 <stm32UID+0x3c>)
 80181ba:	4413      	add	r3, r2
 80181bc:	4619      	mov	r1, r3
 80181be:	7bfb      	ldrb	r3, [r7, #15]
 80181c0:	687a      	ldr	r2, [r7, #4]
 80181c2:	4413      	add	r3, r2
 80181c4:	780a      	ldrb	r2, [r1, #0]
 80181c6:	b2d2      	uxtb	r2, r2
 80181c8:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 80181ca:	7bfb      	ldrb	r3, [r7, #15]
 80181cc:	3301      	adds	r3, #1
 80181ce:	73fb      	strb	r3, [r7, #15]
 80181d0:	7bfb      	ldrb	r3, [r7, #15]
 80181d2:	2b0b      	cmp	r3, #11
 80181d4:	d9ef      	bls.n	80181b6 <stm32UID+0xe>
    }
  }
 80181d6:	bf00      	nop
 80181d8:	3714      	adds	r7, #20
 80181da:	46bd      	mov	sp, r7
 80181dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e0:	4770      	bx	lr
 80181e2:	bf00      	nop
 80181e4:	1fff7590 	.word	0x1fff7590

080181e8 <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80181e8:	b480      	push	{r7}
 80181ea:	b085      	sub	sp, #20
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	607a      	str	r2, [r7, #4]
 80181f4:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 80181f6:	bf00      	nop
 80181f8:	3714      	adds	r7, #20
 80181fa:	46bd      	mov	sp, r7
 80181fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018200:	4770      	bx	lr
	...

08018204 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8018204:	b5b0      	push	{r4, r5, r7, lr}
 8018206:	b084      	sub	sp, #16
 8018208:	af00      	add	r7, sp, #0
 801820a:	60f8      	str	r0, [r7, #12]
 801820c:	60b9      	str	r1, [r7, #8]
 801820e:	607a      	str	r2, [r7, #4]
 8018210:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8018212:	68b8      	ldr	r0, [r7, #8]
 8018214:	f7fd f9a8 	bl	8015568 <otMessageGetOffset>
 8018218:	4603      	mov	r3, r0
 801821a:	4619      	mov	r1, r3
 801821c:	2318      	movs	r3, #24
 801821e:	4a0e      	ldr	r2, [pc, #56]	; (8018258 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8018220:	68b8      	ldr	r0, [r7, #8]
 8018222:	f7fd fa06 	bl	8015632 <otMessageRead>
 8018226:	4603      	mov	r3, r0
 8018228:	2b18      	cmp	r3, #24
 801822a:	d110      	bne.n	801824e <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 801822c:	4a0b      	ldr	r2, [pc, #44]	; (801825c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 801822e:	4b0a      	ldr	r3, [pc, #40]	; (8018258 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8018230:	4614      	mov	r4, r2
 8018232:	461d      	mov	r5, r3
 8018234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018238:	e895 0003 	ldmia.w	r5, {r0, r1}
 801823c:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8018240:	4b06      	ldr	r3, [pc, #24]	; (801825c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8018242:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018246:	4618      	mov	r0, r3
 8018248:	4621      	mov	r1, r4
 801824a:	f000 f9af 	bl	80185ac <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 801824e:	bf00      	nop
 8018250:	3710      	adds	r7, #16
 8018252:	46bd      	mov	sp, r7
 8018254:	bdb0      	pop	{r4, r5, r7, pc}
 8018256:	bf00      	nop
 8018258:	20027838 	.word	0x20027838
 801825c:	20027820 	.word	0x20027820

08018260 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018260:	b480      	push	{r7}
 8018262:	b085      	sub	sp, #20
 8018264:	af00      	add	r7, sp, #0
 8018266:	60f8      	str	r0, [r7, #12]
 8018268:	60b9      	str	r1, [r7, #8]
 801826a:	607a      	str	r2, [r7, #4]
 801826c:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 801826e:	4a06      	ldr	r2, [pc, #24]	; (8018288 <APP_THREAD_DummyReqHandler+0x28>)
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 8018274:	4a05      	ldr	r2, [pc, #20]	; (801828c <APP_THREAD_DummyReqHandler+0x2c>)
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	6013      	str	r3, [r2, #0]
}
 801827a:	bf00      	nop
 801827c:	3714      	adds	r7, #20
 801827e:	46bd      	mov	sp, r7
 8018280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018284:	4770      	bx	lr
 8018286:	bf00      	nop
 8018288:	200289a4 	.word	0x200289a4
 801828c:	200289fc 	.word	0x200289fc

08018290 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 8018290:	b580      	push	{r7, lr}
 8018292:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 8018294:	4906      	ldr	r1, [pc, #24]	; (80182b0 <APP_THREAD_UpdateBorderRouter+0x20>)
 8018296:	4807      	ldr	r0, [pc, #28]	; (80182b4 <APP_THREAD_UpdateBorderRouter+0x24>)
 8018298:	f7fd f873 	bl	8015382 <otIp6IsAddressEqual>
 801829c:	4603      	mov	r3, r0
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d003      	beq.n	80182aa <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 80182a2:	f000 f809 	bl	80182b8 <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 80182a6:	f000 f81d 	bl	80182e4 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 80182aa:	bf00      	nop
 80182ac:	bd80      	pop	{r7, pc}
 80182ae:	bf00      	nop
 80182b0:	20027820 	.word	0x20027820
 80182b4:	200289e8 	.word	0x200289e8

080182b8 <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b084      	sub	sp, #16
 80182bc:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 80182be:	2301      	movs	r3, #1
 80182c0:	9302      	str	r3, [sp, #8]
 80182c2:	2301      	movs	r3, #1
 80182c4:	9301      	str	r3, [sp, #4]
 80182c6:	2300      	movs	r3, #0
 80182c8:	9300      	str	r3, [sp, #0]
 80182ca:	4b04      	ldr	r3, [pc, #16]	; (80182dc <APP_THREAD_SyncWithBorderRouter+0x24>)
 80182cc:	4a04      	ldr	r2, [pc, #16]	; (80182e0 <APP_THREAD_SyncWithBorderRouter+0x28>)
 80182ce:	2100      	movs	r1, #0
 80182d0:	2000      	movs	r0, #0
 80182d2:	f000 fab3 	bl	801883c <APP_THREAD_SendCoapMsgForBorderSync>
}
 80182d6:	bf00      	nop
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	0801bef0 	.word	0x0801bef0
 80182e0:	200289e8 	.word	0x200289e8

080182e4 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b084      	sub	sp, #16
 80182e8:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, NO_ACK,
 80182ea:	2301      	movs	r3, #1
 80182ec:	9302      	str	r3, [sp, #8]
 80182ee:	2303      	movs	r3, #3
 80182f0:	9301      	str	r3, [sp, #4]
 80182f2:	2300      	movs	r3, #0
 80182f4:	9300      	str	r3, [sp, #0]
 80182f6:	4b04      	ldr	r3, [pc, #16]	; (8018308 <APP_THREAD_SendMyInfo+0x24>)
 80182f8:	4a04      	ldr	r2, [pc, #16]	; (801830c <APP_THREAD_SendMyInfo+0x28>)
 80182fa:	2120      	movs	r1, #32
 80182fc:	4804      	ldr	r0, [pc, #16]	; (8018310 <APP_THREAD_SendMyInfo+0x2c>)
 80182fe:	f000 f9bf 	bl	8018680 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8018302:	bf00      	nop
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}
 8018308:	0801bf10 	.word	0x0801bf10
 801830c:	20027820 	.word	0x20027820
 8018310:	200001e8 	.word	0x200001e8

08018314 <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 8018314:	b580      	push	{r7, lr}
 8018316:	b088      	sub	sp, #32
 8018318:	af04      	add	r7, sp, #16
 801831a:	60f8      	str	r0, [r7, #12]
 801831c:	460b      	mov	r3, r1
 801831e:	607a      	str	r2, [r7, #4]
 8018320:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 8018322:	7afb      	ldrb	r3, [r7, #11]
 8018324:	b299      	uxth	r1, r3
 8018326:	2301      	movs	r3, #1
 8018328:	9302      	str	r3, [sp, #8]
 801832a:	2303      	movs	r3, #3
 801832c:	9301      	str	r3, [sp, #4]
 801832e:	2300      	movs	r3, #0
 8018330:	9300      	str	r3, [sp, #0]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	4a03      	ldr	r2, [pc, #12]	; (8018344 <APP_THREAD_SendBorderMessage+0x30>)
 8018336:	68f8      	ldr	r0, [r7, #12]
 8018338:	f000 f9a2 	bl	8018680 <APP_THREAD_SendCoapMsg>
}
 801833c:	bf00      	nop
 801833e:	3710      	adds	r7, #16
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	20027820 	.word	0x20027820

08018348 <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 8018348:	b580      	push	{r7, lr}
 801834a:	b086      	sub	sp, #24
 801834c:	af04      	add	r7, sp, #16
 801834e:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 8018350:	2301      	movs	r3, #1
 8018352:	9302      	str	r3, [sp, #8]
 8018354:	2303      	movs	r3, #3
 8018356:	9301      	str	r3, [sp, #4]
 8018358:	2300      	movs	r3, #0
 801835a:	9300      	str	r3, [sp, #0]
 801835c:	4b04      	ldr	r3, [pc, #16]	; (8018370 <APP_THREAD_SendBorderPacket+0x28>)
 801835e:	4a05      	ldr	r2, [pc, #20]	; (8018374 <APP_THREAD_SendBorderPacket+0x2c>)
 8018360:	21cc      	movs	r1, #204	; 0xcc
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f000 f98c 	bl	8018680 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 8018368:	bf00      	nop
 801836a:	3708      	adds	r7, #8
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}
 8018370:	0801bf00 	.word	0x0801bf00
 8018374:	20027820 	.word	0x20027820

08018378 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018378:	b580      	push	{r7, lr}
 801837a:	b084      	sub	sp, #16
 801837c:	af00      	add	r7, sp, #0
 801837e:	60f8      	str	r0, [r7, #12]
 8018380:	60b9      	str	r1, [r7, #8]
 8018382:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8018384:	68f8      	ldr	r0, [r7, #12]
 8018386:	f7fc fd6e 	bl	8014e66 <otCoapHeaderGetCode>
 801838a:	4603      	mov	r3, r0
 801838c:	2b01      	cmp	r3, #1
 801838e:	d107      	bne.n	80183a0 <APP_THREAD_CoapLightsSimpleRequestHandler+0x28>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	b299      	uxth	r1, r3
 8018394:	2304      	movs	r3, #4
 8018396:	4a23      	ldr	r2, [pc, #140]	; (8018424 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8018398:	68f8      	ldr	r0, [r7, #12]
 801839a:	f000 fb05 	bl	80189a8 <APP_THREAD_SendDataResponse>
			break;
 801839e:	e03d      	b.n	801841c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 80183a0:	68b8      	ldr	r0, [r7, #8]
 80183a2:	f7fd f8e1 	bl	8015568 <otMessageGetOffset>
 80183a6:	4603      	mov	r3, r0
 80183a8:	4619      	mov	r1, r3
 80183aa:	2304      	movs	r3, #4
 80183ac:	4a1d      	ldr	r2, [pc, #116]	; (8018424 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80183ae:	68b8      	ldr	r0, [r7, #8]
 80183b0:	f7fd f93f 	bl	8015632 <otMessageRead>
 80183b4:	4603      	mov	r3, r0
 80183b6:	2b04      	cmp	r3, #4
 80183b8:	d112      	bne.n	80183e0 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80183ba:	68f8      	ldr	r0, [r7, #12]
 80183bc:	f7fc fd53 	bl	8014e66 <otCoapHeaderGetCode>
 80183c0:	4603      	mov	r3, r0
 80183c2:	2b03      	cmp	r3, #3
 80183c4:	d005      	beq.n	80183d2 <APP_THREAD_CoapLightsSimpleRequestHandler+0x5a>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 80183c6:	68f8      	ldr	r0, [r7, #12]
 80183c8:	f7fc fd4d 	bl	8014e66 <otCoapHeaderGetCode>
 80183cc:	4603      	mov	r3, r0
 80183ce:	2b02      	cmp	r3, #2
 80183d0:	d106      	bne.n	80183e0 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 80183d2:	4b15      	ldr	r3, [pc, #84]	; (8018428 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 80183d4:	6818      	ldr	r0, [r3, #0]
 80183d6:	2300      	movs	r3, #0
 80183d8:	2200      	movs	r2, #0
 80183da:	4912      	ldr	r1, [pc, #72]	; (8018424 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80183dc:	f7f8 fe30 	bl	8011040 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 80183e0:	4a12      	ldr	r2, [pc, #72]	; (801842c <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 80183e6:	4a12      	ldr	r2, [pc, #72]	; (8018430 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 80183e8:	68bb      	ldr	r3, [r7, #8]
 80183ea:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80183ec:	68f8      	ldr	r0, [r7, #12]
 80183ee:	f7fc fd0c 	bl	8014e0a <otCoapHeaderGetType>
 80183f2:	4603      	mov	r3, r0
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d107      	bne.n	8018408 <APP_THREAD_CoapLightsSimpleRequestHandler+0x90>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	b299      	uxth	r1, r3
 80183fc:	2300      	movs	r3, #0
 80183fe:	2200      	movs	r2, #0
 8018400:	68f8      	ldr	r0, [r7, #12]
 8018402:	f000 fad1 	bl	80189a8 <APP_THREAD_SendDataResponse>
			break;
 8018406:	e009      	b.n	801841c <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8018408:	68b8      	ldr	r0, [r7, #8]
 801840a:	f7fd f8ad 	bl	8015568 <otMessageGetOffset>
 801840e:	4603      	mov	r3, r0
 8018410:	4619      	mov	r1, r3
 8018412:	2301      	movs	r3, #1
 8018414:	4a07      	ldr	r2, [pc, #28]	; (8018434 <APP_THREAD_CoapLightsSimpleRequestHandler+0xbc>)
 8018416:	68b8      	ldr	r0, [r7, #8]
 8018418:	f7fd f90b 	bl	8015632 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 801841c:	bf00      	nop
 801841e:	3710      	adds	r7, #16
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}
 8018424:	200280a0 	.word	0x200280a0
 8018428:	20027c58 	.word	0x20027c58
 801842c:	200289a4 	.word	0x200289a4
 8018430:	200289fc 	.word	0x200289fc
 8018434:	20027819 	.word	0x20027819

08018438 <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	60f8      	str	r0, [r7, #12]
 8018440:	60b9      	str	r1, [r7, #8]
 8018442:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8018444:	68f8      	ldr	r0, [r7, #12]
 8018446:	f7fc fd0e 	bl	8014e66 <otCoapHeaderGetCode>
 801844a:	4603      	mov	r3, r0
 801844c:	2b01      	cmp	r3, #1
 801844e:	d106      	bne.n	801845e <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	68fa      	ldr	r2, [r7, #12]
 8018454:	2106      	movs	r1, #6
 8018456:	481a      	ldr	r0, [pc, #104]	; (80184c0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8018458:	f000 faa6 	bl	80189a8 <APP_THREAD_SendDataResponse>
			break;
 801845c:	e02c      	b.n	80184b8 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 801845e:	68b8      	ldr	r0, [r7, #8]
 8018460:	f7fd f882 	bl	8015568 <otMessageGetOffset>
 8018464:	4603      	mov	r3, r0
 8018466:	4619      	mov	r1, r3
 8018468:	2306      	movs	r3, #6
 801846a:	4a15      	ldr	r2, [pc, #84]	; (80184c0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 801846c:	68b8      	ldr	r0, [r7, #8]
 801846e:	f7fd f8e0 	bl	8015632 <otMessageRead>
 8018472:	4603      	mov	r3, r0
 8018474:	2b06      	cmp	r3, #6
 8018476:	d112      	bne.n	801849e <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8018478:	68f8      	ldr	r0, [r7, #12]
 801847a:	f7fc fcf4 	bl	8014e66 <otCoapHeaderGetCode>
 801847e:	4603      	mov	r3, r0
 8018480:	2b03      	cmp	r3, #3
 8018482:	d005      	beq.n	8018490 <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8018484:	68f8      	ldr	r0, [r7, #12]
 8018486:	f7fc fcee 	bl	8014e66 <otCoapHeaderGetCode>
 801848a:	4603      	mov	r3, r0
 801848c:	2b02      	cmp	r3, #2
 801848e:	d106      	bne.n	801849e <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8018490:	4b0c      	ldr	r3, [pc, #48]	; (80184c4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 8018492:	6818      	ldr	r0, [r3, #0]
 8018494:	2300      	movs	r3, #0
 8018496:	2200      	movs	r2, #0
 8018498:	4909      	ldr	r1, [pc, #36]	; (80184c0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 801849a:	f7f8 fdd1 	bl	8011040 <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801849e:	68f8      	ldr	r0, [r7, #12]
 80184a0:	f7fc fcb3 	bl	8014e0a <otCoapHeaderGetType>
 80184a4:	4603      	mov	r3, r0
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d106      	bne.n	80184b8 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	68fa      	ldr	r2, [r7, #12]
 80184ae:	2100      	movs	r1, #0
 80184b0:	2000      	movs	r0, #0
 80184b2:	f000 fa79 	bl	80189a8 <APP_THREAD_SendDataResponse>
			break;
 80184b6:	bf00      	nop
		}

	} while (false);
}
 80184b8:	bf00      	nop
 80184ba:	3710      	adds	r7, #16
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	200289bc 	.word	0x200289bc
 80184c4:	20028088 	.word	0x20028088

080184c8 <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80184c8:	b5b0      	push	{r4, r5, r7, lr}
 80184ca:	b084      	sub	sp, #16
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	60f8      	str	r0, [r7, #12]
 80184d0:	60b9      	str	r1, [r7, #8]
 80184d2:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 80184d4:	68b8      	ldr	r0, [r7, #8]
 80184d6:	f7fd f847 	bl	8015568 <otMessageGetOffset>
 80184da:	4603      	mov	r3, r0
 80184dc:	4619      	mov	r1, r3
 80184de:	2318      	movs	r3, #24
 80184e0:	4a1f      	ldr	r2, [pc, #124]	; (8018560 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 80184e2:	68b8      	ldr	r0, [r7, #8]
 80184e4:	f7fd f8a5 	bl	8015632 <otMessageRead>
 80184e8:	4603      	mov	r3, r0
 80184ea:	2b18      	cmp	r3, #24
 80184ec:	d11c      	bne.n	8018528 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80184ee:	68f8      	ldr	r0, [r7, #12]
 80184f0:	f7fc fcb9 	bl	8014e66 <otCoapHeaderGetCode>
 80184f4:	4603      	mov	r3, r0
 80184f6:	2b03      	cmp	r3, #3
 80184f8:	d005      	beq.n	8018506 <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 80184fa:	68f8      	ldr	r0, [r7, #12]
 80184fc:	f7fc fcb3 	bl	8014e66 <otCoapHeaderGetCode>
 8018500:	4603      	mov	r3, r0
 8018502:	2b02      	cmp	r3, #2
 8018504:	d110      	bne.n	8018528 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8018506:	4a17      	ldr	r2, [pc, #92]	; (8018564 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8018508:	4b15      	ldr	r3, [pc, #84]	; (8018560 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 801850a:	4614      	mov	r4, r2
 801850c:	461d      	mov	r5, r3
 801850e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018512:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018516:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 801851a:	4b12      	ldr	r3, [pc, #72]	; (8018564 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 801851c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018520:	4618      	mov	r0, r3
 8018522:	4621      	mov	r1, r4
 8018524:	f000 f842 	bl	80185ac <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 8018528:	4a0f      	ldr	r2, [pc, #60]	; (8018568 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 801852a:	68bb      	ldr	r3, [r7, #8]
 801852c:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 801852e:	68f8      	ldr	r0, [r7, #12]
 8018530:	f7fc fc99 	bl	8014e66 <otCoapHeaderGetCode>
 8018534:	4603      	mov	r3, r0
 8018536:	2b01      	cmp	r3, #1
 8018538:	d00c      	beq.n	8018554 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801853a:	68f8      	ldr	r0, [r7, #12]
 801853c:	f7fc fc65 	bl	8014e0a <otCoapHeaderGetType>
 8018540:	4603      	mov	r3, r0
 8018542:	2b00      	cmp	r3, #0
 8018544:	d107      	bne.n	8018556 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	68fa      	ldr	r2, [r7, #12]
 801854a:	2100      	movs	r1, #0
 801854c:	2000      	movs	r0, #0
 801854e:	f000 fa2b 	bl	80189a8 <APP_THREAD_SendDataResponse>
			break;
 8018552:	e000      	b.n	8018556 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 8018554:	bf00      	nop
		}

	} while (false);
}
 8018556:	bf00      	nop
 8018558:	3710      	adds	r7, #16
 801855a:	46bd      	mov	sp, r7
 801855c:	bdb0      	pop	{r4, r5, r7, pc}
 801855e:	bf00      	nop
 8018560:	20027838 	.word	0x20027838
 8018564:	20027820 	.word	0x20027820
 8018568:	200289fc 	.word	0x200289fc

0801856c <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 801856c:	b580      	push	{r7, lr}
 801856e:	b084      	sub	sp, #16
 8018570:	af00      	add	r7, sp, #0
 8018572:	60f8      	str	r0, [r7, #12]
 8018574:	60b9      	str	r1, [r7, #8]
 8018576:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8018578:	68f8      	ldr	r0, [r7, #12]
 801857a:	f7fc fc74 	bl	8014e66 <otCoapHeaderGetCode>
 801857e:	4603      	mov	r3, r0
 8018580:	2b01      	cmp	r3, #1
 8018582:	d103      	bne.n	801858c <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8018584:	f7ff feae 	bl	80182e4 <APP_THREAD_SendMyInfo>

			break;
 8018588:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 801858a:	e00b      	b.n	80185a4 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801858c:	68f8      	ldr	r0, [r7, #12]
 801858e:	f7fc fc3c 	bl	8014e0a <otCoapHeaderGetType>
 8018592:	4603      	mov	r3, r0
 8018594:	2b00      	cmp	r3, #0
 8018596:	d105      	bne.n	80185a4 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	68fa      	ldr	r2, [r7, #12]
 801859c:	2100      	movs	r1, #0
 801859e:	2000      	movs	r0, #0
 80185a0:	f000 fa02 	bl	80189a8 <APP_THREAD_SendDataResponse>
}
 80185a4:	bf00      	nop
 80185a6:	3710      	adds	r7, #16
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <updateRTC>:

void updateRTC(time_t now) {
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b088      	sub	sp, #32
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	f107 0208 	add.w	r2, r7, #8
 80185bc:	f107 010c 	add.w	r1, r7, #12
 80185c0:	4618      	mov	r0, r3
 80185c2:	f7ec feb7 	bl	8005334 <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80185c6:	f107 030c 	add.w	r3, r7, #12
 80185ca:	2200      	movs	r2, #0
 80185cc:	4619      	mov	r1, r3
 80185ce:	480a      	ldr	r0, [pc, #40]	; (80185f8 <updateRTC+0x4c>)
 80185d0:	f7f5 f991 	bl	800d8f6 <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80185d4:	f107 0308 	add.w	r3, r7, #8
 80185d8:	2200      	movs	r2, #0
 80185da:	4619      	mov	r1, r3
 80185dc:	4806      	ldr	r0, [pc, #24]	; (80185f8 <updateRTC+0x4c>)
 80185de:	f7f5 faaa 	bl	800db36 <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 80185e2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80185e6:	2100      	movs	r1, #0
 80185e8:	4803      	ldr	r0, [pc, #12]	; (80185f8 <updateRTC+0x4c>)
 80185ea:	f7f5 fc2b 	bl	800de44 <HAL_RTCEx_BKUPWrite>
}
 80185ee:	bf00      	nop
 80185f0:	3720      	adds	r7, #32
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	200287e4 	.word	0x200287e4

080185fc <APP_THREAD_CoapLightsComplexRequestHandler>:
//    BSP_LED_On(LED1);
//    APP_DBG(" ********* BUFFER HAS BEEN TRANFERED \r\n");
//  }
//}
static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b084      	sub	sp, #16
 8018600:	af00      	add	r7, sp, #0
 8018602:	60f8      	str	r0, [r7, #12]
 8018604:	60b9      	str	r1, [r7, #8]
 8018606:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 8018608:	68b8      	ldr	r0, [r7, #8]
 801860a:	f7fc ffad 	bl	8015568 <otMessageGetOffset>
 801860e:	4603      	mov	r3, r0
 8018610:	4619      	mov	r1, r3
 8018612:	2312      	movs	r3, #18
 8018614:	4a16      	ldr	r2, [pc, #88]	; (8018670 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8018616:	68b8      	ldr	r0, [r7, #8]
 8018618:	f7fd f80b 	bl	8015632 <otMessageRead>
 801861c:	4603      	mov	r3, r0
 801861e:	2b12      	cmp	r3, #18
 8018620:	d102      	bne.n	8018628 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8018622:	4813      	ldr	r0, [pc, #76]	; (8018670 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8018624:	f7eb fdae 	bl	8004184 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 8018628:	4a12      	ldr	r2, [pc, #72]	; (8018674 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 801862e:	4a12      	ldr	r2, [pc, #72]	; (8018678 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8018634:	68f8      	ldr	r0, [r7, #12]
 8018636:	f7fc fbe8 	bl	8014e0a <otCoapHeaderGetType>
 801863a:	4603      	mov	r3, r0
 801863c:	2b10      	cmp	r3, #16
 801863e:	d110      	bne.n	8018662 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8018640:	68f8      	ldr	r0, [r7, #12]
 8018642:	f7fc fc10 	bl	8014e66 <otCoapHeaderGetCode>
 8018646:	4603      	mov	r3, r0
 8018648:	2b03      	cmp	r3, #3
 801864a:	d10c      	bne.n	8018666 <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 801864c:	68b8      	ldr	r0, [r7, #8]
 801864e:	f7fc ff8b 	bl	8015568 <otMessageGetOffset>
 8018652:	4603      	mov	r3, r0
 8018654:	4619      	mov	r1, r3
 8018656:	2301      	movs	r3, #1
 8018658:	4a08      	ldr	r2, [pc, #32]	; (801867c <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 801865a:	68b8      	ldr	r0, [r7, #8]
 801865c:	f7fc ffe9 	bl	8015632 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 8018660:	e002      	b.n	8018668 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8018662:	bf00      	nop
 8018664:	e000      	b.n	8018668 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8018666:	bf00      	nop
}
 8018668:	bf00      	nop
 801866a:	3710      	adds	r7, #16
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}
 8018670:	200289d4 	.word	0x200289d4
 8018674:	200289a4 	.word	0x200289a4
 8018678:	200289fc 	.word	0x200289fc
 801867c:	20027819 	.word	0x20027819

08018680 <APP_THREAD_SendCoapMsg>:
//  }
//}

static char empty_message[10] = "";
void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8018680:	b590      	push	{r4, r7, lr}
 8018682:	b087      	sub	sp, #28
 8018684:	af02      	add	r7, sp, #8
 8018686:	60f8      	str	r0, [r7, #12]
 8018688:	607a      	str	r2, [r7, #4]
 801868a:	603b      	str	r3, [r7, #0]
 801868c:	460b      	mov	r3, r1
 801868e:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8018690:	222c      	movs	r2, #44	; 0x2c
 8018692:	2100      	movs	r1, #0
 8018694:	4862      	ldr	r0, [pc, #392]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018696:	f001 fe9a 	bl	801a3ce <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 801869a:	897b      	ldrh	r3, [r7, #10]
 801869c:	2b64      	cmp	r3, #100	; 0x64
 801869e:	d90c      	bls.n	80186ba <APP_THREAD_SendCoapMsg+0x3a>
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 80186a0:	4b5f      	ldr	r3, [pc, #380]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186a2:	4a60      	ldr	r2, [pc, #384]	; (8018824 <APP_THREAD_SendCoapMsg+0x1a4>)
 80186a4:	f103 0410 	add.w	r4, r3, #16
 80186a8:	4613      	mov	r3, r2
 80186aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80186ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 80186b0:	495b      	ldr	r1, [pc, #364]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186b2:	485d      	ldr	r0, [pc, #372]	; (8018828 <APP_THREAD_SendCoapMsg+0x1a8>)
 80186b4:	f7fc fe9b 	bl	80153ee <otIp6AddressFromString>
 80186b8:	e009      	b.n	80186ce <APP_THREAD_SendCoapMsg+0x4e>
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 80186ba:	4b59      	ldr	r3, [pc, #356]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186bc:	4a5b      	ldr	r2, [pc, #364]	; (801882c <APP_THREAD_SendCoapMsg+0x1ac>)
 80186be:	f103 0410 	add.w	r4, r3, #16
 80186c2:	4613      	mov	r3, r2
 80186c4:	6818      	ldr	r0, [r3, #0]
 80186c6:	6859      	ldr	r1, [r3, #4]
 80186c8:	689a      	ldr	r2, [r3, #8]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 80186ce:	4b54      	ldr	r3, [pc, #336]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186d0:	2201      	movs	r2, #1
 80186d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80186d6:	4b52      	ldr	r3, [pc, #328]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186d8:	f241 6233 	movw	r2, #5683	; 0x1633
 80186dc:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 80186de:	4b50      	ldr	r3, [pc, #320]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186e0:	2240      	movs	r2, #64	; 0x40
 80186e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80186e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d009      	beq.n	8018702 <APP_THREAD_SendCoapMsg+0x82>
 80186ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186f2:	2b03      	cmp	r3, #3
 80186f4:	d105      	bne.n	8018702 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80186f6:	2203      	movs	r2, #3
 80186f8:	2100      	movs	r1, #0
 80186fa:	484d      	ldr	r0, [pc, #308]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 80186fc:	f7fc fa29 	bl	8014b52 <otCoapHeaderInit>
 8018700:	e04a      	b.n	8018798 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8018702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d009      	beq.n	801871e <APP_THREAD_SendCoapMsg+0x9e>
 801870a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801870e:	2b01      	cmp	r3, #1
 8018710:	d105      	bne.n	801871e <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8018712:	2201      	movs	r2, #1
 8018714:	2100      	movs	r1, #0
 8018716:	4846      	ldr	r0, [pc, #280]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018718:	f7fc fa1b 	bl	8014b52 <otCoapHeaderInit>
 801871c:	e03c      	b.n	8018798 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 801871e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d009      	beq.n	801873a <APP_THREAD_SendCoapMsg+0xba>
 8018726:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801872a:	2b02      	cmp	r3, #2
 801872c:	d105      	bne.n	801873a <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 801872e:	2202      	movs	r2, #2
 8018730:	2100      	movs	r1, #0
 8018732:	483f      	ldr	r0, [pc, #252]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018734:	f7fc fa0d 	bl	8014b52 <otCoapHeaderInit>
 8018738:	e02e      	b.n	8018798 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 801873a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d109      	bne.n	8018756 <APP_THREAD_SendCoapMsg+0xd6>
 8018742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018746:	2b03      	cmp	r3, #3
 8018748:	d105      	bne.n	8018756 <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801874a:	2203      	movs	r2, #3
 801874c:	2110      	movs	r1, #16
 801874e:	4838      	ldr	r0, [pc, #224]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018750:	f7fc f9ff 	bl	8014b52 <otCoapHeaderInit>
 8018754:	e020      	b.n	8018798 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8018756:	f897 3020 	ldrb.w	r3, [r7, #32]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d109      	bne.n	8018772 <APP_THREAD_SendCoapMsg+0xf2>
 801875e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018762:	2b01      	cmp	r3, #1
 8018764:	d105      	bne.n	8018772 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8018766:	2201      	movs	r2, #1
 8018768:	2110      	movs	r1, #16
 801876a:	4831      	ldr	r0, [pc, #196]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 801876c:	f7fc f9f1 	bl	8014b52 <otCoapHeaderInit>
 8018770:	e012      	b.n	8018798 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8018772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d109      	bne.n	801878e <APP_THREAD_SendCoapMsg+0x10e>
 801877a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801877e:	2b02      	cmp	r3, #2
 8018780:	d105      	bne.n	801878e <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8018782:	2202      	movs	r2, #2
 8018784:	2110      	movs	r1, #16
 8018786:	482a      	ldr	r0, [pc, #168]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018788:	f7fc f9e3 	bl	8014b52 <otCoapHeaderInit>
 801878c:	e004      	b.n	8018798 <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801878e:	2102      	movs	r1, #2
 8018790:	4827      	ldr	r0, [pc, #156]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018792:	f7fc fa47 	bl	8014c24 <otCoapHeaderGenerateToken>
 8018796:	e040      	b.n	801881a <APP_THREAD_SendCoapMsg+0x19a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018798:	6839      	ldr	r1, [r7, #0]
 801879a:	4825      	ldr	r0, [pc, #148]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 801879c:	f7fc faa5 	bl	8014cea <otCoapHeaderAppendUriPathOptions>
 80187a0:	4603      	mov	r3, r0
 80187a2:	461a      	mov	r2, r3
 80187a4:	4b23      	ldr	r3, [pc, #140]	; (8018834 <APP_THREAD_SendCoapMsg+0x1b4>)
 80187a6:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80187a8:	212a      	movs	r1, #42	; 0x2a
 80187aa:	4821      	ldr	r0, [pc, #132]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187ac:	f7fc fa6a 	bl	8014c84 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 80187b0:	897b      	ldrh	r3, [r7, #10]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d002      	beq.n	80187bc <APP_THREAD_SendCoapMsg+0x13c>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 80187b6:	481e      	ldr	r0, [pc, #120]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187b8:	f7fc fac9 	bl	8014d4e <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80187bc:	491c      	ldr	r1, [pc, #112]	; (8018830 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187be:	2000      	movs	r0, #0
 80187c0:	f7fc fc08 	bl	8014fd4 <otCoapNewMessage>
 80187c4:	4602      	mov	r2, r0
 80187c6:	4b1c      	ldr	r3, [pc, #112]	; (8018838 <APP_THREAD_SendCoapMsg+0x1b8>)
 80187c8:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 80187ca:	897b      	ldrh	r3, [r7, #10]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d00a      	beq.n	80187e6 <APP_THREAD_SendCoapMsg+0x166>
			error = otMessageAppend(pOT_Message, message, msgSize);
 80187d0:	4b19      	ldr	r3, [pc, #100]	; (8018838 <APP_THREAD_SendCoapMsg+0x1b8>)
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	897a      	ldrh	r2, [r7, #10]
 80187d6:	68f9      	ldr	r1, [r7, #12]
 80187d8:	4618      	mov	r0, r3
 80187da:	f7fc fef3 	bl	80155c4 <otMessageAppend>
 80187de:	4603      	mov	r3, r0
 80187e0:	461a      	mov	r2, r3
 80187e2:	4b14      	ldr	r3, [pc, #80]	; (8018834 <APP_THREAD_SendCoapMsg+0x1b4>)
 80187e4:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 80187e6:	4b14      	ldr	r3, [pc, #80]	; (8018838 <APP_THREAD_SendCoapMsg+0x1b8>)
 80187e8:	6819      	ldr	r1, [r3, #0]
 80187ea:	2300      	movs	r3, #0
 80187ec:	9300      	str	r3, [sp, #0]
 80187ee:	2300      	movs	r3, #0
 80187f0:	4a0b      	ldr	r2, [pc, #44]	; (8018820 <APP_THREAD_SendCoapMsg+0x1a0>)
 80187f2:	2000      	movs	r0, #0
 80187f4:	f7fc fc1c 	bl	8015030 <otCoapSendRequest>
 80187f8:	4603      	mov	r3, r0
 80187fa:	461a      	mov	r2, r3
 80187fc:	4b0d      	ldr	r3, [pc, #52]	; (8018834 <APP_THREAD_SendCoapMsg+0x1b4>)
 80187fe:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018800:	4b0c      	ldr	r3, [pc, #48]	; (8018834 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d008      	beq.n	801881a <APP_THREAD_SendCoapMsg+0x19a>
 8018808:	4b0b      	ldr	r3, [pc, #44]	; (8018838 <APP_THREAD_SendCoapMsg+0x1b8>)
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d004      	beq.n	801881a <APP_THREAD_SendCoapMsg+0x19a>
			otMessageFree(pOT_Message);
 8018810:	4b09      	ldr	r3, [pc, #36]	; (8018838 <APP_THREAD_SendCoapMsg+0x1b8>)
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	4618      	mov	r0, r3
 8018816:	f7fc fe7c 	bl	8015512 <otMessageFree>
		}

	} while (false);
}
 801881a:	3714      	adds	r7, #20
 801881c:	46bd      	mov	sp, r7
 801881e:	bd90      	pop	{r4, r7, pc}
 8018820:	20027758 	.word	0x20027758
 8018824:	20027820 	.word	0x20027820
 8018828:	0801ba08 	.word	0x0801ba08
 801882c:	200289e8 	.word	0x200289e8
 8018830:	20027784 	.word	0x20027784
 8018834:	20027818 	.word	0x20027818
 8018838:	20027814 	.word	0x20027814

0801883c <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 801883c:	b590      	push	{r4, r7, lr}
 801883e:	b087      	sub	sp, #28
 8018840:	af02      	add	r7, sp, #8
 8018842:	60f8      	str	r0, [r7, #12]
 8018844:	607a      	str	r2, [r7, #4]
 8018846:	603b      	str	r3, [r7, #0]
 8018848:	460b      	mov	r3, r1
 801884a:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 801884c:	222c      	movs	r2, #44	; 0x2c
 801884e:	2100      	movs	r1, #0
 8018850:	484e      	ldr	r0, [pc, #312]	; (801898c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018852:	f001 fdbc 	bl	801a3ce <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8018856:	4b4d      	ldr	r3, [pc, #308]	; (801898c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018858:	4a4d      	ldr	r2, [pc, #308]	; (8018990 <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 801885a:	f103 0410 	add.w	r4, r3, #16
 801885e:	4613      	mov	r3, r2
 8018860:	6818      	ldr	r0, [r3, #0]
 8018862:	6859      	ldr	r1, [r3, #4]
 8018864:	689a      	ldr	r2, [r3, #8]
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801886a:	4b48      	ldr	r3, [pc, #288]	; (801898c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 801886c:	2201      	movs	r2, #1
 801886e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8018872:	4b46      	ldr	r3, [pc, #280]	; (801898c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018874:	f241 6233 	movw	r2, #5683	; 0x1633
 8018878:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801887a:	4b44      	ldr	r3, [pc, #272]	; (801898c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 801887c:	2240      	movs	r2, #64	; 0x40
 801887e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018882:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d009      	beq.n	801889e <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 801888a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801888e:	2b03      	cmp	r3, #3
 8018890:	d105      	bne.n	801889e <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018892:	2203      	movs	r2, #3
 8018894:	2100      	movs	r1, #0
 8018896:	483f      	ldr	r0, [pc, #252]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018898:	f7fc f95b 	bl	8014b52 <otCoapHeaderInit>
 801889c:	e04a      	b.n	8018934 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 801889e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d009      	beq.n	80188ba <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 80188a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188aa:	2b01      	cmp	r3, #1
 80188ac:	d105      	bne.n	80188ba <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 80188ae:	2201      	movs	r2, #1
 80188b0:	2100      	movs	r1, #0
 80188b2:	4838      	ldr	r0, [pc, #224]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80188b4:	f7fc f94d 	bl	8014b52 <otCoapHeaderInit>
 80188b8:	e03c      	b.n	8018934 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80188ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d009      	beq.n	80188d6 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 80188c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188c6:	2b02      	cmp	r3, #2
 80188c8:	d105      	bne.n	80188d6 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80188ca:	2202      	movs	r2, #2
 80188cc:	2100      	movs	r1, #0
 80188ce:	4831      	ldr	r0, [pc, #196]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80188d0:	f7fc f93f 	bl	8014b52 <otCoapHeaderInit>
 80188d4:	e02e      	b.n	8018934 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80188d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d109      	bne.n	80188f2 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 80188de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188e2:	2b03      	cmp	r3, #3
 80188e4:	d105      	bne.n	80188f2 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80188e6:	2203      	movs	r2, #3
 80188e8:	2110      	movs	r1, #16
 80188ea:	482a      	ldr	r0, [pc, #168]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80188ec:	f7fc f931 	bl	8014b52 <otCoapHeaderInit>
 80188f0:	e020      	b.n	8018934 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 80188f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d109      	bne.n	801890e <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 80188fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d105      	bne.n	801890e <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8018902:	2201      	movs	r2, #1
 8018904:	2110      	movs	r1, #16
 8018906:	4823      	ldr	r0, [pc, #140]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018908:	f7fc f923 	bl	8014b52 <otCoapHeaderInit>
 801890c:	e012      	b.n	8018934 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 801890e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d109      	bne.n	801892a <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8018916:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801891a:	2b02      	cmp	r3, #2
 801891c:	d105      	bne.n	801892a <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 801891e:	2202      	movs	r2, #2
 8018920:	2110      	movs	r1, #16
 8018922:	481c      	ldr	r0, [pc, #112]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018924:	f7fc f915 	bl	8014b52 <otCoapHeaderInit>
 8018928:	e004      	b.n	8018934 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801892a:	2102      	movs	r1, #2
 801892c:	4819      	ldr	r0, [pc, #100]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 801892e:	f7fc f979 	bl	8014c24 <otCoapHeaderGenerateToken>
 8018932:	e028      	b.n	8018986 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018934:	6839      	ldr	r1, [r7, #0]
 8018936:	4817      	ldr	r0, [pc, #92]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018938:	f7fc f9d7 	bl	8014cea <otCoapHeaderAppendUriPathOptions>
 801893c:	4603      	mov	r3, r0
 801893e:	461a      	mov	r2, r3
 8018940:	4b15      	ldr	r3, [pc, #84]	; (8018998 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018942:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018944:	4913      	ldr	r1, [pc, #76]	; (8018994 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018946:	2000      	movs	r0, #0
 8018948:	f7fc fb44 	bl	8014fd4 <otCoapNewMessage>
 801894c:	4602      	mov	r2, r0
 801894e:	4b13      	ldr	r3, [pc, #76]	; (801899c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018950:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8018952:	4b12      	ldr	r3, [pc, #72]	; (801899c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018954:	6819      	ldr	r1, [r3, #0]
 8018956:	4b12      	ldr	r3, [pc, #72]	; (80189a0 <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8018958:	9300      	str	r3, [sp, #0]
 801895a:	4b12      	ldr	r3, [pc, #72]	; (80189a4 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 801895c:	4a0b      	ldr	r2, [pc, #44]	; (801898c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 801895e:	2000      	movs	r0, #0
 8018960:	f7fc fb66 	bl	8015030 <otCoapSendRequest>
 8018964:	4603      	mov	r3, r0
 8018966:	461a      	mov	r2, r3
 8018968:	4b0b      	ldr	r3, [pc, #44]	; (8018998 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 801896a:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 801896c:	4b0a      	ldr	r3, [pc, #40]	; (8018998 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 801896e:	781b      	ldrb	r3, [r3, #0]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d008      	beq.n	8018986 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 8018974:	4b09      	ldr	r3, [pc, #36]	; (801899c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d004      	beq.n	8018986 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 801897c:	4b07      	ldr	r3, [pc, #28]	; (801899c <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	4618      	mov	r0, r3
 8018982:	f7fc fdc6 	bl	8015512 <otMessageFree>
		}

	} while (false);

}
 8018986:	3714      	adds	r7, #20
 8018988:	46bd      	mov	sp, r7
 801898a:	bd90      	pop	{r4, r7, pc}
 801898c:	20027758 	.word	0x20027758
 8018990:	200289e8 	.word	0x200289e8
 8018994:	20027784 	.word	0x20027784
 8018998:	20027818 	.word	0x20027818
 801899c:	20027814 	.word	0x20027814
 80189a0:	08018205 	.word	0x08018205
 80189a4:	080181e9 	.word	0x080181e9

080189a8 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 80189a8:	b590      	push	{r4, r7, lr}
 80189aa:	b087      	sub	sp, #28
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	60f8      	str	r0, [r7, #12]
 80189b0:	607a      	str	r2, [r7, #4]
 80189b2:	603b      	str	r3, [r7, #0]
 80189b4:	460b      	mov	r3, r1
 80189b6:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 80189b8:	2300      	movs	r3, #0
 80189ba:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 80189bc:	2244      	movs	r2, #68	; 0x44
 80189be:	2120      	movs	r1, #32
 80189c0:	4826      	ldr	r0, [pc, #152]	; (8018a5c <APP_THREAD_SendDataResponse+0xb4>)
 80189c2:	f7fc f8c6 	bl	8014b52 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	f7fc fa7b 	bl	8014ec2 <otCoapHeaderGetMessageId>
 80189cc:	4603      	mov	r3, r0
 80189ce:	4619      	mov	r1, r3
 80189d0:	4822      	ldr	r0, [pc, #136]	; (8018a5c <APP_THREAD_SendDataResponse+0xb4>)
 80189d2:	f7fc f9ea 	bl	8014daa <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	f7fc facf 	bl	8014f7a <otCoapHeaderGetToken>
 80189dc:	4604      	mov	r4, r0
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f7fc fa9d 	bl	8014f1e <otCoapHeaderGetTokenLength>
 80189e4:	4603      	mov	r3, r0
 80189e6:	461a      	mov	r2, r3
 80189e8:	4621      	mov	r1, r4
 80189ea:	481c      	ldr	r0, [pc, #112]	; (8018a5c <APP_THREAD_SendDataResponse+0xb4>)
 80189ec:	f7fc f8e6 	bl	8014bbc <otCoapHeaderSetToken>

	if (msgSize > 0){
 80189f0:	897b      	ldrh	r3, [r7, #10]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d006      	beq.n	8018a04 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80189f6:	212a      	movs	r1, #42	; 0x2a
 80189f8:	4818      	ldr	r0, [pc, #96]	; (8018a5c <APP_THREAD_SendDataResponse+0xb4>)
 80189fa:	f7fc f943 	bl	8014c84 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 80189fe:	4817      	ldr	r0, [pc, #92]	; (8018a5c <APP_THREAD_SendDataResponse+0xb4>)
 8018a00:	f7fc f9a5 	bl	8014d4e <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018a04:	4915      	ldr	r1, [pc, #84]	; (8018a5c <APP_THREAD_SendDataResponse+0xb4>)
 8018a06:	2000      	movs	r0, #0
 8018a08:	f7fc fae4 	bl	8014fd4 <otCoapNewMessage>
 8018a0c:	4602      	mov	r2, r0
 8018a0e:	4b14      	ldr	r3, [pc, #80]	; (8018a60 <APP_THREAD_SendDataResponse+0xb8>)
 8018a10:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8018a12:	897b      	ldrh	r3, [r7, #10]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d008      	beq.n	8018a2a <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8018a18:	4b11      	ldr	r3, [pc, #68]	; (8018a60 <APP_THREAD_SendDataResponse+0xb8>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	897a      	ldrh	r2, [r7, #10]
 8018a1e:	68f9      	ldr	r1, [r7, #12]
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7fc fdcf 	bl	80155c4 <otMessageAppend>
 8018a26:	4603      	mov	r3, r0
 8018a28:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8018a2a:	4b0d      	ldr	r3, [pc, #52]	; (8018a60 <APP_THREAD_SendDataResponse+0xb8>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	683a      	ldr	r2, [r7, #0]
 8018a30:	4619      	mov	r1, r3
 8018a32:	2000      	movs	r0, #0
 8018a34:	f7fc fb95 	bl	8015162 <otCoapSendResponse>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018a3c:	7dfb      	ldrb	r3, [r7, #23]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d008      	beq.n	8018a54 <APP_THREAD_SendDataResponse+0xac>
 8018a42:	4b07      	ldr	r3, [pc, #28]	; (8018a60 <APP_THREAD_SendDataResponse+0xb8>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d004      	beq.n	8018a54 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8018a4a:	4b05      	ldr	r3, [pc, #20]	; (8018a60 <APP_THREAD_SendDataResponse+0xb8>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f7fc fd5f 	bl	8015512 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8018a54:	bf00      	nop
 8018a56:	371c      	adds	r7, #28
 8018a58:	46bd      	mov	sp, r7
 8018a5a:	bd90      	pop	{r4, r7, pc}
 8018a5c:	20027784 	.word	0x20027784
 8018a60:	20027814 	.word	0x20027814

08018a64 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8018a64:	b480      	push	{r7}
 8018a66:	b083      	sub	sp, #12
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8018a6c:	4a04      	ldr	r2, [pc, #16]	; (8018a80 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	6013      	str	r3, [r2, #0]
}
 8018a72:	bf00      	nop
 8018a74:	370c      	adds	r7, #12
 8018a76:	46bd      	mov	sp, r7
 8018a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7c:	4770      	bx	lr
 8018a7e:	bf00      	nop
 8018a80:	20027740 	.word	0x20027740

08018a84 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8018a84:	b480      	push	{r7}
 8018a86:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8018a88:	4b03      	ldr	r3, [pc, #12]	; (8018a98 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	330c      	adds	r3, #12
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	46bd      	mov	sp, r7
 8018a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a96:	4770      	bx	lr
 8018a98:	20027740 	.word	0x20027740

08018a9c <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8018a9c:	b480      	push	{r7}
 8018a9e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8018aa0:	4b03      	ldr	r3, [pc, #12]	; (8018ab0 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	330b      	adds	r3, #11
}
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aae:	4770      	bx	lr
 8018ab0:	20027740 	.word	0x20027740

08018ab4 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8018ab4:	b480      	push	{r7}
 8018ab6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8018ab8:	4b03      	ldr	r3, [pc, #12]	; (8018ac8 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	330b      	adds	r3, #11
}
 8018abe:	4618      	mov	r0, r3
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac6:	4770      	bx	lr
 8018ac8:	20027744 	.word	0x20027744

08018acc <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8018ad2:	4b0f      	ldr	r3, [pc, #60]	; (8018b10 <Ot_Cmd_Transfer+0x44>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018adc:	725a      	strb	r2, [r3, #9]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	f042 0202 	orr.w	r2, r2, #2
 8018ae4:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8018ae6:	4b0a      	ldr	r3, [pc, #40]	; (8018b10 <Ot_Cmd_Transfer+0x44>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	330c      	adds	r3, #12
 8018aec:	685b      	ldr	r3, [r3, #4]
 8018aee:	3302      	adds	r3, #2
 8018af0:	009b      	lsls	r3, r3, #2
 8018af2:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8018af4:	4b06      	ldr	r3, [pc, #24]	; (8018b10 <Ot_Cmd_Transfer+0x44>)
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	687a      	ldr	r2, [r7, #4]
 8018afa:	b2d2      	uxtb	r2, r2
 8018afc:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8018afe:	f7fd fc47 	bl	8016390 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8018b02:	f000 f829 	bl	8018b58 <Wait_Getting_Ack_From_M0>
}
 8018b06:	bf00      	nop
 8018b08:	3708      	adds	r7, #8
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	bd80      	pop	{r7, pc}
 8018b0e:	bf00      	nop
 8018b10:	20027740 	.word	0x20027740

08018b14 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8018b1c:	f000 f82e 	bl	8018b7c <Receive_Ack_From_M0>
}
 8018b20:	bf00      	nop
 8018b22:	3708      	adds	r7, #8
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}

08018b28 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b082      	sub	sp, #8
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8018b30:	4a04      	ldr	r2, [pc, #16]	; (8018b44 <TL_THREAD_NotReceived+0x1c>)
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8018b36:	f000 f82d 	bl	8018b94 <Receive_Notification_From_M0>
}
 8018b3a:	bf00      	nop
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	20027744 	.word	0x20027744

08018b48 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8018b48:	b480      	push	{r7}
 8018b4a:	af00      	add	r7, sp, #0

}
 8018b4c:	bf00      	nop
 8018b4e:	46bd      	mov	sp, r7
 8018b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b54:	4770      	bx	lr
	...

08018b58 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8018b58:	b480      	push	{r7}
 8018b5a:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8018b5c:	bf00      	nop
 8018b5e:	4b06      	ldr	r3, [pc, #24]	; (8018b78 <Wait_Getting_Ack_From_M0+0x20>)
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d0fb      	beq.n	8018b5e <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8018b66:	4b04      	ldr	r3, [pc, #16]	; (8018b78 <Wait_Getting_Ack_From_M0+0x20>)
 8018b68:	2200      	movs	r2, #0
 8018b6a:	601a      	str	r2, [r3, #0]
}
 8018b6c:	bf00      	nop
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b74:	4770      	bx	lr
 8018b76:	bf00      	nop
 8018b78:	2002774c 	.word	0x2002774c

08018b7c <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8018b7c:	b480      	push	{r7}
 8018b7e:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8018b80:	4b03      	ldr	r3, [pc, #12]	; (8018b90 <Receive_Ack_From_M0+0x14>)
 8018b82:	2201      	movs	r2, #1
 8018b84:	601a      	str	r2, [r3, #0]
}
 8018b86:	bf00      	nop
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8e:	4770      	bx	lr
 8018b90:	2002774c 	.word	0x2002774c

08018b94 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8018b98:	4b06      	ldr	r3, [pc, #24]	; (8018bb4 <Receive_Notification_From_M0+0x20>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	3301      	adds	r3, #1
 8018b9e:	4a05      	ldr	r2, [pc, #20]	; (8018bb4 <Receive_Notification_From_M0+0x20>)
 8018ba0:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8018ba2:	4b05      	ldr	r3, [pc, #20]	; (8018bb8 <Receive_Notification_From_M0+0x24>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	2101      	movs	r1, #1
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7f7 fc87 	bl	80104bc <osThreadFlagsSet>
}
 8018bae:	bf00      	nop
 8018bb0:	bd80      	pop	{r7, pc}
 8018bb2:	bf00      	nop
 8018bb4:	20027748 	.word	0x20027748
 8018bb8:	20027750 	.word	0x20027750

08018bbc <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8018bc0:	22ff      	movs	r2, #255	; 0xff
 8018bc2:	2100      	movs	r1, #0
 8018bc4:	4812      	ldr	r0, [pc, #72]	; (8018c10 <Send_CLI_To_M0+0x54>)
 8018bc6:	f001 fc02 	bl	801a3ce <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8018bca:	4b12      	ldr	r3, [pc, #72]	; (8018c14 <Send_CLI_To_M0+0x58>)
 8018bcc:	881b      	ldrh	r3, [r3, #0]
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	461a      	mov	r2, r3
 8018bd2:	4911      	ldr	r1, [pc, #68]	; (8018c18 <Send_CLI_To_M0+0x5c>)
 8018bd4:	480e      	ldr	r0, [pc, #56]	; (8018c10 <Send_CLI_To_M0+0x54>)
 8018bd6:	f001 fbef 	bl	801a3b8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8018bda:	4b0e      	ldr	r3, [pc, #56]	; (8018c14 <Send_CLI_To_M0+0x58>)
 8018bdc:	881b      	ldrh	r3, [r3, #0]
 8018bde:	b29b      	uxth	r3, r3
 8018be0:	b2da      	uxtb	r2, r3
 8018be2:	4b0e      	ldr	r3, [pc, #56]	; (8018c1c <Send_CLI_To_M0+0x60>)
 8018be4:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8018be6:	4b0d      	ldr	r3, [pc, #52]	; (8018c1c <Send_CLI_To_M0+0x60>)
 8018be8:	2200      	movs	r2, #0
 8018bea:	725a      	strb	r2, [r3, #9]
 8018bec:	2200      	movs	r2, #0
 8018bee:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8018bf0:	4b0b      	ldr	r3, [pc, #44]	; (8018c20 <Send_CLI_To_M0+0x64>)
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8018bf6:	4b07      	ldr	r3, [pc, #28]	; (8018c14 <Send_CLI_To_M0+0x58>)
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8018bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018c00:	2100      	movs	r1, #0
 8018c02:	4805      	ldr	r0, [pc, #20]	; (8018c18 <Send_CLI_To_M0+0x5c>)
 8018c04:	f001 fbe3 	bl	801a3ce <memset>

  TL_CLI_SendCmd();
 8018c08:	f7fd fbd0 	bl	80163ac <TL_CLI_SendCmd>
}
 8018c0c:	bf00      	nop
 8018c0e:	bd80      	pop	{r7, pc}
 8018c10:	20030a5c 	.word	0x20030a5c
 8018c14:	2002773c 	.word	0x2002773c
 8018c18:	2002763c 	.word	0x2002763c
 8018c1c:	20030a50 	.word	0x20030a50
 8018c20:	2002773e 	.word	0x2002773e

08018c24 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8018c28:	f7fd fbdc 	bl	80163e4 <TL_THREAD_CliSendAck>
}
 8018c2c:	bf00      	nop
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8018c34:	4a04      	ldr	r2, [pc, #16]	; (8018c48 <APP_THREAD_Init_UART_CLI+0x18>)
 8018c36:	2100      	movs	r1, #0
 8018c38:	4804      	ldr	r0, [pc, #16]	; (8018c4c <APP_THREAD_Init_UART_CLI+0x1c>)
 8018c3a:	f7f7 fb93 	bl	8010364 <osThreadNew>
 8018c3e:	4602      	mov	r2, r0
 8018c40:	4b03      	ldr	r3, [pc, #12]	; (8018c50 <APP_THREAD_Init_UART_CLI+0x20>)
 8018c42:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8018c44:	bf00      	nop
 8018c46:	bd80      	pop	{r7, pc}
 8018c48:	0801becc 	.word	0x0801becc
 8018c4c:	0801818f 	.word	0x0801818f
 8018c50:	20027754 	.word	0x20027754

08018c54 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8018c58:	4b06      	ldr	r3, [pc, #24]	; (8018c74 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018c5a:	4a07      	ldr	r2, [pc, #28]	; (8018c78 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8018c5c:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8018c5e:	4b05      	ldr	r3, [pc, #20]	; (8018c74 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018c60:	4a06      	ldr	r2, [pc, #24]	; (8018c7c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8018c62:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8018c64:	4b03      	ldr	r3, [pc, #12]	; (8018c74 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018c66:	4a06      	ldr	r2, [pc, #24]	; (8018c80 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8018c68:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8018c6a:	4802      	ldr	r0, [pc, #8]	; (8018c74 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018c6c:	f7fd fb74 	bl	8016358 <TL_THREAD_Init>
}
 8018c70:	bf00      	nop
 8018c72:	bd80      	pop	{r7, pc}
 8018c74:	200300b8 	.word	0x200300b8
 8018c78:	20030838 	.word	0x20030838
 8018c7c:	20030944 	.word	0x20030944
 8018c80:	20030a50 	.word	0x20030a50

08018c84 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b084      	sub	sp, #16
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	7adb      	ldrb	r3, [r3, #11]
 8018c94:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	330c      	adds	r3, #12
 8018c9a:	4906      	ldr	r1, [pc, #24]	; (8018cb4 <TL_THREAD_CliNotReceived+0x30>)
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f7e7 fa6f 	bl	8000180 <strcmp>
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d101      	bne.n	8018cac <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8018ca8:	f7ff ffbc 	bl	8018c24 <Send_CLI_Ack_For_OT>
  }
}
 8018cac:	bf00      	nop
 8018cae:	3710      	adds	r7, #16
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}
 8018cb4:	0801ba28 	.word	0x0801ba28

08018cb8 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8018cbc:	4b09      	ldr	r3, [pc, #36]	; (8018ce4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d00d      	beq.n	8018ce0 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8018cc4:	4b07      	ldr	r3, [pc, #28]	; (8018ce4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	2b01      	cmp	r3, #1
 8018cca:	d904      	bls.n	8018cd6 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8018ccc:	2100      	movs	r1, #0
 8018cce:	2000      	movs	r0, #0
 8018cd0:	f7fe fff6 	bl	8017cc0 <APP_THREAD_Error>
 8018cd4:	e001      	b.n	8018cda <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8018cd6:	f7fc fce9 	bl	80156ac <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8018cda:	4b02      	ldr	r3, [pc, #8]	; (8018ce4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018cdc:	2200      	movs	r2, #0
 8018cde:	601a      	str	r2, [r3, #0]
  }
}
 8018ce0:	bf00      	nop
 8018ce2:	bd80      	pop	{r7, pc}
 8018ce4:	20027748 	.word	0x20027748

08018ce8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018ce8:	b480      	push	{r7}
 8018cea:	b083      	sub	sp, #12
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018cf0:	4b06      	ldr	r3, [pc, #24]	; (8018d0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018cf2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8018cf6:	4905      	ldr	r1, [pc, #20]	; (8018d0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	4313      	orrs	r3, r2
 8018cfc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8018d00:	bf00      	nop
 8018d02:	370c      	adds	r7, #12
 8018d04:	46bd      	mov	sp, r7
 8018d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0a:	4770      	bx	lr
 8018d0c:	58000800 	.word	0x58000800

08018d10 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8018d10:	b480      	push	{r7}
 8018d12:	b083      	sub	sp, #12
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8018d18:	4b05      	ldr	r3, [pc, #20]	; (8018d30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018d1a:	6a1a      	ldr	r2, [r3, #32]
 8018d1c:	4904      	ldr	r1, [pc, #16]	; (8018d30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	4313      	orrs	r3, r2
 8018d22:	620b      	str	r3, [r1, #32]
}
 8018d24:	bf00      	nop
 8018d26:	370c      	adds	r7, #12
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr
 8018d30:	58000800 	.word	0x58000800

08018d34 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8018d34:	b480      	push	{r7}
 8018d36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018d38:	4b05      	ldr	r3, [pc, #20]	; (8018d50 <LL_PWR_EnableBootC2+0x1c>)
 8018d3a:	68db      	ldr	r3, [r3, #12]
 8018d3c:	4a04      	ldr	r2, [pc, #16]	; (8018d50 <LL_PWR_EnableBootC2+0x1c>)
 8018d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018d42:	60d3      	str	r3, [r2, #12]
}
 8018d44:	bf00      	nop
 8018d46:	46bd      	mov	sp, r7
 8018d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4c:	4770      	bx	lr
 8018d4e:	bf00      	nop
 8018d50:	58000400 	.word	0x58000400

08018d54 <LL_AHB3_GRP1_EnableClock>:
{
 8018d54:	b480      	push	{r7}
 8018d56:	b085      	sub	sp, #20
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8018d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	4313      	orrs	r3, r2
 8018d6a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8018d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	4013      	ands	r3, r2
 8018d76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018d78:	68fb      	ldr	r3, [r7, #12]
}
 8018d7a:	bf00      	nop
 8018d7c:	3714      	adds	r7, #20
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d84:	4770      	bx	lr

08018d86 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8018d86:	b480      	push	{r7}
 8018d88:	b083      	sub	sp, #12
 8018d8a:	af00      	add	r7, sp, #0
 8018d8c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	601a      	str	r2, [r3, #0]
}
 8018d9a:	bf00      	nop
 8018d9c:	370c      	adds	r7, #12
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da4:	4770      	bx	lr

08018da6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8018da6:	b480      	push	{r7}
 8018da8:	b083      	sub	sp, #12
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	f043 0201 	orr.w	r2, r3, #1
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	601a      	str	r2, [r3, #0]
}
 8018dba:	bf00      	nop
 8018dbc:	370c      	adds	r7, #12
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc4:	4770      	bx	lr

08018dc6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018dc6:	b480      	push	{r7}
 8018dc8:	b083      	sub	sp, #12
 8018dca:	af00      	add	r7, sp, #0
 8018dcc:	6078      	str	r0, [r7, #4]
 8018dce:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	685a      	ldr	r2, [r3, #4]
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	041b      	lsls	r3, r3, #16
 8018dd8:	43db      	mvns	r3, r3
 8018dda:	401a      	ands	r2, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	605a      	str	r2, [r3, #4]
}
 8018de0:	bf00      	nop
 8018de2:	370c      	adds	r7, #12
 8018de4:	46bd      	mov	sp, r7
 8018de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dea:	4770      	bx	lr

08018dec <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018dec:	b480      	push	{r7}
 8018dee:	b083      	sub	sp, #12
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
 8018df4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	685a      	ldr	r2, [r3, #4]
 8018dfa:	683b      	ldr	r3, [r7, #0]
 8018dfc:	041b      	lsls	r3, r3, #16
 8018dfe:	431a      	orrs	r2, r3
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	605a      	str	r2, [r3, #4]
}
 8018e04:	bf00      	nop
 8018e06:	370c      	adds	r7, #12
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0e:	4770      	bx	lr

08018e10 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e10:	b480      	push	{r7}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	685a      	ldr	r2, [r3, #4]
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	43db      	mvns	r3, r3
 8018e22:	401a      	ands	r2, r3
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	605a      	str	r2, [r3, #4]
}
 8018e28:	bf00      	nop
 8018e2a:	370c      	adds	r7, #12
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e32:	4770      	bx	lr

08018e34 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e34:	b480      	push	{r7}
 8018e36:	b083      	sub	sp, #12
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
 8018e3c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	685a      	ldr	r2, [r3, #4]
 8018e42:	683b      	ldr	r3, [r7, #0]
 8018e44:	431a      	orrs	r2, r3
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	605a      	str	r2, [r3, #4]
}
 8018e4a:	bf00      	nop
 8018e4c:	370c      	adds	r7, #12
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e54:	4770      	bx	lr

08018e56 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e56:	b480      	push	{r7}
 8018e58:	b083      	sub	sp, #12
 8018e5a:	af00      	add	r7, sp, #0
 8018e5c:	6078      	str	r0, [r7, #4]
 8018e5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	683a      	ldr	r2, [r7, #0]
 8018e64:	609a      	str	r2, [r3, #8]
}
 8018e66:	bf00      	nop
 8018e68:	370c      	adds	r7, #12
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e70:	4770      	bx	lr

08018e72 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e72:	b480      	push	{r7}
 8018e74:	b083      	sub	sp, #12
 8018e76:	af00      	add	r7, sp, #0
 8018e78:	6078      	str	r0, [r7, #4]
 8018e7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	041a      	lsls	r2, r3, #16
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	609a      	str	r2, [r3, #8]
}
 8018e84:	bf00      	nop
 8018e86:	370c      	adds	r7, #12
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr

08018e90 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018e90:	b480      	push	{r7}
 8018e92:	b083      	sub	sp, #12
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	68da      	ldr	r2, [r3, #12]
 8018e9e:	683b      	ldr	r3, [r7, #0]
 8018ea0:	4013      	ands	r3, r2
 8018ea2:	683a      	ldr	r2, [r7, #0]
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d101      	bne.n	8018eac <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	e000      	b.n	8018eae <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8018eac:	2300      	movs	r3, #0
}
 8018eae:	4618      	mov	r0, r3
 8018eb0:	370c      	adds	r7, #12
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb8:	4770      	bx	lr

08018eba <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018eba:	b480      	push	{r7}
 8018ebc:	b083      	sub	sp, #12
 8018ebe:	af00      	add	r7, sp, #0
 8018ec0:	6078      	str	r0, [r7, #4]
 8018ec2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	69da      	ldr	r2, [r3, #28]
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	4013      	ands	r3, r2
 8018ecc:	683a      	ldr	r2, [r7, #0]
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	d101      	bne.n	8018ed6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	e000      	b.n	8018ed8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018ed6:	2300      	movs	r3, #0
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	370c      	adds	r7, #12
 8018edc:	46bd      	mov	sp, r7
 8018ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee2:	4770      	bx	lr

08018ee4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018ee8:	2102      	movs	r1, #2
 8018eea:	482a      	ldr	r0, [pc, #168]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018eec:	f7ff ffe5 	bl	8018eba <LL_C2_IPCC_IsActiveFlag_CHx>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d009      	beq.n	8018f0a <HW_IPCC_Rx_Handler+0x26>
 8018ef6:	4b27      	ldr	r3, [pc, #156]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	43db      	mvns	r3, r3
 8018efc:	f003 0302 	and.w	r3, r3, #2
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d002      	beq.n	8018f0a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8018f04:	f000 f906 	bl	8019114 <HW_IPCC_SYS_EvtHandler>
 8018f08:	e041      	b.n	8018f8e <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8018f0a:	2104      	movs	r1, #4
 8018f0c:	4821      	ldr	r0, [pc, #132]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f0e:	f7ff ffd4 	bl	8018eba <LL_C2_IPCC_IsActiveFlag_CHx>
 8018f12:	4603      	mov	r3, r0
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d009      	beq.n	8018f2c <HW_IPCC_Rx_Handler+0x48>
 8018f18:	4b1e      	ldr	r3, [pc, #120]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f1a:	685b      	ldr	r3, [r3, #4]
 8018f1c:	43db      	mvns	r3, r3
 8018f1e:	f003 0304 	and.w	r3, r3, #4
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d002      	beq.n	8018f2c <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8018f26:	f000 f94f 	bl	80191c8 <HW_IPCC_THREAD_NotEvtHandler>
 8018f2a:	e030      	b.n	8018f8e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8018f2c:	2110      	movs	r1, #16
 8018f2e:	4819      	ldr	r0, [pc, #100]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f30:	f7ff ffc3 	bl	8018eba <LL_C2_IPCC_IsActiveFlag_CHx>
 8018f34:	4603      	mov	r3, r0
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d009      	beq.n	8018f4e <HW_IPCC_Rx_Handler+0x6a>
 8018f3a:	4b16      	ldr	r3, [pc, #88]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f3c:	685b      	ldr	r3, [r3, #4]
 8018f3e:	43db      	mvns	r3, r3
 8018f40:	f003 0310 	and.w	r3, r3, #16
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d002      	beq.n	8018f4e <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8018f48:	f000 f94a 	bl	80191e0 <HW_IPCC_THREAD_CliNotEvtHandler>
 8018f4c:	e01f      	b.n	8018f8e <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018f4e:	2101      	movs	r1, #1
 8018f50:	4810      	ldr	r0, [pc, #64]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f52:	f7ff ffb2 	bl	8018eba <LL_C2_IPCC_IsActiveFlag_CHx>
 8018f56:	4603      	mov	r3, r0
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d008      	beq.n	8018f6e <HW_IPCC_Rx_Handler+0x8a>
 8018f5c:	4b0d      	ldr	r3, [pc, #52]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f5e:	685b      	ldr	r3, [r3, #4]
 8018f60:	f003 0301 	and.w	r3, r3, #1
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d102      	bne.n	8018f6e <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8018f68:	f000 f898 	bl	801909c <HW_IPCC_BLE_EvtHandler>
 8018f6c:	e00f      	b.n	8018f8e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8018f6e:	2108      	movs	r1, #8
 8018f70:	4808      	ldr	r0, [pc, #32]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f72:	f7ff ffa2 	bl	8018eba <LL_C2_IPCC_IsActiveFlag_CHx>
 8018f76:	4603      	mov	r3, r0
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d009      	beq.n	8018f90 <HW_IPCC_Rx_Handler+0xac>
 8018f7c:	4b05      	ldr	r3, [pc, #20]	; (8018f94 <HW_IPCC_Rx_Handler+0xb0>)
 8018f7e:	685b      	ldr	r3, [r3, #4]
 8018f80:	43db      	mvns	r3, r3
 8018f82:	f003 0308 	and.w	r3, r3, #8
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d002      	beq.n	8018f90 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8018f8a:	f000 f975 	bl	8019278 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8018f8e:	bf00      	nop
 8018f90:	bf00      	nop
}
 8018f92:	bd80      	pop	{r7, pc}
 8018f94:	58000c00 	.word	0x58000c00

08018f98 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8018f9c:	2102      	movs	r1, #2
 8018f9e:	482b      	ldr	r0, [pc, #172]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8018fa0:	f7ff ff76 	bl	8018e90 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d109      	bne.n	8018fbe <HW_IPCC_Tx_Handler+0x26>
 8018faa:	4b28      	ldr	r3, [pc, #160]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	43db      	mvns	r3, r3
 8018fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d002      	beq.n	8018fbe <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8018fb8:	f000 f8a0 	bl	80190fc <HW_IPCC_SYS_CmdEvtHandler>
 8018fbc:	e042      	b.n	8019044 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8018fbe:	2104      	movs	r1, #4
 8018fc0:	4822      	ldr	r0, [pc, #136]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8018fc2:	f7ff ff65 	bl	8018e90 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d109      	bne.n	8018fe0 <HW_IPCC_Tx_Handler+0x48>
 8018fcc:	4b1f      	ldr	r3, [pc, #124]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8018fce:	685b      	ldr	r3, [r3, #4]
 8018fd0:	43db      	mvns	r3, r3
 8018fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d002      	beq.n	8018fe0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8018fda:	f000 f8e9 	bl	80191b0 <HW_IPCC_OT_CmdEvtHandler>
 8018fde:	e031      	b.n	8019044 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8018fe0:	2102      	movs	r1, #2
 8018fe2:	481a      	ldr	r0, [pc, #104]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8018fe4:	f7ff ff54 	bl	8018e90 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d109      	bne.n	8019002 <HW_IPCC_Tx_Handler+0x6a>
 8018fee:	4b17      	ldr	r3, [pc, #92]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	43db      	mvns	r3, r3
 8018ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d002      	beq.n	8019002 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8018ffc:	f000 f87e 	bl	80190fc <HW_IPCC_SYS_CmdEvtHandler>
 8019000:	e020      	b.n	8019044 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8019002:	2108      	movs	r1, #8
 8019004:	4811      	ldr	r0, [pc, #68]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8019006:	f7ff ff43 	bl	8018e90 <LL_C1_IPCC_IsActiveFlag_CHx>
 801900a:	4603      	mov	r3, r0
 801900c:	2b00      	cmp	r3, #0
 801900e:	d109      	bne.n	8019024 <HW_IPCC_Tx_Handler+0x8c>
 8019010:	4b0e      	ldr	r3, [pc, #56]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8019012:	685b      	ldr	r3, [r3, #4]
 8019014:	43db      	mvns	r3, r3
 8019016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801901a:	2b00      	cmp	r3, #0
 801901c:	d002      	beq.n	8019024 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 801901e:	f000 f90d 	bl	801923c <HW_IPCC_MM_FreeBufHandler>
 8019022:	e00f      	b.n	8019044 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8019024:	2120      	movs	r1, #32
 8019026:	4809      	ldr	r0, [pc, #36]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8019028:	f7ff ff32 	bl	8018e90 <LL_C1_IPCC_IsActiveFlag_CHx>
 801902c:	4603      	mov	r3, r0
 801902e:	2b00      	cmp	r3, #0
 8019030:	d109      	bne.n	8019046 <HW_IPCC_Tx_Handler+0xae>
 8019032:	4b06      	ldr	r3, [pc, #24]	; (801904c <HW_IPCC_Tx_Handler+0xb4>)
 8019034:	685b      	ldr	r3, [r3, #4]
 8019036:	43db      	mvns	r3, r3
 8019038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801903c:	2b00      	cmp	r3, #0
 801903e:	d002      	beq.n	8019046 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8019040:	f000 f838 	bl	80190b4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8019044:	bf00      	nop
 8019046:	bf00      	nop
}
 8019048:	bd80      	pop	{r7, pc}
 801904a:	bf00      	nop
 801904c:	58000c00 	.word	0x58000c00

08019050 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8019050:	b580      	push	{r7, lr}
 8019052:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8019054:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019058:	f7ff fe46 	bl	8018ce8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801905c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019060:	f7ff fe56 	bl	8018d10 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8019064:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8019066:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8019068:	f7ff fe64 	bl	8018d34 <LL_PWR_EnableBootC2>

  return;
 801906c:	bf00      	nop
}
 801906e:	bd80      	pop	{r7, pc}

08019070 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8019074:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8019078:	f7ff fe6c 	bl	8018d54 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 801907c:	4806      	ldr	r0, [pc, #24]	; (8019098 <HW_IPCC_Init+0x28>)
 801907e:	f7ff fe92 	bl	8018da6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8019082:	4805      	ldr	r0, [pc, #20]	; (8019098 <HW_IPCC_Init+0x28>)
 8019084:	f7ff fe7f 	bl	8018d86 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8019088:	202c      	movs	r0, #44	; 0x2c
 801908a:	f7ef f9a8 	bl	80083de <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801908e:	202d      	movs	r0, #45	; 0x2d
 8019090:	f7ef f9a5 	bl	80083de <HAL_NVIC_EnableIRQ>

  return;
 8019094:	bf00      	nop
}
 8019096:	bd80      	pop	{r7, pc}
 8019098:	58000c00 	.word	0x58000c00

0801909c <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 801909c:	b580      	push	{r7, lr}
 801909e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80190a0:	f7fd f8ca 	bl	8016238 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80190a4:	2101      	movs	r1, #1
 80190a6:	4802      	ldr	r0, [pc, #8]	; (80190b0 <HW_IPCC_BLE_EvtHandler+0x14>)
 80190a8:	f7ff fed5 	bl	8018e56 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80190ac:	bf00      	nop
}
 80190ae:	bd80      	pop	{r7, pc}
 80190b0:	58000c00 	.word	0x58000c00

080190b4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80190b8:	2120      	movs	r1, #32
 80190ba:	4803      	ldr	r0, [pc, #12]	; (80190c8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80190bc:	f7ff fe96 	bl	8018dec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80190c0:	f7fd f8d6 	bl	8016270 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80190c4:	bf00      	nop
}
 80190c6:	bd80      	pop	{r7, pc}
 80190c8:	58000c00 	.word	0x58000c00

080190cc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80190d0:	2102      	movs	r1, #2
 80190d2:	4802      	ldr	r0, [pc, #8]	; (80190dc <HW_IPCC_SYS_Init+0x10>)
 80190d4:	f7ff fe9c 	bl	8018e10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80190d8:	bf00      	nop
}
 80190da:	bd80      	pop	{r7, pc}
 80190dc:	58000c00 	.word	0x58000c00

080190e0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80190e0:	b580      	push	{r7, lr}
 80190e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80190e4:	2102      	movs	r1, #2
 80190e6:	4804      	ldr	r0, [pc, #16]	; (80190f8 <HW_IPCC_SYS_SendCmd+0x18>)
 80190e8:	f7ff fec3 	bl	8018e72 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80190ec:	2102      	movs	r1, #2
 80190ee:	4802      	ldr	r0, [pc, #8]	; (80190f8 <HW_IPCC_SYS_SendCmd+0x18>)
 80190f0:	f7ff fe69 	bl	8018dc6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80190f4:	bf00      	nop
}
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	58000c00 	.word	0x58000c00

080190fc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019100:	2102      	movs	r1, #2
 8019102:	4803      	ldr	r0, [pc, #12]	; (8019110 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8019104:	f7ff fe72 	bl	8018dec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8019108:	f7fd f8fa 	bl	8016300 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801910c:	bf00      	nop
}
 801910e:	bd80      	pop	{r7, pc}
 8019110:	58000c00 	.word	0x58000c00

08019114 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8019118:	f7fd f902 	bl	8016320 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801911c:	2102      	movs	r1, #2
 801911e:	4802      	ldr	r0, [pc, #8]	; (8019128 <HW_IPCC_SYS_EvtHandler+0x14>)
 8019120:	f7ff fe99 	bl	8018e56 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019124:	bf00      	nop
}
 8019126:	bd80      	pop	{r7, pc}
 8019128:	58000c00 	.word	0x58000c00

0801912c <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 801912c:	b580      	push	{r7, lr}
 801912e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8019130:	2104      	movs	r1, #4
 8019132:	4804      	ldr	r0, [pc, #16]	; (8019144 <HW_IPCC_THREAD_Init+0x18>)
 8019134:	f7ff fe6c 	bl	8018e10 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019138:	2110      	movs	r1, #16
 801913a:	4802      	ldr	r0, [pc, #8]	; (8019144 <HW_IPCC_THREAD_Init+0x18>)
 801913c:	f7ff fe68 	bl	8018e10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019140:	bf00      	nop
}
 8019142:	bd80      	pop	{r7, pc}
 8019144:	58000c00 	.word	0x58000c00

08019148 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8019148:	b580      	push	{r7, lr}
 801914a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801914c:	2104      	movs	r1, #4
 801914e:	4804      	ldr	r0, [pc, #16]	; (8019160 <HW_IPCC_OT_SendCmd+0x18>)
 8019150:	f7ff fe8f 	bl	8018e72 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8019154:	2104      	movs	r1, #4
 8019156:	4802      	ldr	r0, [pc, #8]	; (8019160 <HW_IPCC_OT_SendCmd+0x18>)
 8019158:	f7ff fe35 	bl	8018dc6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801915c:	bf00      	nop
}
 801915e:	bd80      	pop	{r7, pc}
 8019160:	58000c00 	.word	0x58000c00

08019164 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8019164:	b580      	push	{r7, lr}
 8019166:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8019168:	2110      	movs	r1, #16
 801916a:	4802      	ldr	r0, [pc, #8]	; (8019174 <HW_IPCC_CLI_SendCmd+0x10>)
 801916c:	f7ff fe81 	bl	8018e72 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8019170:	bf00      	nop
}
 8019172:	bd80      	pop	{r7, pc}
 8019174:	58000c00 	.word	0x58000c00

08019178 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801917c:	2104      	movs	r1, #4
 801917e:	4804      	ldr	r0, [pc, #16]	; (8019190 <HW_IPCC_THREAD_SendAck+0x18>)
 8019180:	f7ff fe69 	bl	8018e56 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8019184:	2104      	movs	r1, #4
 8019186:	4802      	ldr	r0, [pc, #8]	; (8019190 <HW_IPCC_THREAD_SendAck+0x18>)
 8019188:	f7ff fe42 	bl	8018e10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801918c:	bf00      	nop
}
 801918e:	bd80      	pop	{r7, pc}
 8019190:	58000c00 	.word	0x58000c00

08019194 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8019194:	b580      	push	{r7, lr}
 8019196:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019198:	2110      	movs	r1, #16
 801919a:	4804      	ldr	r0, [pc, #16]	; (80191ac <HW_IPCC_THREAD_CliSendAck+0x18>)
 801919c:	f7ff fe5b 	bl	8018e56 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80191a0:	2110      	movs	r1, #16
 80191a2:	4802      	ldr	r0, [pc, #8]	; (80191ac <HW_IPCC_THREAD_CliSendAck+0x18>)
 80191a4:	f7ff fe34 	bl	8018e10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80191a8:	bf00      	nop
}
 80191aa:	bd80      	pop	{r7, pc}
 80191ac:	58000c00 	.word	0x58000c00

080191b0 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80191b4:	2104      	movs	r1, #4
 80191b6:	4803      	ldr	r0, [pc, #12]	; (80191c4 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 80191b8:	f7ff fe18 	bl	8018dec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 80191bc:	f7fd f920 	bl	8016400 <HW_IPCC_OT_CmdEvtNot>

  return;
 80191c0:	bf00      	nop
}
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	58000c00 	.word	0x58000c00

080191c8 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80191cc:	2104      	movs	r1, #4
 80191ce:	4803      	ldr	r0, [pc, #12]	; (80191dc <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 80191d0:	f7ff fe30 	bl	8018e34 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 80191d4:	f7fd f920 	bl	8016418 <HW_IPCC_THREAD_EvtNot>

  return;
 80191d8:	bf00      	nop
}
 80191da:	bd80      	pop	{r7, pc}
 80191dc:	58000c00 	.word	0x58000c00

080191e0 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80191e4:	2110      	movs	r1, #16
 80191e6:	4803      	ldr	r0, [pc, #12]	; (80191f4 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80191e8:	f7ff fe24 	bl	8018e34 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80191ec:	f7fd f920 	bl	8016430 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80191f0:	bf00      	nop
}
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	58000c00 	.word	0x58000c00

080191f8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b082      	sub	sp, #8
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8019200:	2108      	movs	r1, #8
 8019202:	480c      	ldr	r0, [pc, #48]	; (8019234 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019204:	f7ff fe44 	bl	8018e90 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019208:	4603      	mov	r3, r0
 801920a:	2b00      	cmp	r3, #0
 801920c:	d007      	beq.n	801921e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801920e:	4a0a      	ldr	r2, [pc, #40]	; (8019238 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019214:	2108      	movs	r1, #8
 8019216:	4807      	ldr	r0, [pc, #28]	; (8019234 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019218:	f7ff fdd5 	bl	8018dc6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801921c:	e006      	b.n	801922c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019222:	2108      	movs	r1, #8
 8019224:	4803      	ldr	r0, [pc, #12]	; (8019234 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019226:	f7ff fe24 	bl	8018e72 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801922a:	bf00      	nop
}
 801922c:	3708      	adds	r7, #8
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}
 8019232:	bf00      	nop
 8019234:	58000c00 	.word	0x58000c00
 8019238:	20027850 	.word	0x20027850

0801923c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801923c:	b580      	push	{r7, lr}
 801923e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019240:	2108      	movs	r1, #8
 8019242:	4806      	ldr	r0, [pc, #24]	; (801925c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019244:	f7ff fdd2 	bl	8018dec <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8019248:	4b05      	ldr	r3, [pc, #20]	; (8019260 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801924e:	2108      	movs	r1, #8
 8019250:	4802      	ldr	r0, [pc, #8]	; (801925c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019252:	f7ff fe0e 	bl	8018e72 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8019256:	bf00      	nop
}
 8019258:	bd80      	pop	{r7, pc}
 801925a:	bf00      	nop
 801925c:	58000c00 	.word	0x58000c00
 8019260:	20027850 	.word	0x20027850

08019264 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8019264:	b580      	push	{r7, lr}
 8019266:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019268:	2108      	movs	r1, #8
 801926a:	4802      	ldr	r0, [pc, #8]	; (8019274 <HW_IPCC_TRACES_Init+0x10>)
 801926c:	f7ff fdd0 	bl	8018e10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019270:	bf00      	nop
}
 8019272:	bd80      	pop	{r7, pc}
 8019274:	58000c00 	.word	0x58000c00

08019278 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8019278:	b580      	push	{r7, lr}
 801927a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801927c:	f7fd f966 	bl	801654c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019280:	2108      	movs	r1, #8
 8019282:	4802      	ldr	r0, [pc, #8]	; (801928c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8019284:	f7ff fde7 	bl	8018e56 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019288:	bf00      	nop
}
 801928a:	bd80      	pop	{r7, pc}
 801928c:	58000c00 	.word	0x58000c00

08019290 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8019294:	2200      	movs	r2, #0
 8019296:	4912      	ldr	r1, [pc, #72]	; (80192e0 <MX_USB_Device_Init+0x50>)
 8019298:	4812      	ldr	r0, [pc, #72]	; (80192e4 <MX_USB_Device_Init+0x54>)
 801929a:	f7fd fc14 	bl	8016ac6 <USBD_Init>
 801929e:	4603      	mov	r3, r0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d001      	beq.n	80192a8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80192a4:	f7eb f920 	bl	80044e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80192a8:	490f      	ldr	r1, [pc, #60]	; (80192e8 <MX_USB_Device_Init+0x58>)
 80192aa:	480e      	ldr	r0, [pc, #56]	; (80192e4 <MX_USB_Device_Init+0x54>)
 80192ac:	f7fd fc36 	bl	8016b1c <USBD_RegisterClass>
 80192b0:	4603      	mov	r3, r0
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d001      	beq.n	80192ba <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80192b6:	f7eb f917 	bl	80044e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80192ba:	490c      	ldr	r1, [pc, #48]	; (80192ec <MX_USB_Device_Init+0x5c>)
 80192bc:	4809      	ldr	r0, [pc, #36]	; (80192e4 <MX_USB_Device_Init+0x54>)
 80192be:	f7fd fb93 	bl	80169e8 <USBD_CDC_RegisterInterface>
 80192c2:	4603      	mov	r3, r0
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d001      	beq.n	80192cc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80192c8:	f7eb f90e 	bl	80044e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80192cc:	4805      	ldr	r0, [pc, #20]	; (80192e4 <MX_USB_Device_Init+0x54>)
 80192ce:	f7fd fc3f 	bl	8016b50 <USBD_Start>
 80192d2:	4603      	mov	r3, r0
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d001      	beq.n	80192dc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80192d8:	f7eb f906 	bl	80044e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80192dc:	bf00      	nop
 80192de:	bd80      	pop	{r7, pc}
 80192e0:	20000218 	.word	0x20000218
 80192e4:	20028a20 	.word	0x20028a20
 80192e8:	20000094 	.word	0x20000094
 80192ec:	20000208 	.word	0x20000208

080192f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80192f4:	2200      	movs	r2, #0
 80192f6:	4905      	ldr	r1, [pc, #20]	; (801930c <CDC_Init_FS+0x1c>)
 80192f8:	4805      	ldr	r0, [pc, #20]	; (8019310 <CDC_Init_FS+0x20>)
 80192fa:	f7fd fb8c 	bl	8016a16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80192fe:	4905      	ldr	r1, [pc, #20]	; (8019314 <CDC_Init_FS+0x24>)
 8019300:	4803      	ldr	r0, [pc, #12]	; (8019310 <CDC_Init_FS+0x20>)
 8019302:	f7fd fba2 	bl	8016a4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019306:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019308:	4618      	mov	r0, r3
 801930a:	bd80      	pop	{r7, pc}
 801930c:	200294e4 	.word	0x200294e4
 8019310:	20028a20 	.word	0x20028a20
 8019314:	20028ce4 	.word	0x20028ce4

08019318 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019318:	b480      	push	{r7}
 801931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801931c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801931e:	4618      	mov	r0, r3
 8019320:	46bd      	mov	sp, r7
 8019322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019326:	4770      	bx	lr

08019328 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	4603      	mov	r3, r0
 8019330:	6039      	str	r1, [r7, #0]
 8019332:	71fb      	strb	r3, [r7, #7]
 8019334:	4613      	mov	r3, r2
 8019336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019338:	79fb      	ldrb	r3, [r7, #7]
 801933a:	2b23      	cmp	r3, #35	; 0x23
 801933c:	d84a      	bhi.n	80193d4 <CDC_Control_FS+0xac>
 801933e:	a201      	add	r2, pc, #4	; (adr r2, 8019344 <CDC_Control_FS+0x1c>)
 8019340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019344:	080193d5 	.word	0x080193d5
 8019348:	080193d5 	.word	0x080193d5
 801934c:	080193d5 	.word	0x080193d5
 8019350:	080193d5 	.word	0x080193d5
 8019354:	080193d5 	.word	0x080193d5
 8019358:	080193d5 	.word	0x080193d5
 801935c:	080193d5 	.word	0x080193d5
 8019360:	080193d5 	.word	0x080193d5
 8019364:	080193d5 	.word	0x080193d5
 8019368:	080193d5 	.word	0x080193d5
 801936c:	080193d5 	.word	0x080193d5
 8019370:	080193d5 	.word	0x080193d5
 8019374:	080193d5 	.word	0x080193d5
 8019378:	080193d5 	.word	0x080193d5
 801937c:	080193d5 	.word	0x080193d5
 8019380:	080193d5 	.word	0x080193d5
 8019384:	080193d5 	.word	0x080193d5
 8019388:	080193d5 	.word	0x080193d5
 801938c:	080193d5 	.word	0x080193d5
 8019390:	080193d5 	.word	0x080193d5
 8019394:	080193d5 	.word	0x080193d5
 8019398:	080193d5 	.word	0x080193d5
 801939c:	080193d5 	.word	0x080193d5
 80193a0:	080193d5 	.word	0x080193d5
 80193a4:	080193d5 	.word	0x080193d5
 80193a8:	080193d5 	.word	0x080193d5
 80193ac:	080193d5 	.word	0x080193d5
 80193b0:	080193d5 	.word	0x080193d5
 80193b4:	080193d5 	.word	0x080193d5
 80193b8:	080193d5 	.word	0x080193d5
 80193bc:	080193d5 	.word	0x080193d5
 80193c0:	080193d5 	.word	0x080193d5
 80193c4:	080193d5 	.word	0x080193d5
 80193c8:	080193d5 	.word	0x080193d5
 80193cc:	080193d5 	.word	0x080193d5
 80193d0:	080193d5 	.word	0x080193d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80193d4:	bf00      	nop
  }

  return (USBD_OK);
 80193d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80193d8:	4618      	mov	r0, r3
 80193da:	370c      	adds	r7, #12
 80193dc:	46bd      	mov	sp, r7
 80193de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e2:	4770      	bx	lr

080193e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b082      	sub	sp, #8
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
 80193ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(*Len == 6){
 80193ee:	683b      	ldr	r3, [r7, #0]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	2b06      	cmp	r3, #6
 80193f4:	d133      	bne.n	801945e <CDC_Receive_FS+0x7a>
	  receivedMsgPacket.len = 6;
 80193f6:	4b2a      	ldr	r3, [pc, #168]	; (80194a0 <CDC_Receive_FS+0xbc>)
 80193f8:	2206      	movs	r2, #6
 80193fa:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	3b30      	subs	r3, #48	; 0x30
 8019402:	b2da      	uxtb	r2, r3
 8019404:	4b26      	ldr	r3, [pc, #152]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019406:	705a      	strb	r2, [r3, #1]
	  receivedMsgPacket.buf[1] = Buf[1] - '0';
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	3301      	adds	r3, #1
 801940c:	781b      	ldrb	r3, [r3, #0]
 801940e:	3b30      	subs	r3, #48	; 0x30
 8019410:	b2da      	uxtb	r2, r3
 8019412:	4b23      	ldr	r3, [pc, #140]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019414:	709a      	strb	r2, [r3, #2]
	  receivedMsgPacket.buf[2] = Buf[2] - '0';
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	3302      	adds	r3, #2
 801941a:	781b      	ldrb	r3, [r3, #0]
 801941c:	3b30      	subs	r3, #48	; 0x30
 801941e:	b2da      	uxtb	r2, r3
 8019420:	4b1f      	ldr	r3, [pc, #124]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019422:	70da      	strb	r2, [r3, #3]
	  receivedMsgPacket.buf[3] = Buf[3] - '0';
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	3303      	adds	r3, #3
 8019428:	781b      	ldrb	r3, [r3, #0]
 801942a:	3b30      	subs	r3, #48	; 0x30
 801942c:	b2da      	uxtb	r2, r3
 801942e:	4b1c      	ldr	r3, [pc, #112]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019430:	711a      	strb	r2, [r3, #4]
	  receivedMsgPacket.buf[4] = Buf[4] - '0';
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	3304      	adds	r3, #4
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	3b30      	subs	r3, #48	; 0x30
 801943a:	b2da      	uxtb	r2, r3
 801943c:	4b18      	ldr	r3, [pc, #96]	; (80194a0 <CDC_Receive_FS+0xbc>)
 801943e:	715a      	strb	r2, [r3, #5]
	  receivedMsgPacket.buf[5]  = Buf[5] - '0';
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	3305      	adds	r3, #5
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	3b30      	subs	r3, #48	; 0x30
 8019448:	b2da      	uxtb	r2, r3
 801944a:	4b15      	ldr	r3, [pc, #84]	; (80194a0 <CDC_Receive_FS+0xbc>)
 801944c:	719a      	strb	r2, [r3, #6]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 801944e:	4b15      	ldr	r3, [pc, #84]	; (80194a4 <CDC_Receive_FS+0xc0>)
 8019450:	6818      	ldr	r0, [r3, #0]
 8019452:	2300      	movs	r3, #0
 8019454:	2200      	movs	r2, #0
 8019456:	4912      	ldr	r1, [pc, #72]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019458:	f7f7 fdf2 	bl	8011040 <osMessageQueuePut>
 801945c:	e013      	b.n	8019486 <CDC_Receive_FS+0xa2>

//	  APP_THREAD_SendCoapMsg(&logReceivedMessage, sizeof(struct LogMessage), &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  else if(*Len == 1){
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	2b01      	cmp	r3, #1
 8019464:	d10f      	bne.n	8019486 <CDC_Receive_FS+0xa2>
	  receivedMsgPacket.len = 1;
 8019466:	4b0e      	ldr	r3, [pc, #56]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019468:	2201      	movs	r2, #1
 801946a:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	781b      	ldrb	r3, [r3, #0]
 8019470:	3b30      	subs	r3, #48	; 0x30
 8019472:	b2da      	uxtb	r2, r3
 8019474:	4b0a      	ldr	r3, [pc, #40]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019476:	705a      	strb	r2, [r3, #1]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 8019478:	4b0a      	ldr	r3, [pc, #40]	; (80194a4 <CDC_Receive_FS+0xc0>)
 801947a:	6818      	ldr	r0, [r3, #0]
 801947c:	2300      	movs	r3, #0
 801947e:	2200      	movs	r2, #0
 8019480:	4907      	ldr	r1, [pc, #28]	; (80194a0 <CDC_Receive_FS+0xbc>)
 8019482:	f7f7 fddd 	bl	8011040 <osMessageQueuePut>

//	  APP_THREAD_SendCoapMsg(&lightsSimpleReceivedMessage, sizeof(lightsSimpleReceivedMessage), &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019486:	6879      	ldr	r1, [r7, #4]
 8019488:	4807      	ldr	r0, [pc, #28]	; (80194a8 <CDC_Receive_FS+0xc4>)
 801948a:	f7fd fade 	bl	8016a4a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801948e:	4806      	ldr	r0, [pc, #24]	; (80194a8 <CDC_Receive_FS+0xc4>)
 8019490:	f7fd faef 	bl	8016a72 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019494:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019496:	4618      	mov	r0, r3
 8019498:	3708      	adds	r7, #8
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}
 801949e:	bf00      	nop
 80194a0:	20029ce4 	.word	0x20029ce4
 80194a4:	20027c4c 	.word	0x20027c4c
 80194a8:	20028a20 	.word	0x20028a20

080194ac <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194ac:	b480      	push	{r7}
 80194ae:	b083      	sub	sp, #12
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	4603      	mov	r3, r0
 80194b4:	6039      	str	r1, [r7, #0]
 80194b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80194b8:	683b      	ldr	r3, [r7, #0]
 80194ba:	2212      	movs	r2, #18
 80194bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80194be:	4b03      	ldr	r3, [pc, #12]	; (80194cc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80194c0:	4618      	mov	r0, r3
 80194c2:	370c      	adds	r7, #12
 80194c4:	46bd      	mov	sp, r7
 80194c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ca:	4770      	bx	lr
 80194cc:	20000238 	.word	0x20000238

080194d0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194d0:	b480      	push	{r7}
 80194d2:	b083      	sub	sp, #12
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	4603      	mov	r3, r0
 80194d8:	6039      	str	r1, [r7, #0]
 80194da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	2204      	movs	r2, #4
 80194e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80194e2:	4b03      	ldr	r3, [pc, #12]	; (80194f0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80194e4:	4618      	mov	r0, r3
 80194e6:	370c      	adds	r7, #12
 80194e8:	46bd      	mov	sp, r7
 80194ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ee:	4770      	bx	lr
 80194f0:	2000024c 	.word	0x2000024c

080194f4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b082      	sub	sp, #8
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	4603      	mov	r3, r0
 80194fc:	6039      	str	r1, [r7, #0]
 80194fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019500:	79fb      	ldrb	r3, [r7, #7]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d105      	bne.n	8019512 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019506:	683a      	ldr	r2, [r7, #0]
 8019508:	4907      	ldr	r1, [pc, #28]	; (8019528 <USBD_CDC_ProductStrDescriptor+0x34>)
 801950a:	4808      	ldr	r0, [pc, #32]	; (801952c <USBD_CDC_ProductStrDescriptor+0x38>)
 801950c:	f7fe fad0 	bl	8017ab0 <USBD_GetString>
 8019510:	e004      	b.n	801951c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019512:	683a      	ldr	r2, [r7, #0]
 8019514:	4904      	ldr	r1, [pc, #16]	; (8019528 <USBD_CDC_ProductStrDescriptor+0x34>)
 8019516:	4805      	ldr	r0, [pc, #20]	; (801952c <USBD_CDC_ProductStrDescriptor+0x38>)
 8019518:	f7fe faca 	bl	8017ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801951c:	4b02      	ldr	r3, [pc, #8]	; (8019528 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801951e:	4618      	mov	r0, r3
 8019520:	3708      	adds	r7, #8
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}
 8019526:	bf00      	nop
 8019528:	20029cf0 	.word	0x20029cf0
 801952c:	0801ba2c 	.word	0x0801ba2c

08019530 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b082      	sub	sp, #8
 8019534:	af00      	add	r7, sp, #0
 8019536:	4603      	mov	r3, r0
 8019538:	6039      	str	r1, [r7, #0]
 801953a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801953c:	683a      	ldr	r2, [r7, #0]
 801953e:	4904      	ldr	r1, [pc, #16]	; (8019550 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8019540:	4804      	ldr	r0, [pc, #16]	; (8019554 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8019542:	f7fe fab5 	bl	8017ab0 <USBD_GetString>
  return USBD_StrDesc;
 8019546:	4b02      	ldr	r3, [pc, #8]	; (8019550 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8019548:	4618      	mov	r0, r3
 801954a:	3708      	adds	r7, #8
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}
 8019550:	20029cf0 	.word	0x20029cf0
 8019554:	0801ba44 	.word	0x0801ba44

08019558 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019558:	b580      	push	{r7, lr}
 801955a:	b082      	sub	sp, #8
 801955c:	af00      	add	r7, sp, #0
 801955e:	4603      	mov	r3, r0
 8019560:	6039      	str	r1, [r7, #0]
 8019562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	221a      	movs	r2, #26
 8019568:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801956a:	f000 f843 	bl	80195f4 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801956e:	4b02      	ldr	r3, [pc, #8]	; (8019578 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8019570:	4618      	mov	r0, r3
 8019572:	3708      	adds	r7, #8
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}
 8019578:	20000250 	.word	0x20000250

0801957c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b082      	sub	sp, #8
 8019580:	af00      	add	r7, sp, #0
 8019582:	4603      	mov	r3, r0
 8019584:	6039      	str	r1, [r7, #0]
 8019586:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019588:	79fb      	ldrb	r3, [r7, #7]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d105      	bne.n	801959a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801958e:	683a      	ldr	r2, [r7, #0]
 8019590:	4907      	ldr	r1, [pc, #28]	; (80195b0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019592:	4808      	ldr	r0, [pc, #32]	; (80195b4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019594:	f7fe fa8c 	bl	8017ab0 <USBD_GetString>
 8019598:	e004      	b.n	80195a4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801959a:	683a      	ldr	r2, [r7, #0]
 801959c:	4904      	ldr	r1, [pc, #16]	; (80195b0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801959e:	4805      	ldr	r0, [pc, #20]	; (80195b4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80195a0:	f7fe fa86 	bl	8017ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80195a4:	4b02      	ldr	r3, [pc, #8]	; (80195b0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80195a6:	4618      	mov	r0, r3
 80195a8:	3708      	adds	r7, #8
 80195aa:	46bd      	mov	sp, r7
 80195ac:	bd80      	pop	{r7, pc}
 80195ae:	bf00      	nop
 80195b0:	20029cf0 	.word	0x20029cf0
 80195b4:	0801ba58 	.word	0x0801ba58

080195b8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	4603      	mov	r3, r0
 80195c0:	6039      	str	r1, [r7, #0]
 80195c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80195c4:	79fb      	ldrb	r3, [r7, #7]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d105      	bne.n	80195d6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80195ca:	683a      	ldr	r2, [r7, #0]
 80195cc:	4907      	ldr	r1, [pc, #28]	; (80195ec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80195ce:	4808      	ldr	r0, [pc, #32]	; (80195f0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80195d0:	f7fe fa6e 	bl	8017ab0 <USBD_GetString>
 80195d4:	e004      	b.n	80195e0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80195d6:	683a      	ldr	r2, [r7, #0]
 80195d8:	4904      	ldr	r1, [pc, #16]	; (80195ec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80195da:	4805      	ldr	r0, [pc, #20]	; (80195f0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80195dc:	f7fe fa68 	bl	8017ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80195e0:	4b02      	ldr	r3, [pc, #8]	; (80195ec <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3708      	adds	r7, #8
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
 80195ea:	bf00      	nop
 80195ec:	20029cf0 	.word	0x20029cf0
 80195f0:	0801ba64 	.word	0x0801ba64

080195f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b084      	sub	sp, #16
 80195f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80195fa:	4b0f      	ldr	r3, [pc, #60]	; (8019638 <Get_SerialNum+0x44>)
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019600:	4b0e      	ldr	r3, [pc, #56]	; (801963c <Get_SerialNum+0x48>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019606:	4b0e      	ldr	r3, [pc, #56]	; (8019640 <Get_SerialNum+0x4c>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801960c:	68fa      	ldr	r2, [r7, #12]
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	4413      	add	r3, r2
 8019612:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d009      	beq.n	801962e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801961a:	2208      	movs	r2, #8
 801961c:	4909      	ldr	r1, [pc, #36]	; (8019644 <Get_SerialNum+0x50>)
 801961e:	68f8      	ldr	r0, [r7, #12]
 8019620:	f000 f814 	bl	801964c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019624:	2204      	movs	r2, #4
 8019626:	4908      	ldr	r1, [pc, #32]	; (8019648 <Get_SerialNum+0x54>)
 8019628:	68b8      	ldr	r0, [r7, #8]
 801962a:	f000 f80f 	bl	801964c <IntToUnicode>
  }
}
 801962e:	bf00      	nop
 8019630:	3710      	adds	r7, #16
 8019632:	46bd      	mov	sp, r7
 8019634:	bd80      	pop	{r7, pc}
 8019636:	bf00      	nop
 8019638:	1fff7590 	.word	0x1fff7590
 801963c:	1fff7594 	.word	0x1fff7594
 8019640:	1fff7598 	.word	0x1fff7598
 8019644:	20000252 	.word	0x20000252
 8019648:	20000262 	.word	0x20000262

0801964c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801964c:	b480      	push	{r7}
 801964e:	b087      	sub	sp, #28
 8019650:	af00      	add	r7, sp, #0
 8019652:	60f8      	str	r0, [r7, #12]
 8019654:	60b9      	str	r1, [r7, #8]
 8019656:	4613      	mov	r3, r2
 8019658:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801965a:	2300      	movs	r3, #0
 801965c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801965e:	2300      	movs	r3, #0
 8019660:	75fb      	strb	r3, [r7, #23]
 8019662:	e027      	b.n	80196b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	0f1b      	lsrs	r3, r3, #28
 8019668:	2b09      	cmp	r3, #9
 801966a:	d80b      	bhi.n	8019684 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	0f1b      	lsrs	r3, r3, #28
 8019670:	b2da      	uxtb	r2, r3
 8019672:	7dfb      	ldrb	r3, [r7, #23]
 8019674:	005b      	lsls	r3, r3, #1
 8019676:	4619      	mov	r1, r3
 8019678:	68bb      	ldr	r3, [r7, #8]
 801967a:	440b      	add	r3, r1
 801967c:	3230      	adds	r2, #48	; 0x30
 801967e:	b2d2      	uxtb	r2, r2
 8019680:	701a      	strb	r2, [r3, #0]
 8019682:	e00a      	b.n	801969a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	0f1b      	lsrs	r3, r3, #28
 8019688:	b2da      	uxtb	r2, r3
 801968a:	7dfb      	ldrb	r3, [r7, #23]
 801968c:	005b      	lsls	r3, r3, #1
 801968e:	4619      	mov	r1, r3
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	440b      	add	r3, r1
 8019694:	3237      	adds	r2, #55	; 0x37
 8019696:	b2d2      	uxtb	r2, r2
 8019698:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	011b      	lsls	r3, r3, #4
 801969e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80196a0:	7dfb      	ldrb	r3, [r7, #23]
 80196a2:	005b      	lsls	r3, r3, #1
 80196a4:	3301      	adds	r3, #1
 80196a6:	68ba      	ldr	r2, [r7, #8]
 80196a8:	4413      	add	r3, r2
 80196aa:	2200      	movs	r2, #0
 80196ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80196ae:	7dfb      	ldrb	r3, [r7, #23]
 80196b0:	3301      	adds	r3, #1
 80196b2:	75fb      	strb	r3, [r7, #23]
 80196b4:	7dfa      	ldrb	r2, [r7, #23]
 80196b6:	79fb      	ldrb	r3, [r7, #7]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d3d3      	bcc.n	8019664 <IntToUnicode+0x18>
  }
}
 80196bc:	bf00      	nop
 80196be:	371c      	adds	r7, #28
 80196c0:	46bd      	mov	sp, r7
 80196c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c6:	4770      	bx	lr

080196c8 <LL_AHB2_GRP1_EnableClock>:
{
 80196c8:	b480      	push	{r7}
 80196ca:	b085      	sub	sp, #20
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80196d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80196d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	4313      	orrs	r3, r2
 80196de:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80196e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80196e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	4013      	ands	r3, r2
 80196ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80196ec:	68fb      	ldr	r3, [r7, #12]
}
 80196ee:	bf00      	nop
 80196f0:	3714      	adds	r7, #20
 80196f2:	46bd      	mov	sp, r7
 80196f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f8:	4770      	bx	lr

080196fa <LL_APB1_GRP1_EnableClock>:
{
 80196fa:	b480      	push	{r7}
 80196fc:	b085      	sub	sp, #20
 80196fe:	af00      	add	r7, sp, #0
 8019700:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8019702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019706:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	4313      	orrs	r3, r2
 8019710:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8019712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019716:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	4013      	ands	r3, r2
 801971c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801971e:	68fb      	ldr	r3, [r7, #12]
}
 8019720:	bf00      	nop
 8019722:	3714      	adds	r7, #20
 8019724:	46bd      	mov	sp, r7
 8019726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801972a:	4770      	bx	lr

0801972c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b088      	sub	sp, #32
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019734:	f107 030c 	add.w	r3, r7, #12
 8019738:	2200      	movs	r2, #0
 801973a:	601a      	str	r2, [r3, #0]
 801973c:	605a      	str	r2, [r3, #4]
 801973e:	609a      	str	r2, [r3, #8]
 8019740:	60da      	str	r2, [r3, #12]
 8019742:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	4a13      	ldr	r2, [pc, #76]	; (8019798 <HAL_PCD_MspInit+0x6c>)
 801974a:	4293      	cmp	r3, r2
 801974c:	d120      	bne.n	8019790 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801974e:	2001      	movs	r0, #1
 8019750:	f7ff ffba 	bl	80196c8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019754:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801975a:	2302      	movs	r3, #2
 801975c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801975e:	2300      	movs	r3, #0
 8019760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019762:	2300      	movs	r3, #0
 8019764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8019766:	230a      	movs	r3, #10
 8019768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801976a:	f107 030c 	add.w	r3, r7, #12
 801976e:	4619      	mov	r1, r3
 8019770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019774:	f7ef f9a0 	bl	8008ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019778:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801977c:	f7ff ffbd 	bl	80196fa <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8019780:	2200      	movs	r2, #0
 8019782:	2105      	movs	r1, #5
 8019784:	2014      	movs	r0, #20
 8019786:	f7ee fe10 	bl	80083aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801978a:	2014      	movs	r0, #20
 801978c:	f7ee fe27 	bl	80083de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019790:	bf00      	nop
 8019792:	3720      	adds	r7, #32
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}
 8019798:	40006800 	.word	0x40006800

0801979c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80197b0:	4619      	mov	r1, r3
 80197b2:	4610      	mov	r0, r2
 80197b4:	f7fd fa2b 	bl	8016c0e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80197b8:	bf00      	nop
 80197ba:	3708      	adds	r7, #8
 80197bc:	46bd      	mov	sp, r7
 80197be:	bd80      	pop	{r7, pc}

080197c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b082      	sub	sp, #8
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
 80197c8:	460b      	mov	r3, r1
 80197ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80197d2:	78fb      	ldrb	r3, [r7, #3]
 80197d4:	687a      	ldr	r2, [r7, #4]
 80197d6:	015b      	lsls	r3, r3, #5
 80197d8:	4413      	add	r3, r2
 80197da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80197de:	681a      	ldr	r2, [r3, #0]
 80197e0:	78fb      	ldrb	r3, [r7, #3]
 80197e2:	4619      	mov	r1, r3
 80197e4:	f7fd fa5e 	bl	8016ca4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80197e8:	bf00      	nop
 80197ea:	3708      	adds	r7, #8
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}

080197f0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b082      	sub	sp, #8
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	460b      	mov	r3, r1
 80197fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8019802:	78fb      	ldrb	r3, [r7, #3]
 8019804:	687a      	ldr	r2, [r7, #4]
 8019806:	015b      	lsls	r3, r3, #5
 8019808:	4413      	add	r3, r2
 801980a:	333c      	adds	r3, #60	; 0x3c
 801980c:	681a      	ldr	r2, [r3, #0]
 801980e:	78fb      	ldrb	r3, [r7, #3]
 8019810:	4619      	mov	r1, r3
 8019812:	f7fd fab8 	bl	8016d86 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8019816:	bf00      	nop
 8019818:	3708      	adds	r7, #8
 801981a:	46bd      	mov	sp, r7
 801981c:	bd80      	pop	{r7, pc}

0801981e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801981e:	b580      	push	{r7, lr}
 8019820:	b082      	sub	sp, #8
 8019822:	af00      	add	r7, sp, #0
 8019824:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801982c:	4618      	mov	r0, r3
 801982e:	f7fd fbcb 	bl	8016fc8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8019832:	bf00      	nop
 8019834:	3708      	adds	r7, #8
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}

0801983a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801983a:	b580      	push	{r7, lr}
 801983c:	b084      	sub	sp, #16
 801983e:	af00      	add	r7, sp, #0
 8019840:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019842:	2301      	movs	r3, #1
 8019844:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	689b      	ldr	r3, [r3, #8]
 801984a:	2b02      	cmp	r3, #2
 801984c:	d001      	beq.n	8019852 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801984e:	f7ea fe4b 	bl	80044e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019858:	7bfa      	ldrb	r2, [r7, #15]
 801985a:	4611      	mov	r1, r2
 801985c:	4618      	mov	r0, r3
 801985e:	f7fd fb78 	bl	8016f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019868:	4618      	mov	r0, r3
 801986a:	f7fd fb31 	bl	8016ed0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801986e:	bf00      	nop
 8019870:	3710      	adds	r7, #16
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
	...

08019878 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019886:	4618      	mov	r0, r3
 8019888:	f7fd fb73 	bl	8016f72 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	699b      	ldr	r3, [r3, #24]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d005      	beq.n	80198a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019894:	4b04      	ldr	r3, [pc, #16]	; (80198a8 <HAL_PCD_SuspendCallback+0x30>)
 8019896:	691b      	ldr	r3, [r3, #16]
 8019898:	4a03      	ldr	r2, [pc, #12]	; (80198a8 <HAL_PCD_SuspendCallback+0x30>)
 801989a:	f043 0306 	orr.w	r3, r3, #6
 801989e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80198a0:	bf00      	nop
 80198a2:	3708      	adds	r7, #8
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	e000ed00 	.word	0xe000ed00

080198ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b082      	sub	sp, #8
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	699b      	ldr	r3, [r3, #24]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d007      	beq.n	80198cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80198bc:	4b08      	ldr	r3, [pc, #32]	; (80198e0 <HAL_PCD_ResumeCallback+0x34>)
 80198be:	691b      	ldr	r3, [r3, #16]
 80198c0:	4a07      	ldr	r2, [pc, #28]	; (80198e0 <HAL_PCD_ResumeCallback+0x34>)
 80198c2:	f023 0306 	bic.w	r3, r3, #6
 80198c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80198c8:	f000 fa14 	bl	8019cf4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7fd fb62 	bl	8016f9c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80198d8:	bf00      	nop
 80198da:	3708      	adds	r7, #8
 80198dc:	46bd      	mov	sp, r7
 80198de:	bd80      	pop	{r7, pc}
 80198e0:	e000ed00 	.word	0xe000ed00

080198e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b082      	sub	sp, #8
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80198ec:	4a2c      	ldr	r2, [pc, #176]	; (80199a0 <USBD_LL_Init+0xbc>)
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	4a2a      	ldr	r2, [pc, #168]	; (80199a0 <USBD_LL_Init+0xbc>)
 80198f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80198fc:	f7f2 f972 	bl	800bbe4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8019900:	4b27      	ldr	r3, [pc, #156]	; (80199a0 <USBD_LL_Init+0xbc>)
 8019902:	4a28      	ldr	r2, [pc, #160]	; (80199a4 <USBD_LL_Init+0xc0>)
 8019904:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019906:	4b26      	ldr	r3, [pc, #152]	; (80199a0 <USBD_LL_Init+0xbc>)
 8019908:	2208      	movs	r2, #8
 801990a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801990c:	4b24      	ldr	r3, [pc, #144]	; (80199a0 <USBD_LL_Init+0xbc>)
 801990e:	2202      	movs	r2, #2
 8019910:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019912:	4b23      	ldr	r3, [pc, #140]	; (80199a0 <USBD_LL_Init+0xbc>)
 8019914:	2202      	movs	r2, #2
 8019916:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8019918:	4b21      	ldr	r3, [pc, #132]	; (80199a0 <USBD_LL_Init+0xbc>)
 801991a:	2200      	movs	r2, #0
 801991c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801991e:	4b20      	ldr	r3, [pc, #128]	; (80199a0 <USBD_LL_Init+0xbc>)
 8019920:	2200      	movs	r2, #0
 8019922:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019924:	4b1e      	ldr	r3, [pc, #120]	; (80199a0 <USBD_LL_Init+0xbc>)
 8019926:	2200      	movs	r2, #0
 8019928:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801992a:	4b1d      	ldr	r3, [pc, #116]	; (80199a0 <USBD_LL_Init+0xbc>)
 801992c:	2200      	movs	r2, #0
 801992e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019930:	481b      	ldr	r0, [pc, #108]	; (80199a0 <USBD_LL_Init+0xbc>)
 8019932:	f7f1 f9f9 	bl	800ad28 <HAL_PCD_Init>
 8019936:	4603      	mov	r3, r0
 8019938:	2b00      	cmp	r3, #0
 801993a:	d001      	beq.n	8019940 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801993c:	f7ea fdd4 	bl	80044e8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019946:	2318      	movs	r3, #24
 8019948:	2200      	movs	r2, #0
 801994a:	2100      	movs	r1, #0
 801994c:	f7f2 f8c4 	bl	800bad8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019956:	2358      	movs	r3, #88	; 0x58
 8019958:	2200      	movs	r2, #0
 801995a:	2180      	movs	r1, #128	; 0x80
 801995c:	f7f2 f8bc 	bl	800bad8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019966:	23c0      	movs	r3, #192	; 0xc0
 8019968:	2200      	movs	r2, #0
 801996a:	2181      	movs	r1, #129	; 0x81
 801996c:	f7f2 f8b4 	bl	800bad8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019976:	f44f 7388 	mov.w	r3, #272	; 0x110
 801997a:	2200      	movs	r2, #0
 801997c:	2101      	movs	r1, #1
 801997e:	f7f2 f8ab 	bl	800bad8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019988:	f44f 7380 	mov.w	r3, #256	; 0x100
 801998c:	2200      	movs	r2, #0
 801998e:	2182      	movs	r1, #130	; 0x82
 8019990:	f7f2 f8a2 	bl	800bad8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019994:	2300      	movs	r3, #0
}
 8019996:	4618      	mov	r0, r3
 8019998:	3708      	adds	r7, #8
 801999a:	46bd      	mov	sp, r7
 801999c:	bd80      	pop	{r7, pc}
 801999e:	bf00      	nop
 80199a0:	20029ef0 	.word	0x20029ef0
 80199a4:	40006800 	.word	0x40006800

080199a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b084      	sub	sp, #16
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199b0:	2300      	movs	r3, #0
 80199b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199b4:	2300      	movs	r3, #0
 80199b6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80199be:	4618      	mov	r0, r3
 80199c0:	f7f1 fa6d 	bl	800ae9e <HAL_PCD_Start>
 80199c4:	4603      	mov	r3, r0
 80199c6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80199c8:	7bfb      	ldrb	r3, [r7, #15]
 80199ca:	4618      	mov	r0, r3
 80199cc:	f000 f998 	bl	8019d00 <USBD_Get_USB_Status>
 80199d0:	4603      	mov	r3, r0
 80199d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80199d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80199d6:	4618      	mov	r0, r3
 80199d8:	3710      	adds	r7, #16
 80199da:	46bd      	mov	sp, r7
 80199dc:	bd80      	pop	{r7, pc}

080199de <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80199de:	b580      	push	{r7, lr}
 80199e0:	b084      	sub	sp, #16
 80199e2:	af00      	add	r7, sp, #0
 80199e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199e6:	2300      	movs	r3, #0
 80199e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199ea:	2300      	movs	r3, #0
 80199ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80199f4:	4618      	mov	r0, r3
 80199f6:	f7f1 fa74 	bl	800aee2 <HAL_PCD_Stop>
 80199fa:	4603      	mov	r3, r0
 80199fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199fe:	7bfb      	ldrb	r3, [r7, #15]
 8019a00:	4618      	mov	r0, r3
 8019a02:	f000 f97d 	bl	8019d00 <USBD_Get_USB_Status>
 8019a06:	4603      	mov	r3, r0
 8019a08:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	3710      	adds	r7, #16
 8019a10:	46bd      	mov	sp, r7
 8019a12:	bd80      	pop	{r7, pc}

08019a14 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b084      	sub	sp, #16
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
 8019a1c:	4608      	mov	r0, r1
 8019a1e:	4611      	mov	r1, r2
 8019a20:	461a      	mov	r2, r3
 8019a22:	4603      	mov	r3, r0
 8019a24:	70fb      	strb	r3, [r7, #3]
 8019a26:	460b      	mov	r3, r1
 8019a28:	70bb      	strb	r3, [r7, #2]
 8019a2a:	4613      	mov	r3, r2
 8019a2c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a32:	2300      	movs	r3, #0
 8019a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019a3c:	78bb      	ldrb	r3, [r7, #2]
 8019a3e:	883a      	ldrh	r2, [r7, #0]
 8019a40:	78f9      	ldrb	r1, [r7, #3]
 8019a42:	f7f1 fbee 	bl	800b222 <HAL_PCD_EP_Open>
 8019a46:	4603      	mov	r3, r0
 8019a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a4a:	7bfb      	ldrb	r3, [r7, #15]
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f000 f957 	bl	8019d00 <USBD_Get_USB_Status>
 8019a52:	4603      	mov	r3, r0
 8019a54:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8019a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	3710      	adds	r7, #16
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	bd80      	pop	{r7, pc}

08019a60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b084      	sub	sp, #16
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	460b      	mov	r3, r1
 8019a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a70:	2300      	movs	r3, #0
 8019a72:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a7a:	78fa      	ldrb	r2, [r7, #3]
 8019a7c:	4611      	mov	r1, r2
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f7f1 fc2f 	bl	800b2e2 <HAL_PCD_EP_Close>
 8019a84:	4603      	mov	r3, r0
 8019a86:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a88:	7bfb      	ldrb	r3, [r7, #15]
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f000 f938 	bl	8019d00 <USBD_Get_USB_Status>
 8019a90:	4603      	mov	r3, r0
 8019a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8019a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a96:	4618      	mov	r0, r3
 8019a98:	3710      	adds	r7, #16
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bd80      	pop	{r7, pc}

08019a9e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b084      	sub	sp, #16
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
 8019aa6:	460b      	mov	r3, r1
 8019aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aaa:	2300      	movs	r3, #0
 8019aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019aae:	2300      	movs	r3, #0
 8019ab0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019ab8:	78fa      	ldrb	r2, [r7, #3]
 8019aba:	4611      	mov	r1, r2
 8019abc:	4618      	mov	r0, r3
 8019abe:	f7f1 fcda 	bl	800b476 <HAL_PCD_EP_SetStall>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ac6:	7bfb      	ldrb	r3, [r7, #15]
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f000 f919 	bl	8019d00 <USBD_Get_USB_Status>
 8019ace:	4603      	mov	r3, r0
 8019ad0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3710      	adds	r7, #16
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}

08019adc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b084      	sub	sp, #16
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
 8019ae4:	460b      	mov	r3, r1
 8019ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ae8:	2300      	movs	r3, #0
 8019aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019aec:	2300      	movs	r3, #0
 8019aee:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019af6:	78fa      	ldrb	r2, [r7, #3]
 8019af8:	4611      	mov	r1, r2
 8019afa:	4618      	mov	r0, r3
 8019afc:	f7f1 fd15 	bl	800b52a <HAL_PCD_EP_ClrStall>
 8019b00:	4603      	mov	r3, r0
 8019b02:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b04:	7bfb      	ldrb	r3, [r7, #15]
 8019b06:	4618      	mov	r0, r3
 8019b08:	f000 f8fa 	bl	8019d00 <USBD_Get_USB_Status>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8019b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	3710      	adds	r7, #16
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}

08019b1a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b1a:	b480      	push	{r7}
 8019b1c:	b085      	sub	sp, #20
 8019b1e:	af00      	add	r7, sp, #0
 8019b20:	6078      	str	r0, [r7, #4]
 8019b22:	460b      	mov	r3, r1
 8019b24:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b2c:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8019b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	da08      	bge.n	8019b48 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8019b36:	78fb      	ldrb	r3, [r7, #3]
 8019b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b3c:	68fa      	ldr	r2, [r7, #12]
 8019b3e:	015b      	lsls	r3, r3, #5
 8019b40:	4413      	add	r3, r2
 8019b42:	332a      	adds	r3, #42	; 0x2a
 8019b44:	781b      	ldrb	r3, [r3, #0]
 8019b46:	e008      	b.n	8019b5a <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8019b48:	78fb      	ldrb	r3, [r7, #3]
 8019b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b4e:	68fa      	ldr	r2, [r7, #12]
 8019b50:	015b      	lsls	r3, r3, #5
 8019b52:	4413      	add	r3, r2
 8019b54:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8019b58:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	3714      	adds	r7, #20
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b64:	4770      	bx	lr

08019b66 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019b66:	b580      	push	{r7, lr}
 8019b68:	b084      	sub	sp, #16
 8019b6a:	af00      	add	r7, sp, #0
 8019b6c:	6078      	str	r0, [r7, #4]
 8019b6e:	460b      	mov	r3, r1
 8019b70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b72:	2300      	movs	r3, #0
 8019b74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b76:	2300      	movs	r3, #0
 8019b78:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b80:	78fa      	ldrb	r2, [r7, #3]
 8019b82:	4611      	mov	r1, r2
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7f1 fb27 	bl	800b1d8 <HAL_PCD_SetAddress>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b8e:	7bfb      	ldrb	r3, [r7, #15]
 8019b90:	4618      	mov	r0, r3
 8019b92:	f000 f8b5 	bl	8019d00 <USBD_Get_USB_Status>
 8019b96:	4603      	mov	r3, r0
 8019b98:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	3710      	adds	r7, #16
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	bd80      	pop	{r7, pc}

08019ba4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b086      	sub	sp, #24
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	60f8      	str	r0, [r7, #12]
 8019bac:	607a      	str	r2, [r7, #4]
 8019bae:	461a      	mov	r2, r3
 8019bb0:	460b      	mov	r3, r1
 8019bb2:	72fb      	strb	r3, [r7, #11]
 8019bb4:	4613      	mov	r3, r2
 8019bb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bb8:	2300      	movs	r3, #0
 8019bba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019bc6:	893b      	ldrh	r3, [r7, #8]
 8019bc8:	7af9      	ldrb	r1, [r7, #11]
 8019bca:	687a      	ldr	r2, [r7, #4]
 8019bcc:	f7f1 fc1a 	bl	800b404 <HAL_PCD_EP_Transmit>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019bd4:	7dfb      	ldrb	r3, [r7, #23]
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	f000 f892 	bl	8019d00 <USBD_Get_USB_Status>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8019be0:	7dbb      	ldrb	r3, [r7, #22]
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3718      	adds	r7, #24
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}

08019bea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019bea:	b580      	push	{r7, lr}
 8019bec:	b086      	sub	sp, #24
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	60f8      	str	r0, [r7, #12]
 8019bf2:	607a      	str	r2, [r7, #4]
 8019bf4:	461a      	mov	r2, r3
 8019bf6:	460b      	mov	r3, r1
 8019bf8:	72fb      	strb	r3, [r7, #11]
 8019bfa:	4613      	mov	r3, r2
 8019bfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c02:	2300      	movs	r3, #0
 8019c04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019c0c:	893b      	ldrh	r3, [r7, #8]
 8019c0e:	7af9      	ldrb	r1, [r7, #11]
 8019c10:	687a      	ldr	r2, [r7, #4]
 8019c12:	f7f1 fba8 	bl	800b366 <HAL_PCD_EP_Receive>
 8019c16:	4603      	mov	r3, r0
 8019c18:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c1a:	7dfb      	ldrb	r3, [r7, #23]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f000 f86f 	bl	8019d00 <USBD_Get_USB_Status>
 8019c22:	4603      	mov	r3, r0
 8019c24:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8019c26:	7dbb      	ldrb	r3, [r7, #22]
}
 8019c28:	4618      	mov	r0, r3
 8019c2a:	3718      	adds	r7, #24
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	bd80      	pop	{r7, pc}

08019c30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b082      	sub	sp, #8
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	6078      	str	r0, [r7, #4]
 8019c38:	460b      	mov	r3, r1
 8019c3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019c42:	78fa      	ldrb	r2, [r7, #3]
 8019c44:	4611      	mov	r1, r2
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7f1 fbc7 	bl	800b3da <HAL_PCD_EP_GetRxCount>
 8019c4c:	4603      	mov	r3, r0
}
 8019c4e:	4618      	mov	r0, r3
 8019c50:	3708      	adds	r7, #8
 8019c52:	46bd      	mov	sp, r7
 8019c54:	bd80      	pop	{r7, pc}
	...

08019c58 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b082      	sub	sp, #8
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
 8019c60:	460b      	mov	r3, r1
 8019c62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019c64:	78fb      	ldrb	r3, [r7, #3]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d002      	beq.n	8019c70 <HAL_PCDEx_LPM_Callback+0x18>
 8019c6a:	2b01      	cmp	r3, #1
 8019c6c:	d013      	beq.n	8019c96 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8019c6e:	e023      	b.n	8019cb8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	699b      	ldr	r3, [r3, #24]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d007      	beq.n	8019c88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019c78:	f000 f83c 	bl	8019cf4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019c7c:	4b10      	ldr	r3, [pc, #64]	; (8019cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8019c7e:	691b      	ldr	r3, [r3, #16]
 8019c80:	4a0f      	ldr	r2, [pc, #60]	; (8019cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8019c82:	f023 0306 	bic.w	r3, r3, #6
 8019c86:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f7fd f984 	bl	8016f9c <USBD_LL_Resume>
    break;
 8019c94:	e010      	b.n	8019cb8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	f7fd f968 	bl	8016f72 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	699b      	ldr	r3, [r3, #24]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d005      	beq.n	8019cb6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019caa:	4b05      	ldr	r3, [pc, #20]	; (8019cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8019cac:	691b      	ldr	r3, [r3, #16]
 8019cae:	4a04      	ldr	r2, [pc, #16]	; (8019cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8019cb0:	f043 0306 	orr.w	r3, r3, #6
 8019cb4:	6113      	str	r3, [r2, #16]
    break;   
 8019cb6:	bf00      	nop
}
 8019cb8:	bf00      	nop
 8019cba:	3708      	adds	r7, #8
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	bd80      	pop	{r7, pc}
 8019cc0:	e000ed00 	.word	0xe000ed00

08019cc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019cc4:	b480      	push	{r7}
 8019cc6:	b083      	sub	sp, #12
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019ccc:	4b03      	ldr	r3, [pc, #12]	; (8019cdc <USBD_static_malloc+0x18>)
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	370c      	adds	r7, #12
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd8:	4770      	bx	lr
 8019cda:	bf00      	nop
 8019cdc:	20027854 	.word	0x20027854

08019ce0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019ce0:	b480      	push	{r7}
 8019ce2:	b083      	sub	sp, #12
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]

}
 8019ce8:	bf00      	nop
 8019cea:	370c      	adds	r7, #12
 8019cec:	46bd      	mov	sp, r7
 8019cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf2:	4770      	bx	lr

08019cf4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019cf8:	f7ea fb3e 	bl	8004378 <SystemClock_Config>
}
 8019cfc:	bf00      	nop
 8019cfe:	bd80      	pop	{r7, pc}

08019d00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019d00:	b480      	push	{r7}
 8019d02:	b085      	sub	sp, #20
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	4603      	mov	r3, r0
 8019d08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019d0e:	79fb      	ldrb	r3, [r7, #7]
 8019d10:	2b03      	cmp	r3, #3
 8019d12:	d817      	bhi.n	8019d44 <USBD_Get_USB_Status+0x44>
 8019d14:	a201      	add	r2, pc, #4	; (adr r2, 8019d1c <USBD_Get_USB_Status+0x1c>)
 8019d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d1a:	bf00      	nop
 8019d1c:	08019d2d 	.word	0x08019d2d
 8019d20:	08019d33 	.word	0x08019d33
 8019d24:	08019d39 	.word	0x08019d39
 8019d28:	08019d3f 	.word	0x08019d3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8019d30:	e00b      	b.n	8019d4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019d32:	2302      	movs	r3, #2
 8019d34:	73fb      	strb	r3, [r7, #15]
    break;
 8019d36:	e008      	b.n	8019d4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019d38:	2301      	movs	r3, #1
 8019d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8019d3c:	e005      	b.n	8019d4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019d3e:	2302      	movs	r3, #2
 8019d40:	73fb      	strb	r3, [r7, #15]
    break;
 8019d42:	e002      	b.n	8019d4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019d44:	2302      	movs	r3, #2
 8019d46:	73fb      	strb	r3, [r7, #15]
    break;
 8019d48:	bf00      	nop
  }
  return usb_status;
 8019d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	3714      	adds	r7, #20
 8019d50:	46bd      	mov	sp, r7
 8019d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d56:	4770      	bx	lr

08019d58 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8019d58:	b480      	push	{r7}
 8019d5a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019d5c:	4b05      	ldr	r3, [pc, #20]	; (8019d74 <UTIL_LPM_Init+0x1c>)
 8019d5e:	2200      	movs	r2, #0
 8019d60:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019d62:	4b05      	ldr	r3, [pc, #20]	; (8019d78 <UTIL_LPM_Init+0x20>)
 8019d64:	2200      	movs	r2, #0
 8019d66:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019d68:	bf00      	nop
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d70:	4770      	bx	lr
 8019d72:	bf00      	nop
 8019d74:	20027a74 	.word	0x20027a74
 8019d78:	20027a78 	.word	0x20027a78

08019d7c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b087      	sub	sp, #28
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
 8019d84:	460b      	mov	r3, r1
 8019d86:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d88:	f3ef 8310 	mrs	r3, PRIMASK
 8019d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8019d8e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d92:	b672      	cpsid	i
  
  switch(state)
 8019d94:	78fb      	ldrb	r3, [r7, #3]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d009      	beq.n	8019dae <UTIL_LPM_SetOffMode+0x32>
 8019d9a:	2b01      	cmp	r3, #1
 8019d9c:	d000      	beq.n	8019da0 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8019d9e:	e00e      	b.n	8019dbe <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8019da0:	4b0c      	ldr	r3, [pc, #48]	; (8019dd4 <UTIL_LPM_SetOffMode+0x58>)
 8019da2:	681a      	ldr	r2, [r3, #0]
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	4313      	orrs	r3, r2
 8019da8:	4a0a      	ldr	r2, [pc, #40]	; (8019dd4 <UTIL_LPM_SetOffMode+0x58>)
 8019daa:	6013      	str	r3, [r2, #0]
      break;
 8019dac:	e007      	b.n	8019dbe <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	43da      	mvns	r2, r3
 8019db2:	4b08      	ldr	r3, [pc, #32]	; (8019dd4 <UTIL_LPM_SetOffMode+0x58>)
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	4013      	ands	r3, r2
 8019db8:	4a06      	ldr	r2, [pc, #24]	; (8019dd4 <UTIL_LPM_SetOffMode+0x58>)
 8019dba:	6013      	str	r3, [r2, #0]
      break;
 8019dbc:	bf00      	nop
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019dc8:	bf00      	nop
 8019dca:	371c      	adds	r7, #28
 8019dcc:	46bd      	mov	sp, r7
 8019dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd2:	4770      	bx	lr
 8019dd4:	20027a78 	.word	0x20027a78

08019dd8 <arm_power_f32>:
 8019dd8:	b430      	push	{r4, r5}
 8019dda:	088d      	lsrs	r5, r1, #2
 8019ddc:	eddf 5a20 	vldr	s11, [pc, #128]	; 8019e60 <arm_power_f32+0x88>
 8019de0:	d020      	beq.n	8019e24 <arm_power_f32+0x4c>
 8019de2:	f100 0310 	add.w	r3, r0, #16
 8019de6:	462c      	mov	r4, r5
 8019de8:	ed53 6a04 	vldr	s13, [r3, #-16]
 8019dec:	ed13 7a03 	vldr	s14, [r3, #-12]
 8019df0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8019df4:	ed13 6a01 	vldr	s12, [r3, #-4]
 8019df8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8019dfc:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019e00:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019e04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019e08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019e0c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8019e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e14:	3c01      	subs	r4, #1
 8019e16:	f103 0310 	add.w	r3, r3, #16
 8019e1a:	ee76 5a27 	vadd.f32	s11, s12, s15
 8019e1e:	d1e3      	bne.n	8019de8 <arm_power_f32+0x10>
 8019e20:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019e24:	f011 0103 	ands.w	r1, r1, #3
 8019e28:	d015      	beq.n	8019e56 <arm_power_f32+0x7e>
 8019e2a:	edd0 7a00 	vldr	s15, [r0]
 8019e2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019e32:	3901      	subs	r1, #1
 8019e34:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019e38:	d00d      	beq.n	8019e56 <arm_power_f32+0x7e>
 8019e3a:	edd0 7a01 	vldr	s15, [r0, #4]
 8019e3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019e42:	2901      	cmp	r1, #1
 8019e44:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019e48:	d005      	beq.n	8019e56 <arm_power_f32+0x7e>
 8019e4a:	edd0 7a02 	vldr	s15, [r0, #8]
 8019e4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019e52:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019e56:	edc2 5a00 	vstr	s11, [r2]
 8019e5a:	bc30      	pop	{r4, r5}
 8019e5c:	4770      	bx	lr
 8019e5e:	bf00      	nop
 8019e60:	00000000 	.word	0x00000000

08019e64 <arm_mat_mult_f32>:
 8019e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e68:	8845      	ldrh	r5, [r0, #2]
 8019e6a:	880b      	ldrh	r3, [r1, #0]
 8019e6c:	8806      	ldrh	r6, [r0, #0]
 8019e6e:	6847      	ldr	r7, [r0, #4]
 8019e70:	6854      	ldr	r4, [r2, #4]
 8019e72:	6848      	ldr	r0, [r1, #4]
 8019e74:	b08b      	sub	sp, #44	; 0x2c
 8019e76:	42ab      	cmp	r3, r5
 8019e78:	9109      	str	r1, [sp, #36]	; 0x24
 8019e7a:	9604      	str	r6, [sp, #16]
 8019e7c:	8849      	ldrh	r1, [r1, #2]
 8019e7e:	f040 808a 	bne.w	8019f96 <arm_mat_mult_f32+0x132>
 8019e82:	8815      	ldrh	r5, [r2, #0]
 8019e84:	42b5      	cmp	r5, r6
 8019e86:	f040 8086 	bne.w	8019f96 <arm_mat_mult_f32+0x132>
 8019e8a:	8852      	ldrh	r2, [r2, #2]
 8019e8c:	428a      	cmp	r2, r1
 8019e8e:	f040 8082 	bne.w	8019f96 <arm_mat_mult_f32+0x132>
 8019e92:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8019e96:	1d01      	adds	r1, r0, #4
 8019e98:	0116      	lsls	r6, r2, #4
 8019e9a:	9108      	str	r1, [sp, #32]
 8019e9c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8019ea0:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8019ea4:	9101      	str	r1, [sp, #4]
 8019ea6:	fb06 f108 	mul.w	r1, r6, r8
 8019eaa:	0095      	lsls	r5, r2, #2
 8019eac:	9103      	str	r1, [sp, #12]
 8019eae:	00d2      	lsls	r2, r2, #3
 8019eb0:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8019eb4:	f003 0903 	and.w	r9, r3, #3
 8019eb8:	009b      	lsls	r3, r3, #2
 8019eba:	f107 0b10 	add.w	fp, r7, #16
 8019ebe:	eb04 0a05 	add.w	sl, r4, r5
 8019ec2:	9107      	str	r1, [sp, #28]
 8019ec4:	9202      	str	r2, [sp, #8]
 8019ec6:	9306      	str	r3, [sp, #24]
 8019ec8:	f1ab 0310 	sub.w	r3, fp, #16
 8019ecc:	9305      	str	r3, [sp, #20]
 8019ece:	9b07      	ldr	r3, [sp, #28]
 8019ed0:	f8dd e020 	ldr.w	lr, [sp, #32]
 8019ed4:	eb03 0c0a 	add.w	ip, r3, sl
 8019ed8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019fa0 <arm_mat_mult_f32+0x13c>
 8019edc:	f1b8 0f00 	cmp.w	r8, #0
 8019ee0:	d053      	beq.n	8019f8a <arm_mat_mult_f32+0x126>
 8019ee2:	9b02      	ldr	r3, [sp, #8]
 8019ee4:	4644      	mov	r4, r8
 8019ee6:	18c1      	adds	r1, r0, r3
 8019ee8:	4602      	mov	r2, r0
 8019eea:	465b      	mov	r3, fp
 8019eec:	ed92 6a00 	vldr	s12, [r2]
 8019ef0:	ed13 7a04 	vldr	s14, [r3, #-16]
 8019ef4:	ed53 4a03 	vldr	s9, [r3, #-12]
 8019ef8:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019efc:	ed91 5a00 	vldr	s10, [r1]
 8019f00:	ed53 5a01 	vldr	s11, [r3, #-4]
 8019f04:	1957      	adds	r7, r2, r5
 8019f06:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019f0a:	ed97 6a00 	vldr	s12, [r7]
 8019f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f12:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019f16:	194f      	adds	r7, r1, r5
 8019f18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8019f1c:	ee26 7a85 	vmul.f32	s14, s13, s10
 8019f20:	edd7 7a00 	vldr	s15, [r7]
 8019f24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019f28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019f2c:	3c01      	subs	r4, #1
 8019f2e:	4432      	add	r2, r6
 8019f30:	4431      	add	r1, r6
 8019f32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f36:	f103 0310 	add.w	r3, r3, #16
 8019f3a:	d1d7      	bne.n	8019eec <arm_mat_mult_f32+0x88>
 8019f3c:	9b03      	ldr	r3, [sp, #12]
 8019f3e:	9a01      	ldr	r2, [sp, #4]
 8019f40:	4418      	add	r0, r3
 8019f42:	f1b9 0f00 	cmp.w	r9, #0
 8019f46:	d00b      	beq.n	8019f60 <arm_mat_mult_f32+0xfc>
 8019f48:	464b      	mov	r3, r9
 8019f4a:	edd0 6a00 	vldr	s13, [r0]
 8019f4e:	ecb2 7a01 	vldmia	r2!, {s14}
 8019f52:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019f56:	3b01      	subs	r3, #1
 8019f58:	4428      	add	r0, r5
 8019f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f5e:	d1f4      	bne.n	8019f4a <arm_mat_mult_f32+0xe6>
 8019f60:	ecec 7a01 	vstmia	ip!, {s15}
 8019f64:	45d4      	cmp	ip, sl
 8019f66:	4670      	mov	r0, lr
 8019f68:	f10e 0e04 	add.w	lr, lr, #4
 8019f6c:	d1b4      	bne.n	8019ed8 <arm_mat_mult_f32+0x74>
 8019f6e:	9a01      	ldr	r2, [sp, #4]
 8019f70:	9b06      	ldr	r3, [sp, #24]
 8019f72:	4611      	mov	r1, r2
 8019f74:	4419      	add	r1, r3
 8019f76:	449b      	add	fp, r3
 8019f78:	9b04      	ldr	r3, [sp, #16]
 8019f7a:	9101      	str	r1, [sp, #4]
 8019f7c:	3b01      	subs	r3, #1
 8019f7e:	44aa      	add	sl, r5
 8019f80:	9304      	str	r3, [sp, #16]
 8019f82:	d004      	beq.n	8019f8e <arm_mat_mult_f32+0x12a>
 8019f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f86:	6858      	ldr	r0, [r3, #4]
 8019f88:	e79e      	b.n	8019ec8 <arm_mat_mult_f32+0x64>
 8019f8a:	9a05      	ldr	r2, [sp, #20]
 8019f8c:	e7d9      	b.n	8019f42 <arm_mat_mult_f32+0xde>
 8019f8e:	4618      	mov	r0, r3
 8019f90:	b00b      	add	sp, #44	; 0x2c
 8019f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f96:	f06f 0002 	mvn.w	r0, #2
 8019f9a:	b00b      	add	sp, #44	; 0x2c
 8019f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa0:	00000000 	.word	0x00000000

08019fa4 <arm_sin_f32>:
 8019fa4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a024 <arm_sin_f32+0x80>
 8019fa8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019fac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019fb8:	d504      	bpl.n	8019fc4 <arm_sin_f32+0x20>
 8019fba:	ee17 3a90 	vmov	r3, s15
 8019fbe:	3b01      	subs	r3, #1
 8019fc0:	ee07 3a90 	vmov	s15, r3
 8019fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fc8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a028 <arm_sin_f32+0x84>
 8019fcc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019fd0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019fd4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019fd8:	ee17 3a90 	vmov	r3, s15
 8019fdc:	b29b      	uxth	r3, r3
 8019fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019fe2:	d21a      	bcs.n	801a01a <arm_sin_f32+0x76>
 8019fe4:	ee07 3a90 	vmov	s15, r3
 8019fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019fec:	1c59      	adds	r1, r3, #1
 8019fee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019ff2:	4a0e      	ldr	r2, [pc, #56]	; (801a02c <arm_sin_f32+0x88>)
 8019ff4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019ffc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a000:	ed93 7a00 	vldr	s14, [r3]
 801a004:	edd2 6a00 	vldr	s13, [r2]
 801a008:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a00c:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a010:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a014:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a018:	4770      	bx	lr
 801a01a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a01e:	2101      	movs	r1, #1
 801a020:	2300      	movs	r3, #0
 801a022:	e7e6      	b.n	8019ff2 <arm_sin_f32+0x4e>
 801a024:	3e22f983 	.word	0x3e22f983
 801a028:	44000000 	.word	0x44000000
 801a02c:	0801bf4c 	.word	0x0801bf4c

0801a030 <arm_cos_f32>:
 801a030:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a0b8 <arm_cos_f32+0x88>
 801a034:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a038:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801a03c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a040:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a048:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a04c:	d504      	bpl.n	801a058 <arm_cos_f32+0x28>
 801a04e:	ee17 3a90 	vmov	r3, s15
 801a052:	3b01      	subs	r3, #1
 801a054:	ee07 3a90 	vmov	s15, r3
 801a058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a05c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a0bc <arm_cos_f32+0x8c>
 801a060:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a064:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a068:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a06c:	ee17 3a90 	vmov	r3, s15
 801a070:	b29b      	uxth	r3, r3
 801a072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a076:	d21a      	bcs.n	801a0ae <arm_cos_f32+0x7e>
 801a078:	ee07 3a90 	vmov	s15, r3
 801a07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a080:	1c59      	adds	r1, r3, #1
 801a082:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a086:	4a0e      	ldr	r2, [pc, #56]	; (801a0c0 <arm_cos_f32+0x90>)
 801a088:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a08c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a090:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a094:	ed93 7a00 	vldr	s14, [r3]
 801a098:	edd2 6a00 	vldr	s13, [r2]
 801a09c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a0a0:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a0a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a0a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a0ac:	4770      	bx	lr
 801a0ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a0b2:	2101      	movs	r1, #1
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	e7e6      	b.n	801a086 <arm_cos_f32+0x56>
 801a0b8:	3e22f983 	.word	0x3e22f983
 801a0bc:	44000000 	.word	0x44000000
 801a0c0:	0801bf4c 	.word	0x0801bf4c

0801a0c4 <arm_sub_f32>:
 801a0c4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a0c8:	b4f0      	push	{r4, r5, r6, r7}
 801a0ca:	d033      	beq.n	801a134 <arm_sub_f32+0x70>
 801a0cc:	f100 0610 	add.w	r6, r0, #16
 801a0d0:	f101 0510 	add.w	r5, r1, #16
 801a0d4:	f102 0410 	add.w	r4, r2, #16
 801a0d8:	4667      	mov	r7, ip
 801a0da:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a0de:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a0e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0e6:	3f01      	subs	r7, #1
 801a0e8:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a0ec:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a0f0:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a0f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0f8:	f106 0610 	add.w	r6, r6, #16
 801a0fc:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a100:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a104:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a108:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a10c:	f105 0510 	add.w	r5, r5, #16
 801a110:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a114:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a118:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a11c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a120:	f104 0410 	add.w	r4, r4, #16
 801a124:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a128:	d1d7      	bne.n	801a0da <arm_sub_f32+0x16>
 801a12a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a12e:	4420      	add	r0, r4
 801a130:	4421      	add	r1, r4
 801a132:	4422      	add	r2, r4
 801a134:	f013 0303 	ands.w	r3, r3, #3
 801a138:	d01b      	beq.n	801a172 <arm_sub_f32+0xae>
 801a13a:	edd0 7a00 	vldr	s15, [r0]
 801a13e:	ed91 7a00 	vldr	s14, [r1]
 801a142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a146:	3b01      	subs	r3, #1
 801a148:	edc2 7a00 	vstr	s15, [r2]
 801a14c:	d011      	beq.n	801a172 <arm_sub_f32+0xae>
 801a14e:	edd0 7a01 	vldr	s15, [r0, #4]
 801a152:	ed91 7a01 	vldr	s14, [r1, #4]
 801a156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a15a:	2b01      	cmp	r3, #1
 801a15c:	edc2 7a01 	vstr	s15, [r2, #4]
 801a160:	d007      	beq.n	801a172 <arm_sub_f32+0xae>
 801a162:	edd0 7a02 	vldr	s15, [r0, #8]
 801a166:	ed91 7a02 	vldr	s14, [r1, #8]
 801a16a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a16e:	edc2 7a02 	vstr	s15, [r2, #8]
 801a172:	bcf0      	pop	{r4, r5, r6, r7}
 801a174:	4770      	bx	lr
 801a176:	bf00      	nop

0801a178 <arm_scale_f32>:
 801a178:	b470      	push	{r4, r5, r6}
 801a17a:	0896      	lsrs	r6, r2, #2
 801a17c:	d025      	beq.n	801a1ca <arm_scale_f32+0x52>
 801a17e:	f100 0410 	add.w	r4, r0, #16
 801a182:	f101 0310 	add.w	r3, r1, #16
 801a186:	4635      	mov	r5, r6
 801a188:	ed54 7a04 	vldr	s15, [r4, #-16]
 801a18c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a190:	3d01      	subs	r5, #1
 801a192:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a196:	ed54 7a03 	vldr	s15, [r4, #-12]
 801a19a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a19e:	f104 0410 	add.w	r4, r4, #16
 801a1a2:	ed43 7a03 	vstr	s15, [r3, #-12]
 801a1a6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801a1aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a1ae:	f103 0310 	add.w	r3, r3, #16
 801a1b2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801a1b6:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801a1ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a1be:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801a1c2:	d1e1      	bne.n	801a188 <arm_scale_f32+0x10>
 801a1c4:	0136      	lsls	r6, r6, #4
 801a1c6:	4430      	add	r0, r6
 801a1c8:	4431      	add	r1, r6
 801a1ca:	f012 0203 	ands.w	r2, r2, #3
 801a1ce:	d015      	beq.n	801a1fc <arm_scale_f32+0x84>
 801a1d0:	edd0 7a00 	vldr	s15, [r0]
 801a1d4:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a1d8:	3a01      	subs	r2, #1
 801a1da:	edc1 7a00 	vstr	s15, [r1]
 801a1de:	d00d      	beq.n	801a1fc <arm_scale_f32+0x84>
 801a1e0:	edd0 7a01 	vldr	s15, [r0, #4]
 801a1e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a1e8:	2a01      	cmp	r2, #1
 801a1ea:	edc1 7a01 	vstr	s15, [r1, #4]
 801a1ee:	d005      	beq.n	801a1fc <arm_scale_f32+0x84>
 801a1f0:	edd0 7a02 	vldr	s15, [r0, #8]
 801a1f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a1f8:	ed81 0a02 	vstr	s0, [r1, #8]
 801a1fc:	bc70      	pop	{r4, r5, r6}
 801a1fe:	4770      	bx	lr

0801a200 <arm_dot_prod_f32>:
 801a200:	b4f0      	push	{r4, r5, r6, r7}
 801a202:	0897      	lsrs	r7, r2, #2
 801a204:	eddf 5a29 	vldr	s11, [pc, #164]	; 801a2ac <arm_dot_prod_f32+0xac>
 801a208:	d02d      	beq.n	801a266 <arm_dot_prod_f32+0x66>
 801a20a:	f100 0510 	add.w	r5, r0, #16
 801a20e:	f101 0410 	add.w	r4, r1, #16
 801a212:	463e      	mov	r6, r7
 801a214:	ed55 6a04 	vldr	s13, [r5, #-16]
 801a218:	ed54 3a04 	vldr	s7, [r4, #-16]
 801a21c:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a220:	ed14 4a03 	vldr	s8, [r4, #-12]
 801a224:	ed55 7a02 	vldr	s15, [r5, #-8]
 801a228:	ed54 4a02 	vldr	s9, [r4, #-8]
 801a22c:	ed15 6a01 	vldr	s12, [r5, #-4]
 801a230:	ed14 5a01 	vldr	s10, [r4, #-4]
 801a234:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801a238:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a23c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a240:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801a244:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a248:	ee66 6a05 	vmul.f32	s13, s12, s10
 801a24c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a250:	3e01      	subs	r6, #1
 801a252:	f105 0510 	add.w	r5, r5, #16
 801a256:	ee76 5aa7 	vadd.f32	s11, s13, s15
 801a25a:	f104 0410 	add.w	r4, r4, #16
 801a25e:	d1d9      	bne.n	801a214 <arm_dot_prod_f32+0x14>
 801a260:	013f      	lsls	r7, r7, #4
 801a262:	4438      	add	r0, r7
 801a264:	4439      	add	r1, r7
 801a266:	f012 0203 	ands.w	r2, r2, #3
 801a26a:	d01b      	beq.n	801a2a4 <arm_dot_prod_f32+0xa4>
 801a26c:	edd1 7a00 	vldr	s15, [r1]
 801a270:	ed90 7a00 	vldr	s14, [r0]
 801a274:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a278:	3a01      	subs	r2, #1
 801a27a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a27e:	d011      	beq.n	801a2a4 <arm_dot_prod_f32+0xa4>
 801a280:	edd1 7a01 	vldr	s15, [r1, #4]
 801a284:	ed90 7a01 	vldr	s14, [r0, #4]
 801a288:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a28c:	2a01      	cmp	r2, #1
 801a28e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a292:	d007      	beq.n	801a2a4 <arm_dot_prod_f32+0xa4>
 801a294:	edd0 7a02 	vldr	s15, [r0, #8]
 801a298:	ed91 7a02 	vldr	s14, [r1, #8]
 801a29c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a2a0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a2a4:	edc3 5a00 	vstr	s11, [r3]
 801a2a8:	bcf0      	pop	{r4, r5, r6, r7}
 801a2aa:	4770      	bx	lr
 801a2ac:	00000000 	.word	0x00000000

0801a2b0 <arm_add_f32>:
 801a2b0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a2b4:	b4f0      	push	{r4, r5, r6, r7}
 801a2b6:	d033      	beq.n	801a320 <arm_add_f32+0x70>
 801a2b8:	f100 0610 	add.w	r6, r0, #16
 801a2bc:	f101 0510 	add.w	r5, r1, #16
 801a2c0:	f102 0410 	add.w	r4, r2, #16
 801a2c4:	4667      	mov	r7, ip
 801a2c6:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a2ca:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a2d2:	3f01      	subs	r7, #1
 801a2d4:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a2d8:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a2dc:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a2e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a2e4:	f106 0610 	add.w	r6, r6, #16
 801a2e8:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a2ec:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a2f0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a2f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a2f8:	f105 0510 	add.w	r5, r5, #16
 801a2fc:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a300:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a304:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a308:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a30c:	f104 0410 	add.w	r4, r4, #16
 801a310:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a314:	d1d7      	bne.n	801a2c6 <arm_add_f32+0x16>
 801a316:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a31a:	4420      	add	r0, r4
 801a31c:	4421      	add	r1, r4
 801a31e:	4422      	add	r2, r4
 801a320:	f013 0303 	ands.w	r3, r3, #3
 801a324:	d01b      	beq.n	801a35e <arm_add_f32+0xae>
 801a326:	edd1 7a00 	vldr	s15, [r1]
 801a32a:	ed90 7a00 	vldr	s14, [r0]
 801a32e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a332:	3b01      	subs	r3, #1
 801a334:	edc2 7a00 	vstr	s15, [r2]
 801a338:	d011      	beq.n	801a35e <arm_add_f32+0xae>
 801a33a:	edd0 7a01 	vldr	s15, [r0, #4]
 801a33e:	ed91 7a01 	vldr	s14, [r1, #4]
 801a342:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a346:	2b01      	cmp	r3, #1
 801a348:	edc2 7a01 	vstr	s15, [r2, #4]
 801a34c:	d007      	beq.n	801a35e <arm_add_f32+0xae>
 801a34e:	edd0 7a02 	vldr	s15, [r0, #8]
 801a352:	ed91 7a02 	vldr	s14, [r1, #8]
 801a356:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a35a:	edc2 7a02 	vstr	s15, [r2, #8]
 801a35e:	bcf0      	pop	{r4, r5, r6, r7}
 801a360:	4770      	bx	lr
 801a362:	bf00      	nop

0801a364 <__errno>:
 801a364:	4b01      	ldr	r3, [pc, #4]	; (801a36c <__errno+0x8>)
 801a366:	6818      	ldr	r0, [r3, #0]
 801a368:	4770      	bx	lr
 801a36a:	bf00      	nop
 801a36c:	2000026c 	.word	0x2000026c

0801a370 <__libc_init_array>:
 801a370:	b570      	push	{r4, r5, r6, lr}
 801a372:	4e0d      	ldr	r6, [pc, #52]	; (801a3a8 <__libc_init_array+0x38>)
 801a374:	4c0d      	ldr	r4, [pc, #52]	; (801a3ac <__libc_init_array+0x3c>)
 801a376:	1ba4      	subs	r4, r4, r6
 801a378:	10a4      	asrs	r4, r4, #2
 801a37a:	2500      	movs	r5, #0
 801a37c:	42a5      	cmp	r5, r4
 801a37e:	d109      	bne.n	801a394 <__libc_init_array+0x24>
 801a380:	4e0b      	ldr	r6, [pc, #44]	; (801a3b0 <__libc_init_array+0x40>)
 801a382:	4c0c      	ldr	r4, [pc, #48]	; (801a3b4 <__libc_init_array+0x44>)
 801a384:	f001 f8d2 	bl	801b52c <_init>
 801a388:	1ba4      	subs	r4, r4, r6
 801a38a:	10a4      	asrs	r4, r4, #2
 801a38c:	2500      	movs	r5, #0
 801a38e:	42a5      	cmp	r5, r4
 801a390:	d105      	bne.n	801a39e <__libc_init_array+0x2e>
 801a392:	bd70      	pop	{r4, r5, r6, pc}
 801a394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a398:	4798      	blx	r3
 801a39a:	3501      	adds	r5, #1
 801a39c:	e7ee      	b.n	801a37c <__libc_init_array+0xc>
 801a39e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a3a2:	4798      	blx	r3
 801a3a4:	3501      	adds	r5, #1
 801a3a6:	e7f2      	b.n	801a38e <__libc_init_array+0x1e>
 801a3a8:	0801c808 	.word	0x0801c808
 801a3ac:	0801c808 	.word	0x0801c808
 801a3b0:	0801c808 	.word	0x0801c808
 801a3b4:	0801c80c 	.word	0x0801c80c

0801a3b8 <memcpy>:
 801a3b8:	b510      	push	{r4, lr}
 801a3ba:	1e43      	subs	r3, r0, #1
 801a3bc:	440a      	add	r2, r1
 801a3be:	4291      	cmp	r1, r2
 801a3c0:	d100      	bne.n	801a3c4 <memcpy+0xc>
 801a3c2:	bd10      	pop	{r4, pc}
 801a3c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a3c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a3cc:	e7f7      	b.n	801a3be <memcpy+0x6>

0801a3ce <memset>:
 801a3ce:	4402      	add	r2, r0
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	4293      	cmp	r3, r2
 801a3d4:	d100      	bne.n	801a3d8 <memset+0xa>
 801a3d6:	4770      	bx	lr
 801a3d8:	f803 1b01 	strb.w	r1, [r3], #1
 801a3dc:	e7f9      	b.n	801a3d2 <memset+0x4>
	...

0801a3e0 <pow>:
 801a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3e4:	ed2d 8b04 	vpush	{d8-d9}
 801a3e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801a6bc <pow+0x2dc>
 801a3ec:	b08d      	sub	sp, #52	; 0x34
 801a3ee:	ec57 6b10 	vmov	r6, r7, d0
 801a3f2:	ec55 4b11 	vmov	r4, r5, d1
 801a3f6:	f000 f9b3 	bl	801a760 <__ieee754_pow>
 801a3fa:	f999 3000 	ldrsb.w	r3, [r9]
 801a3fe:	9300      	str	r3, [sp, #0]
 801a400:	3301      	adds	r3, #1
 801a402:	eeb0 8a40 	vmov.f32	s16, s0
 801a406:	eef0 8a60 	vmov.f32	s17, s1
 801a40a:	46c8      	mov	r8, r9
 801a40c:	d05f      	beq.n	801a4ce <pow+0xee>
 801a40e:	4622      	mov	r2, r4
 801a410:	462b      	mov	r3, r5
 801a412:	4620      	mov	r0, r4
 801a414:	4629      	mov	r1, r5
 801a416:	f7e6 fb13 	bl	8000a40 <__aeabi_dcmpun>
 801a41a:	4683      	mov	fp, r0
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d156      	bne.n	801a4ce <pow+0xee>
 801a420:	4632      	mov	r2, r6
 801a422:	463b      	mov	r3, r7
 801a424:	4630      	mov	r0, r6
 801a426:	4639      	mov	r1, r7
 801a428:	f7e6 fb0a 	bl	8000a40 <__aeabi_dcmpun>
 801a42c:	9001      	str	r0, [sp, #4]
 801a42e:	b1e8      	cbz	r0, 801a46c <pow+0x8c>
 801a430:	2200      	movs	r2, #0
 801a432:	2300      	movs	r3, #0
 801a434:	4620      	mov	r0, r4
 801a436:	4629      	mov	r1, r5
 801a438:	f7e6 fad0 	bl	80009dc <__aeabi_dcmpeq>
 801a43c:	2800      	cmp	r0, #0
 801a43e:	d046      	beq.n	801a4ce <pow+0xee>
 801a440:	2301      	movs	r3, #1
 801a442:	9302      	str	r3, [sp, #8]
 801a444:	4b96      	ldr	r3, [pc, #600]	; (801a6a0 <pow+0x2c0>)
 801a446:	9303      	str	r3, [sp, #12]
 801a448:	4b96      	ldr	r3, [pc, #600]	; (801a6a4 <pow+0x2c4>)
 801a44a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a44e:	2200      	movs	r2, #0
 801a450:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a454:	9b00      	ldr	r3, [sp, #0]
 801a456:	2b02      	cmp	r3, #2
 801a458:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a45c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a460:	d033      	beq.n	801a4ca <pow+0xea>
 801a462:	a802      	add	r0, sp, #8
 801a464:	f000 ff4e 	bl	801b304 <matherr>
 801a468:	bb48      	cbnz	r0, 801a4be <pow+0xde>
 801a46a:	e05d      	b.n	801a528 <pow+0x148>
 801a46c:	f04f 0a00 	mov.w	sl, #0
 801a470:	f04f 0b00 	mov.w	fp, #0
 801a474:	4652      	mov	r2, sl
 801a476:	465b      	mov	r3, fp
 801a478:	4630      	mov	r0, r6
 801a47a:	4639      	mov	r1, r7
 801a47c:	f7e6 faae 	bl	80009dc <__aeabi_dcmpeq>
 801a480:	ec4b ab19 	vmov	d9, sl, fp
 801a484:	2800      	cmp	r0, #0
 801a486:	d054      	beq.n	801a532 <pow+0x152>
 801a488:	4652      	mov	r2, sl
 801a48a:	465b      	mov	r3, fp
 801a48c:	4620      	mov	r0, r4
 801a48e:	4629      	mov	r1, r5
 801a490:	f7e6 faa4 	bl	80009dc <__aeabi_dcmpeq>
 801a494:	4680      	mov	r8, r0
 801a496:	b318      	cbz	r0, 801a4e0 <pow+0x100>
 801a498:	2301      	movs	r3, #1
 801a49a:	9302      	str	r3, [sp, #8]
 801a49c:	4b80      	ldr	r3, [pc, #512]	; (801a6a0 <pow+0x2c0>)
 801a49e:	9303      	str	r3, [sp, #12]
 801a4a0:	9b01      	ldr	r3, [sp, #4]
 801a4a2:	930a      	str	r3, [sp, #40]	; 0x28
 801a4a4:	9b00      	ldr	r3, [sp, #0]
 801a4a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a4aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a4ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d0d5      	beq.n	801a462 <pow+0x82>
 801a4b6:	4b7b      	ldr	r3, [pc, #492]	; (801a6a4 <pow+0x2c4>)
 801a4b8:	2200      	movs	r2, #0
 801a4ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4c0:	b11b      	cbz	r3, 801a4ca <pow+0xea>
 801a4c2:	f7ff ff4f 	bl	801a364 <__errno>
 801a4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4c8:	6003      	str	r3, [r0, #0]
 801a4ca:	ed9d 8b08 	vldr	d8, [sp, #32]
 801a4ce:	eeb0 0a48 	vmov.f32	s0, s16
 801a4d2:	eef0 0a68 	vmov.f32	s1, s17
 801a4d6:	b00d      	add	sp, #52	; 0x34
 801a4d8:	ecbd 8b04 	vpop	{d8-d9}
 801a4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4e0:	ec45 4b10 	vmov	d0, r4, r5
 801a4e4:	f000 ff06 	bl	801b2f4 <finite>
 801a4e8:	2800      	cmp	r0, #0
 801a4ea:	d0f0      	beq.n	801a4ce <pow+0xee>
 801a4ec:	4652      	mov	r2, sl
 801a4ee:	465b      	mov	r3, fp
 801a4f0:	4620      	mov	r0, r4
 801a4f2:	4629      	mov	r1, r5
 801a4f4:	f7e6 fa7c 	bl	80009f0 <__aeabi_dcmplt>
 801a4f8:	2800      	cmp	r0, #0
 801a4fa:	d0e8      	beq.n	801a4ce <pow+0xee>
 801a4fc:	2301      	movs	r3, #1
 801a4fe:	9302      	str	r3, [sp, #8]
 801a500:	4b67      	ldr	r3, [pc, #412]	; (801a6a0 <pow+0x2c0>)
 801a502:	9303      	str	r3, [sp, #12]
 801a504:	f999 3000 	ldrsb.w	r3, [r9]
 801a508:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801a50c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a510:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a514:	b913      	cbnz	r3, 801a51c <pow+0x13c>
 801a516:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a51a:	e7a2      	b.n	801a462 <pow+0x82>
 801a51c:	4962      	ldr	r1, [pc, #392]	; (801a6a8 <pow+0x2c8>)
 801a51e:	2000      	movs	r0, #0
 801a520:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a524:	2b02      	cmp	r3, #2
 801a526:	d19c      	bne.n	801a462 <pow+0x82>
 801a528:	f7ff ff1c 	bl	801a364 <__errno>
 801a52c:	2321      	movs	r3, #33	; 0x21
 801a52e:	6003      	str	r3, [r0, #0]
 801a530:	e7c5      	b.n	801a4be <pow+0xde>
 801a532:	eeb0 0a48 	vmov.f32	s0, s16
 801a536:	eef0 0a68 	vmov.f32	s1, s17
 801a53a:	f000 fedb 	bl	801b2f4 <finite>
 801a53e:	9000      	str	r0, [sp, #0]
 801a540:	2800      	cmp	r0, #0
 801a542:	f040 8081 	bne.w	801a648 <pow+0x268>
 801a546:	ec47 6b10 	vmov	d0, r6, r7
 801a54a:	f000 fed3 	bl	801b2f4 <finite>
 801a54e:	2800      	cmp	r0, #0
 801a550:	d07a      	beq.n	801a648 <pow+0x268>
 801a552:	ec45 4b10 	vmov	d0, r4, r5
 801a556:	f000 fecd 	bl	801b2f4 <finite>
 801a55a:	2800      	cmp	r0, #0
 801a55c:	d074      	beq.n	801a648 <pow+0x268>
 801a55e:	ec53 2b18 	vmov	r2, r3, d8
 801a562:	ee18 0a10 	vmov	r0, s16
 801a566:	4619      	mov	r1, r3
 801a568:	f7e6 fa6a 	bl	8000a40 <__aeabi_dcmpun>
 801a56c:	f999 9000 	ldrsb.w	r9, [r9]
 801a570:	4b4b      	ldr	r3, [pc, #300]	; (801a6a0 <pow+0x2c0>)
 801a572:	b1b0      	cbz	r0, 801a5a2 <pow+0x1c2>
 801a574:	2201      	movs	r2, #1
 801a576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a57a:	9b00      	ldr	r3, [sp, #0]
 801a57c:	930a      	str	r3, [sp, #40]	; 0x28
 801a57e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a582:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a586:	f1b9 0f00 	cmp.w	r9, #0
 801a58a:	d0c4      	beq.n	801a516 <pow+0x136>
 801a58c:	4652      	mov	r2, sl
 801a58e:	465b      	mov	r3, fp
 801a590:	4650      	mov	r0, sl
 801a592:	4659      	mov	r1, fp
 801a594:	f7e6 f8e4 	bl	8000760 <__aeabi_ddiv>
 801a598:	f1b9 0f02 	cmp.w	r9, #2
 801a59c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a5a0:	e7c1      	b.n	801a526 <pow+0x146>
 801a5a2:	2203      	movs	r2, #3
 801a5a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a5a8:	900a      	str	r0, [sp, #40]	; 0x28
 801a5aa:	4629      	mov	r1, r5
 801a5ac:	4620      	mov	r0, r4
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	4b3e      	ldr	r3, [pc, #248]	; (801a6ac <pow+0x2cc>)
 801a5b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a5b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a5ba:	f7e5 ffa7 	bl	800050c <__aeabi_dmul>
 801a5be:	4604      	mov	r4, r0
 801a5c0:	460d      	mov	r5, r1
 801a5c2:	f1b9 0f00 	cmp.w	r9, #0
 801a5c6:	d124      	bne.n	801a612 <pow+0x232>
 801a5c8:	4b39      	ldr	r3, [pc, #228]	; (801a6b0 <pow+0x2d0>)
 801a5ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a5ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a5d2:	4630      	mov	r0, r6
 801a5d4:	4652      	mov	r2, sl
 801a5d6:	465b      	mov	r3, fp
 801a5d8:	4639      	mov	r1, r7
 801a5da:	f7e6 fa09 	bl	80009f0 <__aeabi_dcmplt>
 801a5de:	2800      	cmp	r0, #0
 801a5e0:	d056      	beq.n	801a690 <pow+0x2b0>
 801a5e2:	ec45 4b10 	vmov	d0, r4, r5
 801a5e6:	f000 fe97 	bl	801b318 <rint>
 801a5ea:	4622      	mov	r2, r4
 801a5ec:	462b      	mov	r3, r5
 801a5ee:	ec51 0b10 	vmov	r0, r1, d0
 801a5f2:	f7e6 f9f3 	bl	80009dc <__aeabi_dcmpeq>
 801a5f6:	b920      	cbnz	r0, 801a602 <pow+0x222>
 801a5f8:	4b2e      	ldr	r3, [pc, #184]	; (801a6b4 <pow+0x2d4>)
 801a5fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a5fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a602:	f998 3000 	ldrsb.w	r3, [r8]
 801a606:	2b02      	cmp	r3, #2
 801a608:	d142      	bne.n	801a690 <pow+0x2b0>
 801a60a:	f7ff feab 	bl	801a364 <__errno>
 801a60e:	2322      	movs	r3, #34	; 0x22
 801a610:	e78d      	b.n	801a52e <pow+0x14e>
 801a612:	4b29      	ldr	r3, [pc, #164]	; (801a6b8 <pow+0x2d8>)
 801a614:	2200      	movs	r2, #0
 801a616:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a61a:	4630      	mov	r0, r6
 801a61c:	4652      	mov	r2, sl
 801a61e:	465b      	mov	r3, fp
 801a620:	4639      	mov	r1, r7
 801a622:	f7e6 f9e5 	bl	80009f0 <__aeabi_dcmplt>
 801a626:	2800      	cmp	r0, #0
 801a628:	d0eb      	beq.n	801a602 <pow+0x222>
 801a62a:	ec45 4b10 	vmov	d0, r4, r5
 801a62e:	f000 fe73 	bl	801b318 <rint>
 801a632:	4622      	mov	r2, r4
 801a634:	462b      	mov	r3, r5
 801a636:	ec51 0b10 	vmov	r0, r1, d0
 801a63a:	f7e6 f9cf 	bl	80009dc <__aeabi_dcmpeq>
 801a63e:	2800      	cmp	r0, #0
 801a640:	d1df      	bne.n	801a602 <pow+0x222>
 801a642:	2200      	movs	r2, #0
 801a644:	4b18      	ldr	r3, [pc, #96]	; (801a6a8 <pow+0x2c8>)
 801a646:	e7da      	b.n	801a5fe <pow+0x21e>
 801a648:	2200      	movs	r2, #0
 801a64a:	2300      	movs	r3, #0
 801a64c:	ec51 0b18 	vmov	r0, r1, d8
 801a650:	f7e6 f9c4 	bl	80009dc <__aeabi_dcmpeq>
 801a654:	2800      	cmp	r0, #0
 801a656:	f43f af3a 	beq.w	801a4ce <pow+0xee>
 801a65a:	ec47 6b10 	vmov	d0, r6, r7
 801a65e:	f000 fe49 	bl	801b2f4 <finite>
 801a662:	2800      	cmp	r0, #0
 801a664:	f43f af33 	beq.w	801a4ce <pow+0xee>
 801a668:	ec45 4b10 	vmov	d0, r4, r5
 801a66c:	f000 fe42 	bl	801b2f4 <finite>
 801a670:	2800      	cmp	r0, #0
 801a672:	f43f af2c 	beq.w	801a4ce <pow+0xee>
 801a676:	2304      	movs	r3, #4
 801a678:	9302      	str	r3, [sp, #8]
 801a67a:	4b09      	ldr	r3, [pc, #36]	; (801a6a0 <pow+0x2c0>)
 801a67c:	9303      	str	r3, [sp, #12]
 801a67e:	2300      	movs	r3, #0
 801a680:	930a      	str	r3, [sp, #40]	; 0x28
 801a682:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a686:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a68a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801a68e:	e7b8      	b.n	801a602 <pow+0x222>
 801a690:	a802      	add	r0, sp, #8
 801a692:	f000 fe37 	bl	801b304 <matherr>
 801a696:	2800      	cmp	r0, #0
 801a698:	f47f af11 	bne.w	801a4be <pow+0xde>
 801a69c:	e7b5      	b.n	801a60a <pow+0x22a>
 801a69e:	bf00      	nop
 801a6a0:	0801c7b0 	.word	0x0801c7b0
 801a6a4:	3ff00000 	.word	0x3ff00000
 801a6a8:	fff00000 	.word	0xfff00000
 801a6ac:	3fe00000 	.word	0x3fe00000
 801a6b0:	47efffff 	.word	0x47efffff
 801a6b4:	c7efffff 	.word	0xc7efffff
 801a6b8:	7ff00000 	.word	0x7ff00000
 801a6bc:	200002d0 	.word	0x200002d0

0801a6c0 <sqrtf>:
 801a6c0:	b510      	push	{r4, lr}
 801a6c2:	ed2d 8b02 	vpush	{d8}
 801a6c6:	b08a      	sub	sp, #40	; 0x28
 801a6c8:	eeb0 8a40 	vmov.f32	s16, s0
 801a6cc:	f000 fe06 	bl	801b2dc <__ieee754_sqrtf>
 801a6d0:	4b21      	ldr	r3, [pc, #132]	; (801a758 <sqrtf+0x98>)
 801a6d2:	f993 4000 	ldrsb.w	r4, [r3]
 801a6d6:	1c63      	adds	r3, r4, #1
 801a6d8:	d02c      	beq.n	801a734 <sqrtf+0x74>
 801a6da:	eeb4 8a48 	vcmp.f32	s16, s16
 801a6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6e2:	d627      	bvs.n	801a734 <sqrtf+0x74>
 801a6e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ec:	d522      	bpl.n	801a734 <sqrtf+0x74>
 801a6ee:	2301      	movs	r3, #1
 801a6f0:	9300      	str	r3, [sp, #0]
 801a6f2:	4b1a      	ldr	r3, [pc, #104]	; (801a75c <sqrtf+0x9c>)
 801a6f4:	9301      	str	r3, [sp, #4]
 801a6f6:	ee18 0a10 	vmov	r0, s16
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	9308      	str	r3, [sp, #32]
 801a6fe:	f7e5 fead 	bl	800045c <__aeabi_f2d>
 801a702:	2200      	movs	r2, #0
 801a704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a70c:	2300      	movs	r3, #0
 801a70e:	b9ac      	cbnz	r4, 801a73c <sqrtf+0x7c>
 801a710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a714:	4668      	mov	r0, sp
 801a716:	f000 fdf5 	bl	801b304 <matherr>
 801a71a:	b1b8      	cbz	r0, 801a74c <sqrtf+0x8c>
 801a71c:	9b08      	ldr	r3, [sp, #32]
 801a71e:	b11b      	cbz	r3, 801a728 <sqrtf+0x68>
 801a720:	f7ff fe20 	bl	801a364 <__errno>
 801a724:	9b08      	ldr	r3, [sp, #32]
 801a726:	6003      	str	r3, [r0, #0]
 801a728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a72c:	f7e6 f99e 	bl	8000a6c <__aeabi_d2f>
 801a730:	ee00 0a10 	vmov	s0, r0
 801a734:	b00a      	add	sp, #40	; 0x28
 801a736:	ecbd 8b02 	vpop	{d8}
 801a73a:	bd10      	pop	{r4, pc}
 801a73c:	4610      	mov	r0, r2
 801a73e:	4619      	mov	r1, r3
 801a740:	f7e6 f80e 	bl	8000760 <__aeabi_ddiv>
 801a744:	2c02      	cmp	r4, #2
 801a746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a74a:	d1e3      	bne.n	801a714 <sqrtf+0x54>
 801a74c:	f7ff fe0a 	bl	801a364 <__errno>
 801a750:	2321      	movs	r3, #33	; 0x21
 801a752:	6003      	str	r3, [r0, #0]
 801a754:	e7e2      	b.n	801a71c <sqrtf+0x5c>
 801a756:	bf00      	nop
 801a758:	200002d0 	.word	0x200002d0
 801a75c:	0801c7b4 	.word	0x0801c7b4

0801a760 <__ieee754_pow>:
 801a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a764:	b091      	sub	sp, #68	; 0x44
 801a766:	ed8d 1b00 	vstr	d1, [sp]
 801a76a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a76e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a772:	ea58 0302 	orrs.w	r3, r8, r2
 801a776:	ec57 6b10 	vmov	r6, r7, d0
 801a77a:	f000 84be 	beq.w	801b0fa <__ieee754_pow+0x99a>
 801a77e:	4b7a      	ldr	r3, [pc, #488]	; (801a968 <__ieee754_pow+0x208>)
 801a780:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a784:	429c      	cmp	r4, r3
 801a786:	463d      	mov	r5, r7
 801a788:	ee10 aa10 	vmov	sl, s0
 801a78c:	dc09      	bgt.n	801a7a2 <__ieee754_pow+0x42>
 801a78e:	d103      	bne.n	801a798 <__ieee754_pow+0x38>
 801a790:	b93e      	cbnz	r6, 801a7a2 <__ieee754_pow+0x42>
 801a792:	45a0      	cmp	r8, r4
 801a794:	dc0d      	bgt.n	801a7b2 <__ieee754_pow+0x52>
 801a796:	e001      	b.n	801a79c <__ieee754_pow+0x3c>
 801a798:	4598      	cmp	r8, r3
 801a79a:	dc02      	bgt.n	801a7a2 <__ieee754_pow+0x42>
 801a79c:	4598      	cmp	r8, r3
 801a79e:	d10e      	bne.n	801a7be <__ieee754_pow+0x5e>
 801a7a0:	b16a      	cbz	r2, 801a7be <__ieee754_pow+0x5e>
 801a7a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a7a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a7aa:	ea54 030a 	orrs.w	r3, r4, sl
 801a7ae:	f000 84a4 	beq.w	801b0fa <__ieee754_pow+0x99a>
 801a7b2:	486e      	ldr	r0, [pc, #440]	; (801a96c <__ieee754_pow+0x20c>)
 801a7b4:	b011      	add	sp, #68	; 0x44
 801a7b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7ba:	f000 bda5 	b.w	801b308 <nan>
 801a7be:	2d00      	cmp	r5, #0
 801a7c0:	da53      	bge.n	801a86a <__ieee754_pow+0x10a>
 801a7c2:	4b6b      	ldr	r3, [pc, #428]	; (801a970 <__ieee754_pow+0x210>)
 801a7c4:	4598      	cmp	r8, r3
 801a7c6:	dc4d      	bgt.n	801a864 <__ieee754_pow+0x104>
 801a7c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a7cc:	4598      	cmp	r8, r3
 801a7ce:	dd4c      	ble.n	801a86a <__ieee754_pow+0x10a>
 801a7d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a7d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a7d8:	2b14      	cmp	r3, #20
 801a7da:	dd26      	ble.n	801a82a <__ieee754_pow+0xca>
 801a7dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a7e0:	fa22 f103 	lsr.w	r1, r2, r3
 801a7e4:	fa01 f303 	lsl.w	r3, r1, r3
 801a7e8:	4293      	cmp	r3, r2
 801a7ea:	d13e      	bne.n	801a86a <__ieee754_pow+0x10a>
 801a7ec:	f001 0101 	and.w	r1, r1, #1
 801a7f0:	f1c1 0b02 	rsb	fp, r1, #2
 801a7f4:	2a00      	cmp	r2, #0
 801a7f6:	d15b      	bne.n	801a8b0 <__ieee754_pow+0x150>
 801a7f8:	4b5b      	ldr	r3, [pc, #364]	; (801a968 <__ieee754_pow+0x208>)
 801a7fa:	4598      	cmp	r8, r3
 801a7fc:	d124      	bne.n	801a848 <__ieee754_pow+0xe8>
 801a7fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a802:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a806:	ea53 030a 	orrs.w	r3, r3, sl
 801a80a:	f000 8476 	beq.w	801b0fa <__ieee754_pow+0x99a>
 801a80e:	4b59      	ldr	r3, [pc, #356]	; (801a974 <__ieee754_pow+0x214>)
 801a810:	429c      	cmp	r4, r3
 801a812:	dd2d      	ble.n	801a870 <__ieee754_pow+0x110>
 801a814:	f1b9 0f00 	cmp.w	r9, #0
 801a818:	f280 8473 	bge.w	801b102 <__ieee754_pow+0x9a2>
 801a81c:	2000      	movs	r0, #0
 801a81e:	2100      	movs	r1, #0
 801a820:	ec41 0b10 	vmov	d0, r0, r1
 801a824:	b011      	add	sp, #68	; 0x44
 801a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a82a:	2a00      	cmp	r2, #0
 801a82c:	d13e      	bne.n	801a8ac <__ieee754_pow+0x14c>
 801a82e:	f1c3 0314 	rsb	r3, r3, #20
 801a832:	fa48 f103 	asr.w	r1, r8, r3
 801a836:	fa01 f303 	lsl.w	r3, r1, r3
 801a83a:	4543      	cmp	r3, r8
 801a83c:	f040 8469 	bne.w	801b112 <__ieee754_pow+0x9b2>
 801a840:	f001 0101 	and.w	r1, r1, #1
 801a844:	f1c1 0b02 	rsb	fp, r1, #2
 801a848:	4b4b      	ldr	r3, [pc, #300]	; (801a978 <__ieee754_pow+0x218>)
 801a84a:	4598      	cmp	r8, r3
 801a84c:	d118      	bne.n	801a880 <__ieee754_pow+0x120>
 801a84e:	f1b9 0f00 	cmp.w	r9, #0
 801a852:	f280 845a 	bge.w	801b10a <__ieee754_pow+0x9aa>
 801a856:	4948      	ldr	r1, [pc, #288]	; (801a978 <__ieee754_pow+0x218>)
 801a858:	4632      	mov	r2, r6
 801a85a:	463b      	mov	r3, r7
 801a85c:	2000      	movs	r0, #0
 801a85e:	f7e5 ff7f 	bl	8000760 <__aeabi_ddiv>
 801a862:	e7dd      	b.n	801a820 <__ieee754_pow+0xc0>
 801a864:	f04f 0b02 	mov.w	fp, #2
 801a868:	e7c4      	b.n	801a7f4 <__ieee754_pow+0x94>
 801a86a:	f04f 0b00 	mov.w	fp, #0
 801a86e:	e7c1      	b.n	801a7f4 <__ieee754_pow+0x94>
 801a870:	f1b9 0f00 	cmp.w	r9, #0
 801a874:	dad2      	bge.n	801a81c <__ieee754_pow+0xbc>
 801a876:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a87a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a87e:	e7cf      	b.n	801a820 <__ieee754_pow+0xc0>
 801a880:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a884:	d106      	bne.n	801a894 <__ieee754_pow+0x134>
 801a886:	4632      	mov	r2, r6
 801a888:	463b      	mov	r3, r7
 801a88a:	4610      	mov	r0, r2
 801a88c:	4619      	mov	r1, r3
 801a88e:	f7e5 fe3d 	bl	800050c <__aeabi_dmul>
 801a892:	e7c5      	b.n	801a820 <__ieee754_pow+0xc0>
 801a894:	4b39      	ldr	r3, [pc, #228]	; (801a97c <__ieee754_pow+0x21c>)
 801a896:	4599      	cmp	r9, r3
 801a898:	d10a      	bne.n	801a8b0 <__ieee754_pow+0x150>
 801a89a:	2d00      	cmp	r5, #0
 801a89c:	db08      	blt.n	801a8b0 <__ieee754_pow+0x150>
 801a89e:	ec47 6b10 	vmov	d0, r6, r7
 801a8a2:	b011      	add	sp, #68	; 0x44
 801a8a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8a8:	f000 bc68 	b.w	801b17c <__ieee754_sqrt>
 801a8ac:	f04f 0b00 	mov.w	fp, #0
 801a8b0:	ec47 6b10 	vmov	d0, r6, r7
 801a8b4:	f000 fd15 	bl	801b2e2 <fabs>
 801a8b8:	ec51 0b10 	vmov	r0, r1, d0
 801a8bc:	f1ba 0f00 	cmp.w	sl, #0
 801a8c0:	d127      	bne.n	801a912 <__ieee754_pow+0x1b2>
 801a8c2:	b124      	cbz	r4, 801a8ce <__ieee754_pow+0x16e>
 801a8c4:	4b2c      	ldr	r3, [pc, #176]	; (801a978 <__ieee754_pow+0x218>)
 801a8c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a8ca:	429a      	cmp	r2, r3
 801a8cc:	d121      	bne.n	801a912 <__ieee754_pow+0x1b2>
 801a8ce:	f1b9 0f00 	cmp.w	r9, #0
 801a8d2:	da05      	bge.n	801a8e0 <__ieee754_pow+0x180>
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	2000      	movs	r0, #0
 801a8da:	4927      	ldr	r1, [pc, #156]	; (801a978 <__ieee754_pow+0x218>)
 801a8dc:	f7e5 ff40 	bl	8000760 <__aeabi_ddiv>
 801a8e0:	2d00      	cmp	r5, #0
 801a8e2:	da9d      	bge.n	801a820 <__ieee754_pow+0xc0>
 801a8e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a8e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a8ec:	ea54 030b 	orrs.w	r3, r4, fp
 801a8f0:	d108      	bne.n	801a904 <__ieee754_pow+0x1a4>
 801a8f2:	4602      	mov	r2, r0
 801a8f4:	460b      	mov	r3, r1
 801a8f6:	4610      	mov	r0, r2
 801a8f8:	4619      	mov	r1, r3
 801a8fa:	f7e5 fc4f 	bl	800019c <__aeabi_dsub>
 801a8fe:	4602      	mov	r2, r0
 801a900:	460b      	mov	r3, r1
 801a902:	e7ac      	b.n	801a85e <__ieee754_pow+0xfe>
 801a904:	f1bb 0f01 	cmp.w	fp, #1
 801a908:	d18a      	bne.n	801a820 <__ieee754_pow+0xc0>
 801a90a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a90e:	4619      	mov	r1, r3
 801a910:	e786      	b.n	801a820 <__ieee754_pow+0xc0>
 801a912:	0fed      	lsrs	r5, r5, #31
 801a914:	1e6b      	subs	r3, r5, #1
 801a916:	930d      	str	r3, [sp, #52]	; 0x34
 801a918:	ea5b 0303 	orrs.w	r3, fp, r3
 801a91c:	d102      	bne.n	801a924 <__ieee754_pow+0x1c4>
 801a91e:	4632      	mov	r2, r6
 801a920:	463b      	mov	r3, r7
 801a922:	e7e8      	b.n	801a8f6 <__ieee754_pow+0x196>
 801a924:	4b16      	ldr	r3, [pc, #88]	; (801a980 <__ieee754_pow+0x220>)
 801a926:	4598      	cmp	r8, r3
 801a928:	f340 80fe 	ble.w	801ab28 <__ieee754_pow+0x3c8>
 801a92c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a930:	4598      	cmp	r8, r3
 801a932:	dd0a      	ble.n	801a94a <__ieee754_pow+0x1ea>
 801a934:	4b0f      	ldr	r3, [pc, #60]	; (801a974 <__ieee754_pow+0x214>)
 801a936:	429c      	cmp	r4, r3
 801a938:	dc0d      	bgt.n	801a956 <__ieee754_pow+0x1f6>
 801a93a:	f1b9 0f00 	cmp.w	r9, #0
 801a93e:	f6bf af6d 	bge.w	801a81c <__ieee754_pow+0xbc>
 801a942:	a307      	add	r3, pc, #28	; (adr r3, 801a960 <__ieee754_pow+0x200>)
 801a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a948:	e79f      	b.n	801a88a <__ieee754_pow+0x12a>
 801a94a:	4b0e      	ldr	r3, [pc, #56]	; (801a984 <__ieee754_pow+0x224>)
 801a94c:	429c      	cmp	r4, r3
 801a94e:	ddf4      	ble.n	801a93a <__ieee754_pow+0x1da>
 801a950:	4b09      	ldr	r3, [pc, #36]	; (801a978 <__ieee754_pow+0x218>)
 801a952:	429c      	cmp	r4, r3
 801a954:	dd18      	ble.n	801a988 <__ieee754_pow+0x228>
 801a956:	f1b9 0f00 	cmp.w	r9, #0
 801a95a:	dcf2      	bgt.n	801a942 <__ieee754_pow+0x1e2>
 801a95c:	e75e      	b.n	801a81c <__ieee754_pow+0xbc>
 801a95e:	bf00      	nop
 801a960:	8800759c 	.word	0x8800759c
 801a964:	7e37e43c 	.word	0x7e37e43c
 801a968:	7ff00000 	.word	0x7ff00000
 801a96c:	0801c7b9 	.word	0x0801c7b9
 801a970:	433fffff 	.word	0x433fffff
 801a974:	3fefffff 	.word	0x3fefffff
 801a978:	3ff00000 	.word	0x3ff00000
 801a97c:	3fe00000 	.word	0x3fe00000
 801a980:	41e00000 	.word	0x41e00000
 801a984:	3feffffe 	.word	0x3feffffe
 801a988:	2200      	movs	r2, #0
 801a98a:	4b63      	ldr	r3, [pc, #396]	; (801ab18 <__ieee754_pow+0x3b8>)
 801a98c:	f7e5 fc06 	bl	800019c <__aeabi_dsub>
 801a990:	a355      	add	r3, pc, #340	; (adr r3, 801aae8 <__ieee754_pow+0x388>)
 801a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a996:	4604      	mov	r4, r0
 801a998:	460d      	mov	r5, r1
 801a99a:	f7e5 fdb7 	bl	800050c <__aeabi_dmul>
 801a99e:	a354      	add	r3, pc, #336	; (adr r3, 801aaf0 <__ieee754_pow+0x390>)
 801a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a4:	4606      	mov	r6, r0
 801a9a6:	460f      	mov	r7, r1
 801a9a8:	4620      	mov	r0, r4
 801a9aa:	4629      	mov	r1, r5
 801a9ac:	f7e5 fdae 	bl	800050c <__aeabi_dmul>
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a9b6:	4b59      	ldr	r3, [pc, #356]	; (801ab1c <__ieee754_pow+0x3bc>)
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	4629      	mov	r1, r5
 801a9bc:	f7e5 fda6 	bl	800050c <__aeabi_dmul>
 801a9c0:	4602      	mov	r2, r0
 801a9c2:	460b      	mov	r3, r1
 801a9c4:	a14c      	add	r1, pc, #304	; (adr r1, 801aaf8 <__ieee754_pow+0x398>)
 801a9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9ca:	f7e5 fbe7 	bl	800019c <__aeabi_dsub>
 801a9ce:	4622      	mov	r2, r4
 801a9d0:	462b      	mov	r3, r5
 801a9d2:	f7e5 fd9b 	bl	800050c <__aeabi_dmul>
 801a9d6:	4602      	mov	r2, r0
 801a9d8:	460b      	mov	r3, r1
 801a9da:	2000      	movs	r0, #0
 801a9dc:	4950      	ldr	r1, [pc, #320]	; (801ab20 <__ieee754_pow+0x3c0>)
 801a9de:	f7e5 fbdd 	bl	800019c <__aeabi_dsub>
 801a9e2:	4622      	mov	r2, r4
 801a9e4:	462b      	mov	r3, r5
 801a9e6:	4680      	mov	r8, r0
 801a9e8:	4689      	mov	r9, r1
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	4629      	mov	r1, r5
 801a9ee:	f7e5 fd8d 	bl	800050c <__aeabi_dmul>
 801a9f2:	4602      	mov	r2, r0
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	4640      	mov	r0, r8
 801a9f8:	4649      	mov	r1, r9
 801a9fa:	f7e5 fd87 	bl	800050c <__aeabi_dmul>
 801a9fe:	a340      	add	r3, pc, #256	; (adr r3, 801ab00 <__ieee754_pow+0x3a0>)
 801aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa04:	f7e5 fd82 	bl	800050c <__aeabi_dmul>
 801aa08:	4602      	mov	r2, r0
 801aa0a:	460b      	mov	r3, r1
 801aa0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa10:	f7e5 fbc4 	bl	800019c <__aeabi_dsub>
 801aa14:	4602      	mov	r2, r0
 801aa16:	460b      	mov	r3, r1
 801aa18:	4604      	mov	r4, r0
 801aa1a:	460d      	mov	r5, r1
 801aa1c:	4630      	mov	r0, r6
 801aa1e:	4639      	mov	r1, r7
 801aa20:	f7e5 fbbe 	bl	80001a0 <__adddf3>
 801aa24:	2000      	movs	r0, #0
 801aa26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aa2a:	4632      	mov	r2, r6
 801aa2c:	463b      	mov	r3, r7
 801aa2e:	f7e5 fbb5 	bl	800019c <__aeabi_dsub>
 801aa32:	4602      	mov	r2, r0
 801aa34:	460b      	mov	r3, r1
 801aa36:	4620      	mov	r0, r4
 801aa38:	4629      	mov	r1, r5
 801aa3a:	f7e5 fbaf 	bl	800019c <__aeabi_dsub>
 801aa3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aa40:	f10b 33ff 	add.w	r3, fp, #4294967295
 801aa44:	4313      	orrs	r3, r2
 801aa46:	4606      	mov	r6, r0
 801aa48:	460f      	mov	r7, r1
 801aa4a:	f040 81eb 	bne.w	801ae24 <__ieee754_pow+0x6c4>
 801aa4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ab08 <__ieee754_pow+0x3a8>
 801aa52:	e9dd 4500 	ldrd	r4, r5, [sp]
 801aa56:	2400      	movs	r4, #0
 801aa58:	4622      	mov	r2, r4
 801aa5a:	462b      	mov	r3, r5
 801aa5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aa60:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aa64:	f7e5 fb9a 	bl	800019c <__aeabi_dsub>
 801aa68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aa6c:	f7e5 fd4e 	bl	800050c <__aeabi_dmul>
 801aa70:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa74:	4680      	mov	r8, r0
 801aa76:	4689      	mov	r9, r1
 801aa78:	4630      	mov	r0, r6
 801aa7a:	4639      	mov	r1, r7
 801aa7c:	f7e5 fd46 	bl	800050c <__aeabi_dmul>
 801aa80:	4602      	mov	r2, r0
 801aa82:	460b      	mov	r3, r1
 801aa84:	4640      	mov	r0, r8
 801aa86:	4649      	mov	r1, r9
 801aa88:	f7e5 fb8a 	bl	80001a0 <__adddf3>
 801aa8c:	4622      	mov	r2, r4
 801aa8e:	462b      	mov	r3, r5
 801aa90:	4680      	mov	r8, r0
 801aa92:	4689      	mov	r9, r1
 801aa94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa98:	f7e5 fd38 	bl	800050c <__aeabi_dmul>
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	4604      	mov	r4, r0
 801aaa0:	460d      	mov	r5, r1
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	4649      	mov	r1, r9
 801aaa6:	4640      	mov	r0, r8
 801aaa8:	e9cd 4500 	strd	r4, r5, [sp]
 801aaac:	f7e5 fb78 	bl	80001a0 <__adddf3>
 801aab0:	4b1c      	ldr	r3, [pc, #112]	; (801ab24 <__ieee754_pow+0x3c4>)
 801aab2:	4299      	cmp	r1, r3
 801aab4:	4606      	mov	r6, r0
 801aab6:	460f      	mov	r7, r1
 801aab8:	468b      	mov	fp, r1
 801aaba:	f340 82f7 	ble.w	801b0ac <__ieee754_pow+0x94c>
 801aabe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801aac2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801aac6:	4303      	orrs	r3, r0
 801aac8:	f000 81ea 	beq.w	801aea0 <__ieee754_pow+0x740>
 801aacc:	a310      	add	r3, pc, #64	; (adr r3, 801ab10 <__ieee754_pow+0x3b0>)
 801aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aad6:	f7e5 fd19 	bl	800050c <__aeabi_dmul>
 801aada:	a30d      	add	r3, pc, #52	; (adr r3, 801ab10 <__ieee754_pow+0x3b0>)
 801aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae0:	e6d5      	b.n	801a88e <__ieee754_pow+0x12e>
 801aae2:	bf00      	nop
 801aae4:	f3af 8000 	nop.w
 801aae8:	60000000 	.word	0x60000000
 801aaec:	3ff71547 	.word	0x3ff71547
 801aaf0:	f85ddf44 	.word	0xf85ddf44
 801aaf4:	3e54ae0b 	.word	0x3e54ae0b
 801aaf8:	55555555 	.word	0x55555555
 801aafc:	3fd55555 	.word	0x3fd55555
 801ab00:	652b82fe 	.word	0x652b82fe
 801ab04:	3ff71547 	.word	0x3ff71547
 801ab08:	00000000 	.word	0x00000000
 801ab0c:	bff00000 	.word	0xbff00000
 801ab10:	8800759c 	.word	0x8800759c
 801ab14:	7e37e43c 	.word	0x7e37e43c
 801ab18:	3ff00000 	.word	0x3ff00000
 801ab1c:	3fd00000 	.word	0x3fd00000
 801ab20:	3fe00000 	.word	0x3fe00000
 801ab24:	408fffff 	.word	0x408fffff
 801ab28:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ab2c:	f04f 0200 	mov.w	r2, #0
 801ab30:	da05      	bge.n	801ab3e <__ieee754_pow+0x3de>
 801ab32:	4bd3      	ldr	r3, [pc, #844]	; (801ae80 <__ieee754_pow+0x720>)
 801ab34:	f7e5 fcea 	bl	800050c <__aeabi_dmul>
 801ab38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ab3c:	460c      	mov	r4, r1
 801ab3e:	1523      	asrs	r3, r4, #20
 801ab40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ab44:	4413      	add	r3, r2
 801ab46:	9309      	str	r3, [sp, #36]	; 0x24
 801ab48:	4bce      	ldr	r3, [pc, #824]	; (801ae84 <__ieee754_pow+0x724>)
 801ab4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ab4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ab52:	429c      	cmp	r4, r3
 801ab54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ab58:	dd08      	ble.n	801ab6c <__ieee754_pow+0x40c>
 801ab5a:	4bcb      	ldr	r3, [pc, #812]	; (801ae88 <__ieee754_pow+0x728>)
 801ab5c:	429c      	cmp	r4, r3
 801ab5e:	f340 815e 	ble.w	801ae1e <__ieee754_pow+0x6be>
 801ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab64:	3301      	adds	r3, #1
 801ab66:	9309      	str	r3, [sp, #36]	; 0x24
 801ab68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ab6c:	f04f 0a00 	mov.w	sl, #0
 801ab70:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ab74:	930c      	str	r3, [sp, #48]	; 0x30
 801ab76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab78:	4bc4      	ldr	r3, [pc, #784]	; (801ae8c <__ieee754_pow+0x72c>)
 801ab7a:	4413      	add	r3, r2
 801ab7c:	ed93 7b00 	vldr	d7, [r3]
 801ab80:	4629      	mov	r1, r5
 801ab82:	ec53 2b17 	vmov	r2, r3, d7
 801ab86:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ab8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ab8e:	f7e5 fb05 	bl	800019c <__aeabi_dsub>
 801ab92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ab96:	4606      	mov	r6, r0
 801ab98:	460f      	mov	r7, r1
 801ab9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ab9e:	f7e5 faff 	bl	80001a0 <__adddf3>
 801aba2:	4602      	mov	r2, r0
 801aba4:	460b      	mov	r3, r1
 801aba6:	2000      	movs	r0, #0
 801aba8:	49b9      	ldr	r1, [pc, #740]	; (801ae90 <__ieee754_pow+0x730>)
 801abaa:	f7e5 fdd9 	bl	8000760 <__aeabi_ddiv>
 801abae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801abb2:	4602      	mov	r2, r0
 801abb4:	460b      	mov	r3, r1
 801abb6:	4630      	mov	r0, r6
 801abb8:	4639      	mov	r1, r7
 801abba:	f7e5 fca7 	bl	800050c <__aeabi_dmul>
 801abbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801abc2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801abc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801abca:	2300      	movs	r3, #0
 801abcc:	9302      	str	r3, [sp, #8]
 801abce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801abd2:	106d      	asrs	r5, r5, #1
 801abd4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801abd8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801abdc:	2200      	movs	r2, #0
 801abde:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801abe2:	4640      	mov	r0, r8
 801abe4:	4649      	mov	r1, r9
 801abe6:	4614      	mov	r4, r2
 801abe8:	461d      	mov	r5, r3
 801abea:	f7e5 fc8f 	bl	800050c <__aeabi_dmul>
 801abee:	4602      	mov	r2, r0
 801abf0:	460b      	mov	r3, r1
 801abf2:	4630      	mov	r0, r6
 801abf4:	4639      	mov	r1, r7
 801abf6:	f7e5 fad1 	bl	800019c <__aeabi_dsub>
 801abfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801abfe:	4606      	mov	r6, r0
 801ac00:	460f      	mov	r7, r1
 801ac02:	4620      	mov	r0, r4
 801ac04:	4629      	mov	r1, r5
 801ac06:	f7e5 fac9 	bl	800019c <__aeabi_dsub>
 801ac0a:	4602      	mov	r2, r0
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ac12:	f7e5 fac3 	bl	800019c <__aeabi_dsub>
 801ac16:	4642      	mov	r2, r8
 801ac18:	464b      	mov	r3, r9
 801ac1a:	f7e5 fc77 	bl	800050c <__aeabi_dmul>
 801ac1e:	4602      	mov	r2, r0
 801ac20:	460b      	mov	r3, r1
 801ac22:	4630      	mov	r0, r6
 801ac24:	4639      	mov	r1, r7
 801ac26:	f7e5 fab9 	bl	800019c <__aeabi_dsub>
 801ac2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ac2e:	f7e5 fc6d 	bl	800050c <__aeabi_dmul>
 801ac32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ac3a:	4610      	mov	r0, r2
 801ac3c:	4619      	mov	r1, r3
 801ac3e:	f7e5 fc65 	bl	800050c <__aeabi_dmul>
 801ac42:	a37b      	add	r3, pc, #492	; (adr r3, 801ae30 <__ieee754_pow+0x6d0>)
 801ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac48:	4604      	mov	r4, r0
 801ac4a:	460d      	mov	r5, r1
 801ac4c:	f7e5 fc5e 	bl	800050c <__aeabi_dmul>
 801ac50:	a379      	add	r3, pc, #484	; (adr r3, 801ae38 <__ieee754_pow+0x6d8>)
 801ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac56:	f7e5 faa3 	bl	80001a0 <__adddf3>
 801ac5a:	4622      	mov	r2, r4
 801ac5c:	462b      	mov	r3, r5
 801ac5e:	f7e5 fc55 	bl	800050c <__aeabi_dmul>
 801ac62:	a377      	add	r3, pc, #476	; (adr r3, 801ae40 <__ieee754_pow+0x6e0>)
 801ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac68:	f7e5 fa9a 	bl	80001a0 <__adddf3>
 801ac6c:	4622      	mov	r2, r4
 801ac6e:	462b      	mov	r3, r5
 801ac70:	f7e5 fc4c 	bl	800050c <__aeabi_dmul>
 801ac74:	a374      	add	r3, pc, #464	; (adr r3, 801ae48 <__ieee754_pow+0x6e8>)
 801ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7a:	f7e5 fa91 	bl	80001a0 <__adddf3>
 801ac7e:	4622      	mov	r2, r4
 801ac80:	462b      	mov	r3, r5
 801ac82:	f7e5 fc43 	bl	800050c <__aeabi_dmul>
 801ac86:	a372      	add	r3, pc, #456	; (adr r3, 801ae50 <__ieee754_pow+0x6f0>)
 801ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac8c:	f7e5 fa88 	bl	80001a0 <__adddf3>
 801ac90:	4622      	mov	r2, r4
 801ac92:	462b      	mov	r3, r5
 801ac94:	f7e5 fc3a 	bl	800050c <__aeabi_dmul>
 801ac98:	a36f      	add	r3, pc, #444	; (adr r3, 801ae58 <__ieee754_pow+0x6f8>)
 801ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9e:	f7e5 fa7f 	bl	80001a0 <__adddf3>
 801aca2:	4622      	mov	r2, r4
 801aca4:	4606      	mov	r6, r0
 801aca6:	460f      	mov	r7, r1
 801aca8:	462b      	mov	r3, r5
 801acaa:	4620      	mov	r0, r4
 801acac:	4629      	mov	r1, r5
 801acae:	f7e5 fc2d 	bl	800050c <__aeabi_dmul>
 801acb2:	4602      	mov	r2, r0
 801acb4:	460b      	mov	r3, r1
 801acb6:	4630      	mov	r0, r6
 801acb8:	4639      	mov	r1, r7
 801acba:	f7e5 fc27 	bl	800050c <__aeabi_dmul>
 801acbe:	4642      	mov	r2, r8
 801acc0:	4604      	mov	r4, r0
 801acc2:	460d      	mov	r5, r1
 801acc4:	464b      	mov	r3, r9
 801acc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801acca:	f7e5 fa69 	bl	80001a0 <__adddf3>
 801acce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801acd2:	f7e5 fc1b 	bl	800050c <__aeabi_dmul>
 801acd6:	4622      	mov	r2, r4
 801acd8:	462b      	mov	r3, r5
 801acda:	f7e5 fa61 	bl	80001a0 <__adddf3>
 801acde:	4642      	mov	r2, r8
 801ace0:	4606      	mov	r6, r0
 801ace2:	460f      	mov	r7, r1
 801ace4:	464b      	mov	r3, r9
 801ace6:	4640      	mov	r0, r8
 801ace8:	4649      	mov	r1, r9
 801acea:	f7e5 fc0f 	bl	800050c <__aeabi_dmul>
 801acee:	2200      	movs	r2, #0
 801acf0:	4b68      	ldr	r3, [pc, #416]	; (801ae94 <__ieee754_pow+0x734>)
 801acf2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801acf6:	f7e5 fa53 	bl	80001a0 <__adddf3>
 801acfa:	4632      	mov	r2, r6
 801acfc:	463b      	mov	r3, r7
 801acfe:	f7e5 fa4f 	bl	80001a0 <__adddf3>
 801ad02:	9802      	ldr	r0, [sp, #8]
 801ad04:	460d      	mov	r5, r1
 801ad06:	4604      	mov	r4, r0
 801ad08:	4602      	mov	r2, r0
 801ad0a:	460b      	mov	r3, r1
 801ad0c:	4640      	mov	r0, r8
 801ad0e:	4649      	mov	r1, r9
 801ad10:	f7e5 fbfc 	bl	800050c <__aeabi_dmul>
 801ad14:	2200      	movs	r2, #0
 801ad16:	4680      	mov	r8, r0
 801ad18:	4689      	mov	r9, r1
 801ad1a:	4b5e      	ldr	r3, [pc, #376]	; (801ae94 <__ieee754_pow+0x734>)
 801ad1c:	4620      	mov	r0, r4
 801ad1e:	4629      	mov	r1, r5
 801ad20:	f7e5 fa3c 	bl	800019c <__aeabi_dsub>
 801ad24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ad28:	f7e5 fa38 	bl	800019c <__aeabi_dsub>
 801ad2c:	4602      	mov	r2, r0
 801ad2e:	460b      	mov	r3, r1
 801ad30:	4630      	mov	r0, r6
 801ad32:	4639      	mov	r1, r7
 801ad34:	f7e5 fa32 	bl	800019c <__aeabi_dsub>
 801ad38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad3c:	f7e5 fbe6 	bl	800050c <__aeabi_dmul>
 801ad40:	4622      	mov	r2, r4
 801ad42:	4606      	mov	r6, r0
 801ad44:	460f      	mov	r7, r1
 801ad46:	462b      	mov	r3, r5
 801ad48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ad4c:	f7e5 fbde 	bl	800050c <__aeabi_dmul>
 801ad50:	4602      	mov	r2, r0
 801ad52:	460b      	mov	r3, r1
 801ad54:	4630      	mov	r0, r6
 801ad56:	4639      	mov	r1, r7
 801ad58:	f7e5 fa22 	bl	80001a0 <__adddf3>
 801ad5c:	4606      	mov	r6, r0
 801ad5e:	460f      	mov	r7, r1
 801ad60:	4602      	mov	r2, r0
 801ad62:	460b      	mov	r3, r1
 801ad64:	4640      	mov	r0, r8
 801ad66:	4649      	mov	r1, r9
 801ad68:	f7e5 fa1a 	bl	80001a0 <__adddf3>
 801ad6c:	9802      	ldr	r0, [sp, #8]
 801ad6e:	a33c      	add	r3, pc, #240	; (adr r3, 801ae60 <__ieee754_pow+0x700>)
 801ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad74:	4604      	mov	r4, r0
 801ad76:	460d      	mov	r5, r1
 801ad78:	f7e5 fbc8 	bl	800050c <__aeabi_dmul>
 801ad7c:	4642      	mov	r2, r8
 801ad7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ad82:	464b      	mov	r3, r9
 801ad84:	4620      	mov	r0, r4
 801ad86:	4629      	mov	r1, r5
 801ad88:	f7e5 fa08 	bl	800019c <__aeabi_dsub>
 801ad8c:	4602      	mov	r2, r0
 801ad8e:	460b      	mov	r3, r1
 801ad90:	4630      	mov	r0, r6
 801ad92:	4639      	mov	r1, r7
 801ad94:	f7e5 fa02 	bl	800019c <__aeabi_dsub>
 801ad98:	a333      	add	r3, pc, #204	; (adr r3, 801ae68 <__ieee754_pow+0x708>)
 801ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9e:	f7e5 fbb5 	bl	800050c <__aeabi_dmul>
 801ada2:	a333      	add	r3, pc, #204	; (adr r3, 801ae70 <__ieee754_pow+0x710>)
 801ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada8:	4606      	mov	r6, r0
 801adaa:	460f      	mov	r7, r1
 801adac:	4620      	mov	r0, r4
 801adae:	4629      	mov	r1, r5
 801adb0:	f7e5 fbac 	bl	800050c <__aeabi_dmul>
 801adb4:	4602      	mov	r2, r0
 801adb6:	460b      	mov	r3, r1
 801adb8:	4630      	mov	r0, r6
 801adba:	4639      	mov	r1, r7
 801adbc:	f7e5 f9f0 	bl	80001a0 <__adddf3>
 801adc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adc2:	4b35      	ldr	r3, [pc, #212]	; (801ae98 <__ieee754_pow+0x738>)
 801adc4:	4413      	add	r3, r2
 801adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adca:	f7e5 f9e9 	bl	80001a0 <__adddf3>
 801adce:	4604      	mov	r4, r0
 801add0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801add2:	460d      	mov	r5, r1
 801add4:	f7e5 fb30 	bl	8000438 <__aeabi_i2d>
 801add8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adda:	4b30      	ldr	r3, [pc, #192]	; (801ae9c <__ieee754_pow+0x73c>)
 801addc:	4413      	add	r3, r2
 801adde:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ade2:	4606      	mov	r6, r0
 801ade4:	460f      	mov	r7, r1
 801ade6:	4622      	mov	r2, r4
 801ade8:	462b      	mov	r3, r5
 801adea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801adee:	f7e5 f9d7 	bl	80001a0 <__adddf3>
 801adf2:	4642      	mov	r2, r8
 801adf4:	464b      	mov	r3, r9
 801adf6:	f7e5 f9d3 	bl	80001a0 <__adddf3>
 801adfa:	4632      	mov	r2, r6
 801adfc:	463b      	mov	r3, r7
 801adfe:	f7e5 f9cf 	bl	80001a0 <__adddf3>
 801ae02:	9802      	ldr	r0, [sp, #8]
 801ae04:	4632      	mov	r2, r6
 801ae06:	463b      	mov	r3, r7
 801ae08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae0c:	f7e5 f9c6 	bl	800019c <__aeabi_dsub>
 801ae10:	4642      	mov	r2, r8
 801ae12:	464b      	mov	r3, r9
 801ae14:	f7e5 f9c2 	bl	800019c <__aeabi_dsub>
 801ae18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ae1c:	e607      	b.n	801aa2e <__ieee754_pow+0x2ce>
 801ae1e:	f04f 0a01 	mov.w	sl, #1
 801ae22:	e6a5      	b.n	801ab70 <__ieee754_pow+0x410>
 801ae24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801ae78 <__ieee754_pow+0x718>
 801ae28:	e613      	b.n	801aa52 <__ieee754_pow+0x2f2>
 801ae2a:	bf00      	nop
 801ae2c:	f3af 8000 	nop.w
 801ae30:	4a454eef 	.word	0x4a454eef
 801ae34:	3fca7e28 	.word	0x3fca7e28
 801ae38:	93c9db65 	.word	0x93c9db65
 801ae3c:	3fcd864a 	.word	0x3fcd864a
 801ae40:	a91d4101 	.word	0xa91d4101
 801ae44:	3fd17460 	.word	0x3fd17460
 801ae48:	518f264d 	.word	0x518f264d
 801ae4c:	3fd55555 	.word	0x3fd55555
 801ae50:	db6fabff 	.word	0xdb6fabff
 801ae54:	3fdb6db6 	.word	0x3fdb6db6
 801ae58:	33333303 	.word	0x33333303
 801ae5c:	3fe33333 	.word	0x3fe33333
 801ae60:	e0000000 	.word	0xe0000000
 801ae64:	3feec709 	.word	0x3feec709
 801ae68:	dc3a03fd 	.word	0xdc3a03fd
 801ae6c:	3feec709 	.word	0x3feec709
 801ae70:	145b01f5 	.word	0x145b01f5
 801ae74:	be3e2fe0 	.word	0xbe3e2fe0
 801ae78:	00000000 	.word	0x00000000
 801ae7c:	3ff00000 	.word	0x3ff00000
 801ae80:	43400000 	.word	0x43400000
 801ae84:	0003988e 	.word	0x0003988e
 801ae88:	000bb679 	.word	0x000bb679
 801ae8c:	0801c7c0 	.word	0x0801c7c0
 801ae90:	3ff00000 	.word	0x3ff00000
 801ae94:	40080000 	.word	0x40080000
 801ae98:	0801c7e0 	.word	0x0801c7e0
 801ae9c:	0801c7d0 	.word	0x0801c7d0
 801aea0:	a3b4      	add	r3, pc, #720	; (adr r3, 801b174 <__ieee754_pow+0xa14>)
 801aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea6:	4640      	mov	r0, r8
 801aea8:	4649      	mov	r1, r9
 801aeaa:	f7e5 f979 	bl	80001a0 <__adddf3>
 801aeae:	4622      	mov	r2, r4
 801aeb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aeb4:	462b      	mov	r3, r5
 801aeb6:	4630      	mov	r0, r6
 801aeb8:	4639      	mov	r1, r7
 801aeba:	f7e5 f96f 	bl	800019c <__aeabi_dsub>
 801aebe:	4602      	mov	r2, r0
 801aec0:	460b      	mov	r3, r1
 801aec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aec6:	f7e5 fdb1 	bl	8000a2c <__aeabi_dcmpgt>
 801aeca:	2800      	cmp	r0, #0
 801aecc:	f47f adfe 	bne.w	801aacc <__ieee754_pow+0x36c>
 801aed0:	4aa3      	ldr	r2, [pc, #652]	; (801b160 <__ieee754_pow+0xa00>)
 801aed2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aed6:	4293      	cmp	r3, r2
 801aed8:	f340 810a 	ble.w	801b0f0 <__ieee754_pow+0x990>
 801aedc:	151b      	asrs	r3, r3, #20
 801aede:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801aee2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801aee6:	fa4a f303 	asr.w	r3, sl, r3
 801aeea:	445b      	add	r3, fp
 801aeec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801aef0:	4e9c      	ldr	r6, [pc, #624]	; (801b164 <__ieee754_pow+0xa04>)
 801aef2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801aef6:	4116      	asrs	r6, r2
 801aef8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801aefc:	2000      	movs	r0, #0
 801aefe:	ea23 0106 	bic.w	r1, r3, r6
 801af02:	f1c2 0214 	rsb	r2, r2, #20
 801af06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801af0a:	fa4a fa02 	asr.w	sl, sl, r2
 801af0e:	f1bb 0f00 	cmp.w	fp, #0
 801af12:	4602      	mov	r2, r0
 801af14:	460b      	mov	r3, r1
 801af16:	4620      	mov	r0, r4
 801af18:	4629      	mov	r1, r5
 801af1a:	bfb8      	it	lt
 801af1c:	f1ca 0a00 	rsblt	sl, sl, #0
 801af20:	f7e5 f93c 	bl	800019c <__aeabi_dsub>
 801af24:	e9cd 0100 	strd	r0, r1, [sp]
 801af28:	4642      	mov	r2, r8
 801af2a:	464b      	mov	r3, r9
 801af2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af30:	f7e5 f936 	bl	80001a0 <__adddf3>
 801af34:	2000      	movs	r0, #0
 801af36:	a378      	add	r3, pc, #480	; (adr r3, 801b118 <__ieee754_pow+0x9b8>)
 801af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3c:	4604      	mov	r4, r0
 801af3e:	460d      	mov	r5, r1
 801af40:	f7e5 fae4 	bl	800050c <__aeabi_dmul>
 801af44:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af48:	4606      	mov	r6, r0
 801af4a:	460f      	mov	r7, r1
 801af4c:	4620      	mov	r0, r4
 801af4e:	4629      	mov	r1, r5
 801af50:	f7e5 f924 	bl	800019c <__aeabi_dsub>
 801af54:	4602      	mov	r2, r0
 801af56:	460b      	mov	r3, r1
 801af58:	4640      	mov	r0, r8
 801af5a:	4649      	mov	r1, r9
 801af5c:	f7e5 f91e 	bl	800019c <__aeabi_dsub>
 801af60:	a36f      	add	r3, pc, #444	; (adr r3, 801b120 <__ieee754_pow+0x9c0>)
 801af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af66:	f7e5 fad1 	bl	800050c <__aeabi_dmul>
 801af6a:	a36f      	add	r3, pc, #444	; (adr r3, 801b128 <__ieee754_pow+0x9c8>)
 801af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af70:	4680      	mov	r8, r0
 801af72:	4689      	mov	r9, r1
 801af74:	4620      	mov	r0, r4
 801af76:	4629      	mov	r1, r5
 801af78:	f7e5 fac8 	bl	800050c <__aeabi_dmul>
 801af7c:	4602      	mov	r2, r0
 801af7e:	460b      	mov	r3, r1
 801af80:	4640      	mov	r0, r8
 801af82:	4649      	mov	r1, r9
 801af84:	f7e5 f90c 	bl	80001a0 <__adddf3>
 801af88:	4604      	mov	r4, r0
 801af8a:	460d      	mov	r5, r1
 801af8c:	4602      	mov	r2, r0
 801af8e:	460b      	mov	r3, r1
 801af90:	4630      	mov	r0, r6
 801af92:	4639      	mov	r1, r7
 801af94:	f7e5 f904 	bl	80001a0 <__adddf3>
 801af98:	4632      	mov	r2, r6
 801af9a:	463b      	mov	r3, r7
 801af9c:	4680      	mov	r8, r0
 801af9e:	4689      	mov	r9, r1
 801afa0:	f7e5 f8fc 	bl	800019c <__aeabi_dsub>
 801afa4:	4602      	mov	r2, r0
 801afa6:	460b      	mov	r3, r1
 801afa8:	4620      	mov	r0, r4
 801afaa:	4629      	mov	r1, r5
 801afac:	f7e5 f8f6 	bl	800019c <__aeabi_dsub>
 801afb0:	4642      	mov	r2, r8
 801afb2:	4606      	mov	r6, r0
 801afb4:	460f      	mov	r7, r1
 801afb6:	464b      	mov	r3, r9
 801afb8:	4640      	mov	r0, r8
 801afba:	4649      	mov	r1, r9
 801afbc:	f7e5 faa6 	bl	800050c <__aeabi_dmul>
 801afc0:	a35b      	add	r3, pc, #364	; (adr r3, 801b130 <__ieee754_pow+0x9d0>)
 801afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc6:	4604      	mov	r4, r0
 801afc8:	460d      	mov	r5, r1
 801afca:	f7e5 fa9f 	bl	800050c <__aeabi_dmul>
 801afce:	a35a      	add	r3, pc, #360	; (adr r3, 801b138 <__ieee754_pow+0x9d8>)
 801afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd4:	f7e5 f8e2 	bl	800019c <__aeabi_dsub>
 801afd8:	4622      	mov	r2, r4
 801afda:	462b      	mov	r3, r5
 801afdc:	f7e5 fa96 	bl	800050c <__aeabi_dmul>
 801afe0:	a357      	add	r3, pc, #348	; (adr r3, 801b140 <__ieee754_pow+0x9e0>)
 801afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe6:	f7e5 f8db 	bl	80001a0 <__adddf3>
 801afea:	4622      	mov	r2, r4
 801afec:	462b      	mov	r3, r5
 801afee:	f7e5 fa8d 	bl	800050c <__aeabi_dmul>
 801aff2:	a355      	add	r3, pc, #340	; (adr r3, 801b148 <__ieee754_pow+0x9e8>)
 801aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff8:	f7e5 f8d0 	bl	800019c <__aeabi_dsub>
 801affc:	4622      	mov	r2, r4
 801affe:	462b      	mov	r3, r5
 801b000:	f7e5 fa84 	bl	800050c <__aeabi_dmul>
 801b004:	a352      	add	r3, pc, #328	; (adr r3, 801b150 <__ieee754_pow+0x9f0>)
 801b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b00a:	f7e5 f8c9 	bl	80001a0 <__adddf3>
 801b00e:	4622      	mov	r2, r4
 801b010:	462b      	mov	r3, r5
 801b012:	f7e5 fa7b 	bl	800050c <__aeabi_dmul>
 801b016:	4602      	mov	r2, r0
 801b018:	460b      	mov	r3, r1
 801b01a:	4640      	mov	r0, r8
 801b01c:	4649      	mov	r1, r9
 801b01e:	f7e5 f8bd 	bl	800019c <__aeabi_dsub>
 801b022:	4604      	mov	r4, r0
 801b024:	460d      	mov	r5, r1
 801b026:	4602      	mov	r2, r0
 801b028:	460b      	mov	r3, r1
 801b02a:	4640      	mov	r0, r8
 801b02c:	4649      	mov	r1, r9
 801b02e:	f7e5 fa6d 	bl	800050c <__aeabi_dmul>
 801b032:	2200      	movs	r2, #0
 801b034:	e9cd 0100 	strd	r0, r1, [sp]
 801b038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b03c:	4620      	mov	r0, r4
 801b03e:	4629      	mov	r1, r5
 801b040:	f7e5 f8ac 	bl	800019c <__aeabi_dsub>
 801b044:	4602      	mov	r2, r0
 801b046:	460b      	mov	r3, r1
 801b048:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b04c:	f7e5 fb88 	bl	8000760 <__aeabi_ddiv>
 801b050:	4632      	mov	r2, r6
 801b052:	4604      	mov	r4, r0
 801b054:	460d      	mov	r5, r1
 801b056:	463b      	mov	r3, r7
 801b058:	4640      	mov	r0, r8
 801b05a:	4649      	mov	r1, r9
 801b05c:	f7e5 fa56 	bl	800050c <__aeabi_dmul>
 801b060:	4632      	mov	r2, r6
 801b062:	463b      	mov	r3, r7
 801b064:	f7e5 f89c 	bl	80001a0 <__adddf3>
 801b068:	4602      	mov	r2, r0
 801b06a:	460b      	mov	r3, r1
 801b06c:	4620      	mov	r0, r4
 801b06e:	4629      	mov	r1, r5
 801b070:	f7e5 f894 	bl	800019c <__aeabi_dsub>
 801b074:	4642      	mov	r2, r8
 801b076:	464b      	mov	r3, r9
 801b078:	f7e5 f890 	bl	800019c <__aeabi_dsub>
 801b07c:	4602      	mov	r2, r0
 801b07e:	460b      	mov	r3, r1
 801b080:	2000      	movs	r0, #0
 801b082:	4939      	ldr	r1, [pc, #228]	; (801b168 <__ieee754_pow+0xa08>)
 801b084:	f7e5 f88a 	bl	800019c <__aeabi_dsub>
 801b088:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801b08c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b090:	4602      	mov	r2, r0
 801b092:	460b      	mov	r3, r1
 801b094:	da2f      	bge.n	801b0f6 <__ieee754_pow+0x996>
 801b096:	4650      	mov	r0, sl
 801b098:	ec43 2b10 	vmov	d0, r2, r3
 801b09c:	f000 f9c0 	bl	801b420 <scalbn>
 801b0a0:	ec51 0b10 	vmov	r0, r1, d0
 801b0a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b0a8:	f7ff bbf1 	b.w	801a88e <__ieee754_pow+0x12e>
 801b0ac:	4b2f      	ldr	r3, [pc, #188]	; (801b16c <__ieee754_pow+0xa0c>)
 801b0ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b0b2:	429e      	cmp	r6, r3
 801b0b4:	f77f af0c 	ble.w	801aed0 <__ieee754_pow+0x770>
 801b0b8:	4b2d      	ldr	r3, [pc, #180]	; (801b170 <__ieee754_pow+0xa10>)
 801b0ba:	440b      	add	r3, r1
 801b0bc:	4303      	orrs	r3, r0
 801b0be:	d00b      	beq.n	801b0d8 <__ieee754_pow+0x978>
 801b0c0:	a325      	add	r3, pc, #148	; (adr r3, 801b158 <__ieee754_pow+0x9f8>)
 801b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0ca:	f7e5 fa1f 	bl	800050c <__aeabi_dmul>
 801b0ce:	a322      	add	r3, pc, #136	; (adr r3, 801b158 <__ieee754_pow+0x9f8>)
 801b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d4:	f7ff bbdb 	b.w	801a88e <__ieee754_pow+0x12e>
 801b0d8:	4622      	mov	r2, r4
 801b0da:	462b      	mov	r3, r5
 801b0dc:	f7e5 f85e 	bl	800019c <__aeabi_dsub>
 801b0e0:	4642      	mov	r2, r8
 801b0e2:	464b      	mov	r3, r9
 801b0e4:	f7e5 fc98 	bl	8000a18 <__aeabi_dcmpge>
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	f43f aef1 	beq.w	801aed0 <__ieee754_pow+0x770>
 801b0ee:	e7e7      	b.n	801b0c0 <__ieee754_pow+0x960>
 801b0f0:	f04f 0a00 	mov.w	sl, #0
 801b0f4:	e718      	b.n	801af28 <__ieee754_pow+0x7c8>
 801b0f6:	4621      	mov	r1, r4
 801b0f8:	e7d4      	b.n	801b0a4 <__ieee754_pow+0x944>
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	491a      	ldr	r1, [pc, #104]	; (801b168 <__ieee754_pow+0xa08>)
 801b0fe:	f7ff bb8f 	b.w	801a820 <__ieee754_pow+0xc0>
 801b102:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b106:	f7ff bb8b 	b.w	801a820 <__ieee754_pow+0xc0>
 801b10a:	4630      	mov	r0, r6
 801b10c:	4639      	mov	r1, r7
 801b10e:	f7ff bb87 	b.w	801a820 <__ieee754_pow+0xc0>
 801b112:	4693      	mov	fp, r2
 801b114:	f7ff bb98 	b.w	801a848 <__ieee754_pow+0xe8>
 801b118:	00000000 	.word	0x00000000
 801b11c:	3fe62e43 	.word	0x3fe62e43
 801b120:	fefa39ef 	.word	0xfefa39ef
 801b124:	3fe62e42 	.word	0x3fe62e42
 801b128:	0ca86c39 	.word	0x0ca86c39
 801b12c:	be205c61 	.word	0xbe205c61
 801b130:	72bea4d0 	.word	0x72bea4d0
 801b134:	3e663769 	.word	0x3e663769
 801b138:	c5d26bf1 	.word	0xc5d26bf1
 801b13c:	3ebbbd41 	.word	0x3ebbbd41
 801b140:	af25de2c 	.word	0xaf25de2c
 801b144:	3f11566a 	.word	0x3f11566a
 801b148:	16bebd93 	.word	0x16bebd93
 801b14c:	3f66c16c 	.word	0x3f66c16c
 801b150:	5555553e 	.word	0x5555553e
 801b154:	3fc55555 	.word	0x3fc55555
 801b158:	c2f8f359 	.word	0xc2f8f359
 801b15c:	01a56e1f 	.word	0x01a56e1f
 801b160:	3fe00000 	.word	0x3fe00000
 801b164:	000fffff 	.word	0x000fffff
 801b168:	3ff00000 	.word	0x3ff00000
 801b16c:	4090cbff 	.word	0x4090cbff
 801b170:	3f6f3400 	.word	0x3f6f3400
 801b174:	652b82fe 	.word	0x652b82fe
 801b178:	3c971547 	.word	0x3c971547

0801b17c <__ieee754_sqrt>:
 801b17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b180:	4955      	ldr	r1, [pc, #340]	; (801b2d8 <__ieee754_sqrt+0x15c>)
 801b182:	ec55 4b10 	vmov	r4, r5, d0
 801b186:	43a9      	bics	r1, r5
 801b188:	462b      	mov	r3, r5
 801b18a:	462a      	mov	r2, r5
 801b18c:	d112      	bne.n	801b1b4 <__ieee754_sqrt+0x38>
 801b18e:	ee10 2a10 	vmov	r2, s0
 801b192:	ee10 0a10 	vmov	r0, s0
 801b196:	4629      	mov	r1, r5
 801b198:	f7e5 f9b8 	bl	800050c <__aeabi_dmul>
 801b19c:	4602      	mov	r2, r0
 801b19e:	460b      	mov	r3, r1
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	4629      	mov	r1, r5
 801b1a4:	f7e4 fffc 	bl	80001a0 <__adddf3>
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	460d      	mov	r5, r1
 801b1ac:	ec45 4b10 	vmov	d0, r4, r5
 801b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1b4:	2d00      	cmp	r5, #0
 801b1b6:	ee10 0a10 	vmov	r0, s0
 801b1ba:	4621      	mov	r1, r4
 801b1bc:	dc0f      	bgt.n	801b1de <__ieee754_sqrt+0x62>
 801b1be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b1c2:	4330      	orrs	r0, r6
 801b1c4:	d0f2      	beq.n	801b1ac <__ieee754_sqrt+0x30>
 801b1c6:	b155      	cbz	r5, 801b1de <__ieee754_sqrt+0x62>
 801b1c8:	ee10 2a10 	vmov	r2, s0
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f7e4 ffe4 	bl	800019c <__aeabi_dsub>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	f7e5 fac2 	bl	8000760 <__aeabi_ddiv>
 801b1dc:	e7e4      	b.n	801b1a8 <__ieee754_sqrt+0x2c>
 801b1de:	151b      	asrs	r3, r3, #20
 801b1e0:	d073      	beq.n	801b2ca <__ieee754_sqrt+0x14e>
 801b1e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b1e6:	07dd      	lsls	r5, r3, #31
 801b1e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b1ec:	bf48      	it	mi
 801b1ee:	0fc8      	lsrmi	r0, r1, #31
 801b1f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b1f4:	bf44      	itt	mi
 801b1f6:	0049      	lslmi	r1, r1, #1
 801b1f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801b1fc:	2500      	movs	r5, #0
 801b1fe:	1058      	asrs	r0, r3, #1
 801b200:	0fcb      	lsrs	r3, r1, #31
 801b202:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801b206:	0049      	lsls	r1, r1, #1
 801b208:	2316      	movs	r3, #22
 801b20a:	462c      	mov	r4, r5
 801b20c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801b210:	19a7      	adds	r7, r4, r6
 801b212:	4297      	cmp	r7, r2
 801b214:	bfde      	ittt	le
 801b216:	19bc      	addle	r4, r7, r6
 801b218:	1bd2      	suble	r2, r2, r7
 801b21a:	19ad      	addle	r5, r5, r6
 801b21c:	0fcf      	lsrs	r7, r1, #31
 801b21e:	3b01      	subs	r3, #1
 801b220:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801b224:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b228:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b22c:	d1f0      	bne.n	801b210 <__ieee754_sqrt+0x94>
 801b22e:	f04f 0c20 	mov.w	ip, #32
 801b232:	469e      	mov	lr, r3
 801b234:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b238:	42a2      	cmp	r2, r4
 801b23a:	eb06 070e 	add.w	r7, r6, lr
 801b23e:	dc02      	bgt.n	801b246 <__ieee754_sqrt+0xca>
 801b240:	d112      	bne.n	801b268 <__ieee754_sqrt+0xec>
 801b242:	428f      	cmp	r7, r1
 801b244:	d810      	bhi.n	801b268 <__ieee754_sqrt+0xec>
 801b246:	2f00      	cmp	r7, #0
 801b248:	eb07 0e06 	add.w	lr, r7, r6
 801b24c:	da42      	bge.n	801b2d4 <__ieee754_sqrt+0x158>
 801b24e:	f1be 0f00 	cmp.w	lr, #0
 801b252:	db3f      	blt.n	801b2d4 <__ieee754_sqrt+0x158>
 801b254:	f104 0801 	add.w	r8, r4, #1
 801b258:	1b12      	subs	r2, r2, r4
 801b25a:	428f      	cmp	r7, r1
 801b25c:	bf88      	it	hi
 801b25e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b262:	1bc9      	subs	r1, r1, r7
 801b264:	4433      	add	r3, r6
 801b266:	4644      	mov	r4, r8
 801b268:	0052      	lsls	r2, r2, #1
 801b26a:	f1bc 0c01 	subs.w	ip, ip, #1
 801b26e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801b272:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b276:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b27a:	d1dd      	bne.n	801b238 <__ieee754_sqrt+0xbc>
 801b27c:	430a      	orrs	r2, r1
 801b27e:	d006      	beq.n	801b28e <__ieee754_sqrt+0x112>
 801b280:	1c5c      	adds	r4, r3, #1
 801b282:	bf13      	iteet	ne
 801b284:	3301      	addne	r3, #1
 801b286:	3501      	addeq	r5, #1
 801b288:	4663      	moveq	r3, ip
 801b28a:	f023 0301 	bicne.w	r3, r3, #1
 801b28e:	106a      	asrs	r2, r5, #1
 801b290:	085b      	lsrs	r3, r3, #1
 801b292:	07e9      	lsls	r1, r5, #31
 801b294:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b298:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b29c:	bf48      	it	mi
 801b29e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b2a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801b2a6:	461c      	mov	r4, r3
 801b2a8:	e780      	b.n	801b1ac <__ieee754_sqrt+0x30>
 801b2aa:	0aca      	lsrs	r2, r1, #11
 801b2ac:	3815      	subs	r0, #21
 801b2ae:	0549      	lsls	r1, r1, #21
 801b2b0:	2a00      	cmp	r2, #0
 801b2b2:	d0fa      	beq.n	801b2aa <__ieee754_sqrt+0x12e>
 801b2b4:	02d6      	lsls	r6, r2, #11
 801b2b6:	d50a      	bpl.n	801b2ce <__ieee754_sqrt+0x152>
 801b2b8:	f1c3 0420 	rsb	r4, r3, #32
 801b2bc:	fa21 f404 	lsr.w	r4, r1, r4
 801b2c0:	1e5d      	subs	r5, r3, #1
 801b2c2:	4099      	lsls	r1, r3
 801b2c4:	4322      	orrs	r2, r4
 801b2c6:	1b43      	subs	r3, r0, r5
 801b2c8:	e78b      	b.n	801b1e2 <__ieee754_sqrt+0x66>
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	e7f0      	b.n	801b2b0 <__ieee754_sqrt+0x134>
 801b2ce:	0052      	lsls	r2, r2, #1
 801b2d0:	3301      	adds	r3, #1
 801b2d2:	e7ef      	b.n	801b2b4 <__ieee754_sqrt+0x138>
 801b2d4:	46a0      	mov	r8, r4
 801b2d6:	e7bf      	b.n	801b258 <__ieee754_sqrt+0xdc>
 801b2d8:	7ff00000 	.word	0x7ff00000

0801b2dc <__ieee754_sqrtf>:
 801b2dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b2e0:	4770      	bx	lr

0801b2e2 <fabs>:
 801b2e2:	ec51 0b10 	vmov	r0, r1, d0
 801b2e6:	ee10 2a10 	vmov	r2, s0
 801b2ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b2ee:	ec43 2b10 	vmov	d0, r2, r3
 801b2f2:	4770      	bx	lr

0801b2f4 <finite>:
 801b2f4:	ee10 3a90 	vmov	r3, s1
 801b2f8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b2fc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b300:	0fc0      	lsrs	r0, r0, #31
 801b302:	4770      	bx	lr

0801b304 <matherr>:
 801b304:	2000      	movs	r0, #0
 801b306:	4770      	bx	lr

0801b308 <nan>:
 801b308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b310 <nan+0x8>
 801b30c:	4770      	bx	lr
 801b30e:	bf00      	nop
 801b310:	00000000 	.word	0x00000000
 801b314:	7ff80000 	.word	0x7ff80000

0801b318 <rint>:
 801b318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b31a:	ec51 0b10 	vmov	r0, r1, d0
 801b31e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b322:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b326:	2e13      	cmp	r6, #19
 801b328:	460b      	mov	r3, r1
 801b32a:	ee10 4a10 	vmov	r4, s0
 801b32e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801b332:	dc56      	bgt.n	801b3e2 <rint+0xca>
 801b334:	2e00      	cmp	r6, #0
 801b336:	da2b      	bge.n	801b390 <rint+0x78>
 801b338:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b33c:	4302      	orrs	r2, r0
 801b33e:	d023      	beq.n	801b388 <rint+0x70>
 801b340:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801b344:	4302      	orrs	r2, r0
 801b346:	4254      	negs	r4, r2
 801b348:	4314      	orrs	r4, r2
 801b34a:	0c4b      	lsrs	r3, r1, #17
 801b34c:	0b24      	lsrs	r4, r4, #12
 801b34e:	045b      	lsls	r3, r3, #17
 801b350:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801b354:	ea44 0103 	orr.w	r1, r4, r3
 801b358:	460b      	mov	r3, r1
 801b35a:	492f      	ldr	r1, [pc, #188]	; (801b418 <rint+0x100>)
 801b35c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801b360:	e9d1 6700 	ldrd	r6, r7, [r1]
 801b364:	4602      	mov	r2, r0
 801b366:	4639      	mov	r1, r7
 801b368:	4630      	mov	r0, r6
 801b36a:	f7e4 ff19 	bl	80001a0 <__adddf3>
 801b36e:	e9cd 0100 	strd	r0, r1, [sp]
 801b372:	463b      	mov	r3, r7
 801b374:	4632      	mov	r2, r6
 801b376:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b37a:	f7e4 ff0f 	bl	800019c <__aeabi_dsub>
 801b37e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b382:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801b386:	4639      	mov	r1, r7
 801b388:	ec41 0b10 	vmov	d0, r0, r1
 801b38c:	b003      	add	sp, #12
 801b38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b390:	4a22      	ldr	r2, [pc, #136]	; (801b41c <rint+0x104>)
 801b392:	4132      	asrs	r2, r6
 801b394:	ea01 0702 	and.w	r7, r1, r2
 801b398:	4307      	orrs	r7, r0
 801b39a:	d0f5      	beq.n	801b388 <rint+0x70>
 801b39c:	0852      	lsrs	r2, r2, #1
 801b39e:	4011      	ands	r1, r2
 801b3a0:	430c      	orrs	r4, r1
 801b3a2:	d00b      	beq.n	801b3bc <rint+0xa4>
 801b3a4:	ea23 0202 	bic.w	r2, r3, r2
 801b3a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b3ac:	2e13      	cmp	r6, #19
 801b3ae:	fa43 f306 	asr.w	r3, r3, r6
 801b3b2:	bf0c      	ite	eq
 801b3b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b3b8:	2400      	movne	r4, #0
 801b3ba:	4313      	orrs	r3, r2
 801b3bc:	4916      	ldr	r1, [pc, #88]	; (801b418 <rint+0x100>)
 801b3be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b3c2:	4622      	mov	r2, r4
 801b3c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b3c8:	4620      	mov	r0, r4
 801b3ca:	4629      	mov	r1, r5
 801b3cc:	f7e4 fee8 	bl	80001a0 <__adddf3>
 801b3d0:	e9cd 0100 	strd	r0, r1, [sp]
 801b3d4:	4622      	mov	r2, r4
 801b3d6:	462b      	mov	r3, r5
 801b3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b3dc:	f7e4 fede 	bl	800019c <__aeabi_dsub>
 801b3e0:	e7d2      	b.n	801b388 <rint+0x70>
 801b3e2:	2e33      	cmp	r6, #51	; 0x33
 801b3e4:	dd07      	ble.n	801b3f6 <rint+0xde>
 801b3e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b3ea:	d1cd      	bne.n	801b388 <rint+0x70>
 801b3ec:	ee10 2a10 	vmov	r2, s0
 801b3f0:	f7e4 fed6 	bl	80001a0 <__adddf3>
 801b3f4:	e7c8      	b.n	801b388 <rint+0x70>
 801b3f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 801b3fe:	40f2      	lsrs	r2, r6
 801b400:	4210      	tst	r0, r2
 801b402:	d0c1      	beq.n	801b388 <rint+0x70>
 801b404:	0852      	lsrs	r2, r2, #1
 801b406:	4210      	tst	r0, r2
 801b408:	bf1f      	itttt	ne
 801b40a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b40e:	ea20 0202 	bicne.w	r2, r0, r2
 801b412:	4134      	asrne	r4, r6
 801b414:	4314      	orrne	r4, r2
 801b416:	e7d1      	b.n	801b3bc <rint+0xa4>
 801b418:	0801c7f0 	.word	0x0801c7f0
 801b41c:	000fffff 	.word	0x000fffff

0801b420 <scalbn>:
 801b420:	b570      	push	{r4, r5, r6, lr}
 801b422:	ec55 4b10 	vmov	r4, r5, d0
 801b426:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b42a:	4606      	mov	r6, r0
 801b42c:	462b      	mov	r3, r5
 801b42e:	b9aa      	cbnz	r2, 801b45c <scalbn+0x3c>
 801b430:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b434:	4323      	orrs	r3, r4
 801b436:	d03b      	beq.n	801b4b0 <scalbn+0x90>
 801b438:	4b31      	ldr	r3, [pc, #196]	; (801b500 <scalbn+0xe0>)
 801b43a:	4629      	mov	r1, r5
 801b43c:	2200      	movs	r2, #0
 801b43e:	ee10 0a10 	vmov	r0, s0
 801b442:	f7e5 f863 	bl	800050c <__aeabi_dmul>
 801b446:	4b2f      	ldr	r3, [pc, #188]	; (801b504 <scalbn+0xe4>)
 801b448:	429e      	cmp	r6, r3
 801b44a:	4604      	mov	r4, r0
 801b44c:	460d      	mov	r5, r1
 801b44e:	da12      	bge.n	801b476 <scalbn+0x56>
 801b450:	a327      	add	r3, pc, #156	; (adr r3, 801b4f0 <scalbn+0xd0>)
 801b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b456:	f7e5 f859 	bl	800050c <__aeabi_dmul>
 801b45a:	e009      	b.n	801b470 <scalbn+0x50>
 801b45c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b460:	428a      	cmp	r2, r1
 801b462:	d10c      	bne.n	801b47e <scalbn+0x5e>
 801b464:	ee10 2a10 	vmov	r2, s0
 801b468:	4620      	mov	r0, r4
 801b46a:	4629      	mov	r1, r5
 801b46c:	f7e4 fe98 	bl	80001a0 <__adddf3>
 801b470:	4604      	mov	r4, r0
 801b472:	460d      	mov	r5, r1
 801b474:	e01c      	b.n	801b4b0 <scalbn+0x90>
 801b476:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b47a:	460b      	mov	r3, r1
 801b47c:	3a36      	subs	r2, #54	; 0x36
 801b47e:	4432      	add	r2, r6
 801b480:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b484:	428a      	cmp	r2, r1
 801b486:	dd0b      	ble.n	801b4a0 <scalbn+0x80>
 801b488:	ec45 4b11 	vmov	d1, r4, r5
 801b48c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b4f8 <scalbn+0xd8>
 801b490:	f000 f83c 	bl	801b50c <copysign>
 801b494:	a318      	add	r3, pc, #96	; (adr r3, 801b4f8 <scalbn+0xd8>)
 801b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b49a:	ec51 0b10 	vmov	r0, r1, d0
 801b49e:	e7da      	b.n	801b456 <scalbn+0x36>
 801b4a0:	2a00      	cmp	r2, #0
 801b4a2:	dd08      	ble.n	801b4b6 <scalbn+0x96>
 801b4a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b4a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b4ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b4b0:	ec45 4b10 	vmov	d0, r4, r5
 801b4b4:	bd70      	pop	{r4, r5, r6, pc}
 801b4b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b4ba:	da0d      	bge.n	801b4d8 <scalbn+0xb8>
 801b4bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b4c0:	429e      	cmp	r6, r3
 801b4c2:	ec45 4b11 	vmov	d1, r4, r5
 801b4c6:	dce1      	bgt.n	801b48c <scalbn+0x6c>
 801b4c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b4f0 <scalbn+0xd0>
 801b4cc:	f000 f81e 	bl	801b50c <copysign>
 801b4d0:	a307      	add	r3, pc, #28	; (adr r3, 801b4f0 <scalbn+0xd0>)
 801b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d6:	e7e0      	b.n	801b49a <scalbn+0x7a>
 801b4d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b4dc:	3236      	adds	r2, #54	; 0x36
 801b4de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b4e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	4629      	mov	r1, r5
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	4b06      	ldr	r3, [pc, #24]	; (801b508 <scalbn+0xe8>)
 801b4ee:	e7b2      	b.n	801b456 <scalbn+0x36>
 801b4f0:	c2f8f359 	.word	0xc2f8f359
 801b4f4:	01a56e1f 	.word	0x01a56e1f
 801b4f8:	8800759c 	.word	0x8800759c
 801b4fc:	7e37e43c 	.word	0x7e37e43c
 801b500:	43500000 	.word	0x43500000
 801b504:	ffff3cb0 	.word	0xffff3cb0
 801b508:	3c900000 	.word	0x3c900000

0801b50c <copysign>:
 801b50c:	ec51 0b10 	vmov	r0, r1, d0
 801b510:	ee11 0a90 	vmov	r0, s3
 801b514:	ee10 2a10 	vmov	r2, s0
 801b518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b51c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b520:	ea41 0300 	orr.w	r3, r1, r0
 801b524:	ec43 2b10 	vmov	d0, r2, r3
 801b528:	4770      	bx	lr
	...

0801b52c <_init>:
 801b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b52e:	bf00      	nop
 801b530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b532:	bc08      	pop	{r3}
 801b534:	469e      	mov	lr, r3
 801b536:	4770      	bx	lr

0801b538 <_fini>:
 801b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b53a:	bf00      	nop
 801b53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b53e:	bc08      	pop	{r3}
 801b540:	469e      	mov	lr, r3
 801b542:	4770      	bx	lr
