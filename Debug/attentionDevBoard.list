
attentionDevBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003400  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000004  08003684  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001188  20000014  08003694  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000119c  08003694  0002119c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00028576  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000587c  00000000  00000000  000485ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f877  00000000  00000000  0004de36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001740  00000000  00000000  0005d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002560  00000000  00000000  0005edf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cbd4  00000000  00000000  00061350  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009c74  00000000  00000000  0006df24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00077b98  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004038  00000000  00000000  00077c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08003528 	.word	0x08003528

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08003528 	.word	0x08003528

08000180 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <HAL_Init+0x28>)
 8000182:	6813      	ldr	r3, [r2, #0]
 8000184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000188:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800018a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800018c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800018e:	f000 fad7 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000192:	2000      	movs	r0, #0
 8000194:	f002 fff0 	bl	8003178 <HAL_InitTick>
 8000198:	4604      	mov	r4, r0
 800019a:	b918      	cbnz	r0, 80001a4 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019c:	f002 ffe6 	bl	800316c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80001a0:	4620      	mov	r0, r4
 80001a2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001a4:	2401      	movs	r4, #1
 80001a6:	e7fb      	b.n	80001a0 <HAL_Init+0x20>
 80001a8:	58004000 	.word	0x58004000

080001ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80001ac:	4a03      	ldr	r2, [pc, #12]	; (80001bc <HAL_IncTick+0x10>)
 80001ae:	4904      	ldr	r1, [pc, #16]	; (80001c0 <HAL_IncTick+0x14>)
 80001b0:	6813      	ldr	r3, [r2, #0]
 80001b2:	6809      	ldr	r1, [r1, #0]
 80001b4:	440b      	add	r3, r1
 80001b6:	6013      	str	r3, [r2, #0]
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000d7c 	.word	0x20000d7c
 80001c0:	20000004 	.word	0x20000004

080001c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001c4:	4b01      	ldr	r3, [pc, #4]	; (80001cc <HAL_GetTick+0x8>)
 80001c6:	6818      	ldr	r0, [r3, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000d7c 	.word	0x20000d7c

080001d0 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTickPrio+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000008 	.word	0x20000008

080001dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80001dc:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80001de:	0dcc      	lsrs	r4, r1, #23
 80001e0:	f004 0404 	and.w	r4, r4, #4
 80001e4:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 80001e6:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80001ea:	5823      	ldr	r3, [r4, r0]
 80001ec:	2507      	movs	r5, #7
 80001ee:	408d      	lsls	r5, r1
 80001f0:	ea23 0305 	bic.w	r3, r3, r5
 80001f4:	fa02 f101 	lsl.w	r1, r2, r1
 80001f8:	4319      	orrs	r1, r3
 80001fa:	5021      	str	r1, [r4, r0]
 80001fc:	bd30      	pop	{r4, r5, pc}

080001fe <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80001fe:	6880      	ldr	r0, [r0, #8]
}
 8000200:	f000 0001 	and.w	r0, r0, #1
 8000204:	4770      	bx	lr

08000206 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000206:	6880      	ldr	r0, [r0, #8]
}
 8000208:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800020c:	4770      	bx	lr
	...

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000212:	2300      	movs	r3, #0
 8000214:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000216:	4604      	mov	r4, r0
 8000218:	2800      	cmp	r0, #0
 800021a:	d07b      	beq.n	8000314 <HAL_ADC_Init+0x104>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800021c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800021e:	b925      	cbnz	r5, 800022a <HAL_ADC_Init+0x1a>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000220:	f002 fca8 	bl	8002b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000224:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000226:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800022a:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800022c:	6883      	ldr	r3, [r0, #8]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	d472      	bmi.n	8000318 <HAL_ADC_Init+0x108>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000232:	6883      	ldr	r3, [r0, #8]
 8000234:	00dd      	lsls	r5, r3, #3
 8000236:	d576      	bpl.n	8000326 <HAL_ADC_Init+0x116>
 8000238:	6883      	ldr	r3, [r0, #8]
 800023a:	00d9      	lsls	r1, r3, #3
 800023c:	f140 8081 	bpl.w	8000342 <HAL_ADC_Init+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000240:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000242:	f7ff ffe0 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000246:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000248:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800024c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800024e:	d15e      	bne.n	800030e <HAL_ADC_Init+0xfe>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000250:	2800      	cmp	r0, #0
 8000252:	d15c      	bne.n	800030e <HAL_ADC_Init+0xfe>
    ADC_STATE_CLR_SET(hadc->State,
 8000254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800025e:	6820      	ldr	r0, [r4, #0]
 8000260:	f7ff ffcd 	bl	80001fe <LL_ADC_IsEnabled>
 8000264:	b950      	cbnz	r0, 800027c <HAL_ADC_Init+0x6c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000266:	484e      	ldr	r0, [pc, #312]	; (80003a0 <HAL_ADC_Init+0x190>)
 8000268:	f7ff ffc9 	bl	80001fe <LL_ADC_IsEnabled>
 800026c:	b930      	cbnz	r0, 800027c <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <HAL_ADC_Init+0x194>)
 8000270:	6860      	ldr	r0, [r4, #4]
 8000272:	6893      	ldr	r3, [r2, #8]
 8000274:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000278:	4303      	orrs	r3, r0
 800027a:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800027c:	68e0      	ldr	r0, [r4, #12]
 800027e:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8000280:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8000284:	4303      	orrs	r3, r0
 8000286:	68a0      	ldr	r0, [r4, #8]
 8000288:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800028a:	7e60      	ldrb	r0, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800028c:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800028e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000296:	bf02      	ittt	eq
 8000298:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 800029a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800029e:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002a4:	b122      	cbz	r2, 80002b0 <HAL_ADC_Init+0xa0>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80002a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80002a8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80002ac:	4302      	orrs	r2, r0
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80002ae:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80002b0:	6820      	ldr	r0, [r4, #0]
 80002b2:	4a3d      	ldr	r2, [pc, #244]	; (80003a8 <HAL_ADC_Init+0x198>)
 80002b4:	68c5      	ldr	r5, [r0, #12]
 80002b6:	402a      	ands	r2, r5
 80002b8:	4313      	orrs	r3, r2
 80002ba:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80002bc:	f7ff ffa3 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80002c0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80002c2:	689a      	ldr	r2, [r3, #8]
 80002c4:	0712      	lsls	r2, r2, #28
 80002c6:	d546      	bpl.n	8000356 <HAL_ADC_Init+0x146>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80002c8:	6922      	ldr	r2, [r4, #16]
 80002ca:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80002cc:	bf05      	ittet	eq
 80002ce:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 80002d0:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80002d2:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80002d4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80002d8:	bf06      	itte	eq
 80002da:	f020 000f 	biceq.w	r0, r0, #15
 80002de:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80002e0:	f022 020f 	bicne.w	r2, r2, #15
 80002e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80002e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80002e8:	f023 0303 	bic.w	r3, r3, #3
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80002f2:	4608      	mov	r0, r1
 80002f4:	b003      	add	sp, #12
 80002f6:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 80002f8:	9b01      	ldr	r3, [sp, #4]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80002fe:	9b01      	ldr	r3, [sp, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f9      	bne.n	80002f8 <HAL_ADC_Init+0xe8>
 8000304:	e798      	b.n	8000238 <HAL_ADC_Init+0x28>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000306:	691a      	ldr	r2, [r3, #16]
 8000308:	f022 0201 	bic.w	r2, r2, #1
 800030c:	e045      	b.n	800039a <HAL_ADC_Init+0x18a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000314:	2101      	movs	r1, #1
 8000316:	e7ec      	b.n	80002f2 <HAL_ADC_Init+0xe2>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000318:	6883      	ldr	r3, [r0, #8]
 800031a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800031e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000322:	6083      	str	r3, [r0, #8]
 8000324:	e785      	b.n	8000232 <HAL_ADC_Init+0x22>
  MODIFY_REG(ADCx->CR,
 8000326:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <HAL_ADC_Init+0x19c>)
 800032a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800032e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000336:	6083      	str	r3, [r0, #8]
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <HAL_ADC_Init+0x1a0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000340:	e7dc      	b.n	80002fc <HAL_ADC_Init+0xec>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000342:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000344:	f043 0310 	orr.w	r3, r3, #16
 8000348:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800034a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000352:	2101      	movs	r1, #1
 8000354:	e775      	b.n	8000242 <HAL_ADC_Init+0x32>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000356:	2800      	cmp	r0, #0
 8000358:	d1b6      	bne.n	80002c8 <HAL_ADC_Init+0xb8>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800035a:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800035c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000360:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000362:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000364:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8000368:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800036c:	f020 0002 	bic.w	r0, r0, #2
 8000370:	4302      	orrs	r2, r0
 8000372:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000374:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000378:	2a01      	cmp	r2, #1
 800037a:	d1c4      	bne.n	8000306 <HAL_ADC_Init+0xf6>
        MODIFY_REG(hadc->Instance->CFGR2,
 800037c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800037e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000380:	6918      	ldr	r0, [r3, #16]
 8000382:	432a      	orrs	r2, r5
 8000384:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000386:	f042 0201 	orr.w	r2, r2, #1
 800038a:	432a      	orrs	r2, r5
 800038c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800038e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000392:	432a      	orrs	r2, r5
 8000394:	f020 0004 	bic.w	r0, r0, #4
 8000398:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800039a:	611a      	str	r2, [r3, #16]
 800039c:	e794      	b.n	80002c8 <HAL_ADC_Init+0xb8>
 800039e:	bf00      	nop
 80003a0:	50040000 	.word	0x50040000
 80003a4:	50040300 	.word	0x50040300
 80003a8:	fff0c007 	.word	0xfff0c007
 80003ac:	00030d40 	.word	0x00030d40
 80003b0:	20000010 	.word	0x20000010

080003b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80003b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003ba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80003be:	2b01      	cmp	r3, #1
{
 80003c0:	4605      	mov	r5, r0
 80003c2:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80003c4:	f000 8174 	beq.w	80006b0 <HAL_ADC_ConfigChannel+0x2fc>
 80003c8:	2301      	movs	r3, #1
 80003ca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80003ce:	6800      	ldr	r0, [r0, #0]
 80003d0:	f7ff ff19 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
 80003d4:	2800      	cmp	r0, #0
 80003d6:	f040 8165 	bne.w	80006a4 <HAL_ADC_ConfigChannel+0x2f0>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80003da:	684a      	ldr	r2, [r1, #4]
 80003dc:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 80003de:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80003e0:	0991      	lsrs	r1, r2, #6
 80003e2:	f001 010c 	and.w	r1, r1, #12
 80003e6:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80003ea:	f002 021f 	and.w	r2, r2, #31
 80003ee:	59ce      	ldr	r6, [r1, r7]
 80003f0:	f04f 0e1f 	mov.w	lr, #31
 80003f4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80003f8:	4093      	lsls	r3, r2
 80003fa:	fa0e f202 	lsl.w	r2, lr, r2
 80003fe:	ea26 0202 	bic.w	r2, r6, r2
 8000402:	4313      	orrs	r3, r2
 8000404:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000406:	f7ff fefe 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800040a:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	0712      	lsls	r2, r2, #28
 8000410:	f140 8150 	bpl.w	80006b4 <HAL_ADC_ConfigChannel+0x300>
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000414:	6828      	ldr	r0, [r5, #0]
 8000416:	f7ff fef2 	bl	80001fe <LL_ADC_IsEnabled>
 800041a:	2800      	cmp	r0, #0
 800041c:	d06d      	beq.n	80004fa <HAL_ADC_ConfigChannel+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800041e:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000420:	2300      	movs	r3, #0
 8000422:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 8000426:	b003      	add	sp, #12
 8000428:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800042a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800042c:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800042e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8000432:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8000436:	2e00      	cmp	r6, #0
 8000438:	d13e      	bne.n	80004b8 <HAL_ADC_ConfigChannel+0x104>
 800043a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800043e:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8000440:	bf02      	ittt	eq
 8000442:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000444:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000448:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800044a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800044c:	6822      	ldr	r2, [r4, #0]
 800044e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8000450:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8000454:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8000458:	f100 010c 	add.w	r1, r0, #12
 800045c:	bb8f      	cbnz	r7, 80004c2 <HAL_ADC_ConfigChannel+0x10e>
 800045e:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8000462:	42be      	cmp	r6, r7
 8000464:	f040 8149 	bne.w	80006fa <HAL_ADC_ConfigChannel+0x346>
  MODIFY_REG(*preg,
 8000468:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800046a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800046e:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000470:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000472:	6883      	ldr	r3, [r0, #8]
 8000474:	6883      	ldr	r3, [r0, #8]
 8000476:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047a:	f100 0608 	add.w	r6, r0, #8
 800047e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000482:	bb57      	cbnz	r7, 80004da <HAL_ADC_ConfigChannel+0x126>
 8000484:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000488:	429a      	cmp	r2, r3
 800048a:	f040 813d 	bne.w	8000708 <HAL_ADC_ConfigChannel+0x354>
  MODIFY_REG(*preg,
 800048e:	6833      	ldr	r3, [r6, #0]
 8000490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000494:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000496:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000498:	6823      	ldr	r3, [r4, #0]
 800049a:	68c2      	ldr	r2, [r0, #12]
 800049c:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80004a0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80004a4:	bb20      	cbnz	r0, 80004f0 <HAL_ADC_ConfigChannel+0x13c>
 80004a6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80004aa:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80004ac:	bf02      	ittt	eq
 80004ae:	680b      	ldreq	r3, [r1, #0]
 80004b0:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80004b4:	600b      	streq	r3, [r1, #0]
 80004b6:	e7ad      	b.n	8000414 <HAL_ADC_ConfigChannel+0x60>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004b8:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	e7bd      	b.n	800043e <HAL_ADC_ConfigChannel+0x8a>
 80004c2:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004c6:	fab7 f787 	clz	r7, r7
 80004ca:	42be      	cmp	r6, r7
 80004cc:	d0cc      	beq.n	8000468 <HAL_ADC_ConfigChannel+0xb4>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004ce:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80004d2:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80004d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004d6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80004da:	fa92 f2a2 	rbit	r2, r2
 80004de:	fab2 f282 	clz	r2, r2
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d0d3      	beq.n	800048e <HAL_ADC_ConfigChannel+0xda>
 80004e6:	68c3      	ldr	r3, [r0, #12]
 80004e8:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80004f0:	fa93 f3a3 	rbit	r3, r3
 80004f4:	fab3 f383 	clz	r3, r3
 80004f8:	e7d7      	b.n	80004aa <HAL_ADC_ConfigChannel+0xf6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80004fa:	68e6      	ldr	r6, [r4, #12]
 80004fc:	6828      	ldr	r0, [r5, #0]
 80004fe:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000500:	4a84      	ldr	r2, [pc, #528]	; (8000714 <HAL_ADC_ConfigChannel+0x360>)
 8000502:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8000506:	f006 0e18 	and.w	lr, r6, #24
 800050a:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800050e:	fa22 f20e 	lsr.w	r2, r2, lr
 8000512:	401a      	ands	r2, r3
 8000514:	ea21 0107 	bic.w	r1, r1, r7
 8000518:	430a      	orrs	r2, r1
 800051a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800051e:	4a7e      	ldr	r2, [pc, #504]	; (8000718 <HAL_ADC_ConfigChannel+0x364>)
 8000520:	4296      	cmp	r6, r2
 8000522:	d148      	bne.n	80005b6 <HAL_ADC_ConfigChannel+0x202>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)), sConfig->SamplingTime);
 8000524:	b9df      	cbnz	r7, 800055e <HAL_ADC_ConfigChannel+0x1aa>
 8000526:	0e9e      	lsrs	r6, r3, #26
 8000528:	3601      	adds	r6, #1
 800052a:	f006 021f 	and.w	r2, r6, #31
 800052e:	2a09      	cmp	r2, #9
 8000530:	f04f 0101 	mov.w	r1, #1
 8000534:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000538:	d92b      	bls.n	8000592 <HAL_ADC_ConfigChannel+0x1de>
 800053a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800053e:	4091      	lsls	r1, r2
 8000540:	ea41 0206 	orr.w	r2, r1, r6
 8000544:	2f00      	cmp	r7, #0
 8000546:	d17c      	bne.n	8000642 <HAL_ADC_ConfigChannel+0x28e>
 8000548:	0e9b      	lsrs	r3, r3, #26
 800054a:	3301      	adds	r3, #1
 800054c:	f003 031f 	and.w	r3, r3, #31
 8000550:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000554:	391e      	subs	r1, #30
 8000556:	0509      	lsls	r1, r1, #20
 8000558:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800055c:	e027      	b.n	80005ae <HAL_ADC_ConfigChannel+0x1fa>
 800055e:	fa93 f2a3 	rbit	r2, r3
 8000562:	fab2 f282 	clz	r2, r2
 8000566:	3201      	adds	r2, #1
 8000568:	f002 021f 	and.w	r2, r2, #31
 800056c:	2a09      	cmp	r2, #9
 800056e:	d952      	bls.n	8000616 <HAL_ADC_ConfigChannel+0x262>
 8000570:	fa93 f2a3 	rbit	r2, r3
 8000574:	fab2 f282 	clz	r2, r2
 8000578:	3201      	adds	r2, #1
 800057a:	0692      	lsls	r2, r2, #26
 800057c:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8000580:	fa93 f1a3 	rbit	r1, r3
 8000584:	fab1 f181 	clz	r1, r1
 8000588:	3101      	adds	r1, #1
 800058a:	f001 021f 	and.w	r2, r1, #31
 800058e:	2101      	movs	r1, #1
 8000590:	e7d5      	b.n	800053e <HAL_ADC_ConfigChannel+0x18a>
 8000592:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000596:	4091      	lsls	r1, r2
 8000598:	ea41 0206 	orr.w	r2, r1, r6
 800059c:	2f00      	cmp	r7, #0
 800059e:	d14b      	bne.n	8000638 <HAL_ADC_ConfigChannel+0x284>
 80005a0:	0e99      	lsrs	r1, r3, #26
 80005a2:	3101      	adds	r1, #1
 80005a4:	f001 011f 	and.w	r1, r1, #31
 80005a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80005ac:	0509      	lsls	r1, r1, #20
 80005ae:	4311      	orrs	r1, r2
 80005b0:	68a2      	ldr	r2, [r4, #8]
 80005b2:	f7ff fe13 	bl	80001dc <LL_ADC_SetChannelSamplingTime>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	4a58      	ldr	r2, [pc, #352]	; (800071c <HAL_ADC_ConfigChannel+0x368>)
 80005ba:	421a      	tst	r2, r3
 80005bc:	f43f af2f 	beq.w	800041e <HAL_ADC_ConfigChannel+0x6a>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80005c0:	4f57      	ldr	r7, [pc, #348]	; (8000720 <HAL_ADC_ConfigChannel+0x36c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80005c2:	4a58      	ldr	r2, [pc, #352]	; (8000724 <HAL_ADC_ConfigChannel+0x370>)
 80005c4:	4638      	mov	r0, r7
 80005c6:	6893      	ldr	r3, [r2, #8]
 80005c8:	f7ff fe19 	bl	80001fe <LL_ADC_IsEnabled>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d163      	bne.n	8000698 <HAL_ADC_ConfigChannel+0x2e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80005d0:	6821      	ldr	r1, [r4, #0]
 80005d2:	4855      	ldr	r0, [pc, #340]	; (8000728 <HAL_ADC_ConfigChannel+0x374>)
 80005d4:	4281      	cmp	r1, r0
 80005d6:	f003 76e0 	and.w	r6, r3, #29360128	; 0x1c00000
 80005da:	d137      	bne.n	800064c <HAL_ADC_ConfigChannel+0x298>
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	f53f af1e 	bmi.w	800041e <HAL_ADC_ConfigChannel+0x6a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80005e2:	682b      	ldr	r3, [r5, #0]
 80005e4:	42bb      	cmp	r3, r7
 80005e6:	f47f af1a 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80005ea:	6893      	ldr	r3, [r2, #8]
 80005ec:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80005f0:	4333      	orrs	r3, r6
 80005f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005f6:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80005f8:	4b4c      	ldr	r3, [pc, #304]	; (800072c <HAL_ADC_ConfigChannel+0x378>)
 80005fa:	4a4d      	ldr	r2, [pc, #308]	; (8000730 <HAL_ADC_ConfigChannel+0x37c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8000602:	230c      	movs	r3, #12
 8000604:	4353      	muls	r3, r2
                wait_loop_index--;
 8000606:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8000608:	9b01      	ldr	r3, [sp, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	f43f af07 	beq.w	800041e <HAL_ADC_ConfigChannel+0x6a>
                wait_loop_index--;
 8000610:	9b01      	ldr	r3, [sp, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	e7f7      	b.n	8000606 <HAL_ADC_ConfigChannel+0x252>
 8000616:	fa93 f6a3 	rbit	r6, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)), sConfig->SamplingTime);
 800061a:	fab6 f686 	clz	r6, r6
 800061e:	3601      	adds	r6, #1
 8000620:	06b6      	lsls	r6, r6, #26
 8000622:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000626:	fa93 f1a3 	rbit	r1, r3
 800062a:	fab1 f181 	clz	r1, r1
 800062e:	3101      	adds	r1, #1
 8000630:	f001 021f 	and.w	r2, r1, #31
 8000634:	2101      	movs	r1, #1
 8000636:	e7ae      	b.n	8000596 <HAL_ADC_ConfigChannel+0x1e2>
 8000638:	fa93 f1a3 	rbit	r1, r3
 800063c:	fab1 f181 	clz	r1, r1
 8000640:	e7af      	b.n	80005a2 <HAL_ADC_ConfigChannel+0x1ee>
 8000642:	fa93 f3a3 	rbit	r3, r3
 8000646:	fab3 f383 	clz	r3, r3
 800064a:	e77e      	b.n	800054a <HAL_ADC_ConfigChannel+0x196>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800064c:	4839      	ldr	r0, [pc, #228]	; (8000734 <HAL_ADC_ConfigChannel+0x380>)
 800064e:	4281      	cmp	r1, r0
 8000650:	d10f      	bne.n	8000672 <HAL_ADC_ConfigChannel+0x2be>
 8000652:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 8000656:	f47f aee2 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	42bb      	cmp	r3, r7
 800065e:	f47f aede 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
 8000662:	6893      	ldr	r3, [r2, #8]
 8000664:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000668:	4333      	orrs	r3, r6
 800066a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800066e:	6093      	str	r3, [r2, #8]
 8000670:	e6d6      	b.n	8000420 <HAL_ADC_ConfigChannel+0x6c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000672:	4831      	ldr	r0, [pc, #196]	; (8000738 <HAL_ADC_ConfigChannel+0x384>)
 8000674:	4281      	cmp	r1, r0
 8000676:	f47f aed2 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
 800067a:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 800067e:	f47f aece 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000682:	682b      	ldr	r3, [r5, #0]
 8000684:	42bb      	cmp	r3, r7
 8000686:	f47f aeca 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
 800068a:	6893      	ldr	r3, [r2, #8]
 800068c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000690:	4333      	orrs	r3, r6
 8000692:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000696:	e7ea      	b.n	800066e <HAL_ADC_ConfigChannel+0x2ba>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000698:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800069a:	f043 0320 	orr.w	r3, r3, #32
 800069e:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80006a0:	2001      	movs	r0, #1
 80006a2:	e6bd      	b.n	8000420 <HAL_ADC_ConfigChannel+0x6c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006a4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80006a6:	f042 0220 	orr.w	r2, r2, #32
 80006aa:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6b7      	b.n	8000420 <HAL_ADC_ConfigChannel+0x6c>
  __HAL_LOCK(hadc);
 80006b0:	2002      	movs	r0, #2
 80006b2:	e6b8      	b.n	8000426 <HAL_ADC_ConfigChannel+0x72>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80006b4:	2800      	cmp	r0, #0
 80006b6:	f47f aead 	bne.w	8000414 <HAL_ADC_ConfigChannel+0x60>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80006ba:	4618      	mov	r0, r3
 80006bc:	68a2      	ldr	r2, [r4, #8]
 80006be:	6821      	ldr	r1, [r4, #0]
 80006c0:	f7ff fd8c 	bl	80001dc <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80006c4:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80006c6:	682b      	ldr	r3, [r5, #0]
 80006c8:	6822      	ldr	r2, [r4, #0]
 80006ca:	68d9      	ldr	r1, [r3, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80006cc:	2e04      	cmp	r6, #4
 80006ce:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80006d2:	f43f aeaa 	beq.w	800042a <HAL_ADC_ConfigChannel+0x76>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80006d6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 80006da:	0059      	lsls	r1, r3, #1
 80006dc:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 80006de:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80006e2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80006e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006ea:	408b      	lsls	r3, r1
 80006ec:	4313      	orrs	r3, r2
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <HAL_ADC_ConfigChannel+0x388>)
 80006f0:	403a      	ands	r2, r7
 80006f2:	4313      	orrs	r3, r2
 80006f4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 80006f8:	e68c      	b.n	8000414 <HAL_ADC_ConfigChannel+0x60>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006fa:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80006fe:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8000700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000702:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000706:	e6bd      	b.n	8000484 <HAL_ADC_ConfigChannel+0xd0>
 8000708:	68c3      	ldr	r3, [r0, #12]
 800070a:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000712:	e6c8      	b.n	80004a6 <HAL_ADC_ConfigChannel+0xf2>
 8000714:	0007ffff 	.word	0x0007ffff
 8000718:	407f0000 	.word	0x407f0000
 800071c:	80080000 	.word	0x80080000
 8000720:	50040000 	.word	0x50040000
 8000724:	50040300 	.word	0x50040300
 8000728:	c7520000 	.word	0xc7520000
 800072c:	20000010 	.word	0x20000010
 8000730:	00030d40 	.word	0x00030d40
 8000734:	cb840000 	.word	0xcb840000
 8000738:	80000001 	.word	0x80000001
 800073c:	03fff000 	.word	0x03fff000

08000740 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000742:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000744:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	0c1b      	lsrs	r3, r3, #16
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000750:	0200      	lsls	r0, r0, #8
 8000752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000756:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800075a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800075c:	60d3      	str	r3, [r2, #12]
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	68dc      	ldr	r4, [r3, #12]
 800076a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	2b04      	cmp	r3, #4
 8000776:	bf28      	it	cs
 8000778:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	f04f 0501 	mov.w	r5, #1
 8000780:	fa05 f303 	lsl.w	r3, r5, r3
 8000784:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000788:	bf8c      	ite	hi
 800078a:	3c03      	subhi	r4, #3
 800078c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078e:	4019      	ands	r1, r3
 8000790:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000792:	fa05 f404 	lsl.w	r4, r5, r4
 8000796:	3c01      	subs	r4, #1
 8000798:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800079a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	ea42 0201 	orr.w	r2, r2, r1
 80007a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	bfaf      	iteee	ge
 80007a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	f000 000f 	andlt.w	r0, r0, #15
 80007ae:	4b06      	ldrlt	r3, [pc, #24]	; (80007c8 <HAL_NVIC_SetPriority+0x64>)
 80007b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	bfa5      	ittet	ge
 80007b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80007b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80007c0:	bd30      	pop	{r4, r5, pc}
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00
 80007c8:	e000ed14 	.word	0xe000ed14

080007cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007cc:	0942      	lsrs	r2, r0, #5
 80007ce:	2301      	movs	r3, #1
 80007d0:	f000 001f 	and.w	r0, r0, #31
 80007d4:	fa03 f000 	lsl.w	r0, r3, r0
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <HAL_NVIC_EnableIRQ+0x14>)
 80007da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80007e8:	4a55      	ldr	r2, [pc, #340]	; (8000940 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ea:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 80007ee:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007f0:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f4:	fa38 f403 	lsrs.w	r4, r8, r3
 80007f8:	d101      	bne.n	80007fe <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 80007fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007fe:	2401      	movs	r4, #1
 8000800:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000804:	ea18 050a 	ands.w	r5, r8, sl
 8000808:	f000 808f 	beq.w	800092a <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080c:	684c      	ldr	r4, [r1, #4]
 800080e:	f024 0b10 	bic.w	fp, r4, #16
 8000812:	f1bb 0f02 	cmp.w	fp, #2
 8000816:	d111      	bne.n	800083c <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8000818:	08df      	lsrs	r7, r3, #3
 800081a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800081e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000822:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000824:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000828:	fa09 fc0e 	lsl.w	ip, r9, lr
 800082c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000830:	690e      	ldr	r6, [r1, #16]
 8000832:	fa06 f60e 	lsl.w	r6, r6, lr
 8000836:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 800083a:	623e      	str	r6, [r7, #32]
 800083c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000840:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000842:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000844:	fa07 f70c 	lsl.w	r7, r7, ip
 8000848:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800084a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800084e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000850:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000854:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000858:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085c:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000860:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000862:	d811      	bhi.n	8000888 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8000864:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000866:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800086a:	68ce      	ldr	r6, [r1, #12]
 800086c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000870:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000874:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000876:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000878:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800087c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000880:	409e      	lsls	r6, r3
 8000882:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000886:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000888:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800088a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800088c:	688e      	ldr	r6, [r1, #8]
 800088e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000892:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000894:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000896:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000898:	d547      	bpl.n	800092a <HAL_GPIO_Init+0x146>
 800089a:	f023 0703 	bic.w	r7, r3, #3
 800089e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80008a2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008a6:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80008aa:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008ac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008b0:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008b4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008b8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008bc:	d037      	beq.n	800092e <HAL_GPIO_Init+0x14a>
 80008be:	4e21      	ldr	r6, [pc, #132]	; (8000944 <HAL_GPIO_Init+0x160>)
 80008c0:	42b0      	cmp	r0, r6
 80008c2:	d036      	beq.n	8000932 <HAL_GPIO_Init+0x14e>
 80008c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008c8:	42b0      	cmp	r0, r6
 80008ca:	d034      	beq.n	8000936 <HAL_GPIO_Init+0x152>
 80008cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008d0:	42b0      	cmp	r0, r6
 80008d2:	d032      	beq.n	800093a <HAL_GPIO_Init+0x156>
 80008d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008d8:	42b0      	cmp	r0, r6
 80008da:	bf14      	ite	ne
 80008dc:	2607      	movne	r6, #7
 80008de:	2604      	moveq	r6, #4
 80008e0:	fa06 f60e 	lsl.w	r6, r6, lr
 80008e4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008e8:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80008ea:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80008ee:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80008f4:	bf0c      	ite	eq
 80008f6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80008f8:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 80008fa:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 80008fe:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000902:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000906:	bf0c      	ite	eq
 8000908:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800090a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800090c:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000910:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000912:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000916:	bf0c      	ite	eq
 8000918:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800091a:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800091c:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800091e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000920:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000922:	bf54      	ite	pl
 8000924:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000926:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000928:	6056      	str	r6, [r2, #4]
    position++;
 800092a:	3301      	adds	r3, #1
 800092c:	e762      	b.n	80007f4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800092e:	2600      	movs	r6, #0
 8000930:	e7d6      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 8000932:	2601      	movs	r6, #1
 8000934:	e7d4      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 8000936:	2602      	movs	r6, #2
 8000938:	e7d2      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 800093a:	2603      	movs	r6, #3
 800093c:	e7d0      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 800093e:	bf00      	nop
 8000940:	58000800 	.word	0x58000800
 8000944:	48000400 	.word	0x48000400

08000948 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000948:	b10a      	cbz	r2, 800094e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800094a:	6181      	str	r1, [r0, #24]
 800094c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800094e:	6281      	str	r1, [r0, #40]	; 0x28
 8000950:	4770      	bx	lr

08000952 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000952:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000954:	4604      	mov	r4, r0
{
 8000956:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000958:	2800      	cmp	r0, #0
 800095a:	d057      	beq.n	8000a0c <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800095c:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000960:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000964:	b91b      	cbnz	r3, 800096e <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000966:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800096a:	f002 fd57 	bl	800341c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800096e:	2303      	movs	r3, #3
 8000970:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000974:	6820      	ldr	r0, [r4, #0]
 8000976:	f001 fab9 	bl	8001eec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800097a:	2200      	movs	r2, #0
 800097c:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800097e:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000980:	4615      	mov	r5, r2
 8000982:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000984:	4298      	cmp	r0, r3
 8000986:	f102 0201 	add.w	r2, r2, #1
 800098a:	d820      	bhi.n	80009ce <HAL_PCD_Init+0x7c>
 800098c:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800098e:	4611      	mov	r1, r2
 8000990:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000992:	4298      	cmp	r0, r3
 8000994:	f102 0201 	add.w	r2, r2, #1
 8000998:	d828      	bhi.n	80009ec <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800099a:	f104 0610 	add.w	r6, r4, #16
 800099e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009a0:	466d      	mov	r5, sp
 80009a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a4:	6833      	ldr	r3, [r6, #0]
 80009a6:	602b      	str	r3, [r5, #0]
 80009a8:	1d23      	adds	r3, r4, #4
 80009aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	f001 faa7 	bl	8001f00 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80009b2:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80009b4:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80009b6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80009ba:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80009be:	69e3      	ldr	r3, [r4, #28]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d102      	bne.n	80009ca <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80009c4:	4620      	mov	r0, r4
 80009c6:	f000 f824 	bl	8000a12 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80009ca:	4628      	mov	r0, r5
 80009cc:	e01f      	b.n	8000a0e <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 80009ce:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 80009d2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80009d6:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 80009d8:	3302      	adds	r3, #2
 80009da:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 80009dc:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009e0:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80009e4:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009e6:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80009e8:	50e5      	str	r5, [r4, r3]
 80009ea:	e7ca      	b.n	8000982 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 80009ec:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 80009f0:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009f4:	330a      	adds	r3, #10
 80009f6:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 80009f8:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009fc:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a00:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a04:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a08:	50e1      	str	r1, [r4, r3]
 8000a0a:	e7c1      	b.n	8000990 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000a0c:	2001      	movs	r0, #1
}
 8000a0e:	b006      	add	sp, #24
 8000a10:	bd70      	pop	{r4, r5, r6, pc}

08000a12 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000a12:	6802      	ldr	r2, [r0, #0]
{
 8000a14:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000a16:	2101      	movs	r1, #1
 8000a18:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000a22:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000a2e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000a3c:	4770      	bx	lr
	...

08000a40 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <HAL_PWR_EnableBkUpAccess+0xc>)
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	4770      	bx	lr
 8000a4c:	58000400 	.word	0x58000400

08000a50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <HAL_PWREx_GetVoltageRange+0xc>)
 8000a52:	6818      	ldr	r0, [r3, #0]
}
 8000a54:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	58000400 	.word	0x58000400

08000a60 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a64:	6818      	ldr	r0, [r3, #0]
}
 8000a66:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000a6a:	4770      	bx	lr

08000a6c <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a70:	6818      	ldr	r0, [r3, #0]
}
 8000a72:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8000a76:	4770      	bx	lr

08000a78 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8000a80:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000a84:	4770      	bx	lr

08000a86 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8a:	6818      	ldr	r0, [r3, #0]
}
 8000a8c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000a90:	4770      	bx	lr

08000a92 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a9c:	4318      	orrs	r0, r3
 8000a9e:	6010      	str	r0, [r2, #0]
 8000aa0:	4770      	bx	lr

08000aa2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if(msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 8000aac:	28b0      	cmp	r0, #176	; 0xb0
 8000aae:	bf28      	it	cs
 8000ab0:	20b0      	movcs	r0, #176	; 0xb0
 8000ab2:	4770      	bx	lr

08000ab4 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ab8:	6853      	ldr	r3, [r2, #4]
 8000aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000abe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000ac2:	6050      	str	r0, [r2, #4]
 8000ac4:	4770      	bx	lr

08000ac6 <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aca:	6818      	ldr	r0, [r3, #0]
}
 8000acc:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000ad0:	4770      	bx	lr
	...

08000ad4 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 8000ad4:	28b0      	cmp	r0, #176	; 0xb0
 8000ad6:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000ad8:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8000ada:	bf98      	it	ls
 8000adc:	0900      	lsrls	r0, r0, #4
{
 8000ade:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8000ae0:	bf8c      	ite	hi
 8000ae2:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8000ae4:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000ae8:	4c2f      	ldr	r4, [pc, #188]	; (8000ba8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000aee:	b08d      	sub	sp, #52	; 0x34
 8000af0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000af4:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000af8:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8000b04:	fbb5 f5f3 	udiv	r5, r5, r3
 8000b08:	f7ff ffa2 	bl	8000a50 <HAL_PWREx_GetVoltageRange>
 8000b0c:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000b0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b12:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8000b16:	f104 0210 	add.w	r2, r4, #16
 8000b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b1c:	ab01      	add	r3, sp, #4
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000b1e:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8000b20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000b24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b28:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000b2c:	ac0c      	add	r4, sp, #48	; 0x30
 8000b2e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b32:	d11f      	bne.n	8000b74 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8000b34:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8000b36:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8000b3a:	4295      	cmp	r5, r2
 8000b3c:	d815      	bhi.n	8000b6a <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 8000b3e:	aa0c      	add	r2, sp, #48	; 0x30
 8000b40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000b44:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000b48:	4d19      	ldr	r5, [pc, #100]	; (8000bb0 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	f023 0307 	bic.w	r3, r3, #7
 8000b50:	4323      	orrs	r3, r4
 8000b52:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000b54:	f7ff fb36 	bl	80001c4 <HAL_GetTick>
 8000b58:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8000b5a:	682b      	ldr	r3, [r5, #0]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	429c      	cmp	r4, r3
 8000b62:	d116      	bne.n	8000b92 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000b64:	2000      	movs	r0, #0
}
 8000b66:	b00d      	add	sp, #52	; 0x34
 8000b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d1e2      	bne.n	8000b36 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8000b70:	2400      	movs	r4, #0
 8000b72:	e7e9      	b.n	8000b48 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000b74:	9b01      	ldr	r3, [sp, #4]
 8000b76:	429d      	cmp	r5, r3
 8000b78:	d907      	bls.n	8000b8a <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8000b7a:	9b02      	ldr	r3, [sp, #8]
 8000b7c:	429d      	cmp	r5, r3
 8000b7e:	d906      	bls.n	8000b8e <RCC_SetFlashLatencyFromMSIRange+0xba>
 8000b80:	9b03      	ldr	r3, [sp, #12]
 8000b82:	429d      	cmp	r5, r3
 8000b84:	d8f4      	bhi.n	8000b70 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8000b86:	2302      	movs	r3, #2
 8000b88:	e7d9      	b.n	8000b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e7d7      	b.n	8000b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e7d5      	b.n	8000b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8000b92:	f7ff fb17 	bl	80001c4 <HAL_GetTick>
 8000b96:	1b80      	subs	r0, r0, r6
 8000b98:	2802      	cmp	r0, #2
 8000b9a:	d9de      	bls.n	8000b5a <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	e7e2      	b.n	8000b66 <RCC_SetFlashLatencyFromMSIRange+0x92>
 8000ba0:	0800363c 	.word	0x0800363c
 8000ba4:	080035dc 	.word	0x080035dc
 8000ba8:	08003540 	.word	0x08003540
 8000bac:	000f4240 	.word	0x000f4240
 8000bb0:	58004000 	.word	0x58004000

08000bb4 <HAL_RCC_OscConfig>:
{
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(RCC_OscInitStruct == NULL)
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	b908      	cbnz	r0, 8000bbe <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000bba:	2001      	movs	r0, #1
 8000bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bbe:	6803      	ldr	r3, [r0, #0]
 8000bc0:	069d      	lsls	r5, r3, #26
 8000bc2:	d529      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bc8:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000bca:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000bcc:	f013 030c 	ands.w	r3, r3, #12
 8000bd0:	d005      	beq.n	8000bde <HAL_RCC_OscConfig+0x2a>
 8000bd2:	2b0c      	cmp	r3, #12
 8000bd4:	d145      	bne.n	8000c62 <HAL_RCC_OscConfig+0xae>
 8000bd6:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d141      	bne.n	8000c62 <HAL_RCC_OscConfig+0xae>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bde:	f7ff ff52 	bl	8000a86 <LL_RCC_MSI_IsReady>
 8000be2:	b110      	cbz	r0, 8000bea <HAL_RCC_OscConfig+0x36>
 8000be4:	69e3      	ldr	r3, [r4, #28]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0e7      	beq.n	8000bba <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bec:	f7ff ff59 	bl	8000aa2 <LL_RCC_MSI_GetRange>
 8000bf0:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bf4:	d92a      	bls.n	8000c4c <HAL_RCC_OscConfig+0x98>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bf6:	f7ff ff6d 	bl	8000ad4 <RCC_SetFlashLatencyFromMSIRange>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d1dd      	bne.n	8000bba <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c00:	f7ff ff47 	bl	8000a92 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c04:	6a20      	ldr	r0, [r4, #32]
 8000c06:	f7ff ff55 	bl	8000ab4 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();  
 8000c0a:	f002 fb2f 	bl	800326c <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f002 fab2 	bl	8003178 <HAL_InitTick>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d1d0      	bne.n	8000bba <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c18:	6823      	ldr	r3, [r4, #0]
 8000c1a:	07d8      	lsls	r0, r3, #31
 8000c1c:	d44e      	bmi.n	8000cbc <HAL_RCC_OscConfig+0x108>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	0799      	lsls	r1, r3, #30
 8000c22:	f100 8098 	bmi.w	8000d56 <HAL_RCC_OscConfig+0x1a2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	f013 0f18 	tst.w	r3, #24
 8000c2c:	f040 80d9 	bne.w	8000de2 <HAL_RCC_OscConfig+0x22e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	075a      	lsls	r2, r3, #29
 8000c34:	f100 8165 	bmi.w	8000f02 <HAL_RCC_OscConfig+0x34e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	065a      	lsls	r2, r3, #25
 8000c3c:	f100 81b7 	bmi.w	8000fae <HAL_RCC_OscConfig+0x3fa>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000c42:	2900      	cmp	r1, #0
 8000c44:	f040 81df 	bne.w	8001006 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 8000c48:	2000      	movs	r0, #0
 8000c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c4c:	f7ff ff21 	bl	8000a92 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c50:	6a20      	ldr	r0, [r4, #32]
 8000c52:	f7ff ff2f 	bl	8000ab4 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c58:	f7ff ff3c 	bl	8000ad4 <RCC_SetFlashLatencyFromMSIRange>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d0d4      	beq.n	8000c0a <HAL_RCC_OscConfig+0x56>
 8000c60:	e7ab      	b.n	8000bba <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c62:	69e2      	ldr	r2, [r4, #28]
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c68:	b1ba      	cbz	r2, 8000c9a <HAL_RCC_OscConfig+0xe6>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	f042 0201 	orr.w	r2, r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c72:	f7ff faa7 	bl	80001c4 <HAL_GetTick>
 8000c76:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8000c78:	f7ff ff05 	bl	8000a86 <LL_RCC_MSI_IsReady>
 8000c7c:	b130      	cbz	r0, 8000c8c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c80:	f7ff ff07 	bl	8000a92 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c84:	6a20      	ldr	r0, [r4, #32]
 8000c86:	f7ff ff15 	bl	8000ab4 <LL_RCC_MSI_SetCalibTrimming>
 8000c8a:	e7c5      	b.n	8000c18 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c8c:	f7ff fa9a 	bl	80001c4 <HAL_GetTick>
 8000c90:	1b40      	subs	r0, r0, r5
 8000c92:	2802      	cmp	r0, #2
 8000c94:	d9f0      	bls.n	8000c78 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8000c96:	2003      	movs	r0, #3
 8000c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	f022 0201 	bic.w	r2, r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fa8f 	bl	80001c4 <HAL_GetTick>
 8000ca6:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8000ca8:	f7ff feed 	bl	8000a86 <LL_RCC_MSI_IsReady>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d0b3      	beq.n	8000c18 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fa88 	bl	80001c4 <HAL_GetTick>
 8000cb4:	1b40      	subs	r0, r0, r5
 8000cb6:	2802      	cmp	r0, #2
 8000cb8:	d9f6      	bls.n	8000ca8 <HAL_RCC_OscConfig+0xf4>
 8000cba:	e7ec      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cc0:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000cc2:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cc4:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d005      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x124>
 8000ccc:	2b0c      	cmp	r3, #12
 8000cce:	d10b      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x134>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000cd0:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d107      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x134>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	f7ff fec2 	bl	8000a60 <LL_RCC_HSE_IsReady>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d09e      	beq.n	8000c1e <HAL_RCC_OscConfig+0x6a>
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d19b      	bne.n	8000c1e <HAL_RCC_OscConfig+0x6a>
 8000ce6:	e768      	b.n	8000bba <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce8:	6862      	ldr	r2, [r4, #4]
 8000cea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	d110      	bne.n	8000d16 <HAL_RCC_OscConfig+0x162>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cfc:	f7ff fa62 	bl	80001c4 <HAL_GetTick>
 8000d00:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8000d02:	f7ff fead 	bl	8000a60 <LL_RCC_HSE_IsReady>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d189      	bne.n	8000c1e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fa5b 	bl	80001c4 <HAL_GetTick>
 8000d0e:	1b40      	subs	r0, r0, r5
 8000d10:	2864      	cmp	r0, #100	; 0x64
 8000d12:	d9f6      	bls.n	8000d02 <HAL_RCC_OscConfig+0x14e>
 8000d14:	e7bf      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000d1a:	d104      	bne.n	8000d26 <HAL_RCC_OscConfig+0x172>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e7e6      	b.n	8000cf4 <HAL_RCC_OscConfig+0x140>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000d2c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000d2e:	6819      	ldr	r1, [r3, #0]
 8000d30:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000d34:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d1e0      	bne.n	8000cfc <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8000d3a:	f7ff fa43 	bl	80001c4 <HAL_GetTick>
 8000d3e:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8000d40:	f7ff fe8e 	bl	8000a60 <LL_RCC_HSE_IsReady>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f43f af6a 	beq.w	8000c1e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4a:	f7ff fa3b 	bl	80001c4 <HAL_GetTick>
 8000d4e:	1b40      	subs	r0, r0, r5
 8000d50:	2864      	cmp	r0, #100	; 0x64
 8000d52:	d9f5      	bls.n	8000d40 <HAL_RCC_OscConfig+0x18c>
 8000d54:	e79f      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d5a:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000d5c:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d5e:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d005      	beq.n	8000d72 <HAL_RCC_OscConfig+0x1be>
 8000d66:	2b0c      	cmp	r3, #12
 8000d68:	d114      	bne.n	8000d94 <HAL_RCC_OscConfig+0x1e0>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000d6a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d110      	bne.n	8000d94 <HAL_RCC_OscConfig+0x1e0>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d72:	f7ff fe7b 	bl	8000a6c <LL_RCC_HSI_IsReady>
 8000d76:	b118      	cbz	r0, 8000d80 <HAL_RCC_OscConfig+0x1cc>
 8000d78:	68e3      	ldr	r3, [r4, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f43f af1d 	beq.w	8000bba <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d84:	6921      	ldr	r1, [r4, #16]
 8000d86:	6853      	ldr	r3, [r2, #4]
 8000d88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000d8c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000d90:	6053      	str	r3, [r2, #4]
 8000d92:	e748      	b.n	8000c26 <HAL_RCC_OscConfig+0x72>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d94:	68e2      	ldr	r2, [r4, #12]
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9a:	b182      	cbz	r2, 8000dbe <HAL_RCC_OscConfig+0x20a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000da2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000da4:	f7ff fa0e 	bl	80001c4 <HAL_GetTick>
 8000da8:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8000daa:	f7ff fe5f 	bl	8000a6c <LL_RCC_HSI_IsReady>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d1e6      	bne.n	8000d80 <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db2:	f7ff fa07 	bl	80001c4 <HAL_GetTick>
 8000db6:	1b40      	subs	r0, r0, r5
 8000db8:	2802      	cmp	r0, #2
 8000dba:	d9f6      	bls.n	8000daa <HAL_RCC_OscConfig+0x1f6>
 8000dbc:	e76b      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc6:	f7ff f9fd 	bl	80001c4 <HAL_GetTick>
 8000dca:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8000dcc:	f7ff fe4e 	bl	8000a6c <LL_RCC_HSI_IsReady>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	f43f af28 	beq.w	8000c26 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd6:	f7ff f9f5 	bl	80001c4 <HAL_GetTick>
 8000dda:	1b40      	subs	r0, r0, r5
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d9f5      	bls.n	8000dcc <HAL_RCC_OscConfig+0x218>
 8000de0:	e759      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de2:	6962      	ldr	r2, [r4, #20]
 8000de4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d06b      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x310>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8000dec:	06db      	lsls	r3, r3, #27
 8000dee:	d543      	bpl.n	8000e78 <HAL_RCC_OscConfig+0x2c4>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8000df0:	f7ff fe42 	bl	8000a78 <LL_RCC_LSI1_IsReady>
 8000df4:	b310      	cbz	r0, 8000e3c <HAL_RCC_OscConfig+0x288>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000df6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000dfa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000e06:	f7ff f9dd 	bl	80001c4 <HAL_GetTick>
 8000e0a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000e0c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000e10:	071f      	lsls	r7, r3, #28
 8000e12:	f140 8178 	bpl.w	8001106 <HAL_RCC_OscConfig+0x552>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000e16:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000e1a:	69a2      	ldr	r2, [r4, #24]
 8000e1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e24:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e28:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000e34:	f7ff f9c6 	bl	80001c4 <HAL_GetTick>
 8000e38:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000e3a:	e018      	b.n	8000e6e <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e3c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8000e48:	f7ff f9bc 	bl	80001c4 <HAL_GetTick>
 8000e4c:	4605      	mov	r5, r0
          while(LL_RCC_LSI1_IsReady() == 0U)
 8000e4e:	f7ff fe13 	bl	8000a78 <LL_RCC_LSI1_IsReady>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d1cf      	bne.n	8000df6 <HAL_RCC_OscConfig+0x242>
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000e56:	f7ff f9b5 	bl	80001c4 <HAL_GetTick>
 8000e5a:	1b40      	subs	r0, r0, r5
 8000e5c:	2802      	cmp	r0, #2
 8000e5e:	d9f6      	bls.n	8000e4e <HAL_RCC_OscConfig+0x29a>
 8000e60:	e719      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000e62:	f7ff f9af 	bl	80001c4 <HAL_GetTick>
 8000e66:	1b40      	subs	r0, r0, r5
 8000e68:	2802      	cmp	r0, #2
 8000e6a:	f63f af14 	bhi.w	8000c96 <HAL_RCC_OscConfig+0xe2>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000e6e:	f7ff fe03 	bl	8000a78 <LL_RCC_LSI1_IsReady>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d1f5      	bne.n	8000e62 <HAL_RCC_OscConfig+0x2ae>
 8000e76:	e6db      	b.n	8000c30 <HAL_RCC_OscConfig+0x7c>
 8000e78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000e84:	f7ff f99e 	bl	80001c4 <HAL_GetTick>
 8000e88:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8000e8a:	f7ff fdf5 	bl	8000a78 <LL_RCC_LSI1_IsReady>
 8000e8e:	b198      	cbz	r0, 8000eb8 <HAL_RCC_OscConfig+0x304>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000e94:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e96:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000e9a:	f022 0204 	bic.w	r2, r2, #4
 8000e9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ea2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000ea6:	0718      	lsls	r0, r3, #28
 8000ea8:	f57f aec2 	bpl.w	8000c30 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000eac:	f7ff f98a 	bl	80001c4 <HAL_GetTick>
 8000eb0:	1b80      	subs	r0, r0, r6
 8000eb2:	2803      	cmp	r0, #3
 8000eb4:	d9f5      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x2ee>
 8000eb6:	e6ee      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000eb8:	f7ff f984 	bl	80001c4 <HAL_GetTick>
 8000ebc:	1b80      	subs	r0, r0, r6
 8000ebe:	2802      	cmp	r0, #2
 8000ec0:	d9e3      	bls.n	8000e8a <HAL_RCC_OscConfig+0x2d6>
 8000ec2:	e6e8      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000ec4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000ed0:	f7ff f978 	bl	80001c4 <HAL_GetTick>
 8000ed4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ed6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000eda:	0719      	lsls	r1, r3, #28
 8000edc:	f140 811a 	bpl.w	8001114 <HAL_RCC_OscConfig+0x560>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000ee0:	f7ff f970 	bl	80001c4 <HAL_GetTick>
 8000ee4:	1b80      	subs	r0, r0, r6
 8000ee6:	2803      	cmp	r0, #3
 8000ee8:	d9f5      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x322>
 8000eea:	e6d4      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000eec:	f7ff f96a 	bl	80001c4 <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	2802      	cmp	r0, #2
 8000ef4:	f63f aecf 	bhi.w	8000c96 <HAL_RCC_OscConfig+0xe2>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8000ef8:	f7ff fdbe 	bl	8000a78 <LL_RCC_LSI1_IsReady>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d1f5      	bne.n	8000eec <HAL_RCC_OscConfig+0x338>
 8000f00:	e696      	b.n	8000c30 <HAL_RCC_OscConfig+0x7c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f02:	4d89      	ldr	r5, [pc, #548]	; (8001128 <HAL_RCC_OscConfig+0x574>)
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	d51c      	bpl.n	8000f44 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0a:	68a3      	ldr	r3, [r4, #8]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000f12:	d125      	bne.n	8000f60 <HAL_RCC_OscConfig+0x3ac>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f14:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000f20:	f7ff f950 	bl	80001c4 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f24:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8000f28:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f241 3588 	movw	r5, #5000	; 0x1388
 8000f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f32:	0798      	lsls	r0, r3, #30
 8000f34:	f53f ae80 	bmi.w	8000c38 <HAL_RCC_OscConfig+0x84>
 8000f38:	f7ff f944 	bl	80001c4 <HAL_GetTick>
 8000f3c:	1b80      	subs	r0, r0, r6
 8000f3e:	42a8      	cmp	r0, r5
 8000f40:	d9f5      	bls.n	8000f2e <HAL_RCC_OscConfig+0x37a>
 8000f42:	e6a8      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
      HAL_PWR_EnableBkUpAccess();
 8000f44:	f7ff fd7c 	bl	8000a40 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8000f48:	f7ff f93c 	bl	80001c4 <HAL_GetTick>
 8000f4c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f4e:	682b      	ldr	r3, [r5, #0]
 8000f50:	05df      	lsls	r7, r3, #23
 8000f52:	d4da      	bmi.n	8000f0a <HAL_RCC_OscConfig+0x356>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f54:	f7ff f936 	bl	80001c4 <HAL_GetTick>
 8000f58:	1b80      	subs	r0, r0, r6
 8000f5a:	2802      	cmp	r0, #2
 8000f5c:	d9f7      	bls.n	8000f4e <HAL_RCC_OscConfig+0x39a>
 8000f5e:	e69a      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f64:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000f70:	e7d0      	b.n	8000f14 <HAL_RCC_OscConfig+0x360>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f72:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f7e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000f82:	f022 0204 	bic.w	r2, r2, #4
 8000f86:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1c8      	bne.n	8000f20 <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 8000f8e:	f7ff f919 	bl	80001c4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f96:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f98:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000f9c:	0799      	lsls	r1, r3, #30
 8000f9e:	f57f ae4b 	bpl.w	8000c38 <HAL_RCC_OscConfig+0x84>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff f90f 	bl	80001c4 <HAL_GetTick>
 8000fa6:	1bc0      	subs	r0, r0, r7
 8000fa8:	42b0      	cmp	r0, r6
 8000faa:	d9f5      	bls.n	8000f98 <HAL_RCC_OscConfig+0x3e4>
 8000fac:	e673      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fb0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000fb4:	b19b      	cbz	r3, 8000fde <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000fb6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000fc2:	f7ff f8ff 	bl	80001c4 <HAL_GetTick>
 8000fc6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000fc8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000fcc:	079a      	lsls	r2, r3, #30
 8000fce:	f53f ae37 	bmi.w	8000c40 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fd2:	f7ff f8f7 	bl	80001c4 <HAL_GetTick>
 8000fd6:	1b80      	subs	r0, r0, r6
 8000fd8:	2802      	cmp	r0, #2
 8000fda:	d9f5      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x414>
 8000fdc:	e65b      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000fde:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000fea:	f7ff f8eb 	bl	80001c4 <HAL_GetTick>
 8000fee:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000ff0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000ff4:	079b      	lsls	r3, r3, #30
 8000ff6:	f57f ae23 	bpl.w	8000c40 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ffa:	f7ff f8e3 	bl	80001c4 <HAL_GetTick>
 8000ffe:	1b80      	subs	r0, r0, r6
 8001000:	2802      	cmp	r0, #2
 8001002:	d9f5      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x43c>
 8001004:	e647      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001010:	2a0c      	cmp	r2, #12
 8001012:	d052      	beq.n	80010ba <HAL_RCC_OscConfig+0x506>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001014:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001016:	2902      	cmp	r1, #2
 8001018:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	d134      	bne.n	800108a <HAL_RCC_OscConfig+0x4d6>
        tickstart = HAL_GetTick();
 8001020:	f7ff f8d0 	bl	80001c4 <HAL_GetTick>
 8001024:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001026:	f7ff fd4e 	bl	8000ac6 <LL_RCC_PLL_IsReady>
 800102a:	bb40      	cbnz	r0, 800107e <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800102c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001032:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001034:	68d0      	ldr	r0, [r2, #12]
 8001036:	430b      	orrs	r3, r1
 8001038:	493c      	ldr	r1, [pc, #240]	; (800112c <HAL_RCC_OscConfig+0x578>)
 800103a:	4001      	ands	r1, r0
 800103c:	430b      	orrs	r3, r1
 800103e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001040:	430b      	orrs	r3, r1
 8001042:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001044:	430b      	orrs	r3, r1
 8001046:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001048:	430b      	orrs	r3, r1
 800104a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800104c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001050:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001058:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800105a:	68d3      	ldr	r3, [r2, #12]
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001062:	f7ff f8af 	bl	80001c4 <HAL_GetTick>
 8001066:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8001068:	f7ff fd2d 	bl	8000ac6 <LL_RCC_PLL_IsReady>
 800106c:	2800      	cmp	r0, #0
 800106e:	f47f adeb 	bne.w	8000c48 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff f8a7 	bl	80001c4 <HAL_GetTick>
 8001076:	1b00      	subs	r0, r0, r4
 8001078:	2802      	cmp	r0, #2
 800107a:	d9f5      	bls.n	8001068 <HAL_RCC_OscConfig+0x4b4>
 800107c:	e60b      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff f8a1 	bl	80001c4 <HAL_GetTick>
 8001082:	1b40      	subs	r0, r0, r5
 8001084:	2802      	cmp	r0, #2
 8001086:	d9ce      	bls.n	8001026 <HAL_RCC_OscConfig+0x472>
 8001088:	e605      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	f022 0203 	bic.w	r2, r2, #3
 8001090:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001098:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800109c:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800109e:	f7ff f891 	bl	80001c4 <HAL_GetTick>
 80010a2:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 80010a4:	f7ff fd0f 	bl	8000ac6 <LL_RCC_PLL_IsReady>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	f43f adcd 	beq.w	8000c48 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ae:	f7ff f889 	bl	80001c4 <HAL_GetTick>
 80010b2:	1b00      	subs	r0, r0, r4
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d9f5      	bls.n	80010a4 <HAL_RCC_OscConfig+0x4f0>
 80010b8:	e5ed      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
      uint32_t pllcfgr = RCC->PLLCFGR;
 80010ba:	68d8      	ldr	r0, [r3, #12]
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010be:	f000 0203 	and.w	r2, r0, #3
 80010c2:	429a      	cmp	r2, r3
 80010c4:	f47f ad79 	bne.w	8000bba <HAL_RCC_OscConfig+0x6>
 80010c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010ca:	f000 0370 	and.w	r3, r0, #112	; 0x70
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ce:	4293      	cmp	r3, r2
 80010d0:	f47f ad73 	bne.w	8000bba <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80010d6:	f3c0 2306 	ubfx	r3, r0, #8, #7
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010da:	4293      	cmp	r3, r2
 80010dc:	f47f ad6d 	bne.w	8000bba <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80010e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010e2:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f47f ad67 	bne.w	8000bba <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80010ee:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f47f ad61 	bne.w	8000bba <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80010f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80010fa:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 80010fe:	1ac0      	subs	r0, r0, r3
 8001100:	bf18      	it	ne
 8001102:	2001      	movne	r0, #1
 8001104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001106:	f7ff f85d 	bl	80001c4 <HAL_GetTick>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	2803      	cmp	r0, #3
 800110e:	f67f ae7d 	bls.w	8000e0c <HAL_RCC_OscConfig+0x258>
 8001112:	e5c0      	b.n	8000c96 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001114:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001120:	f7ff f850 	bl	80001c4 <HAL_GetTick>
 8001124:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001126:	e6e7      	b.n	8000ef8 <HAL_RCC_OscConfig+0x344>
 8001128:	58000400 	.word	0x58000400
 800112c:	11c1808c 	.word	0x11c1808c

08001130 <HAL_RCC_ClockConfig>:
{
 8001130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001134:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001136:	4604      	mov	r4, r0
 8001138:	b910      	cbnz	r0, 8001140 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800113a:	2001      	movs	r0, #1
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001140:	4e79      	ldr	r6, [pc, #484]	; (8001328 <HAL_RCC_ClockConfig+0x1f8>)
 8001142:	6833      	ldr	r3, [r6, #0]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	428b      	cmp	r3, r1
 800114a:	d372      	bcc.n	8001232 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	0799      	lsls	r1, r3, #30
 8001150:	d50e      	bpl.n	8001170 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001152:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001156:	68a2      	ldr	r2, [r4, #8]
 8001158:	68b3      	ldr	r3, [r6, #8]
 800115a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800115e:	4313      	orrs	r3, r2
 8001160:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001162:	f7ff f82f 	bl	80001c4 <HAL_GetTick>
 8001166:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001168:	68b3      	ldr	r3, [r6, #8]
 800116a:	03db      	lsls	r3, r3, #15
 800116c:	f140 80b8 	bpl.w	80012e0 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	069a      	lsls	r2, r3, #26
 8001174:	d511      	bpl.n	800119a <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001176:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800117a:	6962      	ldr	r2, [r4, #20]
 800117c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001184:	4313      	orrs	r3, r2
 8001186:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800118a:	f7ff f81b 	bl	80001c4 <HAL_GetTick>
 800118e:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001190:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001194:	0399      	lsls	r1, r3, #14
 8001196:	f140 80aa 	bpl.w	80012ee <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	0658      	lsls	r0, r3, #25
 800119e:	d512      	bpl.n	80011c6 <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80011a0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80011a4:	69a2      	ldr	r2, [r4, #24]
 80011a6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80011aa:	f023 030f 	bic.w	r3, r3, #15
 80011ae:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80011b2:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80011b6:	f7ff f805 	bl	80001c4 <HAL_GetTick>
 80011ba:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80011bc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80011c0:	03db      	lsls	r3, r3, #15
 80011c2:	f140 809b 	bpl.w	80012fc <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	075a      	lsls	r2, r3, #29
 80011ca:	d50e      	bpl.n	80011ea <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80011cc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80011d0:	68e2      	ldr	r2, [r4, #12]
 80011d2:	68b3      	ldr	r3, [r6, #8]
 80011d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011d8:	4313      	orrs	r3, r2
 80011da:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80011dc:	f7fe fff2 	bl	80001c4 <HAL_GetTick>
 80011e0:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80011e2:	68b3      	ldr	r3, [r6, #8]
 80011e4:	0399      	lsls	r1, r3, #14
 80011e6:	f140 8090 	bpl.w	800130a <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	0718      	lsls	r0, r3, #28
 80011ee:	d50f      	bpl.n	8001210 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80011f0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80011f4:	6922      	ldr	r2, [r4, #16]
 80011f6:	68b3      	ldr	r3, [r6, #8]
 80011f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001200:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001202:	f7fe ffdf 	bl	80001c4 <HAL_GetTick>
 8001206:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001208:	68b3      	ldr	r3, [r6, #8]
 800120a:	035b      	lsls	r3, r3, #13
 800120c:	f140 8084 	bpl.w	8001318 <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	07da      	lsls	r2, r3, #31
 8001214:	d423      	bmi.n	800125e <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001216:	4c44      	ldr	r4, [pc, #272]	; (8001328 <HAL_RCC_ClockConfig+0x1f8>)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	429d      	cmp	r5, r3
 8001220:	d34b      	bcc.n	80012ba <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 8001222:	f002 f823 	bl	800326c <SystemCoreClockUpdate>
  return HAL_InitTick (HAL_GetTickPrio());
 8001226:	f7fe ffd3 	bl	80001d0 <HAL_GetTickPrio>
}
 800122a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick (HAL_GetTickPrio());
 800122e:	f001 bfa3 	b.w	8003178 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	6833      	ldr	r3, [r6, #0]
 8001234:	f023 0307 	bic.w	r3, r3, #7
 8001238:	430b      	orrs	r3, r1
 800123a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800123c:	f7fe ffc2 	bl	80001c4 <HAL_GetTick>
 8001240:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	6833      	ldr	r3, [r6, #0]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	429d      	cmp	r5, r3
 800124a:	f43f af7f 	beq.w	800114c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800124e:	f7fe ffb9 	bl	80001c4 <HAL_GetTick>
 8001252:	1bc0      	subs	r0, r0, r7
 8001254:	2802      	cmp	r0, #2
 8001256:	d9f4      	bls.n	8001242 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8001258:	2003      	movs	r0, #3
 800125a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	6863      	ldr	r3, [r4, #4]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d11e      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 8001264:	f7ff fbfc 	bl	8000a60 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001268:	2800      	cmp	r0, #0
 800126a:	f43f af66 	beq.w	800113a <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800126e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001272:	6862      	ldr	r2, [r4, #4]
 8001274:	68b3      	ldr	r3, [r6, #8]
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	4313      	orrs	r3, r2
 800127c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800127e:	f7fe ffa1 	bl	80001c4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001282:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001286:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001288:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	6862      	ldr	r2, [r4, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001294:	d0bf      	beq.n	8001216 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001296:	f7fe ff95 	bl	80001c4 <HAL_GetTick>
 800129a:	1bc0      	subs	r0, r0, r7
 800129c:	4540      	cmp	r0, r8
 800129e:	d9f3      	bls.n	8001288 <HAL_RCC_ClockConfig+0x158>
 80012a0:	e7da      	b.n	8001258 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 80012a6:	f7ff fc0e 	bl	8000ac6 <LL_RCC_PLL_IsReady>
 80012aa:	e7dd      	b.n	8001268 <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012ac:	b913      	cbnz	r3, 80012b4 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 80012ae:	f7ff fbea 	bl	8000a86 <LL_RCC_MSI_IsReady>
 80012b2:	e7d9      	b.n	8001268 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 80012b4:	f7ff fbda 	bl	8000a6c <LL_RCC_HSI_IsReady>
 80012b8:	e7d6      	b.n	8001268 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	f023 0307 	bic.w	r3, r3, #7
 80012c0:	432b      	orrs	r3, r5
 80012c2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80012c4:	f7fe ff7e 	bl	80001c4 <HAL_GetTick>
 80012c8:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	429d      	cmp	r5, r3
 80012d2:	d0a6      	beq.n	8001222 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80012d4:	f7fe ff76 	bl	80001c4 <HAL_GetTick>
 80012d8:	1b80      	subs	r0, r0, r6
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9f5      	bls.n	80012ca <HAL_RCC_ClockConfig+0x19a>
 80012de:	e7bb      	b.n	8001258 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80012e0:	f7fe ff70 	bl	80001c4 <HAL_GetTick>
 80012e4:	1bc0      	subs	r0, r0, r7
 80012e6:	2802      	cmp	r0, #2
 80012e8:	f67f af3e 	bls.w	8001168 <HAL_RCC_ClockConfig+0x38>
 80012ec:	e7b4      	b.n	8001258 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80012ee:	f7fe ff69 	bl	80001c4 <HAL_GetTick>
 80012f2:	1bc0      	subs	r0, r0, r7
 80012f4:	2802      	cmp	r0, #2
 80012f6:	f67f af4b 	bls.w	8001190 <HAL_RCC_ClockConfig+0x60>
 80012fa:	e7ad      	b.n	8001258 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80012fc:	f7fe ff62 	bl	80001c4 <HAL_GetTick>
 8001300:	1bc0      	subs	r0, r0, r7
 8001302:	2802      	cmp	r0, #2
 8001304:	f67f af5a 	bls.w	80011bc <HAL_RCC_ClockConfig+0x8c>
 8001308:	e7a6      	b.n	8001258 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800130a:	f7fe ff5b 	bl	80001c4 <HAL_GetTick>
 800130e:	1bc0      	subs	r0, r0, r7
 8001310:	2802      	cmp	r0, #2
 8001312:	f67f af66 	bls.w	80011e2 <HAL_RCC_ClockConfig+0xb2>
 8001316:	e79f      	b.n	8001258 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001318:	f7fe ff54 	bl	80001c4 <HAL_GetTick>
 800131c:	1bc0      	subs	r0, r0, r7
 800131e:	2802      	cmp	r0, #2
 8001320:	f67f af72 	bls.w	8001208 <HAL_RCC_ClockConfig+0xd8>
 8001324:	e798      	b.n	8001258 <HAL_RCC_ClockConfig+0x128>
 8001326:	bf00      	nop
 8001328:	58004000 	.word	0x58004000

0800132c <HAL_RCC_GetSysClockFreq>:
 800132c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001330:	b508      	push	{r3, lr}
 8001332:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001334:	f013 030c 	ands.w	r3, r3, #12
 8001338:	d107      	bne.n	800134a <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800133a:	f7ff fbb2 	bl	8000aa2 <LL_RCC_MSI_GetRange>
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_RCC_GetSysClockFreq+0x90>)
 8001340:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001344:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001348:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134a:	2b04      	cmp	r3, #4
 800134c:	d033      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800134e:	2b08      	cmp	r3, #8
 8001350:	d107      	bne.n	8001362 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001352:	6813      	ldr	r3, [r2, #0]
       sysclockfreq = HSE_VALUE;
 8001354:	481a      	ldr	r0, [pc, #104]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001356:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800135c:	bf08      	it	eq
 800135e:	4618      	moveq	r0, r3
 8001360:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001362:	68d3      	ldr	r3, [r2, #12]
 8001364:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001368:	2b02      	cmp	r3, #2
 800136a:	d022      	beq.n	80013b2 <HAL_RCC_GetSysClockFreq+0x86>
 800136c:	2b03      	cmp	r3, #3
 800136e:	d118      	bne.n	80013a2 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001370:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = HSE_VALUE;
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001374:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800137a:	bf08      	it	eq
 800137c:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800137e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001382:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001384:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001386:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001388:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800138c:	4358      	muls	r0, r3
 800138e:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8001392:	3301      	adds	r3, #1
 8001394:	fbb0 f0f3 	udiv	r0, r0, r3
 8001398:	0f53      	lsrs	r3, r2, #29
 800139a:	3301      	adds	r3, #1
 800139c:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a0:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80013a2:	f7ff fb7e 	bl	8000aa2 <LL_RCC_MSI_GetRange>
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_RCC_GetSysClockFreq+0x90>)
 80013a8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80013ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013b0:	e7e5      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x94>)
 80013b4:	e7e3      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 80013b6:	4802      	ldr	r0, [pc, #8]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x94>)
}
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	0800363c 	.word	0x0800363c
 80013c0:	00f42400 	.word	0x00f42400
 80013c4:	01e84800 	.word	0x01e84800

080013c8 <HAL_RCC_GetHCLKFreq>:
{
 80013c8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80013ca:	f7ff ffaf 	bl	800132c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_RCC_GetHCLKFreq+0x1c>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80013de:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e2:	bd08      	pop	{r3, pc}
 80013e4:	080035dc 	.word	0x080035dc

080013e8 <HAL_RCC_GetPCLK2Freq>:
{
 80013e8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80013ea:	f7ff ffed 	bl	80013c8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	f003 031f 	and.w	r3, r3, #31
}
 8001402:	40d8      	lsrs	r0, r3
 8001404:	bd08      	pop	{r3, pc}
 8001406:	bf00      	nop
 8001408:	0800361c 	.word	0x0800361c

0800140c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800140c:	236f      	movs	r3, #111	; 0x6f
 800140e:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800141a:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8001422:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800142a:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8001432:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001434:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800143c:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800143e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8001446:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <HAL_RCC_GetClockConfig+0x48>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	600b      	str	r3, [r1, #0]
 8001452:	4770      	bx	lr
 8001454:	58004000 	.word	0x58004000

08001458 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8001460:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001464:	4770      	bx	lr

08001466 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800146a:	0902      	lsrs	r2, r0, #4
 800146c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001470:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8001474:	0100      	lsls	r0, r0, #4
 8001476:	ea23 0302 	bic.w	r3, r3, r2
 800147a:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800147e:	4318      	orrs	r0, r3
 8001480:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8001484:	4770      	bx	lr

08001486 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4770      	bx	lr

08001494 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4770      	bx	lr

080014a2 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a6:	6818      	ldr	r0, [r3, #0]
}
 80014a8:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80014ac:	4770      	bx	lr

080014ae <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80014b0:	6805      	ldr	r5, [r0, #0]
 80014b2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 80014b6:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80014b8:	d043      	beq.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80014ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80014bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c0:	d015      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x40>
 80014c2:	d802      	bhi.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80014c4:	b1d3      	cbz	r3, 80014fc <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80014c6:	2501      	movs	r5, #1
 80014c8:	e03b      	b.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 80014ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014ce:	d002      	beq.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80014d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80014d4:	d1f7      	bne.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80014d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80014dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014e4:	430b      	orrs	r3, r1
 80014e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80014ea:	2500      	movs	r5, #0
 80014ec:	e029      	b.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80014ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f2:	68d3      	ldr	r3, [r2, #12]
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	60d3      	str	r3, [r2, #12]
        break;
 80014fa:	e7ec      	b.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80014fc:	f7ff ffca 	bl	8001494 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001500:	f7fe fe60 	bl	80001c4 <HAL_GetTick>
 8001504:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001506:	f7ff ffcc 	bl	80014a2 <LL_RCC_PLLSAI1_IsReady>
 800150a:	b9a0      	cbnz	r0, 8001536 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800150c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001510:	6861      	ldr	r1, [r4, #4]
 8001512:	6913      	ldr	r3, [r2, #16]
 8001514:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001518:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800151c:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800151e:	6913      	ldr	r3, [r2, #16]
 8001520:	68a1      	ldr	r1, [r4, #8]
 8001522:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001526:	430b      	orrs	r3, r1
 8001528:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800152a:	f7ff ffac 	bl	8001486 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800152e:	f7fe fe49 	bl	80001c4 <HAL_GetTick>
 8001532:	4605      	mov	r5, r0
 8001534:	e0ba      	b.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001536:	f7fe fe45 	bl	80001c4 <HAL_GetTick>
 800153a:	1b40      	subs	r0, r0, r5
 800153c:	2802      	cmp	r0, #2
 800153e:	d9e2      	bls.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001540:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	051a      	lsls	r2, r3, #20
 8001546:	d515      	bpl.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001548:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 800154c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800154e:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8001552:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001556:	42bb      	cmp	r3, r7
 8001558:	d00c      	beq.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 800155a:	f7ff fa71 	bl	8000a40 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800155e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001562:	2f00      	cmp	r7, #0
 8001564:	f040 80ad 	bne.w	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8001568:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800156a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156e:	4313      	orrs	r3, r2
 8001570:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	07df      	lsls	r7, r3, #31
 8001578:	d509      	bpl.n	800158e <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800157a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157e:	69a0      	ldr	r0, [r4, #24]
 8001580:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001584:	f022 0203 	bic.w	r2, r2, #3
 8001588:	4302      	orrs	r2, r0
 800158a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800158e:	079e      	lsls	r6, r3, #30
 8001590:	d509      	bpl.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001596:	69e0      	ldr	r0, [r4, #28]
 8001598:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800159c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80015a0:	4302      	orrs	r2, r0
 80015a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80015a6:	06d8      	lsls	r0, r3, #27
 80015a8:	d50c      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80015aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80015ac:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80015b0:	0c31      	lsrs	r1, r6, #16
 80015b2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80015b6:	0409      	lsls	r1, r1, #16
 80015b8:	ea22 0201 	bic.w	r2, r2, r1
 80015bc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80015c0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80015c4:	0699      	lsls	r1, r3, #26
 80015c6:	d50c      	bpl.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80015c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ca:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80015ce:	0c31      	lsrs	r1, r6, #16
 80015d0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80015d4:	0409      	lsls	r1, r1, #16
 80015d6:	ea22 0201 	bic.w	r2, r2, r1
 80015da:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80015de:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015e2:	075a      	lsls	r2, r3, #29
 80015e4:	d502      	bpl.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015e6:	6a20      	ldr	r0, [r4, #32]
 80015e8:	f7ff ff3d 	bl	8001466 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	071b      	lsls	r3, r3, #28
 80015f0:	d502      	bpl.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80015f4:	f7ff ff37 	bl	8001466 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	05df      	lsls	r7, r3, #23
 80015fc:	d510      	bpl.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x172>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001604:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001608:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800160c:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800160e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001612:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001616:	d17d      	bne.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001618:	68d3      	ldr	r3, [r2, #12]
 800161a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161e:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	0596      	lsls	r6, r2, #22
 8001624:	d509      	bpl.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x18c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800162a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800162c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001630:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001634:	4303      	orrs	r3, r0
 8001636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800163a:	0550      	lsls	r0, r2, #21
 800163c:	d511      	bpl.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800163e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001642:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001644:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001648:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800164c:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800164e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001652:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001656:	f040 8094 	bne.w	8001782 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800165a:	68d3      	ldr	r3, [r2, #12]
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001662:	6822      	ldr	r2, [r4, #0]
 8001664:	04d1      	lsls	r1, r2, #19
 8001666:	d509      	bpl.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800166e:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001672:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001676:	4303      	orrs	r3, r0
 8001678:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800167c:	0493      	lsls	r3, r2, #18
 800167e:	d50d      	bpl.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001684:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001686:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001688:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800168c:	430b      	orrs	r3, r1
 800168e:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001690:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001692:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001694:	f023 0303 	bic.w	r3, r3, #3
 8001698:	430b      	orrs	r3, r1
 800169a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800169c:	4628      	mov	r0, r5
 800169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80016a0:	f7fe fd90 	bl	80001c4 <HAL_GetTick>
 80016a4:	1b40      	subs	r0, r0, r5
 80016a6:	2802      	cmp	r0, #2
 80016a8:	f63f af4a 	bhi.w	8001540 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80016ac:	f7ff fef9 	bl	80014a2 <LL_RCC_PLLSAI1_IsReady>
 80016b0:	2801      	cmp	r0, #1
 80016b2:	d1f5      	bne.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80016b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b8:	6961      	ldr	r1, [r4, #20]
 80016ba:	6913      	ldr	r3, [r2, #16]
 80016bc:	430b      	orrs	r3, r1
 80016be:	6113      	str	r3, [r2, #16]
 80016c0:	e709      	b.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80016c2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80016c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016ca:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80016ce:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80016d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016d6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80016da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016e0:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80016e2:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80016e6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80016ea:	07db      	lsls	r3, r3, #31
 80016ec:	f57f af42 	bpl.w	8001574 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 80016f0:	f7fe fd68 	bl	80001c4 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 80016f8:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 80016fa:	e004      	b.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x258>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7fe fd62 	bl	80001c4 <HAL_GetTick>
 8001700:	1bc0      	subs	r0, r0, r7
 8001702:	42b0      	cmp	r0, r6
 8001704:	d804      	bhi.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x262>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001706:	f7ff fea7 	bl	8001458 <LL_RCC_LSE_IsReady>
 800170a:	2801      	cmp	r0, #1
 800170c:	d1f6      	bne.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800170e:	e731      	b.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8001710:	2503      	movs	r5, #3
 8001712:	e72f      	b.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001714:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001718:	d182      	bne.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x172>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800171a:	f7ff febb 	bl	8001494 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800171e:	f7fe fd51 	bl	80001c4 <HAL_GetTick>
 8001722:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001724:	f7ff febd 	bl	80014a2 <LL_RCC_PLLSAI1_IsReady>
 8001728:	b9a0      	cbnz	r0, 8001754 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800172a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172e:	6861      	ldr	r1, [r4, #4]
 8001730:	6913      	ldr	r3, [r2, #16]
 8001732:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001736:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800173a:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800173c:	6913      	ldr	r3, [r2, #16]
 800173e:	68e1      	ldr	r1, [r4, #12]
 8001740:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8001744:	430b      	orrs	r3, r1
 8001746:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001748:	f7ff fe9d 	bl	8001486 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800174c:	f7fe fd3a 	bl	80001c4 <HAL_GetTick>
 8001750:	4606      	mov	r6, r0
 8001752:	e00b      	b.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x2be>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001754:	f7fe fd36 	bl	80001c4 <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	2802      	cmp	r0, #2
 800175c:	d9e2      	bls.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 800175e:	2503      	movs	r5, #3
 8001760:	e75e      	b.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x172>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001762:	f7fe fd2f 	bl	80001c4 <HAL_GetTick>
 8001766:	1b80      	subs	r0, r0, r6
 8001768:	2802      	cmp	r0, #2
 800176a:	d8f8      	bhi.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800176c:	f7ff fe99 	bl	80014a2 <LL_RCC_PLLSAI1_IsReady>
 8001770:	2801      	cmp	r0, #1
 8001772:	d1f6      	bne.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001778:	6961      	ldr	r1, [r4, #20]
 800177a:	6913      	ldr	r3, [r2, #16]
 800177c:	430b      	orrs	r3, r1
 800177e:	6113      	str	r3, [r2, #16]
 8001780:	e74e      	b.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x172>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001782:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8001786:	f47f af6c 	bne.w	8001662 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800178a:	f7ff fe83 	bl	8001494 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800178e:	f7fe fd19 	bl	80001c4 <HAL_GetTick>
 8001792:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001794:	f7ff fe85 	bl	80014a2 <LL_RCC_PLLSAI1_IsReady>
 8001798:	b9a0      	cbnz	r0, 80017c4 <HAL_RCCEx_PeriphCLKConfig+0x316>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800179a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800179e:	6861      	ldr	r1, [r4, #4]
 80017a0:	6913      	ldr	r3, [r2, #16]
 80017a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80017a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80017aa:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80017ac:	6913      	ldr	r3, [r2, #16]
 80017ae:	6921      	ldr	r1, [r4, #16]
 80017b0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80017b8:	f7ff fe65 	bl	8001486 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017bc:	f7fe fd02 	bl	80001c4 <HAL_GetTick>
 80017c0:	4606      	mov	r6, r0
 80017c2:	e00b      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x32e>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80017c4:	f7fe fcfe 	bl	80001c4 <HAL_GetTick>
 80017c8:	1b80      	subs	r0, r0, r6
 80017ca:	2802      	cmp	r0, #2
 80017cc:	d9e2      	bls.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
              ret = HAL_TIMEOUT;
 80017ce:	2503      	movs	r5, #3
 80017d0:	e747      	b.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80017d2:	f7fe fcf7 	bl	80001c4 <HAL_GetTick>
 80017d6:	1b80      	subs	r0, r0, r6
 80017d8:	2802      	cmp	r0, #2
 80017da:	d8f8      	bhi.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x320>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80017dc:	f7ff fe61 	bl	80014a2 <LL_RCC_PLLSAI1_IsReady>
 80017e0:	2801      	cmp	r0, #1
 80017e2:	d1f6      	bne.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x324>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80017e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e8:	6961      	ldr	r1, [r4, #20]
 80017ea:	6913      	ldr	r3, [r2, #16]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6113      	str	r3, [r2, #16]
 80017f0:	e737      	b.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

080017f2 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80017f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f6:	6813      	ldr	r3, [r2, #0]
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4770      	bx	lr

08001800 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8001800:	b538      	push	{r3, r4, r5, lr}
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8001802:	4604      	mov	r4, r0
 8001804:	2800      	cmp	r0, #0
 8001806:	d05b      	beq.n	80018c0 <HAL_SMBUS_Init+0xc0>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8001808:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800180a:	b91b      	cbnz	r3, 8001814 <HAL_SMBUS_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800180c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8001810:	f001 fac8 	bl	8002da4 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8001814:	2302      	movs	r3, #2
 8001816:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	6921      	ldr	r1, [r4, #16]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8001824:	6862      	ldr	r2, [r4, #4]
 8001826:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800182a:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001832:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800183a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800183c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800183e:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001846:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8001848:	68e2      	ldr	r2, [r4, #12]
 800184a:	2a00      	cmp	r2, #0
 800184c:	d032      	beq.n	80018b4 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800184e:	2901      	cmp	r1, #1
 8001850:	d12d      	bne.n	80018ae <HAL_SMBUS_Init+0xae>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8001852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001856:	609a      	str	r2, [r3, #8]
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001858:	685a      	ldr	r2, [r3, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 800185a:	69a1      	ldr	r1, [r4, #24]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 800185c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800185e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001860:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001868:	605a      	str	r2, [r3, #4]
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 800186a:	6962      	ldr	r2, [r4, #20]
 800186c:	430a      	orrs	r2, r1
 800186e:	69e1      	ldr	r1, [r4, #28]
 8001870:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001874:	60da      	str	r2, [r3, #12]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8001876:	6a22      	ldr	r2, [r4, #32]
 8001878:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800187a:	432a      	orrs	r2, r5
 800187c:	4302      	orrs	r2, r0
 800187e:	68a5      	ldr	r5, [r4, #8]
 8001880:	430a      	orrs	r2, r1
 8001882:	432a      	orrs	r2, r5

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 8001884:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8001888:	601a      	str	r2, [r3, #0]
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 800188a:	d106      	bne.n	800189a <HAL_SMBUS_Init+0x9a>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800188c:	f431 1200 	bics.w	r2, r1, #2097152	; 0x200000
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8001890:	bf02      	ittt	eq
 8001892:	681a      	ldreq	r2, [r3, #0]
 8001894:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8001898:	601a      	streq	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80018a2:	2000      	movs	r0, #0
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80018a4:	2301      	movs	r3, #1
  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80018a6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80018a8:	6423      	str	r3, [r4, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80018aa:	64a3      	str	r3, [r4, #72]	; 0x48

  return HAL_OK;
 80018ac:	bd38      	pop	{r3, r4, r5, pc}
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 80018ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018b2:	609a      	str	r2, [r3, #8]
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 80018b4:	2902      	cmp	r1, #2
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 80018b6:	bf04      	itt	eq
 80018b8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80018bc:	605a      	streq	r2, [r3, #4]
 80018be:	e7cb      	b.n	8001858 <HAL_SMBUS_Init+0x58>
    return HAL_ERROR;
 80018c0:	2001      	movs	r0, #1
}
 80018c2:	bd38      	pop	{r3, r4, r5, pc}

080018c4 <HAL_SMBUS_EnableAlert_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 80018c4:	6803      	ldr	r3, [r0, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018cc:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 80018ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d2:	61da      	str	r2, [r3, #28]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr

080018e0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80018e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018ea:	6842      	ldr	r2, [r0, #4]
 80018ec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80018f0:	d10a      	bne.n	8001908 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80018f2:	6882      	ldr	r2, [r0, #8]
 80018f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80018f8:	d002      	beq.n	8001900 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80018fe:	d103      	bne.n	8001908 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001908:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800190a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800190e:	d107      	bne.n	8001920 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800191e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001920:	2301      	movs	r3, #1
 8001922:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001926:	2300      	movs	r3, #0
 8001928:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800192c:	2003      	movs	r0, #3
 800192e:	4770      	bx	lr

08001930 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	4604      	mov	r4, r0
 8001934:	460d      	mov	r5, r1
 8001936:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	6898      	ldr	r0, [r3, #8]
 800193c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001940:	d100      	bne.n	8001944 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8001942:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001944:	1c6a      	adds	r2, r5, #1
 8001946:	d0f8      	beq.n	800193a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001948:	f7fe fc3c 	bl	80001c4 <HAL_GetTick>
 800194c:	1b80      	subs	r0, r0, r6
 800194e:	4285      	cmp	r5, r0
 8001950:	d8f2      	bhi.n	8001938 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001952:	4620      	mov	r0, r4
}
 8001954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001958:	f7ff bfc2 	b.w	80018e0 <SPI_WaitFifoStateUntilTimeout.part.1>

0800195c <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	4605      	mov	r5, r0
 8001960:	460c      	mov	r4, r1
 8001962:	4616      	mov	r6, r2
 8001964:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001966:	6829      	ldr	r1, [r5, #0]
 8001968:	6888      	ldr	r0, [r1, #8]
 800196a:	4020      	ands	r0, r4
 800196c:	d100      	bne.n	8001970 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 800196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001970:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001974:	bf08      	it	eq
 8001976:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001978:	1c73      	adds	r3, r6, #1
 800197a:	d0f5      	beq.n	8001968 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800197c:	f7fe fc22 	bl	80001c4 <HAL_GetTick>
 8001980:	1bc0      	subs	r0, r0, r7
 8001982:	4286      	cmp	r6, r0
 8001984:	d8ef      	bhi.n	8001966 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001986:	4628      	mov	r0, r5
}
 8001988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800198c:	f7ff bfa8 	b.w	80018e0 <SPI_WaitFifoStateUntilTimeout.part.1>

08001990 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001990:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001992:	4613      	mov	r3, r2
{
 8001994:	460d      	mov	r5, r1
 8001996:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001998:	460a      	mov	r2, r1
 800199a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800199e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019a0:	f7ff ffdc 	bl	800195c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019a4:	b128      	cbz	r0, 80019b2 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80019a8:	f043 0320 	orr.w	r3, r3, #32
 80019ac:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80019ae:	2003      	movs	r0, #3
 80019b0:	e00f      	b.n	80019d2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019b2:	4632      	mov	r2, r6
 80019b4:	4629      	mov	r1, r5
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff ffba 	bl	8001930 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80019bc:	2800      	cmp	r0, #0
 80019be:	d1f2      	bne.n	80019a6 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019c0:	4633      	mov	r3, r6
 80019c2:	462a      	mov	r2, r5
 80019c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff ffc7 	bl	800195c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d1e9      	bne.n	80019a6 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}

080019d4 <HAL_SPI_Init>:
{
 80019d4:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80019d6:	4604      	mov	r4, r0
 80019d8:	2800      	cmp	r0, #0
 80019da:	d04a      	beq.n	8001a72 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80019e0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80019e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019e8:	b91b      	cbnz	r3, 80019f2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80019ea:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80019ee:	f001 fb77 	bl	80030e0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80019f2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80019f4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80019f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80019fa:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019fc:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80019fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a02:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a0c:	d92e      	bls.n	8001a6c <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a0e:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a10:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a14:	bf18      	it	ne
 8001a16:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a1a:	b92b      	cbnz	r3, 8001a28 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a1c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001a20:	bf8c      	ite	hi
 8001a22:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001a24:	2301      	movls	r3, #1
 8001a26:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001a28:	68a6      	ldr	r6, [r4, #8]
 8001a2a:	6863      	ldr	r3, [r4, #4]
 8001a2c:	69a5      	ldr	r5, [r4, #24]
 8001a2e:	4333      	orrs	r3, r6
 8001a30:	6926      	ldr	r6, [r4, #16]
 8001a32:	4333      	orrs	r3, r6
 8001a34:	6966      	ldr	r6, [r4, #20]
 8001a36:	4333      	orrs	r3, r6
 8001a38:	69e6      	ldr	r6, [r4, #28]
 8001a3a:	4333      	orrs	r3, r6
 8001a3c:	6a26      	ldr	r6, [r4, #32]
 8001a3e:	4333      	orrs	r3, r6
 8001a40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a42:	4333      	orrs	r3, r6
 8001a44:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001a48:	4333      	orrs	r3, r6
 8001a4a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a52:	0c2d      	lsrs	r5, r5, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	f005 0504 	and.w	r5, r5, #4
 8001a5a:	432a      	orrs	r2, r5
 8001a5c:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8001a5e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a60:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a62:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a64:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a66:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a70:	e7d0      	b.n	8001a14 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001a72:	2001      	movs	r0, #1
}
 8001a74:	bd70      	pop	{r4, r5, r6, pc}

08001a76 <HAL_SPI_Transmit>:
{
 8001a76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001a7a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001a7c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001a80:	2b01      	cmp	r3, #1
{
 8001a82:	4604      	mov	r4, r0
 8001a84:	460d      	mov	r5, r1
 8001a86:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001a88:	f000 80b1 	beq.w	8001bee <HAL_SPI_Transmit+0x178>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001a92:	f7fe fb97 	bl	80001c4 <HAL_GetTick>
 8001a96:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001a98:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001a9c:	b2c0      	uxtb	r0, r0
 8001a9e:	2801      	cmp	r0, #1
 8001aa0:	f040 80a3 	bne.w	8001bea <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8001aa4:	2d00      	cmp	r5, #0
 8001aa6:	d05f      	beq.n	8001b68 <HAL_SPI_Transmit+0xf2>
 8001aa8:	f1b8 0f00 	cmp.w	r8, #0
 8001aac:	d05c      	beq.n	8001b68 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ab4:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ab6:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ab8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001aba:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001abc:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001ac0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001ac4:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001ac8:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001aca:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001acc:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ace:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001ad4:	bf08      	it	eq
 8001ad6:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001ad8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001adc:	bf04      	itt	eq
 8001ade:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001ae2:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ae4:	6803      	ldr	r3, [r0, #0]
 8001ae6:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001ae8:	bf5e      	ittt	pl
 8001aea:	6803      	ldrpl	r3, [r0, #0]
 8001aec:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001af0:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001af2:	68e3      	ldr	r3, [r4, #12]
 8001af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001af8:	6863      	ldr	r3, [r4, #4]
 8001afa:	d93e      	bls.n	8001b7a <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001afc:	b113      	cbz	r3, 8001b04 <HAL_SPI_Transmit+0x8e>
 8001afe:	f1b8 0f01 	cmp.w	r8, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b04:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b08:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b0a:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001b0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001b14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b9a3      	cbnz	r3, 8001b44 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b1a:	463a      	mov	r2, r7
 8001b1c:	4631      	mov	r1, r6
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff ff36 	bl	8001990 <SPI_EndRxTxTransaction>
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d15d      	bne.n	8001be4 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b28:	68a3      	ldr	r3, [r4, #8]
 8001b2a:	b933      	cbnz	r3, 8001b3a <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	9201      	str	r2, [sp, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b3a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001b3c:	3000      	adds	r0, #0
 8001b3e:	bf18      	it	ne
 8001b40:	2001      	movne	r0, #1
 8001b42:	e011      	b.n	8001b68 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b44:	6822      	ldr	r2, [r4, #0]
 8001b46:	6893      	ldr	r3, [r2, #8]
 8001b48:	0798      	lsls	r0, r3, #30
 8001b4a:	d505      	bpl.n	8001b58 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b4e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001b52:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b54:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b56:	e7d9      	b.n	8001b0c <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b58:	f7fe fb34 	bl	80001c4 <HAL_GetTick>
 8001b5c:	1bc0      	subs	r0, r0, r7
 8001b5e:	42b0      	cmp	r0, r6
 8001b60:	d3d8      	bcc.n	8001b14 <HAL_SPI_Transmit+0x9e>
 8001b62:	1c71      	adds	r1, r6, #1
 8001b64:	d0d6      	beq.n	8001b14 <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8001b66:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001b74:	b002      	add	sp, #8
 8001b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b7a:	b113      	cbz	r3, 8001b82 <HAL_SPI_Transmit+0x10c>
 8001b7c:	f1b8 0f01 	cmp.w	r8, #1
 8001b80:	d113      	bne.n	8001baa <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8001b82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d906      	bls.n	8001b98 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b8a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b8e:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b90:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001b92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b94:	3b02      	subs	r3, #2
 8001b96:	e006      	b.n	8001ba6 <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b98:	782b      	ldrb	r3, [r5, #0]
 8001b9a:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8001b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001ba2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001baa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0b3      	beq.n	8001b1a <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	0792      	lsls	r2, r2, #30
 8001bb8:	d50c      	bpl.n	8001bd4 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8001bba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001bbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	2a01      	cmp	r2, #1
 8001bc2:	d904      	bls.n	8001bce <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bc4:	f830 2b02 	ldrh.w	r2, [r0], #2
 8001bc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bca:	63a0      	str	r0, [r4, #56]	; 0x38
 8001bcc:	e7e1      	b.n	8001b92 <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bce:	7802      	ldrb	r2, [r0, #0]
 8001bd0:	731a      	strb	r2, [r3, #12]
 8001bd2:	e7e3      	b.n	8001b9c <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bd4:	f7fe faf6 	bl	80001c4 <HAL_GetTick>
 8001bd8:	1bc0      	subs	r0, r0, r7
 8001bda:	4286      	cmp	r6, r0
 8001bdc:	d8e5      	bhi.n	8001baa <HAL_SPI_Transmit+0x134>
 8001bde:	1c73      	adds	r3, r6, #1
 8001be0:	d0e3      	beq.n	8001baa <HAL_SPI_Transmit+0x134>
 8001be2:	e7c0      	b.n	8001b66 <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001be4:	2320      	movs	r3, #32
 8001be6:	6623      	str	r3, [r4, #96]	; 0x60
 8001be8:	e79e      	b.n	8001b28 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8001bea:	2002      	movs	r0, #2
 8001bec:	e7bc      	b.n	8001b68 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8001bee:	2002      	movs	r0, #2
 8001bf0:	e7c0      	b.n	8001b74 <HAL_SPI_Transmit+0xfe>

08001bf2 <HAL_TIM_Base_MspInit>:
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf4:	6803      	ldr	r3, [r0, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_TIM_Base_Start_IT+0x28>)
 8001c02:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c04:	2a06      	cmp	r2, #6
 8001c06:	d006      	beq.n	8001c16 <HAL_TIM_Base_Start_IT+0x22>
 8001c08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8001c0c:	bf1e      	ittt	ne
 8001c0e:	681a      	ldrne	r2, [r3, #0]
 8001c10:	f042 0201 	orrne.w	r2, r2, #1
 8001c14:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001c16:	2000      	movs	r0, #0
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	00010007 	.word	0x00010007

08001c20 <HAL_TIM_OC_DelayElapsedCallback>:
 8001c20:	4770      	bx	lr

08001c22 <HAL_TIM_IC_CaptureCallback>:
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c24:	4770      	bx	lr

08001c26 <HAL_TIM_TriggerCallback>:
 8001c26:	4770      	bx	lr

08001c28 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c28:	6803      	ldr	r3, [r0, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	0791      	lsls	r1, r2, #30
{
 8001c2e:	b510      	push	{r4, lr}
 8001c30:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c32:	d50f      	bpl.n	8001c54 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	0792      	lsls	r2, r2, #30
 8001c38:	d50c      	bpl.n	8001c54 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c3a:	f06f 0202 	mvn.w	r2, #2
 8001c3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c40:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c42:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c44:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c46:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c48:	f000 8085 	beq.w	8001d56 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	f7ff ffe9 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	2300      	movs	r3, #0
 8001c52:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	0752      	lsls	r2, r2, #29
 8001c5a:	d510      	bpl.n	8001c7e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	0750      	lsls	r0, r2, #29
 8001c60:	d50d      	bpl.n	8001c7e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c62:	f06f 0204 	mvn.w	r2, #4
 8001c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c68:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c6a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c6c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c70:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c74:	d075      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	f7ff ffd4 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	0711      	lsls	r1, r2, #28
 8001c84:	d50f      	bpl.n	8001ca6 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	0712      	lsls	r2, r2, #28
 8001c8a:	d50c      	bpl.n	8001ca6 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c8c:	f06f 0208 	mvn.w	r2, #8
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c92:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c94:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c96:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c98:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c9c:	d067      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	f7ff ffc0 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	06d0      	lsls	r0, r2, #27
 8001cac:	d510      	bpl.n	8001cd0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	06d1      	lsls	r1, r2, #27
 8001cb2:	d50d      	bpl.n	8001cd0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cb4:	f06f 0210 	mvn.w	r2, #16
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cbc:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cbe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cc2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cc6:	d058      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc8:	f7ff ffab 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	07d2      	lsls	r2, r2, #31
 8001cd6:	d508      	bpl.n	8001cea <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	07d0      	lsls	r0, r2, #31
 8001cdc:	d505      	bpl.n	8001cea <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cde:	f06f 0201 	mvn.w	r2, #1
 8001ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f001 f9c7 	bl	8003078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	0611      	lsls	r1, r2, #24
 8001cf0:	d508      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	0612      	lsls	r2, r2, #24
 8001cf6:	d505      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f000 f897 	bl	8001e32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	05d0      	lsls	r0, r2, #23
 8001d0a:	d508      	bpl.n	8001d1e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	0611      	lsls	r1, r2, #24
 8001d10:	d505      	bpl.n	8001d1e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f000 f88b 	bl	8001e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	0652      	lsls	r2, r2, #25
 8001d24:	d508      	bpl.n	8001d38 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	0650      	lsls	r0, r2, #25
 8001d2a:	d505      	bpl.n	8001d38 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff ff77 	bl	8001c26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	0691      	lsls	r1, r2, #26
 8001d3e:	d522      	bpl.n	8001d86 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	0692      	lsls	r2, r2, #26
 8001d44:	d51f      	bpl.n	8001d86 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d46:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d4c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001d52:	f000 b86d 	b.w	8001e30 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	f7ff ff63 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7ff ff62 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d60:	e776      	b.n	8001c50 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	f7ff ff5d 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ff5c 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d6c:	e785      	b.n	8001c7a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	f7ff ff57 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff ff56 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d78:	e793      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	f7ff ff51 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7ff ff50 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d84:	e7a2      	b.n	8001ccc <HAL_TIM_IRQHandler+0xa4>
 8001d86:	bd10      	pop	{r4, pc}

08001d88 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001d8a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d8c:	4290      	cmp	r0, r2
{
 8001d8e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	d002      	beq.n	8001d98 <TIM_Base_SetConfig+0x10>
 8001d92:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d96:	d109      	bne.n	8001dac <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d98:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d9e:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001da0:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da4:	d009      	beq.n	8001dba <TIM_Base_SetConfig+0x32>
 8001da6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001daa:	d006      	beq.n	8001dba <TIM_Base_SetConfig+0x32>
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <TIM_Base_SetConfig+0x70>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d003      	beq.n	8001dba <TIM_Base_SetConfig+0x32>
 8001db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db6:	4290      	cmp	r0, r2
 8001db8:	d103      	bne.n	8001dc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dc0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dc2:	694a      	ldr	r2, [r1, #20]
 8001dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001dca:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dcc:	688b      	ldr	r3, [r1, #8]
 8001dce:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd0:	680b      	ldr	r3, [r1, #0]
 8001dd2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <TIM_Base_SetConfig+0x6c>)
 8001dd6:	4298      	cmp	r0, r3
 8001dd8:	d007      	beq.n	8001dea <TIM_Base_SetConfig+0x62>
 8001dda:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001dde:	4298      	cmp	r0, r3
 8001de0:	d003      	beq.n	8001dea <TIM_Base_SetConfig+0x62>
 8001de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de6:	4298      	cmp	r0, r3
 8001de8:	d101      	bne.n	8001dee <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dea:	690b      	ldr	r3, [r1, #16]
 8001dec:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dee:	2301      	movs	r3, #1
 8001df0:	6143      	str	r3, [r0, #20]
 8001df2:	bd10      	pop	{r4, pc}
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40014400 	.word	0x40014400

08001dfc <HAL_TIM_Base_Init>:
{
 8001dfc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001dfe:	4604      	mov	r4, r0
 8001e00:	b1a0      	cbz	r0, 8001e2c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e0a:	b91b      	cbnz	r3, 8001e14 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e10:	f7ff feef 	bl	8001bf2 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1a:	6820      	ldr	r0, [r4, #0]
 8001e1c:	1d21      	adds	r1, r4, #4
 8001e1e:	f7ff ffb3 	bl	8001d88 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e28:	2000      	movs	r0, #0
 8001e2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e2c:	2001      	movs	r0, #1
}
 8001e2e:	bd10      	pop	{r4, pc}

08001e30 <HAL_TIMEx_CommutCallback>:
 8001e30:	4770      	bx	lr

08001e32 <HAL_TIMEx_BreakCallback>:
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e34:	4770      	bx	lr

08001e36 <TSC_extract_groups>:
static uint32_t TSC_extract_groups(uint32_t iomask)
{
  uint32_t groups = 0UL;
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8001e36:	2300      	movs	r3, #0
{
 8001e38:	b530      	push	{r4, r5, lr}
  uint32_t groups = 0UL;
 8001e3a:	461a      	mov	r2, r3
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8001e3c:	240f      	movs	r4, #15
    {
      groups |= (1UL << idx);
 8001e3e:	2501      	movs	r5, #1
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8001e40:	0099      	lsls	r1, r3, #2
 8001e42:	fa04 f101 	lsl.w	r1, r4, r1
 8001e46:	4201      	tst	r1, r0
      groups |= (1UL << idx);
 8001e48:	bf18      	it	ne
 8001e4a:	fa05 f103 	lslne.w	r1, r5, r3
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8001e4e:	f103 0301 	add.w	r3, r3, #1
      groups |= (1UL << idx);
 8001e52:	bf18      	it	ne
 8001e54:	430a      	orrne	r2, r1
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8001e56:	2b07      	cmp	r3, #7
 8001e58:	d1f2      	bne.n	8001e40 <TSC_extract_groups+0xa>
    }
  }

  return groups;
}
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	bd30      	pop	{r4, r5, pc}

08001e5e <HAL_TSC_Init>:
{
 8001e5e:	b538      	push	{r3, r4, r5, lr}
  if (htsc == NULL)
 8001e60:	4604      	mov	r4, r0
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d040      	beq.n	8001ee8 <HAL_TSC_Init+0x8a>
  if (htsc->State == HAL_TSC_STATE_RESET)
 8001e66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e6e:	b91b      	cbnz	r3, 8001e78 <HAL_TSC_Init+0x1a>
    htsc->Lock = HAL_UNLOCKED;
 8001e70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_TSC_MspInit(htsc);
 8001e74:	f001 fa7a 	bl	800336c <HAL_TSC_MspInit>
  htsc->Instance->CR = TSC_CR_TSCE;
 8001e78:	6825      	ldr	r5, [r4, #0]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8001e7a:	68a1      	ldr	r1, [r4, #8]
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8001e7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  htsc->State = HAL_TSC_STATE_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htsc->Instance->CR = TSC_CR_TSCE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	602b      	str	r3, [r5, #0]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8001e88:	6863      	ldr	r3, [r4, #4]
 8001e8a:	682a      	ldr	r2, [r5, #0]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6961      	ldr	r1, [r4, #20]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	69a1      	ldr	r1, [r4, #24]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	69e1      	ldr	r1, [r4, #28]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	4313      	orrs	r3, r2
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8001ea4:	6922      	ldr	r2, [r4, #16]
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8001ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8001ea8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001eac:	602b      	str	r3, [r5, #0]
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8001eae:	7b23      	ldrb	r3, [r4, #12]
 8001eb0:	2b01      	cmp	r3, #1
    htsc->Instance->CR |= TSC_CR_SSE;
 8001eb2:	bf02      	ittt	eq
 8001eb4:	682b      	ldreq	r3, [r5, #0]
 8001eb6:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8001eba:	602b      	streq	r3, [r5, #0]
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8001ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ebe:	4303      	orrs	r3, r0
 8001ec0:	ea43 0201 	orr.w	r2, r3, r1
 8001ec4:	43d2      	mvns	r2, r2
 8001ec6:	612a      	str	r2, [r5, #16]
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8001ec8:	62ab      	str	r3, [r5, #40]	; 0x28
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8001eca:	6229      	str	r1, [r5, #32]
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8001ecc:	f7ff ffb3 	bl	8001e36 <TSC_extract_groups>
 8001ed0:	6328      	str	r0, [r5, #48]	; 0x30
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8001ed2:	686b      	ldr	r3, [r5, #4]
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	606b      	str	r3, [r5, #4]
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8001eda:	2303      	movs	r3, #3
 8001edc:	60ab      	str	r3, [r5, #8]
  htsc->State = HAL_TSC_STATE_READY;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
}
 8001eea:	bd38      	pop	{r3, r4, r5, pc}

08001eec <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001eec:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001ef0:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8001ef4:	045b      	lsls	r3, r3, #17
 8001ef6:	0c5b      	lsrs	r3, r3, #17
 8001ef8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001efc:	2000      	movs	r0, #0
 8001efe:	4770      	bx	lr

08001f00 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001f00:	b084      	sub	sp, #16
 8001f02:	b510      	push	{r4, lr}
 8001f04:	ac03      	add	r4, sp, #12
 8001f06:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001f0a:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001f12:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001f16:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001f1a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001f1e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8001f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f30:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001f34:	b004      	add	sp, #16
 8001f36:	4610      	mov	r0, r2
 8001f38:	4770      	bx	lr

08001f3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f3a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001f3c:	f000 fc30 	bl	80027a0 <vTaskStartScheduler>
  
  return osOK;
}
 8001f40:	2000      	movs	r0, #0
 8001f42:	bd08      	pop	{r3, pc}

08001f44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f44:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f46:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001f4a:	8a02      	ldrh	r2, [r0, #16]
{
 8001f4c:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f4e:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001f52:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001f54:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001f56:	bf14      	ite	ne
 8001f58:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f5a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f5c:	a803      	add	r0, sp, #12
 8001f5e:	9001      	str	r0, [sp, #4]
 8001f60:	9400      	str	r4, [sp, #0]
 8001f62:	4628      	mov	r0, r5
 8001f64:	f000 fb4c 	bl	8002600 <xTaskCreate>
 8001f68:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f6a:	bf0c      	ite	eq
 8001f6c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001f6e:	2000      	movne	r0, #0
}
 8001f70:	b005      	add	sp, #20
 8001f72:	bd30      	pop	{r4, r5, pc}

08001f74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f74:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f76:	2800      	cmp	r0, #0
 8001f78:	bf08      	it	eq
 8001f7a:	2001      	moveq	r0, #1
 8001f7c:	f000 fd5e 	bl	8002a3c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f80:	2000      	movs	r0, #0
 8001f82:	bd08      	pop	{r3, pc}

08001f84 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f84:	f100 0308 	add.w	r3, r0, #8
 8001f88:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f8a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f8e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f90:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f92:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f94:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f96:	6003      	str	r3, [r0, #0]
 8001f98:	4770      	bx	lr

08001f9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	6103      	str	r3, [r0, #16]
 8001f9e:	4770      	bx	lr

08001fa0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fa0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fa2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fac:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001fae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fb0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	6003      	str	r3, [r0, #0]
 8001fb6:	4770      	bx	lr

08001fb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fb8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fba:	1c53      	adds	r3, r2, #1
{
 8001fbc:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001fbe:	d10a      	bne.n	8001fd6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fc0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fc6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fc8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fca:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001fcc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fce:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	6003      	str	r3, [r0, #0]
 8001fd4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fd6:	f100 0308 	add.w	r3, r0, #8
 8001fda:	685c      	ldr	r4, [r3, #4]
 8001fdc:	6825      	ldr	r5, [r4, #0]
 8001fde:	42aa      	cmp	r2, r5
 8001fe0:	d3ef      	bcc.n	8001fc2 <vListInsert+0xa>
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	e7f9      	b.n	8001fda <vListInsert+0x22>

08001fe6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fe6:	6841      	ldr	r1, [r0, #4]
 8001fe8:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001fea:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fec:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fee:	6882      	ldr	r2, [r0, #8]
 8001ff0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ff6:	bf08      	it	eq
 8001ff8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	3a01      	subs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002004:	6818      	ldr	r0, [r3, #0]
}
 8002006:	4770      	bx	lr

08002008 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002008:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <prvTaskExitError+0x3c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	d008      	beq.n	8002028 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201a:	f383 8811 	msr	BASEPRI, r3
 800201e:	f3bf 8f6f 	isb	sy
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	e7fe      	b.n	8002026 <prvTaskExitError+0x1e>
 8002028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202c:	f383 8811 	msr	BASEPRI, r3
 8002030:	f3bf 8f6f 	isb	sy
 8002034:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002038:	9b01      	ldr	r3, [sp, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0fc      	beq.n	8002038 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800203e:	b002      	add	sp, #8
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2000000c 	.word	0x2000000c

08002048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <prvPortStartFirstTask+0x24>)
 800204a:	6800      	ldr	r0, [r0, #0]
 800204c:	6800      	ldr	r0, [r0, #0]
 800204e:	f380 8808 	msr	MSP, r0
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f380 8814 	msr	CONTROL, r0
 800205a:	b662      	cpsie	i
 800205c:	b661      	cpsie	f
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	df00      	svc	0
 8002068:	bf00      	nop
 800206a:	0000      	.short	0x0000
 800206c:	e000ed08 	.word	0xe000ed08

08002070 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002070:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002080 <vPortEnableVFP+0x10>
 8002074:	6801      	ldr	r1, [r0, #0]
 8002076:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800207a:	6001      	str	r1, [r0, #0]
 800207c:	4770      	bx	lr
 800207e:	0000      	.short	0x0000
 8002080:	e000ed88 	.word	0xe000ed88

08002084 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002088:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <pxPortInitialiseStack+0x28>)
 800208e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002092:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002096:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800209a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800209e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80020a2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80020a6:	3844      	subs	r0, #68	; 0x44
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	08002009 	.word	0x08002009

080020b0 <SVC_Handler>:
	__asm volatile (
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <pxCurrentTCBConst2>)
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	6808      	ldr	r0, [r1, #0]
 80020b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ba:	f380 8809 	msr	PSP, r0
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f04f 0000 	mov.w	r0, #0
 80020c6:	f380 8811 	msr	BASEPRI, r0
 80020ca:	4770      	bx	lr
 80020cc:	f3af 8000 	nop.w

080020d0 <pxCurrentTCBConst2>:
 80020d0:	20000c50 	.word	0x20000c50

080020d4 <vPortEnterCritical>:
 80020d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d8:	f383 8811 	msr	BASEPRI, r3
 80020dc:	f3bf 8f6f 	isb	sy
 80020e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <vPortEnterCritical+0x3c>)
 80020e6:	6813      	ldr	r3, [r2, #0]
 80020e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80020ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80020ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80020ee:	d10d      	bne.n	800210c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <vPortEnterCritical+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80020f8:	d008      	beq.n	800210c <vPortEnterCritical+0x38>
 80020fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	e7fe      	b.n	800210a <vPortEnterCritical+0x36>
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000000c 	.word	0x2000000c
 8002114:	e000ed04 	.word	0xe000ed04

08002118 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002118:	4a08      	ldr	r2, [pc, #32]	; (800213c <vPortExitCritical+0x24>)
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	b943      	cbnz	r3, 8002130 <vPortExitCritical+0x18>
 800211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	e7fe      	b.n	800212e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002130:	3b01      	subs	r3, #1
 8002132:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002134:	b90b      	cbnz	r3, 800213a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	4770      	bx	lr
 800213c:	2000000c 	.word	0x2000000c

08002140 <PendSV_Handler>:
	__asm volatile
 8002140:	f3ef 8009 	mrs	r0, PSP
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <pxCurrentTCBConst>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f01e 0f10 	tst.w	lr, #16
 8002150:	bf08      	it	eq
 8002152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800215a:	6010      	str	r0, [r2, #0]
 800215c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002164:	f380 8811 	msr	BASEPRI, r0
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f000 fc88 	bl	8002a84 <vTaskSwitchContext>
 8002174:	f04f 0000 	mov.w	r0, #0
 8002178:	f380 8811 	msr	BASEPRI, r0
 800217c:	bc09      	pop	{r0, r3}
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	6808      	ldr	r0, [r1, #0]
 8002182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002186:	f01e 0f10 	tst.w	lr, #16
 800218a:	bf08      	it	eq
 800218c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002190:	f380 8809 	msr	PSP, r0
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	f3af 8000 	nop.w

080021a0 <pxCurrentTCBConst>:
 80021a0:	20000c50 	.word	0x20000c50

080021a4 <SysTick_Handler>:
{
 80021a4:	b508      	push	{r3, lr}
	__asm volatile
 80021a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80021b6:	f000 fb37 	bl	8002828 <xTaskIncrementTick>
 80021ba:	b118      	cbz	r0, 80021c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <SysTick_Handler+0x28>)
 80021be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80021c4:	2300      	movs	r3, #0
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	bd08      	pop	{r3, pc}
 80021cc:	e000ed04 	.word	0xe000ed04

080021d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021d0:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021d2:	4909      	ldr	r1, [pc, #36]	; (80021f8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021d8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <vPortSetupTimerInterrupt+0x2c>)
 80021dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e6:	4906      	ldr	r1, [pc, #24]	; (8002200 <vPortSetupTimerInterrupt+0x30>)
 80021e8:	3b01      	subs	r3, #1
 80021ea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80021ec:	2307      	movs	r3, #7
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e010 	.word	0xe000e010
 80021f8:	e000e018 	.word	0xe000e018
 80021fc:	20000010 	.word	0x20000010
 8002200:	e000e014 	.word	0xe000e014

08002204 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <xPortStartScheduler+0xe8>)
 8002206:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <xPortStartScheduler+0xec>)
{
 8002208:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	4291      	cmp	r1, r2
 800220e:	d108      	bne.n	8002222 <xPortStartScheduler+0x1e>
	__asm volatile
 8002210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	e7fe      	b.n	8002220 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <xPortStartScheduler+0xf0>)
 8002226:	429a      	cmp	r2, r3
 8002228:	d108      	bne.n	800223c <xPortStartScheduler+0x38>
 800222a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	e7fe      	b.n	800223a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <xPortStartScheduler+0xf4>)
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002244:	22ff      	movs	r2, #255	; 0xff
 8002246:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002248:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800224a:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002252:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002256:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800225a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <xPortStartScheduler+0xfc>)
 800225e:	2207      	movs	r2, #7
 8002260:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002262:	2100      	movs	r1, #0
 8002264:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002268:	0600      	lsls	r0, r0, #24
 800226a:	f102 34ff 	add.w	r4, r2, #4294967295
 800226e:	d40d      	bmi.n	800228c <xPortStartScheduler+0x88>
 8002270:	b101      	cbz	r1, 8002274 <xPortStartScheduler+0x70>
 8002272:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2a03      	cmp	r2, #3
 8002278:	d011      	beq.n	800229e <xPortStartScheduler+0x9a>
 800227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	f3bf 8f6f 	isb	sy
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	e7fe      	b.n	800228a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800228c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002290:	0052      	lsls	r2, r2, #1
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f88d 2003 	strb.w	r2, [sp, #3]
 8002298:	2101      	movs	r1, #1
 800229a:	4622      	mov	r2, r4
 800229c:	e7e2      	b.n	8002264 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800229e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80022a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80022a4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80022a6:	9b01      	ldr	r3, [sp, #4]
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <xPortStartScheduler+0xf4>)
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <xPortStartScheduler+0x100>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80022b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80022be:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80022c0:	f7ff ff86 	bl	80021d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <xPortStartScheduler+0x104>)
 80022c6:	2400      	movs	r4, #0
 80022c8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80022ca:	f7ff fed1 	bl	8002070 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <xPortStartScheduler+0x108>)
 80022d0:	6813      	ldr	r3, [r2, #0]
 80022d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022d6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80022d8:	f7ff feb6 	bl	8002048 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80022dc:	f000 fbd2 	bl	8002a84 <vTaskSwitchContext>
	prvTaskExitError();
 80022e0:	f7ff fe92 	bl	8002008 <prvTaskExitError>
}
 80022e4:	4620      	mov	r0, r4
 80022e6:	b002      	add	sp, #8
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00
 80022f0:	410fc271 	.word	0x410fc271
 80022f4:	410fc270 	.word	0x410fc270
 80022f8:	e000e400 	.word	0xe000e400
 80022fc:	20000030 	.word	0x20000030
 8002300:	20000034 	.word	0x20000034
 8002304:	e000ed20 	.word	0xe000ed20
 8002308:	2000000c 	.word	0x2000000c
 800230c:	e000ef34 	.word	0xe000ef34

08002310 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002310:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <prvInsertBlockIntoFreeList+0x40>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4282      	cmp	r2, r0
 8002318:	d318      	bcc.n	800234c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800231a:	685c      	ldr	r4, [r3, #4]
 800231c:	1919      	adds	r1, r3, r4
 800231e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002320:	bf01      	itttt	eq
 8002322:	6841      	ldreq	r1, [r0, #4]
 8002324:	4618      	moveq	r0, r3
 8002326:	1909      	addeq	r1, r1, r4
 8002328:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800232a:	6844      	ldr	r4, [r0, #4]
 800232c:	1901      	adds	r1, r0, r4
 800232e:	428a      	cmp	r2, r1
 8002330:	d107      	bne.n	8002342 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <prvInsertBlockIntoFreeList+0x44>)
 8002334:	6809      	ldr	r1, [r1, #0]
 8002336:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002338:	bf1f      	itttt	ne
 800233a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800233c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800233e:	1909      	addne	r1, r1, r4
 8002340:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002342:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002344:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002346:	bf18      	it	ne
 8002348:	6018      	strne	r0, [r3, #0]
 800234a:	bd10      	pop	{r4, pc}
 800234c:	4613      	mov	r3, r2
 800234e:	e7e1      	b.n	8002314 <prvInsertBlockIntoFreeList+0x4>
 8002350:	20000c48 	.word	0x20000c48
 8002354:	20000038 	.word	0x20000038

08002358 <pvPortMalloc>:
{
 8002358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800235c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800235e:	f000 fa5b 	bl	8002818 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002362:	493e      	ldr	r1, [pc, #248]	; (800245c <pvPortMalloc+0x104>)
 8002364:	4d3e      	ldr	r5, [pc, #248]	; (8002460 <pvPortMalloc+0x108>)
 8002366:	680b      	ldr	r3, [r1, #0]
 8002368:	bb0b      	cbnz	r3, 80023ae <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800236a:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800236c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800236e:	bf1f      	itttt	ne
 8002370:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002372:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002376:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 800237a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800237c:	bf14      	ite	ne
 800237e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002380:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002384:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002386:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002388:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800238c:	4e36      	ldr	r6, [pc, #216]	; (8002468 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800238e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002390:	2000      	movs	r0, #0
 8002392:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002394:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002396:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002398:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800239a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800239c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800239e:	4b33      	ldr	r3, [pc, #204]	; (800246c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023a0:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023a2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <pvPortMalloc+0x118>)
 80023a6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80023a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023ac:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023ae:	682f      	ldr	r7, [r5, #0]
 80023b0:	4227      	tst	r7, r4
 80023b2:	d116      	bne.n	80023e2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80023b4:	2c00      	cmp	r4, #0
 80023b6:	d041      	beq.n	800243c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80023b8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023bc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023be:	bf1c      	itt	ne
 80023c0:	f023 0307 	bicne.w	r3, r3, #7
 80023c4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023c6:	b163      	cbz	r3, 80023e2 <pvPortMalloc+0x8a>
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <pvPortMalloc+0x118>)
 80023ca:	6816      	ldr	r6, [r2, #0]
 80023cc:	42b3      	cmp	r3, r6
 80023ce:	4690      	mov	r8, r2
 80023d0:	d807      	bhi.n	80023e2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80023d2:	4a25      	ldr	r2, [pc, #148]	; (8002468 <pvPortMalloc+0x110>)
 80023d4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023d6:	6868      	ldr	r0, [r5, #4]
 80023d8:	4283      	cmp	r3, r0
 80023da:	d804      	bhi.n	80023e6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80023dc:	6809      	ldr	r1, [r1, #0]
 80023de:	428d      	cmp	r5, r1
 80023e0:	d107      	bne.n	80023f2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80023e2:	2400      	movs	r4, #0
 80023e4:	e02a      	b.n	800243c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023e6:	682c      	ldr	r4, [r5, #0]
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d0f7      	beq.n	80023dc <pvPortMalloc+0x84>
 80023ec:	462a      	mov	r2, r5
 80023ee:	4625      	mov	r5, r4
 80023f0:	e7f1      	b.n	80023d6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023f2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023f4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023f6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023f8:	1ac2      	subs	r2, r0, r3
 80023fa:	2a10      	cmp	r2, #16
 80023fc:	d90f      	bls.n	800241e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023fe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002400:	0741      	lsls	r1, r0, #29
 8002402:	d008      	beq.n	8002416 <pvPortMalloc+0xbe>
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	e7fe      	b.n	8002414 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002416:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002418:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800241a:	f7ff ff79 	bl	8002310 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800241e:	4913      	ldr	r1, [pc, #76]	; (800246c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002420:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002422:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002424:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002426:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002428:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800242a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800242e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002432:	bf38      	it	cc
 8002434:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002436:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002438:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800243a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800243c:	f000 fa86 	bl	800294c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002440:	0763      	lsls	r3, r4, #29
 8002442:	d008      	beq.n	8002456 <pvPortMalloc+0xfe>
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	e7fe      	b.n	8002454 <pvPortMalloc+0xfc>
}
 8002456:	4620      	mov	r0, r4
 8002458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800245c:	20000038 	.word	0x20000038
 8002460:	20000c3c 	.word	0x20000c3c
 8002464:	2000003c 	.word	0x2000003c
 8002468:	20000c48 	.word	0x20000c48
 800246c:	20000c44 	.word	0x20000c44
 8002470:	20000c40 	.word	0x20000c40

08002474 <vPortFree>:
{
 8002474:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002476:	4604      	mov	r4, r0
 8002478:	b370      	cbz	r0, 80024d8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <vPortFree+0x68>)
 800247c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	4213      	tst	r3, r2
 8002484:	d108      	bne.n	8002498 <vPortFree+0x24>
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	e7fe      	b.n	8002496 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002498:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800249c:	b141      	cbz	r1, 80024b0 <vPortFree+0x3c>
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	e7fe      	b.n	80024ae <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024b0:	ea23 0302 	bic.w	r3, r3, r2
 80024b4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80024b8:	f000 f9ae 	bl	8002818 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024bc:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <vPortFree+0x6c>)
 80024be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80024c2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024c4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024c8:	440b      	add	r3, r1
 80024ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024cc:	f7ff ff20 	bl	8002310 <prvInsertBlockIntoFreeList>
}
 80024d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80024d4:	f000 ba3a 	b.w	800294c <xTaskResumeAll>
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	bf00      	nop
 80024dc:	20000c3c 	.word	0x20000c3c
 80024e0:	20000c40 	.word	0x20000c40

080024e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <prvResetNextTaskUnblockTime+0x1c>)
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <prvResetNextTaskUnblockTime+0x20>)
 80024ec:	b919      	cbnz	r1, 80024f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024fa:	68d2      	ldr	r2, [r2, #12]
 80024fc:	6852      	ldr	r2, [r2, #4]
 80024fe:	e7f8      	b.n	80024f2 <prvResetNextTaskUnblockTime+0xe>
 8002500:	20000c54 	.word	0x20000c54
 8002504:	20000d2c 	.word	0x20000d2c

08002508 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800250c:	4e1b      	ldr	r6, [pc, #108]	; (800257c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800250e:	681d      	ldr	r5, [r3, #0]
{
 8002510:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002512:	6830      	ldr	r0, [r6, #0]
 8002514:	3004      	adds	r0, #4
{
 8002516:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002518:	f7ff fd65 	bl	8001fe6 <uxListRemove>
 800251c:	4633      	mov	r3, r6
 800251e:	b940      	cbnz	r0, 8002532 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002520:	6831      	ldr	r1, [r6, #0]
 8002522:	4e17      	ldr	r6, [pc, #92]	; (8002580 <prvAddCurrentTaskToDelayedList+0x78>)
 8002524:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002526:	6832      	ldr	r2, [r6, #0]
 8002528:	2001      	movs	r0, #1
 800252a:	4088      	lsls	r0, r1
 800252c:	ea22 0200 	bic.w	r2, r2, r0
 8002530:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002532:	1c62      	adds	r2, r4, #1
 8002534:	d107      	bne.n	8002546 <prvAddCurrentTaskToDelayedList+0x3e>
 8002536:	b137      	cbz	r7, 8002546 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	4812      	ldr	r0, [pc, #72]	; (8002584 <prvAddCurrentTaskToDelayedList+0x7c>)
 800253c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800253e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002542:	f7ff bd2d 	b.w	8001fa0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002546:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002548:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800254a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800254c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800254e:	d907      	bls.n	8002560 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <prvAddCurrentTaskToDelayedList+0x80>)
 8002552:	6810      	ldr	r0, [r2, #0]
 8002554:	6819      	ldr	r1, [r3, #0]
}
 8002556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800255a:	3104      	adds	r1, #4
 800255c:	f7ff bd2c 	b.w	8001fb8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <prvAddCurrentTaskToDelayedList+0x84>)
 8002562:	6810      	ldr	r0, [r2, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	3104      	adds	r1, #4
 8002568:	f7ff fd26 	bl	8001fb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <prvAddCurrentTaskToDelayedList+0x88>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002572:	bf38      	it	cc
 8002574:	601c      	strcc	r4, [r3, #0]
 8002576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002578:	20000d74 	.word	0x20000d74
 800257c:	20000c50 	.word	0x20000c50
 8002580:	20000cfc 	.word	0x20000cfc
 8002584:	20000d4c 	.word	0x20000d4c
 8002588:	20000c58 	.word	0x20000c58
 800258c:	20000c54 	.word	0x20000c54
 8002590:	20000d2c 	.word	0x20000d2c

08002594 <prvIdleTask>:
{
 8002594:	b580      	push	{r7, lr}
				taskYIELD();
 8002596:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80025fc <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800259a:	4f14      	ldr	r7, [pc, #80]	; (80025ec <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800259c:	4c14      	ldr	r4, [pc, #80]	; (80025f0 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800259e:	4e15      	ldr	r6, [pc, #84]	; (80025f4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	b963      	cbnz	r3, 80025be <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <prvIdleTask+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d9f8      	bls.n	800259e <prvIdleTask+0xa>
				taskYIELD();
 80025ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025b0:	f8c8 3000 	str.w	r3, [r8]
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	e7ee      	b.n	800259c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80025be:	f7ff fd89 	bl	80020d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025c6:	1d28      	adds	r0, r5, #4
 80025c8:	f7ff fd0d 	bl	8001fe6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80025cc:	6833      	ldr	r3, [r6, #0]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80025d8:	f7ff fd9e 	bl	8002118 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80025dc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80025de:	f7ff ff49 	bl	8002474 <vPortFree>
			vPortFree( pxTCB );
 80025e2:	4628      	mov	r0, r5
 80025e4:	f7ff ff46 	bl	8002474 <vPortFree>
 80025e8:	e7da      	b.n	80025a0 <prvIdleTask+0xc>
 80025ea:	bf00      	nop
 80025ec:	20000d60 	.word	0x20000d60
 80025f0:	20000cec 	.word	0x20000cec
 80025f4:	20000ce8 	.word	0x20000ce8
 80025f8:	20000c5c 	.word	0x20000c5c
 80025fc:	e000ed04 	.word	0xe000ed04

08002600 <xTaskCreate>:
	{
 8002600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002604:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002608:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800260a:	4650      	mov	r0, sl
	{
 800260c:	460f      	mov	r7, r1
 800260e:	4699      	mov	r9, r3
 8002610:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002612:	f7ff fea1 	bl	8002358 <pvPortMalloc>
			if( pxStack != NULL )
 8002616:	4605      	mov	r5, r0
 8002618:	2800      	cmp	r0, #0
 800261a:	f000 8096 	beq.w	800274a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800261e:	2054      	movs	r0, #84	; 0x54
 8002620:	f7ff fe9a 	bl	8002358 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002624:	4604      	mov	r4, r0
 8002626:	2800      	cmp	r0, #0
 8002628:	f000 808c 	beq.w	8002744 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800262c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002630:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002632:	4455      	add	r5, sl
 8002634:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002636:	f025 0a07 	bic.w	sl, r5, #7
 800263a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800263e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002640:	7859      	ldrb	r1, [r3, #1]
 8002642:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002646:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800264a:	b109      	cbz	r1, 8002650 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800264c:	42bb      	cmp	r3, r7
 800264e:	d1f7      	bne.n	8002640 <xTaskCreate+0x40>
 8002650:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002652:	2d06      	cmp	r5, #6
 8002654:	bf28      	it	cs
 8002656:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002658:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800265c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800265e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002660:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002662:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002664:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002668:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800266c:	f7ff fc95 	bl	8001f9a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002670:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002674:	f104 0018 	add.w	r0, r4, #24
 8002678:	f7ff fc8f 	bl	8001f9a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800267c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002680:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002682:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002684:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002686:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800268a:	464a      	mov	r2, r9
 800268c:	4641      	mov	r1, r8
 800268e:	4650      	mov	r0, sl
 8002690:	f7ff fcf8 	bl	8002084 <pxPortInitialiseStack>
 8002694:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002696:	b106      	cbz	r6, 800269a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002698:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800269a:	f7ff fd1b 	bl	80020d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80026a0:	4e32      	ldr	r6, [pc, #200]	; (800276c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002798 <xTaskCreate+0x198>
 80026a8:	3201      	adds	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80026ac:	6835      	ldr	r5, [r6, #0]
 80026ae:	2d00      	cmp	r5, #0
 80026b0:	d14e      	bne.n	8002750 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80026b2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d11d      	bne.n	80026f6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026ba:	eb08 0005 	add.w	r0, r8, r5
 80026be:	3514      	adds	r5, #20
 80026c0:	f7ff fc60 	bl	8001f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026c4:	2d8c      	cmp	r5, #140	; 0x8c
 80026c6:	d1f8      	bne.n	80026ba <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80026c8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800279c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80026cc:	4d28      	ldr	r5, [pc, #160]	; (8002770 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80026ce:	4648      	mov	r0, r9
 80026d0:	f7ff fc58 	bl	8001f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7ff fc55 	bl	8001f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80026da:	4826      	ldr	r0, [pc, #152]	; (8002774 <xTaskCreate+0x174>)
 80026dc:	f7ff fc52 	bl	8001f84 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80026e0:	4825      	ldr	r0, [pc, #148]	; (8002778 <xTaskCreate+0x178>)
 80026e2:	f7ff fc4f 	bl	8001f84 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80026e6:	4825      	ldr	r0, [pc, #148]	; (800277c <xTaskCreate+0x17c>)
 80026e8:	f7ff fc4c 	bl	8001f84 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <xTaskCreate+0x180>)
 80026ee:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <xTaskCreate+0x184>)
 80026f4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80026f6:	4a24      	ldr	r2, [pc, #144]	; (8002788 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80026f8:	4924      	ldr	r1, [pc, #144]	; (800278c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80026fa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80026fc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80026fe:	3301      	adds	r3, #1
 8002700:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002702:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002704:	2501      	movs	r5, #1
 8002706:	fa05 f302 	lsl.w	r3, r5, r2
 800270a:	4303      	orrs	r3, r0
 800270c:	2014      	movs	r0, #20
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	fb00 8002 	mla	r0, r0, r2, r8
 8002714:	4639      	mov	r1, r7
 8002716:	f7ff fc43 	bl	8001fa0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800271a:	f7ff fcfd 	bl	8002118 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <xTaskCreate+0x190>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b163      	cbz	r3, 800273e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002724:	6833      	ldr	r3, [r6, #0]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800272a:	429a      	cmp	r2, r3
 800272c:	d207      	bcs.n	800273e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <xTaskCreate+0x194>)
 8002730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	f3bf 8f6f 	isb	sy
	}
 800273e:	4628      	mov	r0, r5
 8002740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002744:	4628      	mov	r0, r5
 8002746:	f7ff fe95 	bl	8002474 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800274a:	f04f 35ff 	mov.w	r5, #4294967295
 800274e:	e7f6      	b.n	800273e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <xTaskCreate+0x190>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ce      	bne.n	80026f6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002758:	6833      	ldr	r3, [r6, #0]
 800275a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800275e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002760:	bf98      	it	ls
 8002762:	6034      	strls	r4, [r6, #0]
 8002764:	e7c7      	b.n	80026f6 <xTaskCreate+0xf6>
 8002766:	bf00      	nop
 8002768:	20000ce8 	.word	0x20000ce8
 800276c:	20000c50 	.word	0x20000c50
 8002770:	20000d14 	.word	0x20000d14
 8002774:	20000d34 	.word	0x20000d34
 8002778:	20000d60 	.word	0x20000d60
 800277c:	20000d4c 	.word	0x20000d4c
 8002780:	20000c54 	.word	0x20000c54
 8002784:	20000c58 	.word	0x20000c58
 8002788:	20000cf8 	.word	0x20000cf8
 800278c:	20000cfc 	.word	0x20000cfc
 8002790:	20000d48 	.word	0x20000d48
 8002794:	e000ed04 	.word	0xe000ed04
 8002798:	20000c5c 	.word	0x20000c5c
 800279c:	20000d00 	.word	0x20000d00

080027a0 <vTaskStartScheduler>:
{
 80027a0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <vTaskStartScheduler+0x60>)
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2400      	movs	r4, #0
 80027a8:	9400      	str	r4, [sp, #0]
 80027aa:	4623      	mov	r3, r4
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	4915      	ldr	r1, [pc, #84]	; (8002804 <vTaskStartScheduler+0x64>)
 80027b0:	4815      	ldr	r0, [pc, #84]	; (8002808 <vTaskStartScheduler+0x68>)
 80027b2:	f7ff ff25 	bl	8002600 <xTaskCreate>
	if( xReturn == pdPASS )
 80027b6:	2801      	cmp	r0, #1
 80027b8:	d114      	bne.n	80027e4 <vTaskStartScheduler+0x44>
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <vTaskStartScheduler+0x6c>)
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <vTaskStartScheduler+0x70>)
 80027d4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <vTaskStartScheduler+0x74>)
 80027d8:	601c      	str	r4, [r3, #0]
}
 80027da:	b002      	add	sp, #8
 80027dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80027e0:	f7ff bd10 	b.w	8002204 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027e4:	3001      	adds	r0, #1
 80027e6:	d108      	bne.n	80027fa <vTaskStartScheduler+0x5a>
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	e7fe      	b.n	80027f8 <vTaskStartScheduler+0x58>
}
 80027fa:	b002      	add	sp, #8
 80027fc:	bd10      	pop	{r4, pc}
 80027fe:	bf00      	nop
 8002800:	20000d28 	.word	0x20000d28
 8002804:	080035a8 	.word	0x080035a8
 8002808:	08002595 	.word	0x08002595
 800280c:	20000d2c 	.word	0x20000d2c
 8002810:	20000d48 	.word	0x20000d48
 8002814:	20000d74 	.word	0x20000d74

08002818 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002818:	4a02      	ldr	r2, [pc, #8]	; (8002824 <vTaskSuspendAll+0xc>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000cf4 	.word	0x20000cf4

08002828 <xTaskIncrementTick>:
{
 8002828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800282c:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <xTaskIncrementTick+0xf8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d153      	bne.n	80028dc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <xTaskIncrementTick+0xfc>)
 8002836:	681c      	ldr	r4, [r3, #0]
 8002838:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800283a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800283c:	b9bc      	cbnz	r4, 800286e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <xTaskIncrementTick+0x100>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	b142      	cbz	r2, 8002858 <xTaskIncrementTick+0x30>
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	e7fe      	b.n	8002856 <xTaskIncrementTick+0x2e>
 8002858:	4a34      	ldr	r2, [pc, #208]	; (800292c <xTaskIncrementTick+0x104>)
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	6810      	ldr	r0, [r2, #0]
 800285e:	6018      	str	r0, [r3, #0]
 8002860:	6011      	str	r1, [r2, #0]
 8002862:	4a33      	ldr	r2, [pc, #204]	; (8002930 <xTaskIncrementTick+0x108>)
 8002864:	6813      	ldr	r3, [r2, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	f7ff fe3b 	bl	80024e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800286e:	4d31      	ldr	r5, [pc, #196]	; (8002934 <xTaskIncrementTick+0x10c>)
 8002870:	4f31      	ldr	r7, [pc, #196]	; (8002938 <xTaskIncrementTick+0x110>)
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	429c      	cmp	r4, r3
 8002876:	f04f 0b00 	mov.w	fp, #0
 800287a:	d33e      	bcc.n	80028fa <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800287c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002928 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002880:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002948 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002884:	f8d8 2000 	ldr.w	r2, [r8]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	bb72      	cbnz	r2, 80028ea <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	602a      	str	r2, [r5, #0]
					break;
 8002892:	e032      	b.n	80028fa <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002894:	f106 0a04 	add.w	sl, r6, #4
 8002898:	4650      	mov	r0, sl
 800289a:	f7ff fba4 	bl	8001fe6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800289e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80028a0:	b119      	cbz	r1, 80028aa <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028a2:	f106 0018 	add.w	r0, r6, #24
 80028a6:	f7ff fb9e 	bl	8001fe6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028aa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80028ac:	f8d9 3000 	ldr.w	r3, [r9]
 80028b0:	2201      	movs	r2, #1
 80028b2:	fa02 f100 	lsl.w	r1, r2, r0
 80028b6:	4319      	orrs	r1, r3
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <xTaskIncrementTick+0x114>)
 80028ba:	f8c9 1000 	str.w	r1, [r9]
 80028be:	f04f 0e14 	mov.w	lr, #20
 80028c2:	4651      	mov	r1, sl
 80028c4:	fb0e 3000 	mla	r0, lr, r0, r3
 80028c8:	f7ff fb6a 	bl	8001fa0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80028d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80028d2:	4291      	cmp	r1, r2
 80028d4:	bf28      	it	cs
 80028d6:	f04f 0b01 	movcs.w	fp, #1
 80028da:	e7d3      	b.n	8002884 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80028dc:	4a18      	ldr	r2, [pc, #96]	; (8002940 <xTaskIncrementTick+0x118>)
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80028e4:	f04f 0b00 	mov.w	fp, #0
 80028e8:	e011      	b.n	800290e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028ea:	f8d8 2000 	ldr.w	r2, [r8]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028f2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80028f4:	428c      	cmp	r4, r1
 80028f6:	d2cd      	bcs.n	8002894 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80028f8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <xTaskIncrementTick+0x114>)
 80028fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002900:	2214      	movs	r2, #20
 8002902:	434a      	muls	r2, r1
 8002904:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002906:	2a02      	cmp	r2, #2
 8002908:	bf28      	it	cs
 800290a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800290e:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <xTaskIncrementTick+0x11c>)
 8002910:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002912:	2a00      	cmp	r2, #0
 8002914:	bf18      	it	ne
 8002916:	f04f 0b01 	movne.w	fp, #1
}
 800291a:	4658      	mov	r0, fp
 800291c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002920:	20000cf4 	.word	0x20000cf4
 8002924:	20000d74 	.word	0x20000d74
 8002928:	20000c54 	.word	0x20000c54
 800292c:	20000c58 	.word	0x20000c58
 8002930:	20000d30 	.word	0x20000d30
 8002934:	20000d2c 	.word	0x20000d2c
 8002938:	20000c50 	.word	0x20000c50
 800293c:	20000c5c 	.word	0x20000c5c
 8002940:	20000cf0 	.word	0x20000cf0
 8002944:	20000d78 	.word	0x20000d78
 8002948:	20000cfc 	.word	0x20000cfc

0800294c <xTaskResumeAll>:
{
 800294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002950:	4c31      	ldr	r4, [pc, #196]	; (8002a18 <xTaskResumeAll+0xcc>)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	b943      	cbnz	r3, 8002968 <xTaskResumeAll+0x1c>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	e7fe      	b.n	8002966 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002968:	f7ff fbb4 	bl	80020d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002972:	6824      	ldr	r4, [r4, #0]
 8002974:	b12c      	cbz	r4, 8002982 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002976:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002978:	f7ff fbce 	bl	8002118 <vPortExitCritical>
}
 800297c:	4620      	mov	r0, r4
 800297e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <xTaskResumeAll+0xd0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f5      	beq.n	8002976 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800298a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002a34 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800298e:	4f24      	ldr	r7, [pc, #144]	; (8002a20 <xTaskResumeAll+0xd4>)
 8002990:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002a38 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002994:	f8d9 3000 	ldr.w	r3, [r9]
 8002998:	b9e3      	cbnz	r3, 80029d4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800299a:	b10c      	cbz	r4, 80029a0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800299c:	f7ff fda2 	bl	80024e4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80029a0:	4d20      	ldr	r5, [pc, #128]	; (8002a24 <xTaskResumeAll+0xd8>)
 80029a2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80029a4:	b144      	cbz	r4, 80029b8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80029a6:	4e20      	ldr	r6, [pc, #128]	; (8002a28 <xTaskResumeAll+0xdc>)
 80029a8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80029aa:	f7ff ff3d 	bl	8002828 <xTaskIncrementTick>
 80029ae:	b100      	cbz	r0, 80029b2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80029b0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80029b2:	3c01      	subs	r4, #1
 80029b4:	d1f9      	bne.n	80029aa <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80029b6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <xTaskResumeAll+0xdc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0da      	beq.n	8002976 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <xTaskResumeAll+0xe0>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80029d0:	2401      	movs	r4, #1
 80029d2:	e7d1      	b.n	8002978 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80029d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80029d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029da:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029dc:	f104 0018 	add.w	r0, r4, #24
 80029e0:	f7ff fb01 	bl	8001fe6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029e4:	4630      	mov	r0, r6
 80029e6:	f7ff fafe 	bl	8001fe6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	2501      	movs	r5, #1
 80029f0:	fa05 f302 	lsl.w	r3, r5, r2
 80029f4:	2014      	movs	r0, #20
 80029f6:	430b      	orrs	r3, r1
 80029f8:	fb00 8002 	mla	r0, r0, r2, r8
 80029fc:	4631      	mov	r1, r6
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	f7ff face 	bl	8001fa0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <xTaskResumeAll+0xe4>)
 8002a06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002a0e:	bf24      	itt	cs
 8002a10:	4b05      	ldrcs	r3, [pc, #20]	; (8002a28 <xTaskResumeAll+0xdc>)
 8002a12:	601d      	strcs	r5, [r3, #0]
 8002a14:	e7be      	b.n	8002994 <xTaskResumeAll+0x48>
 8002a16:	bf00      	nop
 8002a18:	20000cf4 	.word	0x20000cf4
 8002a1c:	20000ce8 	.word	0x20000ce8
 8002a20:	20000cfc 	.word	0x20000cfc
 8002a24:	20000cf0 	.word	0x20000cf0
 8002a28:	20000d78 	.word	0x20000d78
 8002a2c:	e000ed04 	.word	0xe000ed04
 8002a30:	20000c50 	.word	0x20000c50
 8002a34:	20000d34 	.word	0x20000d34
 8002a38:	20000c5c 	.word	0x20000c5c

08002a3c <vTaskDelay>:
	{
 8002a3c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a3e:	b940      	cbnz	r0, 8002a52 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <vTaskDelay+0x40>)
 8002a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <vTaskDelay+0x44>)
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	b141      	cbz	r1, 8002a6a <vTaskDelay+0x2e>
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	e7fe      	b.n	8002a68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002a6a:	f7ff fed5 	bl	8002818 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a6e:	f7ff fd4b 	bl	8002508 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002a72:	f7ff ff6b 	bl	800294c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d0e2      	beq.n	8002a40 <vTaskDelay+0x4>
 8002a7a:	bd08      	pop	{r3, pc}
 8002a7c:	e000ed04 	.word	0xe000ed04
 8002a80:	20000cf4 	.word	0x20000cf4

08002a84 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <vTaskSwitchContext+0x60>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <vTaskSwitchContext+0x64>)
{
 8002a8a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a8c:	b112      	cbz	r2, 8002a94 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002a8e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002a94:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <vTaskSwitchContext+0x68>)
 8002a98:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f1c3 031f 	rsb	r3, r3, #31
 8002aa4:	2214      	movs	r2, #20
 8002aa6:	4912      	ldr	r1, [pc, #72]	; (8002af0 <vTaskSwitchContext+0x6c>)
 8002aa8:	435a      	muls	r2, r3
 8002aaa:	1888      	adds	r0, r1, r2
 8002aac:	588c      	ldr	r4, [r1, r2]
 8002aae:	b944      	cbnz	r4, 8002ac2 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	e7fe      	b.n	8002ac0 <vTaskSwitchContext+0x3c>
 8002ac2:	6844      	ldr	r4, [r0, #4]
 8002ac4:	3208      	adds	r2, #8
 8002ac6:	6864      	ldr	r4, [r4, #4]
 8002ac8:	6044      	str	r4, [r0, #4]
 8002aca:	440a      	add	r2, r1
 8002acc:	4294      	cmp	r4, r2
 8002ace:	bf04      	itt	eq
 8002ad0:	6862      	ldreq	r2, [r4, #4]
 8002ad2:	6042      	streq	r2, [r0, #4]
 8002ad4:	2214      	movs	r2, #20
 8002ad6:	fb02 1303 	mla	r3, r2, r3, r1
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <vTaskSwitchContext+0x70>)
 8002ae0:	e7d6      	b.n	8002a90 <vTaskSwitchContext+0xc>
 8002ae2:	bf00      	nop
 8002ae4:	20000cf4 	.word	0x20000cf4
 8002ae8:	20000d78 	.word	0x20000d78
 8002aec:	20000cfc 	.word	0x20000cfc
 8002af0:	20000c5c 	.word	0x20000c5c
 8002af4:	20000c50 	.word	0x20000c50

08002af8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8002afa:	2218      	movs	r2, #24
 8002afc:	2100      	movs	r1, #0
 8002afe:	4668      	mov	r0, sp
 8002b00:	f000 fd0a 	bl	8003518 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002b04:	4818      	ldr	r0, [pc, #96]	; (8002b68 <MX_ADC1_Init+0x70>)
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <MX_ADC1_Init+0x74>)
 8002b08:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b0a:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b0c:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b0e:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8002b10:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b12:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b14:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b16:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b18:	6103      	str	r3, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b1a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b1c:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002b1e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b20:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b24:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b26:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b28:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b2c:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b2e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b32:	f7fd fb6d 	bl	8000210 <HAL_ADC_Init>
 8002b36:	b108      	cbz	r0, 8002b3c <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 8002b38:	f000 faa8 	bl	800308c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b3e:	480a      	ldr	r0, [pc, #40]	; (8002b68 <MX_ADC1_Init+0x70>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b40:	2306      	movs	r3, #6
 8002b42:	e88d 000c 	stmia.w	sp, {r2, r3}
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b46:	227f      	movs	r2, #127	; 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b48:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b4a:	9203      	str	r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b4c:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b4e:	2204      	movs	r2, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b50:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b52:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8002b54:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b56:	f7fd fc2d 	bl	80003b4 <HAL_ADC_ConfigChannel>
 8002b5a:	b108      	cbz	r0, 8002b60 <MX_ADC1_Init+0x68>
  {
    Error_Handler();
 8002b5c:	f000 fa96 	bl	800308c <Error_Handler>
  }

}
 8002b60:	b007      	add	sp, #28
 8002b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b66:	bf00      	nop
 8002b68:	20000d80 	.word	0x20000d80
 8002b6c:	50040000 	.word	0x50040000
 8002b70:	2e300800 	.word	0x2e300800

08002b74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	4604      	mov	r4, r0
 8002b78:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7a:	2214      	movs	r2, #20
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	a803      	add	r0, sp, #12
 8002b80:	f000 fcca 	bl	8003518 <memset>
  if(adcHandle->Instance==ADC1)
 8002b84:	6822      	ldr	r2, [r4, #0]
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_ADC_MspInit+0x58>)
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d11c      	bne.n	8002bc6 <HAL_ADC_MspInit+0x52>
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    PA6     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = BATT_MEAS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BATT_MEAS_GPIO_Port, &GPIO_InitStruct);
 8002b90:	a903      	add	r1, sp, #12
 8002b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b98:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002ba2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002bb4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BATT_MEAS_Pin;
 8002bb6:	2340      	movs	r3, #64	; 0x40
 8002bb8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BATT_MEAS_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BATT_MEAS_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f7fd fe0f 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002bc6:	b008      	add	sp, #32
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	bf00      	nop
 8002bcc:	50040000 	.word	0x50040000

08002bd0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002bd0:	b500      	push	{lr}

  /* USER CODE BEGIN StartDefaultTask */
  osThreadDef(shiftRegLightsTask, ShiftRegLightThread, osPriorityNormal, 0, 128);
 8002bd2:	4c0e      	ldr	r4, [pc, #56]	; (8002c0c <StartDefaultTask+0x3c>)
 8002bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8002bd6:	b08b      	sub	sp, #44	; 0x2c
  osThreadDef(shiftRegLightsTask, ShiftRegLightThread, osPriorityNormal, 0, 128);
 8002bd8:	466d      	mov	r5, sp
 8002bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bdc:	f854 3b04 	ldr.w	r3, [r4], #4
 8002be0:	602b      	str	r3, [r5, #0]
  osThreadDef(rgbLightTask, RGB_LightThread, osPriorityNormal, 0, 128);
 8002be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be4:	ad05      	add	r5, sp, #20
 8002be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	602b      	str	r3, [r5, #0]

  shiftRegLightsHandle = osThreadCreate(osThread(shiftRegLightsTask), NULL);
 8002bec:	2100      	movs	r1, #0
 8002bee:	4668      	mov	r0, sp
 8002bf0:	f7ff f9a8 	bl	8001f44 <osThreadCreate>
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <StartDefaultTask+0x40>)
  rgbLightHandle = osThreadCreate(osThread(rgbLightTask), NULL);
 8002bf6:	2100      	movs	r1, #0
  shiftRegLightsHandle = osThreadCreate(osThread(shiftRegLightsTask), NULL);
 8002bf8:	6018      	str	r0, [r3, #0]
  rgbLightHandle = osThreadCreate(osThread(rgbLightTask), NULL);
 8002bfa:	a805      	add	r0, sp, #20
 8002bfc:	f7ff f9a2 	bl	8001f44 <osThreadCreate>
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <StartDefaultTask+0x44>)
 8002c02:	6018      	str	r0, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7ff f9b5 	bl	8001f74 <osDelay>
 8002c0a:	e7fb      	b.n	8002c04 <StartDefaultTask+0x34>
 8002c0c:	0800356c 	.word	0x0800356c
 8002c10:	20000dec 	.word	0x20000dec
 8002c14:	20000de8 	.word	0x20000de8

08002c18 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002c18:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002c1a:	4d07      	ldr	r5, [pc, #28]	; (8002c38 <MX_FREERTOS_Init+0x20>)
 8002c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8002c1e:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002c20:	ac01      	add	r4, sp, #4
 8002c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	a801      	add	r0, sp, #4
 8002c2c:	f7ff f98a 	bl	8001f44 <osThreadCreate>
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <MX_FREERTOS_Init+0x24>)
 8002c32:	6018      	str	r0, [r3, #0]
}
 8002c34:	b007      	add	sp, #28
 8002c36:	bd30      	pop	{r4, r5, pc}
 8002c38:	08003594 	.word	0x08003594
 8002c3c:	20000de4 	.word	0x20000de4

08002c40 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002c44:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c48:	4302      	orrs	r2, r0
 8002c4a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	4018      	ands	r0, r3
 8002c50:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002c52:	9b01      	ldr	r3, [sp, #4]
}
 8002c54:	b002      	add	sp, #8
 8002c56:	4770      	bx	lr

08002c58 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	2214      	movs	r2, #20
 8002c5e:	2100      	movs	r1, #0
 8002c60:	a801      	add	r0, sp, #4
 8002c62:	f000 fc59 	bl	8003518 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	2004      	movs	r0, #4
 8002c68:	f7ff ffea 	bl	8002c40 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c6c:	2080      	movs	r0, #128	; 0x80
 8002c6e:	f7ff ffe7 	bl	8002c40 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	2002      	movs	r0, #2
 8002c74:	f7ff ffe4 	bl	8002c40 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff ffe1 	bl	8002c40 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BATT_MEAS_CTRL_Pin|LED1_RED_Pin|LED1_GREEN_Pin, GPIO_PIN_SET);
 8002c7e:	4e2e      	ldr	r6, [pc, #184]	; (8002d38 <MX_GPIO_Init+0xe0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin, GPIO_PIN_SET);
 8002c80:	4f2e      	ldr	r7, [pc, #184]	; (8002d3c <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c82:	2010      	movs	r0, #16
 8002c84:	f7ff ffdc 	bl	8002c40 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(GPIOA, LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8002c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c92:	f7fd fe59 	bl	8000948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BATT_MEAS_CTRL_Pin|LED1_RED_Pin|LED1_GREEN_Pin, GPIO_PIN_SET);
 8002c96:	4630      	mov	r0, r6
 8002c98:	2201      	movs	r2, #1
 8002c9a:	2107      	movs	r1, #7
 8002c9c:	f7fd fe54 	bl	8000948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin, GPIO_PIN_SET);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	2110      	movs	r1, #16
 8002ca6:	f7fd fe4f 	bl	8000948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cac:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cae:	2503      	movs	r5, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cb0:	a901      	add	r1, sp, #4
 8002cb2:	4823      	ldr	r0, [pc, #140]	; (8002d40 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cb4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb6:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cba:	f7fd fd93 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4 
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8002cbe:	f240 431d 	movw	r3, #1053	; 0x41d
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	a901      	add	r1, sp, #4
 8002cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8002cc8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cca:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	f7fd fd89 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LH_SIG_Pin;
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8002cd6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <MX_GPIO_Init+0xec>)
 8002cda:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8002cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce0:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8002ce4:	f7fd fd7e 	bl	80007e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin;
 8002ce8:	f44f 4303 	mov.w	r3, #33536	; 0x8300
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	a901      	add	r1, sp, #4
 8002cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin;
 8002cf2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf4:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f7fd fd73 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BATT_MEAS_CTRL_Pin|LED1_GREEN_Pin;
 8002cfe:	2306      	movs	r3, #6
 8002d00:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d04:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d06:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d08:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	f7fd fd69 	bl	80007e4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_RED_GPIO_Port, &GPIO_InitStruct);
 8002d12:	a901      	add	r1, sp, #4
 8002d14:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED1_RED_Pin;
 8002d16:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(LED1_RED_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f7fd fd61 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_BLUE_Pin;
 8002d22:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002d24:	a901      	add	r1, sp, #4
 8002d26:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LED1_BLUE_Pin;
 8002d28:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2a:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(LED1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f7fd fd58 	bl	80007e4 <HAL_GPIO_Init>

}
 8002d34:	b007      	add	sp, #28
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	48001000 	.word	0x48001000
 8002d40:	48001c00 	.word	0x48001c00
 8002d44:	10110000 	.word	0x10110000

08002d48 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8002d48:	b508      	push	{r3, lr}

  hsmbus1.Instance = I2C1;
 8002d4a:	4814      	ldr	r0, [pc, #80]	; (8002d9c <MX_I2C1_SMBUS_Init+0x54>)
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <MX_I2C1_SMBUS_Init+0x58>)
 8002d4e:	6003      	str	r3, [r0, #0]
  hsmbus1.Init.Timing = 0x10707DBC;
 8002d50:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 8002d54:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8002d58:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
  hsmbus1.Init.OwnAddress1 = 2;
 8002d5c:	2202      	movs	r2, #2
  hsmbus1.Init.Timing = 0x10707DBC;
 8002d5e:	6043      	str	r3, [r0, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	6083      	str	r3, [r0, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8002d64:	60c2      	str	r2, [r0, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8002d66:	6143      	str	r3, [r0, #20]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8002d68:	2201      	movs	r2, #1
  hsmbus1.Init.OwnAddress2 = 0;
 8002d6a:	6183      	str	r3, [r0, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8002d6c:	61c3      	str	r3, [r0, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8002d6e:	6203      	str	r3, [r0, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8002d70:	6243      	str	r3, [r0, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8002d72:	6283      	str	r3, [r0, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8002d74:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x0000830D;
 8002d76:	f248 330d 	movw	r3, #33549	; 0x830d
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8002d7a:	6102      	str	r2, [r0, #16]
  hsmbus1.Init.SMBusTimeout = 0x0000830D;
 8002d7c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8002d7e:	f7fe fd3f 	bl	8001800 <HAL_SMBUS_Init>
 8002d82:	b108      	cbz	r0, 8002d88 <MX_I2C1_SMBUS_Init+0x40>
  {
    Error_Handler();
 8002d84:	f000 f982 	bl	800308c <Error_Handler>
  }
  /** configuration Alert Mode 
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8002d88:	4804      	ldr	r0, [pc, #16]	; (8002d9c <MX_I2C1_SMBUS_Init+0x54>)
 8002d8a:	f7fe fd9b 	bl	80018c4 <HAL_SMBUS_EnableAlert_IT>
 8002d8e:	b118      	cbz	r0, 8002d98 <MX_I2C1_SMBUS_Init+0x50>
  {
    Error_Handler();
  }

}
 8002d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d94:	f000 b97a 	b.w	800308c <Error_Handler>
 8002d98:	bd08      	pop	{r3, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000df0 	.word	0x20000df0
 8002da0:	40005400 	.word	0x40005400

08002da4 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da6:	4604      	mov	r4, r0
 8002da8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002daa:	2214      	movs	r2, #20
 8002dac:	2100      	movs	r1, #0
 8002dae:	a803      	add	r0, sp, #12
 8002db0:	f000 fbb2 	bl	8003518 <memset>
  if(smbusHandle->Instance==I2C1)
 8002db4:	6822      	ldr	r2, [r4, #0]
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_SMBUS_MspInit+0x88>)
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d135      	bne.n	8002e28 <HAL_SMBUS_MspInit+0x84>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dbc:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    PA1     ------> I2C1_SMBA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc0:	2712      	movs	r7, #18
 8002dc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc4:	481a      	ldr	r0, [pc, #104]	; (8002e30 <HAL_SMBUS_MspInit+0x8c>)
 8002dc6:	f043 0302 	orr.w	r3, r3, #2
 8002dca:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002dd4:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dde:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de0:	9704      	str	r7, [sp, #16]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002de8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dea:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dec:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002df0:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002df4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002df8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfa:	f7fd fcf3 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e0c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e10:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f7fd fce7 	bl	80007e4 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e1c:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e24:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002e26:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e28:	b009      	add	sp, #36	; 0x24
 8002e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e2c:	40005400 	.word	0x40005400
 8002e30:	48000400 	.word	0x48000400

08002e34 <TransmitShiftRegLight>:

/*
 * Helper Functions
 */

void TransmitShiftRegLight(uint8_t *light_sequence){
 8002e34:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8002e36:	2200      	movs	r2, #0
void TransmitShiftRegLight(uint8_t *light_sequence){
 8002e38:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8002e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e42:	f7fd fd81 	bl	8000948 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, light_sequence, 1, 1);
 8002e46:	2301      	movs	r3, #1
 8002e48:	4621      	mov	r1, r4
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	; (8002e64 <TransmitShiftRegLight+0x30>)
 8002e4e:	f7fe fe12 	bl	8001a76 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 8002e52:	2201      	movs	r2, #1
 8002e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 8002e60:	f7fd bd72 	b.w	8000948 <HAL_GPIO_WritePin>
 8002e64:	20000e40 	.word	0x20000e40

08002e68 <ShiftRegLightThread>:
void ShiftRegLightThread(void){
 8002e68:	b507      	push	{r0, r1, r2, lr}
  uint8_t light_sequence = 0xFF;
 8002e6a:	ac02      	add	r4, sp, #8
 8002e6c:	23ff      	movs	r3, #255	; 0xff
 8002e6e:	f804 3d01 	strb.w	r3, [r4, #-1]!
          light_sequence = 0xFE;
 8002e72:	25fe      	movs	r5, #254	; 0xfe
    if(light_sequence == 0xFF || light_sequence == 0x7F){
 8002e74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e7c:	2a7f      	cmp	r2, #127	; 0x7f
      light_sequence = light_sequence << 1;
 8002e7e:	bf1c      	itt	ne
 8002e80:	005b      	lslne	r3, r3, #1
      light_sequence = light_sequence | 0x01;
 8002e82:	f043 0301 	orrne.w	r3, r3, #1
    TransmitShiftRegLight(&light_sequence);
 8002e86:	4620      	mov	r0, r4
          light_sequence = 0xFE;
 8002e88:	bf0c      	ite	eq
 8002e8a:	f88d 5007 	strbeq.w	r5, [sp, #7]
      light_sequence = light_sequence | 0x01;
 8002e8e:	f88d 3007 	strbne.w	r3, [sp, #7]
    TransmitShiftRegLight(&light_sequence);
 8002e92:	f7ff ffcf 	bl	8002e34 <TransmitShiftRegLight>
    osDelay(SHIFT_REG_PERIOD);
 8002e96:	2032      	movs	r0, #50	; 0x32
 8002e98:	f7ff f86c 	bl	8001f74 <osDelay>
    if(light_sequence == 0xFF || light_sequence == 0x7F){
 8002e9c:	e7ea      	b.n	8002e74 <ShiftRegLightThread+0xc>
	...

08002ea0 <RGB_TurnOn_Red>:

void RGB_TurnOn_Red(void){
  HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_RESET);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4801      	ldr	r0, [pc, #4]	; (8002eac <RGB_TurnOn_Red+0xc>)
 8002ea6:	f7fd bd4f 	b.w	8000948 <HAL_GPIO_WritePin>
 8002eaa:	bf00      	nop
 8002eac:	48000400 	.word	0x48000400

08002eb0 <RGB_TurnOn_Blue>:
}

void RGB_TurnOn_Blue(void){
  HAL_GPIO_WritePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin, GPIO_PIN_RESET);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <RGB_TurnOn_Blue+0xc>)
 8002eb6:	f7fd bd47 	b.w	8000948 <HAL_GPIO_WritePin>
 8002eba:	bf00      	nop
 8002ebc:	48001000 	.word	0x48001000

08002ec0 <RGB_TurnOn_Green>:
}

void RGB_TurnOn_Green(void){
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	4801      	ldr	r0, [pc, #4]	; (8002ecc <RGB_TurnOn_Green+0xc>)
 8002ec6:	f7fd bd3f 	b.w	8000948 <HAL_GPIO_WritePin>
 8002eca:	bf00      	nop
 8002ecc:	48000400 	.word	0x48000400

08002ed0 <RGB_TurnOff_Red>:
}

void RGB_TurnOff_Red(void){
  HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4801      	ldr	r0, [pc, #4]	; (8002edc <RGB_TurnOff_Red+0xc>)
 8002ed6:	f7fd bd37 	b.w	8000948 <HAL_GPIO_WritePin>
 8002eda:	bf00      	nop
 8002edc:	48000400 	.word	0x48000400

08002ee0 <RGB_TurnOff_Blue>:
}

void RGB_TurnOff_Blue(void){
  HAL_GPIO_WritePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin, GPIO_PIN_SET);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	4801      	ldr	r0, [pc, #4]	; (8002eec <RGB_TurnOff_Blue+0xc>)
 8002ee6:	f7fd bd2f 	b.w	8000948 <HAL_GPIO_WritePin>
 8002eea:	bf00      	nop
 8002eec:	48001000 	.word	0x48001000

08002ef0 <RGB_TurnOff_Green>:
}

void RGB_TurnOff_Green(void){
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4801      	ldr	r0, [pc, #4]	; (8002efc <RGB_TurnOff_Green+0xc>)
 8002ef6:	f7fd bd27 	b.w	8000948 <HAL_GPIO_WritePin>
 8002efa:	bf00      	nop
 8002efc:	48000400 	.word	0x48000400

08002f00 <RGB_LightThread>:
void RGB_LightThread(void){
 8002f00:	b508      	push	{r3, lr}
    RGB_TurnOn_Red();
 8002f02:	f7ff ffcd 	bl	8002ea0 <RGB_TurnOn_Red>
    osDelay(RGB_INTERVAL);
 8002f06:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f0a:	f7ff f833 	bl	8001f74 <osDelay>
    RGB_TurnOn_Blue();
 8002f0e:	f7ff ffcf 	bl	8002eb0 <RGB_TurnOn_Blue>
    osDelay(RGB_INTERVAL);
 8002f12:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f16:	f7ff f82d 	bl	8001f74 <osDelay>
    RGB_TurnOn_Green();
 8002f1a:	f7ff ffd1 	bl	8002ec0 <RGB_TurnOn_Green>
    osDelay(RGB_INTERVAL);
 8002f1e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f22:	f7ff f827 	bl	8001f74 <osDelay>
    RGB_TurnOff_Red();
 8002f26:	f7ff ffd3 	bl	8002ed0 <RGB_TurnOff_Red>
    osDelay(RGB_INTERVAL);
 8002f2a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f2e:	f7ff f821 	bl	8001f74 <osDelay>
    RGB_TurnOff_Blue();
 8002f32:	f7ff ffd5 	bl	8002ee0 <RGB_TurnOff_Blue>
    osDelay(RGB_INTERVAL);
 8002f36:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f3a:	f7ff f81b 	bl	8001f74 <osDelay>
    RGB_TurnOff_Green();
 8002f3e:	f7ff ffd7 	bl	8002ef0 <RGB_TurnOff_Green>
    osDelay(RGB_INTERVAL);
 8002f42:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f46:	f7ff f815 	bl	8001f74 <osDelay>
 8002f4a:	e7da      	b.n	8002f02 <RGB_LightThread+0x2>

08002f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f50:	b0ae      	sub	sp, #184	; 0xb8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f52:	2248      	movs	r2, #72	; 0x48
 8002f54:	2100      	movs	r1, #0
 8002f56:	a808      	add	r0, sp, #32
 8002f58:	f000 fade 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f5c:	221c      	movs	r2, #28
 8002f5e:	2100      	movs	r1, #0
 8002f60:	a801      	add	r0, sp, #4
 8002f62:	f000 fad9 	bl	8003518 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f66:	2100      	movs	r1, #0
 8002f68:	2250      	movs	r2, #80	; 0x50
 8002f6a:	a81a      	add	r0, sp, #104	; 0x68
 8002f6c:	f000 fad4 	bl	8003518 <memset>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f74:	2502      	movs	r5, #2
 8002f76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f7a:	f023 0318 	bic.w	r3, r3, #24
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f82:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8002f86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002f92:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f96:	9513      	str	r5, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002fa0:	232f      	movs	r3, #47	; 0x2f
 8002fa2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fac:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fae:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002fb0:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fb2:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002fb4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002fb6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fb8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002fba:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002fbc:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002fbe:	2320      	movs	r3, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002fc0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fc2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fc6:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002fc8:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002fcc:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd0:	eb0d 0003 	add.w	r0, sp, r3
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fd4:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002fd6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fd8:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002fdc:	9619      	str	r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002fde:	9718      	str	r7, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fe0:	f7fd fde8 	bl	8000bb4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002fe4:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fe6:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002fe8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fea:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fec:	2400      	movs	r4, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fee:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ff2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ff8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ffa:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ffc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002ffe:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003000:	f7fe f896 	bl	8001130 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003004:	f243 5304 	movw	r3, #13572	; 0x3504
 8003008:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800300a:	2318      	movs	r3, #24
 800300c:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800300e:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003012:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003014:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003018:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800301a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800301e:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003020:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003024:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003026:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8003028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302c:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800302e:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003032:	971d      	str	r7, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003034:	961e      	str	r6, [sp, #120]	; 0x78
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003036:	952c      	str	r5, [sp, #176]	; 0xb0
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003038:	942d      	str	r4, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800303a:	f7fe fa38 	bl	80014ae <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800303e:	f7fe fbd8 	bl	80017f2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003042:	b02e      	add	sp, #184	; 0xb8
 8003044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003048 <main>:
{
 8003048:	b508      	push	{r3, lr}
  HAL_Init();
 800304a:	f7fd f899 	bl	8000180 <HAL_Init>
  SystemClock_Config();
 800304e:	f7ff ff7d 	bl	8002f4c <SystemClock_Config>
  MX_GPIO_Init();
 8003052:	f7ff fe01 	bl	8002c58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003056:	f7ff fd4f 	bl	8002af8 <MX_ADC1_Init>
  MX_I2C1_SMBUS_Init();
 800305a:	f7ff fe75 	bl	8002d48 <MX_I2C1_SMBUS_Init>
  MX_RF_Init();
 800305e:	f000 f816 	bl	800308e <MX_RF_Init>
  MX_TSC_Init();
 8003062:	f000 f959 	bl	8003318 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8003066:	f000 f9bd 	bl	80033e4 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 800306a:	f000 f811 	bl	8003090 <MX_SPI1_Init>
  MX_FREERTOS_Init();
 800306e:	f7ff fdd3 	bl	8002c18 <MX_FREERTOS_Init>
  osKernelStart();
 8003072:	f7fe ff62 	bl	8001f3a <osKernelStart>
 8003076:	e7fe      	b.n	8003076 <main+0x2e>

08003078 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003078:	6802      	ldr	r2, [r0, #0]
 800307a:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d101      	bne.n	8003084 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003080:	f7fd b894 	b.w	80001ac <HAL_IncTick>
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40012c00 	.word	0x40012c00

0800308c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800308c:	4770      	bx	lr

0800308e <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800308e:	4770      	bx	lr

08003090 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8003090:	4811      	ldr	r0, [pc, #68]	; (80030d8 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003092:	4912      	ldr	r1, [pc, #72]	; (80030dc <MX_SPI1_Init+0x4c>)
{
 8003094:	b508      	push	{r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003096:	f44f 7282 	mov.w	r2, #260	; 0x104
 800309a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309e:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
 80030a2:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80030a6:	2302      	movs	r3, #2
 80030a8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b2:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80030b4:	2328      	movs	r3, #40	; 0x28
 80030b6:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80030b8:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ba:	2300      	movs	r3, #0
 80030bc:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030be:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030c2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030c4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80030c6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030c8:	f7fe fc84 	bl	80019d4 <HAL_SPI_Init>
 80030cc:	b118      	cbz	r0, 80030d6 <MX_SPI1_Init+0x46>
  {
    Error_Handler();
  }

}
 80030ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80030d2:	f7ff bfdb 	b.w	800308c <Error_Handler>
 80030d6:	bd08      	pop	{r3, pc}
 80030d8:	20000e40 	.word	0x20000e40
 80030dc:	40013000 	.word	0x40013000

080030e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030e0:	b530      	push	{r4, r5, lr}
 80030e2:	4604      	mov	r4, r0
 80030e4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e6:	2214      	movs	r2, #20
 80030e8:	2100      	movs	r1, #0
 80030ea:	a803      	add	r0, sp, #12
 80030ec:	f000 fa14 	bl	8003518 <memset>
  if(spiHandle->Instance==SPI1)
 80030f0:	6822      	ldr	r2, [r4, #0]
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_SPI_MspInit+0x84>)
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d132      	bne.n	800315e <HAL_SPI_MspInit+0x7e>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2502      	movs	r5, #2
 80030fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003100:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003104:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003106:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003108:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800310c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800310e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800311a:	f002 0201 	and.w	r2, r2, #1
 800311e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8003120:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003124:	f042 0202 	orr.w	r2, r2, #2
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	9504      	str	r5, [sp, #16]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003134:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003136:	2405      	movs	r4, #5
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8003138:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 800313a:	a903      	add	r1, sp, #12
 800313c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8003140:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003142:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003144:	f7fd fb4e 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_SCK_Pin;
 8003148:	2308      	movs	r3, #8
 800314a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 800314c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8003150:	4805      	ldr	r0, [pc, #20]	; (8003168 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003158:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 800315a:	f7fd fb43 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800315e:	b009      	add	sp, #36	; 0x24
 8003160:	bd30      	pop	{r4, r5, pc}
 8003162:	bf00      	nop
 8003164:	40013000 	.word	0x40013000
 8003168:	48000400 	.word	0x48000400

0800316c <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800316c:	2200      	movs	r2, #0
 800316e:	210f      	movs	r1, #15
 8003170:	f06f 0001 	mvn.w	r0, #1
 8003174:	f7fd baf6 	b.w	8000764 <HAL_NVIC_SetPriority>

08003178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003178:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800317a:	4601      	mov	r1, r0
{
 800317c:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800317e:	2200      	movs	r2, #0
 8003180:	2019      	movs	r0, #25
 8003182:	f7fd faef 	bl	8000764 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8003186:	2019      	movs	r0, #25
 8003188:	f7fd fb20 	bl	80007cc <HAL_NVIC_EnableIRQ>
  SET_BIT(RCC->APB2ENR, Periphs);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003190:	a901      	add	r1, sp, #4
 8003192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003194:	4c12      	ldr	r4, [pc, #72]	; (80031e0 <HAL_InitTick+0x68>)
 8003196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800319a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031a4:	a803      	add	r0, sp, #12
  (void)tmpreg;
 80031a6:	9b02      	ldr	r3, [sp, #8]
 80031a8:	f7fe f930 	bl	800140c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80031ac:	f7fe f91c 	bl	80013e8 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_InitTick+0x6c>)
 80031b2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80031b4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80031b8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_InitTick+0x70>)
 80031bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80031c0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80031c2:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80031c4:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80031c6:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80031c8:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ca:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80031cc:	f7fe fe16 	bl	8001dfc <HAL_TIM_Base_Init>
 80031d0:	b920      	cbnz	r0, 80031dc <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7fe fd0e 	bl	8001bf4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80031d8:	b00a      	add	sp, #40	; 0x28
 80031da:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80031dc:	2001      	movs	r0, #1
 80031de:	e7fb      	b.n	80031d8 <HAL_InitTick+0x60>
 80031e0:	20000ea4 	.word	0x20000ea4
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	000f4240 	.word	0x000f4240

080031ec <NMI_Handler>:
 80031ec:	4770      	bx	lr

080031ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ee:	e7fe      	b.n	80031ee <HardFault_Handler>

080031f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f0:	e7fe      	b.n	80031f0 <MemManage_Handler>

080031f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f2:	e7fe      	b.n	80031f2 <BusFault_Handler>

080031f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f4:	e7fe      	b.n	80031f4 <UsageFault_Handler>

080031f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f6:	4770      	bx	lr

080031f8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031f8:	4801      	ldr	r0, [pc, #4]	; (8003200 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80031fa:	f7fe bd15 	b.w	8001c28 <HAL_TIM_IRQHandler>
 80031fe:	bf00      	nop
 8003200:	20000ea4 	.word	0x20000ea4

08003204 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003204:	4b17      	ldr	r3, [pc, #92]	; (8003264 <SystemInit+0x60>)
 8003206:	2100      	movs	r1, #0
 8003208:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800320a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800320e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800321a:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8003226:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800322a:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8003232:	4462      	add	r2, ip
 8003234:	4002      	ands	r2, r0
 8003236:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003238:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800323c:	f022 0205 	bic.w	r2, r2, #5
 8003240:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003244:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003250:	4a05      	ldr	r2, [pc, #20]	; (8003268 <SystemInit+0x64>)
 8003252:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003254:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800325c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800325e:	6199      	str	r1, [r3, #24]
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000ed00 	.word	0xe000ed00
 8003268:	22041000 	.word	0x22041000

0800326c <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800326c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003270:	4924      	ldr	r1, [pc, #144]	; (8003304 <SystemCoreClockUpdate+0x98>)
 8003272:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003274:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003276:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800327a:	f000 000c 	and.w	r0, r0, #12
{
 800327e:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003280:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003284:	4611      	mov	r1, r2
 8003286:	4a20      	ldr	r2, [pc, #128]	; (8003308 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	280c      	cmp	r0, #12
 800328a:	d839      	bhi.n	8003300 <SystemCoreClockUpdate+0x94>
 800328c:	e8df f000 	tbb	[pc, r0]
 8003290:	38383838 	.word	0x38383838
 8003294:	38383807 	.word	0x38383807
 8003298:	38383816 	.word	0x38383816
 800329c:	18          	.byte	0x18
 800329d:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 80032a0:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80032a6:	481a      	ldr	r0, [pc, #104]	; (8003310 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80032a8:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 80032aa:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80032ac:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 80032b0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80032b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <SystemCoreClockUpdate+0xa8>)
 80032be:	e7ef      	b.n	80032a0 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032c0:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80032c2:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032c4:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80032c8:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80032cc:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80032ce:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80032d2:	d10e      	bne.n	80032f2 <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 80032d4:	490d      	ldr	r1, [pc, #52]	; (800330c <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 80032d6:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032de:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80032e0:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032e2:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80032e6:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032e8:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80032ea:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 80032ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f0:	e7d6      	b.n	80032a0 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80032f2:	2803      	cmp	r0, #3
 80032f4:	d101      	bne.n	80032fa <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 80032f6:	4907      	ldr	r1, [pc, #28]	; (8003314 <SystemCoreClockUpdate+0xa8>)
 80032f8:	e7ed      	b.n	80032d6 <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 80032fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80032fe:	e7ec      	b.n	80032da <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8003300:	6014      	str	r4, [r2, #0]
      break;
 8003302:	e7ce      	b.n	80032a2 <SystemCoreClockUpdate+0x36>
 8003304:	0800363c 	.word	0x0800363c
 8003308:	20000010 	.word	0x20000010
 800330c:	00f42400 	.word	0x00f42400
 8003310:	080035dc 	.word	0x080035dc
 8003314:	01e84800 	.word	0x01e84800

08003318 <MX_TSC_Init>:
void MX_TSC_Init(void)
{

  /** Configure the TSC peripheral 
  */
  htsc.Instance = TSC;
 8003318:	4812      	ldr	r0, [pc, #72]	; (8003364 <MX_TSC_Init+0x4c>)
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800331a:	4913      	ldr	r1, [pc, #76]	; (8003368 <MX_TSC_Init+0x50>)
{
 800331c:	b508      	push	{r3, lr}
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800331e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  htsc.Init.SpreadSpectrum = DISABLE;
  htsc.Init.SpreadSpectrumDeviation = 1;
 800332a:	2201      	movs	r2, #1
 800332c:	6102      	str	r2, [r0, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 800332e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  htsc.Init.SpreadSpectrum = DISABLE;
 8003332:	2300      	movs	r3, #0
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8003334:	6182      	str	r2, [r0, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8003336:	22a0      	movs	r2, #160	; 0xa0
  htsc.Init.SpreadSpectrum = DISABLE;
 8003338:	7303      	strb	r3, [r0, #12]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800333a:	6143      	str	r3, [r0, #20]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 800333c:	61c2      	str	r2, [r0, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800333e:	6203      	str	r3, [r0, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8003340:	6243      	str	r3, [r0, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8003342:	6283      	str	r3, [r0, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8003344:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8003348:	22e0      	movs	r2, #224	; 0xe0
  htsc.Init.ShieldIOs = 0;
 800334a:	6343      	str	r3, [r0, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 800334c:	2310      	movs	r3, #16
  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 800334e:	6302      	str	r2, [r0, #48]	; 0x30
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8003350:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8003352:	f7fe fd84 	bl	8001e5e <HAL_TSC_Init>
 8003356:	b118      	cbz	r0, 8003360 <MX_TSC_Init+0x48>
  {
    Error_Handler();
  }

}
 8003358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800335c:	f7ff be96 	b.w	800308c <Error_Handler>
 8003360:	bd08      	pop	{r3, pc}
 8003362:	bf00      	nop
 8003364:	20000ee4 	.word	0x20000ee4
 8003368:	40024000 	.word	0x40024000

0800336c <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 800336c:	b510      	push	{r4, lr}
 800336e:	4604      	mov	r4, r0
 8003370:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003372:	2214      	movs	r2, #20
 8003374:	2100      	movs	r1, #0
 8003376:	a803      	add	r0, sp, #12
 8003378:	f000 f8ce 	bl	8003518 <memset>
  if(tscHandle->Instance==TSC)
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_TSC_MspInit+0x70>)
 8003380:	429a      	cmp	r2, r3
 8003382:	d129      	bne.n	80033d8 <HAL_TSC_MspInit+0x6c>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8003388:	2409      	movs	r4, #9
 800338a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338c:	4814      	ldr	r0, [pc, #80]	; (80033e0 <HAL_TSC_MspInit+0x74>)
 800338e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003392:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003396:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800339a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800339c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800339e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033a0:	f042 0202 	orr.w	r2, r2, #2
 80033a4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80033a8:	9407      	str	r4, [sp, #28]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80033b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033b2:	2310      	movs	r3, #16
 80033b4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b8:	2312      	movs	r3, #18
 80033ba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	f7fd fa12 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80033c0:	23e0      	movs	r3, #224	; 0xe0
 80033c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033cc:	4804      	ldr	r0, [pc, #16]	; (80033e0 <HAL_TSC_MspInit+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80033d2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d4:	f7fd fa06 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80033d8:	b008      	add	sp, #32
 80033da:	bd10      	pop	{r4, pc}
 80033dc:	40024000 	.word	0x40024000
 80033e0:	48000400 	.word	0x48000400

080033e4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80033e4:	b508      	push	{r3, lr}

  hpcd_USB_FS.Instance = USB;
 80033e6:	480b      	ldr	r0, [pc, #44]	; (8003414 <MX_USB_PCD_Init+0x30>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <MX_USB_PCD_Init+0x34>)
 80033ea:	f04f 0e08 	mov.w	lr, #8
 80033ee:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80033f2:	2302      	movs	r3, #2
 80033f4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80033f6:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80033fc:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80033fe:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003400:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003402:	f7fd faa6 	bl	8000952 <HAL_PCD_Init>
 8003406:	b118      	cbz	r0, 8003410 <MX_USB_PCD_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800340c:	f7ff be3e 	b.w	800308c <Error_Handler>
 8003410:	bd08      	pop	{r3, pc}
 8003412:	bf00      	nop
 8003414:	20000f28 	.word	0x20000f28
 8003418:	40006800 	.word	0x40006800

0800341c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800341c:	b510      	push	{r4, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003422:	2214      	movs	r2, #20
 8003424:	2100      	movs	r1, #0
 8003426:	a803      	add	r0, sp, #12
 8003428:	f000 f876 	bl	8003518 <memset>
  if(pcdHandle->Instance==USB)
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_PCD_MspInit+0x5c>)
 8003430:	429a      	cmp	r2, r3
 8003432:	d11f      	bne.n	8003474 <HAL_PCD_MspInit+0x58>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003434:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = USB_DN_Pin|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003438:	a903      	add	r1, sp, #12
 800343a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003442:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800344a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USB_DN_Pin|GPIO_PIN_12;
 800344c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003450:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800345a:	230a      	movs	r3, #10
 800345c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f7fd f9c1 	bl	80007e4 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003468:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800346a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800346c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003470:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003472:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_USB_CLK_ENABLE();
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003474:	b008      	add	sp, #32
 8003476:	bd10      	pop	{r4, pc}
 8003478:	40006800 	.word	0x40006800

0800347c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800347c:	480d      	ldr	r0, [pc, #52]	; (80034b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800347e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003480:	480d      	ldr	r0, [pc, #52]	; (80034b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003482:	490e      	ldr	r1, [pc, #56]	; (80034bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <LoopForever+0xe>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003488:	e002      	b.n	8003490 <LoopCopyDataInit>

0800348a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800348c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348e:	3304      	adds	r3, #4

08003490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003494:	d3f9      	bcc.n	800348a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003498:	4c0b      	ldr	r4, [pc, #44]	; (80034c8 <LoopForever+0x16>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800349c:	e001      	b.n	80034a2 <LoopFillZerobss>

0800349e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a0:	3204      	adds	r2, #4

080034a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a4:	d3fb      	bcc.n	800349e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034a6:	f7ff fead 	bl	8003204 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80034aa:	f000 f811 	bl	80034d0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80034ae:	f7ff fdcb 	bl	8003048 <main>

080034b2 <LoopForever>:

LoopForever:
  b LoopForever
 80034b2:	e7fe      	b.n	80034b2 <LoopForever>
  ldr   r0, =_estack
 80034b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80034b8:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80034bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80034c0:	08003684 	.word	0x08003684
  ldr r2, =_sbss
 80034c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80034c8:	2000119c 	.word	0x2000119c

080034cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034cc:	e7fe      	b.n	80034cc <ADC1_IRQHandler>
	...

080034d0 <__libc_init_array>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4e0d      	ldr	r6, [pc, #52]	; (8003508 <__libc_init_array+0x38>)
 80034d4:	4c0d      	ldr	r4, [pc, #52]	; (800350c <__libc_init_array+0x3c>)
 80034d6:	1ba4      	subs	r4, r4, r6
 80034d8:	10a4      	asrs	r4, r4, #2
 80034da:	2500      	movs	r5, #0
 80034dc:	42a5      	cmp	r5, r4
 80034de:	d109      	bne.n	80034f4 <__libc_init_array+0x24>
 80034e0:	4e0b      	ldr	r6, [pc, #44]	; (8003510 <__libc_init_array+0x40>)
 80034e2:	4c0c      	ldr	r4, [pc, #48]	; (8003514 <__libc_init_array+0x44>)
 80034e4:	f000 f820 	bl	8003528 <_init>
 80034e8:	1ba4      	subs	r4, r4, r6
 80034ea:	10a4      	asrs	r4, r4, #2
 80034ec:	2500      	movs	r5, #0
 80034ee:	42a5      	cmp	r5, r4
 80034f0:	d105      	bne.n	80034fe <__libc_init_array+0x2e>
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034f8:	4798      	blx	r3
 80034fa:	3501      	adds	r5, #1
 80034fc:	e7ee      	b.n	80034dc <__libc_init_array+0xc>
 80034fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003502:	4798      	blx	r3
 8003504:	3501      	adds	r5, #1
 8003506:	e7f2      	b.n	80034ee <__libc_init_array+0x1e>
 8003508:	0800367c 	.word	0x0800367c
 800350c:	0800367c 	.word	0x0800367c
 8003510:	0800367c 	.word	0x0800367c
 8003514:	08003680 	.word	0x08003680

08003518 <memset>:
 8003518:	4402      	add	r2, r0
 800351a:	4603      	mov	r3, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <_init>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr

08003534 <_fini>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr
