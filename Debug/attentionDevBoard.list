
attentionDevBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000004  080043dc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001da8  20000034  0800440c  00020034  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001ddc  0800440c  00021ddc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  9 .debug_info   00033a88  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000068cc  00000000  00000000  00053aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013229  00000000  00000000  0005a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001b68  00000000  00000000  0006d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002848  00000000  00000000  0006f150  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fde4  00000000  00000000  00071998  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000b91b  00000000  00000000  0008177c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008d097  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004c98  00000000  00000000  0008d114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000034 	.word	0x20000034
 800015c:	00000000 	.word	0x00000000
 8000160:	08004120 	.word	0x08004120

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000038 	.word	0x20000038
 800017c:	08004120 	.word	0x08004120

08000180 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <HAL_Init+0x28>)
 8000182:	6813      	ldr	r3, [r2, #0]
 8000184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000188:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800018a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800018c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800018e:	f000 fad7 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000192:	2000      	movs	r0, #0
 8000194:	f003 fdb8 	bl	8003d08 <HAL_InitTick>
 8000198:	4604      	mov	r4, r0
 800019a:	b918      	cbnz	r0, 80001a4 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019c:	f003 fdae 	bl	8003cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80001a0:	4620      	mov	r0, r4
 80001a2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001a4:	2401      	movs	r4, #1
 80001a6:	e7fb      	b.n	80001a0 <HAL_Init+0x20>
 80001a8:	58004000 	.word	0x58004000

080001ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80001ac:	4a03      	ldr	r2, [pc, #12]	; (80001bc <HAL_IncTick+0x10>)
 80001ae:	4904      	ldr	r1, [pc, #16]	; (80001c0 <HAL_IncTick+0x14>)
 80001b0:	6813      	ldr	r3, [r2, #0]
 80001b2:	6809      	ldr	r1, [r1, #0]
 80001b4:	440b      	add	r3, r1
 80001b6:	6013      	str	r3, [r2, #0]
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20001960 	.word	0x20001960
 80001c0:	20000004 	.word	0x20000004

080001c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001c4:	4b01      	ldr	r3, [pc, #4]	; (80001cc <HAL_GetTick+0x8>)
 80001c6:	6818      	ldr	r0, [r3, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20001960 	.word	0x20001960

080001d0 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTickPrio+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000008 	.word	0x20000008

080001dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80001dc:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80001de:	0dcc      	lsrs	r4, r1, #23
 80001e0:	f004 0404 	and.w	r4, r4, #4
 80001e4:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 80001e6:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80001ea:	5823      	ldr	r3, [r4, r0]
 80001ec:	2507      	movs	r5, #7
 80001ee:	408d      	lsls	r5, r1
 80001f0:	ea23 0305 	bic.w	r3, r3, r5
 80001f4:	fa02 f101 	lsl.w	r1, r2, r1
 80001f8:	4319      	orrs	r1, r3
 80001fa:	5021      	str	r1, [r4, r0]
 80001fc:	bd30      	pop	{r4, r5, pc}

080001fe <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80001fe:	6880      	ldr	r0, [r0, #8]
}
 8000200:	f000 0001 	and.w	r0, r0, #1
 8000204:	4770      	bx	lr

08000206 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000206:	6880      	ldr	r0, [r0, #8]
}
 8000208:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800020c:	4770      	bx	lr
	...

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000212:	2300      	movs	r3, #0
 8000214:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000216:	4604      	mov	r4, r0
 8000218:	2800      	cmp	r0, #0
 800021a:	d07b      	beq.n	8000314 <HAL_ADC_Init+0x104>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800021c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800021e:	b925      	cbnz	r5, 800022a <HAL_ADC_Init+0x1a>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000220:	f003 fab8 	bl	8003794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000224:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000226:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800022a:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800022c:	6883      	ldr	r3, [r0, #8]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	d472      	bmi.n	8000318 <HAL_ADC_Init+0x108>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000232:	6883      	ldr	r3, [r0, #8]
 8000234:	00dd      	lsls	r5, r3, #3
 8000236:	d576      	bpl.n	8000326 <HAL_ADC_Init+0x116>
 8000238:	6883      	ldr	r3, [r0, #8]
 800023a:	00d9      	lsls	r1, r3, #3
 800023c:	f140 8081 	bpl.w	8000342 <HAL_ADC_Init+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000240:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000242:	f7ff ffe0 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000246:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000248:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800024c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800024e:	d15e      	bne.n	800030e <HAL_ADC_Init+0xfe>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000250:	2800      	cmp	r0, #0
 8000252:	d15c      	bne.n	800030e <HAL_ADC_Init+0xfe>
    ADC_STATE_CLR_SET(hadc->State,
 8000254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800025e:	6820      	ldr	r0, [r4, #0]
 8000260:	f7ff ffcd 	bl	80001fe <LL_ADC_IsEnabled>
 8000264:	b950      	cbnz	r0, 800027c <HAL_ADC_Init+0x6c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000266:	484e      	ldr	r0, [pc, #312]	; (80003a0 <HAL_ADC_Init+0x190>)
 8000268:	f7ff ffc9 	bl	80001fe <LL_ADC_IsEnabled>
 800026c:	b930      	cbnz	r0, 800027c <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <HAL_ADC_Init+0x194>)
 8000270:	6860      	ldr	r0, [r4, #4]
 8000272:	6893      	ldr	r3, [r2, #8]
 8000274:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000278:	4303      	orrs	r3, r0
 800027a:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800027c:	68e0      	ldr	r0, [r4, #12]
 800027e:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8000280:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8000284:	4303      	orrs	r3, r0
 8000286:	68a0      	ldr	r0, [r4, #8]
 8000288:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800028a:	7e60      	ldrb	r0, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800028c:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800028e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000296:	bf02      	ittt	eq
 8000298:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 800029a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800029e:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002a4:	b122      	cbz	r2, 80002b0 <HAL_ADC_Init+0xa0>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80002a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80002a8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80002ac:	4302      	orrs	r2, r0
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80002ae:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80002b0:	6820      	ldr	r0, [r4, #0]
 80002b2:	4a3d      	ldr	r2, [pc, #244]	; (80003a8 <HAL_ADC_Init+0x198>)
 80002b4:	68c5      	ldr	r5, [r0, #12]
 80002b6:	402a      	ands	r2, r5
 80002b8:	4313      	orrs	r3, r2
 80002ba:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80002bc:	f7ff ffa3 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80002c0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80002c2:	689a      	ldr	r2, [r3, #8]
 80002c4:	0712      	lsls	r2, r2, #28
 80002c6:	d546      	bpl.n	8000356 <HAL_ADC_Init+0x146>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80002c8:	6922      	ldr	r2, [r4, #16]
 80002ca:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80002cc:	bf05      	ittet	eq
 80002ce:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 80002d0:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80002d2:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80002d4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80002d8:	bf06      	itte	eq
 80002da:	f020 000f 	biceq.w	r0, r0, #15
 80002de:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80002e0:	f022 020f 	bicne.w	r2, r2, #15
 80002e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80002e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80002e8:	f023 0303 	bic.w	r3, r3, #3
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80002f2:	4608      	mov	r0, r1
 80002f4:	b003      	add	sp, #12
 80002f6:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 80002f8:	9b01      	ldr	r3, [sp, #4]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80002fe:	9b01      	ldr	r3, [sp, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f9      	bne.n	80002f8 <HAL_ADC_Init+0xe8>
 8000304:	e798      	b.n	8000238 <HAL_ADC_Init+0x28>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000306:	691a      	ldr	r2, [r3, #16]
 8000308:	f022 0201 	bic.w	r2, r2, #1
 800030c:	e045      	b.n	800039a <HAL_ADC_Init+0x18a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000314:	2101      	movs	r1, #1
 8000316:	e7ec      	b.n	80002f2 <HAL_ADC_Init+0xe2>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000318:	6883      	ldr	r3, [r0, #8]
 800031a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800031e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000322:	6083      	str	r3, [r0, #8]
 8000324:	e785      	b.n	8000232 <HAL_ADC_Init+0x22>
  MODIFY_REG(ADCx->CR,
 8000326:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <HAL_ADC_Init+0x19c>)
 800032a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800032e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000336:	6083      	str	r3, [r0, #8]
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <HAL_ADC_Init+0x1a0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000340:	e7dc      	b.n	80002fc <HAL_ADC_Init+0xec>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000342:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000344:	f043 0310 	orr.w	r3, r3, #16
 8000348:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800034a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000352:	2101      	movs	r1, #1
 8000354:	e775      	b.n	8000242 <HAL_ADC_Init+0x32>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000356:	2800      	cmp	r0, #0
 8000358:	d1b6      	bne.n	80002c8 <HAL_ADC_Init+0xb8>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800035a:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800035c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000360:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000362:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000364:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8000368:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800036c:	f020 0002 	bic.w	r0, r0, #2
 8000370:	4302      	orrs	r2, r0
 8000372:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000374:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000378:	2a01      	cmp	r2, #1
 800037a:	d1c4      	bne.n	8000306 <HAL_ADC_Init+0xf6>
        MODIFY_REG(hadc->Instance->CFGR2,
 800037c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800037e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000380:	6918      	ldr	r0, [r3, #16]
 8000382:	432a      	orrs	r2, r5
 8000384:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000386:	f042 0201 	orr.w	r2, r2, #1
 800038a:	432a      	orrs	r2, r5
 800038c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800038e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000392:	432a      	orrs	r2, r5
 8000394:	f020 0004 	bic.w	r0, r0, #4
 8000398:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800039a:	611a      	str	r2, [r3, #16]
 800039c:	e794      	b.n	80002c8 <HAL_ADC_Init+0xb8>
 800039e:	bf00      	nop
 80003a0:	50040000 	.word	0x50040000
 80003a4:	50040300 	.word	0x50040300
 80003a8:	fff0c007 	.word	0xfff0c007
 80003ac:	00030d40 	.word	0x00030d40
 80003b0:	20000010 	.word	0x20000010

080003b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80003b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003ba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80003be:	2b01      	cmp	r3, #1
{
 80003c0:	4605      	mov	r5, r0
 80003c2:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80003c4:	f000 8174 	beq.w	80006b0 <HAL_ADC_ConfigChannel+0x2fc>
 80003c8:	2301      	movs	r3, #1
 80003ca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80003ce:	6800      	ldr	r0, [r0, #0]
 80003d0:	f7ff ff19 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
 80003d4:	2800      	cmp	r0, #0
 80003d6:	f040 8165 	bne.w	80006a4 <HAL_ADC_ConfigChannel+0x2f0>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80003da:	684a      	ldr	r2, [r1, #4]
 80003dc:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 80003de:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80003e0:	0991      	lsrs	r1, r2, #6
 80003e2:	f001 010c 	and.w	r1, r1, #12
 80003e6:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80003ea:	f002 021f 	and.w	r2, r2, #31
 80003ee:	59ce      	ldr	r6, [r1, r7]
 80003f0:	f04f 0e1f 	mov.w	lr, #31
 80003f4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80003f8:	4093      	lsls	r3, r2
 80003fa:	fa0e f202 	lsl.w	r2, lr, r2
 80003fe:	ea26 0202 	bic.w	r2, r6, r2
 8000402:	4313      	orrs	r3, r2
 8000404:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000406:	f7ff fefe 	bl	8000206 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800040a:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	0712      	lsls	r2, r2, #28
 8000410:	f140 8150 	bpl.w	80006b4 <HAL_ADC_ConfigChannel+0x300>
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000414:	6828      	ldr	r0, [r5, #0]
 8000416:	f7ff fef2 	bl	80001fe <LL_ADC_IsEnabled>
 800041a:	2800      	cmp	r0, #0
 800041c:	d06d      	beq.n	80004fa <HAL_ADC_ConfigChannel+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800041e:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000420:	2300      	movs	r3, #0
 8000422:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 8000426:	b003      	add	sp, #12
 8000428:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800042a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800042c:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800042e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8000432:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8000436:	2e00      	cmp	r6, #0
 8000438:	d13e      	bne.n	80004b8 <HAL_ADC_ConfigChannel+0x104>
 800043a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800043e:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8000440:	bf02      	ittt	eq
 8000442:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000444:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000448:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800044a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800044c:	6822      	ldr	r2, [r4, #0]
 800044e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8000450:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8000454:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8000458:	f100 010c 	add.w	r1, r0, #12
 800045c:	bb8f      	cbnz	r7, 80004c2 <HAL_ADC_ConfigChannel+0x10e>
 800045e:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8000462:	42be      	cmp	r6, r7
 8000464:	f040 8149 	bne.w	80006fa <HAL_ADC_ConfigChannel+0x346>
  MODIFY_REG(*preg,
 8000468:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800046a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800046e:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000470:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000472:	6883      	ldr	r3, [r0, #8]
 8000474:	6883      	ldr	r3, [r0, #8]
 8000476:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047a:	f100 0608 	add.w	r6, r0, #8
 800047e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000482:	bb57      	cbnz	r7, 80004da <HAL_ADC_ConfigChannel+0x126>
 8000484:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000488:	429a      	cmp	r2, r3
 800048a:	f040 813d 	bne.w	8000708 <HAL_ADC_ConfigChannel+0x354>
  MODIFY_REG(*preg,
 800048e:	6833      	ldr	r3, [r6, #0]
 8000490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000494:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000496:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000498:	6823      	ldr	r3, [r4, #0]
 800049a:	68c2      	ldr	r2, [r0, #12]
 800049c:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80004a0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80004a4:	bb20      	cbnz	r0, 80004f0 <HAL_ADC_ConfigChannel+0x13c>
 80004a6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80004aa:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80004ac:	bf02      	ittt	eq
 80004ae:	680b      	ldreq	r3, [r1, #0]
 80004b0:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80004b4:	600b      	streq	r3, [r1, #0]
 80004b6:	e7ad      	b.n	8000414 <HAL_ADC_ConfigChannel+0x60>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004b8:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	e7bd      	b.n	800043e <HAL_ADC_ConfigChannel+0x8a>
 80004c2:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004c6:	fab7 f787 	clz	r7, r7
 80004ca:	42be      	cmp	r6, r7
 80004cc:	d0cc      	beq.n	8000468 <HAL_ADC_ConfigChannel+0xb4>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004ce:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80004d2:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80004d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004d6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80004da:	fa92 f2a2 	rbit	r2, r2
 80004de:	fab2 f282 	clz	r2, r2
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d0d3      	beq.n	800048e <HAL_ADC_ConfigChannel+0xda>
 80004e6:	68c3      	ldr	r3, [r0, #12]
 80004e8:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80004f0:	fa93 f3a3 	rbit	r3, r3
 80004f4:	fab3 f383 	clz	r3, r3
 80004f8:	e7d7      	b.n	80004aa <HAL_ADC_ConfigChannel+0xf6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80004fa:	68e6      	ldr	r6, [r4, #12]
 80004fc:	6828      	ldr	r0, [r5, #0]
 80004fe:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000500:	4a84      	ldr	r2, [pc, #528]	; (8000714 <HAL_ADC_ConfigChannel+0x360>)
 8000502:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8000506:	f006 0e18 	and.w	lr, r6, #24
 800050a:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800050e:	fa22 f20e 	lsr.w	r2, r2, lr
 8000512:	401a      	ands	r2, r3
 8000514:	ea21 0107 	bic.w	r1, r1, r7
 8000518:	430a      	orrs	r2, r1
 800051a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800051e:	4a7e      	ldr	r2, [pc, #504]	; (8000718 <HAL_ADC_ConfigChannel+0x364>)
 8000520:	4296      	cmp	r6, r2
 8000522:	d148      	bne.n	80005b6 <HAL_ADC_ConfigChannel+0x202>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)), sConfig->SamplingTime);
 8000524:	b9df      	cbnz	r7, 800055e <HAL_ADC_ConfigChannel+0x1aa>
 8000526:	0e9e      	lsrs	r6, r3, #26
 8000528:	3601      	adds	r6, #1
 800052a:	f006 021f 	and.w	r2, r6, #31
 800052e:	2a09      	cmp	r2, #9
 8000530:	f04f 0101 	mov.w	r1, #1
 8000534:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000538:	d92b      	bls.n	8000592 <HAL_ADC_ConfigChannel+0x1de>
 800053a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800053e:	4091      	lsls	r1, r2
 8000540:	ea41 0206 	orr.w	r2, r1, r6
 8000544:	2f00      	cmp	r7, #0
 8000546:	d17c      	bne.n	8000642 <HAL_ADC_ConfigChannel+0x28e>
 8000548:	0e9b      	lsrs	r3, r3, #26
 800054a:	3301      	adds	r3, #1
 800054c:	f003 031f 	and.w	r3, r3, #31
 8000550:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000554:	391e      	subs	r1, #30
 8000556:	0509      	lsls	r1, r1, #20
 8000558:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800055c:	e027      	b.n	80005ae <HAL_ADC_ConfigChannel+0x1fa>
 800055e:	fa93 f2a3 	rbit	r2, r3
 8000562:	fab2 f282 	clz	r2, r2
 8000566:	3201      	adds	r2, #1
 8000568:	f002 021f 	and.w	r2, r2, #31
 800056c:	2a09      	cmp	r2, #9
 800056e:	d952      	bls.n	8000616 <HAL_ADC_ConfigChannel+0x262>
 8000570:	fa93 f2a3 	rbit	r2, r3
 8000574:	fab2 f282 	clz	r2, r2
 8000578:	3201      	adds	r2, #1
 800057a:	0692      	lsls	r2, r2, #26
 800057c:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8000580:	fa93 f1a3 	rbit	r1, r3
 8000584:	fab1 f181 	clz	r1, r1
 8000588:	3101      	adds	r1, #1
 800058a:	f001 021f 	and.w	r2, r1, #31
 800058e:	2101      	movs	r1, #1
 8000590:	e7d5      	b.n	800053e <HAL_ADC_ConfigChannel+0x18a>
 8000592:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000596:	4091      	lsls	r1, r2
 8000598:	ea41 0206 	orr.w	r2, r1, r6
 800059c:	2f00      	cmp	r7, #0
 800059e:	d14b      	bne.n	8000638 <HAL_ADC_ConfigChannel+0x284>
 80005a0:	0e99      	lsrs	r1, r3, #26
 80005a2:	3101      	adds	r1, #1
 80005a4:	f001 011f 	and.w	r1, r1, #31
 80005a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80005ac:	0509      	lsls	r1, r1, #20
 80005ae:	4311      	orrs	r1, r2
 80005b0:	68a2      	ldr	r2, [r4, #8]
 80005b2:	f7ff fe13 	bl	80001dc <LL_ADC_SetChannelSamplingTime>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	4a58      	ldr	r2, [pc, #352]	; (800071c <HAL_ADC_ConfigChannel+0x368>)
 80005ba:	421a      	tst	r2, r3
 80005bc:	f43f af2f 	beq.w	800041e <HAL_ADC_ConfigChannel+0x6a>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80005c0:	4f57      	ldr	r7, [pc, #348]	; (8000720 <HAL_ADC_ConfigChannel+0x36c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80005c2:	4a58      	ldr	r2, [pc, #352]	; (8000724 <HAL_ADC_ConfigChannel+0x370>)
 80005c4:	4638      	mov	r0, r7
 80005c6:	6893      	ldr	r3, [r2, #8]
 80005c8:	f7ff fe19 	bl	80001fe <LL_ADC_IsEnabled>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d163      	bne.n	8000698 <HAL_ADC_ConfigChannel+0x2e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80005d0:	6821      	ldr	r1, [r4, #0]
 80005d2:	4855      	ldr	r0, [pc, #340]	; (8000728 <HAL_ADC_ConfigChannel+0x374>)
 80005d4:	4281      	cmp	r1, r0
 80005d6:	f003 76e0 	and.w	r6, r3, #29360128	; 0x1c00000
 80005da:	d137      	bne.n	800064c <HAL_ADC_ConfigChannel+0x298>
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	f53f af1e 	bmi.w	800041e <HAL_ADC_ConfigChannel+0x6a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80005e2:	682b      	ldr	r3, [r5, #0]
 80005e4:	42bb      	cmp	r3, r7
 80005e6:	f47f af1a 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80005ea:	6893      	ldr	r3, [r2, #8]
 80005ec:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80005f0:	4333      	orrs	r3, r6
 80005f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005f6:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80005f8:	4b4c      	ldr	r3, [pc, #304]	; (800072c <HAL_ADC_ConfigChannel+0x378>)
 80005fa:	4a4d      	ldr	r2, [pc, #308]	; (8000730 <HAL_ADC_ConfigChannel+0x37c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8000602:	230c      	movs	r3, #12
 8000604:	4353      	muls	r3, r2
                wait_loop_index--;
 8000606:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8000608:	9b01      	ldr	r3, [sp, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	f43f af07 	beq.w	800041e <HAL_ADC_ConfigChannel+0x6a>
                wait_loop_index--;
 8000610:	9b01      	ldr	r3, [sp, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	e7f7      	b.n	8000606 <HAL_ADC_ConfigChannel+0x252>
 8000616:	fa93 f6a3 	rbit	r6, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)), sConfig->SamplingTime);
 800061a:	fab6 f686 	clz	r6, r6
 800061e:	3601      	adds	r6, #1
 8000620:	06b6      	lsls	r6, r6, #26
 8000622:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000626:	fa93 f1a3 	rbit	r1, r3
 800062a:	fab1 f181 	clz	r1, r1
 800062e:	3101      	adds	r1, #1
 8000630:	f001 021f 	and.w	r2, r1, #31
 8000634:	2101      	movs	r1, #1
 8000636:	e7ae      	b.n	8000596 <HAL_ADC_ConfigChannel+0x1e2>
 8000638:	fa93 f1a3 	rbit	r1, r3
 800063c:	fab1 f181 	clz	r1, r1
 8000640:	e7af      	b.n	80005a2 <HAL_ADC_ConfigChannel+0x1ee>
 8000642:	fa93 f3a3 	rbit	r3, r3
 8000646:	fab3 f383 	clz	r3, r3
 800064a:	e77e      	b.n	800054a <HAL_ADC_ConfigChannel+0x196>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800064c:	4839      	ldr	r0, [pc, #228]	; (8000734 <HAL_ADC_ConfigChannel+0x380>)
 800064e:	4281      	cmp	r1, r0
 8000650:	d10f      	bne.n	8000672 <HAL_ADC_ConfigChannel+0x2be>
 8000652:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 8000656:	f47f aee2 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	42bb      	cmp	r3, r7
 800065e:	f47f aede 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
 8000662:	6893      	ldr	r3, [r2, #8]
 8000664:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000668:	4333      	orrs	r3, r6
 800066a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800066e:	6093      	str	r3, [r2, #8]
 8000670:	e6d6      	b.n	8000420 <HAL_ADC_ConfigChannel+0x6c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000672:	4831      	ldr	r0, [pc, #196]	; (8000738 <HAL_ADC_ConfigChannel+0x384>)
 8000674:	4281      	cmp	r1, r0
 8000676:	f47f aed2 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
 800067a:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 800067e:	f47f aece 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000682:	682b      	ldr	r3, [r5, #0]
 8000684:	42bb      	cmp	r3, r7
 8000686:	f47f aeca 	bne.w	800041e <HAL_ADC_ConfigChannel+0x6a>
 800068a:	6893      	ldr	r3, [r2, #8]
 800068c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000690:	4333      	orrs	r3, r6
 8000692:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000696:	e7ea      	b.n	800066e <HAL_ADC_ConfigChannel+0x2ba>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000698:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800069a:	f043 0320 	orr.w	r3, r3, #32
 800069e:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80006a0:	2001      	movs	r0, #1
 80006a2:	e6bd      	b.n	8000420 <HAL_ADC_ConfigChannel+0x6c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006a4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80006a6:	f042 0220 	orr.w	r2, r2, #32
 80006aa:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6b7      	b.n	8000420 <HAL_ADC_ConfigChannel+0x6c>
  __HAL_LOCK(hadc);
 80006b0:	2002      	movs	r0, #2
 80006b2:	e6b8      	b.n	8000426 <HAL_ADC_ConfigChannel+0x72>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80006b4:	2800      	cmp	r0, #0
 80006b6:	f47f aead 	bne.w	8000414 <HAL_ADC_ConfigChannel+0x60>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80006ba:	4618      	mov	r0, r3
 80006bc:	68a2      	ldr	r2, [r4, #8]
 80006be:	6821      	ldr	r1, [r4, #0]
 80006c0:	f7ff fd8c 	bl	80001dc <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80006c4:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80006c6:	682b      	ldr	r3, [r5, #0]
 80006c8:	6822      	ldr	r2, [r4, #0]
 80006ca:	68d9      	ldr	r1, [r3, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80006cc:	2e04      	cmp	r6, #4
 80006ce:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80006d2:	f43f aeaa 	beq.w	800042a <HAL_ADC_ConfigChannel+0x76>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80006d6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 80006da:	0059      	lsls	r1, r3, #1
 80006dc:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 80006de:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80006e2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80006e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006ea:	408b      	lsls	r3, r1
 80006ec:	4313      	orrs	r3, r2
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <HAL_ADC_ConfigChannel+0x388>)
 80006f0:	403a      	ands	r2, r7
 80006f2:	4313      	orrs	r3, r2
 80006f4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 80006f8:	e68c      	b.n	8000414 <HAL_ADC_ConfigChannel+0x60>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006fa:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80006fe:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8000700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000702:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000706:	e6bd      	b.n	8000484 <HAL_ADC_ConfigChannel+0xd0>
 8000708:	68c3      	ldr	r3, [r0, #12]
 800070a:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000712:	e6c8      	b.n	80004a6 <HAL_ADC_ConfigChannel+0xf2>
 8000714:	0007ffff 	.word	0x0007ffff
 8000718:	407f0000 	.word	0x407f0000
 800071c:	80080000 	.word	0x80080000
 8000720:	50040000 	.word	0x50040000
 8000724:	50040300 	.word	0x50040300
 8000728:	c7520000 	.word	0xc7520000
 800072c:	20000010 	.word	0x20000010
 8000730:	00030d40 	.word	0x00030d40
 8000734:	cb840000 	.word	0xcb840000
 8000738:	80000001 	.word	0x80000001
 800073c:	03fff000 	.word	0x03fff000

08000740 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000742:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000744:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	0c1b      	lsrs	r3, r3, #16
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000750:	0200      	lsls	r0, r0, #8
 8000752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000756:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800075a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800075c:	60d3      	str	r3, [r2, #12]
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	68dc      	ldr	r4, [r3, #12]
 800076a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	2b04      	cmp	r3, #4
 8000776:	bf28      	it	cs
 8000778:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	f04f 0501 	mov.w	r5, #1
 8000780:	fa05 f303 	lsl.w	r3, r5, r3
 8000784:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000788:	bf8c      	ite	hi
 800078a:	3c03      	subhi	r4, #3
 800078c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078e:	4019      	ands	r1, r3
 8000790:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000792:	fa05 f404 	lsl.w	r4, r5, r4
 8000796:	3c01      	subs	r4, #1
 8000798:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800079a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	ea42 0201 	orr.w	r2, r2, r1
 80007a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	bfaf      	iteee	ge
 80007a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	f000 000f 	andlt.w	r0, r0, #15
 80007ae:	4b06      	ldrlt	r3, [pc, #24]	; (80007c8 <HAL_NVIC_SetPriority+0x64>)
 80007b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	bfa5      	ittet	ge
 80007b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80007b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80007c0:	bd30      	pop	{r4, r5, pc}
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00
 80007c8:	e000ed14 	.word	0xe000ed14

080007cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007cc:	0942      	lsrs	r2, r0, #5
 80007ce:	2301      	movs	r3, #1
 80007d0:	f000 001f 	and.w	r0, r0, #31
 80007d4:	fa03 f000 	lsl.w	r0, r3, r0
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <HAL_NVIC_EnableIRQ+0x14>)
 80007da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80007e8:	4a55      	ldr	r2, [pc, #340]	; (8000940 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ea:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 80007ee:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007f0:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f4:	fa38 f403 	lsrs.w	r4, r8, r3
 80007f8:	d101      	bne.n	80007fe <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 80007fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007fe:	2401      	movs	r4, #1
 8000800:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000804:	ea18 050a 	ands.w	r5, r8, sl
 8000808:	f000 808f 	beq.w	800092a <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080c:	684c      	ldr	r4, [r1, #4]
 800080e:	f024 0b10 	bic.w	fp, r4, #16
 8000812:	f1bb 0f02 	cmp.w	fp, #2
 8000816:	d111      	bne.n	800083c <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8000818:	08df      	lsrs	r7, r3, #3
 800081a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800081e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000822:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000824:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000828:	fa09 fc0e 	lsl.w	ip, r9, lr
 800082c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000830:	690e      	ldr	r6, [r1, #16]
 8000832:	fa06 f60e 	lsl.w	r6, r6, lr
 8000836:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 800083a:	623e      	str	r6, [r7, #32]
 800083c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000840:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000842:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000844:	fa07 f70c 	lsl.w	r7, r7, ip
 8000848:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800084a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800084e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000850:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000854:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000858:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085c:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000860:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000862:	d811      	bhi.n	8000888 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8000864:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000866:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800086a:	68ce      	ldr	r6, [r1, #12]
 800086c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000870:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000874:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000876:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000878:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800087c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000880:	409e      	lsls	r6, r3
 8000882:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000886:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000888:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800088a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800088c:	688e      	ldr	r6, [r1, #8]
 800088e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000892:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000894:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000896:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000898:	d547      	bpl.n	800092a <HAL_GPIO_Init+0x146>
 800089a:	f023 0703 	bic.w	r7, r3, #3
 800089e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80008a2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008a6:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80008aa:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008ac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008b0:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008b4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008b8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008bc:	d037      	beq.n	800092e <HAL_GPIO_Init+0x14a>
 80008be:	4e21      	ldr	r6, [pc, #132]	; (8000944 <HAL_GPIO_Init+0x160>)
 80008c0:	42b0      	cmp	r0, r6
 80008c2:	d036      	beq.n	8000932 <HAL_GPIO_Init+0x14e>
 80008c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008c8:	42b0      	cmp	r0, r6
 80008ca:	d034      	beq.n	8000936 <HAL_GPIO_Init+0x152>
 80008cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008d0:	42b0      	cmp	r0, r6
 80008d2:	d032      	beq.n	800093a <HAL_GPIO_Init+0x156>
 80008d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008d8:	42b0      	cmp	r0, r6
 80008da:	bf14      	ite	ne
 80008dc:	2607      	movne	r6, #7
 80008de:	2604      	moveq	r6, #4
 80008e0:	fa06 f60e 	lsl.w	r6, r6, lr
 80008e4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008e8:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80008ea:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80008ee:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80008f4:	bf0c      	ite	eq
 80008f6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80008f8:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 80008fa:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 80008fe:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000902:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000906:	bf0c      	ite	eq
 8000908:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800090a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800090c:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000910:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000912:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000916:	bf0c      	ite	eq
 8000918:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800091a:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800091c:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800091e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000920:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000922:	bf54      	ite	pl
 8000924:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000926:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000928:	6056      	str	r6, [r2, #4]
    position++;
 800092a:	3301      	adds	r3, #1
 800092c:	e762      	b.n	80007f4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800092e:	2600      	movs	r6, #0
 8000930:	e7d6      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 8000932:	2601      	movs	r6, #1
 8000934:	e7d4      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 8000936:	2602      	movs	r6, #2
 8000938:	e7d2      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 800093a:	2603      	movs	r6, #3
 800093c:	e7d0      	b.n	80008e0 <HAL_GPIO_Init+0xfc>
 800093e:	bf00      	nop
 8000940:	58000800 	.word	0x58000800
 8000944:	48000400 	.word	0x48000400

08000948 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000948:	b10a      	cbz	r2, 800094e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800094a:	6181      	str	r1, [r0, #24]
 800094c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800094e:	6281      	str	r1, [r0, #40]	; 0x28
 8000950:	4770      	bx	lr

08000952 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000952:	6943      	ldr	r3, [r0, #20]
 8000954:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000956:	bf14      	ite	ne
 8000958:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800095a:	6181      	streq	r1, [r0, #24]
 800095c:	4770      	bx	lr

0800095e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800095e:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000960:	4604      	mov	r4, r0
 8000962:	2800      	cmp	r0, #0
 8000964:	d04a      	beq.n	80009fc <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000966:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800096a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800096e:	b91b      	cbnz	r3, 8000978 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000970:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000974:	f003 f828 	bl	80039c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000978:	2324      	movs	r3, #36	; 0x24
 800097a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800097e:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000980:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	f022 0201 	bic.w	r2, r2, #1
 8000988:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800098a:	6862      	ldr	r2, [r4, #4]
 800098c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000990:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000992:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000994:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800099e:	d124      	bne.n	80009ea <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80009a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009a4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80009a6:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80009a8:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80009aa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80009ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80009b4:	68da      	ldr	r2, [r3, #12]
 80009b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80009bc:	6922      	ldr	r2, [r4, #16]
 80009be:	430a      	orrs	r2, r1
 80009c0:	69a1      	ldr	r1, [r4, #24]
 80009c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80009c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80009c8:	6a21      	ldr	r1, [r4, #32]
 80009ca:	69e2      	ldr	r2, [r4, #28]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	f042 0201 	orr.w	r2, r2, #1
 80009d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009d8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80009da:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009dc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80009de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80009e2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009e4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80009e8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80009ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80009ee:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80009f0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80009f2:	bf04      	itt	eq
 80009f4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80009f8:	605a      	streq	r2, [r3, #4]
 80009fa:	e7d4      	b.n	80009a6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
}
 80009fe:	bd10      	pop	{r4, pc}

08000a00 <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000a00:	6802      	ldr	r2, [r0, #0]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8000a02:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000a04:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000a06:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000a08:	b103      	cbz	r3, 8000a0c <HAL_I2C_EV_IRQHandler+0xc>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8000a0a:	4718      	bx	r3
 8000a0c:	4770      	bx	lr

08000a0e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a0e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	2a20      	cmp	r2, #32
{
 8000a16:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a18:	d11d      	bne.n	8000a56 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a1a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d019      	beq.n	8000a56 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a22:	2324      	movs	r3, #36	; 0x24
 8000a24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a28:	6803      	ldr	r3, [r0, #0]
 8000a2a:	681c      	ldr	r4, [r3, #0]
 8000a2c:	f024 0401 	bic.w	r4, r4, #1
 8000a30:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000a38:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4321      	orrs	r1, r4
 8000a3e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a40:	6819      	ldr	r1, [r3, #0]
 8000a42:	f041 0101 	orr.w	r1, r1, #1
 8000a46:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a48:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a4a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000a4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000a56:	2002      	movs	r0, #2
  }
}
 8000a58:	bd10      	pop	{r4, pc}

08000a5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a5a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a5c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000a60:	b2e4      	uxtb	r4, r4
 8000a62:	2c20      	cmp	r4, #32
 8000a64:	d11c      	bne.n	8000aa0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a66:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d018      	beq.n	8000aa0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a6e:	2324      	movs	r3, #36	; 0x24
 8000a70:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a74:	6803      	ldr	r3, [r0, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f022 0201 	bic.w	r2, r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a7e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a80:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a84:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a88:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	f042 0201 	orr.w	r2, r2, #1
 8000a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a92:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a94:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000a98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000aa0:	2002      	movs	r0, #2
  }
}
 8000aa2:	bd10      	pop	{r4, pc}

08000aa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000aa4:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000aa6:	4604      	mov	r4, r0
{
 8000aa8:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d057      	beq.n	8000b5e <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000aae:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000ab2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ab6:	b91b      	cbnz	r3, 8000ac0 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ab8:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000abc:	f003 faaa 	bl	8004014 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ac6:	6820      	ldr	r0, [r4, #0]
 8000ac8:	f001 fabb 	bl	8002042 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000acc:	2200      	movs	r2, #0
 8000ace:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ad0:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ad2:	4615      	mov	r5, r2
 8000ad4:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ad6:	4298      	cmp	r0, r3
 8000ad8:	f102 0201 	add.w	r2, r2, #1
 8000adc:	d820      	bhi.n	8000b20 <HAL_PCD_Init+0x7c>
 8000ade:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	f102 0201 	add.w	r2, r2, #1
 8000aea:	d828      	bhi.n	8000b3e <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000aec:	f104 0610 	add.w	r6, r4, #16
 8000af0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000af2:	466d      	mov	r5, sp
 8000af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af6:	6833      	ldr	r3, [r6, #0]
 8000af8:	602b      	str	r3, [r5, #0]
 8000afa:	1d23      	adds	r3, r4, #4
 8000afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000afe:	6820      	ldr	r0, [r4, #0]
 8000b00:	f001 faa9 	bl	8002056 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000b04:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8000b06:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000b08:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000b0c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b10:	69e3      	ldr	r3, [r4, #28]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d102      	bne.n	8000b1c <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b16:	4620      	mov	r0, r4
 8000b18:	f000 f824 	bl	8000b64 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	e01f      	b.n	8000b60 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 8000b20:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8000b24:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b28:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8000b2e:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b32:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b36:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b38:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b3a:	50e5      	str	r5, [r4, r3]
 8000b3c:	e7ca      	b.n	8000ad4 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8000b3e:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8000b42:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b46:	330a      	adds	r3, #10
 8000b48:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000b4a:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b4e:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b52:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b56:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b5a:	50e1      	str	r1, [r4, r3]
 8000b5c:	e7c1      	b.n	8000ae2 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000b5e:	2001      	movs	r0, #1
}
 8000b60:	b006      	add	sp, #24
 8000b62:	bd70      	pop	{r4, r5, r6, pc}

08000b64 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000b64:	6802      	ldr	r2, [r0, #0]
{
 8000b66:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000b68:	2101      	movs	r1, #1
 8000b6a:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000b74:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000b80:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b90:	4a02      	ldr	r2, [pc, #8]	; (8000b9c <HAL_PWR_EnableBkUpAccess+0xc>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4770      	bx	lr
 8000b9c:	58000400 	.word	0x58000400

08000ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <HAL_PWREx_GetVoltageRange+0xc>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
}
 8000ba4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	58000400 	.word	0x58000400

08000bb0 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb4:	6818      	ldr	r0, [r3, #0]
}
 8000bb6:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000bba:	4770      	bx	lr

08000bbc <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc0:	6818      	ldr	r0, [r3, #0]
}
 8000bc2:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8000bc6:	4770      	bx	lr

08000bc8 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bcc:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8000bd0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000bd4:	4770      	bx	lr

08000bd6 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bda:	6818      	ldr	r0, [r3, #0]
}
 8000bdc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000be0:	4770      	bx	lr

08000be2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000be6:	6813      	ldr	r3, [r2, #0]
 8000be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bec:	4318      	orrs	r0, r3
 8000bee:	6010      	str	r0, [r2, #0]
 8000bf0:	4770      	bx	lr

08000bf2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if(msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 8000bfc:	28b0      	cmp	r0, #176	; 0xb0
 8000bfe:	bf28      	it	cs
 8000c00:	20b0      	movcs	r0, #176	; 0xb0
 8000c02:	4770      	bx	lr

08000c04 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c08:	6853      	ldr	r3, [r2, #4]
 8000c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c0e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000c12:	6050      	str	r0, [r2, #4]
 8000c14:	4770      	bx	lr

08000c16 <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1a:	6818      	ldr	r0, [r3, #0]
}
 8000c1c:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000c20:	4770      	bx	lr
	...

08000c24 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 8000c24:	28b0      	cmp	r0, #176	; 0xb0
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000c28:	4a32      	ldr	r2, [pc, #200]	; (8000cf4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8000c2a:	bf98      	it	ls
 8000c2c:	0900      	lsrls	r0, r0, #4
{
 8000c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8000c30:	bf8c      	ite	hi
 8000c32:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8000c34:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000c38:	4c2f      	ldr	r4, [pc, #188]	; (8000cf8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000c3e:	b08d      	sub	sp, #52	; 0x34
 8000c40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000c44:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000c48:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4e:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8000c54:	fbb5 f5f3 	udiv	r5, r5, r3
 8000c58:	f7ff ffa2 	bl	8000ba0 <HAL_PWREx_GetVoltageRange>
 8000c5c:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000c5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c62:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8000c66:	f104 0210 	add.w	r2, r4, #16
 8000c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c6c:	ab01      	add	r3, sp, #4
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000c6e:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8000c70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000c74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c78:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000c7c:	ac0c      	add	r4, sp, #48	; 0x30
 8000c7e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c82:	d11f      	bne.n	8000cc4 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8000c84:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8000c86:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8000c8a:	4295      	cmp	r5, r2
 8000c8c:	d815      	bhi.n	8000cba <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 8000c8e:	aa0c      	add	r2, sp, #48	; 0x30
 8000c90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000c94:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000c98:	4d19      	ldr	r5, [pc, #100]	; (8000d00 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	f023 0307 	bic.w	r3, r3, #7
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000ca4:	f7ff fa8e 	bl	80001c4 <HAL_GetTick>
 8000ca8:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	d116      	bne.n	8000ce2 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000cb4:	2000      	movs	r0, #0
}
 8000cb6:	b00d      	add	sp, #52	; 0x34
 8000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8000cba:	3301      	adds	r3, #1
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d1e2      	bne.n	8000c86 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8000cc0:	2400      	movs	r4, #0
 8000cc2:	e7e9      	b.n	8000c98 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000cc4:	9b01      	ldr	r3, [sp, #4]
 8000cc6:	429d      	cmp	r5, r3
 8000cc8:	d907      	bls.n	8000cda <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8000cca:	9b02      	ldr	r3, [sp, #8]
 8000ccc:	429d      	cmp	r5, r3
 8000cce:	d906      	bls.n	8000cde <RCC_SetFlashLatencyFromMSIRange+0xba>
 8000cd0:	9b03      	ldr	r3, [sp, #12]
 8000cd2:	429d      	cmp	r5, r3
 8000cd4:	d8f4      	bhi.n	8000cc0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e7d9      	b.n	8000c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e7d7      	b.n	8000c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e7d5      	b.n	8000c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8000ce2:	f7ff fa6f 	bl	80001c4 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	2802      	cmp	r0, #2
 8000cea:	d9de      	bls.n	8000caa <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 8000cec:	2003      	movs	r0, #3
 8000cee:	e7e2      	b.n	8000cb6 <RCC_SetFlashLatencyFromMSIRange+0x92>
 8000cf0:	08004248 	.word	0x08004248
 8000cf4:	080041e8 	.word	0x080041e8
 8000cf8:	08004138 	.word	0x08004138
 8000cfc:	000f4240 	.word	0x000f4240
 8000d00:	58004000 	.word	0x58004000

08000d04 <HAL_RCC_OscConfig>:
{
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(RCC_OscInitStruct == NULL)
 8000d06:	4604      	mov	r4, r0
 8000d08:	b908      	cbnz	r0, 8000d0e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d0e:	6803      	ldr	r3, [r0, #0]
 8000d10:	069d      	lsls	r5, r3, #26
 8000d12:	d529      	bpl.n	8000d68 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d18:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000d1a:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000d1c:	f013 030c 	ands.w	r3, r3, #12
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x2a>
 8000d22:	2b0c      	cmp	r3, #12
 8000d24:	d145      	bne.n	8000db2 <HAL_RCC_OscConfig+0xae>
 8000d26:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d141      	bne.n	8000db2 <HAL_RCC_OscConfig+0xae>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d2e:	f7ff ff52 	bl	8000bd6 <LL_RCC_MSI_IsReady>
 8000d32:	b110      	cbz	r0, 8000d3a <HAL_RCC_OscConfig+0x36>
 8000d34:	69e3      	ldr	r3, [r4, #28]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0e7      	beq.n	8000d0a <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d3c:	f7ff ff59 	bl	8000bf2 <LL_RCC_MSI_GetRange>
 8000d40:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d44:	d92a      	bls.n	8000d9c <HAL_RCC_OscConfig+0x98>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d46:	f7ff ff6d 	bl	8000c24 <RCC_SetFlashLatencyFromMSIRange>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d1dd      	bne.n	8000d0a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000d50:	f7ff ff47 	bl	8000be2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d54:	6a20      	ldr	r0, [r4, #32]
 8000d56:	f7ff ff55 	bl	8000c04 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();  
 8000d5a:	f003 f85b 	bl	8003e14 <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f002 ffd2 	bl	8003d08 <HAL_InitTick>
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d1d0      	bne.n	8000d0a <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	07d8      	lsls	r0, r3, #31
 8000d6c:	d44e      	bmi.n	8000e0c <HAL_RCC_OscConfig+0x108>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	0799      	lsls	r1, r3, #30
 8000d72:	f100 8098 	bmi.w	8000ea6 <HAL_RCC_OscConfig+0x1a2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	f013 0f18 	tst.w	r3, #24
 8000d7c:	f040 80d9 	bne.w	8000f32 <HAL_RCC_OscConfig+0x22e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	075a      	lsls	r2, r3, #29
 8000d84:	f100 8165 	bmi.w	8001052 <HAL_RCC_OscConfig+0x34e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	065a      	lsls	r2, r3, #25
 8000d8c:	f100 81b7 	bmi.w	80010fe <HAL_RCC_OscConfig+0x3fa>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000d90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d92:	2900      	cmp	r1, #0
 8000d94:	f040 81df 	bne.w	8001156 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 8000d98:	2000      	movs	r0, #0
 8000d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9c:	f7ff ff21 	bl	8000be2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000da0:	6a20      	ldr	r0, [r4, #32]
 8000da2:	f7ff ff2f 	bl	8000c04 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000da8:	f7ff ff3c 	bl	8000c24 <RCC_SetFlashLatencyFromMSIRange>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d0d4      	beq.n	8000d5a <HAL_RCC_OscConfig+0x56>
 8000db0:	e7ab      	b.n	8000d0a <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000db2:	69e2      	ldr	r2, [r4, #28]
 8000db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db8:	b1ba      	cbz	r2, 8000dea <HAL_RCC_OscConfig+0xe6>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	f042 0201 	orr.w	r2, r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc2:	f7ff f9ff 	bl	80001c4 <HAL_GetTick>
 8000dc6:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8000dc8:	f7ff ff05 	bl	8000bd6 <LL_RCC_MSI_IsReady>
 8000dcc:	b130      	cbz	r0, 8000ddc <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000dd0:	f7ff ff07 	bl	8000be2 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd4:	6a20      	ldr	r0, [r4, #32]
 8000dd6:	f7ff ff15 	bl	8000c04 <LL_RCC_MSI_SetCalibTrimming>
 8000dda:	e7c5      	b.n	8000d68 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ddc:	f7ff f9f2 	bl	80001c4 <HAL_GetTick>
 8000de0:	1b40      	subs	r0, r0, r5
 8000de2:	2802      	cmp	r0, #2
 8000de4:	d9f0      	bls.n	8000dc8 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8000de6:	2003      	movs	r0, #3
 8000de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	f022 0201 	bic.w	r2, r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000df2:	f7ff f9e7 	bl	80001c4 <HAL_GetTick>
 8000df6:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8000df8:	f7ff feed 	bl	8000bd6 <LL_RCC_MSI_IsReady>
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d0b3      	beq.n	8000d68 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e00:	f7ff f9e0 	bl	80001c4 <HAL_GetTick>
 8000e04:	1b40      	subs	r0, r0, r5
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9f6      	bls.n	8000df8 <HAL_RCC_OscConfig+0xf4>
 8000e0a:	e7ec      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e10:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000e12:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e14:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d005      	beq.n	8000e28 <HAL_RCC_OscConfig+0x124>
 8000e1c:	2b0c      	cmp	r3, #12
 8000e1e:	d10b      	bne.n	8000e38 <HAL_RCC_OscConfig+0x134>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000e20:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d107      	bne.n	8000e38 <HAL_RCC_OscConfig+0x134>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	f7ff fec2 	bl	8000bb0 <LL_RCC_HSE_IsReady>
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	d09e      	beq.n	8000d6e <HAL_RCC_OscConfig+0x6a>
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d19b      	bne.n	8000d6e <HAL_RCC_OscConfig+0x6a>
 8000e36:	e768      	b.n	8000d0a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e38:	6862      	ldr	r2, [r4, #4]
 8000e3a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	d110      	bne.n	8000e66 <HAL_RCC_OscConfig+0x162>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e4c:	f7ff f9ba 	bl	80001c4 <HAL_GetTick>
 8000e50:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8000e52:	f7ff fead 	bl	8000bb0 <LL_RCC_HSE_IsReady>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d189      	bne.n	8000d6e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5a:	f7ff f9b3 	bl	80001c4 <HAL_GetTick>
 8000e5e:	1b40      	subs	r0, r0, r5
 8000e60:	2864      	cmp	r0, #100	; 0x64
 8000e62:	d9f6      	bls.n	8000e52 <HAL_RCC_OscConfig+0x14e>
 8000e64:	e7bf      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e66:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000e6a:	d104      	bne.n	8000e76 <HAL_RCC_OscConfig+0x172>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e7e6      	b.n	8000e44 <HAL_RCC_OscConfig+0x140>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e76:	6819      	ldr	r1, [r3, #0]
 8000e78:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000e7c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000e84:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d1e0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8000e8a:	f7ff f99b 	bl	80001c4 <HAL_GetTick>
 8000e8e:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8000e90:	f7ff fe8e 	bl	8000bb0 <LL_RCC_HSE_IsReady>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	f43f af6a 	beq.w	8000d6e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9a:	f7ff f993 	bl	80001c4 <HAL_GetTick>
 8000e9e:	1b40      	subs	r0, r0, r5
 8000ea0:	2864      	cmp	r0, #100	; 0x64
 8000ea2:	d9f5      	bls.n	8000e90 <HAL_RCC_OscConfig+0x18c>
 8000ea4:	e79f      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eaa:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000eac:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000eae:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d005      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1be>
 8000eb6:	2b0c      	cmp	r3, #12
 8000eb8:	d114      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x1e0>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000eba:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d110      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x1e0>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ec2:	f7ff fe7b 	bl	8000bbc <LL_RCC_HSI_IsReady>
 8000ec6:	b118      	cbz	r0, 8000ed0 <HAL_RCC_OscConfig+0x1cc>
 8000ec8:	68e3      	ldr	r3, [r4, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f43f af1d 	beq.w	8000d0a <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed4:	6921      	ldr	r1, [r4, #16]
 8000ed6:	6853      	ldr	r3, [r2, #4]
 8000ed8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000edc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000ee0:	6053      	str	r3, [r2, #4]
 8000ee2:	e748      	b.n	8000d76 <HAL_RCC_OscConfig+0x72>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee4:	68e2      	ldr	r2, [r4, #12]
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	b182      	cbz	r2, 8000f0e <HAL_RCC_OscConfig+0x20a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ef4:	f7ff f966 	bl	80001c4 <HAL_GetTick>
 8000ef8:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8000efa:	f7ff fe5f 	bl	8000bbc <LL_RCC_HSI_IsReady>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d1e6      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f02:	f7ff f95f 	bl	80001c4 <HAL_GetTick>
 8000f06:	1b40      	subs	r0, r0, r5
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f6      	bls.n	8000efa <HAL_RCC_OscConfig+0x1f6>
 8000f0c:	e76b      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f16:	f7ff f955 	bl	80001c4 <HAL_GetTick>
 8000f1a:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8000f1c:	f7ff fe4e 	bl	8000bbc <LL_RCC_HSI_IsReady>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	f43f af28 	beq.w	8000d76 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff f94d 	bl	80001c4 <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d9f5      	bls.n	8000f1c <HAL_RCC_OscConfig+0x218>
 8000f30:	e759      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f32:	6962      	ldr	r2, [r4, #20]
 8000f34:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d06b      	beq.n	8001014 <HAL_RCC_OscConfig+0x310>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8000f3c:	06db      	lsls	r3, r3, #27
 8000f3e:	d543      	bpl.n	8000fc8 <HAL_RCC_OscConfig+0x2c4>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8000f40:	f7ff fe42 	bl	8000bc8 <LL_RCC_LSI1_IsReady>
 8000f44:	b310      	cbz	r0, 8000f8c <HAL_RCC_OscConfig+0x288>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000f46:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000f4a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000f56:	f7ff f935 	bl	80001c4 <HAL_GetTick>
 8000f5a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000f5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000f60:	071f      	lsls	r7, r3, #28
 8000f62:	f140 8178 	bpl.w	8001256 <HAL_RCC_OscConfig+0x552>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000f66:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000f6a:	69a2      	ldr	r2, [r4, #24]
 8000f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f74:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000f78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000f84:	f7ff f91e 	bl	80001c4 <HAL_GetTick>
 8000f88:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000f8a:	e018      	b.n	8000fbe <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000f8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8000f98:	f7ff f914 	bl	80001c4 <HAL_GetTick>
 8000f9c:	4605      	mov	r5, r0
          while(LL_RCC_LSI1_IsReady() == 0U)
 8000f9e:	f7ff fe13 	bl	8000bc8 <LL_RCC_LSI1_IsReady>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	d1cf      	bne.n	8000f46 <HAL_RCC_OscConfig+0x242>
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000fa6:	f7ff f90d 	bl	80001c4 <HAL_GetTick>
 8000faa:	1b40      	subs	r0, r0, r5
 8000fac:	2802      	cmp	r0, #2
 8000fae:	d9f6      	bls.n	8000f9e <HAL_RCC_OscConfig+0x29a>
 8000fb0:	e719      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000fb2:	f7ff f907 	bl	80001c4 <HAL_GetTick>
 8000fb6:	1b40      	subs	r0, r0, r5
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	f63f af14 	bhi.w	8000de6 <HAL_RCC_OscConfig+0xe2>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000fbe:	f7ff fe03 	bl	8000bc8 <LL_RCC_LSI1_IsReady>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d1f5      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x2ae>
 8000fc6:	e6db      	b.n	8000d80 <HAL_RCC_OscConfig+0x7c>
 8000fc8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000fd4:	f7ff f8f6 	bl	80001c4 <HAL_GetTick>
 8000fd8:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8000fda:	f7ff fdf5 	bl	8000bc8 <LL_RCC_LSI1_IsReady>
 8000fde:	b198      	cbz	r0, 8001008 <HAL_RCC_OscConfig+0x304>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000fe4:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000fe6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000fea:	f022 0204 	bic.w	r2, r2, #4
 8000fee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ff2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000ff6:	0718      	lsls	r0, r3, #28
 8000ff8:	f57f aec2 	bpl.w	8000d80 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000ffc:	f7ff f8e2 	bl	80001c4 <HAL_GetTick>
 8001000:	1b80      	subs	r0, r0, r6
 8001002:	2803      	cmp	r0, #3
 8001004:	d9f5      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x2ee>
 8001006:	e6ee      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001008:	f7ff f8dc 	bl	80001c4 <HAL_GetTick>
 800100c:	1b80      	subs	r0, r0, r6
 800100e:	2802      	cmp	r0, #2
 8001010:	d9e3      	bls.n	8000fda <HAL_RCC_OscConfig+0x2d6>
 8001012:	e6e8      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001014:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001018:	f023 0304 	bic.w	r3, r3, #4
 800101c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001020:	f7ff f8d0 	bl	80001c4 <HAL_GetTick>
 8001024:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001026:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800102a:	0719      	lsls	r1, r3, #28
 800102c:	f140 811a 	bpl.w	8001264 <HAL_RCC_OscConfig+0x560>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001030:	f7ff f8c8 	bl	80001c4 <HAL_GetTick>
 8001034:	1b80      	subs	r0, r0, r6
 8001036:	2803      	cmp	r0, #3
 8001038:	d9f5      	bls.n	8001026 <HAL_RCC_OscConfig+0x322>
 800103a:	e6d4      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800103c:	f7ff f8c2 	bl	80001c4 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	2802      	cmp	r0, #2
 8001044:	f63f aecf 	bhi.w	8000de6 <HAL_RCC_OscConfig+0xe2>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001048:	f7ff fdbe 	bl	8000bc8 <LL_RCC_LSI1_IsReady>
 800104c:	2800      	cmp	r0, #0
 800104e:	d1f5      	bne.n	800103c <HAL_RCC_OscConfig+0x338>
 8001050:	e696      	b.n	8000d80 <HAL_RCC_OscConfig+0x7c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001052:	4d89      	ldr	r5, [pc, #548]	; (8001278 <HAL_RCC_OscConfig+0x574>)
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	d51c      	bpl.n	8001094 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105a:	68a3      	ldr	r3, [r4, #8]
 800105c:	2b01      	cmp	r3, #1
 800105e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001062:	d125      	bne.n	80010b0 <HAL_RCC_OscConfig+0x3ac>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001064:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001070:	f7ff f8a8 	bl	80001c4 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001074:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001078:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f241 3588 	movw	r5, #5000	; 0x1388
 800107e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001082:	0798      	lsls	r0, r3, #30
 8001084:	f53f ae80 	bmi.w	8000d88 <HAL_RCC_OscConfig+0x84>
 8001088:	f7ff f89c 	bl	80001c4 <HAL_GetTick>
 800108c:	1b80      	subs	r0, r0, r6
 800108e:	42a8      	cmp	r0, r5
 8001090:	d9f5      	bls.n	800107e <HAL_RCC_OscConfig+0x37a>
 8001092:	e6a8      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
      HAL_PWR_EnableBkUpAccess();
 8001094:	f7ff fd7c 	bl	8000b90 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001098:	f7ff f894 	bl	80001c4 <HAL_GetTick>
 800109c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	05df      	lsls	r7, r3, #23
 80010a2:	d4da      	bmi.n	800105a <HAL_RCC_OscConfig+0x356>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a4:	f7ff f88e 	bl	80001c4 <HAL_GetTick>
 80010a8:	1b80      	subs	r0, r0, r6
 80010aa:	2802      	cmp	r0, #2
 80010ac:	d9f7      	bls.n	800109e <HAL_RCC_OscConfig+0x39a>
 80010ae:	e69a      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80010b4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80010c0:	e7d0      	b.n	8001064 <HAL_RCC_OscConfig+0x360>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80010c2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80010ce:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80010d2:	f022 0204 	bic.w	r2, r2, #4
 80010d6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1c8      	bne.n	8001070 <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 80010de:	f7ff f871 	bl	80001c4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010e6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80010e8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80010ec:	0799      	lsls	r1, r3, #30
 80010ee:	f57f ae4b 	bpl.w	8000d88 <HAL_RCC_OscConfig+0x84>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff f867 	bl	80001c4 <HAL_GetTick>
 80010f6:	1bc0      	subs	r0, r0, r7
 80010f8:	42b0      	cmp	r0, r6
 80010fa:	d9f5      	bls.n	80010e8 <HAL_RCC_OscConfig+0x3e4>
 80010fc:	e673      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001100:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001104:	b19b      	cbz	r3, 800112e <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001106:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001112:	f7ff f857 	bl	80001c4 <HAL_GetTick>
 8001116:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001118:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800111c:	079a      	lsls	r2, r3, #30
 800111e:	f53f ae37 	bmi.w	8000d90 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001122:	f7ff f84f 	bl	80001c4 <HAL_GetTick>
 8001126:	1b80      	subs	r0, r0, r6
 8001128:	2802      	cmp	r0, #2
 800112a:	d9f5      	bls.n	8001118 <HAL_RCC_OscConfig+0x414>
 800112c:	e65b      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800112e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800113a:	f7ff f843 	bl	80001c4 <HAL_GetTick>
 800113e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001140:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001144:	079b      	lsls	r3, r3, #30
 8001146:	f57f ae23 	bpl.w	8000d90 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800114a:	f7ff f83b 	bl	80001c4 <HAL_GetTick>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	2802      	cmp	r0, #2
 8001152:	d9f5      	bls.n	8001140 <HAL_RCC_OscConfig+0x43c>
 8001154:	e647      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001160:	2a0c      	cmp	r2, #12
 8001162:	d052      	beq.n	800120a <HAL_RCC_OscConfig+0x506>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001164:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001166:	2902      	cmp	r1, #2
 8001168:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	d134      	bne.n	80011da <HAL_RCC_OscConfig+0x4d6>
        tickstart = HAL_GetTick();
 8001170:	f7ff f828 	bl	80001c4 <HAL_GetTick>
 8001174:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001176:	f7ff fd4e 	bl	8000c16 <LL_RCC_PLL_IsReady>
 800117a:	bb40      	cbnz	r0, 80011ce <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800117c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001184:	68d0      	ldr	r0, [r2, #12]
 8001186:	430b      	orrs	r3, r1
 8001188:	493c      	ldr	r1, [pc, #240]	; (800127c <HAL_RCC_OscConfig+0x578>)
 800118a:	4001      	ands	r1, r0
 800118c:	430b      	orrs	r3, r1
 800118e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001190:	430b      	orrs	r3, r1
 8001192:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001194:	430b      	orrs	r3, r1
 8001196:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001198:	430b      	orrs	r3, r1
 800119a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800119c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011a0:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011a2:	6813      	ldr	r3, [r2, #0]
 80011a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011a8:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011aa:	68d3      	ldr	r3, [r2, #12]
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80011b2:	f7ff f807 	bl	80001c4 <HAL_GetTick>
 80011b6:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 80011b8:	f7ff fd2d 	bl	8000c16 <LL_RCC_PLL_IsReady>
 80011bc:	2800      	cmp	r0, #0
 80011be:	f47f adeb 	bne.w	8000d98 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7fe ffff 	bl	80001c4 <HAL_GetTick>
 80011c6:	1b00      	subs	r0, r0, r4
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9f5      	bls.n	80011b8 <HAL_RCC_OscConfig+0x4b4>
 80011cc:	e60b      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ce:	f7fe fff9 	bl	80001c4 <HAL_GetTick>
 80011d2:	1b40      	subs	r0, r0, r5
 80011d4:	2802      	cmp	r0, #2
 80011d6:	d9ce      	bls.n	8001176 <HAL_RCC_OscConfig+0x472>
 80011d8:	e605      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	f022 0203 	bic.w	r2, r2, #3
 80011e0:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80011e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011ec:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80011ee:	f7fe ffe9 	bl	80001c4 <HAL_GetTick>
 80011f2:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 80011f4:	f7ff fd0f 	bl	8000c16 <LL_RCC_PLL_IsReady>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	f43f adcd 	beq.w	8000d98 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fe:	f7fe ffe1 	bl	80001c4 <HAL_GetTick>
 8001202:	1b00      	subs	r0, r0, r4
 8001204:	2802      	cmp	r0, #2
 8001206:	d9f5      	bls.n	80011f4 <HAL_RCC_OscConfig+0x4f0>
 8001208:	e5ed      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
      uint32_t pllcfgr = RCC->PLLCFGR;
 800120a:	68d8      	ldr	r0, [r3, #12]
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800120e:	f000 0203 	and.w	r2, r0, #3
 8001212:	429a      	cmp	r2, r3
 8001214:	f47f ad79 	bne.w	8000d0a <HAL_RCC_OscConfig+0x6>
 8001218:	6b62      	ldr	r2, [r4, #52]	; 0x34
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800121a:	f000 0370 	and.w	r3, r0, #112	; 0x70
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	4293      	cmp	r3, r2
 8001220:	f47f ad73 	bne.w	8000d0a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001224:	6ba2      	ldr	r2, [r4, #56]	; 0x38
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001226:	f3c0 2306 	ubfx	r3, r0, #8, #7
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800122a:	4293      	cmp	r3, r2
 800122c:	f47f ad6d 	bne.w	8000d0a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001230:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001232:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001236:	4293      	cmp	r3, r2
 8001238:	f47f ad67 	bne.w	8000d0a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800123c:	6c22      	ldr	r2, [r4, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800123e:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001242:	4293      	cmp	r3, r2
 8001244:	f47f ad61 	bne.w	8000d0a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001248:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800124a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 800124e:	1ac0      	subs	r0, r0, r3
 8001250:	bf18      	it	ne
 8001252:	2001      	movne	r0, #1
 8001254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001256:	f7fe ffb5 	bl	80001c4 <HAL_GetTick>
 800125a:	1b80      	subs	r0, r0, r6
 800125c:	2803      	cmp	r0, #3
 800125e:	f67f ae7d 	bls.w	8000f5c <HAL_RCC_OscConfig+0x258>
 8001262:	e5c0      	b.n	8000de6 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001264:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001270:	f7fe ffa8 	bl	80001c4 <HAL_GetTick>
 8001274:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001276:	e6e7      	b.n	8001048 <HAL_RCC_OscConfig+0x344>
 8001278:	58000400 	.word	0x58000400
 800127c:	11c1808c 	.word	0x11c1808c

08001280 <HAL_RCC_ClockConfig>:
{
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001286:	4604      	mov	r4, r0
 8001288:	b910      	cbnz	r0, 8001290 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800128a:	2001      	movs	r0, #1
 800128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4e79      	ldr	r6, [pc, #484]	; (8001478 <HAL_RCC_ClockConfig+0x1f8>)
 8001292:	6833      	ldr	r3, [r6, #0]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	428b      	cmp	r3, r1
 800129a:	d372      	bcc.n	8001382 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	0799      	lsls	r1, r3, #30
 80012a0:	d50e      	bpl.n	80012c0 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012a2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80012a6:	68a2      	ldr	r2, [r4, #8]
 80012a8:	68b3      	ldr	r3, [r6, #8]
 80012aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80012b2:	f7fe ff87 	bl	80001c4 <HAL_GetTick>
 80012b6:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80012b8:	68b3      	ldr	r3, [r6, #8]
 80012ba:	03db      	lsls	r3, r3, #15
 80012bc:	f140 80b8 	bpl.w	8001430 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	069a      	lsls	r2, r3, #26
 80012c4:	d511      	bpl.n	80012ea <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80012c6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80012ca:	6962      	ldr	r2, [r4, #20]
 80012cc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80012d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012d4:	4313      	orrs	r3, r2
 80012d6:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80012da:	f7fe ff73 	bl	80001c4 <HAL_GetTick>
 80012de:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80012e0:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80012e4:	0399      	lsls	r1, r3, #14
 80012e6:	f140 80aa 	bpl.w	800143e <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	0658      	lsls	r0, r3, #25
 80012ee:	d512      	bpl.n	8001316 <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80012f0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80012f4:	69a2      	ldr	r2, [r4, #24]
 80012f6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80012fa:	f023 030f 	bic.w	r3, r3, #15
 80012fe:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001302:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001306:	f7fe ff5d 	bl	80001c4 <HAL_GetTick>
 800130a:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800130c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001310:	03db      	lsls	r3, r3, #15
 8001312:	f140 809b 	bpl.w	800144c <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	075a      	lsls	r2, r3, #29
 800131a:	d50e      	bpl.n	800133a <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800131c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001320:	68e2      	ldr	r2, [r4, #12]
 8001322:	68b3      	ldr	r3, [r6, #8]
 8001324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001328:	4313      	orrs	r3, r2
 800132a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800132c:	f7fe ff4a 	bl	80001c4 <HAL_GetTick>
 8001330:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001332:	68b3      	ldr	r3, [r6, #8]
 8001334:	0399      	lsls	r1, r3, #14
 8001336:	f140 8090 	bpl.w	800145a <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	0718      	lsls	r0, r3, #28
 800133e:	d50f      	bpl.n	8001360 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001340:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001344:	6922      	ldr	r2, [r4, #16]
 8001346:	68b3      	ldr	r3, [r6, #8]
 8001348:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800134c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001350:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001352:	f7fe ff37 	bl	80001c4 <HAL_GetTick>
 8001356:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001358:	68b3      	ldr	r3, [r6, #8]
 800135a:	035b      	lsls	r3, r3, #13
 800135c:	f140 8084 	bpl.w	8001468 <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	07da      	lsls	r2, r3, #31
 8001364:	d423      	bmi.n	80013ae <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001366:	4c44      	ldr	r4, [pc, #272]	; (8001478 <HAL_RCC_ClockConfig+0x1f8>)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	429d      	cmp	r5, r3
 8001370:	d34b      	bcc.n	800140a <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 8001372:	f002 fd4f 	bl	8003e14 <SystemCoreClockUpdate>
  return HAL_InitTick (HAL_GetTickPrio());
 8001376:	f7fe ff2b 	bl	80001d0 <HAL_GetTickPrio>
}
 800137a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick (HAL_GetTickPrio());
 800137e:	f002 bcc3 	b.w	8003d08 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	6833      	ldr	r3, [r6, #0]
 8001384:	f023 0307 	bic.w	r3, r3, #7
 8001388:	430b      	orrs	r3, r1
 800138a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800138c:	f7fe ff1a 	bl	80001c4 <HAL_GetTick>
 8001390:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	6833      	ldr	r3, [r6, #0]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	429d      	cmp	r5, r3
 800139a:	f43f af7f 	beq.w	800129c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800139e:	f7fe ff11 	bl	80001c4 <HAL_GetTick>
 80013a2:	1bc0      	subs	r0, r0, r7
 80013a4:	2802      	cmp	r0, #2
 80013a6:	d9f4      	bls.n	8001392 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 80013a8:	2003      	movs	r0, #3
 80013aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d11e      	bne.n	80013f2 <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 80013b4:	f7ff fbfc 	bl	8000bb0 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 80013b8:	2800      	cmp	r0, #0
 80013ba:	f43f af66 	beq.w	800128a <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013be:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80013c2:	6862      	ldr	r2, [r4, #4]
 80013c4:	68b3      	ldr	r3, [r6, #8]
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80013ce:	f7fe fef9 	bl	80001c4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013d6:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013d8:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	6862      	ldr	r2, [r4, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013e4:	d0bf      	beq.n	8001366 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e6:	f7fe feed 	bl	80001c4 <HAL_GetTick>
 80013ea:	1bc0      	subs	r0, r0, r7
 80013ec:	4540      	cmp	r0, r8
 80013ee:	d9f3      	bls.n	80013d8 <HAL_RCC_ClockConfig+0x158>
 80013f0:	e7da      	b.n	80013a8 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d102      	bne.n	80013fc <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 80013f6:	f7ff fc0e 	bl	8000c16 <LL_RCC_PLL_IsReady>
 80013fa:	e7dd      	b.n	80013b8 <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013fc:	b913      	cbnz	r3, 8001404 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 80013fe:	f7ff fbea 	bl	8000bd6 <LL_RCC_MSI_IsReady>
 8001402:	e7d9      	b.n	80013b8 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001404:	f7ff fbda 	bl	8000bbc <LL_RCC_HSI_IsReady>
 8001408:	e7d6      	b.n	80013b8 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f023 0307 	bic.w	r3, r3, #7
 8001410:	432b      	orrs	r3, r5
 8001412:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001414:	f7fe fed6 	bl	80001c4 <HAL_GetTick>
 8001418:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	429d      	cmp	r5, r3
 8001422:	d0a6      	beq.n	8001372 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001424:	f7fe fece 	bl	80001c4 <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	2802      	cmp	r0, #2
 800142c:	d9f5      	bls.n	800141a <HAL_RCC_ClockConfig+0x19a>
 800142e:	e7bb      	b.n	80013a8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001430:	f7fe fec8 	bl	80001c4 <HAL_GetTick>
 8001434:	1bc0      	subs	r0, r0, r7
 8001436:	2802      	cmp	r0, #2
 8001438:	f67f af3e 	bls.w	80012b8 <HAL_RCC_ClockConfig+0x38>
 800143c:	e7b4      	b.n	80013a8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800143e:	f7fe fec1 	bl	80001c4 <HAL_GetTick>
 8001442:	1bc0      	subs	r0, r0, r7
 8001444:	2802      	cmp	r0, #2
 8001446:	f67f af4b 	bls.w	80012e0 <HAL_RCC_ClockConfig+0x60>
 800144a:	e7ad      	b.n	80013a8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800144c:	f7fe feba 	bl	80001c4 <HAL_GetTick>
 8001450:	1bc0      	subs	r0, r0, r7
 8001452:	2802      	cmp	r0, #2
 8001454:	f67f af5a 	bls.w	800130c <HAL_RCC_ClockConfig+0x8c>
 8001458:	e7a6      	b.n	80013a8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800145a:	f7fe feb3 	bl	80001c4 <HAL_GetTick>
 800145e:	1bc0      	subs	r0, r0, r7
 8001460:	2802      	cmp	r0, #2
 8001462:	f67f af66 	bls.w	8001332 <HAL_RCC_ClockConfig+0xb2>
 8001466:	e79f      	b.n	80013a8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001468:	f7fe feac 	bl	80001c4 <HAL_GetTick>
 800146c:	1bc0      	subs	r0, r0, r7
 800146e:	2802      	cmp	r0, #2
 8001470:	f67f af72 	bls.w	8001358 <HAL_RCC_ClockConfig+0xd8>
 8001474:	e798      	b.n	80013a8 <HAL_RCC_ClockConfig+0x128>
 8001476:	bf00      	nop
 8001478:	58004000 	.word	0x58004000

0800147c <HAL_RCC_GetSysClockFreq>:
 800147c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001480:	b508      	push	{r3, lr}
 8001482:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001484:	f013 030c 	ands.w	r3, r3, #12
 8001488:	d107      	bne.n	800149a <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800148a:	f7ff fbb2 	bl	8000bf2 <LL_RCC_MSI_GetRange>
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_RCC_GetSysClockFreq+0x90>)
 8001490:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001494:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001498:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149a:	2b04      	cmp	r3, #4
 800149c:	d033      	beq.n	8001506 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014a2:	6813      	ldr	r3, [r2, #0]
       sysclockfreq = HSE_VALUE;
 80014a4:	481a      	ldr	r0, [pc, #104]	; (8001510 <HAL_RCC_GetSysClockFreq+0x94>)
 80014a6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ac:	bf08      	it	eq
 80014ae:	4618      	moveq	r0, r3
 80014b0:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80014b2:	68d3      	ldr	r3, [r2, #12]
 80014b4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d022      	beq.n	8001502 <HAL_RCC_GetSysClockFreq+0x86>
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d118      	bne.n	80014f2 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014c0:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = HSE_VALUE;
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <HAL_RCC_GetSysClockFreq+0x98>)
 80014c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_RCC_GetSysClockFreq+0x94>)
 80014ca:	bf08      	it	eq
 80014cc:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d2:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80014d4:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80014d6:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014d8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80014dc:	4358      	muls	r0, r3
 80014de:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80014e2:	3301      	adds	r3, #1
 80014e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80014e8:	0f53      	lsrs	r3, r2, #29
 80014ea:	3301      	adds	r3, #1
 80014ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80014f0:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80014f2:	f7ff fb7e 	bl	8000bf2 <LL_RCC_MSI_GetRange>
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_RCC_GetSysClockFreq+0x90>)
 80014f8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80014fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001500:	e7e5      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8001502:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_RCC_GetSysClockFreq+0x94>)
 8001504:	e7e3      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8001506:	4802      	ldr	r0, [pc, #8]	; (8001510 <HAL_RCC_GetSysClockFreq+0x94>)
}
 8001508:	bd08      	pop	{r3, pc}
 800150a:	bf00      	nop
 800150c:	08004248 	.word	0x08004248
 8001510:	00f42400 	.word	0x00f42400
 8001514:	01e84800 	.word	0x01e84800

08001518 <HAL_RCC_GetHCLKFreq>:
{
 8001518:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800151a:	f7ff ffaf 	bl	800147c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_RCC_GetHCLKFreq+0x1c>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800152e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001532:	bd08      	pop	{r3, pc}
 8001534:	080041e8 	.word	0x080041e8

08001538 <HAL_RCC_GetPCLK2Freq>:
{
 8001538:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800153a:	f7ff ffed 	bl	8001518 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	f003 031f 	and.w	r3, r3, #31
}
 8001552:	40d8      	lsrs	r0, r3
 8001554:	bd08      	pop	{r3, pc}
 8001556:	bf00      	nop
 8001558:	08004228 	.word	0x08004228

0800155c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800155c:	236f      	movs	r3, #111	; 0x6f
 800155e:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800156a:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8001572:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800157a:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8001582:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001584:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001588:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800158c:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800158e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8001596:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_RCC_GetClockConfig+0x48>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	600b      	str	r3, [r1, #0]
 80015a2:	4770      	bx	lr
 80015a4:	58004000 	.word	0x58004000

080015a8 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 80015b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80015b4:	4770      	bx	lr

080015b6 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80015b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ba:	0902      	lsrs	r2, r0, #4
 80015bc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015c0:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80015c4:	0100      	lsls	r0, r0, #4
 80015c6:	ea23 0302 	bic.w	r3, r3, r2
 80015ca:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 80015ce:	4318      	orrs	r0, r3
 80015d0:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 80015d4:	4770      	bx	lr

080015d6 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80015d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4770      	bx	lr

080015e4 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80015e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e8:	6813      	ldr	r3, [r2, #0]
 80015ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4770      	bx	lr

080015f2 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f6:	6818      	ldr	r0, [r3, #0]
}
 80015f8:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80015fc:	4770      	bx	lr

080015fe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001600:	6805      	ldr	r5, [r0, #0]
 8001602:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8001606:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001608:	d043      	beq.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800160a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800160c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001610:	d015      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001612:	d802      	bhi.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001614:	b1d3      	cbz	r3, 800164c <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001616:	2501      	movs	r5, #1
 8001618:	e03b      	b.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 800161a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800161e:	d002      	beq.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001620:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001624:	d1f7      	bne.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800162a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800162c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001630:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001634:	430b      	orrs	r3, r1
 8001636:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800163a:	2500      	movs	r5, #0
 800163c:	e029      	b.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800163e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001642:	68d3      	ldr	r3, [r2, #12]
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	60d3      	str	r3, [r2, #12]
        break;
 800164a:	e7ec      	b.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800164c:	f7ff ffca 	bl	80015e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001650:	f7fe fdb8 	bl	80001c4 <HAL_GetTick>
 8001654:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001656:	f7ff ffcc 	bl	80015f2 <LL_RCC_PLLSAI1_IsReady>
 800165a:	b9a0      	cbnz	r0, 8001686 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800165c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001660:	6861      	ldr	r1, [r4, #4]
 8001662:	6913      	ldr	r3, [r2, #16]
 8001664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001668:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800166c:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800166e:	6913      	ldr	r3, [r2, #16]
 8001670:	68a1      	ldr	r1, [r4, #8]
 8001672:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001676:	430b      	orrs	r3, r1
 8001678:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800167a:	f7ff ffac 	bl	80015d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800167e:	f7fe fda1 	bl	80001c4 <HAL_GetTick>
 8001682:	4605      	mov	r5, r0
 8001684:	e0ba      	b.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001686:	f7fe fd9d 	bl	80001c4 <HAL_GetTick>
 800168a:	1b40      	subs	r0, r0, r5
 800168c:	2802      	cmp	r0, #2
 800168e:	d9e2      	bls.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001690:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	051a      	lsls	r2, r3, #20
 8001696:	d515      	bpl.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001698:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 800169c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800169e:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 80016a2:	f407 7740 	and.w	r7, r7, #768	; 0x300
 80016a6:	42bb      	cmp	r3, r7
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 80016aa:	f7ff fa71 	bl	8000b90 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80016ae:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80016b2:	2f00      	cmp	r7, #0
 80016b4:	f040 80ad 	bne.w	8001812 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80016b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016be:	4313      	orrs	r3, r2
 80016c0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	07df      	lsls	r7, r3, #31
 80016c8:	d509      	bpl.n	80016de <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80016ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ce:	69a0      	ldr	r0, [r4, #24]
 80016d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80016d4:	f022 0203 	bic.w	r2, r2, #3
 80016d8:	4302      	orrs	r2, r0
 80016da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80016de:	079e      	lsls	r6, r3, #30
 80016e0:	d509      	bpl.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80016e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e6:	69e0      	ldr	r0, [r4, #28]
 80016e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80016ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80016f0:	4302      	orrs	r2, r0
 80016f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80016f6:	06d8      	lsls	r0, r3, #27
 80016f8:	d50c      	bpl.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80016fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80016fc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001700:	0c31      	lsrs	r1, r6, #16
 8001702:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001706:	0409      	lsls	r1, r1, #16
 8001708:	ea22 0201 	bic.w	r2, r2, r1
 800170c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001710:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001714:	0699      	lsls	r1, r3, #26
 8001716:	d50c      	bpl.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800171a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800171e:	0c31      	lsrs	r1, r6, #16
 8001720:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	ea22 0201 	bic.w	r2, r2, r1
 800172a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800172e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001732:	075a      	lsls	r2, r3, #29
 8001734:	d502      	bpl.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001736:	6a20      	ldr	r0, [r4, #32]
 8001738:	f7ff ff3d 	bl	80015b6 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	071b      	lsls	r3, r3, #28
 8001740:	d502      	bpl.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001744:	f7ff ff37 	bl	80015b6 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	05df      	lsls	r7, r3, #23
 800174c:	d510      	bpl.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x172>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800174e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001754:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001758:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800175c:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800175e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001762:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001766:	d17d      	bne.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001768:	68d3      	ldr	r3, [r2, #12]
 800176a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800176e:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001770:	6822      	ldr	r2, [r4, #0]
 8001772:	0596      	lsls	r6, r2, #22
 8001774:	d509      	bpl.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x18c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800177c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001780:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001784:	4303      	orrs	r3, r0
 8001786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800178a:	0550      	lsls	r0, r2, #21
 800178c:	d511      	bpl.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800178e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001792:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001794:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001798:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800179c:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800179e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80017a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80017a6:	f040 8094 	bne.w	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80017aa:	68d3      	ldr	r3, [r2, #12]
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80017b2:	6822      	ldr	r2, [r4, #0]
 80017b4:	04d1      	lsls	r1, r2, #19
 80017b6:	d509      	bpl.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80017b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80017be:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 80017c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017c6:	4303      	orrs	r3, r0
 80017c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80017cc:	0493      	lsls	r3, r2, #18
 80017ce:	d50d      	bpl.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80017d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80017d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017dc:	430b      	orrs	r3, r1
 80017de:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80017e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017e2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80017e4:	f023 0303 	bic.w	r3, r3, #3
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6253      	str	r3, [r2, #36]	; 0x24
}
 80017ec:	4628      	mov	r0, r5
 80017ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80017f0:	f7fe fce8 	bl	80001c4 <HAL_GetTick>
 80017f4:	1b40      	subs	r0, r0, r5
 80017f6:	2802      	cmp	r0, #2
 80017f8:	f63f af4a 	bhi.w	8001690 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80017fc:	f7ff fef9 	bl	80015f2 <LL_RCC_PLLSAI1_IsReady>
 8001800:	2801      	cmp	r0, #1
 8001802:	d1f5      	bne.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001808:	6961      	ldr	r1, [r4, #20]
 800180a:	6913      	ldr	r3, [r2, #16]
 800180c:	430b      	orrs	r3, r1
 800180e:	6113      	str	r3, [r2, #16]
 8001810:	e709      	b.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001812:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001816:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800181a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800181e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001822:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001826:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800182a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800182c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001830:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8001832:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001836:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800183a:	07db      	lsls	r3, r3, #31
 800183c:	f57f af42 	bpl.w	80016c4 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8001840:	f7fe fcc0 	bl	80001c4 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8001848:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 800184a:	e004      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x258>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7fe fcba 	bl	80001c4 <HAL_GetTick>
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	42b0      	cmp	r0, r6
 8001854:	d804      	bhi.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x262>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001856:	f7ff fea7 	bl	80015a8 <LL_RCC_LSE_IsReady>
 800185a:	2801      	cmp	r0, #1
 800185c:	d1f6      	bne.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800185e:	e731      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8001860:	2503      	movs	r5, #3
 8001862:	e72f      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001864:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001868:	d182      	bne.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x172>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800186a:	f7ff febb 	bl	80015e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800186e:	f7fe fca9 	bl	80001c4 <HAL_GetTick>
 8001872:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001874:	f7ff febd 	bl	80015f2 <LL_RCC_PLLSAI1_IsReady>
 8001878:	b9a0      	cbnz	r0, 80018a4 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800187a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187e:	6861      	ldr	r1, [r4, #4]
 8001880:	6913      	ldr	r3, [r2, #16]
 8001882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001886:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800188a:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800188c:	6913      	ldr	r3, [r2, #16]
 800188e:	68e1      	ldr	r1, [r4, #12]
 8001890:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8001894:	430b      	orrs	r3, r1
 8001896:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001898:	f7ff fe9d 	bl	80015d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800189c:	f7fe fc92 	bl	80001c4 <HAL_GetTick>
 80018a0:	4606      	mov	r6, r0
 80018a2:	e00b      	b.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x2be>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018a4:	f7fe fc8e 	bl	80001c4 <HAL_GetTick>
 80018a8:	1b80      	subs	r0, r0, r6
 80018aa:	2802      	cmp	r0, #2
 80018ac:	d9e2      	bls.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 80018ae:	2503      	movs	r5, #3
 80018b0:	e75e      	b.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x172>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018b2:	f7fe fc87 	bl	80001c4 <HAL_GetTick>
 80018b6:	1b80      	subs	r0, r0, r6
 80018b8:	2802      	cmp	r0, #2
 80018ba:	d8f8      	bhi.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80018bc:	f7ff fe99 	bl	80015f2 <LL_RCC_PLLSAI1_IsReady>
 80018c0:	2801      	cmp	r0, #1
 80018c2:	d1f6      	bne.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c8:	6961      	ldr	r1, [r4, #20]
 80018ca:	6913      	ldr	r3, [r2, #16]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6113      	str	r3, [r2, #16]
 80018d0:	e74e      	b.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x172>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80018d2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80018d6:	f47f af6c 	bne.w	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80018da:	f7ff fe83 	bl	80015e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80018de:	f7fe fc71 	bl	80001c4 <HAL_GetTick>
 80018e2:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80018e4:	f7ff fe85 	bl	80015f2 <LL_RCC_PLLSAI1_IsReady>
 80018e8:	b9a0      	cbnz	r0, 8001914 <HAL_RCCEx_PeriphCLKConfig+0x316>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80018ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ee:	6861      	ldr	r1, [r4, #4]
 80018f0:	6913      	ldr	r3, [r2, #16]
 80018f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80018f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80018fa:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80018fc:	6913      	ldr	r3, [r2, #16]
 80018fe:	6921      	ldr	r1, [r4, #16]
 8001900:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001904:	430b      	orrs	r3, r1
 8001906:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001908:	f7ff fe65 	bl	80015d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800190c:	f7fe fc5a 	bl	80001c4 <HAL_GetTick>
 8001910:	4606      	mov	r6, r0
 8001912:	e00b      	b.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x32e>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001914:	f7fe fc56 	bl	80001c4 <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	2802      	cmp	r0, #2
 800191c:	d9e2      	bls.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
              ret = HAL_TIMEOUT;
 800191e:	2503      	movs	r5, #3
 8001920:	e747      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001922:	f7fe fc4f 	bl	80001c4 <HAL_GetTick>
 8001926:	1b80      	subs	r0, r0, r6
 8001928:	2802      	cmp	r0, #2
 800192a:	d8f8      	bhi.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x320>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800192c:	f7ff fe61 	bl	80015f2 <LL_RCC_PLLSAI1_IsReady>
 8001930:	2801      	cmp	r0, #1
 8001932:	d1f6      	bne.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x324>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001938:	6961      	ldr	r1, [r4, #20]
 800193a:	6913      	ldr	r3, [r2, #16]
 800193c:	430b      	orrs	r3, r1
 800193e:	6113      	str	r3, [r2, #16]
 8001940:	e737      	b.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

08001942 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001946:	6813      	ldr	r3, [r2, #0]
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4770      	bx	lr

08001950 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001950:	6803      	ldr	r3, [r0, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800195a:	6842      	ldr	r2, [r0, #4]
 800195c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001960:	d10a      	bne.n	8001978 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001962:	6882      	ldr	r2, [r0, #8]
 8001964:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001968:	d002      	beq.n	8001970 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800196a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800196e:	d103      	bne.n	8001978 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001978:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800197a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800197e:	d107      	bne.n	8001990 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800198e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001990:	2301      	movs	r3, #1
 8001992:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001996:	2300      	movs	r3, #0
 8001998:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800199c:	2003      	movs	r0, #3
 800199e:	4770      	bx	lr

080019a0 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	4604      	mov	r4, r0
 80019a4:	460d      	mov	r5, r1
 80019a6:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	6898      	ldr	r0, [r3, #8]
 80019ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019b0:	d100      	bne.n	80019b4 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 80019b4:	1c6a      	adds	r2, r5, #1
 80019b6:	d0f8      	beq.n	80019aa <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80019b8:	f7fe fc04 	bl	80001c4 <HAL_GetTick>
 80019bc:	1b80      	subs	r0, r0, r6
 80019be:	4285      	cmp	r5, r0
 80019c0:	d8f2      	bhi.n	80019a8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80019c2:	4620      	mov	r0, r4
}
 80019c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80019c8:	f7ff bfc2 	b.w	8001950 <SPI_WaitFifoStateUntilTimeout.part.1>

080019cc <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	4605      	mov	r5, r0
 80019d0:	460c      	mov	r4, r1
 80019d2:	4616      	mov	r6, r2
 80019d4:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80019d6:	6829      	ldr	r1, [r5, #0]
 80019d8:	6888      	ldr	r0, [r1, #8]
 80019da:	4020      	ands	r0, r4
 80019dc:	d100      	bne.n	80019e0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 80019de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80019e0:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80019e4:	bf08      	it	eq
 80019e6:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 80019e8:	1c73      	adds	r3, r6, #1
 80019ea:	d0f5      	beq.n	80019d8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80019ec:	f7fe fbea 	bl	80001c4 <HAL_GetTick>
 80019f0:	1bc0      	subs	r0, r0, r7
 80019f2:	4286      	cmp	r6, r0
 80019f4:	d8ef      	bhi.n	80019d6 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80019f6:	4628      	mov	r0, r5
}
 80019f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80019fc:	f7ff bfa8 	b.w	8001950 <SPI_WaitFifoStateUntilTimeout.part.1>

08001a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a02:	4613      	mov	r3, r2
{
 8001a04:	460d      	mov	r5, r1
 8001a06:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a08:	460a      	mov	r2, r1
 8001a0a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001a0e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a10:	f7ff ffdc 	bl	80019cc <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001a14:	b128      	cbz	r0, 8001a22 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a18:	f043 0320 	orr.w	r3, r3, #32
 8001a1c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001a1e:	2003      	movs	r0, #3
 8001a20:	e00f      	b.n	8001a42 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a22:	4632      	mov	r2, r6
 8001a24:	4629      	mov	r1, r5
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff ffba 	bl	80019a0 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d1f2      	bne.n	8001a16 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a30:	4633      	mov	r3, r6
 8001a32:	462a      	mov	r2, r5
 8001a34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7ff ffc7 	bl	80019cc <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d1e9      	bne.n	8001a16 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001a42:	bd70      	pop	{r4, r5, r6, pc}

08001a44 <HAL_SPI_Init>:
{
 8001a44:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001a46:	4604      	mov	r4, r0
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d04a      	beq.n	8001ae2 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a50:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001a54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a58:	b91b      	cbnz	r3, 8001a62 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001a5a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001a5e:	f002 f907 	bl	8003c70 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a62:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001a64:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a66:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001a6a:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a6c:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a72:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001a76:	600b      	str	r3, [r1, #0]
 8001a78:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a7c:	d92e      	bls.n	8001adc <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a7e:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a80:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a84:	bf18      	it	ne
 8001a86:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001a88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a8a:	b92b      	cbnz	r3, 8001a98 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a8c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001a90:	bf8c      	ite	hi
 8001a92:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001a94:	2301      	movls	r3, #1
 8001a96:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001a98:	68a6      	ldr	r6, [r4, #8]
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	69a5      	ldr	r5, [r4, #24]
 8001a9e:	4333      	orrs	r3, r6
 8001aa0:	6926      	ldr	r6, [r4, #16]
 8001aa2:	4333      	orrs	r3, r6
 8001aa4:	6966      	ldr	r6, [r4, #20]
 8001aa6:	4333      	orrs	r3, r6
 8001aa8:	69e6      	ldr	r6, [r4, #28]
 8001aaa:	4333      	orrs	r3, r6
 8001aac:	6a26      	ldr	r6, [r4, #32]
 8001aae:	4333      	orrs	r3, r6
 8001ab0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ab2:	4333      	orrs	r3, r6
 8001ab4:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001ab8:	4333      	orrs	r3, r6
 8001aba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ac2:	0c2d      	lsrs	r5, r5, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	f005 0504 	and.w	r5, r5, #4
 8001aca:	432a      	orrs	r2, r5
 8001acc:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8001ace:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ad0:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001ad2:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ad4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ad6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001adc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ae0:	e7d0      	b.n	8001a84 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001ae2:	2001      	movs	r0, #1
}
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}

08001ae6 <HAL_SPI_Transmit>:
{
 8001ae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001aea:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001aec:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001af0:	2b01      	cmp	r3, #1
{
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001af8:	f000 80b1 	beq.w	8001c5e <HAL_SPI_Transmit+0x178>
 8001afc:	2301      	movs	r3, #1
 8001afe:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001b02:	f7fe fb5f 	bl	80001c4 <HAL_GetTick>
 8001b06:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001b08:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001b0c:	b2c0      	uxtb	r0, r0
 8001b0e:	2801      	cmp	r0, #1
 8001b10:	f040 80a3 	bne.w	8001c5a <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8001b14:	2d00      	cmp	r5, #0
 8001b16:	d05f      	beq.n	8001bd8 <HAL_SPI_Transmit+0xf2>
 8001b18:	f1b8 0f00 	cmp.w	r8, #0
 8001b1c:	d05c      	beq.n	8001bd8 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b24:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b26:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b28:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b2a:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001b2c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001b30:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001b34:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001b38:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b3a:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001b3c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b3e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001b44:	bf08      	it	eq
 8001b46:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001b48:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001b4c:	bf04      	itt	eq
 8001b4e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001b52:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b54:	6803      	ldr	r3, [r0, #0]
 8001b56:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001b58:	bf5e      	ittt	pl
 8001b5a:	6803      	ldrpl	r3, [r0, #0]
 8001b5c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001b60:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b62:	68e3      	ldr	r3, [r4, #12]
 8001b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b68:	6863      	ldr	r3, [r4, #4]
 8001b6a:	d93e      	bls.n	8001bea <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b6c:	b113      	cbz	r3, 8001b74 <HAL_SPI_Transmit+0x8e>
 8001b6e:	f1b8 0f01 	cmp.w	r8, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b74:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b78:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b7a:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001b7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001b84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b9a3      	cbnz	r3, 8001bb4 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b8a:	463a      	mov	r2, r7
 8001b8c:	4631      	mov	r1, r6
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff ff36 	bl	8001a00 <SPI_EndRxTxTransaction>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d15d      	bne.n	8001c54 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b98:	68a3      	ldr	r3, [r4, #8]
 8001b9a:	b933      	cbnz	r3, 8001baa <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001baa:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001bac:	3000      	adds	r0, #0
 8001bae:	bf18      	it	ne
 8001bb0:	2001      	movne	r0, #1
 8001bb2:	e011      	b.n	8001bd8 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb4:	6822      	ldr	r2, [r4, #0]
 8001bb6:	6893      	ldr	r3, [r2, #8]
 8001bb8:	0798      	lsls	r0, r3, #30
 8001bba:	d505      	bpl.n	8001bc8 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bbe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001bc2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc4:	63a3      	str	r3, [r4, #56]	; 0x38
 8001bc6:	e7d9      	b.n	8001b7c <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bc8:	f7fe fafc 	bl	80001c4 <HAL_GetTick>
 8001bcc:	1bc0      	subs	r0, r0, r7
 8001bce:	42b0      	cmp	r0, r6
 8001bd0:	d3d8      	bcc.n	8001b84 <HAL_SPI_Transmit+0x9e>
 8001bd2:	1c71      	adds	r1, r6, #1
 8001bd4:	d0d6      	beq.n	8001b84 <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8001bd6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001bde:	2300      	movs	r3, #0
 8001be0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001be4:	b002      	add	sp, #8
 8001be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bea:	b113      	cbz	r3, 8001bf2 <HAL_SPI_Transmit+0x10c>
 8001bec:	f1b8 0f01 	cmp.w	r8, #1
 8001bf0:	d113      	bne.n	8001c1a <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8001bf2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d906      	bls.n	8001c08 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bfa:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001bfe:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c00:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001c02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c04:	3b02      	subs	r3, #2
 8001c06:	e006      	b.n	8001c16 <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c08:	782b      	ldrb	r3, [r5, #0]
 8001c0a:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8001c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c0e:	3301      	adds	r3, #1
 8001c10:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001c12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001c1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0b3      	beq.n	8001b8a <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	0792      	lsls	r2, r2, #30
 8001c28:	d50c      	bpl.n	8001c44 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8001c2a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001c2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	2a01      	cmp	r2, #1
 8001c32:	d904      	bls.n	8001c3e <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c34:	f830 2b02 	ldrh.w	r2, [r0], #2
 8001c38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c3a:	63a0      	str	r0, [r4, #56]	; 0x38
 8001c3c:	e7e1      	b.n	8001c02 <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c3e:	7802      	ldrb	r2, [r0, #0]
 8001c40:	731a      	strb	r2, [r3, #12]
 8001c42:	e7e3      	b.n	8001c0c <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c44:	f7fe fabe 	bl	80001c4 <HAL_GetTick>
 8001c48:	1bc0      	subs	r0, r0, r7
 8001c4a:	4286      	cmp	r6, r0
 8001c4c:	d8e5      	bhi.n	8001c1a <HAL_SPI_Transmit+0x134>
 8001c4e:	1c73      	adds	r3, r6, #1
 8001c50:	d0e3      	beq.n	8001c1a <HAL_SPI_Transmit+0x134>
 8001c52:	e7c0      	b.n	8001bd6 <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c54:	2320      	movs	r3, #32
 8001c56:	6623      	str	r3, [r4, #96]	; 0x60
 8001c58:	e79e      	b.n	8001b98 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	e7bc      	b.n	8001bd8 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8001c5e:	2002      	movs	r0, #2
 8001c60:	e7c0      	b.n	8001be4 <HAL_SPI_Transmit+0xfe>

08001c62 <HAL_TIM_Base_MspInit>:
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c64:	6803      	ldr	r3, [r0, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	6899      	ldr	r1, [r3, #8]
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_TIM_Base_Start_IT+0x28>)
 8001c72:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	2a06      	cmp	r2, #6
 8001c76:	d006      	beq.n	8001c86 <HAL_TIM_Base_Start_IT+0x22>
 8001c78:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8001c7c:	bf1e      	ittt	ne
 8001c7e:	681a      	ldrne	r2, [r3, #0]
 8001c80:	f042 0201 	orrne.w	r2, r2, #1
 8001c84:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001c86:	2000      	movs	r0, #0
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	00010007 	.word	0x00010007

08001c90 <HAL_TIM_OC_DelayElapsedCallback>:
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_IC_CaptureCallback>:
 8001c92:	4770      	bx	lr

08001c94 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c94:	4770      	bx	lr

08001c96 <HAL_TIM_TriggerCallback>:
 8001c96:	4770      	bx	lr

08001c98 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c98:	6803      	ldr	r3, [r0, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	0791      	lsls	r1, r2, #30
{
 8001c9e:	b510      	push	{r4, lr}
 8001ca0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca2:	d50f      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	0792      	lsls	r2, r2, #30
 8001ca8:	d50c      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001caa:	f06f 0202 	mvn.w	r2, #2
 8001cae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb4:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb8:	f000 8085 	beq.w	8001dc6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cbc:	f7ff ffe9 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	0752      	lsls	r2, r2, #29
 8001cca:	d510      	bpl.n	8001cee <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	0750      	lsls	r0, r2, #29
 8001cd0:	d50d      	bpl.n	8001cee <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cd2:	f06f 0204 	mvn.w	r2, #4
 8001cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cda:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cdc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ce0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ce4:	d075      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	f7ff ffd4 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	2300      	movs	r3, #0
 8001cec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	0711      	lsls	r1, r2, #28
 8001cf4:	d50f      	bpl.n	8001d16 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	0712      	lsls	r2, r2, #28
 8001cfa:	d50c      	bpl.n	8001d16 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d02:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d04:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d06:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d08:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0c:	d067      	beq.n	8001dde <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	f7ff ffc0 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	2300      	movs	r3, #0
 8001d14:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	06d0      	lsls	r0, r2, #27
 8001d1c:	d510      	bpl.n	8001d40 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	06d1      	lsls	r1, r2, #27
 8001d22:	d50d      	bpl.n	8001d40 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d24:	f06f 0210 	mvn.w	r2, #16
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d2a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d2e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d32:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d36:	d058      	beq.n	8001dea <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d38:	f7ff ffab 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	07d2      	lsls	r2, r2, #31
 8001d46:	d508      	bpl.n	8001d5a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	07d0      	lsls	r0, r2, #31
 8001d4c:	d505      	bpl.n	8001d5a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4e:	f06f 0201 	mvn.w	r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d54:	4620      	mov	r0, r4
 8001d56:	f001 ff57 	bl	8003c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	0611      	lsls	r1, r2, #24
 8001d60:	d508      	bpl.n	8001d74 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	0612      	lsls	r2, r2, #24
 8001d66:	d505      	bpl.n	8001d74 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f000 f897 	bl	8001ea2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	05d0      	lsls	r0, r2, #23
 8001d7a:	d508      	bpl.n	8001d8e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	0611      	lsls	r1, r2, #24
 8001d80:	d505      	bpl.n	8001d8e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f000 f88b 	bl	8001ea4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	0652      	lsls	r2, r2, #25
 8001d94:	d508      	bpl.n	8001da8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	0650      	lsls	r0, r2, #25
 8001d9a:	d505      	bpl.n	8001da8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff ff77 	bl	8001c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	0691      	lsls	r1, r2, #26
 8001dae:	d522      	bpl.n	8001df6 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	0692      	lsls	r2, r2, #26
 8001db4:	d51f      	bpl.n	8001df6 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dbc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001dc2:	f000 b86d 	b.w	8001ea0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	f7ff ff63 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff ff62 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dd0:	e776      	b.n	8001cc0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	f7ff ff5d 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff ff5c 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ddc:	e785      	b.n	8001cea <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	f7ff ff57 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de2:	4620      	mov	r0, r4
 8001de4:	f7ff ff56 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8001de8:	e793      	b.n	8001d12 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	f7ff ff51 	bl	8001c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff ff50 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8001df4:	e7a2      	b.n	8001d3c <HAL_TIM_IRQHandler+0xa4>
 8001df6:	bd10      	pop	{r4, pc}

08001df8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001dfa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dfc:	4290      	cmp	r0, r2
{
 8001dfe:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e00:	d002      	beq.n	8001e08 <TIM_Base_SetConfig+0x10>
 8001e02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e06:	d109      	bne.n	8001e1c <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e08:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e0e:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001e10:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e14:	d009      	beq.n	8001e2a <TIM_Base_SetConfig+0x32>
 8001e16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e1a:	d006      	beq.n	8001e2a <TIM_Base_SetConfig+0x32>
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <TIM_Base_SetConfig+0x70>)
 8001e1e:	4290      	cmp	r0, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_Base_SetConfig+0x32>
 8001e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e26:	4290      	cmp	r0, r2
 8001e28:	d103      	bne.n	8001e32 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e30:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e32:	694a      	ldr	r2, [r1, #20]
 8001e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e38:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001e3a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e3c:	688b      	ldr	r3, [r1, #8]
 8001e3e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e40:	680b      	ldr	r3, [r1, #0]
 8001e42:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <TIM_Base_SetConfig+0x6c>)
 8001e46:	4298      	cmp	r0, r3
 8001e48:	d007      	beq.n	8001e5a <TIM_Base_SetConfig+0x62>
 8001e4a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001e4e:	4298      	cmp	r0, r3
 8001e50:	d003      	beq.n	8001e5a <TIM_Base_SetConfig+0x62>
 8001e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e56:	4298      	cmp	r0, r3
 8001e58:	d101      	bne.n	8001e5e <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5a:	690b      	ldr	r3, [r1, #16]
 8001e5c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	6143      	str	r3, [r0, #20]
 8001e62:	bd10      	pop	{r4, pc}
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40014400 	.word	0x40014400

08001e6c <HAL_TIM_Base_Init>:
{
 8001e6c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001e6e:	4604      	mov	r4, r0
 8001e70:	b1a0      	cbz	r0, 8001e9c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e7a:	b91b      	cbnz	r3, 8001e84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e80:	f7ff feef 	bl	8001c62 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	2302      	movs	r3, #2
 8001e86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	1d21      	adds	r1, r4, #4
 8001e8e:	f7ff ffb3 	bl	8001df8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e9c:	2001      	movs	r0, #1
}
 8001e9e:	bd10      	pop	{r4, pc}

08001ea0 <HAL_TIMEx_CommutCallback>:
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIMEx_BreakCallback>:
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ea4:	4770      	bx	lr

08001ea6 <TSC_extract_groups>:
static uint32_t TSC_extract_groups(uint32_t iomask)
{
  uint32_t groups = 0UL;
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8001ea6:	2300      	movs	r3, #0
{
 8001ea8:	b530      	push	{r4, r5, lr}
  uint32_t groups = 0UL;
 8001eaa:	461a      	mov	r2, r3
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8001eac:	240f      	movs	r4, #15
    {
      groups |= (1UL << idx);
 8001eae:	2501      	movs	r5, #1
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8001eb0:	0099      	lsls	r1, r3, #2
 8001eb2:	fa04 f101 	lsl.w	r1, r4, r1
 8001eb6:	4201      	tst	r1, r0
      groups |= (1UL << idx);
 8001eb8:	bf18      	it	ne
 8001eba:	fa05 f103 	lslne.w	r1, r5, r3
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8001ebe:	f103 0301 	add.w	r3, r3, #1
      groups |= (1UL << idx);
 8001ec2:	bf18      	it	ne
 8001ec4:	430a      	orrne	r2, r1
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8001ec6:	2b07      	cmp	r3, #7
 8001ec8:	d1f2      	bne.n	8001eb0 <TSC_extract_groups+0xa>
    }
  }

  return groups;
}
 8001eca:	4610      	mov	r0, r2
 8001ecc:	bd30      	pop	{r4, r5, pc}

08001ece <HAL_TSC_Init>:
{
 8001ece:	b538      	push	{r3, r4, r5, lr}
  if (htsc == NULL)
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d040      	beq.n	8001f58 <HAL_TSC_Init+0x8a>
  if (htsc->State == HAL_TSC_STATE_RESET)
 8001ed6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001eda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ede:	b91b      	cbnz	r3, 8001ee8 <HAL_TSC_Init+0x1a>
    htsc->Lock = HAL_UNLOCKED;
 8001ee0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_TSC_MspInit(htsc);
 8001ee4:	f002 f826 	bl	8003f34 <HAL_TSC_MspInit>
  htsc->Instance->CR = TSC_CR_TSCE;
 8001ee8:	6825      	ldr	r5, [r4, #0]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8001eea:	68a1      	ldr	r1, [r4, #8]
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8001eec:	6b20      	ldr	r0, [r4, #48]	; 0x30
  htsc->State = HAL_TSC_STATE_BUSY;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htsc->Instance->CR = TSC_CR_TSCE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	602b      	str	r3, [r5, #0]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8001ef8:	6863      	ldr	r3, [r4, #4]
 8001efa:	682a      	ldr	r2, [r5, #0]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6961      	ldr	r1, [r4, #20]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	69a1      	ldr	r1, [r4, #24]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	69e1      	ldr	r1, [r4, #28]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f10:	430b      	orrs	r3, r1
 8001f12:	4313      	orrs	r3, r2
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8001f14:	6922      	ldr	r2, [r4, #16]
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8001f16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8001f18:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001f1c:	602b      	str	r3, [r5, #0]
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8001f1e:	7b23      	ldrb	r3, [r4, #12]
 8001f20:	2b01      	cmp	r3, #1
    htsc->Instance->CR |= TSC_CR_SSE;
 8001f22:	bf02      	ittt	eq
 8001f24:	682b      	ldreq	r3, [r5, #0]
 8001f26:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8001f2a:	602b      	streq	r3, [r5, #0]
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8001f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	ea43 0201 	orr.w	r2, r3, r1
 8001f34:	43d2      	mvns	r2, r2
 8001f36:	612a      	str	r2, [r5, #16]
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8001f38:	62ab      	str	r3, [r5, #40]	; 0x28
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8001f3a:	6229      	str	r1, [r5, #32]
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8001f3c:	f7ff ffb3 	bl	8001ea6 <TSC_extract_groups>
 8001f40:	6328      	str	r0, [r5, #48]	; 0x30
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8001f42:	686b      	ldr	r3, [r5, #4]
 8001f44:	f023 0303 	bic.w	r3, r3, #3
 8001f48:	606b      	str	r3, [r5, #4]
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	60ab      	str	r3, [r5, #8]
  htsc->State = HAL_TSC_STATE_READY;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8001f54:	2000      	movs	r0, #0
 8001f56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
}
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}

08001f5c <HAL_TSC_Start_IT>:
  __HAL_LOCK(htsc);
 8001f5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f04f 0302 	mov.w	r3, #2
 8001f66:	d022      	beq.n	8001fae <HAL_TSC_Start_IT+0x52>
  htsc->State = HAL_TSC_STATE_BUSY;
 8001f68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 8001f6c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htsc);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	605a      	str	r2, [r3, #4]
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 8001f7c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8001f80:	2a01      	cmp	r2, #1
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	bf0c      	ite	eq
 8001f86:	f042 0202 	orreq.w	r2, r2, #2
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 8001f8a:	f022 0202 	bicne.w	r2, r2, #2
 8001f8e:	605a      	str	r2, [r3, #4]
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 8001f90:	2203      	movs	r2, #3
 8001f92:	609a      	str	r2, [r3, #8]
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8001f94:	6a02      	ldr	r2, [r0, #32]
 8001f96:	b962      	cbnz	r2, 8001fb2 <HAL_TSC_Start_IT+0x56>
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	f022 0210 	bic.w	r2, r2, #16
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8001f9e:	601a      	str	r2, [r3, #0]
  __HAL_TSC_START_ACQ(htsc);
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f042 0202 	orr.w	r2, r2, #2
 8001fa6:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(htsc);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htsc);
 8001fae:	4618      	mov	r0, r3
}
 8001fb0:	4770      	bx	lr
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f042 0210 	orr.w	r2, r2, #16
 8001fb8:	e7f1      	b.n	8001f9e <HAL_TSC_Start_IT+0x42>

08001fba <HAL_TSC_GroupGetStatus>:
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 8001fba:	6803      	ldr	r3, [r0, #0]
 8001fbc:	f001 010f 	and.w	r1, r1, #15
 8001fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc2:	f101 0310 	add.w	r3, r1, #16
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4099      	lsls	r1, r3
 8001fca:	ea31 0302 	bics.w	r3, r1, r2
}
 8001fce:	bf0c      	ite	eq
 8001fd0:	2001      	moveq	r0, #1
 8001fd2:	2000      	movne	r0, #0
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_TSC_GroupGetValue>:
  return htsc->Instance->IOGXCR[gx_index];
 8001fd6:	6803      	ldr	r3, [r0, #0]
 8001fd8:	310c      	adds	r1, #12
 8001fda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001fde:	6858      	ldr	r0, [r3, #4]
}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_TSC_IODischarge>:
  __HAL_LOCK(htsc);
 8001fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d010      	beq.n	800200c <HAL_TSC_IODischarge+0x2a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (choice == ENABLE)
 8001ff0:	4299      	cmp	r1, r3
 8001ff2:	6803      	ldr	r3, [r0, #0]
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	bf0c      	ite	eq
 8001ff8:	f022 0210 	biceq.w	r2, r2, #16
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8001ffc:	f042 0210 	orrne.w	r2, r2, #16
 8002000:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(htsc);
 8002002:	2300      	movs	r3, #0
 8002004:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  return HAL_OK;
 8002008:	4618      	mov	r0, r3
 800200a:	4770      	bx	lr
  __HAL_LOCK(htsc);
 800200c:	2002      	movs	r0, #2
}
 800200e:	4770      	bx	lr

08002010 <HAL_TSC_ErrorCallback>:
{
 8002010:	4770      	bx	lr

08002012 <HAL_TSC_IRQHandler>:
{
 8002012:	b508      	push	{r3, lr}
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 8002014:	6803      	ldr	r3, [r0, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	07d1      	lsls	r1, r2, #31
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 800201a:	bf44      	itt	mi
 800201c:	2201      	movmi	r2, #1
 800201e:	609a      	strmi	r2, [r3, #8]
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	0792      	lsls	r2, r2, #30
 8002024:	d507      	bpl.n	8002036 <HAL_TSC_IRQHandler+0x24>
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8002026:	2202      	movs	r2, #2
 8002028:	609a      	str	r2, [r3, #8]
    htsc->State = HAL_TSC_STATE_ERROR;
 800202a:	2303      	movs	r3, #3
 800202c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TSC_ErrorCallback(htsc);
 8002030:	f7ff ffee 	bl	8002010 <HAL_TSC_ErrorCallback>
 8002034:	bd08      	pop	{r3, pc}
    htsc->State = HAL_TSC_STATE_READY;
 8002036:	2301      	movs	r3, #1
 8002038:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 800203c:	f001 fdcc 	bl	8003bd8 <HAL_TSC_ConvCpltCallback>
 8002040:	bd08      	pop	{r3, pc}

08002042 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002042:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002046:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800204a:	045b      	lsls	r3, r3, #17
 800204c:	0c5b      	lsrs	r3, r3, #17
 800204e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002052:	2000      	movs	r0, #0
 8002054:	4770      	bx	lr

08002056 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002056:	b084      	sub	sp, #16
 8002058:	b510      	push	{r4, lr}
 800205a:	ac03      	add	r4, sp, #12
 800205c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002060:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002062:	2301      	movs	r3, #1
 8002064:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002068:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800206c:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002070:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002074:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 800207c:	b29b      	uxth	r3, r3
 800207e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002086:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800208a:	b004      	add	sp, #16
 800208c:	4610      	mov	r0, r2
 800208e:	4770      	bx	lr

08002090 <TSL_Init>:

  // Get banks array
  TSL_Globals.Bank_Array = bank;

  // Initialize the delay that will be used to discharge the capacitors
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <TSL_Init+0x20>)
  TSL_Globals.Bank_Array = bank;
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <TSL_Init+0x24>)
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <TSL_Init+0x28>)
 8002098:	fbb3 f2f2 	udiv	r2, r3, r2
 800209c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  TSL_Globals.Bank_Array = bank;
 80020a0:	6048      	str	r0, [r1, #4]
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 80020a2:	4353      	muls	r3, r2
#else
  retval = TSL_acq_Init();
#endif

  return retval;
}
 80020a4:	2000      	movs	r0, #0
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 80020a6:	2248      	movs	r2, #72	; 0x48
 80020a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ac:	610b      	str	r3, [r1, #16]
}
 80020ae:	4770      	bx	lr
 80020b0:	20000010 	.word	0x20000010
 80020b4:	20001964 	.word	0x20001964
 80020b8:	000f4240 	.word	0x000f4240

080020bc <TSL_acq_TestFirstReferenceIsValid>:
  * @retval Result TRUE if the Reference is valid
  */
TSL_Bool_enum_T TSL_acq_TestFirstReferenceIsValid(TSL_ChannelData_T *pCh, TSL_tMeas_T new_meas)
{
  return TSL_TRUE;
}
 80020bc:	2001      	movs	r0, #1
 80020be:	4770      	bx	lr

080020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>:
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_One_DeltaAbove(TSL_tThreshold_T th, TSL_tIndex_T coeff)
{
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1+0x2c>)
TSL_Status_enum_T TSL_linrot_ProcessCh_One_DeltaAbove(TSL_tThreshold_T th, TSL_tIndex_T coeff)
 80020c2:	b510      	push	{r4, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	689a      	ldr	r2, [r3, #8]
    lth = th;
  }
#endif

  // Return OK if at least one channel is above the threshold
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80020c8:	8999      	ldrh	r1, [r3, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	b2dc      	uxtb	r4, r3
 80020ce:	428c      	cmp	r4, r1
 80020d0:	d301      	bcc.n	80020d6 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1+0x16>
#endif
      return TSL_STATUS_OK;
    }
    p_Ch++;
  }
  return TSL_STATUS_ERROR;
 80020d2:	2002      	movs	r0, #2
 80020d4:	bd10      	pop	{r4, pc}
    if (norm_delta > th)
 80020d6:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 80020da:	4284      	cmp	r4, r0
 80020dc:	f103 0301 	add.w	r3, r3, #1
 80020e0:	dc01      	bgt.n	80020e6 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1+0x26>
    p_Ch++;
 80020e2:	320c      	adds	r2, #12
 80020e4:	e7f2      	b.n	80020cc <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1+0xc>
      return TSL_STATUS_OK;
 80020e6:	2000      	movs	r0, #0
}
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	bf00      	nop
 80020ec:	20001964 	.word	0x20001964

080020f0 <TSL_linrot_CalcPos>:
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80020f0:	4b80      	ldr	r3, [pc, #512]	; (80022f4 <TSL_linrot_CalcPos+0x204>)
  delta2 = 0;
 80020f2:	4a81      	ldr	r2, [pc, #516]	; (80022f8 <TSL_linrot_CalcPos+0x208>)
  delta3 = 0;
 80020f4:	4881      	ldr	r0, [pc, #516]	; (80022fc <TSL_linrot_CalcPos+0x20c>)
  index1 = 0;
 80020f6:	4982      	ldr	r1, [pc, #520]	; (8002300 <TSL_linrot_CalcPos+0x210>)
{
 80020f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80020fc:	695d      	ldr	r5, [r3, #20]
  delta1 = 0;
 80020fe:	4c81      	ldr	r4, [pc, #516]	; (8002304 <TSL_linrot_CalcPos+0x214>)
  if (THIS_NB_CHANNELS < 3)
 8002100:	f8b5 900c 	ldrh.w	r9, [r5, #12]
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002104:	f8d5 b008 	ldr.w	fp, [r5, #8]
  delta1 = 0;
 8002108:	2300      	movs	r3, #0
  delta2 = 0;
 800210a:	8013      	strh	r3, [r2, #0]
  index2 = 0;
 800210c:	4a7e      	ldr	r2, [pc, #504]	; (8002308 <TSL_linrot_CalcPos+0x218>)
  delta1 = 0;
 800210e:	8023      	strh	r3, [r4, #0]
  index2 = 0;
 8002110:	7013      	strb	r3, [r2, #0]
  THIS_POSCHANGE = TSL_STATE_NOT_CHANGED;
 8002112:	682a      	ldr	r2, [r5, #0]
  delta3 = 0;
 8002114:	8003      	strh	r3, [r0, #0]
  THIS_POSCHANGE = TSL_STATE_NOT_CHANGED;
 8002116:	7916      	ldrb	r6, [r2, #4]
  index1 = 0;
 8002118:	700b      	strb	r3, [r1, #0]
{
 800211a:	b087      	sub	sp, #28
  THIS_POSCHANGE = TSL_STATE_NOT_CHANGED;
 800211c:	f363 16c7 	bfi	r6, r3, #7, #1
  if (THIS_NB_CHANNELS < 3)
 8002120:	f1b9 0f02 	cmp.w	r9, #2
  THIS_POSCHANGE = TSL_STATE_NOT_CHANGED;
 8002124:	7116      	strb	r6, [r2, #4]
 8002126:	9403      	str	r4, [sp, #12]
 8002128:	9004      	str	r0, [sp, #16]
 800212a:	9105      	str	r1, [sp, #20]
  if (THIS_NB_CHANNELS < 3)
 800212c:	f200 809a 	bhi.w	8002264 <TSL_linrot_CalcPos+0x174>
        return TSL_STATUS_ERROR;
 8002130:	2002      	movs	r0, #2
}
 8002132:	b007      	add	sp, #28
 8002134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    norm_delta = p_Ch->Delta; // Take only the Delta
 8002138:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 800213c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    if (norm_delta > delta1)
 8002140:	4571      	cmp	r1, lr
 8002142:	dc7a      	bgt.n	800223a <TSL_linrot_CalcPos+0x14a>
      if (norm_delta > delta2)
 8002144:	42a1      	cmp	r1, r4
 8002146:	f300 8083 	bgt.w	8002250 <TSL_linrot_CalcPos+0x160>
        if (norm_delta > delta3)
 800214a:	42b1      	cmp	r1, r6
 800214c:	f300 8085 	bgt.w	800225a <TSL_linrot_CalcPos+0x16a>
 8002150:	4621      	mov	r1, r4
 8002152:	4634      	mov	r4, r6
    p_Ch++; // Next channel
 8002154:	4626      	mov	r6, r4
 8002156:	f10b 0b0c 	add.w	fp, fp, #12
 800215a:	3301      	adds	r3, #1
 800215c:	460c      	mov	r4, r1
 800215e:	fa5f fa83 	uxtb.w	sl, r3
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8002162:	45d1      	cmp	r9, sl
 8002164:	d8e8      	bhi.n	8002138 <TSL_linrot_CalcPos+0x48>
 8002166:	9b01      	ldr	r3, [sp, #4]
 8002168:	b113      	cbz	r3, 8002170 <TSL_linrot_CalcPos+0x80>
 800216a:	4b66      	ldr	r3, [pc, #408]	; (8002304 <TSL_linrot_CalcPos+0x214>)
 800216c:	f8a3 e000 	strh.w	lr, [r3]
 8002170:	9900      	ldr	r1, [sp, #0]
 8002172:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <TSL_linrot_CalcPos+0x208>)
 8002174:	b101      	cbz	r1, 8002178 <TSL_linrot_CalcPos+0x88>
 8002176:	801c      	strh	r4, [r3, #0]
 8002178:	b10f      	cbz	r7, 800217e <TSL_linrot_CalcPos+0x8e>
 800217a:	4960      	ldr	r1, [pc, #384]	; (80022fc <TSL_linrot_CalcPos+0x20c>)
 800217c:	800e      	strh	r6, [r1, #0]
 800217e:	9902      	ldr	r1, [sp, #8]
 8002180:	b111      	cbz	r1, 8002188 <TSL_linrot_CalcPos+0x98>
 8002182:	495f      	ldr	r1, [pc, #380]	; (8002300 <TSL_linrot_CalcPos+0x210>)
 8002184:	f881 8000 	strb.w	r8, [r1]
 8002188:	b110      	cbz	r0, 8002190 <TSL_linrot_CalcPos+0xa0>
 800218a:	495f      	ldr	r1, [pc, #380]	; (8002308 <TSL_linrot_CalcPos+0x218>)
 800218c:	f881 c000 	strb.w	ip, [r1]
  if (delta2 < ((TSL_tThreshold_T)(THIS_DETECTOUT_TH >> 1) - 1))
 8002190:	6868      	ldr	r0, [r5, #4]
 8002192:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002196:	78c3      	ldrb	r3, [r0, #3]
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	429e      	cmp	r6, r3
 800219e:	dbc7      	blt.n	8002130 <TSL_linrot_CalcPos+0x40>
  minor = (TSL_tNb_T)(delta2 - delta3); // Middle - Smallest signals
 80021a0:	9b04      	ldr	r3, [sp, #16]
  new_position = *(TSL_Globals.This_LinRot->p_PosOff + (index1 * THIS_NB_CHANNELS) + index2);
 80021a2:	4959      	ldr	r1, [pc, #356]	; (8002308 <TSL_linrot_CalcPos+0x218>)
  minor = (TSL_tNb_T)(delta2 - delta3); // Middle - Smallest signals
 80021a4:	f8b3 c000 	ldrh.w	ip, [r3]
  major = (TSL_tNb_T)(delta1 - delta3); // Biggest - Smallest signals
 80021a8:	9b03      	ldr	r3, [sp, #12]
  new_position = *(TSL_Globals.This_LinRot->p_PosOff + (index1 * THIS_NB_CHANNELS) + index2);
 80021aa:	7809      	ldrb	r1, [r1, #0]
  major = (TSL_tNb_T)(delta1 - delta3); // Biggest - Smallest signals
 80021ac:	881f      	ldrh	r7, [r3, #0]
  new_position = *(TSL_Globals.This_LinRot->p_PosOff + (index1 * THIS_NB_CHANNELS) + index2);
 80021ae:	9b05      	ldr	r3, [sp, #20]
  position_correction = THIS_POS_CORR;
 80021b0:	8b6c      	ldrh	r4, [r5, #26]
  new_position = *(TSL_Globals.This_LinRot->p_PosOff + (index1 * THIS_NB_CHANNELS) + index2);
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	fb09 1303 	mla	r3, r9, r3, r1
 80021b8:	6969      	ldr	r1, [r5, #20]
  major = (TSL_tNb_T)(delta1 - delta3); // Biggest - Smallest signals
 80021ba:	eba7 070c 	sub.w	r7, r7, ip
  new_position = *(TSL_Globals.This_LinRot->p_PosOff + (index1 * THIS_NB_CHANNELS) + index2);
 80021be:	f931 e013 	ldrsh.w	lr, [r1, r3, lsl #1]
  sector_computation = THIS_SCT_COMP;
 80021c2:	8b29      	ldrh	r1, [r5, #24]
  major = (TSL_tNb_T)(delta1 - delta3); // Biggest - Smallest signals
 80021c4:	b2bf      	uxth	r7, r7
  sector_computation = major * sector_computation;
 80021c6:	fb17 f101 	smulbb	r1, r7, r1
  minor = (TSL_tNb_T)(delta2 - delta3); // Middle - Smallest signals
 80021ca:	eba6 060c 	sub.w	r6, r6, ip
  sector_computation = sector_computation / (major + minor);
 80021ce:	b289      	uxth	r1, r1
 80021d0:	fa17 f686 	uxtah	r6, r7, r6
 80021d4:	fb91 f1f6 	sdiv	r1, r1, r6
 80021d8:	b28b      	uxth	r3, r1
  if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_LINEARB))
 80021da:	4946      	ldr	r1, [pc, #280]	; (80022f4 <TSL_linrot_CalcPos+0x204>)
 80021dc:	68c9      	ldr	r1, [r1, #12]
 80021de:	7809      	ldrb	r1, [r1, #0]
  if (new_position > 0) // Means Offset is > 0 in the position table
 80021e0:	f1be 0f00 	cmp.w	lr, #0
    new_position = (TSL_tsignPosition_T)((-new_position) << 1);
 80021e4:	bfd8      	it	le
 80021e6:	f1ce 0e00 	rsble	lr, lr, #0
  if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_LINEARB))
 80021ea:	f1a1 0120 	sub.w	r1, r1, #32
    new_position += sector_computation;
 80021ee:	bfcc      	ite	gt
 80021f0:	eb03 034e 	addgt.w	r3, r3, lr, lsl #1
    new_position -= sector_computation;
 80021f4:	ebc3 034e 	rsble	r3, r3, lr, lsl #1
  if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_LINEARB))
 80021f8:	2901      	cmp	r1, #1
    new_position -= sector_computation;
 80021fa:	b21b      	sxth	r3, r3
  if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_LINEARB))
 80021fc:	d83d      	bhi.n	800227a <TSL_linrot_CalcPos+0x18a>
    if (new_position > 0)
 80021fe:	2b00      	cmp	r3, #0
      new_position = new_position + (256 - position_correction);
 8002200:	bfd6      	itet	le
 8002202:	f5c4 7480 	rsble	r4, r4, #256	; 0x100
      new_position -= position_correction;
 8002206:	1b1b      	subgt	r3, r3, r4
      new_position = new_position + (256 - position_correction);
 8002208:	191b      	addle	r3, r3, r4
 800220a:	b21b      	sxth	r3, r3
 800220c:	f383 0308 	usat	r3, #8, r3
  if (THIS_DIRECTION == TSL_TRUE) // Anticlockwise direction ...
 8002210:	f992 1005 	ldrsb.w	r1, [r2, #5]
 8002214:	7854      	ldrb	r4, [r2, #1]
 8002216:	2900      	cmp	r1, #0
 8002218:	b2d9      	uxtb	r1, r3
 800221a:	da52      	bge.n	80022c2 <TSL_linrot_CalcPos+0x1d2>
    if (((TSL_tPosition_T)new_position > THIS_RAW_POSITION) && (((TSL_tPosition_T)new_position - THIS_RAW_POSITION) < DIRECTION_CHANGE_MAX_DISPLACEMENT))
 800221c:	42a1      	cmp	r1, r4
 800221e:	d93f      	bls.n	80022a0 <TSL_linrot_CalcPos+0x1b0>
 8002220:	1b09      	subs	r1, r1, r4
 8002222:	29fe      	cmp	r1, #254	; 0xfe
 8002224:	dc3c      	bgt.n	80022a0 <TSL_linrot_CalcPos+0x1b0>
      if (new_position < (uint16_t)(THIS_RAW_POSITION + THIS_DIR_CHG_POS))
 8002226:	7b01      	ldrb	r1, [r0, #12]
 8002228:	440c      	add	r4, r1
 800222a:	42a3      	cmp	r3, r4
 800222c:	da27      	bge.n	800227e <TSL_linrot_CalcPos+0x18e>
        THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 800222e:	7953      	ldrb	r3, [r2, #5]
 8002230:	7a81      	ldrb	r1, [r0, #10]
 8002232:	f361 0305 	bfi	r3, r1, #0, #6
 8002236:	7153      	strb	r3, [r2, #5]
 8002238:	e77a      	b.n	8002130 <TSL_linrot_CalcPos+0x40>
 800223a:	4670      	mov	r0, lr
 800223c:	468e      	mov	lr, r1
 800223e:	4601      	mov	r1, r0
 8002240:	2001      	movs	r0, #1
 8002242:	46c4      	mov	ip, r8
 8002244:	9002      	str	r0, [sp, #8]
      index1 = idx;
 8002246:	46d0      	mov	r8, sl
 8002248:	4607      	mov	r7, r0
 800224a:	9000      	str	r0, [sp, #0]
 800224c:	9001      	str	r0, [sp, #4]
 800224e:	e781      	b.n	8002154 <TSL_linrot_CalcPos+0x64>
 8002250:	2001      	movs	r0, #1
        index2 = idx;
 8002252:	46d4      	mov	ip, sl
 8002254:	4607      	mov	r7, r0
 8002256:	9000      	str	r0, [sp, #0]
 8002258:	e77c      	b.n	8002154 <TSL_linrot_CalcPos+0x64>
 800225a:	460e      	mov	r6, r1
 800225c:	2701      	movs	r7, #1
 800225e:	4621      	mov	r1, r4
 8002260:	4634      	mov	r4, r6
 8002262:	e777      	b.n	8002154 <TSL_linrot_CalcPos+0x64>
 8002264:	4618      	mov	r0, r3
 8002266:	469c      	mov	ip, r3
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	4698      	mov	r8, r3
 800226c:	461f      	mov	r7, r3
 800226e:	461e      	mov	r6, r3
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	461c      	mov	r4, r3
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	469e      	mov	lr, r3
 8002278:	e771      	b.n	800215e <TSL_linrot_CalcPos+0x6e>
 800227a:	b2db      	uxtb	r3, r3
 800227c:	e7c8      	b.n	8002210 <TSL_linrot_CalcPos+0x120>
        THIS_COUNTER_DIR--;
 800227e:	7951      	ldrb	r1, [r2, #5]
 8002280:	f101 043f 	add.w	r4, r1, #63	; 0x3f
 8002284:	f364 0105 	bfi	r1, r4, #0, #6
 8002288:	7151      	strb	r1, [r2, #5]
        if (!THIS_COUNTER_DIR)
 800228a:	b2c9      	uxtb	r1, r1
 800228c:	f011 043f 	ands.w	r4, r1, #63	; 0x3f
 8002290:	f47f af4e 	bne.w	8002130 <TSL_linrot_CalcPos+0x40>
          THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 8002294:	7a85      	ldrb	r5, [r0, #10]
 8002296:	f365 0105 	bfi	r1, r5, #0, #6
          THIS_DIRECTION = TSL_FALSE;  // New direction accepted: clockwise.
 800229a:	f364 11c7 	bfi	r1, r4, #7, #1
          THIS_DIRECTION = TSL_TRUE;  // New direction accepted: anticlockwise.
 800229e:	7151      	strb	r1, [r2, #5]
  THIS_RAW_POSITION = (TSL_tPosition_T)new_position;
 80022a0:	7053      	strb	r3, [r2, #1]
  u_new_position = (TSL_tPosition_T)((TSL_tPosition_T)new_position >> (RESOLUTION_CALCULATION - THIS_RESOLUTION));
 80022a2:	7ac1      	ldrb	r1, [r0, #11]
 80022a4:	f1c1 0108 	rsb	r1, r1, #8
 80022a8:	410b      	asrs	r3, r1
  if (THIS_POSITION == u_new_position)
 80022aa:	7891      	ldrb	r1, [r2, #2]
  u_new_position = (TSL_tPosition_T)((TSL_tPosition_T)new_position >> (RESOLUTION_CALCULATION - THIS_RESOLUTION));
 80022ac:	b2db      	uxtb	r3, r3
  if (THIS_POSITION == u_new_position)
 80022ae:	4299      	cmp	r1, r3
 80022b0:	f43f af3e 	beq.w	8002130 <TSL_linrot_CalcPos+0x40>
    THIS_POSITION = u_new_position;
 80022b4:	7093      	strb	r3, [r2, #2]
    THIS_POSCHANGE = TSL_STATE_CHANGED;
 80022b6:	7913      	ldrb	r3, [r2, #4]
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	7113      	strb	r3, [r2, #4]
    return TSL_STATUS_OK;
 80022be:	2000      	movs	r0, #0
 80022c0:	e737      	b.n	8002132 <TSL_linrot_CalcPos+0x42>
    if (((TSL_tPosition_T)new_position < THIS_RAW_POSITION) && ((THIS_RAW_POSITION - (TSL_tPosition_T)new_position) < DIRECTION_CHANGE_MAX_DISPLACEMENT))
 80022c2:	42a1      	cmp	r1, r4
 80022c4:	d2ec      	bcs.n	80022a0 <TSL_linrot_CalcPos+0x1b0>
 80022c6:	1a61      	subs	r1, r4, r1
 80022c8:	29fe      	cmp	r1, #254	; 0xfe
 80022ca:	dce9      	bgt.n	80022a0 <TSL_linrot_CalcPos+0x1b0>
      if ((new_position + THIS_DIR_CHG_POS) > THIS_RAW_POSITION)
 80022cc:	7b01      	ldrb	r1, [r0, #12]
 80022ce:	4419      	add	r1, r3
 80022d0:	428c      	cmp	r4, r1
 80022d2:	dbac      	blt.n	800222e <TSL_linrot_CalcPos+0x13e>
        THIS_COUNTER_DIR--;
 80022d4:	7951      	ldrb	r1, [r2, #5]
 80022d6:	f101 043f 	add.w	r4, r1, #63	; 0x3f
 80022da:	f364 0105 	bfi	r1, r4, #0, #6
 80022de:	7151      	strb	r1, [r2, #5]
        if (!THIS_COUNTER_DIR)
 80022e0:	b2c9      	uxtb	r1, r1
 80022e2:	068c      	lsls	r4, r1, #26
 80022e4:	f47f af24 	bne.w	8002130 <TSL_linrot_CalcPos+0x40>
          THIS_COUNTER_DIR = THIS_COUNTER_DEB_DIRECTION;
 80022e8:	7a84      	ldrb	r4, [r0, #10]
 80022ea:	f364 0105 	bfi	r1, r4, #0, #6
          THIS_DIRECTION = TSL_TRUE;  // New direction accepted: anticlockwise.
 80022ee:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80022f2:	e7d4      	b.n	800229e <TSL_linrot_CalcPos+0x1ae>
 80022f4:	20001964 	.word	0x20001964
 80022f8:	20000054 	.word	0x20000054
 80022fc:	20000056 	.word	0x20000056
 8002300:	20000058 	.word	0x20000058
 8002304:	20000052 	.word	0x20000052
 8002308:	20000059 	.word	0x20000059

0800230c <TSL_linrot_GetStateMask>:
  if ((TSL_Globals.This_Obj->Type == TSL_OBJ_LINEARB) ||
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <TSL_linrot_GetStateMask+0x24>)
 800230e:	68d3      	ldr	r3, [r2, #12]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002316:	2b21      	cmp	r3, #33	; 0x21
    state_mask = TSL_Params.p_LinRotSM[THIS_STATEID].StateMask;
 8002318:	bf01      	itttt	eq
 800231a:	6953      	ldreq	r3, [r2, #20]
 800231c:	681b      	ldreq	r3, [r3, #0]
 800231e:	781a      	ldrbeq	r2, [r3, #0]
 8002320:	4b04      	ldreq	r3, [pc, #16]	; (8002334 <TSL_linrot_GetStateMask+0x28>)
 8002322:	bf06      	itte	eq
 8002324:	689b      	ldreq	r3, [r3, #8]
 8002326:	f813 0032 	ldrbeq.w	r0, [r3, r2, lsl #3]
  TSL_StateMask_enum_T state_mask = TSL_STATEMASK_UNKNOWN;
 800232a:	2000      	movne	r0, #0
}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20001964 	.word	0x20001964
 8002334:	20000024 	.word	0x20000024

08002338 <TSL_linrot_ProcessCh_All_SetStatus>:
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <TSL_linrot_ProcessCh_All_SetStatus+0x28>)
 800233a:	695b      	ldr	r3, [r3, #20]
{
 800233c:	b570      	push	{r4, r5, r6, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 800233e:	689c      	ldr	r4, [r3, #8]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8002340:	899d      	ldrh	r5, [r3, #12]
 8002342:	260c      	movs	r6, #12
 8002344:	2300      	movs	r3, #0
 8002346:	b2da      	uxtb	r2, r3
 8002348:	42aa      	cmp	r2, r5
 800234a:	fb06 f103 	mul.w	r1, r6, r3
 800234e:	f103 0301 	add.w	r3, r3, #1
 8002352:	d300      	bcc.n	8002356 <TSL_linrot_ProcessCh_All_SetStatus+0x1e>
}
 8002354:	bd70      	pop	{r4, r5, r6, pc}
    p_Ch->Flags.ObjStatus = sts;
 8002356:	5c62      	ldrb	r2, [r4, r1]
 8002358:	f360 02c4 	bfi	r2, r0, #3, #2
 800235c:	5462      	strb	r2, [r4, r1]
 800235e:	e7f2      	b.n	8002346 <TSL_linrot_ProcessCh_All_SetStatus+0xe>
 8002360:	20001964 	.word	0x20001964

08002364 <TSL_linrot_ProcessCh_One_DataReady>:
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <TSL_linrot_ProcessCh_One_DataReady+0x30>)
 8002366:	695b      	ldr	r3, [r3, #20]
{
 8002368:	b570      	push	{r4, r5, r6, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 800236a:	689c      	ldr	r4, [r3, #8]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 800236c:	899d      	ldrh	r5, [r3, #12]
 800236e:	2200      	movs	r2, #0
  TSL_Status_enum_T retval = TSL_STATUS_ERROR;
 8002370:	2002      	movs	r0, #2
 8002372:	260c      	movs	r6, #12
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8002374:	b2d3      	uxtb	r3, r2
 8002376:	42ab      	cmp	r3, r5
 8002378:	fb06 f102 	mul.w	r1, r6, r2
 800237c:	d300      	bcc.n	8002380 <TSL_linrot_ProcessCh_One_DataReady+0x1c>
}
 800237e:	bd70      	pop	{r4, r5, r6, pc}
    if (p_Ch->Flags.DataReady == TSL_DATA_READY)
 8002380:	5c63      	ldrb	r3, [r4, r1]
 8002382:	f013 0f01 	tst.w	r3, #1
      p_Ch->Flags.DataReady = TSL_DATA_NOT_READY; // The new data is processed
 8002386:	bf1e      	ittt	ne
 8002388:	f36f 0300 	bfcne	r3, #0, #1
 800238c:	5463      	strbne	r3, [r4, r1]
      retval = TSL_STATUS_OK;
 800238e:	2000      	movne	r0, #0
 8002390:	3201      	adds	r2, #1
 8002392:	e7ef      	b.n	8002374 <TSL_linrot_ProcessCh_One_DataReady+0x10>
 8002394:	20001964 	.word	0x20001964

08002398 <TSL_linrot_Process>:
{
 8002398:	b538      	push	{r3, r4, r5, lr}
  if ((TSL_linrot_ProcessCh_One_DataReady() == TSL_STATUS_OK) || (THIS_STATEID == TSL_STATEID_OFF))
 800239a:	f7ff ffe3 	bl	8002364 <TSL_linrot_ProcessCh_One_DataReady>
 800239e:	4c11      	ldr	r4, [pc, #68]	; (80023e4 <TSL_linrot_Process+0x4c>)
 80023a0:	b120      	cbz	r0, 80023ac <TSL_linrot_Process+0x14>
 80023a2:	6963      	ldr	r3, [r4, #20]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b13      	cmp	r3, #19
 80023aa:	d119      	bne.n	80023e0 <TSL_linrot_Process+0x48>
    prev_state_id = THIS_STATEID;
 80023ac:	6963      	ldr	r3, [r4, #20]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	781d      	ldrb	r5, [r3, #0]
    if ((TSL_Globals.This_Obj->Type == TSL_OBJ_LINEARB) ||
 80023b2:	68e3      	ldr	r3, [r4, #12]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80023ba:	2b21      	cmp	r3, #33	; 0x21
 80023bc:	d105      	bne.n	80023ca <TSL_linrot_Process+0x32>
      TSL_Params.p_LinRotSM[THIS_STATEID].StateFunc();
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <TSL_linrot_Process+0x50>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4798      	blx	r3
    if (THIS_STATEID == prev_state_id)
 80023ca:	6963      	ldr	r3, [r4, #20]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	7813      	ldrb	r3, [r2, #0]
 80023d0:	42ab      	cmp	r3, r5
 80023d2:	7913      	ldrb	r3, [r2, #4]
      THIS_CHANGE = TSL_STATE_NOT_CHANGED;
 80023d4:	bf0c      	ite	eq
 80023d6:	f36f 1386 	bfceq	r3, #6, #1
      THIS_CHANGE = TSL_STATE_CHANGED;
 80023da:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80023de:	7113      	strb	r3, [r2, #4]
 80023e0:	bd38      	pop	{r3, r4, r5, pc}
 80023e2:	bf00      	nop
 80023e4:	20001964 	.word	0x20001964
 80023e8:	20000024 	.word	0x20000024

080023ec <TSL_linrot_ProcessCh_One_AcqStatusError>:
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <TSL_linrot_ProcessCh_One_AcqStatusError+0x30>)
 80023ee:	695b      	ldr	r3, [r3, #20]
{
 80023f0:	b530      	push	{r4, r5, lr}
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80023f2:	8999      	ldrh	r1, [r3, #12]
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80023f4:	689d      	ldr	r5, [r3, #8]
 80023f6:	240c      	movs	r4, #12
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	428a      	cmp	r2, r1
 80023fe:	fb04 f003 	mul.w	r0, r4, r3
 8002402:	d301      	bcc.n	8002408 <TSL_linrot_ProcessCh_One_AcqStatusError+0x1c>
  return TSL_STATUS_ERROR;
 8002404:	2002      	movs	r0, #2
 8002406:	bd30      	pop	{r4, r5, pc}
    if (p_Ch->Flags.AcqStatus & TSL_ACQ_STATUS_ERROR_MASK)
 8002408:	5c2a      	ldrb	r2, [r5, r0]
 800240a:	f3c2 0241 	ubfx	r2, r2, #1, #2
 800240e:	0792      	lsls	r2, r2, #30
 8002410:	f103 0301 	add.w	r3, r3, #1
 8002414:	d5f1      	bpl.n	80023fa <TSL_linrot_ProcessCh_One_AcqStatusError+0xe>
      return TSL_STATUS_OK;
 8002416:	2000      	movs	r0, #0
}
 8002418:	bd30      	pop	{r4, r5, pc}
 800241a:	bf00      	nop
 800241c:	20001964 	.word	0x20001964

08002420 <TSL_linrot_CalibrationStateProcess>:
{
 8002420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8002424:	f7ff ffe2 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 8002428:	4f27      	ldr	r7, [pc, #156]	; (80024c8 <TSL_linrot_CalibrationStateProcess+0xa8>)
 800242a:	b958      	cbnz	r0, 8002444 <TSL_linrot_CalibrationStateProcess+0x24>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6813      	ldr	r3, [r2, #0]
 8002430:	6852      	ldr	r2, [r2, #4]
 8002432:	7a52      	ldrb	r2, [r2, #9]
 8002434:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8002436:	b91a      	cbnz	r2, 8002440 <TSL_linrot_CalibrationStateProcess+0x20>
      THIS_STATEID = TSL_STATEID_ERROR;
 8002438:	220d      	movs	r2, #13
      THIS_STATEID = TSL_STATEID_DEB_ERROR_CALIB;
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002440:	220e      	movs	r2, #14
 8002442:	e7fa      	b.n	800243a <TSL_linrot_CalibrationStateProcess+0x1a>
    p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002444:	697b      	ldr	r3, [r7, #20]
      if (THIS_COUNTER_DEB == (TSL_tCounter_T)TSL_Params.NbCalibSamples)
 8002446:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80024d0 <TSL_linrot_CalibrationStateProcess+0xb0>
    p_Ch = TSL_Globals.This_LinRot->p_ChD;
 800244a:	689c      	ldr	r4, [r3, #8]
    for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 800244c:	2600      	movs	r6, #0
 800244e:	6979      	ldr	r1, [r7, #20]
 8002450:	898d      	ldrh	r5, [r1, #12]
 8002452:	680a      	ldr	r2, [r1, #0]
 8002454:	b2f3      	uxtb	r3, r6
 8002456:	42ab      	cmp	r3, r5
 8002458:	d310      	bcc.n	800247c <TSL_linrot_CalibrationStateProcess+0x5c>
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 800245a:	78d3      	ldrb	r3, [r2, #3]
 800245c:	b10b      	cbz	r3, 8002462 <TSL_linrot_CalibrationStateProcess+0x42>
 800245e:	3b01      	subs	r3, #1
 8002460:	70d3      	strb	r3, [r2, #3]
    if (THIS_COUNTER_DEB == 0)
 8002462:	78d3      	ldrb	r3, [r2, #3]
 8002464:	bb33      	cbnz	r3, 80024b4 <TSL_linrot_CalibrationStateProcess+0x94>
        p_Ch->Ref >>= CalibDiv;
 8002466:	4819      	ldr	r0, [pc, #100]	; (80024cc <TSL_linrot_CalibrationStateProcess+0xac>)
      p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002468:	6889      	ldr	r1, [r1, #8]
        p_Ch->Ref >>= CalibDiv;
 800246a:	8806      	ldrh	r6, [r0, #0]
        p_Ch->RefRest = 0;
 800246c:	461c      	mov	r4, r3
      for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 800246e:	b2d8      	uxtb	r0, r3
 8002470:	4285      	cmp	r5, r0
 8002472:	f103 0301 	add.w	r3, r3, #1
 8002476:	d81f      	bhi.n	80024b8 <TSL_linrot_CalibrationStateProcess+0x98>
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002478:	2302      	movs	r3, #2
 800247a:	e01a      	b.n	80024b2 <TSL_linrot_CalibrationStateProcess+0x92>
      if (THIS_COUNTER_DEB == (TSL_tCounter_T)TSL_Params.NbCalibSamples)
 800247c:	78d1      	ldrb	r1, [r2, #3]
 800247e:	f898 3004 	ldrb.w	r3, [r8, #4]
      new_meas = p_Ch->Meas;
 8002482:	8965      	ldrh	r5, [r4, #10]
      if (THIS_COUNTER_DEB == (TSL_tCounter_T)TSL_Params.NbCalibSamples)
 8002484:	4299      	cmp	r1, r3
 8002486:	d10b      	bne.n	80024a0 <TSL_linrot_CalibrationStateProcess+0x80>
        if (TSL_acq_TestFirstReferenceIsValid(p_Ch, new_meas))
 8002488:	4629      	mov	r1, r5
 800248a:	4620      	mov	r0, r4
 800248c:	f7ff fe16 	bl	80020bc <TSL_acq_TestFirstReferenceIsValid>
 8002490:	b118      	cbz	r0, 800249a <TSL_linrot_CalibrationStateProcess+0x7a>
          p_Ch->Ref = new_meas;
 8002492:	80a5      	strh	r5, [r4, #4]
      p_Ch++; // Next channel
 8002494:	340c      	adds	r4, #12
 8002496:	3601      	adds	r6, #1
 8002498:	e7d9      	b.n	800244e <TSL_linrot_CalibrationStateProcess+0x2e>
          p_Ch->Ref = 0;
 800249a:	80a0      	strh	r0, [r4, #4]
          return;
 800249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        p_Ch->Ref += new_meas;
 80024a0:	88a3      	ldrh	r3, [r4, #4]
 80024a2:	442b      	add	r3, r5
 80024a4:	b29b      	uxth	r3, r3
        if (p_Ch->Ref < new_meas)
 80024a6:	429d      	cmp	r5, r3
        p_Ch->Ref += new_meas;
 80024a8:	80a3      	strh	r3, [r4, #4]
        if (p_Ch->Ref < new_meas)
 80024aa:	d9f3      	bls.n	8002494 <TSL_linrot_CalibrationStateProcess+0x74>
          p_Ch->Ref = 0; // Suppress the bad reference
 80024ac:	2300      	movs	r3, #0
 80024ae:	80a3      	strh	r3, [r4, #4]
          THIS_STATEID = TSL_STATEID_ERROR;
 80024b0:	230d      	movs	r3, #13
      THIS_STATEID = TSL_STATEID_RELEASE;
 80024b2:	7013      	strb	r3, [r2, #0]
 80024b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        p_Ch->Ref >>= CalibDiv;
 80024b8:	8888      	ldrh	r0, [r1, #4]
        p_Ch->RefRest = 0;
 80024ba:	718c      	strb	r4, [r1, #6]
        p_Ch->Ref >>= CalibDiv;
 80024bc:	4130      	asrs	r0, r6
 80024be:	8088      	strh	r0, [r1, #4]
        p_Ch->Delta = 0;
 80024c0:	810c      	strh	r4, [r1, #8]
        p_Ch++; // Next channel
 80024c2:	310c      	adds	r1, #12
 80024c4:	e7d3      	b.n	800246e <TSL_linrot_CalibrationStateProcess+0x4e>
 80024c6:	bf00      	nop
 80024c8:	20001964 	.word	0x20001964
 80024cc:	20000050 	.word	0x20000050
 80024d0:	20000024 	.word	0x20000024

080024d4 <TSL_linrot_DebReleaseProxStateProcess>:
{
 80024d4:	b510      	push	{r4, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80024d6:	f7ff ff89 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <TSL_linrot_DebReleaseProxStateProcess+0x38>)
 80024dc:	b920      	cbnz	r0, 80024e8 <TSL_linrot_DebReleaseProxStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_PROX; // Go back to the previous state
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
      THIS_STATEID = TSL_STATEID_PROX; // Go back to the previous state
 80024e2:	2206      	movs	r2, #6
        THIS_STATEID = TSL_STATEID_RELEASE;
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	bd10      	pop	{r4, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 80024e8:	695c      	ldr	r4, [r3, #20]
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	7858      	ldrb	r0, [r3, #1]
 80024ee:	f7ff fde7 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d0f4      	beq.n	80024e2 <TSL_linrot_DebReleaseProxStateProcess+0xe>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80024f8:	78da      	ldrb	r2, [r3, #3]
 80024fa:	b10a      	cbz	r2, 8002500 <TSL_linrot_DebReleaseProxStateProcess+0x2c>
 80024fc:	3a01      	subs	r2, #1
 80024fe:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8002500:	78da      	ldrb	r2, [r3, #3]
 8002502:	2a00      	cmp	r2, #0
 8002504:	d1ef      	bne.n	80024e6 <TSL_linrot_DebReleaseProxStateProcess+0x12>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002506:	2202      	movs	r2, #2
 8002508:	e7ec      	b.n	80024e4 <TSL_linrot_DebReleaseProxStateProcess+0x10>
 800250a:	bf00      	nop
 800250c:	20001964 	.word	0x20001964

08002510 <TSL_linrot_DebReleaseDetectStateProcess>:
{
 8002510:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8002512:	f7ff ff6b 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <TSL_linrot_DebReleaseDetectStateProcess+0x48>)
 8002518:	b920      	cbnz	r0, 8002524 <TSL_linrot_DebReleaseDetectStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_DETECT; // Go back to the previous state
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	220a      	movs	r2, #10
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8002524:	695c      	ldr	r4, [r3, #20]
 8002526:	6865      	ldr	r5, [r4, #4]
 8002528:	78e8      	ldrb	r0, [r5, #3]
 800252a:	f7ff fdc9 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800252e:	6824      	ldr	r4, [r4, #0]
 8002530:	b910      	cbnz	r0, 8002538 <TSL_linrot_DebReleaseDetectStateProcess+0x28>
      THIS_STATEID = TSL_STATEID_DETECT;
 8002532:	230a      	movs	r3, #10
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002534:	7023      	strb	r3, [r4, #0]
 8002536:	bd38      	pop	{r3, r4, r5, pc}
      if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8002538:	7868      	ldrb	r0, [r5, #1]
 800253a:	f7ff fdc1 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800253e:	b908      	cbnz	r0, 8002544 <TSL_linrot_DebReleaseDetectStateProcess+0x34>
        THIS_STATEID = TSL_STATEID_PROX;
 8002540:	2306      	movs	r3, #6
 8002542:	e7f7      	b.n	8002534 <TSL_linrot_DebReleaseDetectStateProcess+0x24>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002544:	78e3      	ldrb	r3, [r4, #3]
 8002546:	b10b      	cbz	r3, 800254c <TSL_linrot_DebReleaseDetectStateProcess+0x3c>
 8002548:	3b01      	subs	r3, #1
 800254a:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 800254c:	78e3      	ldrb	r3, [r4, #3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f1      	bne.n	8002536 <TSL_linrot_DebReleaseDetectStateProcess+0x26>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002552:	2302      	movs	r3, #2
 8002554:	e7ee      	b.n	8002534 <TSL_linrot_DebReleaseDetectStateProcess+0x24>
 8002556:	bf00      	nop
 8002558:	20001964 	.word	0x20001964

0800255c <TSL_linrot_DebReleaseTouchStateProcess>:
{
 800255c:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 800255e:	f7ff ff45 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <TSL_linrot_DebReleaseTouchStateProcess+0x48>)
 8002564:	b920      	cbnz	r0, 8002570 <TSL_linrot_DebReleaseTouchStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_TOUCH; // Go back to the previous state
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	220c      	movs	r2, #12
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8002570:	695c      	ldr	r4, [r3, #20]
 8002572:	6865      	ldr	r5, [r4, #4]
 8002574:	78e8      	ldrb	r0, [r5, #3]
 8002576:	f7ff fda3 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800257a:	6824      	ldr	r4, [r4, #0]
 800257c:	b910      	cbnz	r0, 8002584 <TSL_linrot_DebReleaseTouchStateProcess+0x28>
      THIS_STATEID = TSL_STATEID_TOUCH;
 800257e:	230c      	movs	r3, #12
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002580:	7023      	strb	r3, [r4, #0]
 8002582:	bd38      	pop	{r3, r4, r5, pc}
      if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8002584:	7868      	ldrb	r0, [r5, #1]
 8002586:	f7ff fd9b 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800258a:	b908      	cbnz	r0, 8002590 <TSL_linrot_DebReleaseTouchStateProcess+0x34>
        THIS_STATEID = TSL_STATEID_PROX;
 800258c:	2306      	movs	r3, #6
 800258e:	e7f7      	b.n	8002580 <TSL_linrot_DebReleaseTouchStateProcess+0x24>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002590:	78e3      	ldrb	r3, [r4, #3]
 8002592:	b10b      	cbz	r3, 8002598 <TSL_linrot_DebReleaseTouchStateProcess+0x3c>
 8002594:	3b01      	subs	r3, #1
 8002596:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 8002598:	78e3      	ldrb	r3, [r4, #3]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f1      	bne.n	8002582 <TSL_linrot_DebReleaseTouchStateProcess+0x26>
        THIS_STATEID = TSL_STATEID_RELEASE;
 800259e:	2302      	movs	r3, #2
 80025a0:	e7ee      	b.n	8002580 <TSL_linrot_DebReleaseTouchStateProcess+0x24>
 80025a2:	bf00      	nop
 80025a4:	20001964 	.word	0x20001964

080025a8 <TSL_linrot_DebProxDetectStateProcess>:
{
 80025a8:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80025aa:	f7ff ff1f 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <TSL_linrot_DebProxDetectStateProcess+0x50>)
 80025b0:	b920      	cbnz	r0, 80025bc <TSL_linrot_DebProxDetectStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_DETECT;
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	220a      	movs	r2, #10
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 80025bc:	695c      	ldr	r4, [r3, #20]
 80025be:	6865      	ldr	r5, [r4, #4]
 80025c0:	78e8      	ldrb	r0, [r5, #3]
 80025c2:	f7ff fd7d 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 80025c6:	6824      	ldr	r4, [r4, #0]
 80025c8:	b910      	cbnz	r0, 80025d0 <TSL_linrot_DebProxDetectStateProcess+0x28>
      THIS_STATEID = TSL_STATEID_DETECT;
 80025ca:	230a      	movs	r3, #10
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 80025cc:	7023      	strb	r3, [r4, #0]
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 80025d0:	7868      	ldrb	r0, [r5, #1]
 80025d2:	f7ff fd75 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 80025d6:	b940      	cbnz	r0, 80025ea <TSL_linrot_DebProxDetectStateProcess+0x42>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80025d8:	78e3      	ldrb	r3, [r4, #3]
 80025da:	b10b      	cbz	r3, 80025e0 <TSL_linrot_DebProxDetectStateProcess+0x38>
 80025dc:	3b01      	subs	r3, #1
 80025de:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 80025e0:	78e3      	ldrb	r3, [r4, #3]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f3      	bne.n	80025ce <TSL_linrot_DebProxDetectStateProcess+0x26>
        THIS_STATEID = TSL_STATEID_PROX;
 80025e6:	2306      	movs	r3, #6
 80025e8:	e7f0      	b.n	80025cc <TSL_linrot_DebProxDetectStateProcess+0x24>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 80025ea:	7a2b      	ldrb	r3, [r5, #8]
 80025ec:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 80025ee:	b90b      	cbnz	r3, 80025f4 <TSL_linrot_DebProxDetectStateProcess+0x4c>
        THIS_STATEID = TSL_STATEID_RELEASE;
 80025f0:	2302      	movs	r3, #2
 80025f2:	e7eb      	b.n	80025cc <TSL_linrot_DebProxDetectStateProcess+0x24>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 80025f4:	2304      	movs	r3, #4
 80025f6:	e7e9      	b.n	80025cc <TSL_linrot_DebProxDetectStateProcess+0x24>
 80025f8:	20001964 	.word	0x20001964

080025fc <TSL_linrot_DebProxTouchStateProcess>:
{
 80025fc:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80025fe:	f7ff fef5 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <TSL_linrot_DebProxTouchStateProcess+0x50>)
 8002604:	b920      	cbnz	r0, 8002610 <TSL_linrot_DebProxTouchStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_TOUCH;
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	220c      	movs	r2, #12
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8002610:	695c      	ldr	r4, [r3, #20]
 8002612:	6865      	ldr	r5, [r4, #4]
 8002614:	78e8      	ldrb	r0, [r5, #3]
 8002616:	f7ff fd53 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800261a:	6824      	ldr	r4, [r4, #0]
 800261c:	b910      	cbnz	r0, 8002624 <TSL_linrot_DebProxTouchStateProcess+0x28>
      THIS_STATEID = TSL_STATEID_TOUCH;
 800261e:	230c      	movs	r3, #12
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8002620:	7023      	strb	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8002624:	7868      	ldrb	r0, [r5, #1]
 8002626:	f7ff fd4b 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800262a:	b940      	cbnz	r0, 800263e <TSL_linrot_DebProxTouchStateProcess+0x42>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 800262c:	78e3      	ldrb	r3, [r4, #3]
 800262e:	b10b      	cbz	r3, 8002634 <TSL_linrot_DebProxTouchStateProcess+0x38>
 8002630:	3b01      	subs	r3, #1
 8002632:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 8002634:	78e3      	ldrb	r3, [r4, #3]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f3      	bne.n	8002622 <TSL_linrot_DebProxTouchStateProcess+0x26>
        THIS_STATEID = TSL_STATEID_PROX;
 800263a:	2306      	movs	r3, #6
 800263c:	e7f0      	b.n	8002620 <TSL_linrot_DebProxTouchStateProcess+0x24>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 800263e:	7a2b      	ldrb	r3, [r5, #8]
 8002640:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 8002642:	b90b      	cbnz	r3, 8002648 <TSL_linrot_DebProxTouchStateProcess+0x4c>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002644:	2302      	movs	r3, #2
 8002646:	e7eb      	b.n	8002620 <TSL_linrot_DebProxTouchStateProcess+0x24>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8002648:	2305      	movs	r3, #5
 800264a:	e7e9      	b.n	8002620 <TSL_linrot_DebProxTouchStateProcess+0x24>
 800264c:	20001964 	.word	0x20001964

08002650 <TSL_linrot_DetectStateProcess>:
{
 8002650:	b570      	push	{r4, r5, r6, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8002652:	f7ff fecb 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 8002656:	4e19      	ldr	r6, [pc, #100]	; (80026bc <TSL_linrot_DetectStateProcess+0x6c>)
 8002658:	b950      	cbnz	r0, 8002670 <TSL_linrot_DetectStateProcess+0x20>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 800265a:	6972      	ldr	r2, [r6, #20]
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	6852      	ldr	r2, [r2, #4]
 8002660:	7a52      	ldrb	r2, [r2, #9]
 8002662:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8002664:	b912      	cbnz	r2, 800266c <TSL_linrot_DetectStateProcess+0x1c>
      THIS_STATEID = TSL_STATEID_ERROR;
 8002666:	220d      	movs	r2, #13
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	bd70      	pop	{r4, r5, r6, pc}
      THIS_STATEID = TSL_STATEID_DEB_ERROR_DETECT;
 800266c:	2211      	movs	r2, #17
 800266e:	e7fb      	b.n	8002668 <TSL_linrot_DetectStateProcess+0x18>
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 8002670:	6975      	ldr	r5, [r6, #20]
 8002672:	686c      	ldr	r4, [r5, #4]
 8002674:	78e0      	ldrb	r0, [r4, #3]
 8002676:	f7ff fd23 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800267a:	b960      	cbnz	r0, 8002696 <TSL_linrot_DetectStateProcess+0x46>
      if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_ROTARY))
 800267c:	68f3      	ldr	r3, [r6, #12]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002684:	2b20      	cmp	r3, #32
        TSL_Params.p_LinRotMT->CalcPosition();
 8002686:	bf16      	itet	ne
 8002688:	4b0d      	ldrne	r3, [pc, #52]	; (80026c0 <TSL_linrot_DetectStateProcess+0x70>)
        TSL_Globals.This_LinRot->p_Methods->CalcPosition();
 800268a:	6a2b      	ldreq	r3, [r5, #32]
        TSL_Params.p_LinRotMT->CalcPosition();
 800268c:	68db      	ldrne	r3, [r3, #12]
}
 800268e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TSL_Params.p_LinRotMT->CalcPosition();
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4718      	bx	r3
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 8002696:	7860      	ldrb	r0, [r4, #1]
 8002698:	f7ff fd12 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	b930      	cbnz	r0, 80026ae <TSL_linrot_DetectStateProcess+0x5e>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 80026a0:	79a2      	ldrb	r2, [r4, #6]
 80026a2:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80026a4:	b90a      	cbnz	r2, 80026aa <TSL_linrot_DetectStateProcess+0x5a>
        THIS_STATEID = TSL_STATEID_PROX;
 80026a6:	2206      	movs	r2, #6
 80026a8:	e7de      	b.n	8002668 <TSL_linrot_DetectStateProcess+0x18>
        THIS_STATEID = TSL_STATEID_DEB_PROX_DETECT;
 80026aa:	2208      	movs	r2, #8
 80026ac:	e7dc      	b.n	8002668 <TSL_linrot_DetectStateProcess+0x18>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 80026ae:	7a22      	ldrb	r2, [r4, #8]
 80026b0:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 80026b2:	b90a      	cbnz	r2, 80026b8 <TSL_linrot_DetectStateProcess+0x68>
      THIS_STATEID = TSL_STATEID_RELEASE;
 80026b4:	2202      	movs	r2, #2
 80026b6:	e7d7      	b.n	8002668 <TSL_linrot_DetectStateProcess+0x18>
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 80026b8:	2204      	movs	r2, #4
 80026ba:	e7d5      	b.n	8002668 <TSL_linrot_DetectStateProcess+0x18>
 80026bc:	20001964 	.word	0x20001964
 80026c0:	20000024 	.word	0x20000024

080026c4 <TSL_linrot_TouchStateProcess>:
{
 80026c4:	b570      	push	{r4, r5, r6, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80026c6:	f7ff fe91 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 80026ca:	4e19      	ldr	r6, [pc, #100]	; (8002730 <TSL_linrot_TouchStateProcess+0x6c>)
 80026cc:	b950      	cbnz	r0, 80026e4 <TSL_linrot_TouchStateProcess+0x20>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 80026ce:	6972      	ldr	r2, [r6, #20]
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	6852      	ldr	r2, [r2, #4]
 80026d4:	7a52      	ldrb	r2, [r2, #9]
 80026d6:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 80026d8:	b912      	cbnz	r2, 80026e0 <TSL_linrot_TouchStateProcess+0x1c>
      THIS_STATEID = TSL_STATEID_ERROR;
 80026da:	220d      	movs	r2, #13
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	bd70      	pop	{r4, r5, r6, pc}
      THIS_STATEID = TSL_STATEID_DEB_ERROR_TOUCH;
 80026e0:	2212      	movs	r2, #18
 80026e2:	e7fb      	b.n	80026dc <TSL_linrot_TouchStateProcess+0x18>
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_DETECTOUT_TH, 1) == TSL_STATUS_OK)
 80026e4:	6975      	ldr	r5, [r6, #20]
 80026e6:	686c      	ldr	r4, [r5, #4]
 80026e8:	78e0      	ldrb	r0, [r4, #3]
 80026ea:	f7ff fce9 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 80026ee:	b960      	cbnz	r0, 800270a <TSL_linrot_TouchStateProcess+0x46>
      if ((THIS_OBJ_TYPE == TSL_OBJ_LINEAR) || (THIS_OBJ_TYPE == TSL_OBJ_ROTARY))
 80026f0:	68f3      	ldr	r3, [r6, #12]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80026f8:	2b20      	cmp	r3, #32
        TSL_Params.p_LinRotMT->CalcPosition();
 80026fa:	bf16      	itet	ne
 80026fc:	4b0d      	ldrne	r3, [pc, #52]	; (8002734 <TSL_linrot_TouchStateProcess+0x70>)
        TSL_Globals.This_LinRot->p_Methods->CalcPosition();
 80026fe:	6a2b      	ldreq	r3, [r5, #32]
        TSL_Params.p_LinRotMT->CalcPosition();
 8002700:	68db      	ldrne	r3, [r3, #12]
}
 8002702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TSL_Params.p_LinRotMT->CalcPosition();
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4718      	bx	r3
    if (TSL_linrot_ProcessCh_One_DeltaAbove(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 800270a:	7860      	ldrb	r0, [r4, #1]
 800270c:	f7ff fcd8 	bl	80020c0 <TSL_linrot_ProcessCh_One_DeltaAbove.constprop.1>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	b930      	cbnz	r0, 8002722 <TSL_linrot_TouchStateProcess+0x5e>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8002714:	79a2      	ldrb	r2, [r4, #6]
 8002716:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8002718:	b90a      	cbnz	r2, 800271e <TSL_linrot_TouchStateProcess+0x5a>
        THIS_STATEID = TSL_STATEID_PROX;
 800271a:	2206      	movs	r2, #6
 800271c:	e7de      	b.n	80026dc <TSL_linrot_TouchStateProcess+0x18>
        THIS_STATEID = TSL_STATEID_DEB_PROX_TOUCH;
 800271e:	2209      	movs	r2, #9
 8002720:	e7dc      	b.n	80026dc <TSL_linrot_TouchStateProcess+0x18>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8002722:	7a22      	ldrb	r2, [r4, #8]
 8002724:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8002726:	b90a      	cbnz	r2, 800272c <TSL_linrot_TouchStateProcess+0x68>
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002728:	2202      	movs	r2, #2
 800272a:	e7d7      	b.n	80026dc <TSL_linrot_TouchStateProcess+0x18>
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 800272c:	2205      	movs	r2, #5
 800272e:	e7d5      	b.n	80026dc <TSL_linrot_TouchStateProcess+0x18>
 8002730:	20001964 	.word	0x20001964
 8002734:	20000024 	.word	0x20000024

08002738 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus>:
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x2c>)
{
 800273a:	b510      	push	{r4, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 800273c:	695b      	ldr	r3, [r3, #20]
    if (norm_delta <= -th) // Warning!!! The threshold is inverted
 800273e:	4240      	negs	r0, r0
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002740:	689a      	ldr	r2, [r3, #8]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8002742:	8999      	ldrh	r1, [r3, #12]
 8002744:	2300      	movs	r3, #0
 8002746:	b2dc      	uxtb	r4, r3
 8002748:	428c      	cmp	r4, r1
 800274a:	d301      	bcc.n	8002750 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x18>
  return TSL_STATUS_ERROR;
 800274c:	2002      	movs	r0, #2
 800274e:	bd10      	pop	{r4, pc}
    if (norm_delta <= -th) // Warning!!! The threshold is inverted
 8002750:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 8002754:	4284      	cmp	r4, r0
 8002756:	f103 0301 	add.w	r3, r3, #1
 800275a:	dd01      	ble.n	8002760 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0x28>
    p_Ch++;
 800275c:	320c      	adds	r2, #12
 800275e:	e7f2      	b.n	8002746 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus+0xe>
      return TSL_STATUS_OK;
 8002760:	2000      	movs	r0, #0
}
 8002762:	bd10      	pop	{r4, pc}
 8002764:	20001964 	.word	0x20001964

08002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>:
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x2c>)
{
 800276a:	b510      	push	{r4, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	689a      	ldr	r2, [r3, #8]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8002770:	8999      	ldrh	r1, [r3, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	b2dc      	uxtb	r4, r3
 8002776:	428c      	cmp	r4, r1
 8002778:	d301      	bcc.n	800277e <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x16>
  return TSL_STATUS_ERROR;
 800277a:	2002      	movs	r0, #2
 800277c:	bd10      	pop	{r4, pc}
    if (norm_delta >= th)
 800277e:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 8002782:	4284      	cmp	r4, r0
 8002784:	f103 0301 	add.w	r3, r3, #1
 8002788:	da01      	bge.n	800278e <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0x26>
    p_Ch++;
 800278a:	320c      	adds	r2, #12
 800278c:	e7f2      	b.n	8002774 <TSL_linrot_ProcessCh_One_DeltaAboveEqu+0xc>
      return TSL_STATUS_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	bd10      	pop	{r4, pc}
 8002792:	bf00      	nop
 8002794:	20001964 	.word	0x20001964

08002798 <TSL_linrot_DebProxStateProcess>:
{
 8002798:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 800279a:	f7ff fe27 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <TSL_linrot_DebProxStateProcess+0x54>)
 80027a0:	b920      	cbnz	r0, 80027ac <TSL_linrot_DebProxStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_RELEASE;
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 80027ac:	695c      	ldr	r4, [r3, #20]
 80027ae:	6865      	ldr	r5, [r4, #4]
 80027b0:	2101      	movs	r1, #1
 80027b2:	78a8      	ldrb	r0, [r5, #2]
 80027b4:	f7ff ffd8 	bl	8002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 80027b8:	6824      	ldr	r4, [r4, #0]
 80027ba:	b938      	cbnz	r0, 80027cc <TSL_linrot_DebProxStateProcess+0x34>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 80027bc:	79eb      	ldrb	r3, [r5, #7]
 80027be:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 80027c0:	b913      	cbnz	r3, 80027c8 <TSL_linrot_DebProxStateProcess+0x30>
        THIS_STATEID = TSL_STATEID_DETECT;
 80027c2:	230a      	movs	r3, #10
      THIS_STATEID = TSL_STATEID_RELEASE;
 80027c4:	7023      	strb	r3, [r4, #0]
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 80027c8:	230b      	movs	r3, #11
 80027ca:	e7fb      	b.n	80027c4 <TSL_linrot_DebProxStateProcess+0x2c>
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_PROXIN_TH, 0) == TSL_STATUS_OK)
 80027cc:	2100      	movs	r1, #0
 80027ce:	7828      	ldrb	r0, [r5, #0]
 80027d0:	f7ff ffca 	bl	8002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 80027d4:	b940      	cbnz	r0, 80027e8 <TSL_linrot_DebProxStateProcess+0x50>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80027d6:	78e3      	ldrb	r3, [r4, #3]
 80027d8:	b10b      	cbz	r3, 80027de <TSL_linrot_DebProxStateProcess+0x46>
 80027da:	3b01      	subs	r3, #1
 80027dc:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 80027de:	78e3      	ldrb	r3, [r4, #3]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <TSL_linrot_DebProxStateProcess+0x2e>
        THIS_STATEID = TSL_STATEID_PROX;
 80027e4:	2306      	movs	r3, #6
 80027e6:	e7ed      	b.n	80027c4 <TSL_linrot_DebProxStateProcess+0x2c>
      THIS_STATEID = TSL_STATEID_RELEASE;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e7eb      	b.n	80027c4 <TSL_linrot_DebProxStateProcess+0x2c>
 80027ec:	20001964 	.word	0x20001964

080027f0 <TSL_linrot_DebDetectStateProcess>:
{
 80027f0:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 80027f2:	f7ff fdfb 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <TSL_linrot_DebDetectStateProcess+0x54>)
 80027f8:	b920      	cbnz	r0, 8002804 <TSL_linrot_DebDetectStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_RELEASE;
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2202      	movs	r2, #2
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	bd38      	pop	{r3, r4, r5, pc}
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 8002804:	695c      	ldr	r4, [r3, #20]
 8002806:	6865      	ldr	r5, [r4, #4]
 8002808:	2101      	movs	r1, #1
 800280a:	78a8      	ldrb	r0, [r5, #2]
 800280c:	f7ff ffac 	bl	8002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 8002810:	6824      	ldr	r4, [r4, #0]
 8002812:	b940      	cbnz	r0, 8002826 <TSL_linrot_DebDetectStateProcess+0x36>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002814:	78e3      	ldrb	r3, [r4, #3]
 8002816:	b10b      	cbz	r3, 800281c <TSL_linrot_DebDetectStateProcess+0x2c>
 8002818:	3b01      	subs	r3, #1
 800281a:	70e3      	strb	r3, [r4, #3]
      if (THIS_COUNTER_DEB == 0)
 800281c:	78e3      	ldrb	r3, [r4, #3]
 800281e:	b90b      	cbnz	r3, 8002824 <TSL_linrot_DebDetectStateProcess+0x34>
        THIS_STATEID = TSL_STATEID_DETECT;
 8002820:	230a      	movs	r3, #10
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002822:	7023      	strb	r3, [r4, #0]
 8002824:	bd38      	pop	{r3, r4, r5, pc}
      if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_PROXIN_TH, 0) == TSL_STATUS_OK)
 8002826:	2100      	movs	r1, #0
 8002828:	7828      	ldrb	r0, [r5, #0]
 800282a:	f7ff ff9d 	bl	8002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 800282e:	b930      	cbnz	r0, 800283e <TSL_linrot_DebDetectStateProcess+0x4e>
        THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8002830:	79ab      	ldrb	r3, [r5, #6]
 8002832:	70e3      	strb	r3, [r4, #3]
        if (THIS_COUNTER_DEB == 0)
 8002834:	b90b      	cbnz	r3, 800283a <TSL_linrot_DebDetectStateProcess+0x4a>
          THIS_STATEID = TSL_STATEID_PROX;
 8002836:	2306      	movs	r3, #6
 8002838:	e7f3      	b.n	8002822 <TSL_linrot_DebDetectStateProcess+0x32>
          THIS_STATEID = TSL_STATEID_DEB_PROX;
 800283a:	2307      	movs	r3, #7
 800283c:	e7f1      	b.n	8002822 <TSL_linrot_DebDetectStateProcess+0x32>
        THIS_STATEID = TSL_STATEID_RELEASE;
 800283e:	2302      	movs	r3, #2
 8002840:	e7ef      	b.n	8002822 <TSL_linrot_DebDetectStateProcess+0x32>
 8002842:	bf00      	nop
 8002844:	20001964 	.word	0x20001964

08002848 <TSL_linrot_ProcessCh_All_DeltaBelowEqu>:
  * @retval Status
  */
TSL_Status_enum_T TSL_linrot_ProcessCh_All_DeltaBelowEqu(TSL_tThreshold_T th, TSL_tIndex_T coeff)
{
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x2c>)
{
 800284a:	b510      	push	{r4, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	689a      	ldr	r2, [r3, #8]
    lth = th;
  }
#endif

  // Return OK if ALL channels are below or equal the threshold
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 8002850:	8999      	ldrh	r1, [r3, #12]
 8002852:	2300      	movs	r3, #0
 8002854:	b2dc      	uxtb	r4, r3
 8002856:	428c      	cmp	r4, r1
 8002858:	d301      	bcc.n	800285e <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x16>
#endif
      return TSL_STATUS_ERROR;
    }
    p_Ch++;
  }
  return TSL_STATUS_OK;
 800285a:	2000      	movs	r0, #0
 800285c:	bd10      	pop	{r4, pc}
    if (norm_delta > th)
 800285e:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 8002862:	4284      	cmp	r4, r0
 8002864:	f103 0301 	add.w	r3, r3, #1
 8002868:	dc01      	bgt.n	800286e <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0x26>
    p_Ch++;
 800286a:	320c      	adds	r2, #12
 800286c:	e7f2      	b.n	8002854 <TSL_linrot_ProcessCh_All_DeltaBelowEqu+0xc>
      return TSL_STATUS_ERROR;
 800286e:	2002      	movs	r0, #2
}
 8002870:	bd10      	pop	{r4, pc}
 8002872:	bf00      	nop
 8002874:	20001964 	.word	0x20001964

08002878 <TSL_linrot_ProxStateProcess>:
{
 8002878:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 800287a:	f7ff fdb7 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <TSL_linrot_ProxStateProcess+0x5c>)
 8002880:	b950      	cbnz	r0, 8002898 <TSL_linrot_ProxStateProcess+0x20>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	6813      	ldr	r3, [r2, #0]
 8002886:	6852      	ldr	r2, [r2, #4]
 8002888:	7a52      	ldrb	r2, [r2, #9]
 800288a:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 800288c:	b912      	cbnz	r2, 8002894 <TSL_linrot_ProxStateProcess+0x1c>
      THIS_STATEID = TSL_STATEID_ERROR;
 800288e:	220d      	movs	r2, #13
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	bd38      	pop	{r3, r4, r5, pc}
      THIS_STATEID = TSL_STATEID_DEB_ERROR_PROX;
 8002894:	2210      	movs	r2, #16
 8002896:	e7fb      	b.n	8002890 <TSL_linrot_ProxStateProcess+0x18>
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 8002898:	695d      	ldr	r5, [r3, #20]
 800289a:	686c      	ldr	r4, [r5, #4]
 800289c:	2101      	movs	r1, #1
 800289e:	78a0      	ldrb	r0, [r4, #2]
 80028a0:	f7ff ff62 	bl	8002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 80028a4:	b938      	cbnz	r0, 80028b6 <TSL_linrot_ProxStateProcess+0x3e>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 80028a6:	682b      	ldr	r3, [r5, #0]
 80028a8:	79e2      	ldrb	r2, [r4, #7]
 80028aa:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80028ac:	b90a      	cbnz	r2, 80028b2 <TSL_linrot_ProxStateProcess+0x3a>
        THIS_STATEID = TSL_STATEID_DETECT;
 80028ae:	220a      	movs	r2, #10
 80028b0:	e7ee      	b.n	8002890 <TSL_linrot_ProxStateProcess+0x18>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 80028b2:	220b      	movs	r2, #11
 80028b4:	e7ec      	b.n	8002890 <TSL_linrot_ProxStateProcess+0x18>
    if (TSL_linrot_ProcessCh_All_DeltaBelowEqu(THIS_PROXOUT_TH, 0) == TSL_STATUS_OK)
 80028b6:	2100      	movs	r1, #0
 80028b8:	7860      	ldrb	r0, [r4, #1]
 80028ba:	f7ff ffc5 	bl	8002848 <TSL_linrot_ProcessCh_All_DeltaBelowEqu>
 80028be:	2800      	cmp	r0, #0
 80028c0:	d1e7      	bne.n	8002892 <TSL_linrot_ProxStateProcess+0x1a>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 80028c2:	682b      	ldr	r3, [r5, #0]
 80028c4:	7a22      	ldrb	r2, [r4, #8]
 80028c6:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80028c8:	b90a      	cbnz	r2, 80028ce <TSL_linrot_ProxStateProcess+0x56>
        THIS_STATEID = TSL_STATEID_RELEASE;
 80028ca:	2202      	movs	r2, #2
 80028cc:	e7e0      	b.n	8002890 <TSL_linrot_ProxStateProcess+0x18>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
 80028ce:	2203      	movs	r2, #3
 80028d0:	e7de      	b.n	8002890 <TSL_linrot_ProxStateProcess+0x18>
 80028d2:	bf00      	nop
 80028d4:	20001964 	.word	0x20001964

080028d8 <TSL_linrot_ProcessCh_All_ClearRef>:
  * @retval None
  */
void TSL_linrot_ProcessCh_All_ClearRef(void)
{
  TSL_tIndex_T idx;
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <TSL_linrot_ProcessCh_All_ClearRef+0x24>)
 80028da:	695b      	ldr	r3, [r3, #20]
{
 80028dc:	b510      	push	{r4, lr}
  TSL_ChannelData_T *p_Ch = TSL_Globals.This_LinRot->p_ChD;
 80028de:	689a      	ldr	r2, [r3, #8]
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80028e0:	899c      	ldrh	r4, [r3, #12]
 80028e2:	2300      	movs	r3, #0
  {
    p_Ch->Ref = 0;
 80028e4:	4618      	mov	r0, r3
  for (idx = 0; idx < THIS_NB_CHANNELS; idx++)
 80028e6:	b2d9      	uxtb	r1, r3
 80028e8:	42a1      	cmp	r1, r4
 80028ea:	f103 0301 	add.w	r3, r3, #1
 80028ee:	d300      	bcc.n	80028f2 <TSL_linrot_ProcessCh_All_ClearRef+0x1a>
    p_Ch->RefRest = 0;
    p_Ch++;
  }
}
 80028f0:	bd10      	pop	{r4, pc}
    p_Ch->Ref = 0;
 80028f2:	8090      	strh	r0, [r2, #4]
    p_Ch->RefRest = 0;
 80028f4:	7190      	strb	r0, [r2, #6]
    p_Ch++;
 80028f6:	320c      	adds	r2, #12
 80028f8:	e7f5      	b.n	80028e6 <TSL_linrot_ProcessCh_All_ClearRef+0xe>
 80028fa:	bf00      	nop
 80028fc:	20001964 	.word	0x20001964

08002900 <TSL_linrot_SetStateCalibration>:
{
 8002900:	b538      	push	{r3, r4, r5, lr}
  THIS_STATEID = TSL_STATEID_CALIB;
 8002902:	4c12      	ldr	r4, [pc, #72]	; (800294c <TSL_linrot_SetStateCalibration+0x4c>)
 8002904:	6963      	ldr	r3, [r4, #20]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
  THIS_CHANGE = TSL_STATE_CHANGED;
 800290c:	791a      	ldrb	r2, [r3, #4]
 800290e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002912:	711a      	strb	r2, [r3, #4]
{
 8002914:	4605      	mov	r5, r0
  TSL_linrot_ProcessCh_All_SetStatus(TSL_OBJ_STATUS_ON);
 8002916:	2003      	movs	r0, #3
 8002918:	f7ff fd0e 	bl	8002338 <TSL_linrot_ProcessCh_All_SetStatus>
  switch (TSL_Params.NbCalibSamples)
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <TSL_linrot_SetStateCalibration+0x50>)
 800291e:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <TSL_linrot_SetStateCalibration+0x54>)
 8002920:	8899      	ldrh	r1, [r3, #4]
 8002922:	2904      	cmp	r1, #4
 8002924:	d005      	beq.n	8002932 <TSL_linrot_SetStateCalibration+0x32>
 8002926:	2910      	cmp	r1, #16
 8002928:	d00e      	beq.n	8002948 <TSL_linrot_SetStateCalibration+0x48>
      TSL_Params.NbCalibSamples =  8;
 800292a:	2108      	movs	r1, #8
 800292c:	8099      	strh	r1, [r3, #4]
      CalibDiv = 3;
 800292e:	2103      	movs	r1, #3
 8002930:	e000      	b.n	8002934 <TSL_linrot_SetStateCalibration+0x34>
      CalibDiv = 2;
 8002932:	2102      	movs	r1, #2
      CalibDiv = 3;
 8002934:	8011      	strh	r1, [r2, #0]
  THIS_COUNTER_DEB = (TSL_tCounter_T)(delay + (TSL_tCounter_T)TSL_Params.NbCalibSamples);
 8002936:	6962      	ldr	r2, [r4, #20]
 8002938:	791b      	ldrb	r3, [r3, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	441d      	add	r5, r3
 800293e:	70d5      	strb	r5, [r2, #3]
}
 8002940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TSL_linrot_ProcessCh_All_ClearRef();
 8002944:	f7ff bfc8 	b.w	80028d8 <TSL_linrot_ProcessCh_All_ClearRef>
      CalibDiv = 4;
 8002948:	2104      	movs	r1, #4
 800294a:	e7f3      	b.n	8002934 <TSL_linrot_SetStateCalibration+0x34>
 800294c:	20001964 	.word	0x20001964
 8002950:	20000024 	.word	0x20000024
 8002954:	20000050 	.word	0x20000050

08002958 <TSL_linrot_Init>:
  THIS_PROXIN_TH    = TSLPRM_LINROT_PROX_IN_TH;
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <TSL_linrot_Init+0x38>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	685b      	ldr	r3, [r3, #4]
  THIS_PROXOUT_TH   = TSLPRM_LINROT_PROX_OUT_TH;
 800295e:	2205      	movs	r2, #5
 8002960:	705a      	strb	r2, [r3, #1]
  THIS_DETECTIN_TH  = TSLPRM_LINROT_DETECT_IN_TH;
 8002962:	2250      	movs	r2, #80	; 0x50
 8002964:	709a      	strb	r2, [r3, #2]
  THIS_CALIB_TH     = TSLPRM_LINROT_CALIB_TH;
 8002966:	711a      	strb	r2, [r3, #4]
  THIS_COUNTER_DEB_PROX    = TSLPRM_DEBOUNCE_PROX;
 8002968:	2202      	movs	r2, #2
  THIS_DETECTOUT_TH = TSLPRM_LINROT_DETECT_OUT_TH;
 800296a:	204b      	movs	r0, #75	; 0x4b
  THIS_COUNTER_DEB_PROX    = TSLPRM_DEBOUNCE_PROX;
 800296c:	719a      	strb	r2, [r3, #6]
  THIS_COUNTER_DEB_DETECT  = TSLPRM_DEBOUNCE_DETECT;
 800296e:	71da      	strb	r2, [r3, #7]
  THIS_COUNTER_DEB_RELEASE = TSLPRM_DEBOUNCE_RELEASE;
 8002970:	721a      	strb	r2, [r3, #8]
  THIS_RESOLUTION            = TSLPRM_LINROT_RESOLUTION;
 8002972:	2204      	movs	r2, #4
  THIS_PROXIN_TH    = TSLPRM_LINROT_PROX_IN_TH;
 8002974:	210a      	movs	r1, #10
  THIS_DETECTOUT_TH = TSLPRM_LINROT_DETECT_OUT_TH;
 8002976:	70d8      	strb	r0, [r3, #3]
  THIS_RESOLUTION            = TSLPRM_LINROT_RESOLUTION;
 8002978:	72da      	strb	r2, [r3, #11]
  THIS_COUNTER_DEB_CALIB   = TSLPRM_DEBOUNCE_CALIB;
 800297a:	2003      	movs	r0, #3
  THIS_COUNTER_DEB_DIRECTION = TSLPRM_LINROT_DIR_CHG_DEB;
 800297c:	2201      	movs	r2, #1
  THIS_COUNTER_DEB_CALIB   = TSLPRM_DEBOUNCE_CALIB;
 800297e:	7158      	strb	r0, [r3, #5]
  THIS_COUNTER_DEB_ERROR   = TSLPRM_DEBOUNCE_ERROR;
 8002980:	7258      	strb	r0, [r3, #9]
  THIS_PROXIN_TH    = TSLPRM_LINROT_PROX_IN_TH;
 8002982:	7019      	strb	r1, [r3, #0]
  THIS_DIR_CHG_POS           = TSLPRM_LINROT_DIR_CHG_POS;
 8002984:	7319      	strb	r1, [r3, #12]
  THIS_COUNTER_DEB_DIRECTION = TSLPRM_LINROT_DIR_CHG_DEB;
 8002986:	729a      	strb	r2, [r3, #10]
  TSL_linrot_SetStateCalibration(TSLPRM_CALIB_DELAY);
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff bfb9 	b.w	8002900 <TSL_linrot_SetStateCalibration>
 800298e:	bf00      	nop
 8002990:	20001964 	.word	0x20001964

08002994 <TSL_linrot_ReleaseStateProcess>:
{
 8002994:	b538      	push	{r3, r4, r5, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8002996:	f7ff fd29 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <TSL_linrot_ReleaseStateProcess+0x78>)
 800299c:	b950      	cbnz	r0, 80029b4 <TSL_linrot_ReleaseStateProcess+0x20>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	6813      	ldr	r3, [r2, #0]
 80029a2:	6852      	ldr	r2, [r2, #4]
 80029a4:	7a52      	ldrb	r2, [r2, #9]
 80029a6:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 80029a8:	b912      	cbnz	r2, 80029b0 <TSL_linrot_ReleaseStateProcess+0x1c>
      THIS_STATEID = TSL_STATEID_ERROR;
 80029aa:	220d      	movs	r2, #13
        THIS_STATEID = TSL_STATEID_DEB_CALIB;
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
      THIS_STATEID = TSL_STATEID_DEB_ERROR_RELEASE;
 80029b0:	220f      	movs	r2, #15
 80029b2:	e7fb      	b.n	80029ac <TSL_linrot_ReleaseStateProcess+0x18>
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_DETECTIN_TH, 1) == TSL_STATUS_OK)
 80029b4:	695d      	ldr	r5, [r3, #20]
 80029b6:	686c      	ldr	r4, [r5, #4]
 80029b8:	2101      	movs	r1, #1
 80029ba:	78a0      	ldrb	r0, [r4, #2]
 80029bc:	f7ff fed4 	bl	8002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 80029c0:	b938      	cbnz	r0, 80029d2 <TSL_linrot_ReleaseStateProcess+0x3e>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 80029c2:	682b      	ldr	r3, [r5, #0]
 80029c4:	79e2      	ldrb	r2, [r4, #7]
 80029c6:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80029c8:	b90a      	cbnz	r2, 80029ce <TSL_linrot_ReleaseStateProcess+0x3a>
        THIS_STATEID = TSL_STATEID_DETECT;
 80029ca:	220a      	movs	r2, #10
 80029cc:	e7ee      	b.n	80029ac <TSL_linrot_ReleaseStateProcess+0x18>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 80029ce:	220b      	movs	r2, #11
 80029d0:	e7ec      	b.n	80029ac <TSL_linrot_ReleaseStateProcess+0x18>
    if (TSL_linrot_ProcessCh_One_DeltaAboveEqu(THIS_PROXIN_TH, 0) == TSL_STATUS_OK)
 80029d2:	2100      	movs	r1, #0
 80029d4:	7820      	ldrb	r0, [r4, #0]
 80029d6:	f7ff fec7 	bl	8002768 <TSL_linrot_ProcessCh_One_DeltaAboveEqu>
 80029da:	b938      	cbnz	r0, 80029ec <TSL_linrot_ReleaseStateProcess+0x58>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	79a2      	ldrb	r2, [r4, #6]
 80029e0:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80029e2:	b90a      	cbnz	r2, 80029e8 <TSL_linrot_ReleaseStateProcess+0x54>
        THIS_STATEID = TSL_STATEID_PROX;
 80029e4:	2206      	movs	r2, #6
 80029e6:	e7e1      	b.n	80029ac <TSL_linrot_ReleaseStateProcess+0x18>
        THIS_STATEID = TSL_STATEID_DEB_PROX;
 80029e8:	2207      	movs	r2, #7
 80029ea:	e7df      	b.n	80029ac <TSL_linrot_ReleaseStateProcess+0x18>
    if (TSL_linrot_ProcessCh_One_DeltaBelowEquMinus(THIS_CALIB_TH, 1) == TSL_STATUS_OK)
 80029ec:	2101      	movs	r1, #1
 80029ee:	7920      	ldrb	r0, [r4, #4]
 80029f0:	f7ff fea2 	bl	8002738 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d1da      	bne.n	80029ae <TSL_linrot_ReleaseStateProcess+0x1a>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_CALIB;
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	7962      	ldrb	r2, [r4, #5]
 80029fc:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 80029fe:	b91a      	cbnz	r2, 8002a08 <TSL_linrot_ReleaseStateProcess+0x74>
}
 8002a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        TSL_linrot_SetStateCalibration(0);
 8002a04:	f7ff bf7c 	b.w	8002900 <TSL_linrot_SetStateCalibration>
        THIS_STATEID = TSL_STATEID_DEB_CALIB;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	e7cf      	b.n	80029ac <TSL_linrot_ReleaseStateProcess+0x18>
 8002a0c:	20001964 	.word	0x20001964

08002a10 <TSL_linrot_DebCalibrationStateProcess>:
{
 8002a10:	b510      	push	{r4, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8002a12:	f7ff fceb 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <TSL_linrot_DebCalibrationStateProcess+0x3c>)
 8002a18:	b920      	cbnz	r0, 8002a24 <TSL_linrot_DebCalibrationStateProcess+0x14>
    THIS_STATEID = TSL_STATEID_RELEASE; // Go back to the previous state
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	bd10      	pop	{r4, pc}
    if (TSL_linrot_ProcessCh_One_DeltaBelowEquMinus(THIS_CALIB_TH, 1) == TSL_STATUS_OK) // Still below recalibration threshold
 8002a24:	695c      	ldr	r4, [r3, #20]
 8002a26:	6863      	ldr	r3, [r4, #4]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	7918      	ldrb	r0, [r3, #4]
 8002a2c:	f7ff fe84 	bl	8002738 <TSL_linrot_ProcessCh_One_DeltaBelowEquMinus>
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d1f3      	bne.n	8002a1e <TSL_linrot_DebCalibrationStateProcess+0xe>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002a36:	78da      	ldrb	r2, [r3, #3]
 8002a38:	b10a      	cbz	r2, 8002a3e <TSL_linrot_DebCalibrationStateProcess+0x2e>
 8002a3a:	3a01      	subs	r2, #1
 8002a3c:	70da      	strb	r2, [r3, #3]
      if (THIS_COUNTER_DEB == 0)
 8002a3e:	78d8      	ldrb	r0, [r3, #3]
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d1ee      	bne.n	8002a22 <TSL_linrot_DebCalibrationStateProcess+0x12>
}
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        TSL_linrot_SetStateCalibration(0);
 8002a48:	f7ff bf5a 	b.w	8002900 <TSL_linrot_SetStateCalibration>
 8002a4c:	20001964 	.word	0x20001964

08002a50 <TSL_linrot_DebErrorStateProcess>:
{
 8002a50:	b507      	push	{r0, r1, r2, lr}
  if (TSL_linrot_ProcessCh_One_AcqStatusError() == TSL_STATUS_OK) // Acquisition error (min or max)
 8002a52:	f7ff fccb 	bl	80023ec <TSL_linrot_ProcessCh_One_AcqStatusError>
 8002a56:	b968      	cbnz	r0, 8002a74 <TSL_linrot_DebErrorStateProcess+0x24>
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <TSL_linrot_DebErrorStateProcess+0x80>)
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	78da      	ldrb	r2, [r3, #3]
 8002a60:	b10a      	cbz	r2, 8002a66 <TSL_linrot_DebErrorStateProcess+0x16>
 8002a62:	3a01      	subs	r2, #1
 8002a64:	70da      	strb	r2, [r3, #3]
    if (THIS_COUNTER_DEB == 0)
 8002a66:	78da      	ldrb	r2, [r3, #3]
 8002a68:	b90a      	cbnz	r2, 8002a6e <TSL_linrot_DebErrorStateProcess+0x1e>
      THIS_STATEID = TSL_STATEID_ERROR;
 8002a6a:	220d      	movs	r2, #13
        THIS_STATEID = TSL_STATEID_TOUCH;
 8002a6c:	701a      	strb	r2, [r3, #0]
}
 8002a6e:	b003      	add	sp, #12
 8002a70:	f85d fb04 	ldr.w	pc, [sp], #4
    mask = TSL_linrot_GetStateMask();
 8002a74:	f7ff fc4a 	bl	800230c <TSL_linrot_GetStateMask>
 8002a78:	f88d 0007 	strb.w	r0, [sp, #7]
    mask &= (TSL_StateMask_enum_T)(~(TSL_STATE_DEBOUNCE_BIT_MASK | TSL_STATE_ERROR_BIT_MASK));
 8002a7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a80:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8002a84:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (mask)
 8002a88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	2b07      	cmp	r3, #7
 8002a90:	d819      	bhi.n	8002ac6 <TSL_linrot_DebErrorStateProcess+0x76>
 8002a92:	e8df f003 	tbb	[pc, r3]
 8002a96:	0904      	.short	0x0904
 8002a98:	18180e18 	.word	0x18180e18
 8002a9c:	1318      	.short	0x1318
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <TSL_linrot_DebErrorStateProcess+0x80>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	e7e1      	b.n	8002a6c <TSL_linrot_DebErrorStateProcess+0x1c>
        THIS_STATEID = TSL_STATEID_PROX;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <TSL_linrot_DebErrorStateProcess+0x80>)
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	2206      	movs	r2, #6
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e7dc      	b.n	8002a6c <TSL_linrot_DebErrorStateProcess+0x1c>
        THIS_STATEID = TSL_STATEID_DETECT;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <TSL_linrot_DebErrorStateProcess+0x80>)
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	220a      	movs	r2, #10
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e7d7      	b.n	8002a6c <TSL_linrot_DebErrorStateProcess+0x1c>
        THIS_STATEID = TSL_STATEID_TOUCH;
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <TSL_linrot_DebErrorStateProcess+0x80>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	220c      	movs	r2, #12
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	e7d2      	b.n	8002a6c <TSL_linrot_DebErrorStateProcess+0x1c>
        TSL_linrot_SetStateCalibration(0);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7ff ff1a 	bl	8002900 <TSL_linrot_SetStateCalibration>
}
 8002acc:	e7cf      	b.n	8002a6e <TSL_linrot_DebErrorStateProcess+0x1e>
 8002ace:	bf00      	nop
 8002ad0:	20001964 	.word	0x20001964

08002ad4 <TSL_obj_SetGlobalObj>:
void TSL_obj_SetGlobalObj(CONST TSL_Object_T *pobj)
{

  TSL_Globals.This_Obj = pobj;

  switch (pobj->Type)
 8002ad4:	7803      	ldrb	r3, [r0, #0]
  TSL_Globals.This_Obj = pobj;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <TSL_obj_SetGlobalObj+0x14>)
  switch (pobj->Type)
 8002ad8:	3b20      	subs	r3, #32
 8002ada:	2b03      	cmp	r3, #3
#if TSLPRM_TOTAL_LNRTS > 0
    case TSL_OBJ_LINEAR:
    case TSL_OBJ_LINEARB:
    case TSL_OBJ_ROTARY:
    case TSL_OBJ_ROTARYB:
      TSL_Globals.This_LinRot = (TSL_LinRot_T *)pobj->Elmt;
 8002adc:	bf98      	it	ls
 8002ade:	6843      	ldrls	r3, [r0, #4]
  TSL_Globals.This_Obj = pobj;
 8002ae0:	60d0      	str	r0, [r2, #12]
      TSL_Globals.This_LinRot = (TSL_LinRot_T *)pobj->Elmt;
 8002ae2:	bf98      	it	ls
 8002ae4:	6153      	strls	r3, [r2, #20]
 8002ae6:	4770      	bx	lr
 8002ae8:	20001964 	.word	0x20001964

08002aec <TSL_obj_GroupInit>:
{
 8002aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  objgrp->Change = TSL_STATE_NOT_CHANGED;
 8002af0:	2400      	movs	r4, #0
  pobj = objgrp->p_Obj; // First object in the group
 8002af2:	6806      	ldr	r6, [r0, #0]
        TSL_Params.p_LinRotMT->Init();
 8002af4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002b54 <TSL_obj_GroupInit+0x68>
        if (TSL_Globals.This_LinRot->p_Data->Change)
 8002af8:	4f15      	ldr	r7, [pc, #84]	; (8002b50 <TSL_obj_GroupInit+0x64>)
  objgrp->Change = TSL_STATE_NOT_CHANGED;
 8002afa:	7204      	strb	r4, [r0, #8]
{
 8002afc:	4680      	mov	r8, r0
  TSL_tNb_T objgrp_state_mask = 0;
 8002afe:	4625      	mov	r5, r4
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 8002b00:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8002b04:	b2e3      	uxtb	r3, r4
 8002b06:	4293      	cmp	r3, r2
 8002b08:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
 8002b0c:	d303      	bcc.n	8002b16 <TSL_obj_GroupInit+0x2a>
  objgrp->StateMask = objgrp_state_mask;
 8002b0e:	f8a8 5006 	strh.w	r5, [r8, #6]
 8002b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TSL_obj_SetGlobalObj(pobj);
 8002b16:	f7ff ffdd 	bl	8002ad4 <TSL_obj_SetGlobalObj>
    switch (pobj->Type)
 8002b1a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
 8002b1e:	2b21      	cmp	r3, #33	; 0x21
 8002b20:	d001      	beq.n	8002b26 <TSL_obj_GroupInit+0x3a>
 8002b22:	2b23      	cmp	r3, #35	; 0x23
 8002b24:	d111      	bne.n	8002b4a <TSL_obj_GroupInit+0x5e>
        TSL_Params.p_LinRotMT->Init();
 8002b26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4798      	blx	r3
        if (TSL_Globals.This_LinRot->p_Data->Change)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	791a      	ldrb	r2, [r3, #4]
 8002b34:	0652      	lsls	r2, r2, #25
          objgrp->Change = TSL_STATE_CHANGED;
 8002b36:	bf44      	itt	mi
 8002b38:	2201      	movmi	r2, #1
 8002b3a:	f888 2008 	strbmi.w	r2, [r8, #8]
        objgrp_state_mask |= TSL_Params.p_LinRotSM[TSL_Globals.This_LinRot->p_Data->StateId].StateMask;
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002b44:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002b48:	431d      	orrs	r5, r3
 8002b4a:	3401      	adds	r4, #1
 8002b4c:	e7d8      	b.n	8002b00 <TSL_obj_GroupInit+0x14>
 8002b4e:	bf00      	nop
 8002b50:	20001964 	.word	0x20001964
 8002b54:	20000024 	.word	0x20000024

08002b58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b58:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002b5a:	f000 fc31 	bl	80033c0 <vTaskStartScheduler>
  
  return osOK;
}
 8002b5e:	2000      	movs	r0, #0
 8002b60:	bd08      	pop	{r3, pc}

08002b62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b62:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b64:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8002b68:	8a02      	ldrh	r2, [r0, #16]
{
 8002b6a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b6c:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8002b70:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8002b72:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002b74:	bf14      	ite	ne
 8002b76:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b78:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b7a:	a803      	add	r0, sp, #12
 8002b7c:	9001      	str	r0, [sp, #4]
 8002b7e:	9400      	str	r4, [sp, #0]
 8002b80:	4628      	mov	r0, r5
 8002b82:	f000 fb4d 	bl	8003220 <xTaskCreate>
 8002b86:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b88:	bf0c      	ite	eq
 8002b8a:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8002b8c:	2000      	movne	r0, #0
}
 8002b8e:	b005      	add	sp, #20
 8002b90:	bd30      	pop	{r4, r5, pc}

08002b92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b92:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b94:	2800      	cmp	r0, #0
 8002b96:	bf08      	it	eq
 8002b98:	2001      	moveq	r0, #1
 8002b9a:	f000 fd5f 	bl	800365c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	bd08      	pop	{r3, pc}

08002ba2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba2:	f100 0308 	add.w	r3, r0, #8
 8002ba6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bac:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bae:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bb0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bb2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bb4:	6003      	str	r3, [r0, #0]
 8002bb6:	4770      	bx	lr

08002bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6103      	str	r3, [r0, #16]
 8002bbc:	4770      	bx	lr

08002bbe <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bbe:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bc0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bca:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002bcc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bce:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	6003      	str	r3, [r0, #0]
 8002bd4:	4770      	bx	lr

08002bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bd6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bd8:	1c53      	adds	r3, r2, #1
{
 8002bda:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002bdc:	d10a      	bne.n	8002bf4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bde:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002be4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002be6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002be8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002bea:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002bee:	3301      	adds	r3, #1
 8002bf0:	6003      	str	r3, [r0, #0]
 8002bf2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf4:	f100 0308 	add.w	r3, r0, #8
 8002bf8:	685c      	ldr	r4, [r3, #4]
 8002bfa:	6825      	ldr	r5, [r4, #0]
 8002bfc:	42aa      	cmp	r2, r5
 8002bfe:	d3ef      	bcc.n	8002be0 <vListInsert+0xa>
 8002c00:	4623      	mov	r3, r4
 8002c02:	e7f9      	b.n	8002bf8 <vListInsert+0x22>

08002c04 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c04:	6841      	ldr	r1, [r0, #4]
 8002c06:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c08:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c0a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c0c:	6882      	ldr	r2, [r0, #8]
 8002c0e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c14:	bf08      	it	eq
 8002c16:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c18:	2200      	movs	r2, #0
 8002c1a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c22:	6818      	ldr	r0, [r3, #0]
}
 8002c24:	4770      	bx	lr
	...

08002c28 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c28:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <prvTaskExitError+0x3c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	d008      	beq.n	8002c48 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	e7fe      	b.n	8002c46 <prvTaskExitError+0x1e>
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002c58:	9b01      	ldr	r3, [sp, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0fc      	beq.n	8002c58 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002c5e:	b002      	add	sp, #8
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002c68:	4808      	ldr	r0, [pc, #32]	; (8002c8c <prvPortStartFirstTask+0x24>)
 8002c6a:	6800      	ldr	r0, [r0, #0]
 8002c6c:	6800      	ldr	r0, [r0, #0]
 8002c6e:	f380 8808 	msr	MSP, r0
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f380 8814 	msr	CONTROL, r0
 8002c7a:	b662      	cpsie	i
 8002c7c:	b661      	cpsie	f
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	df00      	svc	0
 8002c88:	bf00      	nop
 8002c8a:	0000      	.short	0x0000
 8002c8c:	e000ed08 	.word	0xe000ed08

08002c90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002c90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ca0 <vPortEnableVFP+0x10>
 8002c94:	6801      	ldr	r1, [r0, #0]
 8002c96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c9a:	6001      	str	r1, [r0, #0]
 8002c9c:	4770      	bx	lr
 8002c9e:	0000      	.short	0x0000
 8002ca0:	e000ed88 	.word	0xe000ed88

08002ca4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <pxPortInitialiseStack+0x28>)
 8002cae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002cb2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cb6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002cba:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002cbe:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cc2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002cc6:	3844      	subs	r0, #68	; 0x44
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	08002c29 	.word	0x08002c29

08002cd0 <SVC_Handler>:
	__asm volatile (
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <pxCurrentTCBConst2>)
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	f380 8809 	msr	PSP, r0
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8811 	msr	BASEPRI, r0
 8002cea:	4770      	bx	lr
 8002cec:	f3af 8000 	nop.w

08002cf0 <pxCurrentTCBConst2>:
 8002cf0:	20001830 	.word	0x20001830

08002cf4 <vPortEnterCritical>:
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <vPortEnterCritical+0x3c>)
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002d0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002d0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002d0e:	d10d      	bne.n	8002d2c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <vPortEnterCritical+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002d18:	d008      	beq.n	8002d2c <vPortEnterCritical+0x38>
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	e7fe      	b.n	8002d2a <vPortEnterCritical+0x36>
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002d38:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <vPortExitCritical+0x24>)
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	b943      	cbnz	r3, 8002d50 <vPortExitCritical+0x18>
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	e7fe      	b.n	8002d4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002d50:	3b01      	subs	r3, #1
 8002d52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d54:	b90b      	cbnz	r3, 8002d5a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	4770      	bx	lr
 8002d5c:	2000000c 	.word	0x2000000c

08002d60 <PendSV_Handler>:
	__asm volatile
 8002d60:	f3ef 8009 	mrs	r0, PSP
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <pxCurrentTCBConst>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	f01e 0f10 	tst.w	lr, #16
 8002d70:	bf08      	it	eq
 8002d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7a:	6010      	str	r0, [r2, #0]
 8002d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d84:	f380 8811 	msr	BASEPRI, r0
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f000 fc88 	bl	80036a4 <vTaskSwitchContext>
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f380 8811 	msr	BASEPRI, r0
 8002d9c:	bc09      	pop	{r0, r3}
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	6808      	ldr	r0, [r1, #0]
 8002da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da6:	f01e 0f10 	tst.w	lr, #16
 8002daa:	bf08      	it	eq
 8002dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002db0:	f380 8809 	msr	PSP, r0
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	f3af 8000 	nop.w

08002dc0 <pxCurrentTCBConst>:
 8002dc0:	20001830 	.word	0x20001830

08002dc4 <SysTick_Handler>:
{
 8002dc4:	b508      	push	{r3, lr}
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002dd6:	f000 fb37 	bl	8003448 <xTaskIncrementTick>
 8002dda:	b118      	cbz	r0, 8002de4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <SysTick_Handler+0x28>)
 8002dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002de4:	2300      	movs	r3, #0
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	bd08      	pop	{r3, pc}
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002df0:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002df2:	4909      	ldr	r1, [pc, #36]	; (8002e18 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002df8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <vPortSetupTimerInterrupt+0x2c>)
 8002dfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e06:	4906      	ldr	r1, [pc, #24]	; (8002e20 <vPortSetupTimerInterrupt+0x30>)
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e0c:	2307      	movs	r3, #7
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010
 8002e18:	e000e018 	.word	0xe000e018
 8002e1c:	20000010 	.word	0x20000010
 8002e20:	e000e014 	.word	0xe000e014

08002e24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <xPortStartScheduler+0xe8>)
 8002e26:	4a3a      	ldr	r2, [pc, #232]	; (8002f10 <xPortStartScheduler+0xec>)
{
 8002e28:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e2a:	6819      	ldr	r1, [r3, #0]
 8002e2c:	4291      	cmp	r1, r2
 8002e2e:	d108      	bne.n	8002e42 <xPortStartScheduler+0x1e>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	e7fe      	b.n	8002e40 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <xPortStartScheduler+0xf0>)
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d108      	bne.n	8002e5c <xPortStartScheduler+0x38>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	e7fe      	b.n	8002e5a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <xPortStartScheduler+0xf4>)
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e64:	22ff      	movs	r2, #255	; 0xff
 8002e66:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e68:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002e76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e7a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <xPortStartScheduler+0xfc>)
 8002e7e:	2207      	movs	r2, #7
 8002e80:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e82:	2100      	movs	r1, #0
 8002e84:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002e88:	0600      	lsls	r0, r0, #24
 8002e8a:	f102 34ff 	add.w	r4, r2, #4294967295
 8002e8e:	d40d      	bmi.n	8002eac <xPortStartScheduler+0x88>
 8002e90:	b101      	cbz	r1, 8002e94 <xPortStartScheduler+0x70>
 8002e92:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2a03      	cmp	r2, #3
 8002e98:	d011      	beq.n	8002ebe <xPortStartScheduler+0x9a>
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	e7fe      	b.n	8002eaa <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002eac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002eb0:	0052      	lsls	r2, r2, #1
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f88d 2003 	strb.w	r2, [sp, #3]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4622      	mov	r2, r4
 8002ebc:	e7e2      	b.n	8002e84 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ebe:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ec0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002ec4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <xPortStartScheduler+0xf4>)
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <xPortStartScheduler+0x100>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002ed6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002ede:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002ee0:	f7ff ff86 	bl	8002df0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <xPortStartScheduler+0x104>)
 8002ee6:	2400      	movs	r4, #0
 8002ee8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002eea:	f7ff fed1 	bl	8002c90 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002eee:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <xPortStartScheduler+0x108>)
 8002ef0:	6813      	ldr	r3, [r2, #0]
 8002ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ef6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002ef8:	f7ff feb6 	bl	8002c68 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002efc:	f000 fbd2 	bl	80036a4 <vTaskSwitchContext>
	prvTaskExitError();
 8002f00:	f7ff fe92 	bl	8002c28 <prvTaskExitError>
}
 8002f04:	4620      	mov	r0, r4
 8002f06:	b002      	add	sp, #8
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00
 8002f10:	410fc271 	.word	0x410fc271
 8002f14:	410fc270 	.word	0x410fc270
 8002f18:	e000e400 	.word	0xe000e400
 8002f1c:	2000005a 	.word	0x2000005a
 8002f20:	2000005c 	.word	0x2000005c
 8002f24:	e000ed20 	.word	0xe000ed20
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	e000ef34 	.word	0xe000ef34

08002f30 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f30:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <prvInsertBlockIntoFreeList+0x40>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4282      	cmp	r2, r0
 8002f38:	d318      	bcc.n	8002f6c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f3a:	685c      	ldr	r4, [r3, #4]
 8002f3c:	1919      	adds	r1, r3, r4
 8002f3e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f40:	bf01      	itttt	eq
 8002f42:	6841      	ldreq	r1, [r0, #4]
 8002f44:	4618      	moveq	r0, r3
 8002f46:	1909      	addeq	r1, r1, r4
 8002f48:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f4a:	6844      	ldr	r4, [r0, #4]
 8002f4c:	1901      	adds	r1, r0, r4
 8002f4e:	428a      	cmp	r2, r1
 8002f50:	d107      	bne.n	8002f62 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <prvInsertBlockIntoFreeList+0x44>)
 8002f54:	6809      	ldr	r1, [r1, #0]
 8002f56:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f58:	bf1f      	itttt	ne
 8002f5a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f5c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f5e:	1909      	addne	r1, r1, r4
 8002f60:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f62:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f64:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f66:	bf18      	it	ne
 8002f68:	6018      	strne	r0, [r3, #0]
 8002f6a:	bd10      	pop	{r4, pc}
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	e7e1      	b.n	8002f34 <prvInsertBlockIntoFreeList+0x4>
 8002f70:	20001828 	.word	0x20001828
 8002f74:	20000060 	.word	0x20000060

08002f78 <pvPortMalloc>:
{
 8002f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002f7e:	f000 fa5b 	bl	8003438 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002f82:	493d      	ldr	r1, [pc, #244]	; (8003078 <pvPortMalloc+0x100>)
 8002f84:	4d3d      	ldr	r5, [pc, #244]	; (800307c <pvPortMalloc+0x104>)
 8002f86:	680b      	ldr	r3, [r1, #0]
 8002f88:	b9fb      	cbnz	r3, 8002fca <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002f8a:	4a3d      	ldr	r2, [pc, #244]	; (8003080 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f8c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f8e:	bf1c      	itt	ne
 8002f90:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f92:	4b3c      	ldrne	r3, [pc, #240]	; (8003084 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f94:	4e3c      	ldr	r6, [pc, #240]	; (8003088 <pvPortMalloc+0x110>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f96:	bf1a      	itte	ne
 8002f98:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f9c:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f9e:	f241 73b8 	movweq	r3, #6072	; 0x17b8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fa2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002fa4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002faa:	2000      	movs	r0, #0
 8002fac:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fae:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002fb0:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fb2:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002fb4:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002fb6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fb8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002fbc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fbe:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fc0:	4b33      	ldr	r3, [pc, #204]	; (8003090 <pvPortMalloc+0x118>)
 8002fc2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002fc8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fca:	682f      	ldr	r7, [r5, #0]
 8002fcc:	4227      	tst	r7, r4
 8002fce:	d116      	bne.n	8002ffe <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8002fd0:	2c00      	cmp	r4, #0
 8002fd2:	d041      	beq.n	8003058 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 8002fd4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fd8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fda:	bf1c      	itt	ne
 8002fdc:	f023 0307 	bicne.w	r3, r3, #7
 8002fe0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002fe2:	b163      	cbz	r3, 8002ffe <pvPortMalloc+0x86>
 8002fe4:	4a2a      	ldr	r2, [pc, #168]	; (8003090 <pvPortMalloc+0x118>)
 8002fe6:	6816      	ldr	r6, [r2, #0]
 8002fe8:	42b3      	cmp	r3, r6
 8002fea:	4690      	mov	r8, r2
 8002fec:	d807      	bhi.n	8002ffe <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <pvPortMalloc+0x110>)
 8002ff0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ff2:	6868      	ldr	r0, [r5, #4]
 8002ff4:	4283      	cmp	r3, r0
 8002ff6:	d804      	bhi.n	8003002 <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8002ff8:	6809      	ldr	r1, [r1, #0]
 8002ffa:	428d      	cmp	r5, r1
 8002ffc:	d107      	bne.n	800300e <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8002ffe:	2400      	movs	r4, #0
 8003000:	e02a      	b.n	8003058 <pvPortMalloc+0xe0>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003002:	682c      	ldr	r4, [r5, #0]
 8003004:	2c00      	cmp	r4, #0
 8003006:	d0f7      	beq.n	8002ff8 <pvPortMalloc+0x80>
 8003008:	462a      	mov	r2, r5
 800300a:	4625      	mov	r5, r4
 800300c:	e7f1      	b.n	8002ff2 <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800300e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003010:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003012:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003014:	1ac2      	subs	r2, r0, r3
 8003016:	2a10      	cmp	r2, #16
 8003018:	d90f      	bls.n	800303a <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800301a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800301c:	0741      	lsls	r1, r0, #29
 800301e:	d008      	beq.n	8003032 <pvPortMalloc+0xba>
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	e7fe      	b.n	8003030 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003032:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003034:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003036:	f7ff ff7b 	bl	8002f30 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800303a:	4914      	ldr	r1, [pc, #80]	; (800308c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800303c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800303e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003040:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003042:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003044:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8003046:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800304a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800304e:	bf38      	it	cc
 8003050:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003052:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003054:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003056:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003058:	f000 fa88 	bl	800356c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800305c:	0763      	lsls	r3, r4, #29
 800305e:	d008      	beq.n	8003072 <pvPortMalloc+0xfa>
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	e7fe      	b.n	8003070 <pvPortMalloc+0xf8>
}
 8003072:	4620      	mov	r0, r4
 8003074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003078:	20000060 	.word	0x20000060
 800307c:	2000181c 	.word	0x2000181c
 8003080:	20000064 	.word	0x20000064
 8003084:	2000181c 	.word	0x2000181c
 8003088:	20001828 	.word	0x20001828
 800308c:	20001824 	.word	0x20001824
 8003090:	20001820 	.word	0x20001820

08003094 <vPortFree>:
{
 8003094:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003096:	4604      	mov	r4, r0
 8003098:	b370      	cbz	r0, 80030f8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <vPortFree+0x68>)
 800309c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	4213      	tst	r3, r2
 80030a4:	d108      	bne.n	80030b8 <vPortFree+0x24>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	e7fe      	b.n	80030b6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030b8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80030bc:	b141      	cbz	r1, 80030d0 <vPortFree+0x3c>
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	e7fe      	b.n	80030ce <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030d0:	ea23 0302 	bic.w	r3, r3, r2
 80030d4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80030d8:	f000 f9ae 	bl	8003438 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030dc:	4a08      	ldr	r2, [pc, #32]	; (8003100 <vPortFree+0x6c>)
 80030de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80030e2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030e4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030e8:	440b      	add	r3, r1
 80030ea:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030ec:	f7ff ff20 	bl	8002f30 <prvInsertBlockIntoFreeList>
}
 80030f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80030f4:	f000 ba3a 	b.w	800356c <xTaskResumeAll>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	bf00      	nop
 80030fc:	2000181c 	.word	0x2000181c
 8003100:	20001820 	.word	0x20001820

08003104 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <prvResetNextTaskUnblockTime+0x1c>)
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <prvResetNextTaskUnblockTime+0x20>)
 800310c:	b919      	cbnz	r1, 8003116 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800310e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800311a:	68d2      	ldr	r2, [r2, #12]
 800311c:	6852      	ldr	r2, [r2, #4]
 800311e:	e7f8      	b.n	8003112 <prvResetNextTaskUnblockTime+0xe>
 8003120:	20001834 	.word	0x20001834
 8003124:	2000190c 	.word	0x2000190c

08003128 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800312c:	4e1b      	ldr	r6, [pc, #108]	; (800319c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800312e:	681d      	ldr	r5, [r3, #0]
{
 8003130:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003132:	6830      	ldr	r0, [r6, #0]
 8003134:	3004      	adds	r0, #4
{
 8003136:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003138:	f7ff fd64 	bl	8002c04 <uxListRemove>
 800313c:	4633      	mov	r3, r6
 800313e:	b940      	cbnz	r0, 8003152 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003140:	6831      	ldr	r1, [r6, #0]
 8003142:	4e17      	ldr	r6, [pc, #92]	; (80031a0 <prvAddCurrentTaskToDelayedList+0x78>)
 8003144:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003146:	6832      	ldr	r2, [r6, #0]
 8003148:	2001      	movs	r0, #1
 800314a:	4088      	lsls	r0, r1
 800314c:	ea22 0200 	bic.w	r2, r2, r0
 8003150:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003152:	1c62      	adds	r2, r4, #1
 8003154:	d107      	bne.n	8003166 <prvAddCurrentTaskToDelayedList+0x3e>
 8003156:	b137      	cbz	r7, 8003166 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	4812      	ldr	r0, [pc, #72]	; (80031a4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800315c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800315e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003162:	f7ff bd2c 	b.w	8002bbe <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003166:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003168:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800316a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800316c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800316e:	d907      	bls.n	8003180 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <prvAddCurrentTaskToDelayedList+0x80>)
 8003172:	6810      	ldr	r0, [r2, #0]
 8003174:	6819      	ldr	r1, [r3, #0]
}
 8003176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800317a:	3104      	adds	r1, #4
 800317c:	f7ff bd2b 	b.w	8002bd6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <prvAddCurrentTaskToDelayedList+0x84>)
 8003182:	6810      	ldr	r0, [r2, #0]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	3104      	adds	r1, #4
 8003188:	f7ff fd25 	bl	8002bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <prvAddCurrentTaskToDelayedList+0x88>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003192:	bf38      	it	cc
 8003194:	601c      	strcc	r4, [r3, #0]
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	20001954 	.word	0x20001954
 800319c:	20001830 	.word	0x20001830
 80031a0:	200018dc 	.word	0x200018dc
 80031a4:	2000192c 	.word	0x2000192c
 80031a8:	20001838 	.word	0x20001838
 80031ac:	20001834 	.word	0x20001834
 80031b0:	2000190c 	.word	0x2000190c

080031b4 <prvIdleTask>:
{
 80031b4:	b580      	push	{r7, lr}
				taskYIELD();
 80031b6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800321c <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80031ba:	4f14      	ldr	r7, [pc, #80]	; (800320c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031bc:	4c14      	ldr	r4, [pc, #80]	; (8003210 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80031be:	4e15      	ldr	r6, [pc, #84]	; (8003214 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	b963      	cbnz	r3, 80031de <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <prvIdleTask+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d9f8      	bls.n	80031be <prvIdleTask+0xa>
				taskYIELD();
 80031cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031d0:	f8c8 3000 	str.w	r3, [r8]
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	e7ee      	b.n	80031bc <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80031de:	f7ff fd89 	bl	8002cf4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e6:	1d28      	adds	r0, r5, #4
 80031e8:	f7ff fd0c 	bl	8002c04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031ec:	6833      	ldr	r3, [r6, #0]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80031f8:	f7ff fd9e 	bl	8002d38 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80031fc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80031fe:	f7ff ff49 	bl	8003094 <vPortFree>
			vPortFree( pxTCB );
 8003202:	4628      	mov	r0, r5
 8003204:	f7ff ff46 	bl	8003094 <vPortFree>
 8003208:	e7da      	b.n	80031c0 <prvIdleTask+0xc>
 800320a:	bf00      	nop
 800320c:	20001940 	.word	0x20001940
 8003210:	200018cc 	.word	0x200018cc
 8003214:	200018c8 	.word	0x200018c8
 8003218:	2000183c 	.word	0x2000183c
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <xTaskCreate>:
	{
 8003220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003224:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003228:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800322a:	4650      	mov	r0, sl
	{
 800322c:	460f      	mov	r7, r1
 800322e:	4699      	mov	r9, r3
 8003230:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003232:	f7ff fea1 	bl	8002f78 <pvPortMalloc>
			if( pxStack != NULL )
 8003236:	4605      	mov	r5, r0
 8003238:	2800      	cmp	r0, #0
 800323a:	f000 8096 	beq.w	800336a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800323e:	2054      	movs	r0, #84	; 0x54
 8003240:	f7ff fe9a 	bl	8002f78 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003244:	4604      	mov	r4, r0
 8003246:	2800      	cmp	r0, #0
 8003248:	f000 808c 	beq.w	8003364 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800324c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003250:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003252:	4455      	add	r5, sl
 8003254:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003256:	f025 0a07 	bic.w	sl, r5, #7
 800325a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800325e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003260:	7859      	ldrb	r1, [r3, #1]
 8003262:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003266:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800326a:	b109      	cbz	r1, 8003270 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800326c:	42bb      	cmp	r3, r7
 800326e:	d1f7      	bne.n	8003260 <xTaskCreate+0x40>
 8003270:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003272:	2d06      	cmp	r5, #6
 8003274:	bf28      	it	cs
 8003276:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003278:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800327c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800327e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003280:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003282:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003284:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003288:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800328c:	f7ff fc94 	bl	8002bb8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003290:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003294:	f104 0018 	add.w	r0, r4, #24
 8003298:	f7ff fc8e 	bl	8002bb8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800329c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032a0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032a4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032a6:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032aa:	464a      	mov	r2, r9
 80032ac:	4641      	mov	r1, r8
 80032ae:	4650      	mov	r0, sl
 80032b0:	f7ff fcf8 	bl	8002ca4 <pxPortInitialiseStack>
 80032b4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80032b6:	b106      	cbz	r6, 80032ba <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032b8:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80032ba:	f7ff fd1b 	bl	8002cf4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80032c0:	4e32      	ldr	r6, [pc, #200]	; (800338c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80033b8 <xTaskCreate+0x198>
 80032c8:	3201      	adds	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80032cc:	6835      	ldr	r5, [r6, #0]
 80032ce:	2d00      	cmp	r5, #0
 80032d0:	d14e      	bne.n	8003370 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80032d2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d11d      	bne.n	8003316 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032da:	eb08 0005 	add.w	r0, r8, r5
 80032de:	3514      	adds	r5, #20
 80032e0:	f7ff fc5f 	bl	8002ba2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e4:	2d8c      	cmp	r5, #140	; 0x8c
 80032e6:	d1f8      	bne.n	80032da <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80032e8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80033bc <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80032ec:	4d28      	ldr	r5, [pc, #160]	; (8003390 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80032ee:	4648      	mov	r0, r9
 80032f0:	f7ff fc57 	bl	8002ba2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032f4:	4628      	mov	r0, r5
 80032f6:	f7ff fc54 	bl	8002ba2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032fa:	4826      	ldr	r0, [pc, #152]	; (8003394 <xTaskCreate+0x174>)
 80032fc:	f7ff fc51 	bl	8002ba2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003300:	4825      	ldr	r0, [pc, #148]	; (8003398 <xTaskCreate+0x178>)
 8003302:	f7ff fc4e 	bl	8002ba2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003306:	4825      	ldr	r0, [pc, #148]	; (800339c <xTaskCreate+0x17c>)
 8003308:	f7ff fc4b 	bl	8002ba2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <xTaskCreate+0x180>)
 800330e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003312:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <xTaskCreate+0x184>)
 8003314:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003316:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003318:	4924      	ldr	r1, [pc, #144]	; (80033ac <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800331a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800331c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800331e:	3301      	adds	r3, #1
 8003320:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003322:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003324:	2501      	movs	r5, #1
 8003326:	fa05 f302 	lsl.w	r3, r5, r2
 800332a:	4303      	orrs	r3, r0
 800332c:	2014      	movs	r0, #20
 800332e:	600b      	str	r3, [r1, #0]
 8003330:	fb00 8002 	mla	r0, r0, r2, r8
 8003334:	4639      	mov	r1, r7
 8003336:	f7ff fc42 	bl	8002bbe <vListInsertEnd>
	taskEXIT_CRITICAL();
 800333a:	f7ff fcfd 	bl	8002d38 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <xTaskCreate+0x190>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b163      	cbz	r3, 800335e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003344:	6833      	ldr	r3, [r6, #0]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800334a:	429a      	cmp	r2, r3
 800334c:	d207      	bcs.n	800335e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800334e:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <xTaskCreate+0x194>)
 8003350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	f3bf 8f6f 	isb	sy
	}
 800335e:	4628      	mov	r0, r5
 8003360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8003364:	4628      	mov	r0, r5
 8003366:	f7ff fe95 	bl	8003094 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800336a:	f04f 35ff 	mov.w	r5, #4294967295
 800336e:	e7f6      	b.n	800335e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <xTaskCreate+0x190>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ce      	bne.n	8003316 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003378:	6833      	ldr	r3, [r6, #0]
 800337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003380:	bf98      	it	ls
 8003382:	6034      	strls	r4, [r6, #0]
 8003384:	e7c7      	b.n	8003316 <xTaskCreate+0xf6>
 8003386:	bf00      	nop
 8003388:	200018c8 	.word	0x200018c8
 800338c:	20001830 	.word	0x20001830
 8003390:	200018f4 	.word	0x200018f4
 8003394:	20001914 	.word	0x20001914
 8003398:	20001940 	.word	0x20001940
 800339c:	2000192c 	.word	0x2000192c
 80033a0:	20001834 	.word	0x20001834
 80033a4:	20001838 	.word	0x20001838
 80033a8:	200018d8 	.word	0x200018d8
 80033ac:	200018dc 	.word	0x200018dc
 80033b0:	20001928 	.word	0x20001928
 80033b4:	e000ed04 	.word	0xe000ed04
 80033b8:	2000183c 	.word	0x2000183c
 80033bc:	200018e0 	.word	0x200018e0

080033c0 <vTaskStartScheduler>:
{
 80033c0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80033c2:	4b17      	ldr	r3, [pc, #92]	; (8003420 <vTaskStartScheduler+0x60>)
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2400      	movs	r4, #0
 80033c8:	9400      	str	r4, [sp, #0]
 80033ca:	4623      	mov	r3, r4
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	4915      	ldr	r1, [pc, #84]	; (8003424 <vTaskStartScheduler+0x64>)
 80033d0:	4815      	ldr	r0, [pc, #84]	; (8003428 <vTaskStartScheduler+0x68>)
 80033d2:	f7ff ff25 	bl	8003220 <xTaskCreate>
	if( xReturn == pdPASS )
 80033d6:	2801      	cmp	r0, #1
 80033d8:	d114      	bne.n	8003404 <vTaskStartScheduler+0x44>
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <vTaskStartScheduler+0x6c>)
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <vTaskStartScheduler+0x70>)
 80033f4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <vTaskStartScheduler+0x74>)
 80033f8:	601c      	str	r4, [r3, #0]
}
 80033fa:	b002      	add	sp, #8
 80033fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003400:	f7ff bd10 	b.w	8002e24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003404:	3001      	adds	r0, #1
 8003406:	d108      	bne.n	800341a <vTaskStartScheduler+0x5a>
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	e7fe      	b.n	8003418 <vTaskStartScheduler+0x58>
}
 800341a:	b002      	add	sp, #8
 800341c:	bd10      	pop	{r4, pc}
 800341e:	bf00      	nop
 8003420:	20001908 	.word	0x20001908
 8003424:	080041b2 	.word	0x080041b2
 8003428:	080031b5 	.word	0x080031b5
 800342c:	2000190c 	.word	0x2000190c
 8003430:	20001928 	.word	0x20001928
 8003434:	20001954 	.word	0x20001954

08003438 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <vTaskSuspendAll+0xc>)
 800343a:	6813      	ldr	r3, [r2, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200018d4 	.word	0x200018d4

08003448 <xTaskIncrementTick>:
{
 8003448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344c:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <xTaskIncrementTick+0xf8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d153      	bne.n	80034fc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <xTaskIncrementTick+0xfc>)
 8003456:	681c      	ldr	r4, [r3, #0]
 8003458:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800345a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800345c:	b9bc      	cbnz	r4, 800348e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800345e:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <xTaskIncrementTick+0x100>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	b142      	cbz	r2, 8003478 <xTaskIncrementTick+0x30>
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	e7fe      	b.n	8003476 <xTaskIncrementTick+0x2e>
 8003478:	4a34      	ldr	r2, [pc, #208]	; (800354c <xTaskIncrementTick+0x104>)
 800347a:	6819      	ldr	r1, [r3, #0]
 800347c:	6810      	ldr	r0, [r2, #0]
 800347e:	6018      	str	r0, [r3, #0]
 8003480:	6011      	str	r1, [r2, #0]
 8003482:	4a33      	ldr	r2, [pc, #204]	; (8003550 <xTaskIncrementTick+0x108>)
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	f7ff fe3b 	bl	8003104 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800348e:	4d31      	ldr	r5, [pc, #196]	; (8003554 <xTaskIncrementTick+0x10c>)
 8003490:	4f31      	ldr	r7, [pc, #196]	; (8003558 <xTaskIncrementTick+0x110>)
 8003492:	682b      	ldr	r3, [r5, #0]
 8003494:	429c      	cmp	r4, r3
 8003496:	f04f 0b00 	mov.w	fp, #0
 800349a:	d33e      	bcc.n	800351a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003548 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80034a0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003568 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a4:	f8d8 2000 	ldr.w	r2, [r8]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	bb72      	cbnz	r2, 800350a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	602a      	str	r2, [r5, #0]
					break;
 80034b2:	e032      	b.n	800351a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034b4:	f106 0a04 	add.w	sl, r6, #4
 80034b8:	4650      	mov	r0, sl
 80034ba:	f7ff fba3 	bl	8002c04 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034be:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80034c0:	b119      	cbz	r1, 80034ca <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034c2:	f106 0018 	add.w	r0, r6, #24
 80034c6:	f7ff fb9d 	bl	8002c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034ca:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80034cc:	f8d9 3000 	ldr.w	r3, [r9]
 80034d0:	2201      	movs	r2, #1
 80034d2:	fa02 f100 	lsl.w	r1, r2, r0
 80034d6:	4319      	orrs	r1, r3
 80034d8:	4b20      	ldr	r3, [pc, #128]	; (800355c <xTaskIncrementTick+0x114>)
 80034da:	f8c9 1000 	str.w	r1, [r9]
 80034de:	f04f 0e14 	mov.w	lr, #20
 80034e2:	4651      	mov	r1, sl
 80034e4:	fb0e 3000 	mla	r0, lr, r0, r3
 80034e8:	f7ff fb69 	bl	8002bbe <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034ec:	6838      	ldr	r0, [r7, #0]
 80034ee:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80034f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80034f2:	4291      	cmp	r1, r2
 80034f4:	bf28      	it	cs
 80034f6:	f04f 0b01 	movcs.w	fp, #1
 80034fa:	e7d3      	b.n	80034a4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80034fc:	4a18      	ldr	r2, [pc, #96]	; (8003560 <xTaskIncrementTick+0x118>)
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003504:	f04f 0b00 	mov.w	fp, #0
 8003508:	e011      	b.n	800352e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800350a:	f8d8 2000 	ldr.w	r2, [r8]
 800350e:	68d2      	ldr	r2, [r2, #12]
 8003510:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003512:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003514:	428c      	cmp	r4, r1
 8003516:	d2cd      	bcs.n	80034b4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003518:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <xTaskIncrementTick+0x114>)
 800351e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003520:	2214      	movs	r2, #20
 8003522:	434a      	muls	r2, r1
 8003524:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003526:	2a02      	cmp	r2, #2
 8003528:	bf28      	it	cs
 800352a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <xTaskIncrementTick+0x11c>)
 8003530:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003532:	2a00      	cmp	r2, #0
 8003534:	bf18      	it	ne
 8003536:	f04f 0b01 	movne.w	fp, #1
}
 800353a:	4658      	mov	r0, fp
 800353c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003540:	200018d4 	.word	0x200018d4
 8003544:	20001954 	.word	0x20001954
 8003548:	20001834 	.word	0x20001834
 800354c:	20001838 	.word	0x20001838
 8003550:	20001910 	.word	0x20001910
 8003554:	2000190c 	.word	0x2000190c
 8003558:	20001830 	.word	0x20001830
 800355c:	2000183c 	.word	0x2000183c
 8003560:	200018d0 	.word	0x200018d0
 8003564:	20001958 	.word	0x20001958
 8003568:	200018dc 	.word	0x200018dc

0800356c <xTaskResumeAll>:
{
 800356c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003570:	4c31      	ldr	r4, [pc, #196]	; (8003638 <xTaskResumeAll+0xcc>)
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	b943      	cbnz	r3, 8003588 <xTaskResumeAll+0x1c>
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	e7fe      	b.n	8003586 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003588:	f7ff fbb4 	bl	8002cf4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	3b01      	subs	r3, #1
 8003590:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003592:	6824      	ldr	r4, [r4, #0]
 8003594:	b12c      	cbz	r4, 80035a2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003596:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003598:	f7ff fbce 	bl	8002d38 <vPortExitCritical>
}
 800359c:	4620      	mov	r0, r4
 800359e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <xTaskResumeAll+0xd0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f5      	beq.n	8003596 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035aa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003654 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80035ae:	4f24      	ldr	r7, [pc, #144]	; (8003640 <xTaskResumeAll+0xd4>)
 80035b0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003658 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035b4:	f8d9 3000 	ldr.w	r3, [r9]
 80035b8:	b9e3      	cbnz	r3, 80035f4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80035ba:	b10c      	cbz	r4, 80035c0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80035bc:	f7ff fda2 	bl	8003104 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035c0:	4d20      	ldr	r5, [pc, #128]	; (8003644 <xTaskResumeAll+0xd8>)
 80035c2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035c4:	b144      	cbz	r4, 80035d8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80035c6:	4e20      	ldr	r6, [pc, #128]	; (8003648 <xTaskResumeAll+0xdc>)
 80035c8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80035ca:	f7ff ff3d 	bl	8003448 <xTaskIncrementTick>
 80035ce:	b100      	cbz	r0, 80035d2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80035d0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035d2:	3c01      	subs	r4, #1
 80035d4:	d1f9      	bne.n	80035ca <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80035d6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <xTaskResumeAll+0xdc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0da      	beq.n	8003596 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <xTaskResumeAll+0xe0>)
 80035e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80035f0:	2401      	movs	r4, #1
 80035f2:	e7d1      	b.n	8003598 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035f4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80035f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fa:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035fc:	f104 0018 	add.w	r0, r4, #24
 8003600:	f7ff fb00 	bl	8002c04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003604:	4630      	mov	r0, r6
 8003606:	f7ff fafd 	bl	8002c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800360a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	2501      	movs	r5, #1
 8003610:	fa05 f302 	lsl.w	r3, r5, r2
 8003614:	2014      	movs	r0, #20
 8003616:	430b      	orrs	r3, r1
 8003618:	fb00 8002 	mla	r0, r0, r2, r8
 800361c:	4631      	mov	r1, r6
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	f7ff facd 	bl	8002bbe <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <xTaskResumeAll+0xe4>)
 8003626:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800362e:	bf24      	itt	cs
 8003630:	4b05      	ldrcs	r3, [pc, #20]	; (8003648 <xTaskResumeAll+0xdc>)
 8003632:	601d      	strcs	r5, [r3, #0]
 8003634:	e7be      	b.n	80035b4 <xTaskResumeAll+0x48>
 8003636:	bf00      	nop
 8003638:	200018d4 	.word	0x200018d4
 800363c:	200018c8 	.word	0x200018c8
 8003640:	200018dc 	.word	0x200018dc
 8003644:	200018d0 	.word	0x200018d0
 8003648:	20001958 	.word	0x20001958
 800364c:	e000ed04 	.word	0xe000ed04
 8003650:	20001830 	.word	0x20001830
 8003654:	20001914 	.word	0x20001914
 8003658:	2000183c 	.word	0x2000183c

0800365c <vTaskDelay>:
	{
 800365c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800365e:	b940      	cbnz	r0, 8003672 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <vTaskDelay+0x40>)
 8003662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <vTaskDelay+0x44>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	b141      	cbz	r1, 800368a <vTaskDelay+0x2e>
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	e7fe      	b.n	8003688 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800368a:	f7ff fed5 	bl	8003438 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800368e:	f7ff fd4b 	bl	8003128 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003692:	f7ff ff6b 	bl	800356c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003696:	2800      	cmp	r0, #0
 8003698:	d0e2      	beq.n	8003660 <vTaskDelay+0x4>
 800369a:	bd08      	pop	{r3, pc}
 800369c:	e000ed04 	.word	0xe000ed04
 80036a0:	200018d4 	.word	0x200018d4

080036a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <vTaskSwitchContext+0x60>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b17      	ldr	r3, [pc, #92]	; (8003708 <vTaskSwitchContext+0x64>)
{
 80036aa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ac:	b112      	cbz	r2, 80036b4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80036ae:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80036b4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <vTaskSwitchContext+0x68>)
 80036b8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f1c3 031f 	rsb	r3, r3, #31
 80036c4:	2214      	movs	r2, #20
 80036c6:	4912      	ldr	r1, [pc, #72]	; (8003710 <vTaskSwitchContext+0x6c>)
 80036c8:	435a      	muls	r2, r3
 80036ca:	1888      	adds	r0, r1, r2
 80036cc:	588c      	ldr	r4, [r1, r2]
 80036ce:	b944      	cbnz	r4, 80036e2 <vTaskSwitchContext+0x3e>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	e7fe      	b.n	80036e0 <vTaskSwitchContext+0x3c>
 80036e2:	6844      	ldr	r4, [r0, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	6864      	ldr	r4, [r4, #4]
 80036e8:	6044      	str	r4, [r0, #4]
 80036ea:	440a      	add	r2, r1
 80036ec:	4294      	cmp	r4, r2
 80036ee:	bf04      	itt	eq
 80036f0:	6862      	ldreq	r2, [r4, #4]
 80036f2:	6042      	streq	r2, [r0, #4]
 80036f4:	2214      	movs	r2, #20
 80036f6:	fb02 1303 	mla	r3, r2, r3, r1
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <vTaskSwitchContext+0x70>)
 8003700:	e7d6      	b.n	80036b0 <vTaskSwitchContext+0xc>
 8003702:	bf00      	nop
 8003704:	200018d4 	.word	0x200018d4
 8003708:	20001958 	.word	0x20001958
 800370c:	200018dc 	.word	0x200018dc
 8003710:	2000183c 	.word	0x2000183c
 8003714:	20001830 	.word	0x20001830

08003718 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800371a:	2218      	movs	r2, #24
 800371c:	2100      	movs	r1, #0
 800371e:	4668      	mov	r0, sp
 8003720:	f000 fcf6 	bl	8004110 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003724:	4818      	ldr	r0, [pc, #96]	; (8003788 <MX_ADC1_Init+0x70>)
 8003726:	4b19      	ldr	r3, [pc, #100]	; (800378c <MX_ADC1_Init+0x74>)
 8003728:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800372a:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800372c:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800372e:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8003730:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003732:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003734:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003736:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003738:	6103      	str	r3, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800373a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800373c:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800373e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003740:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003744:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003746:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003748:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800374c:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800374e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003752:	f7fc fd5d 	bl	8000210 <HAL_ADC_Init>
 8003756:	b108      	cbz	r0, 800375c <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 8003758:	f000 fa60 	bl	8003c1c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800375e:	480a      	ldr	r0, [pc, #40]	; (8003788 <MX_ADC1_Init+0x70>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003760:	2306      	movs	r3, #6
 8003762:	e88d 000c 	stmia.w	sp, {r2, r3}
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003766:	227f      	movs	r2, #127	; 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003768:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800376a:	9203      	str	r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800376c:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800376e:	2204      	movs	r2, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003770:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003772:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8003774:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003776:	f7fc fe1d 	bl	80003b4 <HAL_ADC_ConfigChannel>
 800377a:	b108      	cbz	r0, 8003780 <MX_ADC1_Init+0x68>
  {
    Error_Handler();
 800377c:	f000 fa4e 	bl	8003c1c <Error_Handler>
  }

}
 8003780:	b007      	add	sp, #28
 8003782:	f85d fb04 	ldr.w	pc, [sp], #4
 8003786:	bf00      	nop
 8003788:	2000197c 	.word	0x2000197c
 800378c:	50040000 	.word	0x50040000
 8003790:	2e300800 	.word	0x2e300800

08003794 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003794:	b510      	push	{r4, lr}
 8003796:	4604      	mov	r4, r0
 8003798:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379a:	2214      	movs	r2, #20
 800379c:	2100      	movs	r1, #0
 800379e:	a803      	add	r0, sp, #12
 80037a0:	f000 fcb6 	bl	8004110 <memset>
  if(adcHandle->Instance==ADC1)
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_ADC_MspInit+0x58>)
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d11c      	bne.n	80037e6 <HAL_ADC_MspInit+0x52>
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    PA6     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = BATT_MEAS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BATT_MEAS_GPIO_Port, &GPIO_InitStruct);
 80037b0:	a903      	add	r1, sp, #12
 80037b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037c0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80037c2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80037d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BATT_MEAS_Pin;
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BATT_MEAS_GPIO_Port, &GPIO_InitStruct);
 80037da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037de:	2303      	movs	r3, #3
 80037e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BATT_MEAS_GPIO_Port, &GPIO_InitStruct);
 80037e2:	f7fc ffff 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80037e6:	b008      	add	sp, #32
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	50040000 	.word	0x50040000

080037f0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80037f0:	b500      	push	{lr}
  /* init code for TOUCHSENSING */
  MX_TOUCHSENSING_Init();

  /* USER CODE BEGIN StartDefaultTask */
  osThreadDef(shiftRegLightsTask, ShiftRegLightThread, osPriorityNormal, 0, 128);
 80037f2:	4c0f      	ldr	r4, [pc, #60]	; (8003830 <StartDefaultTask+0x40>)
{
 80037f4:	b08b      	sub	sp, #44	; 0x2c
  MX_TOUCHSENSING_Init();
 80037f6:	f000 fb75 	bl	8003ee4 <MX_TOUCHSENSING_Init>
  osThreadDef(shiftRegLightsTask, ShiftRegLightThread, osPriorityNormal, 0, 128);
 80037fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fc:	466d      	mov	r5, sp
 80037fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003800:	f854 3b04 	ldr.w	r3, [r4], #4
 8003804:	602b      	str	r3, [r5, #0]
  osThreadDef(rgbLightTask, RGB_LightThread, osPriorityNormal, 0, 128);
  //osThreadDef(accMagTask, accMagThread, osPriorityNormal, 0, 128);
  osThreadDef(touchSensingTask, touchSensingThread, osPriorityNormal, 0, 128);
 8003806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003808:	ad05      	add	r5, sp, #20
 800380a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	602b      	str	r3, [r5, #0]


  shiftRegLightsHandle = osThreadCreate(osThread(shiftRegLightsTask), NULL);
 8003810:	2100      	movs	r1, #0
 8003812:	4668      	mov	r0, sp
 8003814:	f7ff f9a5 	bl	8002b62 <osThreadCreate>
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <StartDefaultTask+0x44>)
  //rgbLightHandle = osThreadCreate(osThread(rgbLightTask), NULL);
  //accMagHandle = osThreadCreate(osThread(accMagTask), NULL);
  touchSensingHandle = osThreadCreate(osThread(touchSensingTask), NULL);
 800381a:	2100      	movs	r1, #0
  shiftRegLightsHandle = osThreadCreate(osThread(shiftRegLightsTask), NULL);
 800381c:	6018      	str	r0, [r3, #0]
  touchSensingHandle = osThreadCreate(osThread(touchSensingTask), NULL);
 800381e:	a805      	add	r0, sp, #20
 8003820:	f7ff f99f 	bl	8002b62 <osThreadCreate>
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <StartDefaultTask+0x48>)
 8003826:	6018      	str	r0, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f7ff f9b2 	bl	8002b92 <osDelay>
 800382e:	e7fb      	b.n	8003828 <StartDefaultTask+0x38>
 8003830:	08004164 	.word	0x08004164
 8003834:	200019e8 	.word	0x200019e8
 8003838:	200019f0 	.word	0x200019f0

0800383c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800383c:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800383e:	4d07      	ldr	r5, [pc, #28]	; (800385c <MX_FREERTOS_Init+0x20>)
 8003840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8003842:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003844:	ac01      	add	r4, sp, #4
 8003846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800384c:	2100      	movs	r1, #0
 800384e:	a801      	add	r0, sp, #4
 8003850:	f7ff f987 	bl	8002b62 <osThreadCreate>
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <MX_FREERTOS_Init+0x24>)
 8003856:	6018      	str	r0, [r3, #0]
}
 8003858:	b007      	add	sp, #28
 800385a:	bd30      	pop	{r4, r5, pc}
 800385c:	0800418c 	.word	0x0800418c
 8003860:	200019e0 	.word	0x200019e0

08003864 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8003868:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800386a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800386c:	4302      	orrs	r2, r0
 800386e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	4018      	ands	r0, r3
 8003874:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8003876:	9b01      	ldr	r3, [sp, #4]
}
 8003878:	b002      	add	sp, #8
 800387a:	4770      	bx	lr

0800387c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	2214      	movs	r2, #20
 8003882:	2100      	movs	r1, #0
 8003884:	a801      	add	r0, sp, #4
 8003886:	f000 fc43 	bl	8004110 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800388a:	2004      	movs	r0, #4
 800388c:	f7ff ffea 	bl	8003864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003890:	2080      	movs	r0, #128	; 0x80
 8003892:	f7ff ffe7 	bl	8003864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	2002      	movs	r0, #2
 8003898:	f7ff ffe4 	bl	8003864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389c:	2001      	movs	r0, #1
 800389e:	f7ff ffe1 	bl	8003864 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BATT_MEAS_CTRL_Pin|LED1_RED_Pin|LED1_GREEN_Pin, GPIO_PIN_SET);
 80038a2:	4e2e      	ldr	r6, [pc, #184]	; (800395c <MX_GPIO_Init+0xe0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin, GPIO_PIN_SET);
 80038a4:	4f2e      	ldr	r7, [pc, #184]	; (8003960 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038a6:	2010      	movs	r0, #16
 80038a8:	f7ff ffdc 	bl	8003864 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(GPIOA, LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80038b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b6:	f7fd f847 	bl	8000948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BATT_MEAS_CTRL_Pin|LED1_RED_Pin|LED1_GREEN_Pin, GPIO_PIN_SET);
 80038ba:	4630      	mov	r0, r6
 80038bc:	2201      	movs	r2, #1
 80038be:	2107      	movs	r1, #7
 80038c0:	f7fd f842 	bl	8000948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin, GPIO_PIN_SET);
 80038c4:	2201      	movs	r2, #1
 80038c6:	4638      	mov	r0, r7
 80038c8:	2110      	movs	r1, #16
 80038ca:	f7fd f83d 	bl	8000948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038d0:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038d2:	2503      	movs	r5, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038d4:	a901      	add	r1, sp, #4
 80038d6:	4823      	ldr	r0, [pc, #140]	; (8003964 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038d8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038da:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038de:	f7fc ff81 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80038e2:	f240 431f 	movw	r3, #1055	; 0x41f
                          |GPIO_PIN_4|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e6:	a901      	add	r1, sp, #4
 80038e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80038ec:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ee:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f2:	f7fc ff77 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LH_SIG_Pin;
 80038f6:	2320      	movs	r3, #32
 80038f8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 80038fa:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <MX_GPIO_Init+0xec>)
 80038fe:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8003900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8003908:	f7fc ff6c 	bl	80007e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin;
 800390c:	f44f 4303 	mov.w	r3, #33536	; 0x8300
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	a901      	add	r1, sp, #4
 8003912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_SS_Pin|LED_PWM_Pin|BUZZER_Pin;
 8003916:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003918:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391e:	f7fc ff61 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BATT_MEAS_CTRL_Pin|LED1_GREEN_Pin;
 8003922:	2306      	movs	r3, #6
 8003924:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003926:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003928:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800392c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003932:	f7fc ff57 	bl	80007e4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_RED_GPIO_Port, &GPIO_InitStruct);
 8003936:	a901      	add	r1, sp, #4
 8003938:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED1_RED_Pin;
 800393a:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393c:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003940:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(LED1_RED_GPIO_Port, &GPIO_InitStruct);
 8003942:	f7fc ff4f 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_BLUE_Pin;
 8003946:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003948:	a901      	add	r1, sp, #4
 800394a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LED1_BLUE_Pin;
 800394c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394e:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003952:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(LED1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003954:	f7fc ff46 	bl	80007e4 <HAL_GPIO_Init>

}
 8003958:	b007      	add	sp, #28
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	48000400 	.word	0x48000400
 8003960:	48001000 	.word	0x48001000
 8003964:	48001c00 	.word	0x48001c00
 8003968:	10110000 	.word	0x10110000

0800396c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800396c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800396e:	4814      	ldr	r0, [pc, #80]	; (80039c0 <MX_I2C1_Init+0x54>)
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <MX_I2C1_Init+0x58>)
 8003972:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8003974:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 8003978:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 800397c:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8003980:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003982:	2201      	movs	r2, #1
  hi2c1.Init.OwnAddress1 = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003988:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800398a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800398c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800398e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003990:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003992:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003994:	f7fc ffe3 	bl	800095e <HAL_I2C_Init>
 8003998:	b108      	cbz	r0, 800399e <MX_I2C1_Init+0x32>
  {
    Error_Handler();
 800399a:	f000 f93f 	bl	8003c1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800399e:	2100      	movs	r1, #0
 80039a0:	4807      	ldr	r0, [pc, #28]	; (80039c0 <MX_I2C1_Init+0x54>)
 80039a2:	f7fd f834 	bl	8000a0e <HAL_I2CEx_ConfigAnalogFilter>
 80039a6:	b108      	cbz	r0, 80039ac <MX_I2C1_Init+0x40>
  {
    Error_Handler();
 80039a8:	f000 f938 	bl	8003c1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039ac:	2100      	movs	r1, #0
 80039ae:	4804      	ldr	r0, [pc, #16]	; (80039c0 <MX_I2C1_Init+0x54>)
 80039b0:	f7fd f853 	bl	8000a5a <HAL_I2CEx_ConfigDigitalFilter>
 80039b4:	b118      	cbz	r0, 80039be <MX_I2C1_Init+0x52>
  {
    Error_Handler();
  }

}
 80039b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80039ba:	f000 b92f 	b.w	8003c1c <Error_Handler>
 80039be:	bd08      	pop	{r3, pc}
 80039c0:	200019f4 	.word	0x200019f4
 80039c4:	40005400 	.word	0x40005400

080039c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80039c8:	b510      	push	{r4, lr}
 80039ca:	4604      	mov	r4, r0
 80039cc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ce:	2214      	movs	r2, #20
 80039d0:	2100      	movs	r1, #0
 80039d2:	a803      	add	r0, sp, #12
 80039d4:	f000 fb9c 	bl	8004110 <memset>
  if(i2cHandle->Instance==I2C1)
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <HAL_I2C_MspInit+0x70>)
 80039dc:	429a      	cmp	r2, r3
 80039de:	d128      	bne.n	8003a32 <HAL_I2C_MspInit+0x6a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80039e0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e4:	a903      	add	r1, sp, #12
 80039e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039e8:	4814      	ldr	r0, [pc, #80]	; (8003a3c <HAL_I2C_MspInit+0x74>)
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80039f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80039f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a00:	2312      	movs	r3, #18
 8003a02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a04:	2301      	movs	r3, #1
 8003a06:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a08:	2304      	movs	r3, #4
 8003a0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0c:	f7fc feea 	bl	80007e4 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003a10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a16:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1e:	9301      	str	r3, [sp, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003a20:	201e      	movs	r0, #30
 8003a22:	2200      	movs	r2, #0
 8003a24:	2105      	movs	r1, #5
  (void)tmpreg;
 8003a26:	9b01      	ldr	r3, [sp, #4]
 8003a28:	f7fc fe9c 	bl	8000764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003a2c:	201e      	movs	r0, #30
 8003a2e:	f7fc fecd 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003a32:	b008      	add	sp, #32
 8003a34:	bd10      	pop	{r4, pc}
 8003a36:	bf00      	nop
 8003a38:	40005400 	.word	0x40005400
 8003a3c:	48000400 	.word	0x48000400

08003a40 <TransmitShiftRegLight>:

/*
 * Helper Functions
 */

void TransmitShiftRegLight(uint8_t *light_sequence){
 8003a40:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8003a42:	2200      	movs	r2, #0
void TransmitShiftRegLight(uint8_t *light_sequence){
 8003a44:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_RESET);
 8003a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a4e:	f7fc ff7b 	bl	8000948 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, light_sequence, 1, 1);
 8003a52:	2301      	movs	r3, #1
 8003a54:	4621      	mov	r1, r4
 8003a56:	461a      	mov	r2, r3
 8003a58:	4805      	ldr	r0, [pc, #20]	; (8003a70 <TransmitShiftRegLight+0x30>)
 8003a5a:	f7fe f844 	bl	8001ae6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LED_SS_GPIO_Port, LED_SS_Pin, GPIO_PIN_SET);
 8003a6c:	f7fc bf6c 	b.w	8000948 <HAL_GPIO_WritePin>
 8003a70:	20001a40 	.word	0x20001a40

08003a74 <ShiftRegLightThread>:
void ShiftRegLightThread(void){
 8003a74:	b507      	push	{r0, r1, r2, lr}
  uint8_t light_sequence = 0xFF;
 8003a76:	ac02      	add	r4, sp, #8
 8003a78:	23ff      	movs	r3, #255	; 0xff
 8003a7a:	f804 3d01 	strb.w	r3, [r4, #-1]!
          light_sequence = 0xFE;
 8003a7e:	25fe      	movs	r5, #254	; 0xfe
    if(light_sequence == 0xFF || light_sequence == 0x7F){
 8003a80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a88:	2a7f      	cmp	r2, #127	; 0x7f
      light_sequence = light_sequence << 1;
 8003a8a:	bf1c      	itt	ne
 8003a8c:	005b      	lslne	r3, r3, #1
      light_sequence = light_sequence | 0x01;
 8003a8e:	f043 0301 	orrne.w	r3, r3, #1
    TransmitShiftRegLight(&light_sequence);
 8003a92:	4620      	mov	r0, r4
          light_sequence = 0xFE;
 8003a94:	bf0c      	ite	eq
 8003a96:	f88d 5007 	strbeq.w	r5, [sp, #7]
      light_sequence = light_sequence | 0x01;
 8003a9a:	f88d 3007 	strbne.w	r3, [sp, #7]
    TransmitShiftRegLight(&light_sequence);
 8003a9e:	f7ff ffcf 	bl	8003a40 <TransmitShiftRegLight>
    osDelay(SHIFT_REG_PERIOD);
 8003aa2:	2032      	movs	r0, #50	; 0x32
 8003aa4:	f7ff f875 	bl	8002b92 <osDelay>
    if(light_sequence == 0xFF || light_sequence == 0x7F){
 8003aa8:	e7ea      	b.n	8003a80 <ShiftRegLightThread+0xc>

08003aaa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aae:	b0ae      	sub	sp, #184	; 0xb8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab0:	2248      	movs	r2, #72	; 0x48
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	a808      	add	r0, sp, #32
 8003ab6:	f000 fb2b 	bl	8004110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aba:	221c      	movs	r2, #28
 8003abc:	2100      	movs	r1, #0
 8003abe:	a801      	add	r0, sp, #4
 8003ac0:	f000 fb26 	bl	8004110 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2250      	movs	r2, #80	; 0x50
 8003ac8:	a81a      	add	r0, sp, #104	; 0x68
 8003aca:	f000 fb21 	bl	8004110 <memset>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ad2:	2502      	movs	r5, #2
 8003ad4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ad8:	f023 0318 	bic.w	r3, r3, #24
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8003ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aec:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8003af0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af4:	9513      	str	r5, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8003afe:	232f      	movs	r3, #47	; 0x2f
 8003b00:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b02:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b0c:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b0e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b10:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b12:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b14:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b16:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003b18:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003b1a:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 32;
 8003b1c:	2320      	movs	r3, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003b1e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b20:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b24:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b26:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b2a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b2e:	eb0d 0003 	add.w	r0, sp, r3
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b32:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 32;
 8003b34:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b3a:	9619      	str	r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b3c:	9718      	str	r7, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b3e:	f7fd f8e1 	bl	8000d04 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003b42:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003b44:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003b46:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b48:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b4a:	2400      	movs	r4, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003b4c:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b50:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b56:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b58:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b5a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003b5c:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003b5e:	f7fd fb8f 	bl	8001280 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003b62:	f243 5304 	movw	r3, #13572	; 0x3504
 8003b66:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8003b68:	2318      	movs	r3, #24
 8003b6a:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8003b6c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003b70:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b72:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003b76:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003b78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b7c:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b82:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b84:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8003b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8a:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003b8c:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003b90:	971d      	str	r7, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003b92:	961e      	str	r6, [sp, #120]	; 0x78
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003b94:	952c      	str	r5, [sp, #176]	; 0xb0
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003b96:	942d      	str	r4, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b98:	f7fd fd31 	bl	80015fe <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003b9c:	f7fd fed1 	bl	8001942 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003ba0:	b02e      	add	sp, #184	; 0xb8
 8003ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ba6 <main>:
{
 8003ba6:	b508      	push	{r3, lr}
  HAL_Init();
 8003ba8:	f7fc faea 	bl	8000180 <HAL_Init>
  SystemClock_Config();
 8003bac:	f7ff ff7d 	bl	8003aaa <SystemClock_Config>
  MX_GPIO_Init();
 8003bb0:	f7ff fe64 	bl	800387c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003bb4:	f7ff fdb0 	bl	8003718 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003bb8:	f7ff fed8 	bl	800396c <MX_I2C1_Init>
  MX_RF_Init();
 8003bbc:	f000 f82f 	bl	8003c1e <MX_RF_Init>
  MX_TSC_Init();
 8003bc0:	f000 f992 	bl	8003ee8 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8003bc4:	f000 fa0a 	bl	8003fdc <MX_USB_PCD_Init>
  MX_SPI1_Init();
 8003bc8:	f000 f82a 	bl	8003c20 <MX_SPI1_Init>
  MX_FREERTOS_Init();
 8003bcc:	f7ff fe36 	bl	800383c <MX_FREERTOS_Init>
  osKernelStart();
 8003bd0:	f7fe ffc2 	bl	8002b58 <osKernelStart>
 8003bd4:	e7fe      	b.n	8003bd4 <main+0x2e>
	...

08003bd8 <HAL_TSC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t temp_var = 0;
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc)
{
 8003bd8:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  HAL_GPIO_TogglePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin);
 8003bda:	2110      	movs	r1, #16
{
 8003bdc:	4604      	mov	r4, r0
  HAL_GPIO_TogglePin(LED1_BLUE_GPIO_Port, LED1_BLUE_Pin);
 8003bde:	4808      	ldr	r0, [pc, #32]	; (8003c00 <HAL_TSC_ConvCpltCallback+0x28>)
 8003be0:	f7fc feb7 	bl	8000952 <HAL_GPIO_TogglePin>
  if (HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX) == TSC_GROUP_COMPLETED){
 8003be4:	2101      	movs	r1, #1
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7fe f9e7 	bl	8001fba <HAL_TSC_GroupGetStatus>
 8003bec:	2801      	cmp	r0, #1
 8003bee:	4601      	mov	r1, r0
 8003bf0:	d104      	bne.n	8003bfc <HAL_TSC_ConvCpltCallback+0x24>
    temp_var = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7fe f9ef 	bl	8001fd6 <HAL_TSC_GroupGetValue>
 8003bf8:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <HAL_TSC_ConvCpltCallback+0x2c>)
 8003bfa:	7018      	strb	r0, [r3, #0]
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	bf00      	nop
 8003c00:	48001000 	.word	0x48001000
 8003c04:	2000195c 	.word	0x2000195c

08003c08 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003c08:	6802      	ldr	r2, [r0, #0]
 8003c0a:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003c10:	f7fc bacc 	b.w	80001ac <HAL_IncTick>
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00

08003c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c1c:	4770      	bx	lr

08003c1e <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003c1e:	4770      	bx	lr

08003c20 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8003c20:	4811      	ldr	r0, [pc, #68]	; (8003c68 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c22:	4912      	ldr	r1, [pc, #72]	; (8003c6c <MX_SPI1_Init+0x4c>)
{
 8003c24:	b508      	push	{r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c26:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
 8003c32:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003c36:	2302      	movs	r3, #2
 8003c38:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c42:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003c44:	2328      	movs	r3, #40	; 0x28
 8003c46:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003c48:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c4e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c50:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003c52:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c54:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003c56:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c58:	f7fd fef4 	bl	8001a44 <HAL_SPI_Init>
 8003c5c:	b118      	cbz	r0, 8003c66 <MX_SPI1_Init+0x46>
  {
    Error_Handler();
  }

}
 8003c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003c62:	f7ff bfdb 	b.w	8003c1c <Error_Handler>
 8003c66:	bd08      	pop	{r3, pc}
 8003c68:	20001a40 	.word	0x20001a40
 8003c6c:	40013000 	.word	0x40013000

08003c70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c70:	b530      	push	{r4, r5, lr}
 8003c72:	4604      	mov	r4, r0
 8003c74:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c76:	2214      	movs	r2, #20
 8003c78:	2100      	movs	r1, #0
 8003c7a:	a803      	add	r0, sp, #12
 8003c7c:	f000 fa48 	bl	8004110 <memset>
  if(spiHandle->Instance==SPI1)
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <HAL_SPI_MspInit+0x84>)
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d132      	bne.n	8003cee <HAL_SPI_MspInit+0x7e>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2502      	movs	r5, #2
 8003c8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c9c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003c9e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003caa:	f002 0201 	and.w	r2, r2, #1
 8003cae:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8003cb0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cb4:	f042 0202 	orr.w	r2, r2, #2
 8003cb8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbc:	9504      	str	r5, [sp, #16]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003cc4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cc6:	2405      	movs	r4, #5
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8003cc8:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003cca:	a903      	add	r1, sp, #12
 8003ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = LED_MOSI_Pin;
 8003cd0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cd2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003cd4:	f7fc fd86 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_SCK_Pin;
 8003cd8:	2308      	movs	r3, #8
 8003cda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8003cdc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8003ce0:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ce8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_SCK_GPIO_Port, &GPIO_InitStruct);
 8003cea:	f7fc fd7b 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003cee:	b009      	add	sp, #36	; 0x24
 8003cf0:	bd30      	pop	{r4, r5, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40013000 	.word	0x40013000
 8003cf8:	48000400 	.word	0x48000400

08003cfc <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	210f      	movs	r1, #15
 8003d00:	f06f 0001 	mvn.w	r0, #1
 8003d04:	f7fc bd2e 	b.w	8000764 <HAL_NVIC_SetPriority>

08003d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d08:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8003d0a:	4601      	mov	r1, r0
{
 8003d0c:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2019      	movs	r0, #25
 8003d12:	f7fc fd27 	bl	8000764 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8003d16:	2019      	movs	r0, #25
 8003d18:	f7fc fd58 	bl	80007cc <HAL_NVIC_EnableIRQ>
  SET_BIT(RCC->APB2ENR, Periphs);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d20:	a901      	add	r1, sp, #4
 8003d22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003d24:	4c12      	ldr	r4, [pc, #72]	; (8003d70 <HAL_InitTick+0x68>)
 8003d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d34:	a803      	add	r0, sp, #12
  (void)tmpreg;
 8003d36:	9b02      	ldr	r3, [sp, #8]
 8003d38:	f7fd fc10 	bl	800155c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7fd fbfc 	bl	8001538 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <HAL_InitTick+0x6c>)
 8003d42:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003d44:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d48:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_InitTick+0x70>)
 8003d4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d50:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003d52:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8003d54:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003d56:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003d58:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003d5c:	f7fe f886 	bl	8001e6c <HAL_TIM_Base_Init>
 8003d60:	b920      	cbnz	r0, 8003d6c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003d62:	4620      	mov	r0, r4
 8003d64:	f7fd ff7e 	bl	8001c64 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003d68:	b00a      	add	sp, #40	; 0x28
 8003d6a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	e7fb      	b.n	8003d68 <HAL_InitTick+0x60>
 8003d70:	20001aa4 	.word	0x20001aa4
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	000f4240 	.word	0x000f4240

08003d7c <NMI_Handler>:
 8003d7c:	4770      	bx	lr

08003d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d7e:	e7fe      	b.n	8003d7e <HardFault_Handler>

08003d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d80:	e7fe      	b.n	8003d80 <MemManage_Handler>

08003d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d82:	e7fe      	b.n	8003d82 <BusFault_Handler>

08003d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d84:	e7fe      	b.n	8003d84 <UsageFault_Handler>

08003d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d86:	4770      	bx	lr

08003d88 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d88:	4801      	ldr	r0, [pc, #4]	; (8003d90 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8003d8a:	f7fd bf85 	b.w	8001c98 <HAL_TIM_IRQHandler>
 8003d8e:	bf00      	nop
 8003d90:	20001aa4 	.word	0x20001aa4

08003d94 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d94:	4801      	ldr	r0, [pc, #4]	; (8003d9c <I2C1_EV_IRQHandler+0x8>)
 8003d96:	f7fc be33 	b.w	8000a00 <HAL_I2C_EV_IRQHandler>
 8003d9a:	bf00      	nop
 8003d9c:	200019f4 	.word	0x200019f4

08003da0 <TSC_IRQHandler>:
void TSC_IRQHandler(void)
{
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <TSC_IRQHandler+0x8>)
 8003da2:	f7fe b936 	b.w	8002012 <HAL_TSC_IRQHandler>
 8003da6:	bf00      	nop
 8003da8:	20001ae4 	.word	0x20001ae4

08003dac <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <SystemInit+0x60>)
 8003dae:	2100      	movs	r1, #0
 8003db0:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003db2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003db6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003dc2:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8003dce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003dd2:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8003dda:	4462      	add	r2, ip
 8003ddc:	4002      	ands	r2, r0
 8003dde:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003de0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003de4:	f022 0205 	bic.w	r2, r2, #5
 8003de8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003dec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003df8:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <SystemInit+0x64>)
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003dfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e04:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e06:	6199      	str	r1, [r3, #24]
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000ed00 	.word	0xe000ed00
 8003e10:	22041000 	.word	0x22041000

08003e14 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e18:	4924      	ldr	r1, [pc, #144]	; (8003eac <SystemCoreClockUpdate+0x98>)
 8003e1a:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e1c:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003e1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e22:	f000 000c 	and.w	r0, r0, #12
{
 8003e26:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003e28:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e30:	280c      	cmp	r0, #12
 8003e32:	d839      	bhi.n	8003ea8 <SystemCoreClockUpdate+0x94>
 8003e34:	e8df f000 	tbb	[pc, r0]
 8003e38:	38383838 	.word	0x38383838
 8003e3c:	38383807 	.word	0x38383807
 8003e40:	38383816 	.word	0x38383816
 8003e44:	18          	.byte	0x18
 8003e45:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8003e48:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8003e4e:	481a      	ldr	r0, [pc, #104]	; (8003eb8 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e50:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8003e52:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e54:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8003e58:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8003e64:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <SystemCoreClockUpdate+0xa8>)
 8003e66:	e7ef      	b.n	8003e48 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e68:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003e6a:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e6c:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003e70:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003e74:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003e76:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003e7a:	d10e      	bne.n	8003e9a <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8003e7c:	490d      	ldr	r1, [pc, #52]	; (8003eb4 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 8003e7e:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e86:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003e88:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e8a:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003e8e:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e90:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003e92:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8003e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e98:	e7d6      	b.n	8003e48 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8003e9a:	2803      	cmp	r0, #3
 8003e9c:	d101      	bne.n	8003ea2 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 8003e9e:	4907      	ldr	r1, [pc, #28]	; (8003ebc <SystemCoreClockUpdate+0xa8>)
 8003ea0:	e7ed      	b.n	8003e7e <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8003ea2:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ea6:	e7ec      	b.n	8003e82 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8003ea8:	6014      	str	r4, [r2, #0]
      break;
 8003eaa:	e7ce      	b.n	8003e4a <SystemCoreClockUpdate+0x36>
 8003eac:	08004248 	.word	0x08004248
 8003eb0:	20000010 	.word	0x20000010
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	080041e8 	.word	0x080041e8
 8003ebc:	01e84800 	.word	0x01e84800

08003ec0 <touchSensingThread>:
#include "cmsis_os.h"
/*
 * THREADS
 */

void touchSensingThread(void){
 8003ec0:	b508      	push	{r3, lr}

  while(1){
    osDelay(100);

    // discharge the touch-sensing IOs
    HAL_TSC_IODischarge(&htsc, ENABLE);
 8003ec2:	4c07      	ldr	r4, [pc, #28]	; (8003ee0 <touchSensingThread+0x20>)
    osDelay(100);
 8003ec4:	2064      	movs	r0, #100	; 0x64
 8003ec6:	f7fe fe64 	bl	8002b92 <osDelay>
    HAL_TSC_IODischarge(&htsc, ENABLE);
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7fe f888 	bl	8001fe2 <HAL_TSC_IODischarge>
    osDelay(1);
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f7fe fe5d 	bl	8002b92 <osDelay>

    // sample
    HAL_TSC_Start_IT(&htsc);
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f7fe f83f 	bl	8001f5c <HAL_TSC_Start_IT>
 8003ede:	e7f1      	b.n	8003ec4 <touchSensingThread+0x4>
 8003ee0:	20001ae4 	.word	0x20001ae4

08003ee4 <MX_TOUCHSENSING_Init>:
void MX_TOUCHSENSING_Init(void)
{
   /** 
  */

  tsl_user_Init();
 8003ee4:	f000 b86c 	b.w	8003fc0 <tsl_user_Init>

08003ee8 <MX_TSC_Init>:
void MX_TSC_Init(void)
{

  /** Configure the TSC peripheral 
  */
  htsc.Instance = TSC;
 8003ee8:	4810      	ldr	r0, [pc, #64]	; (8003f2c <MX_TSC_Init+0x44>)
  htsc.Init.CTPulseHighLength = TSC_CTPH_1CYCLE;
  htsc.Init.CTPulseLowLength = TSC_CTPL_1CYCLE;
  htsc.Init.SpreadSpectrum = DISABLE;
  htsc.Init.SpreadSpectrumDeviation = 1;
 8003eea:	2201      	movs	r2, #1
{
 8003eec:	b508      	push	{r3, lr}
  htsc.Instance = TSC;
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <MX_TSC_Init+0x48>)
  htsc.Init.SpreadSpectrumDeviation = 1;
 8003ef0:	6102      	str	r2, [r0, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8003ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  htsc.Instance = TSC;
 8003ef6:	6003      	str	r3, [r0, #0]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8003ef8:	6182      	str	r2, [r0, #24]
  htsc.Init.CTPulseHighLength = TSC_CTPH_1CYCLE;
 8003efa:	2300      	movs	r3, #0
  htsc.Init.MaxCountValue = TSC_MCV_511;
 8003efc:	2220      	movs	r2, #32
  htsc.Init.CTPulseHighLength = TSC_CTPH_1CYCLE;
 8003efe:	6043      	str	r3, [r0, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_1CYCLE;
 8003f00:	6083      	str	r3, [r0, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8003f02:	7303      	strb	r3, [r0, #12]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8003f04:	6143      	str	r3, [r0, #20]
  htsc.Init.MaxCountValue = TSC_MCV_511;
 8003f06:	61c2      	str	r2, [r0, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8003f08:	6203      	str	r3, [r0, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8003f0a:	6243      	str	r3, [r0, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8003f0c:	6283      	str	r3, [r0, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8003f0e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8003f12:	22e0      	movs	r2, #224	; 0xe0
  htsc.Init.ShieldIOs = 0;
 8003f14:	6343      	str	r3, [r0, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8003f16:	2310      	movs	r3, #16
  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8003f18:	6302      	str	r2, [r0, #48]	; 0x30
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8003f1a:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8003f1c:	f7fd ffd7 	bl	8001ece <HAL_TSC_Init>
 8003f20:	b118      	cbz	r0, 8003f2a <MX_TSC_Init+0x42>
  {
    Error_Handler();
  }

}
 8003f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003f26:	f7ff be79 	b.w	8003c1c <Error_Handler>
 8003f2a:	bd08      	pop	{r3, pc}
 8003f2c:	20001ae4 	.word	0x20001ae4
 8003f30:	40024000 	.word	0x40024000

08003f34 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8003f34:	b530      	push	{r4, r5, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3a:	2214      	movs	r2, #20
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	a803      	add	r0, sp, #12
 8003f40:	f000 f8e6 	bl	8004110 <memset>
  if(tscHandle->Instance==TSC)
 8003f44:	6822      	ldr	r2, [r4, #0]
 8003f46:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_TSC_MspInit+0x80>)
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d131      	bne.n	8003fb0 <HAL_TSC_MspInit+0x7c>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8003f50:	2509      	movs	r5, #9
 8003f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f54:	4818      	ldr	r0, [pc, #96]	; (8003fb8 <HAL_TSC_MspInit+0x84>)
 8003f56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f5a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003f5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f5e:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003f62:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003f64:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f68:	f042 0202 	orr.w	r2, r2, #2
 8003f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8003f70:	9507      	str	r5, [sp, #28]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003f78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f80:	2312      	movs	r3, #18
 8003f82:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f84:	f7fc fc2e 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f88:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f92:	4809      	ldr	r0, [pc, #36]	; (8003fb8 <HAL_TSC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f98:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8003f9a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9c:	f7fc fc22 	bl	80007e4 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8003fa0:	2027      	movs	r0, #39	; 0x27
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	2105      	movs	r1, #5
 8003fa6:	f7fc fbdd 	bl	8000764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8003faa:	2027      	movs	r0, #39	; 0x27
 8003fac:	f7fc fc0e 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8003fb0:	b009      	add	sp, #36	; 0x24
 8003fb2:	bd30      	pop	{r4, r5, pc}
 8003fb4:	40024000 	.word	0x40024000
 8003fb8:	48000400 	.word	0x48000400

08003fbc <MyLinRots_OffStateProcess>:
  * @brief  Executed when a sensor is in Off state
  * @param  None
  * @retval None
  */
void MyLinRots_OffStateProcess(void)
{
 8003fbc:	4770      	bx	lr

08003fbe <MyLinRots_ErrorStateProcess>:
 8003fbe:	4770      	bx	lr

08003fc0 <tsl_user_Init>:
{
 8003fc0:	b508      	push	{r3, lr}
  TSL_obj_GroupInit(&MyObjGroup); /* Init Objects */
 8003fc2:	4804      	ldr	r0, [pc, #16]	; (8003fd4 <tsl_user_Init+0x14>)
 8003fc4:	f7fe fd92 	bl	8002aec <TSL_obj_GroupInit>
  TSL_Init(MyBanks); /* Init acquisition module */
 8003fc8:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <tsl_user_Init+0x18>)
}
 8003fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TSL_Init(MyBanks); /* Init acquisition module */
 8003fce:	f7fe b85f 	b.w	8002090 <TSL_Init>
 8003fd2:	bf00      	nop
 8003fd4:	20000014 	.word	0x20000014
 8003fd8:	08004288 	.word	0x08004288

08003fdc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003fdc:	b508      	push	{r3, lr}

  hpcd_USB_FS.Instance = USB;
 8003fde:	480b      	ldr	r0, [pc, #44]	; (800400c <MX_USB_PCD_Init+0x30>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <MX_USB_PCD_Init+0x34>)
 8003fe2:	f04f 0e08 	mov.w	lr, #8
 8003fe6:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003fea:	2302      	movs	r3, #2
 8003fec:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003fee:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003ff4:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003ff6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003ff8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003ffa:	f7fc fd53 	bl	8000aa4 <HAL_PCD_Init>
 8003ffe:	b118      	cbz	r0, 8004008 <MX_USB_PCD_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004004:	f7ff be0a 	b.w	8003c1c <Error_Handler>
 8004008:	bd08      	pop	{r3, pc}
 800400a:	bf00      	nop
 800400c:	20001b68 	.word	0x20001b68
 8004010:	40006800 	.word	0x40006800

08004014 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004014:	b510      	push	{r4, lr}
 8004016:	4604      	mov	r4, r0
 8004018:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401a:	2214      	movs	r2, #20
 800401c:	2100      	movs	r1, #0
 800401e:	a803      	add	r0, sp, #12
 8004020:	f000 f876 	bl	8004110 <memset>
  if(pcdHandle->Instance==USB)
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_PCD_MspInit+0x5c>)
 8004028:	429a      	cmp	r2, r3
 800402a:	d11f      	bne.n	800406c <HAL_PCD_MspInit+0x58>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800402c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = USB_DN_Pin|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004030:	a903      	add	r1, sp, #12
 8004032:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800403a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004042:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USB_DN_Pin|GPIO_PIN_12;
 8004044:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004048:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404a:	2302      	movs	r3, #2
 800404c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004052:	230a      	movs	r3, #10
 8004054:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004056:	f7fc fbc5 	bl	80007e4 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800405a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800405c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004060:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004062:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004068:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800406a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_USB_CLK_ENABLE();
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800406c:	b008      	add	sp, #32
 800406e:	bd10      	pop	{r4, pc}
 8004070:	40006800 	.word	0x40006800

08004074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004074:	480d      	ldr	r0, [pc, #52]	; (80040ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004076:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004078:	480d      	ldr	r0, [pc, #52]	; (80040b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800407a:	490e      	ldr	r1, [pc, #56]	; (80040b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800407c:	4a0e      	ldr	r2, [pc, #56]	; (80040b8 <LoopForever+0xe>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004080:	e002      	b.n	8004088 <LoopCopyDataInit>

08004082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004086:	3304      	adds	r3, #4

08004088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800408a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800408c:	d3f9      	bcc.n	8004082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800408e:	4a0b      	ldr	r2, [pc, #44]	; (80040bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004090:	4c0b      	ldr	r4, [pc, #44]	; (80040c0 <LoopForever+0x16>)
  movs r3, #0
 8004092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004094:	e001      	b.n	800409a <LoopFillZerobss>

08004096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004098:	3204      	adds	r2, #4

0800409a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800409a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800409c:	d3fb      	bcc.n	8004096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800409e:	f7ff fe85 	bl	8003dac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80040a2:	f000 f811 	bl	80040c8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80040a6:	f7ff fd7e 	bl	8003ba6 <main>

080040aa <LoopForever>:

LoopForever:
  b LoopForever
 80040aa:	e7fe      	b.n	80040aa <LoopForever>
  ldr   r0, =_estack
 80040ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80040b0:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80040b4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80040b8:	080043dc 	.word	0x080043dc
  ldr r2, =_sbss
 80040bc:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80040c0:	20001ddc 	.word	0x20001ddc

080040c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040c4:	e7fe      	b.n	80040c4 <ADC1_IRQHandler>
	...

080040c8 <__libc_init_array>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4e0d      	ldr	r6, [pc, #52]	; (8004100 <__libc_init_array+0x38>)
 80040cc:	4c0d      	ldr	r4, [pc, #52]	; (8004104 <__libc_init_array+0x3c>)
 80040ce:	1ba4      	subs	r4, r4, r6
 80040d0:	10a4      	asrs	r4, r4, #2
 80040d2:	2500      	movs	r5, #0
 80040d4:	42a5      	cmp	r5, r4
 80040d6:	d109      	bne.n	80040ec <__libc_init_array+0x24>
 80040d8:	4e0b      	ldr	r6, [pc, #44]	; (8004108 <__libc_init_array+0x40>)
 80040da:	4c0c      	ldr	r4, [pc, #48]	; (800410c <__libc_init_array+0x44>)
 80040dc:	f000 f820 	bl	8004120 <_init>
 80040e0:	1ba4      	subs	r4, r4, r6
 80040e2:	10a4      	asrs	r4, r4, #2
 80040e4:	2500      	movs	r5, #0
 80040e6:	42a5      	cmp	r5, r4
 80040e8:	d105      	bne.n	80040f6 <__libc_init_array+0x2e>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f0:	4798      	blx	r3
 80040f2:	3501      	adds	r5, #1
 80040f4:	e7ee      	b.n	80040d4 <__libc_init_array+0xc>
 80040f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040fa:	4798      	blx	r3
 80040fc:	3501      	adds	r5, #1
 80040fe:	e7f2      	b.n	80040e6 <__libc_init_array+0x1e>
 8004100:	080043d4 	.word	0x080043d4
 8004104:	080043d4 	.word	0x080043d4
 8004108:	080043d4 	.word	0x080043d4
 800410c:	080043d8 	.word	0x080043d8

08004110 <memset>:
 8004110:	4402      	add	r2, r0
 8004112:	4603      	mov	r3, r0
 8004114:	4293      	cmp	r3, r2
 8004116:	d100      	bne.n	800411a <memset+0xa>
 8004118:	4770      	bx	lr
 800411a:	f803 1b01 	strb.w	r1, [r3], #1
 800411e:	e7f9      	b.n	8004114 <memset+0x4>

08004120 <_init>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr

0800412c <_fini>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr
