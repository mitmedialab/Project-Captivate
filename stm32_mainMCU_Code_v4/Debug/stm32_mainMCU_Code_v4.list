
stm32_mainMCU_Code_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c504  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c0  0801c648  0801c648  0002c648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d908  0801d908  0002d908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d910  0801d910  0002d910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d914  0801d914  0002d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d8  20000004  0801d918  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002dc  0801dbf0  000302dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000378  0801dc89  00030378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00029ddc  20000390  0801dc9a  00030390  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002a16c  0801dc9a  0003a16c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030389  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000b83  200300e0  200300e0  00040000  2**2
                  ALLOC
 15 .debug_info   00074a58  00000000  00000000  000303b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ccbf  00000000  00000000  000a4e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000042f0  00000000  00000000  000b1ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003d48  00000000  00000000  000b5dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003a83b  00000000  00000000  000b9b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00047bd1  00000000  00000000  000f4343  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0011f898  00000000  00000000  0013bf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000f0  00000000  00000000  0025b7ac  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011440  00000000  00000000  0025b89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    0000131b  00000000  00000000  0026ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000390 	.word	0x20000390
 800015c:	00000000 	.word	0x00000000
 8000160:	0801c62c 	.word	0x0801c62c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000394 	.word	0x20000394
 800017c:	0801c62c 	.word	0x0801c62c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e58:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e98:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000ebe:	f005 ff95 	bl	8006dec <HAL_ADC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f003 fb02 	bl	80044d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed8:	237f      	movs	r3, #127	; 0x7f
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000edc:	2304      	movs	r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000eea:	f006 f9b9 	bl	8007260 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000ef4:	f003 faec 	bl	80044d0 <Error_Handler>
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20027a7c 	.word	0x20027a7c
 8000f04:	50040000 	.word	0x50040000
 8000f08:	14f00020 	.word	0x14f00020

08000f0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <HAL_ADC_MspInit+0xa4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d13c      	bne.n	8000fa8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f2e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f32:	f7ff ff6b 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff ff68 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f007 fe89 	bl	8008c68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xac>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f82:	2220      	movs	r2, #32
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f8e:	f007 fb2b 	bl	80085e8 <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f98:	f003 fa9a 	bl	80044d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000fa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	50040000 	.word	0x50040000
 8000fb4:	20027ae0 	.word	0x20027ae0
 8000fb8:	40020008 	.word	0x40020008

08000fbc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fca:	f023 0207 	bic.w	r2, r3, #7
 8000fce:	4905      	ldr	r1, [pc, #20]	; (8000fe4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58000400 	.word	0x58000400

08000fe8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_AHB2_GRP1_EnableClock>:
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	43db      	mvns	r3, r3
 8001054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001058:	4013      	ands	r3, r2
 800105a:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800106c:	f000 f846 	bl	80010fc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001070:	4906      	ldr	r1, [pc, #24]	; (800108c <APPE_Init+0x24>)
 8001072:	2000      	movs	r0, #0
 8001074:	f002 fa3c 	bl	80034f0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8001078:	f000 f80a 	bl	8001090 <Init_Debug>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800107c:	2101      	movs	r1, #1
 800107e:	2001      	movs	r0, #1
 8001080:	f019 fefc 	bl	801ae7c <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001084:	f000 f848 	bl	8001118 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001088:	bf00      	nop
}
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200287e8 	.word	0x200287e8

08001090 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else

  GPIO_InitTypeDef gpio_config = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 80010a8:	2303      	movs	r3, #3
 80010aa:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 80010ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010b0:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ffac 	bl	8001010 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f007 fdd2 	bl	8008c68 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff ffbc 	bl	8001042 <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 80010ca:	2318      	movs	r3, #24
 80010cc:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2002      	movs	r0, #2
 80010d0:	f7ff ff9e 	bl	8001010 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <Init_Debug+0x68>)
 80010da:	f007 fdc5 	bl	8008c68 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80010de:	2002      	movs	r0, #2
 80010e0:	f7ff ffaf 	bl	8001042 <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 80010e4:	f005 fc5a 	bl	800699c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80010e8:	f005 fc5e 	bl	80069a8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80010ec:	f005 fc62 	bl	80069b4 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  return;
 80010f0:	bf00      	nop
}
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	48000400 	.word	0x48000400

080010fc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001100:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001104:	f7ff ff70 	bl	8000fe8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001108:	f019 fea6 	bl	801ae58 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800110c:	2004      	movs	r0, #4
 800110e:	f7ff ff55 	bl	8000fbc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001112:	bf00      	nop
}
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800111e:	f011 fcbb 	bl	8012a98 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001122:	2000      	movs	r0, #0
 8001124:	f013 fd6c 	bl	8014c00 <osMutexNew>
 8001128:	4602      	mov	r2, r0
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <appe_Tl_Init+0x70>)
 800112c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2001      	movs	r0, #1
 8001134:	f013 feac 	bl	8014e90 <osSemaphoreNew>
 8001138:	4602      	mov	r2, r0
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <appe_Tl_Init+0x74>)
 800113c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <appe_Tl_Init+0x78>)
 8001140:	2100      	movs	r1, #0
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <appe_Tl_Init+0x7c>)
 8001144:	f013 fa1e 	bl	8014584 <osThreadNew>
 8001148:	4602      	mov	r2, r0
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <appe_Tl_Init+0x80>)
 800114c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <appe_Tl_Init+0x84>)
 8001150:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <appe_Tl_Init+0x88>)
 8001154:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <appe_Tl_Init+0x8c>)
 800115c:	f011 fb62 	bl	8012824 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <appe_Tl_Init+0x90>)
 8001166:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <appe_Tl_Init+0x94>)
 800116a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800116c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001170:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4618      	mov	r0, r3
 8001178:	f011 fdf8 	bl	8012d6c <TL_MM_Init>

  TL_Enable();
 800117c:	f011 fc86 	bl	8012a8c <TL_Enable>

  return;
 8001180:	bf00      	nop
}
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20027b40 	.word	0x20027b40
 800118c:	20027b58 	.word	0x20027b58
 8001190:	0801cb88 	.word	0x0801cb88
 8001194:	080012a1 	.word	0x080012a1
 8001198:	20027b44 	.word	0x20027b44
 800119c:	2003061c 	.word	0x2003061c
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011f1 	.word	0x080011f1
 80011a8:	20030728 	.word	0x20030728
 80011ac:	200300e0 	.word	0x200300e0

080011b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <APPE_SysStatusNot+0x16>
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d008      	beq.n	80011d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80011c4:	e00d      	b.n	80011e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <APPE_SysStatusNot+0x3c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f04f 31ff 	mov.w	r1, #4294967295
 80011ce:	4618      	mov	r0, r3
 80011d0:	f013 fdb0 	bl	8014d34 <osMutexAcquire>
      break;
 80011d4:	e005      	b.n	80011e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <APPE_SysStatusNot+0x3c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f013 fe08 	bl	8014df0 <osMutexRelease>
      break;
 80011e0:	bf00      	nop
  }
  return;
 80011e2:	bf00      	nop
}
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20027b40 	.word	0x20027b40

080011f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	330b      	adds	r3, #11
 80011fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800120a:	d004      	beq.n	8001216 <APPE_SysUserEvtRx+0x26>
 800120c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001210:	4293      	cmp	r3, r2
 8001212:	d003      	beq.n	800121c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001214:	e008      	b.n	8001228 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001216:	f000 f833 	bl	8001280 <APPE_SysEvtReadyProcessing>
         break;
 800121a:	e005      	b.n	8001228 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	789b      	ldrb	r3, [r3, #2]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f805 	bl	8001230 <APPE_SysEvtError>
         break;
 8001226:	bf00      	nop
  }
  return;
 8001228:	bf00      	nop
}
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b7d      	cmp	r3, #125	; 0x7d
 800123e:	d002      	beq.n	8001246 <APPE_SysEvtError+0x16>
 8001240:	2b7e      	cmp	r3, #126	; 0x7e
 8001242:	d006      	beq.n	8001252 <APPE_SysEvtError+0x22>
 8001244:	e00b      	b.n	800125e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <APPE_SysEvtError+0x44>)
 8001248:	2101      	movs	r1, #1
 800124a:	2000      	movs	r0, #0
 800124c:	f004 fcd8 	bl	8005c00 <logApplication>
       break;
 8001250:	e00c      	b.n	800126c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <APPE_SysEvtError+0x48>)
 8001254:	2101      	movs	r1, #1
 8001256:	2000      	movs	r0, #0
 8001258:	f004 fcd2 	bl	8005c00 <logApplication>
       break;
 800125c:	e006      	b.n	800126c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <APPE_SysEvtError+0x4c>)
 8001262:	2101      	movs	r1, #1
 8001264:	2000      	movs	r0, #0
 8001266:	f004 fccb 	bl	8005c00 <logApplication>
       break;
 800126a:	bf00      	nop
  }
  return;
 800126c:	bf00      	nop
}
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0801c660 	.word	0x0801c660
 8001278:	0801c684 	.word	0x0801c684
 800127c:	0801c6a4 	.word	0x0801c6a4

08001280 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001284:	f011 fde6 	bl	8012e54 <TL_TRACES_Init>

//  APP_DBG("1- Initialisation of BLE Stack...");
//  APP_BLE_Init_Dyn_1();
//  APP_DBG("2- Initialisation of OpenThread Stack. FW info :");
  APP_THREAD_Init_Dyn_1();
 8001288:	f017 fff8 	bl	801927c <APP_THREAD_Init_Dyn_1>

//  APP_DBG("3- Start BLE ADV...");
//  APP_BLE_Init_Dyn_2();
//  APP_DBG("4- Configure OpenThread (Channel, PANID, IPv6 stack, ...) and Start it...");
  APP_THREAD_Init_Dyn_2();
 800128c:	f018 f81e 	bl	80192cc <APP_THREAD_Init_Dyn_2>

  APP_THREAD_Init();
 8001290:	f017 fd3a 	bl	8018d08 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001294:	2100      	movs	r1, #0
 8001296:	2001      	movs	r0, #1
 8001298:	f019 fdf0 	bl	801ae7c <UTIL_LPM_SetOffMode>
  return;
 800129c:	bf00      	nop
}
 800129e:	bd80      	pop	{r7, pc}

080012a0 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	2100      	movs	r1, #0
 80012ae:	2001      	movs	r0, #1
 80012b0:	f013 fac0 	bl	8014834 <osThreadFlagsWait>
     shci_user_evt_proc();
 80012b4:	f011 fad2 	bl	801285c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80012b8:	e7f6      	b.n	80012a8 <ShciUserEvtProcess+0x8>
	...

080012bc <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <shci_notify_asynch_evt+0x1c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f013 fa00 	bl	80146d0 <osThreadFlagsSet>
  return;
 80012d0:	bf00      	nop
}
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20027b44 	.word	0x20027b44

080012dc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <shci_cmd_resp_release+0x1c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f013 fed5 	bl	8015098 <osSemaphoreRelease>
  return;
 80012ee:	bf00      	nop
}
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20027b58 	.word	0x20027b58

080012fc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <shci_cmd_resp_wait+0x20>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	4618      	mov	r0, r3
 800130e:	f013 fe5d 	bl	8014fcc <osSemaphoreAcquire>
  return;
 8001312:	bf00      	nop
}
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20027b58 	.word	0x20027b58

08001320 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f011 fd5b 	bl	8012de4 <TL_MM_EvtDone>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001348:	f005 faee 	bl	8006928 <HAL_GetTick>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}

08001352 <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <vApplicationStackOverflowHook+0x24>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <vApplicationStackOverflowHook+0x24>)
 8001376:	701a      	strb	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	200003ac 	.word	0x200003ac

08001388 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <vApplicationMallocFailedHook+0x1c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <vApplicationMallocFailedHook+0x1c>)
 8001398:	701a      	strb	r2, [r3, #0]

}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	200003ac 	.word	0x200003ac

080013a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80013ac:	4a70      	ldr	r2, [pc, #448]	; (8001570 <MX_FREERTOS_Init+0x1c8>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	2001      	movs	r0, #1
 80013b2:	f013 fd6d 	bl	8014e90 <osSemaphoreNew>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <MX_FREERTOS_Init+0x1cc>)
 80013ba:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80013bc:	4a6e      	ldr	r2, [pc, #440]	; (8001578 <MX_FREERTOS_Init+0x1d0>)
 80013be:	2101      	movs	r1, #1
 80013c0:	2001      	movs	r0, #1
 80013c2:	f013 fd65 	bl	8014e90 <osSemaphoreNew>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b6c      	ldr	r3, [pc, #432]	; (800157c <MX_FREERTOS_Init+0x1d4>)
 80013ca:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80013cc:	4a6c      	ldr	r2, [pc, #432]	; (8001580 <MX_FREERTOS_Init+0x1d8>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	2001      	movs	r0, #1
 80013d2:	f013 fd5d 	bl	8014e90 <osSemaphoreNew>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <MX_FREERTOS_Init+0x1dc>)
 80013da:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 80013dc:	4a6a      	ldr	r2, [pc, #424]	; (8001588 <MX_FREERTOS_Init+0x1e0>)
 80013de:	2101      	movs	r1, #1
 80013e0:	2001      	movs	r0, #1
 80013e2:	f013 fd55 	bl	8014e90 <osSemaphoreNew>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <MX_FREERTOS_Init+0x1e4>)
 80013ea:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <MX_FREERTOS_Init+0x1e8>)
 80013ee:	4a69      	ldr	r2, [pc, #420]	; (8001594 <MX_FREERTOS_Init+0x1ec>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	4869      	ldr	r0, [pc, #420]	; (8001598 <MX_FREERTOS_Init+0x1f0>)
 80013f4:	f013 faf6 	bl	80149e4 <osTimerNew>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b68      	ldr	r3, [pc, #416]	; (800159c <MX_FREERTOS_Init+0x1f4>)
 80013fc:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80013fe:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <MX_FREERTOS_Init+0x1f8>)
 8001400:	2200      	movs	r2, #0
 8001402:	2101      	movs	r1, #1
 8001404:	4867      	ldr	r0, [pc, #412]	; (80015a4 <MX_FREERTOS_Init+0x1fc>)
 8001406:	f013 faed 	bl	80149e4 <osTimerNew>
 800140a:	4602      	mov	r2, r0
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <MX_FREERTOS_Init+0x200>)
 800140e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 8001410:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <MX_FREERTOS_Init+0x200>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f241 3188 	movw	r1, #5000	; 0x1388
 8001418:	4618      	mov	r0, r3
 800141a:	f013 fb67 	bl	8014aec <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 800141e:	4a63      	ldr	r2, [pc, #396]	; (80015ac <MX_FREERTOS_Init+0x204>)
 8001420:	216c      	movs	r1, #108	; 0x6c
 8001422:	200a      	movs	r0, #10
 8001424:	f013 fe90 	bl	8015148 <osMessageQueueNew>
 8001428:	4602      	mov	r2, r0
 800142a:	4b61      	ldr	r3, [pc, #388]	; (80015b0 <MX_FREERTOS_Init+0x208>)
 800142c:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 800142e:	4a61      	ldr	r2, [pc, #388]	; (80015b4 <MX_FREERTOS_Init+0x20c>)
 8001430:	2104      	movs	r1, #4
 8001432:	2003      	movs	r0, #3
 8001434:	f013 fe88 	bl	8015148 <osMessageQueueNew>
 8001438:	4602      	mov	r2, r0
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <MX_FREERTOS_Init+0x210>)
 800143c:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 800143e:	4a5f      	ldr	r2, [pc, #380]	; (80015bc <MX_FREERTOS_Init+0x214>)
 8001440:	2106      	movs	r1, #6
 8001442:	2004      	movs	r0, #4
 8001444:	f013 fe80 	bl	8015148 <osMessageQueueNew>
 8001448:	4602      	mov	r2, r0
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <MX_FREERTOS_Init+0x218>)
 800144c:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 800144e:	4a5d      	ldr	r2, [pc, #372]	; (80015c4 <MX_FREERTOS_Init+0x21c>)
 8001450:	2118      	movs	r1, #24
 8001452:	200a      	movs	r0, #10
 8001454:	f013 fe78 	bl	8015148 <osMessageQueueNew>
 8001458:	4602      	mov	r2, r0
 800145a:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <MX_FREERTOS_Init+0x220>)
 800145c:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 800145e:	4a5b      	ldr	r2, [pc, #364]	; (80015cc <MX_FREERTOS_Init+0x224>)
 8001460:	2128      	movs	r1, #40	; 0x28
 8001462:	200a      	movs	r0, #10
 8001464:	f013 fe70 	bl	8015148 <osMessageQueueNew>
 8001468:	4602      	mov	r2, r0
 800146a:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <MX_FREERTOS_Init+0x228>)
 800146c:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 800146e:	4a59      	ldr	r2, [pc, #356]	; (80015d4 <MX_FREERTOS_Init+0x22c>)
 8001470:	2110      	movs	r1, #16
 8001472:	200a      	movs	r0, #10
 8001474:	f013 fe68 	bl	8015148 <osMessageQueueNew>
 8001478:	4602      	mov	r2, r0
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <MX_FREERTOS_Init+0x230>)
 800147c:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 800147e:	4a57      	ldr	r2, [pc, #348]	; (80015dc <MX_FREERTOS_Init+0x234>)
 8001480:	2118      	movs	r1, #24
 8001482:	2003      	movs	r0, #3
 8001484:	f013 fe60 	bl	8015148 <osMessageQueueNew>
 8001488:	4602      	mov	r2, r0
 800148a:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <MX_FREERTOS_Init+0x238>)
 800148c:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 800148e:	4a55      	ldr	r2, [pc, #340]	; (80015e4 <MX_FREERTOS_Init+0x23c>)
 8001490:	2106      	movs	r1, #6
 8001492:	200a      	movs	r0, #10
 8001494:	f013 fe58 	bl	8015148 <osMessageQueueNew>
 8001498:	4602      	mov	r2, r0
 800149a:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <MX_FREERTOS_Init+0x240>)
 800149c:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 800149e:	4a53      	ldr	r2, [pc, #332]	; (80015ec <MX_FREERTOS_Init+0x244>)
 80014a0:	2118      	movs	r1, #24
 80014a2:	200a      	movs	r0, #10
 80014a4:	f013 fe50 	bl	8015148 <osMessageQueueNew>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <MX_FREERTOS_Init+0x248>)
 80014ac:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80014ae:	4a51      	ldr	r2, [pc, #324]	; (80015f4 <MX_FREERTOS_Init+0x24c>)
 80014b0:	2104      	movs	r1, #4
 80014b2:	2001      	movs	r0, #1
 80014b4:	f013 fe48 	bl	8015148 <osMessageQueueNew>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <MX_FREERTOS_Init+0x250>)
 80014bc:	601a      	str	r2, [r3, #0]

  /* creation of msgPasssingUSB_Queue */
  msgPasssingUSB_QueueHandle = osMessageQueueNew (5, 11, &msgPasssingUSB_Queue_attributes);
 80014be:	4a4f      	ldr	r2, [pc, #316]	; (80015fc <MX_FREERTOS_Init+0x254>)
 80014c0:	210b      	movs	r1, #11
 80014c2:	2005      	movs	r0, #5
 80014c4:	f013 fe40 	bl	8015148 <osMessageQueueNew>
 80014c8:	4602      	mov	r2, r0
 80014ca:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <MX_FREERTOS_Init+0x258>)
 80014cc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80014ce:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <MX_FREERTOS_Init+0x25c>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	484d      	ldr	r0, [pc, #308]	; (8001608 <MX_FREERTOS_Init+0x260>)
 80014d4:	f013 f856 	bl	8014584 <osThreadNew>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b4c      	ldr	r3, [pc, #304]	; (800160c <MX_FREERTOS_Init+0x264>)
 80014dc:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80014de:	4a4c      	ldr	r2, [pc, #304]	; (8001610 <MX_FREERTOS_Init+0x268>)
 80014e0:	2100      	movs	r1, #0
 80014e2:	484c      	ldr	r0, [pc, #304]	; (8001614 <MX_FREERTOS_Init+0x26c>)
 80014e4:	f013 f84e 	bl	8014584 <osThreadNew>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <MX_FREERTOS_Init+0x270>)
 80014ec:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80014ee:	4a4b      	ldr	r2, [pc, #300]	; (800161c <MX_FREERTOS_Init+0x274>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	484b      	ldr	r0, [pc, #300]	; (8001620 <MX_FREERTOS_Init+0x278>)
 80014f4:	f013 f846 	bl	8014584 <osThreadNew>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <MX_FREERTOS_Init+0x27c>)
 80014fc:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80014fe:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <MX_FREERTOS_Init+0x280>)
 8001500:	2100      	movs	r1, #0
 8001502:	484a      	ldr	r0, [pc, #296]	; (800162c <MX_FREERTOS_Init+0x284>)
 8001504:	f013 f83e 	bl	8014584 <osThreadNew>
 8001508:	4602      	mov	r2, r0
 800150a:	4b49      	ldr	r3, [pc, #292]	; (8001630 <MX_FREERTOS_Init+0x288>)
 800150c:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 800150e:	4a49      	ldr	r2, [pc, #292]	; (8001634 <MX_FREERTOS_Init+0x28c>)
 8001510:	2100      	movs	r1, #0
 8001512:	4849      	ldr	r0, [pc, #292]	; (8001638 <MX_FREERTOS_Init+0x290>)
 8001514:	f013 f836 	bl	8014584 <osThreadNew>
 8001518:	4602      	mov	r2, r0
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <MX_FREERTOS_Init+0x294>)
 800151c:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 800151e:	4a48      	ldr	r2, [pc, #288]	; (8001640 <MX_FREERTOS_Init+0x298>)
 8001520:	2100      	movs	r1, #0
 8001522:	4848      	ldr	r0, [pc, #288]	; (8001644 <MX_FREERTOS_Init+0x29c>)
 8001524:	f013 f82e 	bl	8014584 <osThreadNew>
 8001528:	4602      	mov	r2, r0
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <MX_FREERTOS_Init+0x2a0>)
 800152c:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 800152e:	4a47      	ldr	r2, [pc, #284]	; (800164c <MX_FREERTOS_Init+0x2a4>)
 8001530:	2100      	movs	r1, #0
 8001532:	4847      	ldr	r0, [pc, #284]	; (8001650 <MX_FREERTOS_Init+0x2a8>)
 8001534:	f013 f826 	bl	8014584 <osThreadNew>
 8001538:	4602      	mov	r2, r0
 800153a:	4b46      	ldr	r3, [pc, #280]	; (8001654 <MX_FREERTOS_Init+0x2ac>)
 800153c:	601a      	str	r2, [r3, #0]

  /* creation of msgPassingUSB_T */
  msgPassingUSB_THandle = osThreadNew(msgPassingUSB, NULL, &msgPassingUSB_T_attributes);
 800153e:	4a46      	ldr	r2, [pc, #280]	; (8001658 <MX_FREERTOS_Init+0x2b0>)
 8001540:	2100      	movs	r1, #0
 8001542:	4846      	ldr	r0, [pc, #280]	; (800165c <MX_FREERTOS_Init+0x2b4>)
 8001544:	f013 f81e 	bl	8014584 <osThreadNew>
 8001548:	4602      	mov	r2, r0
 800154a:	4b45      	ldr	r3, [pc, #276]	; (8001660 <MX_FREERTOS_Init+0x2b8>)
 800154c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_FREERTOS_Init+0x1d4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f013 fd39 	bl	8014fcc <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_FREERTOS_Init+0x1dc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f013 fd33 	bl	8014fcc <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 8001566:	f7ff fd7f 	bl	8001068 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	0801cdf4 	.word	0x0801cdf4
 8001574:	20027c50 	.word	0x20027c50
 8001578:	0801ce04 	.word	0x0801ce04
 800157c:	20028098 	.word	0x20028098
 8001580:	0801ce14 	.word	0x0801ce14
 8001584:	20028090 	.word	0x20028090
 8001588:	0801ce24 	.word	0x0801ce24
 800158c:	20027c5c 	.word	0x20027c5c
 8001590:	0801cdd4 	.word	0x0801cdd4
 8001594:	20000c68 	.word	0x20000c68
 8001598:	08003c55 	.word	0x08003c55
 800159c:	20027c3c 	.word	0x20027c3c
 80015a0:	0801cde4 	.word	0x0801cde4
 80015a4:	080016e9 	.word	0x080016e9
 80015a8:	200280a8 	.word	0x200280a8
 80015ac:	0801cccc 	.word	0x0801cccc
 80015b0:	200280a4 	.word	0x200280a4
 80015b4:	0801cce4 	.word	0x0801cce4
 80015b8:	20027c58 	.word	0x20027c58
 80015bc:	0801ccfc 	.word	0x0801ccfc
 80015c0:	20028088 	.word	0x20028088
 80015c4:	0801cd14 	.word	0x0801cd14
 80015c8:	20027c60 	.word	0x20027c60
 80015cc:	0801cd2c 	.word	0x0801cd2c
 80015d0:	20027c54 	.word	0x20027c54
 80015d4:	0801cd44 	.word	0x0801cd44
 80015d8:	20027c44 	.word	0x20027c44
 80015dc:	0801cd5c 	.word	0x0801cd5c
 80015e0:	20027c68 	.word	0x20027c68
 80015e4:	0801cd74 	.word	0x0801cd74
 80015e8:	20027b48 	.word	0x20027b48
 80015ec:	0801cd8c 	.word	0x0801cd8c
 80015f0:	20027b4c 	.word	0x20027b4c
 80015f4:	0801cda4 	.word	0x0801cda4
 80015f8:	20027c64 	.word	0x20027c64
 80015fc:	0801cdbc 	.word	0x0801cdbc
 8001600:	20027c4c 	.word	0x20027c4c
 8001604:	0801cbac 	.word	0x0801cbac
 8001608:	08001665 	.word	0x08001665
 800160c:	20027c30 	.word	0x20027c30
 8001610:	0801cbd0 	.word	0x0801cbd0
 8001614:	080041f5 	.word	0x080041f5
 8001618:	20027c40 	.word	0x20027c40
 800161c:	0801cbf4 	.word	0x0801cbf4
 8001620:	080044e1 	.word	0x080044e1
 8001624:	2002808c 	.word	0x2002808c
 8001628:	0801cc18 	.word	0x0801cc18
 800162c:	08003a4d 	.word	0x08003a4d
 8001630:	200280ac 	.word	0x200280ac
 8001634:	0801cc3c 	.word	0x0801cc3c
 8001638:	08003bc5 	.word	0x08003bc5
 800163c:	2002809c 	.word	0x2002809c
 8001640:	0801cc60 	.word	0x0801cc60
 8001644:	08003dcd 	.word	0x08003dcd
 8001648:	20028094 	.word	0x20028094
 800164c:	0801cc84 	.word	0x0801cc84
 8001650:	080016fd 	.word	0x080016fd
 8001654:	20027c34 	.word	0x20027c34
 8001658:	0801cca8 	.word	0x0801cca8
 800165c:	08001675 	.word	0x08001675
 8001660:	20027c38 	.word	0x20027c38

08001664 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800166c:	2001      	movs	r0, #1
 800166e:	f013 f975 	bl	801495c <osDelay>
 8001672:	e7fb      	b.n	800166c <DefaultTask+0x8>

08001674 <msgPassingUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_msgPassingUSB */
__weak void msgPassingUSB(void *argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
	struct USB_msgPass receivedPacket;
  /* Infinite loop */
  for(;;)
  {
    while(1){
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <msgPassingUSB+0x64>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	f107 010c 	add.w	r1, r7, #12
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	2200      	movs	r2, #0
 800168a:	f013 fe57 	bl	801533c <osMessageQueueGet>

    	if(receivedPacket.len == 6){
 800168e:	7b3b      	ldrb	r3, [r7, #12]
 8001690:	2b06      	cmp	r3, #6
 8001692:	d10e      	bne.n	80016b2 <msgPassingUSB+0x3e>
//    		  logReceivedMessage.blinkEnabled = Buf[2] - '0';
//    		  logReceivedMessage.tempEnabled = Buf[3] - '0';
//    		  logReceivedMessage.intertialEnabled = Buf[4] - '0';
//    		  logReceivedMessage.positionEnabled  = Buf[5] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 6, &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	1c58      	adds	r0, r3, #1
 800169a:	2301      	movs	r3, #1
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2303      	movs	r3, #3
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <msgPassingUSB+0x68>)
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <msgPassingUSB+0x6c>)
 80016aa:	2106      	movs	r1, #6
 80016ac:	f018 f846 	bl	801973c <APP_THREAD_SendCoapMsg>
 80016b0:	e7e4      	b.n	800167c <msgPassingUSB+0x8>
    	  }
    	  else if(receivedPacket.len == 1){
 80016b2:	7b3b      	ldrb	r3, [r7, #12]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d1e1      	bne.n	800167c <msgPassingUSB+0x8>
//    		  lightsSimpleReceivedMessage = Buf[0] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 4, &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	1c58      	adds	r0, r3, #1
 80016be:	2301      	movs	r3, #1
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	2303      	movs	r3, #3
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <msgPassingUSB+0x70>)
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <msgPassingUSB+0x6c>)
 80016ce:	2104      	movs	r1, #4
 80016d0:	f018 f834 	bl	801973c <APP_THREAD_SendCoapMsg>
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 80016d4:	e7d2      	b.n	800167c <msgPassingUSB+0x8>
 80016d6:	bf00      	nop
 80016d8:	20027c4c 	.word	0x20027c4c
 80016dc:	0801c854 	.word	0x0801c854
 80016e0:	200289fc 	.word	0x200289fc
 80016e4:	0801c85c 	.word	0x0801c85c

080016e8 <watchDogReset>:
  /* USER CODE END msgPassingUSB */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END watchDogReset */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	2100      	movs	r1, #0
 800170a:	2001      	movs	r0, #1
 800170c:	f013 f892 	bl	8014834 <osThreadFlagsWait>
 8001710:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f3      	beq.n	8001704 <BlinkTask+0x8>
			// tell other threads that blink has been activated
//todo: the oswaitforever option of getting the queue handle should be used or else the system could get messed up down the line
			//not sure why its not working....
//			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);

			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, 1000);
 800171c:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <BlinkTask+0x1bc>)
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001724:	2200      	movs	r2, #0
 8001726:	4965      	ldr	r1, [pc, #404]	; (80018bc <BlinkTask+0x1c0>)
 8001728:	f013 fe08 	bl	801533c <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 800172c:	4b63      	ldr	r3, [pc, #396]	; (80018bc <BlinkTask+0x1c0>)
 800172e:	2201      	movs	r2, #1
 8001730:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001732:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <BlinkTask+0x1bc>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	2200      	movs	r2, #0
 800173a:	4960      	ldr	r1, [pc, #384]	; (80018bc <BlinkTask+0x1c0>)
 800173c:	f013 fd8a 	bl	8015254 <osMessageQueuePut>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8001740:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001744:	495e      	ldr	r1, [pc, #376]	; (80018c0 <BlinkTask+0x1c4>)
 8001746:	485f      	ldr	r0, [pc, #380]	; (80018c4 <BlinkTask+0x1c8>)
 8001748:	f005 fc9a 	bl	8007080 <HAL_ADC_Start_DMA>

			// start timer for ADC to sample at 1kHz
//			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_float_buffer, sizeof(blink_float_buffer));

			// start  PWM channel for blink LED
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800174c:	2104      	movs	r1, #4
 800174e:	485e      	ldr	r0, [pc, #376]	; (80018c8 <BlinkTask+0x1cc>)
 8001750:	f00c ff6a 	bl	800e628 <HAL_TIM_PWM_Start>

			// start timer
			HAL_TIM_Base_Start(&htim2);
 8001754:	485c      	ldr	r0, [pc, #368]	; (80018c8 <BlinkTask+0x1cc>)
 8001756:	f00c fde9 	bl	800e32c <HAL_TIM_Base_Start>
			//      is passed by reference via queue to masterThread for packetization

			while (1) {

				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 800175a:	f04f 32ff 	mov.w	r2, #4294967295
 800175e:	2100      	movs	r1, #0
 8001760:	2006      	movs	r0, #6
 8001762:	f013 f867 	bl	8014834 <osThreadFlagsWait>
 8001766:	60f8      	str	r0, [r7, #12]
				blink_ptr_copy = blink_ptr;
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <BlinkTask+0x1d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <BlinkTask+0x1d4>)
 800176e:	6013      	str	r3, [r2, #0]

				if ((evt & 0x00000004U) == 0x00000004U) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d065      	beq.n	8001846 <BlinkTask+0x14a>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <BlinkTask+0x1d8>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d108      	bne.n	800179c <BlinkTask+0xa0>
						previousTick_ms = HAL_GetTick();
 800178a:	f005 f8cd 	bl	8006928 <HAL_GetTick>
 800178e:	ee07 0a90 	vmov	s15, r0
 8001792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001796:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <BlinkTask+0x1d8>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 800179c:	f005 f8c4 	bl	8006928 <HAL_GetTick>
 80017a0:	ee07 0a90 	vmov	s15, r0
 80017a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <BlinkTask+0x1d8>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <BlinkTask+0x1dc>)
 80017bc:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80017c0:	4b46      	ldr	r3, [pc, #280]	; (80018dc <BlinkTask+0x1e0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e03a      	b.n	800183e <BlinkTask+0x142>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_ptr_copy[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <BlinkTask+0x1d4>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <BlinkTask+0x1e0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2164      	movs	r1, #100	; 0x64
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	4a41      	ldr	r2, [pc, #260]	; (80018e0 <BlinkTask+0x1e4>)
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	2364      	movs	r3, #100	; 0x64
 80017e0:	461a      	mov	r2, r3
 80017e2:	f019 fe69 	bl	801b4b8 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <BlinkTask+0x1d8>)
 80017e8:	ed93 7a00 	vldr	s14, [r3]
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <BlinkTask+0x1dc>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fa:	ee17 2a90 	vmov	r2, s15
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <BlinkTask+0x1e4>)
 8001800:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <BlinkTask+0x1e8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a36      	ldr	r2, [pc, #216]	; (80018e0 <BlinkTask+0x1e4>)
 8001808:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <BlinkTask+0x1e4>)
 800180c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <BlinkTask+0x1d8>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <BlinkTask+0x1e8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	4a30      	ldr	r2, [pc, #192]	; (80018e4 <BlinkTask+0x1e8>)
 8001824:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <BlinkTask+0x1ec>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	2300      	movs	r3, #0
 800182c:	2200      	movs	r2, #0
 800182e:	492c      	ldr	r1, [pc, #176]	; (80018e0 <BlinkTask+0x1e4>)
 8001830:	f013 fd10 	bl	8015254 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <BlinkTask+0x1e0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a28      	ldr	r2, [pc, #160]	; (80018dc <BlinkTask+0x1e0>)
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <BlinkTask+0x1e0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d9c0      	bls.n	80017c8 <BlinkTask+0xcc>
				}



				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d084      	beq.n	800175a <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <BlinkTask+0x1c8>)
 8001852:	f005 fc99 	bl	8007188 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001856:	2104      	movs	r1, #4
 8001858:	481b      	ldr	r0, [pc, #108]	; (80018c8 <BlinkTask+0x1cc>)
 800185a:	f00c ffbf 	bl	800e7dc <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 800185e:	481a      	ldr	r0, [pc, #104]	; (80018c8 <BlinkTask+0x1cc>)
 8001860:	f00c fdaa 	bl	800e3b8 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <BlinkTask+0x1d8>)
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <BlinkTask+0x1bc>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	2200      	movs	r2, #0
 8001876:	4911      	ldr	r1, [pc, #68]	; (80018bc <BlinkTask+0x1c0>)
 8001878:	f013 fd60 	bl	801533c <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <BlinkTask+0x1c0>)
 800187e:	2200      	movs	r2, #0
 8001880:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <BlinkTask+0x1c0>)
 8001884:	795b      	ldrb	r3, [r3, #5]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d104      	bne.n	8001894 <BlinkTask+0x198>
						osSemaphoreRelease(locNotifyHandle);
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <BlinkTask+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f013 fc02 	bl	8015098 <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <BlinkTask+0x1bc>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	2200      	movs	r2, #0
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <BlinkTask+0x1c0>)
 800189e:	f013 fcd9 	bl	8015254 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <BlinkTask+0x1ec>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f013 fdba 	bl	8015420 <osMessageQueueReset>

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 80018ac:	200e      	movs	r0, #14
 80018ae:	f012 ff71 	bl	8014794 <osThreadFlagsClear>

					break;
 80018b2:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80018b4:	e726      	b.n	8001704 <BlinkTask+0x8>
 80018b6:	bf00      	nop
 80018b8:	20027c64 	.word	0x20027c64
 80018bc:	200280b4 	.word	0x200280b4
 80018c0:	2000041c 	.word	0x2000041c
 80018c4:	20027a7c 	.word	0x20027a7c
 80018c8:	20028858 	.word	0x20028858
 80018cc:	200280b0 	.word	0x200280b0
 80018d0:	200280bc 	.word	0x200280bc
 80018d4:	20000bf4 	.word	0x20000bf4
 80018d8:	20000bf8 	.word	0x20000bf8
 80018dc:	20000bf0 	.word	0x20000bf0
 80018e0:	200003b0 	.word	0x200003b0
 80018e4:	20000bec 	.word	0x20000bec
 80018e8:	200280a4 	.word	0x200280a4
 80018ec:	20028098 	.word	0x20028098

080018f0 <HAL_ADC_ConvCpltCallback>:
//
//volatile uint8_t low_adc_sample = 0;
//volatile uint8_t random_sample = 0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
//	if(low_adc_sample){
//		HAL_ADC_Stop(&hadc1);
//		low_adc_sample = 0;
//		return;
//	}
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_ADC_ConvCpltCallback+0x24>)
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_ADC_ConvCpltCallback+0x28>)
 80018fc:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2104      	movs	r1, #4
 8001904:	4618      	mov	r0, r3
 8001906:	f012 fee3 	bl	80146d0 <osThreadFlagsSet>

}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200280b0 	.word	0x200280b0
 8001918:	20000804 	.word	0x20000804
 800191c:	20027c34 	.word	0x20027c34

08001920 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800192c:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2104      	movs	r1, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f012 fecb 	bl	80146d0 <osThreadFlagsSet>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200280b0 	.word	0x200280b0
 8001948:	2000041c 	.word	0x2000041c
 800194c:	20027c34 	.word	0x20027c34

08001950 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
//	}
//	pwm_tracker++;

//	low_adc_sample = 1;
//	HAL_ADC_Start(&hadc1);
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_AHB2_GRP1_EnableClock>:
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4313      	orrs	r3, r2
 800197a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001988:	68fb      	ldr	r3, [r7, #12]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_COMP1_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_COMP1_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_COMP1_Init+0x58>)
 80019a6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019d0:	2231      	movs	r2, #49	; 0x31
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_COMP1_Init+0x50>)
 80019d6:	f006 fae7 	bl	8007fa8 <HAL_COMP_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f002 fd76 	bl	80044d0 <Error_Handler>
  }

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200280c0 	.word	0x200280c0
 80019ec:	40010200 	.word	0x40010200
 80019f0:	00c00010 	.word	0x00c00010

080019f4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_COMP_MspInit+0x5c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d117      	bne.n	8001a46 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff ffa4 	bl	8001964 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a20:	2303      	movs	r3, #3
 8001a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f007 f919 	bl	8008c68 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2105      	movs	r1, #5
 8001a3a:	2016      	movs	r0, #22
 8001a3c:	f006 fd7d 	bl	800853a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001a40:	2016      	movs	r0, #22
 8001a42:	f006 fd94 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40010200 	.word	0x40010200

08001a54 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d02a      	beq.n	8001ac4 <process_pulse_lengths+0x70>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3302      	adds	r3, #2
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d025      	beq.n	8001ac4 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	bf8c      	ite	hi
 8001a86:	2301      	movhi	r3, #1
 8001a88:	2300      	movls	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d10e      	bne.n	8001ab8 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	005a      	lsls	r2, r3, #1
 8001aa0:	7efb      	ldrb	r3, [r7, #27]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <process_pulse_lengths+0xd0>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e002      	b.n	8001abe <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 8001ab8:	7efa      	ldrb	r2, [r7, #27]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db26      	blt.n	8001b18 <process_pulse_lengths+0xc4>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	dc22      	bgt.n	8001b18 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f003 0203 	and.w	r2, r3, #3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 8001aee:	e013      	b.n	8001b18 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4413      	add	r3, r2
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	69f9      	ldr	r1, [r7, #28]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4291      	cmp	r1, r2
 8001b08:	d101      	bne.n	8001b0e <process_pulse_lengths+0xba>
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	e001      	b.n	8001b12 <process_pulse_lengths+0xbe>
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	441a      	add	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3724      	adds	r7, #36	; 0x24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	0801ce34 	.word	0x0801ce34

08001b28 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	dd06      	ble.n	8001b48 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	e001      	b.n	8001b4c <get_phase+0x24>
    } else {
        return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <reset+0x30>)
 8001b72:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	427a0000 	.word	0x427a0000

08001b8c <LL_AHB1_GRP1_EnableClock>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bc2:	2004      	movs	r0, #4
 8001bc4:	f7ff ffe2 	bl	8001b8c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff ffdf 	bl	8001b8c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	200b      	movs	r0, #11
 8001bd4:	f006 fcb1 	bl	800853a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bd8:	200b      	movs	r0, #11
 8001bda:	f006 fcc8 	bl	800856e <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	603a      	str	r2, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <IMU_begin+0x60>)
 8001bfc:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <IMU_begin+0x64>)
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <IMU_begin+0x68>)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001c0a:	f000 fa85 	bl	8002118 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <IMU_begin+0x6c>)
 8001c10:	22f9      	movs	r2, #249	; 0xf9
 8001c12:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <IMU_begin+0x6c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fc7e 	bl	8002520 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001c24:	f000 fbd4 	bl	80023d0 <IMU_receivePacket>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <IMU_begin+0x6c>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2bf8      	cmp	r3, #248	; 0xf8
 8001c34:	d101      	bne.n	8001c3a <IMU_begin+0x56>
		{
			return (true);
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000006 	.word	0x20000006
 8001c48:	20028142 	.word	0x20028142
 8001c4c:	20028208 	.word	0x20028208
 8001c50:	20028180 	.word	0x20028180

08001c54 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <IMU_dataAvailable+0x64>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d00d      	beq.n	8001c7c <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <IMU_dataAvailable+0x68>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <IMU_dataAvailable+0x64>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f007 f96b 	bl	8008f48 <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <IMU_dataAvailable+0x28>
			return (false);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e01b      	b.n	8001cb4 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001c7c:	f000 fba8 	bl	80023d0 <IMU_receivePacket>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d015      	beq.n	8001cb2 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <IMU_dataAvailable+0x6c>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d107      	bne.n	8001ca0 <IMU_dataAvailable+0x4c>
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <IMU_dataAvailable+0x70>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2bfb      	cmp	r3, #251	; 0xfb
 8001c96:	d103      	bne.n	8001ca0 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001c98:	f000 f832 	bl	8001d00 <IMU_parseInputReport>
			return (true);
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e009      	b.n	8001cb4 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <IMU_dataAvailable+0x6c>)
 8001ca2:	789b      	ldrb	r3, [r3, #2]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d103      	bne.n	8001cb2 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001caa:	f000 f80d 	bl	8001cc8 <IMU_parseCommandReport>
			return (true);
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20028142 	.word	0x20028142
 8001cbc:	20028208 	.word	0x20028208
 8001cc0:	200280f0 	.word	0x200280f0
 8001cc4:	20028180 	.word	0x20028180

08001cc8 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <IMU_parseCommandReport+0x30>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2bf1      	cmp	r3, #241	; 0xf1
 8001cd4:	d109      	bne.n	8001cea <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <IMU_parseCommandReport+0x30>)
 8001cd8:	789b      	ldrb	r3, [r3, #2]
 8001cda:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b07      	cmp	r3, #7
 8001ce0:	d103      	bne.n	8001cea <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <IMU_parseCommandReport+0x30>)
 8001ce4:	795a      	ldrb	r2, [r3, #5]
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <IMU_parseCommandReport+0x34>)
 8001ce8:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20028180 	.word	0x20028180
 8001cfc:	20028233 	.word	0x20028233

08001d00 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001d06:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <IMU_parseInputReport+0x260>)
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	4b94      	ldr	r3, [pc, #592]	; (8001f60 <IMU_parseInputReport+0x260>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001d18:	8a3b      	ldrh	r3, [r7, #16]
 8001d1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d1e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001d20:	8a3b      	ldrh	r3, [r7, #16]
 8001d22:	3b04      	subs	r3, #4
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001d28:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	061a      	lsls	r2, r3, #24
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d30:	78db      	ldrb	r3, [r3, #3]
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d40:	7852      	ldrb	r2, [r2, #1]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	4a88      	ldr	r2, [pc, #544]	; (8001f68 <IMU_parseInputReport+0x268>)
 8001d46:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001d48:	4b86      	ldr	r3, [pc, #536]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d4a:	79db      	ldrb	r3, [r3, #7]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001d52:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d54:	7a9b      	ldrb	r3, [r3, #10]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	4b82      	ldr	r3, [pc, #520]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d5c:	7a5b      	ldrb	r3, [r3, #9]
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001d66:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d68:	7b1b      	ldrb	r3, [r3, #12]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d70:	7adb      	ldrb	r3, [r3, #11]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001d7a:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d7c:	7b9b      	ldrb	r3, [r3, #14]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001d84:	7b5b      	ldrb	r3, [r3, #13]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001d92:	2300      	movs	r3, #0
 8001d94:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001d96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d9a:	3b05      	subs	r3, #5
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	dd09      	ble.n	8001db4 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001da0:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001da2:	7c1b      	ldrb	r3, [r3, #16]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001daa:	7bdb      	ldrb	r3, [r3, #15]
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001db4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001db8:	3b05      	subs	r3, #5
 8001dba:	2b0b      	cmp	r3, #11
 8001dbc:	dd09      	ble.n	8001dd2 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001dbe:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001dc0:	7c9b      	ldrb	r3, [r3, #18]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	b21a      	sxth	r2, r3
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001dc8:	7c5b      	ldrb	r3, [r3, #17]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001dd2:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001dd4:	795b      	ldrb	r3, [r3, #5]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d10d      	bne.n	8001df6 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <IMU_parseInputReport+0x26c>)
 8001de0:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001de2:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <IMU_parseInputReport+0x270>)
 8001de4:	89bb      	ldrh	r3, [r7, #12]
 8001de6:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001de8:	4a62      	ldr	r2, [pc, #392]	; (8001f74 <IMU_parseInputReport+0x274>)
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001dee:	4a62      	ldr	r2, [pc, #392]	; (8001f78 <IMU_parseInputReport+0x278>)
 8001df0:	893b      	ldrh	r3, [r7, #8]
 8001df2:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001df4:	e16a      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001df6:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d10d      	bne.n	8001e1a <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b5e      	ldr	r3, [pc, #376]	; (8001f7c <IMU_parseInputReport+0x27c>)
 8001e04:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001e06:	4a5e      	ldr	r2, [pc, #376]	; (8001f80 <IMU_parseInputReport+0x280>)
 8001e08:	89bb      	ldrh	r3, [r7, #12]
 8001e0a:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001e0c:	4a5d      	ldr	r2, [pc, #372]	; (8001f84 <IMU_parseInputReport+0x284>)
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001e12:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <IMU_parseInputReport+0x288>)
 8001e14:	893b      	ldrh	r3, [r7, #8]
 8001e16:	8013      	strh	r3, [r2, #0]
}
 8001e18:	e158      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001e1a:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001e1c:	795b      	ldrb	r3, [r3, #5]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d10d      	bne.n	8001e3e <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <IMU_parseInputReport+0x28c>)
 8001e28:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001e2a:	4a59      	ldr	r2, [pc, #356]	; (8001f90 <IMU_parseInputReport+0x290>)
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001e30:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <IMU_parseInputReport+0x294>)
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <IMU_parseInputReport+0x298>)
 8001e38:	893b      	ldrh	r3, [r7, #8]
 8001e3a:	8013      	strh	r3, [r2, #0]
}
 8001e3c:	e146      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001e40:	795b      	ldrb	r3, [r3, #5]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d10d      	bne.n	8001e62 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <IMU_parseInputReport+0x29c>)
 8001e4c:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001e4e:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <IMU_parseInputReport+0x2a0>)
 8001e50:	89bb      	ldrh	r3, [r7, #12]
 8001e52:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001e54:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <IMU_parseInputReport+0x2a4>)
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001e5a:	4a53      	ldr	r2, [pc, #332]	; (8001fa8 <IMU_parseInputReport+0x2a8>)
 8001e5c:	893b      	ldrh	r3, [r7, #8]
 8001e5e:	8013      	strh	r3, [r2, #0]
}
 8001e60:	e134      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001e64:	795b      	ldrb	r3, [r3, #5]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d003      	beq.n	8001e72 <IMU_parseInputReport+0x172>
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001e6c:	795b      	ldrb	r3, [r3, #5]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d166      	bne.n	8001f40 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001e72:	f004 fd59 	bl	8006928 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <IMU_parseInputReport+0x2ac>)
 8001e7a:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001e7c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e80:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <IMU_parseInputReport+0x2b0>)
 8001e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f000 f964 	bl	8002158 <IMU_qToFloat>
 8001e90:	eef0 7a40 	vmov.f32	s15, s0
 8001e94:	4b45      	ldr	r3, [pc, #276]	; (8001fac <IMU_parseInputReport+0x2ac>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001e9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <IMU_parseInputReport+0x2b0>)
 8001ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 f955 	bl	8002158 <IMU_qToFloat>
 8001eae:	eef0 7a40 	vmov.f32	s15, s0
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <IMU_parseInputReport+0x2ac>)
 8001eb4:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001eb8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <IMU_parseInputReport+0x2b0>)
 8001ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 f946 	bl	8002158 <IMU_qToFloat>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <IMU_parseInputReport+0x2ac>)
 8001ed2:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001ed6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001eda:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <IMU_parseInputReport+0x2b0>)
 8001edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f000 f937 	bl	8002158 <IMU_qToFloat>
 8001eea:	eef0 7a40 	vmov.f32	s15, s0
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <IMU_parseInputReport+0x2ac>)
 8001ef0:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001ef4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ef8:	210c      	movs	r1, #12
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f92c 	bl	8002158 <IMU_qToFloat>
 8001f00:	eef0 7a40 	vmov.f32	s15, s0
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <IMU_parseInputReport+0x2ac>)
 8001f06:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <IMU_parseInputReport+0x2b4>)
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2200      	movs	r2, #0
 8001f12:	4926      	ldr	r1, [pc, #152]	; (8001fac <IMU_parseInputReport+0x2ac>)
 8001f14:	f013 f99e 	bl	8015254 <osMessageQueuePut>
		quatAccuracy = status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <IMU_parseInputReport+0x2b8>)
 8001f1e:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <IMU_parseInputReport+0x2bc>)
 8001f22:	89bb      	ldrh	r3, [r7, #12]
 8001f24:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001f26:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <IMU_parseInputReport+0x2c0>)
 8001f28:	897b      	ldrh	r3, [r7, #10]
 8001f2a:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001f2c:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <IMU_parseInputReport+0x2c4>)
 8001f2e:	893b      	ldrh	r3, [r7, #8]
 8001f30:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <IMU_parseInputReport+0x2c8>)
 8001f34:	8afb      	ldrh	r3, [r7, #22]
 8001f36:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001f38:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <IMU_parseInputReport+0x2cc>)
 8001f3a:	8abb      	ldrh	r3, [r7, #20]
 8001f3c:	8013      	strh	r3, [r2, #0]
}
 8001f3e:	e0c5      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <IMU_parseInputReport+0x264>)
 8001f42:	795b      	ldrb	r3, [r3, #5]
 8001f44:	2b11      	cmp	r3, #17
 8001f46:	d147      	bne.n	8001fd8 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001f48:	f004 fcee 	bl	8006928 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <IMU_parseInputReport+0x2d0>)
 8001f50:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <IMU_parseInputReport+0x2d0>)
 8001f54:	893b      	ldrh	r3, [r7, #8]
 8001f56:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001f58:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <IMU_parseInputReport+0x2d4>)
 8001f5a:	893b      	ldrh	r3, [r7, #8]
 8001f5c:	8013      	strh	r3, [r2, #0]
}
 8001f5e:	e0b5      	b.n	80020cc <IMU_parseInputReport+0x3cc>
 8001f60:	200280f0 	.word	0x200280f0
 8001f64:	20028180 	.word	0x20028180
 8001f68:	2002810c 	.word	0x2002810c
 8001f6c:	20028248 	.word	0x20028248
 8001f70:	20028230 	.word	0x20028230
 8001f74:	2002824c 	.word	0x2002824c
 8001f78:	20028148 	.word	0x20028148
 8001f7c:	20028144 	.word	0x20028144
 8001f80:	20028116 	.word	0x20028116
 8001f84:	20028234 	.word	0x20028234
 8001f88:	20028172 	.word	0x20028172
 8001f8c:	20028174 	.word	0x20028174
 8001f90:	20028176 	.word	0x20028176
 8001f94:	2002813e 	.word	0x2002813e
 8001f98:	2002813c 	.word	0x2002813c
 8001f9c:	200280f4 	.word	0x200280f4
 8001fa0:	20028140 	.word	0x20028140
 8001fa4:	20028236 	.word	0x20028236
 8001fa8:	20028146 	.word	0x20028146
 8001fac:	20028158 	.word	0x20028158
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	20027c68 	.word	0x20027c68
 8001fb8:	20028112 	.word	0x20028112
 8001fbc:	2002824a 	.word	0x2002824a
 8001fc0:	20028170 	.word	0x20028170
 8001fc4:	200280ec 	.word	0x200280ec
 8001fc8:	20028108 	.word	0x20028108
 8001fcc:	2002814a 	.word	0x2002814a
 8001fd0:	200280f8 	.word	0x200280f8
 8001fd4:	2002824e 	.word	0x2002824e
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 8001fda:	795b      	ldrb	r3, [r3, #5]
 8001fdc:	2b13      	cmp	r3, #19
 8001fde:	d10d      	bne.n	8001ffc <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001fe0:	f004 fca2 	bl	8006928 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <IMU_parseInputReport+0x3d8>)
 8001fe8:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 8001fec:	7a5a      	ldrb	r2, [r3, #9]
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <IMU_parseInputReport+0x3d8>)
 8001ff0:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001ff2:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 8001ff4:	7a5a      	ldrb	r2, [r3, #9]
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <IMU_parseInputReport+0x3dc>)
 8001ff8:	701a      	strb	r2, [r3, #0]
}
 8001ffa:	e067      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 8001ffe:	795b      	ldrb	r3, [r3, #5]
 8002000:	2b1e      	cmp	r3, #30
 8002002:	d12b      	bne.n	800205c <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8002004:	f004 fc90 	bl	8006928 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <IMU_parseInputReport+0x3e0>)
 800200c:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800200e:	2300      	movs	r3, #0
 8002010:	74fb      	strb	r3, [r7, #19]
 8002012:	e00c      	b.n	800202e <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	f103 020b 	add.w	r2, r3, #11
 800201a:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <IMU_parseInputReport+0x3e4>)
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	440b      	add	r3, r1
 8002022:	492c      	ldr	r1, [pc, #176]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 8002024:	5c8a      	ldrb	r2, [r1, r2]
 8002026:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	3301      	adds	r3, #1
 800202c:	74fb      	strb	r3, [r7, #19]
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	2b08      	cmp	r3, #8
 8002032:	d9ef      	bls.n	8002014 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 8002036:	7a9a      	ldrb	r2, [r3, #10]
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <IMU_parseInputReport+0x3e8>)
 800203a:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <IMU_parseInputReport+0x3e4>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <IMU_parseInputReport+0x3e0>)
 8002042:	6810      	ldr	r0, [r2, #0]
 8002044:	6851      	ldr	r1, [r2, #4]
 8002046:	c303      	stmia	r3!, {r0, r1}
 8002048:	7a12      	ldrb	r2, [r2, #8]
 800204a:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <IMU_parseInputReport+0x3ec>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	4922      	ldr	r1, [pc, #136]	; (80020e0 <IMU_parseInputReport+0x3e0>)
 8002056:	f013 f8fd 	bl	8015254 <osMessageQueuePut>
}
 800205a:	e037      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 800205e:	795b      	ldrb	r3, [r3, #5]
 8002060:	2b14      	cmp	r3, #20
 8002062:	d109      	bne.n	8002078 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <IMU_parseInputReport+0x3f0>)
 8002066:	89bb      	ldrh	r3, [r7, #12]
 8002068:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 800206a:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <IMU_parseInputReport+0x3f4>)
 800206c:	897b      	ldrh	r3, [r7, #10]
 800206e:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8002070:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <IMU_parseInputReport+0x3f8>)
 8002072:	893b      	ldrh	r3, [r7, #8]
 8002074:	8013      	strh	r3, [r2, #0]
}
 8002076:	e029      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 800207a:	795b      	ldrb	r3, [r3, #5]
 800207c:	2b15      	cmp	r3, #21
 800207e:	d109      	bne.n	8002094 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <IMU_parseInputReport+0x3fc>)
 8002082:	89bb      	ldrh	r3, [r7, #12]
 8002084:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8002086:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <IMU_parseInputReport+0x400>)
 8002088:	897b      	ldrh	r3, [r7, #10]
 800208a:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <IMU_parseInputReport+0x404>)
 800208e:	893b      	ldrh	r3, [r7, #8]
 8002090:	8013      	strh	r3, [r2, #0]
}
 8002092:	e01b      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 8002096:	795b      	ldrb	r3, [r3, #5]
 8002098:	2b16      	cmp	r3, #22
 800209a:	d109      	bne.n	80020b0 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 800209c:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <IMU_parseInputReport+0x408>)
 800209e:	89bb      	ldrh	r3, [r7, #12]
 80020a0:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <IMU_parseInputReport+0x40c>)
 80020a4:	897b      	ldrh	r3, [r7, #10]
 80020a6:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <IMU_parseInputReport+0x410>)
 80020aa:	893b      	ldrh	r3, [r7, #8]
 80020ac:	8013      	strh	r3, [r2, #0]
}
 80020ae:	e00d      	b.n	80020cc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 80020b2:	795b      	ldrb	r3, [r3, #5]
 80020b4:	2bf1      	cmp	r3, #241	; 0xf1
 80020b6:	d109      	bne.n	80020cc <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 80020ba:	79db      	ldrb	r3, [r3, #7]
 80020bc:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b07      	cmp	r3, #7
 80020c2:	d103      	bne.n	80020cc <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <IMU_parseInputReport+0x3d4>)
 80020c6:	7a9a      	ldrb	r2, [r3, #10]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <IMU_parseInputReport+0x414>)
 80020ca:	701a      	strb	r2, [r3, #0]
}
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20028180 	.word	0x20028180
 80020d8:	20028100 	.word	0x20028100
 80020dc:	2002817a 	.word	0x2002817a
 80020e0:	20028238 	.word	0x20028238
 80020e4:	20028154 	.word	0x20028154
 80020e8:	20028232 	.word	0x20028232
 80020ec:	20027c44 	.word	0x20027c44
 80020f0:	20028178 	.word	0x20028178
 80020f4:	20028152 	.word	0x20028152
 80020f8:	20028202 	.word	0x20028202
 80020fc:	200280f6 	.word	0x200280f6
 8002100:	2002817c 	.word	0x2002817c
 8002104:	2002814c 	.word	0x2002814c
 8002108:	20028150 	.word	0x20028150
 800210c:	2002814e 	.word	0x2002814e
 8002110:	20028114 	.word	0x20028114
 8002114:	20028233 	.word	0x20028233

08002118 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 800211c:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <IMU_softReset+0x3c>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8002122:	2301      	movs	r3, #1
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f9fa 	bl	8002520 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 800212c:	20c8      	movs	r0, #200	; 0xc8
 800212e:	f004 fc13 	bl	8006958 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8002132:	bf00      	nop
 8002134:	f000 f94c 	bl	80023d0 <IMU_receivePacket>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1fa      	bne.n	8002134 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 800213e:	20c8      	movs	r0, #200	; 0xc8
 8002140:	f004 fc0a 	bl	8006958 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8002144:	bf00      	nop
 8002146:	f000 f943 	bl	80023d0 <IMU_receivePacket>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1fa      	bne.n	8002146 <IMU_softReset+0x2e>
		;
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20028180 	.word	0x20028180

08002158 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	460a      	mov	r2, r1
 8002162:	80fb      	strh	r3, [r7, #6]
 8002164:	4613      	mov	r3, r2
 8002166:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8002168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002174:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8002178:	797b      	ldrb	r3, [r7, #5]
 800217a:	425b      	negs	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f95b 	bl	8000438 <__aeabi_i2d>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	ec44 3b11 	vmov	d1, r3, r4
 800218a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80021d0 <IMU_qToFloat+0x78>
 800218e:	f019 f9a7 	bl	801b4e0 <pow>
 8002192:	ec56 5b10 	vmov	r5, r6, d0
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7fe f960 	bl	800045c <__aeabi_f2d>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	461a      	mov	r2, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	4628      	mov	r0, r5
 80021a6:	4631      	mov	r1, r6
 80021a8:	f7fe f9b0 	bl	800050c <__aeabi_dmul>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	4618      	mov	r0, r3
 80021b2:	4621      	mov	r1, r4
 80021b4:	f7fe fc5a 	bl	8000a6c <__aeabi_d2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	ee07 3a90 	vmov	s15, r3
}
 80021c2:	eeb0 0a67 	vmov.f32	s0, s15
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021cc:	f3af 8000 	nop.w
 80021d0:	00000000 	.word	0x00000000
 80021d4:	40000000 	.word	0x40000000

080021d8 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	4619      	mov	r1, r3
 80021e6:	2005      	movs	r0, #5
 80021e8:	f000 f81a 	bl	8002220 <IMU_setFeatureCommand_2>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8002202:	4a06      	ldr	r2, [pc, #24]	; (800221c <IMU_enableActivityClassifier+0x28>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4619      	mov	r1, r3
 800220e:	201e      	movs	r0, #30
 8002210:	f000 f818 	bl	8002244 <IMU_setFeatureCommand_3>
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20028154 	.word	0x20028154

08002220 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	4613      	mov	r3, r2
 800222e:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002230:	88b9      	ldrh	r1, [r7, #4]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	2200      	movs	r2, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f804 	bl	8002244 <IMU_setFeatureCommand_3>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	603a      	str	r2, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
 8002250:	460b      	mov	r3, r1
 8002252:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 8002262:	22fd      	movs	r2, #253	; 0xfd
 8002264:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 800226e:	2200      	movs	r2, #0
 8002270:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 8002274:	2200      	movs	r2, #0
 8002276:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 800227a:	2200      	movs	r2, #0
 800227c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 8002284:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	121b      	asrs	r3, r3, #8
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 800228e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	141b      	asrs	r3, r3, #16
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 8002298:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	0e1b      	lsrs	r3, r3, #24
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022a2:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022c2:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022cc:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022d6:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	0e1b      	lsrs	r3, r3, #24
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <IMU_setFeatureCommand_3+0xb0>)
 80022e0:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80022e2:	2302      	movs	r3, #2
 80022e4:	2111      	movs	r1, #17
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f91a 	bl	8002520 <IMU_sendPacket>
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20028180 	.word	0x20028180

080022f8 <IMU_sendTareNow>:
	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
}

void IMU_sendTareNow(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <IMU_sendTareNow+0x64>)
 80022fe:	22f2      	movs	r2, #242	; 0xf2
 8002300:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <IMU_sendTareNow+0x68>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	b2d1      	uxtb	r1, r2
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <IMU_sendTareNow+0x68>)
 800230c:	7011      	strb	r1, [r2, #0]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <IMU_sendTareNow+0x64>)
 8002310:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <IMU_sendTareNow+0x64>)
 8002314:	2203      	movs	r2, #3
 8002316:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0; // Tare Now
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <IMU_sendTareNow+0x64>)
 800231a:	2200      	movs	r2, #0
 800231c:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0x07; // All 3 axes
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <IMU_sendTareNow+0x64>)
 8002320:	2207      	movs	r2, #7
 8002322:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0; // Rotation Vector
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <IMU_sendTareNow+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	715a      	strb	r2, [r3, #5]


	// RESERVED
	shtpData[6] = 0;
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <IMU_sendTareNow+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <IMU_sendTareNow+0x64>)
 8002332:	2200      	movs	r2, #0
 8002334:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <IMU_sendTareNow+0x64>)
 8002338:	2200      	movs	r2, #0
 800233a:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <IMU_sendTareNow+0x64>)
 800233e:	2200      	movs	r2, #0
 8002340:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <IMU_sendTareNow+0x64>)
 8002344:	2200      	movs	r2, #0
 8002346:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <IMU_sendTareNow+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 800234e:	2302      	movs	r3, #2
 8002350:	210c      	movs	r1, #12
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f8e4 	bl	8002520 <IMU_sendPacket>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20028180 	.word	0x20028180
 8002360:	20000c02 	.word	0x20000c02

08002364 <IMU_sendPersistTare>:

void IMU_sendPersistTare(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <IMU_sendPersistTare+0x64>)
 800236a:	22f2      	movs	r2, #242	; 0xf2
 800236c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <IMU_sendPersistTare+0x68>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	b2d1      	uxtb	r1, r2
 8002376:	4a15      	ldr	r2, [pc, #84]	; (80023cc <IMU_sendPersistTare+0x68>)
 8002378:	7011      	strb	r1, [r2, #0]
 800237a:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <IMU_sendPersistTare+0x64>)
 800237c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <IMU_sendPersistTare+0x64>)
 8002380:	2203      	movs	r2, #3
 8002382:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0x01; // Persist Tare
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <IMU_sendPersistTare+0x64>)
 8002386:	2201      	movs	r2, #1
 8002388:	70da      	strb	r2, [r3, #3]


	// RESERVED
	shtpData[4] = 0;
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <IMU_sendPersistTare+0x64>)
 800238c:	2200      	movs	r2, #0
 800238e:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0;
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <IMU_sendPersistTare+0x64>)
 8002392:	2200      	movs	r2, #0
 8002394:	715a      	strb	r2, [r3, #5]
	shtpData[6] = 0;
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <IMU_sendPersistTare+0x64>)
 8002398:	2200      	movs	r2, #0
 800239a:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <IMU_sendPersistTare+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <IMU_sendPersistTare+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <IMU_sendPersistTare+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <IMU_sendPersistTare+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <IMU_sendPersistTare+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 80023ba:	2302      	movs	r3, #2
 80023bc:	210c      	movs	r1, #12
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f8ae 	bl	8002520 <IMU_sendPacket>
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20028180 	.word	0x20028180
 80023cc:	20000c02 	.word	0x20000c02

080023d0 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <IMU_receivePacket+0x90>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <IMU_receivePacket+0x94>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f006 fdb0 	bl	8008f48 <HAL_GPIO_ReadPin>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <IMU_receivePacket+0x22>
		return (false);
 80023ee:	2300      	movs	r3, #0
 80023f0:	e031      	b.n	8002456 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <IMU_receivePacket+0x98>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f04f 31ff 	mov.w	r1, #4294967295
 80023fa:	4618      	mov	r0, r3
 80023fc:	f012 fde6 	bl	8014fcc <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <IMU_receivePacket+0x9c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b299      	uxth	r1, r3
 8002406:	2364      	movs	r3, #100	; 0x64
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2304      	movs	r3, #4
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <IMU_receivePacket+0xa0>)
 800240e:	4819      	ldr	r0, [pc, #100]	; (8002474 <IMU_receivePacket+0xa4>)
 8002410:	f006 ff8a 	bl	8009328 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <IMU_receivePacket+0x98>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f012 fe3d 	bl	8015098 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <IMU_receivePacket+0xa0>)
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	b21a      	sxth	r2, r3
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <IMU_receivePacket+0xa0>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b21b      	sxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002436:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002440:	2300      	movs	r3, #0
 8002442:	e008      	b.n	8002456 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	3b04      	subs	r3, #4
 8002448:	b29b      	uxth	r3, r3
 800244a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f812 	bl	8002478 <IMU_getData>


	return (true); //We're done!
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20028208 	.word	0x20028208
 8002464:	20028142 	.word	0x20028142
 8002468:	20027c50 	.word	0x20027c50
 800246c:	20000006 	.word	0x20000006
 8002470:	200280f0 	.word	0x200280f0
 8002474:	20028250 	.word	0x20028250

08002478 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8002482:	2300      	movs	r3, #0
 8002484:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8002486:	e036      	b.n	80024f6 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 800248c:	89bb      	ldrh	r3, [r7, #12]
 800248e:	2b1c      	cmp	r3, #28
 8002490:	d901      	bls.n	8002496 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 8002492:	231c      	movs	r3, #28
 8002494:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <IMU_getData+0x90>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f04f 31ff 	mov.w	r1, #4294967295
 800249e:	4618      	mov	r0, r3
 80024a0:	f012 fd94 	bl	8014fcc <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <IMU_getData+0x94>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b299      	uxth	r1, r3
 80024aa:	89bb      	ldrh	r3, [r7, #12]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3304      	adds	r3, #4
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2364      	movs	r3, #100	; 0x64
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <IMU_getData+0x98>)
 80024bc:	4815      	ldr	r0, [pc, #84]	; (8002514 <IMU_getData+0x9c>)
 80024be:	f006 ff33 	bl	8009328 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <IMU_getData+0x90>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f012 fde6 	bl	8015098 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80024cc:	89fa      	ldrh	r2, [r7, #14]
 80024ce:	89bb      	ldrh	r3, [r7, #12]
 80024d0:	4413      	add	r3, r2
 80024d2:	2b7f      	cmp	r3, #127	; 0x7f
 80024d4:	dc07      	bgt.n	80024e6 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <IMU_getData+0xa0>)
 80024da:	4413      	add	r3, r2
 80024dc:	89ba      	ldrh	r2, [r7, #12]
 80024de:	490f      	ldr	r1, [pc, #60]	; (800251c <IMU_getData+0xa4>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f018 ffe9 	bl	801b4b8 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80024e6:	89fa      	ldrh	r2, [r7, #14]
 80024e8:	89bb      	ldrh	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	89bb      	ldrh	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1c5      	bne.n	8002488 <IMU_getData+0x10>
	}
	return (true); //Done!
 80024fc:	2301      	movs	r3, #1
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20027c50 	.word	0x20027c50
 800250c:	20000006 	.word	0x20000006
 8002510:	20000c04 	.word	0x20000c04
 8002514:	20028250 	.word	0x20028250
 8002518:	20028180 	.word	0x20028180
 800251c:	20000c08 	.word	0x20000c08

08002520 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af02      	add	r7, sp, #8
 8002526:	4603      	mov	r3, r0
 8002528:	460a      	mov	r2, r1
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	4613      	mov	r3, r2
 800252e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	3304      	adds	r3, #4
 8002534:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002536:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <IMU_sendPacket+0x84>)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	121b      	asrs	r3, r3, #8
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <IMU_sendPacket+0x84>)
 8002544:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <IMU_sendPacket+0x84>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <IMU_sendPacket+0x88>)
 8002550:	5cd2      	ldrb	r2, [r2, r3]
 8002552:	1c51      	adds	r1, r2, #1
 8002554:	b2c8      	uxtb	r0, r1
 8002556:	4914      	ldr	r1, [pc, #80]	; (80025a8 <IMU_sendPacket+0x88>)
 8002558:	54c8      	strb	r0, [r1, r3]
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <IMU_sendPacket+0x84>)
 800255c:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 800255e:	79bb      	ldrb	r3, [r7, #6]
 8002560:	461a      	mov	r2, r3
 8002562:	4912      	ldr	r1, [pc, #72]	; (80025ac <IMU_sendPacket+0x8c>)
 8002564:	4812      	ldr	r0, [pc, #72]	; (80025b0 <IMU_sendPacket+0x90>)
 8002566:	f018 ffa7 	bl	801b4b8 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <IMU_sendPacket+0x94>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f04f 31ff 	mov.w	r1, #4294967295
 8002572:	4618      	mov	r0, r3
 8002574:	f012 fd2a 	bl	8014fcc <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <IMU_sendPacket+0x98>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b299      	uxth	r1, r3
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	b29a      	uxth	r2, r3
 8002582:	2364      	movs	r3, #100	; 0x64
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <IMU_sendPacket+0x84>)
 800258a:	480c      	ldr	r0, [pc, #48]	; (80025bc <IMU_sendPacket+0x9c>)
 800258c:	f006 fdd8 	bl	8009140 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <IMU_sendPacket+0x94>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f012 fd7f 	bl	8015098 <osSemaphoreRelease>

	return (true);
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2002820c 	.word	0x2002820c
 80025a8:	20000bfc 	.word	0x20000bfc
 80025ac:	20028180 	.word	0x20028180
 80025b0:	20028210 	.word	0x20028210
 80025b4:	20027c50 	.word	0x20027c50
 80025b8:	20000006 	.word	0x20000006
 80025bc:	20028250 	.word	0x20028250

080025c0 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 80025d4:	b4b0      	push	{r4, r5, r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <_GeometryBuilder+0x54>)
 80025e0:	461c      	mov	r4, r3
 80025e2:	4615      	mov	r5, r2
 80025e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0d      	ldr	r2, [pc, #52]	; (800262c <_GeometryBuilder+0x58>)
 80025f8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80025fc:	4615      	mov	r5, r2
 80025fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002606:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800260a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <_GeometryBuilder+0x5c>)
 8002612:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002616:	4613      	mov	r3, r2
 8002618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800261a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bcb0      	pop	{r4, r5, r7}
 8002626:	4770      	bx	lr
 8002628:	20000008 	.word	0x20000008
 800262c:	20000038 	.word	0x20000038
 8002630:	20000c24 	.word	0x20000c24

08002634 <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b096      	sub	sp, #88	; 0x58
 8002638:	af02      	add	r7, sp, #8
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2bc7      	cmp	r3, #199	; 0xc7
 8002644:	f340 8093 	ble.w	800276e <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3360      	adds	r3, #96	; 0x60
 800264c:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 800264e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	015b      	lsls	r3, r3, #5
 8002654:	3310      	adds	r3, #16
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	4413      	add	r3, r2
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48
 8002664:	e011      	b.n	800268a <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800266e:	3104      	adds	r1, #4
 8002670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800267c:	4293      	cmp	r3, r2
 800267e:	bf38      	it	cc
 8002680:	4613      	movcc	r3, r2
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002686:	3301      	adds	r3, #1
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
 800268a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268c:	2b03      	cmp	r3, #3
 800268e:	ddea      	ble.n	8002666 <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002692:	2b0b      	cmp	r3, #11
 8002694:	d86b      	bhi.n	800276e <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80026a4:	f107 0214 	add.w	r2, r7, #20
 80026a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ac:	4619      	mov	r1, r3
 80026ae:	eef0 0a47 	vmov.f32	s1, s14
 80026b2:	eeb0 0a67 	vmov.f32	s0, s15
 80026b6:	f000 f8e5 	bl	8002884 <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80026cc:	f107 0208 	add.w	r2, r7, #8
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	4619      	mov	r1, r3
 80026d6:	eef0 0a47 	vmov.f32	s1, s14
 80026da:	eeb0 0a67 	vmov.f32	s0, s15
 80026de:	f000 f8d1 	bl	8002884 <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3370      	adds	r3, #112	; 0x70
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	327c      	adds	r2, #124	; 0x7c
 80026ea:	f107 0520 	add.w	r5, r7, #32
 80026ee:	f107 0408 	add.w	r4, r7, #8
 80026f2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80026f6:	f107 0014 	add.w	r0, r7, #20
 80026fa:	9201      	str	r2, [sp, #4]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	462b      	mov	r3, r5
 8002700:	4622      	mov	r2, r4
 8002702:	f000 f945 	bl	8002990 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002706:	2300      	movs	r3, #0
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
 800270a:	e019      	b.n	8002740 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002710:	331c      	adds	r3, #28
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	ed93 7a00 	vldr	s14, [r3]
 800271a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800271c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	331c      	adds	r3, #28
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 800273a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273c:	3301      	adds	r3, #1
 800273e:	647b      	str	r3, [r7, #68]	; 0x44
 8002740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002742:	2b02      	cmp	r3, #2
 8002744:	dde2      	ble.n	800270c <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 8002746:	f004 f8ef 	bl	8006928 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <consume_angles+0x144>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800275c:	2300      	movs	r3, #0
 800275e:	2200      	movs	r2, #0
 8002760:	f012 fd78 	bl	8015254 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <consume_angles+0x148>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f012 fc95 	bl	8015098 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 800276e:	bf00      	nop
 8002770:	3750      	adds	r7, #80	; 0x50
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	bf00      	nop
 8002778:	20027b4c 	.word	0x20027b4c
 800277c:	20028090 	.word	0x20028090

08002780 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3304      	adds	r3, #4
 8002790:	ed93 7a00 	vldr	s14, [r3]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3308      	adds	r3, #8
 8002798:	edd3 7a00 	vldr	s15, [r3]
 800279c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3308      	adds	r3, #8
 80027a4:	edd3 6a00 	vldr	s13, [r3]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3304      	adds	r3, #4
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3308      	adds	r3, #8
 80027c2:	ed93 7a00 	vldr	s14, [r3]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	edd3 6a00 	vldr	s13, [r3]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3308      	adds	r3, #8
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ea:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3304      	adds	r3, #4
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3304      	adds	r3, #4
 8002804:	edd3 6a00 	vldr	s13, [r3]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3308      	adds	r3, #8
 8002816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281a:	edc3 7a00 	vstr	s15, [r3]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <vec_length>:

float vec_length(float *vec) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	461a      	mov	r2, r3
 8002838:	2103      	movs	r1, #3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f018 fb4c 	bl	801aed8 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	f107 0308 	add.w	r3, r7, #8
 8002848:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800284a:	edd7 7a05 	vldr	s15, [r7, #20]
 800284e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	db09      	blt.n	800286c <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002858:	ed97 0a05 	vldr	s0, [r7, #20]
 800285c:	f018 ffb0 	bl	801b7c0 <sqrtf>
 8002860:	eef0 7a40 	vmov.f32	s15, s0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	edc3 7a00 	vstr	s15, [r3]
 800286a:	e003      	b.n	8002874 <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

    return res;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	ee07 3a90 	vmov	s15, r3
}
 800287a:	eeb0 0a67 	vmov.f32	s0, s15
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b09a      	sub	sp, #104	; 0x68
 8002888:	af00      	add	r7, sp, #0
 800288a:	6178      	str	r0, [r7, #20]
 800288c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002890:	edc7 0a03 	vstr	s1, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8002898:	ed97 0a04 	vldr	s0, [r7, #16]
 800289c:	f018 fc48 	bl	801b130 <arm_cos_f32>
 80028a0:	eef0 7a40 	vmov.f32	s15, s0
 80028a4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ae:	ed97 0a04 	vldr	s0, [r7, #16]
 80028b2:	f018 fbf7 	bl	801b0a4 <arm_sin_f32>
 80028b6:	eef0 7a40 	vmov.f32	s15, s0
 80028ba:	eef1 7a67 	vneg.f32	s15, s15
 80028be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80028cc:	f018 fc30 	bl	801b130 <arm_cos_f32>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
 80028d4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80028d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80028dc:	f018 fbe2 	bl	801b0a4 <arm_sin_f32>
 80028e0:	eef0 7a40 	vmov.f32	s15, s0
 80028e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 80028e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 80028f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80028f8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80028fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff3d 	bl	8002780 <vec_cross_product>
    float len = vec_length(ray);
 8002906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff8d 	bl	800282a <vec_length>
 8002910:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8002914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002918:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800291c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002920:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002924:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002928:	2203      	movs	r2, #3
 800292a:	eeb0 0a66 	vmov.f32	s0, s13
 800292e:	4618      	mov	r0, r3
 8002930:	f018 fca2 	bl	801b278 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8002934:	2303      	movs	r3, #3
 8002936:	873b      	strh	r3, [r7, #56]	; 0x38
 8002938:	2303      	movs	r3, #3
 800293a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	330c      	adds	r3, #12
 8002940:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 8002942:	2303      	movs	r3, #3
 8002944:	863b      	strh	r3, [r7, #48]	; 0x30
 8002946:	2301      	movs	r3, #1
 8002948:	867b      	strh	r3, [r7, #50]	; 0x32
 800294a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8002950:	2303      	movs	r3, #3
 8002952:	853b      	strh	r3, [r7, #40]	; 0x28
 8002954:	2301      	movs	r3, #1
 8002956:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 800295c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002960:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002968:	4618      	mov	r0, r3
 800296a:	f018 fafb 	bl	801af64 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f107 011c 	add.w	r1, r7, #28
 8002980:	2303      	movs	r3, #3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	f018 fd14 	bl	801b3b0 <arm_add_f32>
}
 8002988:	bf00      	nop
 800298a:	3768      	adds	r7, #104	; 0x68
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b098      	sub	sp, #96	; 0x60
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 800299e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 80029aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80029ae:	2303      	movs	r3, #3
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f018 fc06 	bl	801b1c4 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 80029b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029bc:	2203      	movs	r2, #3
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68b8      	ldr	r0, [r7, #8]
 80029c2:	f018 fc9d 	bl	801b300 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 80029c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029ca:	2203      	movs	r2, #3
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	68b8      	ldr	r0, [r7, #8]
 80029d0:	f018 fc96 	bl	801b300 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 80029d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029d8:	2203      	movs	r2, #3
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	6838      	ldr	r0, [r7, #0]
 80029de:	f018 fc8f 	bl	801b300 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 80029e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029e6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80029ea:	2203      	movs	r2, #3
 80029ec:	68b8      	ldr	r0, [r7, #8]
 80029ee:	f018 fc87 	bl	801b300 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 80029f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80029fa:	2203      	movs	r2, #3
 80029fc:	6838      	ldr	r0, [r7, #0]
 80029fe:	f018 fc7f 	bl	801b300 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002a02:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002a12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8002a22:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a26:	eef0 7ae7 	vabs.f32	s15, s15
 8002a2a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002b48 <intersect_lines+0x1b8>
 8002a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	d501      	bpl.n	8002a3c <intersect_lines+0xac>
        return 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e081      	b.n	8002b40 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8002a3c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a48:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002a4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a54:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a58:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a60:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 8002a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8002a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a74:	2203      	movs	r2, #3
 8002a76:	4619      	mov	r1, r3
 8002a78:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8002a7c:	68b8      	ldr	r0, [r7, #8]
 8002a7e:	f018 fbfb 	bl	801b278 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002a82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a86:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	f018 fc8f 	bl	801b3b0 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002a92:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a96:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a9e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002aa2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aaa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002aae:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002ac6:	f107 031c 	add.w	r3, r7, #28
 8002aca:	2203      	movs	r2, #3
 8002acc:	4619      	mov	r1, r3
 8002ace:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f018 fbd0 	bl	801b278 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002ad8:	f107 021c 	add.w	r2, r7, #28
 8002adc:	f107 001c 	add.w	r0, r7, #28
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	f018 fc64 	bl	801b3b0 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002af4:	f107 0210 	add.w	r2, r7, #16
 8002af8:	f107 011c 	add.w	r1, r7, #28
 8002afc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002b00:	2303      	movs	r3, #3
 8002b02:	f018 fc55 	bl	801b3b0 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b0e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b12:	4618      	mov	r0, r3
 8002b14:	f018 fbb0 	bl	801b278 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002b18:	f107 0210 	add.w	r2, r7, #16
 8002b1c:	f107 011c 	add.w	r1, r7, #28
 8002b20:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002b24:	2303      	movs	r3, #3
 8002b26:	f018 fb4d 	bl	801b1c4 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fe7b 	bl	800282a <vec_length>
 8002b34:	eef0 7a40 	vmov.f32	s15, s0
 8002b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3a:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3760      	adds	r7, #96	; 0x60
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	3727c5ac 	.word	0x3727c5ac

08002b4c <LL_AHB2_GRP1_EnableClock>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b70:	68fb      	ldr	r3, [r7, #12]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b94:	2004      	movs	r0, #4
 8002b96:	f7ff ffd9 	bl	8002b4c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b9a:	2080      	movs	r0, #128	; 0x80
 8002b9c:	f7ff ffd6 	bl	8002b4c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7ff ffd3 	bl	8002b4c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7ff ffd0 	bl	8002b4c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bac:	2010      	movs	r0, #16
 8002bae:	f7ff ffcd 	bl	8002b4c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb8:	4835      	ldr	r0, [pc, #212]	; (8002c90 <MX_GPIO_Init+0x110>)
 8002bba:	f006 f9dd 	bl	8008f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4831      	ldr	r0, [pc, #196]	; (8002c94 <MX_GPIO_Init+0x114>)
 8002bd0:	f006 f84a 	bl	8008c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DONGLE_DEBUG_PIN_Pin;
 8002bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DONGLE_DEBUG_PIN_GPIO_Port, &GPIO_InitStruct);
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4829      	ldr	r0, [pc, #164]	; (8002c90 <MX_GPIO_Init+0x110>)
 8002bec:	f006 f83c 	bl	8008c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB0 PB1 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
 8002bf0:	f240 23f3 	movw	r3, #755	; 0x2f3
 8002bf4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4823      	ldr	r0, [pc, #140]	; (8002c90 <MX_GPIO_Init+0x110>)
 8002c04:	f006 f830 	bl	8008c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8002c08:	f248 13dc 	movw	r3, #33244	; 0x81dc
 8002c0c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1e:	f006 f823 	bl	8008c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002c22:	2320      	movs	r3, #32
 8002c24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <MX_GPIO_Init+0x118>)
 8002c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c36:	f006 f817 	bl	8008c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <MX_GPIO_Init+0x11c>)
 8002c40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4811      	ldr	r0, [pc, #68]	; (8002c90 <MX_GPIO_Init+0x110>)
 8002c4c:	f006 f80c 	bl	8008c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c50:	2310      	movs	r3, #16
 8002c52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c54:	2303      	movs	r3, #3
 8002c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <MX_GPIO_Init+0x120>)
 8002c62:	f006 f801 	bl	8008c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2105      	movs	r1, #5
 8002c6a:	2008      	movs	r0, #8
 8002c6c:	f005 fc65 	bl	800853a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c70:	2008      	movs	r0, #8
 8002c72:	f005 fc7c 	bl	800856e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2105      	movs	r1, #5
 8002c7a:	2017      	movs	r0, #23
 8002c7c:	f005 fc5d 	bl	800853a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c80:	2017      	movs	r0, #23
 8002c82:	f005 fc74 	bl	800856e <HAL_NVIC_EnableIRQ>

}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	48000400 	.word	0x48000400
 8002c94:	48001c00 	.word	0x48001c00
 8002c98:	10210000 	.word	0x10210000
 8002c9c:	10110000 	.word	0x10110000
 8002ca0:	48001000 	.word	0x48001000

08002ca4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cb2:	4905      	ldr	r1, [pc, #20]	; (8002cc8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	58000800 	.word	0x58000800

08002ccc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4904      	ldr	r1, [pc, #16]	; (8002cec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	58000800 	.word	0x58000800

08002cf0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <ReadRtcSsrValue+0x3c>)
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <ReadRtcSsrValue+0x3c>)
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002d06:	e005      	b.n	8002d14 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <ReadRtcSsrValue+0x3c>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1f5      	bne.n	8002d08 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002d1c:	683b      	ldr	r3, [r7, #0]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40002800 	.word	0x40002800

08002d30 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	460a      	mov	r2, r1
 8002d3a:	71fb      	strb	r3, [r7, #7]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002d40:	79ba      	ldrb	r2, [r7, #6]
 8002d42:	491d      	ldr	r1, [pc, #116]	; (8002db8 <LinkTimerAfter+0x88>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3315      	adds	r3, #21
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d009      	beq.n	8002d6e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	4916      	ldr	r1, [pc, #88]	; (8002db8 <LinkTimerAfter+0x88>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	3314      	adds	r3, #20
 8002d6a:	79fa      	ldrb	r2, [r7, #7]
 8002d6c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002d6e:	79fa      	ldrb	r2, [r7, #7]
 8002d70:	4911      	ldr	r1, [pc, #68]	; (8002db8 <LinkTimerAfter+0x88>)
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3315      	adds	r3, #21
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	490c      	ldr	r1, [pc, #48]	; (8002db8 <LinkTimerAfter+0x88>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	3314      	adds	r3, #20
 8002d92:	79ba      	ldrb	r2, [r7, #6]
 8002d94:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002d96:	79ba      	ldrb	r2, [r7, #6]
 8002d98:	4907      	ldr	r1, [pc, #28]	; (8002db8 <LinkTimerAfter+0x88>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3315      	adds	r3, #21
 8002da6:	79fa      	ldrb	r2, [r7, #7]
 8002da8:	701a      	strb	r2, [r3, #0]

  return;
 8002daa:	bf00      	nop
}
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200002dc 	.word	0x200002dc

08002dbc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	71fb      	strb	r3, [r7, #7]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <LinkTimerBefore+0xb8>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	79ba      	ldrb	r2, [r7, #6]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d032      	beq.n	8002e3e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002dd8:	79ba      	ldrb	r2, [r7, #6]
 8002dda:	4927      	ldr	r1, [pc, #156]	; (8002e78 <LinkTimerBefore+0xbc>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3314      	adds	r3, #20
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	4922      	ldr	r1, [pc, #136]	; (8002e78 <LinkTimerBefore+0xbc>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3315      	adds	r3, #21
 8002dfc:	79fa      	ldrb	r2, [r7, #7]
 8002dfe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002e00:	79fa      	ldrb	r2, [r7, #7]
 8002e02:	491d      	ldr	r1, [pc, #116]	; (8002e78 <LinkTimerBefore+0xbc>)
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3315      	adds	r3, #21
 8002e10:	79ba      	ldrb	r2, [r7, #6]
 8002e12:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	4918      	ldr	r1, [pc, #96]	; (8002e78 <LinkTimerBefore+0xbc>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3314      	adds	r3, #20
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002e28:	79ba      	ldrb	r2, [r7, #6]
 8002e2a:	4913      	ldr	r1, [pc, #76]	; (8002e78 <LinkTimerBefore+0xbc>)
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3314      	adds	r3, #20
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002e3c:	e014      	b.n	8002e68 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	490d      	ldr	r1, [pc, #52]	; (8002e78 <LinkTimerBefore+0xbc>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3315      	adds	r3, #21
 8002e4e:	79ba      	ldrb	r2, [r7, #6]
 8002e50:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002e52:	79ba      	ldrb	r2, [r7, #6]
 8002e54:	4908      	ldr	r1, [pc, #32]	; (8002e78 <LinkTimerBefore+0xbc>)
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	3314      	adds	r3, #20
 8002e62:	79fa      	ldrb	r2, [r7, #7]
 8002e64:	701a      	strb	r2, [r3, #0]
  return;
 8002e66:	bf00      	nop
}
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2000036c 	.word	0x2000036c
 8002e78:	200002dc 	.word	0x200002dc

08002e7c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e86:	4b4e      	ldr	r3, [pc, #312]	; (8002fc0 <linkTimer+0x144>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d118      	bne.n	8002ec2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e90:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <linkTimer+0x144>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <linkTimer+0x148>)
 8002e98:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002e9a:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <linkTimer+0x144>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	4949      	ldr	r1, [pc, #292]	; (8002fc8 <linkTimer+0x14c>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	3315      	adds	r3, #21
 8002eb0:	2206      	movs	r2, #6
 8002eb2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002eb4:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <linkTimer+0x150>)
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	81fb      	strh	r3, [r7, #14]
 8002ec0:	e078      	b.n	8002fb4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002ec2:	f000 f909 	bl	80030d8 <ReturnTimeElapsed>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002eca:	79fa      	ldrb	r2, [r7, #7]
 8002ecc:	493e      	ldr	r1, [pc, #248]	; (8002fc8 <linkTimer+0x14c>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3308      	adds	r3, #8
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	89fb      	ldrh	r3, [r7, #14]
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4419      	add	r1, r3
 8002ee2:	4839      	ldr	r0, [pc, #228]	; (8002fc8 <linkTimer+0x14c>)
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4403      	add	r3, r0
 8002eee:	3308      	adds	r3, #8
 8002ef0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002ef2:	79fa      	ldrb	r2, [r7, #7]
 8002ef4:	4934      	ldr	r1, [pc, #208]	; (8002fc8 <linkTimer+0x14c>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	3308      	adds	r3, #8
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <linkTimer+0x144>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <linkTimer+0x14c>)
 8002f10:	460b      	mov	r3, r1
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	440b      	add	r3, r1
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d337      	bcc.n	8002f94 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002f24:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <linkTimer+0x144>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002f2a:	7b7a      	ldrb	r2, [r7, #13]
 8002f2c:	4926      	ldr	r1, [pc, #152]	; (8002fc8 <linkTimer+0x14c>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	3315      	adds	r3, #21
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002f3e:	e013      	b.n	8002f68 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002f40:	7b7a      	ldrb	r2, [r7, #13]
 8002f42:	4921      	ldr	r1, [pc, #132]	; (8002fc8 <linkTimer+0x14c>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3315      	adds	r3, #21
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002f54:	7b7a      	ldrb	r2, [r7, #13]
 8002f56:	491c      	ldr	r1, [pc, #112]	; (8002fc8 <linkTimer+0x14c>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	3315      	adds	r3, #21
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002f68:	7b3b      	ldrb	r3, [r7, #12]
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d00b      	beq.n	8002f86 <linkTimer+0x10a>
 8002f6e:	7b3a      	ldrb	r2, [r7, #12]
 8002f70:	4915      	ldr	r1, [pc, #84]	; (8002fc8 <linkTimer+0x14c>)
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d2dc      	bcs.n	8002f40 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002f86:	7b7a      	ldrb	r2, [r7, #13]
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fecf 	bl	8002d30 <LinkTimerAfter>
 8002f92:	e00f      	b.n	8002fb4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <linkTimer+0x144>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff0c 	bl	8002dbc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <linkTimer+0x144>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <linkTimer+0x148>)
 8002fac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <linkTimer+0x144>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000036c 	.word	0x2000036c
 8002fc4:	2000036d 	.word	0x2000036d
 8002fc8:	200002dc 	.word	0x200002dc
 8002fcc:	20000370 	.word	0x20000370

08002fd0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460a      	mov	r2, r1
 8002fda:	71fb      	strb	r3, [r7, #7]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002fe0:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <UnlinkTimer+0xf8>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	79fa      	ldrb	r2, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d111      	bne.n	8003010 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002fec:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <UnlinkTimer+0xf8>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <UnlinkTimer+0xfc>)
 8002ff4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002ff6:	79fa      	ldrb	r2, [r7, #7]
 8002ff8:	4935      	ldr	r1, [pc, #212]	; (80030d0 <UnlinkTimer+0x100>)
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3315      	adds	r3, #21
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <UnlinkTimer+0xf8>)
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e03e      	b.n	800308e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003010:	79fa      	ldrb	r2, [r7, #7]
 8003012:	492f      	ldr	r1, [pc, #188]	; (80030d0 <UnlinkTimer+0x100>)
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3314      	adds	r3, #20
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003024:	79fa      	ldrb	r2, [r7, #7]
 8003026:	492a      	ldr	r1, [pc, #168]	; (80030d0 <UnlinkTimer+0x100>)
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3315      	adds	r3, #21
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003038:	79f9      	ldrb	r1, [r7, #7]
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	4824      	ldr	r0, [pc, #144]	; (80030d0 <UnlinkTimer+0x100>)
 800303e:	460b      	mov	r3, r1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	440b      	add	r3, r1
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4403      	add	r3, r0
 8003048:	3315      	adds	r3, #21
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b2d8      	uxtb	r0, r3
 800304e:	4920      	ldr	r1, [pc, #128]	; (80030d0 <UnlinkTimer+0x100>)
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3315      	adds	r3, #21
 800305c:	4602      	mov	r2, r0
 800305e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003060:	7bbb      	ldrb	r3, [r7, #14]
 8003062:	2b06      	cmp	r3, #6
 8003064:	d013      	beq.n	800308e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8003066:	79f9      	ldrb	r1, [r7, #7]
 8003068:	7bba      	ldrb	r2, [r7, #14]
 800306a:	4819      	ldr	r0, [pc, #100]	; (80030d0 <UnlinkTimer+0x100>)
 800306c:	460b      	mov	r3, r1
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	440b      	add	r3, r1
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4403      	add	r3, r0
 8003076:	3314      	adds	r3, #20
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b2d8      	uxtb	r0, r3
 800307c:	4914      	ldr	r1, [pc, #80]	; (80030d0 <UnlinkTimer+0x100>)
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3314      	adds	r3, #20
 800308a:	4602      	mov	r2, r0
 800308c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	490f      	ldr	r1, [pc, #60]	; (80030d0 <UnlinkTimer+0x100>)
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	330c      	adds	r3, #12
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <UnlinkTimer+0xf8>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d107      	bne.n	80030bc <UnlinkTimer+0xec>
 80030ac:	79bb      	ldrb	r3, [r7, #6]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <UnlinkTimer+0x104>)
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
}
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	2000036c 	.word	0x2000036c
 80030cc:	2000036d 	.word	0x2000036d
 80030d0:	200002dc 	.word	0x200002dc
 80030d4:	20000370 	.word	0x20000370

080030d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <ReturnTimeElapsed+0x70>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d026      	beq.n	8003136 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80030e8:	f7ff fe02 	bl	8002cf0 <ReadRtcSsrValue>
 80030ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <ReturnTimeElapsed+0x70>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d805      	bhi.n	8003104 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <ReturnTimeElapsed+0x70>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	e00a      	b.n	800311a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <ReturnTimeElapsed+0x74>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <ReturnTimeElapsed+0x70>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <ReturnTimeElapsed+0x78>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <ReturnTimeElapsed+0x7c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	40d3      	lsrs	r3, r2
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	e001      	b.n	800313a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	b29b      	uxth	r3, r3
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000370 	.word	0x20000370
 800314c:	20000c3a 	.word	0x20000c3a
 8003150:	20000c39 	.word	0x20000c39
 8003154:	20000c38 	.word	0x20000c38

08003158 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003168:	f7ff fdc2 	bl	8002cf0 <ReadRtcSsrValue>
 800316c:	4602      	mov	r2, r0
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <RestartWakeupCounter+0xa8>)
 8003170:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003172:	2003      	movs	r0, #3
 8003174:	f005 fa1b 	bl	80085ae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003178:	e03e      	b.n	80031f8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d803      	bhi.n	8003188 <RestartWakeupCounter+0x30>
 8003180:	4b20      	ldr	r3, [pc, #128]	; (8003204 <RestartWakeupCounter+0xac>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d002      	beq.n	800318e <RestartWakeupCounter+0x36>
      Value -= 1;
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	3b01      	subs	r3, #1
 800318c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800318e:	bf00      	nop
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <RestartWakeupCounter+0xb0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f7      	beq.n	8003190 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <RestartWakeupCounter+0xb0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <RestartWakeupCounter+0xb0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80031b4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <RestartWakeupCounter+0xb4>)
 80031b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031bc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80031be:	2003      	movs	r0, #3
 80031c0:	f005 fa03 	bl	80085ca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80031c4:	4b12      	ldr	r3, [pc, #72]	; (8003210 <RestartWakeupCounter+0xb8>)
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	4910      	ldr	r1, [pc, #64]	; (8003210 <RestartWakeupCounter+0xb8>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80031d4:	f7ff fd8c 	bl	8002cf0 <ReadRtcSsrValue>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <RestartWakeupCounter+0xa8>)
 80031dc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <RestartWakeupCounter+0xb0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <RestartWakeupCounter+0xb0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80031f2:	f3af 8000 	nop.w
  return ;
 80031f6:	bf00      	nop
}
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000370 	.word	0x20000370
 8003204:	20000c38 	.word	0x20000c38
 8003208:	20000c34 	.word	0x20000c34
 800320c:	58000800 	.word	0x58000800
 8003210:	40002800 	.word	0x40002800

08003214 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <RescheduleTimerList+0x124>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d108      	bne.n	800323a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003228:	bf00      	nop
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <RescheduleTimerList+0x128>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f7      	bne.n	800322a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800323a:	4b40      	ldr	r3, [pc, #256]	; (800333c <RescheduleTimerList+0x128>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	4b3e      	ldr	r3, [pc, #248]	; (800333c <RescheduleTimerList+0x128>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800324e:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <RescheduleTimerList+0x12c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	493b      	ldr	r1, [pc, #236]	; (8003344 <RescheduleTimerList+0x130>)
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	3308      	adds	r3, #8
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003268:	f7ff ff36 	bl	80030d8 <ReturnTimeElapsed>
 800326c:	4603      	mov	r3, r0
 800326e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	d205      	bcs.n	8003284 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <RescheduleTimerList+0x134>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e04d      	b.n	8003320 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	4a31      	ldr	r2, [pc, #196]	; (800334c <RescheduleTimerList+0x138>)
 8003288:	8812      	ldrh	r2, [r2, #0]
 800328a:	b292      	uxth	r2, r2
 800328c:	4413      	add	r3, r2
 800328e:	461a      	mov	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4293      	cmp	r3, r2
 8003294:	d906      	bls.n	80032a4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003296:	4b2d      	ldr	r3, [pc, #180]	; (800334c <RescheduleTimerList+0x138>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <RescheduleTimerList+0x134>)
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e03d      	b.n	8003320 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <RescheduleTimerList+0x134>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80032b4:	e034      	b.n	8003320 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	4922      	ldr	r1, [pc, #136]	; (8003344 <RescheduleTimerList+0x130>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	3308      	adds	r3, #8
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d20a      	bcs.n	80032e4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	491c      	ldr	r1, [pc, #112]	; (8003344 <RescheduleTimerList+0x130>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	3308      	adds	r3, #8
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e013      	b.n	800330c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	4917      	ldr	r1, [pc, #92]	; (8003344 <RescheduleTimerList+0x130>)
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	3308      	adds	r3, #8
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	1ac9      	subs	r1, r1, r3
 80032fc:	4811      	ldr	r0, [pc, #68]	; (8003344 <RescheduleTimerList+0x130>)
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4403      	add	r3, r0
 8003308:	3308      	adds	r3, #8
 800330a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	490d      	ldr	r1, [pc, #52]	; (8003344 <RescheduleTimerList+0x130>)
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	3315      	adds	r3, #21
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b06      	cmp	r3, #6
 8003324:	d1c7      	bne.n	80032b6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff15 	bl	8003158 <RestartWakeupCounter>

  return ;
 800332e:	bf00      	nop
}
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40002800 	.word	0x40002800
 800333c:	20000c34 	.word	0x20000c34
 8003340:	2000036c 	.word	0x2000036c
 8003344:	200002dc 	.word	0x200002dc
 8003348:	20000374 	.word	0x20000374
 800334c:	20000c3c 	.word	0x20000c3c

08003350 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	617b      	str	r3, [r7, #20]
  return(result);
 800335c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003362:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	22ca      	movs	r2, #202	; 0xca
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
 800336c:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2253      	movs	r2, #83	; 0x53
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8003376:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003388:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800338a:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <HW_TS_RTC_Wakeup_Handler+0x190>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003392:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003396:	4953      	ldr	r1, [pc, #332]	; (80034e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	330c      	adds	r3, #12
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d170      	bne.n	800348e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80033ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033b0:	494c      	ldr	r1, [pc, #304]	; (80034e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	440b      	add	r3, r1
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80033c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033c4:	4947      	ldr	r1, [pc, #284]	; (80034e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	3310      	adds	r3, #16
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80033d6:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04e      	beq.n	800347e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80033e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033e4:	493f      	ldr	r1, [pc, #252]	; (80034e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	330d      	adds	r3, #13
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d125      	bne.n	8003446 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80033fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fde5 	bl	8002fd0 <UnlinkTimer>
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003410:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003414:	4933      	ldr	r1, [pc, #204]	; (80034e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	3304      	adds	r3, #4
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f9d0 	bl	80037d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	22ca      	movs	r2, #202	; 0xca
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2253      	movs	r2, #83	; 0x53
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
 8003444:	e013      	b.n	800346e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f931 	bl	80036bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	22ca      	movs	r2, #202	; 0xca
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2253      	movs	r2, #83	; 0x53
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800346e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	4619      	mov	r1, r3
 8003476:	69b8      	ldr	r0, [r7, #24]
 8003478:	f000 fa30 	bl	80038dc <HW_TS_RTC_Int_AppNot>
 800347c:	e024      	b.n	80034c8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800347e:	f7ff fec9 	bl	8003214 <RescheduleTimerList>
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f383 8810 	msr	PRIMASK, r3
 800348c:	e01c      	b.n	80034c8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800348e:	bf00      	nop
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f7      	beq.n	8003490 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80034b4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80034b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	22ff      	movs	r2, #255	; 0xff
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80034d2:	bf00      	nop
}
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000c34 	.word	0x20000c34
 80034e0:	2000036c 	.word	0x2000036c
 80034e4:	200002dc 	.word	0x200002dc
 80034e8:	20000374 	.word	0x20000374
 80034ec:	58000800 	.word	0x58000800

080034f0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80034fc:	4a64      	ldr	r2, [pc, #400]	; (8003690 <HW_TS_Init+0x1a0>)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HW_TS_Init+0x1a0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	22ca      	movs	r2, #202	; 0xca
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
 800350c:	4b60      	ldr	r3, [pc, #384]	; (8003690 <HW_TS_Init+0x1a0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2253      	movs	r2, #83	; 0x53
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003516:	4b5f      	ldr	r3, [pc, #380]	; (8003694 <HW_TS_Init+0x1a4>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a5e      	ldr	r2, [pc, #376]	; (8003694 <HW_TS_Init+0x1a4>)
 800351c:	f043 0320 	orr.w	r3, r3, #32
 8003520:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003522:	4b5c      	ldr	r3, [pc, #368]	; (8003694 <HW_TS_Init+0x1a4>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f1c3 0304 	rsb	r3, r3, #4
 8003532:	b2da      	uxtb	r2, r3
 8003534:	4b58      	ldr	r3, [pc, #352]	; (8003698 <HW_TS_Init+0x1a8>)
 8003536:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003538:	4b56      	ldr	r3, [pc, #344]	; (8003694 <HW_TS_Init+0x1a4>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003540:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003544:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	2a00      	cmp	r2, #0
 8003556:	d101      	bne.n	800355c <HW_TS_Init+0x6c>
  {
    return 32U;
 8003558:	2220      	movs	r2, #32
 800355a:	e003      	b.n	8003564 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	fab2 f282 	clz	r2, r2
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	40d3      	lsrs	r3, r2
 8003566:	b2db      	uxtb	r3, r3
 8003568:	3301      	adds	r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b4b      	ldr	r3, [pc, #300]	; (800369c <HW_TS_Init+0x1ac>)
 800356e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <HW_TS_Init+0x1a4>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	b29b      	uxth	r3, r3
 8003576:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800357a:	b29b      	uxth	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HW_TS_Init+0x1b0>)
 8003582:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003584:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HW_TS_Init+0x1b0>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	4a44      	ldr	r2, [pc, #272]	; (800369c <HW_TS_Init+0x1ac>)
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003596:	4a40      	ldr	r2, [pc, #256]	; (8003698 <HW_TS_Init+0x1a8>)
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	40d3      	lsrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d904      	bls.n	80035b2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80035a8:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HW_TS_Init+0x1b4>)
 80035aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ae:	801a      	strh	r2, [r3, #0]
 80035b0:	e003      	b.n	80035ba <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HW_TS_Init+0x1b4>)
 80035b8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035be:	f7ff fb85 	bl	8002ccc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035c6:	f7ff fb6d 	bl	8002ca4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d143      	bne.n	8003658 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HW_TS_Init+0x1b8>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80035d6:	4b35      	ldr	r3, [pc, #212]	; (80036ac <HW_TS_Init+0x1bc>)
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e00c      	b.n	80035fe <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80035e4:	7ffa      	ldrb	r2, [r7, #31]
 80035e6:	4932      	ldr	r1, [pc, #200]	; (80036b0 <HW_TS_Init+0x1c0>)
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	330c      	adds	r3, #12
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80035f8:	7ffb      	ldrb	r3, [r7, #31]
 80035fa:	3301      	adds	r3, #1
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d9ef      	bls.n	80035e4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HW_TS_Init+0x1c4>)
 8003606:	2206      	movs	r2, #6
 8003608:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <HW_TS_Init+0x1a0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <HW_TS_Init+0x1a0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HW_TS_Init+0x1a0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HW_TS_Init+0x1a0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003632:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HW_TS_Init+0x1c8>)
 8003636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800363a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800363c:	2003      	movs	r0, #3
 800363e:	f004 ffc4 	bl	80085ca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HW_TS_Init+0x1a0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HW_TS_Init+0x1a0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	e00a      	b.n	800366e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HW_TS_Init+0x1a0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003668:	2003      	movs	r0, #3
 800366a:	f004 ffa0 	bl	80085ae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HW_TS_Init+0x1a0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	22ff      	movs	r2, #255	; 0xff
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003678:	2200      	movs	r2, #0
 800367a:	2106      	movs	r1, #6
 800367c:	2003      	movs	r0, #3
 800367e:	f004 ff5c 	bl	800853a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003682:	2003      	movs	r0, #3
 8003684:	f004 ff73 	bl	800856e <HAL_NVIC_EnableIRQ>

  return;
 8003688:	bf00      	nop
}
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000c34 	.word	0x20000c34
 8003694:	40002800 	.word	0x40002800
 8003698:	20000c38 	.word	0x20000c38
 800369c:	20000c39 	.word	0x20000c39
 80036a0:	20000c3a 	.word	0x20000c3a
 80036a4:	20000c3c 	.word	0x20000c3c
 80036a8:	20000374 	.word	0x20000374
 80036ac:	20000370 	.word	0x20000370
 80036b0:	200002dc 	.word	0x200002dc
 80036b4:	2000036c 	.word	0x2000036c
 80036b8:	58000800 	.word	0x58000800

080036bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c6:	f3ef 8310 	mrs	r3, PRIMASK
 80036ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80036cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80036d0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80036d2:	2003      	movs	r0, #3
 80036d4:	f004 ff59 	bl	800858a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80036d8:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HW_TS_Stop+0xfc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	22ca      	movs	r2, #202	; 0xca
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
 80036e2:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <HW_TS_Stop+0xfc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2253      	movs	r2, #83	; 0x53
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80036ec:	79fa      	ldrb	r2, [r7, #7]
 80036ee:	4933      	ldr	r1, [pc, #204]	; (80037bc <HW_TS_Stop+0x100>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	330c      	adds	r3, #12
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d148      	bne.n	8003796 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fc61 	bl	8002fd0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HW_TS_Stop+0x104>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	2b06      	cmp	r3, #6
 8003718:	d135      	bne.n	8003786 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HW_TS_Stop+0x108>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d108      	bne.n	800373a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003728:	bf00      	nop
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HW_TS_Stop+0xfc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f7      	bne.n	800372a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <HW_TS_Stop+0xfc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HW_TS_Stop+0xfc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800374e:	bf00      	nop
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HW_TS_Stop+0xfc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f7      	beq.n	8003750 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HW_TS_Stop+0xfc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HW_TS_Stop+0xfc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003774:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HW_TS_Stop+0x10c>)
 8003778:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800377c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800377e:	2003      	movs	r0, #3
 8003780:	f004 ff23 	bl	80085ca <HAL_NVIC_ClearPendingIRQ>
 8003784:	e007      	b.n	8003796 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HW_TS_Stop+0x110>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	7cfa      	ldrb	r2, [r7, #19]
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003792:	f7ff fd3f 	bl	8003214 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HW_TS_Stop+0xfc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80037a0:	2003      	movs	r0, #3
 80037a2:	f004 fee4 	bl	800856e <HAL_NVIC_EnableIRQ>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80037b0:	bf00      	nop
}
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000c34 	.word	0x20000c34
 80037bc:	200002dc 	.word	0x200002dc
 80037c0:	2000036c 	.word	0x2000036c
 80037c4:	40002800 	.word	0x40002800
 80037c8:	58000800 	.word	0x58000800
 80037cc:	2000036d 	.word	0x2000036d

080037d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80037dc:	79fa      	ldrb	r2, [r7, #7]
 80037de:	493b      	ldr	r1, [pc, #236]	; (80038cc <HW_TS_Start+0xfc>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	440b      	add	r3, r1
 80037ea:	330c      	adds	r3, #12
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d103      	bne.n	80037fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ff60 	bl	80036bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003800:	60fb      	str	r3, [r7, #12]
  return(result);
 8003802:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003806:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003808:	2003      	movs	r0, #3
 800380a:	f004 febe 	bl	800858a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800380e:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HW_TS_Start+0x100>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	22ca      	movs	r2, #202	; 0xca
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
 8003818:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <HW_TS_Start+0x100>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2253      	movs	r2, #83	; 0x53
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003822:	79fa      	ldrb	r2, [r7, #7]
 8003824:	4929      	ldr	r1, [pc, #164]	; (80038cc <HW_TS_Start+0xfc>)
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	330c      	adds	r3, #12
 8003832:	2202      	movs	r2, #2
 8003834:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003836:	79fa      	ldrb	r2, [r7, #7]
 8003838:	4924      	ldr	r1, [pc, #144]	; (80038cc <HW_TS_Start+0xfc>)
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	3308      	adds	r3, #8
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800384a:	79fa      	ldrb	r2, [r7, #7]
 800384c:	491f      	ldr	r1, [pc, #124]	; (80038cc <HW_TS_Start+0xfc>)
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	440b      	add	r3, r1
 8003858:	3304      	adds	r3, #4
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fb0b 	bl	8002e7c <linkTimer>
 8003866:	4603      	mov	r3, r0
 8003868:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HW_TS_Start+0x104>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HW_TS_Start+0x108>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	7c7a      	ldrb	r2, [r7, #17]
 8003878:	429a      	cmp	r2, r3
 800387a:	d002      	beq.n	8003882 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800387c:	f7ff fcca 	bl	8003214 <RescheduleTimerList>
 8003880:	e013      	b.n	80038aa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003882:	79fa      	ldrb	r2, [r7, #7]
 8003884:	4911      	ldr	r1, [pc, #68]	; (80038cc <HW_TS_Start+0xfc>)
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	3308      	adds	r3, #8
 8003892:	6819      	ldr	r1, [r3, #0]
 8003894:	8a7b      	ldrh	r3, [r7, #18]
 8003896:	79fa      	ldrb	r2, [r7, #7]
 8003898:	1ac9      	subs	r1, r1, r3
 800389a:	480c      	ldr	r0, [pc, #48]	; (80038cc <HW_TS_Start+0xfc>)
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4403      	add	r3, r0
 80038a6:	3308      	adds	r3, #8
 80038a8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HW_TS_Start+0x100>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80038b4:	2003      	movs	r0, #3
 80038b6:	f004 fe5a 	bl	800856e <HAL_NVIC_EnableIRQ>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80038c4:	bf00      	nop
}
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200002dc 	.word	0x200002dc
 80038d0:	20000c34 	.word	0x20000c34
 80038d4:	2000036c 	.word	0x2000036c
 80038d8:	2000036d 	.word	0x2000036d

080038dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	460b      	mov	r3, r1
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4798      	blx	r3

  return;
 80038ee:	bf00      	nop
}
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <LL_AHB2_GRP1_EnableClock>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4013      	ands	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800391a:	68fb      	ldr	r3, [r7, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4313      	orrs	r3, r2
 800393e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800394c:	68fb      	ldr	r3, [r7, #12]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <MX_I2C1_Init+0x74>)
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <MX_I2C1_Init+0x78>)
 8003964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <MX_I2C1_Init+0x74>)
 8003968:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <MX_I2C1_Init+0x7c>)
 800396a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <MX_I2C1_Init+0x74>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <MX_I2C1_Init+0x74>)
 8003974:	2201      	movs	r2, #1
 8003976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <MX_I2C1_Init+0x74>)
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800397e:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <MX_I2C1_Init+0x74>)
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <MX_I2C1_Init+0x74>)
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <MX_I2C1_Init+0x74>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <MX_I2C1_Init+0x74>)
 8003992:	2200      	movs	r2, #0
 8003994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003996:	480e      	ldr	r0, [pc, #56]	; (80039d0 <MX_I2C1_Init+0x74>)
 8003998:	f005 fb42 	bl	8009020 <HAL_I2C_Init>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039a2:	f000 fd95 	bl	80044d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039a6:	2100      	movs	r1, #0
 80039a8:	4809      	ldr	r0, [pc, #36]	; (80039d0 <MX_I2C1_Init+0x74>)
 80039aa:	f007 fafb 	bl	800afa4 <HAL_I2CEx_ConfigAnalogFilter>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039b4:	f000 fd8c 	bl	80044d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039b8:	2100      	movs	r1, #0
 80039ba:	4805      	ldr	r0, [pc, #20]	; (80039d0 <MX_I2C1_Init+0x74>)
 80039bc:	f007 fb3d 	bl	800b03a <HAL_I2CEx_ConfigDigitalFilter>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039c6:	f000 fd83 	bl	80044d0 <Error_Handler>
  }

}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20028250 	.word	0x20028250
 80039d4:	40005400 	.word	0x40005400
 80039d8:	00e27cae 	.word	0x00e27cae

080039dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <HAL_I2C_MspInit+0x6c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d120      	bne.n	8003a40 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fe:	2001      	movs	r0, #1
 8003a00:	f7ff ff79 	bl	80038f6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a0a:	2312      	movs	r3, #18
 8003a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a16:	2304      	movs	r3, #4
 8003a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1a:	f107 030c 	add.w	r3, r7, #12
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a24:	f005 f920 	bl	8008c68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a28:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a2c:	f7ff ff7c 	bl	8003928 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2105      	movs	r1, #5
 8003a34:	201e      	movs	r0, #30
 8003a36:	f004 fd80 	bl	800853a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003a3a:	201e      	movs	r0, #30
 8003a3c:	f004 fd97 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003a40:	bf00      	nop
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40005400 	.word	0x40005400

08003a4c <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 8003a54:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <InertialSensingTask+0xec>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8003a5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a5e:	2120      	movs	r1, #32
 8003a60:	204a      	movs	r0, #74	; 0x4a
 8003a62:	f7fe f8bf 	bl	8001be4 <IMU_begin>
#endif

	uint32_t evt = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2001      	movs	r0, #1
 8003a72:	f010 fedf 	bl	8014834 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 8003a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a7a:	f010 ff6f 	bl	801495c <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003a7e:	2064      	movs	r0, #100	; 0x64
 8003a80:	f7fe fbaa 	bl	80021d8 <IMU_enableRotationVector>
		osDelay(100);
 8003a84:	2064      	movs	r0, #100	; 0x64
 8003a86:	f010 ff69 	bl	801495c <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <InertialSensingTask+0xf0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2c      	ldr	r2, [pc, #176]	; (8003b40 <InertialSensingTask+0xf4>)
 8003a90:	4619      	mov	r1, r3
 8003a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a96:	f7fe fbad 	bl	80021f4 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003a9a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003a9e:	f010 ff5d 	bl	801495c <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003aa2:	2064      	movs	r0, #100	; 0x64
 8003aa4:	f010 ff5a 	bl	801495c <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003aa8:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <InertialSensingTask+0xf8>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	2364      	movs	r3, #100	; 0x64
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4925      	ldr	r1, [pc, #148]	; (8003b48 <InertialSensingTask+0xfc>)
 8003ab2:	f011 fc43 	bl	801533c <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003ab6:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <InertialSensingTask+0x100>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2200      	movs	r2, #0
 8003abe:	4924      	ldr	r1, [pc, #144]	; (8003b50 <InertialSensingTask+0x104>)
 8003ac0:	f011 fc3c 	bl	801533c <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <InertialSensingTask+0x108>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2200      	movs	r2, #0
 8003acc:	491e      	ldr	r1, [pc, #120]	; (8003b48 <InertialSensingTask+0xfc>)
 8003ace:	f011 fbc1 	bl	8015254 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad8:	f005 fa36 	bl	8008f48 <HAL_GPIO_ReadPin>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <InertialSensingTask+0x9a>
 8003ae2:	f7fe f8b7 	bl	8001c54 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2100      	movs	r1, #0
 8003aea:	2002      	movs	r0, #2
 8003aec:	f010 fea2 	bl	8014834 <osThreadFlagsWait>
 8003af0:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0d2      	beq.n	8003aa2 <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003afc:	f7fe fb0c 	bl	8002118 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b04:	f010 ff2a 	bl	801495c <osDelay>

				inertialEnabled = 0;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <InertialSensingTask+0xec>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <InertialSensingTask+0x108>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f011 fc84 	bl	8015420 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <InertialSensingTask+0x100>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f011 fc7f 	bl	8015420 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <InertialSensingTask+0xf8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f011 fc7a 	bl	8015420 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003b2c:	200e      	movs	r0, #14
 8003b2e:	f010 fe31 	bl	8014794 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003b32:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b34:	e799      	b.n	8003a6a <InertialSensingTask+0x1e>
 8003b36:	bf00      	nop
 8003b38:	20000c3e 	.word	0x20000c3e
 8003b3c:	20000068 	.word	0x20000068
 8003b40:	200282e0 	.word	0x200282e0
 8003b44:	20027c68 	.word	0x20027c68
 8003b48:	200282a4 	.word	0x200282a4
 8003b4c:	20027c44 	.word	0x20027c44
 8003b50:	200282bc 	.word	0x200282bc
 8003b54:	20027c54 	.word	0x20027c54

08003b58 <HAL_GPIO_EXTI_Callback>:
//
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d105      	bne.n	8003b74 <HAL_GPIO_EXTI_Callback+0x1c>
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <HAL_GPIO_EXTI_Callback+0x24>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003b70:	f7fe f870 	bl	8001c54 <IMU_dataAvailable>
	}
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000c3e 	.word	0x20000c3e

08003b80 <_Input>:
#include "string.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003b8c:	480b      	ldr	r0, [pc, #44]	; (8003bbc <_Input+0x3c>)
 8003b8e:	f7fe fd21 	bl	80025d4 <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003b92:	2101      	movs	r1, #1
 8003b94:	480a      	ldr	r0, [pc, #40]	; (8003bc0 <_Input+0x40>)
 8003b96:	f000 ff9f 	bl	8004ad8 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <_Input+0x40>)
 8003b9c:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <_Input+0x3c>)
 8003b9e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <_Input+0x40>)
 8003ba6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2002830c 	.word	0x2002830c
 8003bc0:	20028394 	.word	0x20028394

08003bc4 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f010 fe2c 	bl	8014834 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003bdc:	4818      	ldr	r0, [pc, #96]	; (8003c40 <PulseHandlerTask+0x7c>)
 8003bde:	f00a fba5 	bl	800e32c <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003be2:	4818      	ldr	r0, [pc, #96]	; (8003c44 <PulseHandlerTask+0x80>)
 8003be4:	f004 fac2 	bl	800816c <HAL_COMP_Start>
		_Input(&input0, 0);
 8003be8:	2100      	movs	r1, #0
 8003bea:	4817      	ldr	r0, [pc, #92]	; (8003c48 <PulseHandlerTask+0x84>)
 8003bec:	f7ff ffc8 	bl	8003b80 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003bf0:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <PulseHandlerTask+0x88>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4915      	ldr	r1, [pc, #84]	; (8003c50 <PulseHandlerTask+0x8c>)
 8003bfc:	f011 fb9e 	bl	801533c <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <PulseHandlerTask+0x84>)
 8003c02:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003c06:	4912      	ldr	r1, [pc, #72]	; (8003c50 <PulseHandlerTask+0x8c>)
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 ff99 	bl	8004b40 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	2002      	movs	r0, #2
 8003c14:	f010 fe0e 	bl	8014834 <osThreadFlagsWait>
 8003c18:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0e5      	beq.n	8003bf0 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003c24:	4807      	ldr	r0, [pc, #28]	; (8003c44 <PulseHandlerTask+0x80>)
 8003c26:	f004 faeb 	bl	8008200 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003c2a:	4805      	ldr	r0, [pc, #20]	; (8003c40 <PulseHandlerTask+0x7c>)
 8003c2c:	f00a fbc4 	bl	800e3b8 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <PulseHandlerTask+0x88>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f011 fbf3 	bl	8015420 <osMessageQueueReset>
				break;
 8003c3a:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003c3c:	e7c8      	b.n	8003bd0 <PulseHandlerTask+0xc>
 8003c3e:	bf00      	nop
 8003c40:	200288a4 	.word	0x200288a4
 8003c44:	200280c0 	.word	0x200280c0
 8003c48:	20027c6c 	.word	0x20027c6c
 8003c4c:	20027b48 	.word	0x20027b48
 8003c50:	200282ec 	.word	0x200282ec

08003c54 <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003c66:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <get3D_location+0x110>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f011 f9ad 	bl	8014fcc <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <get3D_location+0x114>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f011 f9a7 	bl	8014fcc <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <get3D_location+0x118>)
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	2200      	movs	r2, #0
 8003c88:	4939      	ldr	r1, [pc, #228]	; (8003d70 <get3D_location+0x11c>)
 8003c8a:	f011 fb57 	bl	801533c <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <get3D_location+0x11c>)
 8003c90:	789b      	ldrb	r3, [r3, #2]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d116      	bne.n	8003cc4 <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003c96:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <get3D_location+0x118>)
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	4934      	ldr	r1, [pc, #208]	; (8003d70 <get3D_location+0x11c>)
 8003ca0:	f011 fad8 	bl	8015254 <osMessageQueuePut>

		blinkActive = 1;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <get3D_location+0x120>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2102      	movs	r1, #2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f010 fd0e 	bl	80146d0 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <get3D_location+0x114>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f011 f985 	bl	8014fcc <osSemaphoreAcquire>
 8003cc2:	e006      	b.n	8003cd2 <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <get3D_location+0x118>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4928      	ldr	r1, [pc, #160]	; (8003d70 <get3D_location+0x11c>)
 8003cce:	f011 fac1 	bl	8015254 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <get3D_location+0x124>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f011 f976 	bl	8014fcc <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <get3D_location+0x128>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f010 fcf2 	bl	80146d0 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <get3D_location+0x110>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f011 f969 	bl	8014fcc <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d119      	bne.n	8003d34 <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003d00:	e00f      	b.n	8003d22 <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <get3D_location+0x12c>)
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	491d      	ldr	r1, [pc, #116]	; (8003d84 <get3D_location+0x130>)
 8003d0e:	f011 fb15 	bl	801533c <osMessageQueueGet>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <get3D_location+0x134>)
 8003d1a:	2118      	movs	r1, #24
 8003d1c:	4819      	ldr	r0, [pc, #100]	; (8003d84 <get3D_location+0x130>)
 8003d1e:	f015 fb59 	bl	80193d4 <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <get3D_location+0x138>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f011 f94f 	bl	8014fcc <osSemaphoreAcquire>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e6      	bne.n	8003d02 <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <get3D_location+0x124>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f011 f9ad 	bl	8015098 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <get3D_location+0x128>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f010 fcc3 	bl	80146d0 <osThreadFlagsSet>

	if(blinkActive){
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <get3D_location+0x120>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f010 fcba 	bl	80146d0 <osThreadFlagsSet>
	}

}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20028090 	.word	0x20028090
 8003d68:	20028098 	.word	0x20028098
 8003d6c:	20027c64 	.word	0x20027c64
 8003d70:	200280b4 	.word	0x200280b4
 8003d74:	20027c34 	.word	0x20027c34
 8003d78:	20027c50 	.word	0x20027c50
 8003d7c:	2002809c 	.word	0x2002809c
 8003d80:	20027b4c 	.word	0x20027b4c
 8003d84:	20028664 	.word	0x20028664
 8003d88:	0801c864 	.word	0x0801c864
 8003d8c:	20027c5c 	.word	0x20027c5c

08003d90 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003da6:	723b      	strb	r3, [r7, #8]
 8003da8:	887b      	ldrh	r3, [r7, #2]
 8003daa:	817b      	strh	r3, [r7, #10]
 8003dac:	883b      	ldrh	r3, [r7, #0]
 8003dae:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <enqueue_pulse+0x38>)
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f107 0108 	add.w	r1, r7, #8
 8003db8:	2300      	movs	r3, #0
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f011 fa4a 	bl	8015254 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20027b48 	.word	0x20027b48

08003dcc <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003dd8:	4b8e      	ldr	r3, [pc, #568]	; (8004014 <InterProcessorTask+0x248>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	4618      	mov	r0, r3
 8003de2:	f011 f8f3 	bl	8014fcc <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003de6:	e00e      	b.n	8003e06 <InterProcessorTask+0x3a>
		osSemaphoreRelease(messageI2C_LockHandle);
 8003de8:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <InterProcessorTask+0x248>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f011 f953 	bl	8015098 <osSemaphoreRelease>
		osDelay(100);
 8003df2:	2064      	movs	r0, #100	; 0x64
 8003df4:	f010 fdb2 	bl	801495c <osDelay>
		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003df8:	4b86      	ldr	r3, [pc, #536]	; (8004014 <InterProcessorTask+0x248>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	4618      	mov	r0, r3
 8003e02:	f011 f8e3 	bl	8014fcc <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003e06:	2364      	movs	r3, #100	; 0x64
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	4a82      	ldr	r2, [pc, #520]	; (8004018 <InterProcessorTask+0x24c>)
 8003e0e:	21e6      	movs	r1, #230	; 0xe6
 8003e10:	4882      	ldr	r0, [pc, #520]	; (800401c <InterProcessorTask+0x250>)
 8003e12:	f005 f995 	bl	8009140 <HAL_I2C_Master_Transmit>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <InterProcessorTask+0x1c>
	};
	osSemaphoreRelease(messageI2C_LockHandle);
 8003e1c:	4b7d      	ldr	r3, [pc, #500]	; (8004014 <InterProcessorTask+0x248>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f011 f939 	bl	8015098 <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003e26:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f010 fd01 	bl	8014834 <osThreadFlagsWait>
 8003e32:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f3      	beq.n	8003e26 <InterProcessorTask+0x5a>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003e3e:	4b78      	ldr	r3, [pc, #480]	; (8004020 <InterProcessorTask+0x254>)
 8003e40:	4a78      	ldr	r2, [pc, #480]	; (8004024 <InterProcessorTask+0x258>)
 8003e42:	6811      	ldr	r1, [r2, #0]
 8003e44:	6019      	str	r1, [r3, #0]
 8003e46:	8892      	ldrh	r2, [r2, #4]
 8003e48:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e4a:	4b72      	ldr	r3, [pc, #456]	; (8004014 <InterProcessorTask+0x248>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e52:	4618      	mov	r0, r3
 8003e54:	f011 f8ba 	bl	8014fcc <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003e58:	e00e      	b.n	8003e78 <InterProcessorTask+0xac>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003e5a:	4b6e      	ldr	r3, [pc, #440]	; (8004014 <InterProcessorTask+0x248>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f011 f91a 	bl	8015098 <osSemaphoreRelease>
					osDelay(100);
 8003e64:	2064      	movs	r0, #100	; 0x64
 8003e66:	f010 fd79 	bl	801495c <osDelay>
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <InterProcessorTask+0x248>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e72:	4618      	mov	r0, r3
 8003e74:	f011 f8aa 	bl	8014fcc <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003e78:	2364      	movs	r3, #100	; 0x64
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2306      	movs	r3, #6
 8003e7e:	4a68      	ldr	r2, [pc, #416]	; (8004020 <InterProcessorTask+0x254>)
 8003e80:	21e6      	movs	r1, #230	; 0xe6
 8003e82:	4866      	ldr	r0, [pc, #408]	; (800401c <InterProcessorTask+0x250>)
 8003e84:	f005 f95c 	bl	8009140 <HAL_I2C_Master_Transmit>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e5      	bne.n	8003e5a <InterProcessorTask+0x8e>
				}
			osDelay(100);
 8003e8e:	2064      	movs	r0, #100	; 0x64
 8003e90:	f010 fd64 	bl	801495c <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003e94:	4b5f      	ldr	r3, [pc, #380]	; (8004014 <InterProcessorTask+0x248>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f011 f8fd 	bl	8015098 <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2006      	movs	r0, #6
 8003ea6:	f010 fcc5 	bl	8014834 <osThreadFlagsWait>
 8003eaa:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d079      	beq.n	8003faa <InterProcessorTask+0x1de>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003eb6:	4b57      	ldr	r3, [pc, #348]	; (8004014 <InterProcessorTask+0x248>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f011 f884 	bl	8014fcc <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003ec4:	e00e      	b.n	8003ee4 <InterProcessorTask+0x118>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <InterProcessorTask+0x248>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f011 f8e4 	bl	8015098 <osSemaphoreRelease>
 						osDelay(100);
 8003ed0:	2064      	movs	r0, #100	; 0x64
 8003ed2:	f010 fd43 	bl	801495c <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003ed6:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <InterProcessorTask+0x248>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f04f 31ff 	mov.w	r1, #4294967295
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f011 f874 	bl	8014fcc <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003ee4:	2364      	movs	r3, #100	; 0x64
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2306      	movs	r3, #6
 8003eea:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <InterProcessorTask+0x254>)
 8003eec:	21e6      	movs	r1, #230	; 0xe6
 8003eee:	484b      	ldr	r0, [pc, #300]	; (800401c <InterProcessorTask+0x250>)
 8003ef0:	f005 f926 	bl	8009140 <HAL_I2C_Master_Transmit>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e5      	bne.n	8003ec6 <InterProcessorTask+0xfa>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003efa:	2008      	movs	r0, #8
 8003efc:	f010 fc4a 	bl	8014794 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003f00:	e00e      	b.n	8003f20 <InterProcessorTask+0x154>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003f02:	4b44      	ldr	r3, [pc, #272]	; (8004014 <InterProcessorTask+0x248>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f011 f8c6 	bl	8015098 <osSemaphoreRelease>
 						osDelay(100);
 8003f0c:	2064      	movs	r0, #100	; 0x64
 8003f0e:	f010 fd25 	bl	801495c <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f12:	4b40      	ldr	r3, [pc, #256]	; (8004014 <InterProcessorTask+0x248>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f04f 31ff 	mov.w	r1, #4294967295
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f011 f856 	bl	8014fcc <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003f20:	2358      	movs	r3, #88	; 0x58
 8003f22:	4a41      	ldr	r2, [pc, #260]	; (8004028 <InterProcessorTask+0x25c>)
 8003f24:	21e6      	movs	r1, #230	; 0xe6
 8003f26:	483d      	ldr	r0, [pc, #244]	; (800401c <InterProcessorTask+0x250>)
 8003f28:	f005 faf4 	bl	8009514 <HAL_I2C_Master_Receive_IT>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e7      	bne.n	8003f02 <InterProcessorTask+0x136>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003f32:	f04f 32ff 	mov.w	r2, #4294967295
 8003f36:	2100      	movs	r1, #0
 8003f38:	200a      	movs	r0, #10
 8003f3a:	f010 fc7b 	bl	8014834 <osThreadFlagsWait>
 8003f3e:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003f40:	4b34      	ldr	r3, [pc, #208]	; (8004014 <InterProcessorTask+0x248>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f011 f8a7 	bl	8015098 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d15d      	bne.n	8004010 <InterProcessorTask+0x244>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <InterProcessorTask+0x25c>)
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <InterProcessorTask+0x260>)
 8003f5a:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <InterProcessorTask+0x25c>)
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	4a32      	ldr	r2, [pc, #200]	; (800402c <InterProcessorTask+0x260>)
 8003f62:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	e01c      	b.n	8003fa4 <InterProcessorTask+0x1d8>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4a2e      	ldr	r2, [pc, #184]	; (8004028 <InterProcessorTask+0x25c>)
 8003f70:	4413      	add	r3, r2
 8003f72:	2208      	movs	r2, #8
 8003f74:	4619      	mov	r1, r3
 8003f76:	482d      	ldr	r0, [pc, #180]	; (800402c <InterProcessorTask+0x260>)
 8003f78:	f017 fa9e 	bl	801b4b8 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3305      	adds	r3, #5
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4a29      	ldr	r2, [pc, #164]	; (8004028 <InterProcessorTask+0x25c>)
 8003f84:	4413      	add	r3, r2
 8003f86:	2208      	movs	r2, #8
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4829      	ldr	r0, [pc, #164]	; (8004030 <InterProcessorTask+0x264>)
 8003f8c:	f017 fa94 	bl	801b4b8 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <InterProcessorTask+0x268>)
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	2200      	movs	r2, #0
 8003f98:	4924      	ldr	r1, [pc, #144]	; (800402c <InterProcessorTask+0x260>)
 8003f9a:	f011 f95b 	bl	8015254 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	dddf      	ble.n	8003f6a <InterProcessorTask+0x19e>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f43f af74 	beq.w	8003e9e <InterProcessorTask+0xd2>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003fb6:	4b17      	ldr	r3, [pc, #92]	; (8004014 <InterProcessorTask+0x248>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f011 f804 	bl	8014fcc <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003fc4:	e00e      	b.n	8003fe4 <InterProcessorTask+0x218>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <InterProcessorTask+0x248>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f011 f864 	bl	8015098 <osSemaphoreRelease>
 						osDelay(100);
 8003fd0:	2064      	movs	r0, #100	; 0x64
 8003fd2:	f010 fcc3 	bl	801495c <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <InterProcessorTask+0x248>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f04f 31ff 	mov.w	r1, #4294967295
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f010 fff4 	bl	8014fcc <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003fe4:	2364      	movs	r3, #100	; 0x64
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2306      	movs	r3, #6
 8003fea:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <InterProcessorTask+0x24c>)
 8003fec:	21e6      	movs	r1, #230	; 0xe6
 8003fee:	480b      	ldr	r0, [pc, #44]	; (800401c <InterProcessorTask+0x250>)
 8003ff0:	f005 f8a6 	bl	8009140 <HAL_I2C_Master_Transmit>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e5      	bne.n	8003fc6 <InterProcessorTask+0x1fa>
 					};
					osSemaphoreRelease(messageI2C_LockHandle);
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <InterProcessorTask+0x248>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f011 f84a 	bl	8015098 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <InterProcessorTask+0x268>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f011 fa09 	bl	8015420 <osMessageQueueReset>

					break;
 800400e:	e000      	b.n	8004012 <InterProcessorTask+0x246>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8004010:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8004012:	e708      	b.n	8003e26 <InterProcessorTask+0x5a>
 8004014:	20027c50 	.word	0x20027c50
 8004018:	0801ce38 	.word	0x0801ce38
 800401c:	20028250 	.word	0x20028250
 8004020:	200286d4 	.word	0x200286d4
 8004024:	20027b50 	.word	0x20027b50
 8004028:	2002867c 	.word	0x2002867c
 800402c:	200286dc 	.word	0x200286dc
 8004030:	200286e4 	.word	0x200286e4
 8004034:	20027c60 	.word	0x20027c60

08004038 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2110      	movs	r1, #16
 8004046:	4618      	mov	r0, r3
 8004048:	f010 fb42 	bl	80146d0 <osThreadFlagsSet>
	test_1 = 1;
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20028094 	.word	0x20028094
 8004060:	20000c3f 	.word	0x20000c3f

08004064 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2108      	movs	r1, #8
 8004072:	4618      	mov	r0, r3
 8004074:	f010 fb2c 	bl	80146d0 <osThreadFlagsSet>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20028094 	.word	0x20028094

08004084 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af04      	add	r7, sp, #16
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <setup_LP5523+0xcc>)
 8004096:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <setup_LP5523+0xd0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f04f 31ff 	mov.w	r1, #4294967295
 80040a0:	4618      	mov	r0, r3
 80040a2:	f010 ff93 	bl	8014fcc <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <setup_LP5523+0xd4>)
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 80040ac:	4b28      	ldr	r3, [pc, #160]	; (8004150 <setup_LP5523+0xcc>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b299      	uxth	r1, r3
 80040b2:	2364      	movs	r3, #100	; 0x64
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	2301      	movs	r3, #1
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <setup_LP5523+0xd4>)
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2301      	movs	r3, #1
 80040c0:	2200      	movs	r2, #0
 80040c2:	4826      	ldr	r0, [pc, #152]	; (800415c <setup_LP5523+0xd8>)
 80040c4:	f005 fa96 	bl	80095f4 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <setup_LP5523+0xd4>)
 80040ca:	224f      	movs	r2, #79	; 0x4f
 80040cc:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <setup_LP5523+0xcc>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b299      	uxth	r1, r3
 80040d4:	2364      	movs	r3, #100	; 0x64
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2301      	movs	r3, #1
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <setup_LP5523+0xd4>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2301      	movs	r3, #1
 80040e2:	2236      	movs	r2, #54	; 0x36
 80040e4:	481d      	ldr	r0, [pc, #116]	; (800415c <setup_LP5523+0xd8>)
 80040e6:	f005 fa85 	bl	80095f4 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <setup_LP5523+0xcc>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b299      	uxth	r1, r3
 80040f0:	2364      	movs	r3, #100	; 0x64
 80040f2:	9302      	str	r3, [sp, #8]
 80040f4:	2309      	movs	r3, #9
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <setup_LP5523+0xdc>)
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2301      	movs	r3, #1
 80040fe:	2216      	movs	r2, #22
 8004100:	4816      	ldr	r0, [pc, #88]	; (800415c <setup_LP5523+0xd8>)
 8004102:	f005 fa77 	bl	80095f4 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <setup_LP5523+0xcc>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b299      	uxth	r1, r3
 800410c:	2364      	movs	r3, #100	; 0x64
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	2309      	movs	r3, #9
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <setup_LP5523+0xe0>)
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2301      	movs	r3, #1
 800411a:	2226      	movs	r2, #38	; 0x26
 800411c:	480f      	ldr	r0, [pc, #60]	; (800415c <setup_LP5523+0xd8>)
 800411e:	f005 fa69 	bl	80095f4 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <setup_LP5523+0xcc>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b299      	uxth	r1, r3
 8004128:	2364      	movs	r3, #100	; 0x64
 800412a:	9302      	str	r3, [sp, #8]
 800412c:	2309      	movs	r3, #9
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <setup_LP5523+0xe4>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2301      	movs	r3, #1
 8004136:	2206      	movs	r2, #6
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <setup_LP5523+0xd8>)
 800413a:	f005 fa5b 	bl	80095f4 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <setup_LP5523+0xd0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f010 ffa8 	bl	8015098 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200286f5 	.word	0x200286f5
 8004154:	20027c50 	.word	0x20027c50
 8004158:	200286f4 	.word	0x200286f4
 800415c:	20028250 	.word	0x20028250
 8004160:	20000c58 	.word	0x20000c58
 8004164:	2000006c 	.word	0x2000006c
 8004168:	0801ce40 	.word	0x0801ce40

0800416c <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af04      	add	r7, sp, #16
 8004172:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <FrontLightsSet+0x78>)
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6810      	ldr	r0, [r2, #0]
 800417a:	6851      	ldr	r1, [r2, #4]
 800417c:	c303      	stmia	r3!, {r0, r1}
 800417e:	7a12      	ldrb	r2, [r2, #8]
 8004180:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f103 0209 	add.w	r2, r3, #9
 8004188:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <FrontLightsSet+0x7c>)
 800418a:	6810      	ldr	r0, [r2, #0]
 800418c:	6851      	ldr	r1, [r2, #4]
 800418e:	c303      	stmia	r3!, {r0, r1}
 8004190:	7a12      	ldrb	r2, [r2, #8]
 8004192:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <FrontLightsSet+0x80>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f04f 31ff 	mov.w	r1, #4294967295
 800419c:	4618      	mov	r0, r3
 800419e:	f010 ff15 	bl	8014fcc <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 80041a2:	2364      	movs	r3, #100	; 0x64
 80041a4:	9302      	str	r3, [sp, #8]
 80041a6:	2309      	movs	r3, #9
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <FrontLightsSet+0x78>)
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2301      	movs	r3, #1
 80041b0:	2216      	movs	r2, #22
 80041b2:	2168      	movs	r1, #104	; 0x68
 80041b4:	480e      	ldr	r0, [pc, #56]	; (80041f0 <FrontLightsSet+0x84>)
 80041b6:	f005 fa1d 	bl	80095f4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80041ba:	2364      	movs	r3, #100	; 0x64
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	2309      	movs	r3, #9
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <FrontLightsSet+0x7c>)
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2301      	movs	r3, #1
 80041c8:	2216      	movs	r2, #22
 80041ca:	216a      	movs	r1, #106	; 0x6a
 80041cc:	4808      	ldr	r0, [pc, #32]	; (80041f0 <FrontLightsSet+0x84>)
 80041ce:	f005 fa11 	bl	80095f4 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <FrontLightsSet+0x80>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f010 ff5e 	bl	8015098 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000c40 	.word	0x20000c40
 80041e8:	20000c4c 	.word	0x20000c4c
 80041ec:	20027c50 	.word	0x20027c50
 80041f0:	20028250 	.word	0x20028250

080041f4 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af04      	add	r7, sp, #16
 80041fa:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80041fc:	2034      	movs	r0, #52	; 0x34
 80041fe:	f7ff ff41 	bl	8004084 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8004202:	2035      	movs	r0, #53	; 0x35
 8004204:	f7ff ff3e 	bl	8004084 <setup_LP5523>
	uint8_t led_test = 1;
#endif

	while(1){

		lightsSimpleMessageReceived = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
			led_test = 0;

		}
#endif

		osDelay(1);
 800420c:	2001      	movs	r0, #1
 800420e:	f010 fba5 	bl	801495c <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <ThreadFrontLightsTask+0xdc>)
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	f107 010c 	add.w	r1, r7, #12
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	2200      	movs	r2, #0
 8004220:	f011 f88c 	bl	801533c <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e011      	b.n	800424e <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	425b      	negs	r3, r3
 8004236:	b2d9      	uxtb	r1, r3
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <ThreadFrontLightsTask+0xe0>)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	460a      	mov	r2, r1
 8004240:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b08      	cmp	r3, #8
 8004252:	ddea      	ble.n	800422a <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	e011      	b.n	800427e <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	425b      	negs	r3, r3
 8004266:	b2d9      	uxtb	r1, r3
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <ThreadFrontLightsTask+0xe4>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	460a      	mov	r2, r1
 8004270:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b08      	cmp	r3, #8
 8004282:	ddea      	ble.n	800425a <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <ThreadFrontLightsTask+0xe8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	4618      	mov	r0, r3
 800428e:	f010 fe9d 	bl	8014fcc <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004292:	2364      	movs	r3, #100	; 0x64
 8004294:	9302      	str	r3, [sp, #8]
 8004296:	2309      	movs	r3, #9
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <ThreadFrontLightsTask+0xe0>)
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2301      	movs	r3, #1
 80042a0:	2216      	movs	r2, #22
 80042a2:	2168      	movs	r1, #104	; 0x68
 80042a4:	480e      	ldr	r0, [pc, #56]	; (80042e0 <ThreadFrontLightsTask+0xec>)
 80042a6:	f005 f9a5 	bl	80095f4 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80042aa:	2364      	movs	r3, #100	; 0x64
 80042ac:	9302      	str	r3, [sp, #8]
 80042ae:	2309      	movs	r3, #9
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <ThreadFrontLightsTask+0xe4>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2301      	movs	r3, #1
 80042b8:	2216      	movs	r2, #22
 80042ba:	216a      	movs	r1, #106	; 0x6a
 80042bc:	4808      	ldr	r0, [pc, #32]	; (80042e0 <ThreadFrontLightsTask+0xec>)
 80042be:	f005 f999 	bl	80095f4 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <ThreadFrontLightsTask+0xe8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f010 fee6 	bl	8015098 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 80042cc:	e79c      	b.n	8004208 <ThreadFrontLightsTask+0x14>
 80042ce:	bf00      	nop
 80042d0:	20027c58 	.word	0x20027c58
 80042d4:	20000c40 	.word	0x20000c40
 80042d8:	20000c4c 	.word	0x20000c4c
 80042dc:	20027c50 	.word	0x20027c50
 80042e0:	20028250 	.word	0x20028250

080042e4 <LL_RCC_LSE_SetDriveCapability>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f023 0218 	bic.w	r2, r3, #24
 80042f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004314:	f002 fad4 	bl	80068c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004318:	f000 f822 	bl	8004360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800431c:	f7fe fc30 	bl	8002b80 <MX_GPIO_Init>
  MX_DMA_Init();
 8004320:	f7fd fc4d 	bl	8001bbe <MX_DMA_Init>
  MX_ADC1_Init();
 8004324:	f7fc fd8c 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 8004328:	f000 ff46 	bl	80051b8 <MX_RTC_Init>
  MX_TIM2_Init();
 800432c:	f001 fd1a 	bl	8005d64 <MX_TIM2_Init>
  MX_RF_Init();
 8004330:	f000 ff10 	bl	8005154 <MX_RF_Init>
  MX_I2C1_Init();
 8004334:	f7ff fb12 	bl	800395c <MX_I2C1_Init>
  MX_COMP1_Init();
 8004338:	f7fd fb2e 	bl	8001998 <MX_COMP1_Init>
  MX_TIM16_Init();
 800433c:	f001 fda8 	bl	8005e90 <MX_TIM16_Init>
  MX_USB_Device_Init();
 8004340:	f016 f868 	bl	801a414 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 8004344:	f002 f9ca 	bl	80066dc <MX_TSC_Init>

#ifndef BORDER_ROUTER_NODE
  USBD_Stop(&hUsbDeviceFS);
 8004348:	4804      	ldr	r0, [pc, #16]	; (800435c <main+0x4c>)
 800434a:	f00d f8c6 	bl	80114da <USBD_Stop>
//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800434e:	f010 f8af 	bl	80144b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004352:	f7fd f829 	bl	80013a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8004356:	f010 f8df 	bl	8014518 <osKernelStart>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//
//	// start timer
//	HAL_TIM_Base_Start(&htim2);

  while (1)
 800435a:	e7fe      	b.n	800435a <main+0x4a>
 800435c:	20028a28 	.word	0x20028a28

08004360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b0ae      	sub	sp, #184	; 0xb8
 8004364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004366:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800436a:	2248      	movs	r2, #72	; 0x48
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f017 f8ad 	bl	801b4ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	611a      	str	r2, [r3, #16]
 8004384:	615a      	str	r2, [r3, #20]
 8004386:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	2250      	movs	r2, #80	; 0x50
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f017 f89d 	bl	801b4ce <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a2:	f043 0310 	orr.w	r3, r3, #16
 80043a6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b2:	f043 0303 	orr.w	r3, r3, #3
 80043b6:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80043b8:	f007 fde6 	bl	800bf88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80043bc:	2000      	movs	r0, #0
 80043be:	f7ff ff91 	bl	80042e4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <SystemClock_Config+0x148>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ca:	4a37      	ldr	r2, [pc, #220]	; (80044a8 <SystemClock_Config+0x148>)
 80043cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <SystemClock_Config+0x148>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80043de:	2307      	movs	r3, #7
 80043e0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80043e8:	2301      	movs	r3, #1
 80043ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043f2:	2340      	movs	r3, #64	; 0x40
 80043f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004402:	4618      	mov	r0, r3
 8004404:	f008 f970 	bl	800c6e8 <HAL_RCC_OscConfig>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800440e:	f000 f85f 	bl	80044d0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004412:	236f      	movs	r3, #111	; 0x6f
 8004414:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004416:	2302      	movs	r3, #2
 8004418:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800441a:	2300      	movs	r3, #0
 800441c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800441e:	2300      	movs	r3, #0
 8004420:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004422:	2300      	movs	r3, #0
 8004424:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004426:	2300      	movs	r3, #0
 8004428:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800442a:	2300      	movs	r3, #0
 800442c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800442e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f008 fce3 	bl	800ce00 <HAL_RCC_ClockConfig>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004440:	f000 f846 	bl	80044d0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8004444:	f643 5304 	movw	r3, #15620	; 0x3d04
 8004448:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800444a:	2306      	movs	r3, #6
 800444c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800444e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004452:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004458:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800445a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800445e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8004460:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8004464:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004466:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800446c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004472:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004476:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8004478:	f44f 7340 	mov.w	r3, #768	; 0x300
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800447e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004484:	2302      	movs	r3, #2
 8004486:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004488:	2310      	movs	r3, #16
 800448a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f009 f911 	bl	800d6b6 <HAL_RCCEx_PeriphCLKConfig>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800449a:	f000 f819 	bl	80044d0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800449e:	bf00      	nop
 80044a0:	37b8      	adds	r7, #184	; 0xb8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	58000400 	.word	0x58000400

080044ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044be:	f002 fa1f 	bl	8006900 <HAL_IncTick>
//	 HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
//  }
//#endif
//}
  /* USER CODE END Callback 1 */
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00

080044d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <MasterThreadTask>:
uint32_t startTime = 0;
uint32_t viveStateVar = 0;
uint64_t waitTime = 0;
uint32_t lightsSimpleMessageAck = 0;

void MasterThreadTask(void *argument) {
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	6078      	str	r0, [r7, #4]
#ifndef TEST_RUN_ON_START
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
		osWaitForever);
#endif

		togLogMessageReceived.status = 1;
 80044e8:	4b83      	ldr	r3, [pc, #524]	; (80046f8 <MasterThreadTask+0x218>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
		togLogMessageReceived.logStatus = 1;
 80044ee:	4b82      	ldr	r3, [pc, #520]	; (80046f8 <MasterThreadTask+0x218>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	705a      	strb	r2, [r3, #1]
		togLogMessageReceived.blinkEnabled = 1;
 80044f4:	4b80      	ldr	r3, [pc, #512]	; (80046f8 <MasterThreadTask+0x218>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	709a      	strb	r2, [r3, #2]
		togLogMessageReceived.tempEnabled = 0;
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <MasterThreadTask+0x218>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	70da      	strb	r2, [r3, #3]
		togLogMessageReceived.positionEnabled = 0;
 8004500:	4b7d      	ldr	r3, [pc, #500]	; (80046f8 <MasterThreadTask+0x218>)
 8004502:	2200      	movs	r2, #0
 8004504:	715a      	strb	r2, [r3, #5]
		togLogMessageReceived.intertialEnabled = 0;
 8004506:	4b7c      	ldr	r3, [pc, #496]	; (80046f8 <MasterThreadTask+0x218>)
 8004508:	2200      	movs	r2, #0
 800450a:	711a      	strb	r2, [r3, #4]
#ifndef TEST_RUN_ON_START
		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
#else
		logEnabled = 0;
 800450c:	4b7b      	ldr	r3, [pc, #492]	; (80046fc <MasterThreadTask+0x21c>)
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
		togLogMessageReceived.logStatus = ENABLE_LOG;
 8004512:	4b79      	ldr	r3, [pc, #484]	; (80046f8 <MasterThreadTask+0x218>)
 8004514:	2201      	movs	r2, #1
 8004516:	705a      	strb	r2, [r3, #1]
#endif

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8004518:	4b78      	ldr	r3, [pc, #480]	; (80046fc <MasterThreadTask+0x21c>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8083 	bne.w	8004628 <MasterThreadTask+0x148>
 8004522:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <MasterThreadTask+0x218>)
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d17e      	bne.n	8004628 <MasterThreadTask+0x148>
			logEnabled = 1;
 800452a:	4b74      	ldr	r3, [pc, #464]	; (80046fc <MasterThreadTask+0x21c>)
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004530:	4b73      	ldr	r3, [pc, #460]	; (8004700 <MasterThreadTask+0x220>)
 8004532:	4a71      	ldr	r2, [pc, #452]	; (80046f8 <MasterThreadTask+0x218>)
 8004534:	6811      	ldr	r1, [r2, #0]
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	8892      	ldrh	r2, [r2, #4]
 800453a:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 800453c:	f000 f97a 	bl	8004834 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8004540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004544:	f010 fa0a 	bl	801495c <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 8004548:	f002 f9ee 	bl	8006928 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	4b6d      	ldr	r3, [pc, #436]	; (8004704 <MasterThreadTask+0x224>)
 8004550:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 8004552:	f000 f8f1 	bl	8004738 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 8004556:	4b6c      	ldr	r3, [pc, #432]	; (8004708 <MasterThreadTask+0x228>)
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4b6c      	ldr	r3, [pc, #432]	; (800470c <MasterThreadTask+0x22c>)
 800455c:	4a6c      	ldr	r2, [pc, #432]	; (8004710 <MasterThreadTask+0x230>)
 800455e:	496d      	ldr	r1, [pc, #436]	; (8004714 <MasterThreadTask+0x234>)
 8004560:	486d      	ldr	r0, [pc, #436]	; (8004718 <MasterThreadTask+0x238>)
 8004562:	f000 f9ef 	bl	8004944 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 8004566:	486c      	ldr	r0, [pc, #432]	; (8004718 <MasterThreadTask+0x238>)
 8004568:	f014 ff4e 	bl	8019408 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 800456c:	4b6b      	ldr	r3, [pc, #428]	; (800471c <MasterThreadTask+0x23c>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	2300      	movs	r3, #0
 8004572:	2200      	movs	r2, #0
 8004574:	4960      	ldr	r1, [pc, #384]	; (80046f8 <MasterThreadTask+0x218>)
 8004576:	f010 fee1 	bl	801533c <osMessageQueueGet>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d12c      	bne.n	80045da <MasterThreadTask+0xfa>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8004580:	4b5d      	ldr	r3, [pc, #372]	; (80046f8 <MasterThreadTask+0x218>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <MasterThreadTask+0xb6>

						masterExitRoutine();
 8004588:	f000 f9a2 	bl	80048d0 <masterExitRoutine>
						logEnabled = 0;
 800458c:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <MasterThreadTask+0x21c>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 8004592:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8004594:	e0ae      	b.n	80046f4 <MasterThreadTask+0x214>
					}

					else if (togLogMessageReceived.status == TARE_NOW){
 8004596:	4b58      	ldr	r3, [pc, #352]	; (80046f8 <MasterThreadTask+0x218>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d11d      	bne.n	80045da <MasterThreadTask+0xfa>
						lightsSimpleMessageAck = 0x03; // cyan (green + blue)
 800459e:	4b60      	ldr	r3, [pc, #384]	; (8004720 <MasterThreadTask+0x240>)
 80045a0:	2203      	movs	r2, #3
 80045a2:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 80045a4:	4b5f      	ldr	r3, [pc, #380]	; (8004724 <MasterThreadTask+0x244>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	2300      	movs	r3, #0
 80045aa:	2200      	movs	r2, #0
 80045ac:	495c      	ldr	r1, [pc, #368]	; (8004720 <MasterThreadTask+0x240>)
 80045ae:	f010 fe51 	bl	8015254 <osMessageQueuePut>

						IMU_sendTareNow();
 80045b2:	f7fd fea1 	bl	80022f8 <IMU_sendTareNow>

						osDelay(100);
 80045b6:	2064      	movs	r0, #100	; 0x64
 80045b8:	f010 f9d0 	bl	801495c <osDelay>

						IMU_sendPersistTare();
 80045bc:	f7fd fed2 	bl	8002364 <IMU_sendPersistTare>

						osDelay(100);
 80045c0:	2064      	movs	r0, #100	; 0x64
 80045c2:	f010 f9cb 	bl	801495c <osDelay>

						lightsSimpleMessageAck = 0;
 80045c6:	4b56      	ldr	r3, [pc, #344]	; (8004720 <MasterThreadTask+0x240>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 80045cc:	4b55      	ldr	r3, [pc, #340]	; (8004724 <MasterThreadTask+0x244>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	2200      	movs	r2, #0
 80045d4:	4952      	ldr	r1, [pc, #328]	; (8004720 <MasterThreadTask+0x240>)
 80045d6:	f010 fe3d 	bl	8015254 <osMessageQueuePut>
					}
				}

				// add delay to wait for next transmission period
				waitTime = PACKET_SEND_PERIOD - (HAL_GetTick() - startTime);
 80045da:	4b4a      	ldr	r3, [pc, #296]	; (8004704 <MasterThreadTask+0x224>)
 80045dc:	681c      	ldr	r4, [r3, #0]
 80045de:	f002 f9a3 	bl	8006928 <HAL_GetTick>
 80045e2:	4603      	mov	r3, r0
 80045e4:	1ae3      	subs	r3, r4, r3
 80045e6:	3364      	adds	r3, #100	; 0x64
 80045e8:	f04f 0400 	mov.w	r4, #0
 80045ec:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <MasterThreadTask+0x248>)
 80045ee:	e9c2 3400 	strd	r3, r4, [r2]
				// if wait time is less than zero (i.e. the border packet send took longer than PACKET_SEND_PERIOD)
				// or greater than the allotted PACKET_SEND_PERIOD
				if( (waitTime <= 0) || (waitTime > PACKET_SEND_PERIOD)){
 80045f2:	4b4d      	ldr	r3, [pc, #308]	; (8004728 <MasterThreadTask+0x248>)
 80045f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045f8:	4323      	orrs	r3, r4
 80045fa:	d006      	beq.n	800460a <MasterThreadTask+0x12a>
 80045fc:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <MasterThreadTask+0x248>)
 80045fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004602:	2c00      	cmp	r4, #0
 8004604:	bf08      	it	eq
 8004606:	2b65      	cmpeq	r3, #101	; 0x65
 8004608:	d307      	bcc.n	800461a <MasterThreadTask+0x13a>
					waitTime = 0; //set to zero (i.e. dont wait)
 800460a:	4a47      	ldr	r2, [pc, #284]	; (8004728 <MasterThreadTask+0x248>)
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	f04f 0400 	mov.w	r4, #0
 8004614:	e9c2 3400 	strd	r3, r4, [r2]
 8004618:	e005      	b.n	8004626 <MasterThreadTask+0x146>
				}
				else{
					osDelay(waitTime);
 800461a:	4b43      	ldr	r3, [pc, #268]	; (8004728 <MasterThreadTask+0x248>)
 800461c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004620:	4618      	mov	r0, r3
 8004622:	f010 f99b 	bl	801495c <osDelay>
				startTime = HAL_GetTick();
 8004626:	e78f      	b.n	8004548 <MasterThreadTask+0x68>
				}

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8004628:	4b34      	ldr	r3, [pc, #208]	; (80046fc <MasterThreadTask+0x21c>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d109      	bne.n	8004644 <MasterThreadTask+0x164>
 8004630:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <MasterThreadTask+0x218>)
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <MasterThreadTask+0x164>
			logEnabled = 0;
 8004638:	4b30      	ldr	r3, [pc, #192]	; (80046fc <MasterThreadTask+0x21c>)
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 800463e:	f000 f947 	bl	80048d0 <masterExitRoutine>
 8004642:	e057      	b.n	80046f4 <MasterThreadTask+0x214>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <MasterThreadTask+0x24c>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d141      	bne.n	80046d0 <MasterThreadTask+0x1f0>
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <MasterThreadTask+0x218>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d13d      	bne.n	80046d0 <MasterThreadTask+0x1f0>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <MasterThreadTask+0x220>)
 8004656:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <MasterThreadTask+0x218>)
 8004658:	6811      	ldr	r1, [r2, #0]
 800465a:	6019      	str	r1, [r3, #0]
 800465c:	8892      	ldrh	r2, [r2, #4]
 800465e:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 8004660:	4b26      	ldr	r3, [pc, #152]	; (80046fc <MasterThreadTask+0x21c>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d104      	bne.n	8004672 <MasterThreadTask+0x192>
				logEnabled = 0;
 8004668:	4b24      	ldr	r3, [pc, #144]	; (80046fc <MasterThreadTask+0x21c>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 800466e:	f000 f92f 	bl	80048d0 <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 8004672:	4b2e      	ldr	r3, [pc, #184]	; (800472c <MasterThreadTask+0x24c>)
 8004674:	2202      	movs	r2, #2
 8004676:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 8004678:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <MasterThreadTask+0x250>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f010 fca4 	bl	8014fcc <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 8004684:	4b29      	ldr	r3, [pc, #164]	; (800472c <MasterThreadTask+0x24c>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <MasterThreadTask+0x254>)
 800468c:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 800468e:	f000 f8d1 	bl	8004834 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8004692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004696:	f010 f961 	bl	801495c <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 800469a:	4b20      	ldr	r3, [pc, #128]	; (800471c <MasterThreadTask+0x23c>)
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	2200      	movs	r2, #0
 80046a4:	4914      	ldr	r1, [pc, #80]	; (80046f8 <MasterThreadTask+0x218>)
 80046a6:	f010 fe49 	bl	801533c <osMessageQueueGet>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f4      	bne.n	800469a <MasterThreadTask+0x1ba>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <MasterThreadTask+0x218>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <MasterThreadTask+0x1ba>

						osSemaphoreRelease(lightingLabDemoEndHandle);
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <MasterThreadTask+0x250>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f010 fceb 	bl	8015098 <osSemaphoreRelease>
						masterExitRoutine();
 80046c2:	f000 f905 	bl	80048d0 <masterExitRoutine>
						lightLabDemoEnabled = 0;
 80046c6:	4b19      	ldr	r3, [pc, #100]	; (800472c <MasterThreadTask+0x24c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 80046cc:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 80046ce:	e011      	b.n	80046f4 <MasterThreadTask+0x214>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <MasterThreadTask+0x24c>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	f47f af07 	bne.w	80044e8 <MasterThreadTask+0x8>
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <MasterThreadTask+0x218>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f47f af02 	bne.w	80044e8 <MasterThreadTask+0x8>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <MasterThreadTask+0x250>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f010 fcd5 	bl	8015098 <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <MasterThreadTask+0x24c>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
		togLogMessageReceived.status = 1;
 80046f4:	e6f8      	b.n	80044e8 <MasterThreadTask+0x8>
 80046f6:	bf00      	nop
 80046f8:	20027b50 	.word	0x20027b50
 80046fc:	20000c61 	.word	0x20000c61
 8004700:	20027c28 	.word	0x20027c28
 8004704:	20000c64 	.word	0x20000c64
 8004708:	20028778 	.word	0x20028778
 800470c:	20028790 	.word	0x20028790
 8004710:	200287cc 	.word	0x200287cc
 8004714:	2002870c 	.word	0x2002870c
 8004718:	20027b5c 	.word	0x20027b5c
 800471c:	20028088 	.word	0x20028088
 8004720:	20000c78 	.word	0x20000c78
 8004724:	20027c58 	.word	0x20027c58
 8004728:	20000c70 	.word	0x20000c70
 800472c:	20000c62 	.word	0x20000c62
 8004730:	20027c5c 	.word	0x20027c5c
 8004734:	20000c68 	.word	0x20000c68

08004738 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 800473c:	4b30      	ldr	r3, [pc, #192]	; (8004800 <grabSensorData+0xc8>)
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d111      	bne.n	8004768 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8004744:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <grabSensorData+0xcc>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	2300      	movs	r3, #0
 800474a:	2200      	movs	r2, #0
 800474c:	492e      	ldr	r1, [pc, #184]	; (8004808 <grabSensorData+0xd0>)
 800474e:	f010 fdf5 	bl	801533c <osMessageQueueGet>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8004758:	4a2b      	ldr	r2, [pc, #172]	; (8004808 <grabSensorData+0xd0>)
 800475a:	4b2c      	ldr	r3, [pc, #176]	; (800480c <grabSensorData+0xd4>)
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	236c      	movs	r3, #108	; 0x6c
 8004762:	461a      	mov	r2, r3
 8004764:	f016 fea8 	bl	801b4b8 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <grabSensorData+0xc8>)
 800476a:	78db      	ldrb	r3, [r3, #3]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d113      	bne.n	8004798 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8004770:	4b27      	ldr	r3, [pc, #156]	; (8004810 <grabSensorData+0xd8>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	2300      	movs	r3, #0
 8004776:	2200      	movs	r2, #0
 8004778:	4926      	ldr	r1, [pc, #152]	; (8004814 <grabSensorData+0xdc>)
 800477a:	f010 fddf 	bl	801533c <osMessageQueueGet>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8004784:	4a23      	ldr	r2, [pc, #140]	; (8004814 <grabSensorData+0xdc>)
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <grabSensorData+0xe0>)
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004790:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004794:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <grabSensorData+0xc8>)
 800479a:	795b      	ldrb	r3, [r3, #5]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d113      	bne.n	80047c8 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <grabSensorData+0xe4>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	2200      	movs	r2, #0
 80047a8:	491d      	ldr	r1, [pc, #116]	; (8004820 <grabSensorData+0xe8>)
 80047aa:	f010 fdc7 	bl	801533c <osMessageQueueGet>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80047b4:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <grabSensorData+0xe8>)
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <grabSensorData+0xec>)
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047c4:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <grabSensorData+0xc8>)
 80047ca:	791b      	ldrb	r3, [r3, #4]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d115      	bne.n	80047fc <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 80047d0:	4b15      	ldr	r3, [pc, #84]	; (8004828 <grabSensorData+0xf0>)
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	2200      	movs	r2, #0
 80047d8:	4914      	ldr	r1, [pc, #80]	; (800482c <grabSensorData+0xf4>)
 80047da:	f010 fdaf 	bl	801533c <osMessageQueueGet>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <grabSensorData+0xf4>)
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <grabSensorData+0xf8>)
 80047e8:	4614      	mov	r4, r2
 80047ea:	461d      	mov	r5, r3
 80047ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047f8:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 80047fc:	bf00      	nop
 80047fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004800:	20027c28 	.word	0x20027c28
 8004804:	200280a4 	.word	0x200280a4
 8004808:	2002870c 	.word	0x2002870c
 800480c:	0801ce4c 	.word	0x0801ce4c
 8004810:	20027c60 	.word	0x20027c60
 8004814:	200287cc 	.word	0x200287cc
 8004818:	0801ceb8 	.word	0x0801ceb8
 800481c:	20027b4c 	.word	0x20027b4c
 8004820:	20028778 	.word	0x20028778
 8004824:	0801cef8 	.word	0x0801cef8
 8004828:	20027c54 	.word	0x20027c54
 800482c:	20028790 	.word	0x20028790
 8004830:	0801ced0 	.word	0x0801ced0

08004834 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004838:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <masterEnterRoutine+0x80>)
 800483a:	789b      	ldrb	r3, [r3, #2]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004840:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <masterEnterRoutine+0x84>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2101      	movs	r1, #1
 8004846:	4618      	mov	r0, r3
 8004848:	f00f ff42 	bl	80146d0 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <masterEnterRoutine+0x80>)
 800484e:	795b      	ldrb	r3, [r3, #5]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d118      	bne.n	8004886 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <masterEnterRoutine+0x88>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	f04f 33ff 	mov.w	r3, #4294967295
 800485c:	2200      	movs	r2, #0
 800485e:	4918      	ldr	r1, [pc, #96]	; (80048c0 <masterEnterRoutine+0x8c>)
 8004860:	f010 fd6c 	bl	801533c <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8004864:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <masterEnterRoutine+0x8c>)
 8004866:	2201      	movs	r2, #1
 8004868:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <masterEnterRoutine+0x88>)
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	2300      	movs	r3, #0
 8004870:	2200      	movs	r2, #0
 8004872:	4913      	ldr	r1, [pc, #76]	; (80048c0 <masterEnterRoutine+0x8c>)
 8004874:	f010 fcee 	bl	8015254 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <masterEnterRoutine+0x90>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004880:	4618      	mov	r0, r3
 8004882:	f010 f933 	bl	8014aec <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <masterEnterRoutine+0x80>)
 8004888:	78db      	ldrb	r3, [r3, #3]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <masterEnterRoutine+0x94>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2101      	movs	r1, #1
 8004894:	4618      	mov	r0, r3
 8004896:	f00f ff1b 	bl	80146d0 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <masterEnterRoutine+0x80>)
 800489c:	791b      	ldrb	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <masterEnterRoutine+0x98>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f00f ff11 	bl	80146d0 <osThreadFlagsSet>
	}
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20027c28 	.word	0x20027c28
 80048b8:	20027c34 	.word	0x20027c34
 80048bc:	20027c64 	.word	0x20027c64
 80048c0:	200280b4 	.word	0x200280b4
 80048c4:	20027c3c 	.word	0x20027c3c
 80048c8:	20028094 	.word	0x20028094
 80048cc:	200280ac 	.word	0x200280ac

080048d0 <masterExitRoutine>:

void masterExitRoutine(void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80048d4:	4b15      	ldr	r3, [pc, #84]	; (800492c <masterExitRoutine+0x5c>)
 80048d6:	789b      	ldrb	r3, [r3, #2]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80048dc:	4b14      	ldr	r3, [pc, #80]	; (8004930 <masterExitRoutine+0x60>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f00f fef4 	bl	80146d0 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 80048e8:	4b10      	ldr	r3, [pc, #64]	; (800492c <masterExitRoutine+0x5c>)
 80048ea:	795b      	ldrb	r3, [r3, #5]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <masterExitRoutine+0x64>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f010 f939 	bl	8014b6c <osTimerStop>
		viveStateVar = 0;
 80048fa:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <masterExitRoutine+0x68>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <masterExitRoutine+0x5c>)
 8004902:	78db      	ldrb	r3, [r3, #3]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <masterExitRoutine+0x6c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2102      	movs	r1, #2
 800490e:	4618      	mov	r0, r3
 8004910:	f00f fede 	bl	80146d0 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <masterExitRoutine+0x5c>)
 8004916:	791b      	ldrb	r3, [r3, #4]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d105      	bne.n	8004928 <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 800491c:	4b08      	ldr	r3, [pc, #32]	; (8004940 <masterExitRoutine+0x70>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f00f fed4 	bl	80146d0 <osThreadFlagsSet>
	}

}
 8004928:	bf00      	nop
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20027c28 	.word	0x20027c28
 8004930:	20027c34 	.word	0x20027c34
 8004934:	20027c3c 	.word	0x20027c3c
 8004938:	20000c68 	.word	0x20000c68
 800493c:	20028094 	.word	0x20028094
 8004940:	200280ac 	.word	0x200280ac

08004944 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8004952:	f001 ffe9 	bl	8006928 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 800495e:	2200      	movs	r2, #0
 8004960:	4917      	ldr	r1, [pc, #92]	; (80049c0 <packetizeData+0x7c>)
 8004962:	4818      	ldr	r0, [pc, #96]	; (80049c4 <packetizeData+0x80>)
 8004964:	f009 fa8f 	bl	800de86 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8004968:	2200      	movs	r2, #0
 800496a:	4917      	ldr	r1, [pc, #92]	; (80049c8 <packetizeData+0x84>)
 800496c:	4815      	ldr	r0, [pc, #84]	; (80049c4 <packetizeData+0x80>)
 800496e:	f009 fb94 	bl	800e09a <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8004972:	4915      	ldr	r1, [pc, #84]	; (80049c8 <packetizeData+0x84>)
 8004974:	4812      	ldr	r0, [pc, #72]	; (80049c0 <packetizeData+0x7c>)
 8004976:	f000 fc5f 	bl	8005238 <RTC_ToEpoch>
 800497a:	4602      	mov	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	226c      	movs	r2, #108	; 0x6c
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	4618      	mov	r0, r3
 800498a:	f016 fd95 	bl	801b4b8 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	336c      	adds	r3, #108	; 0x6c
 8004992:	2218      	movs	r2, #24
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4618      	mov	r0, r3
 8004998:	f016 fd8e 	bl	801b4b8 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3384      	adds	r3, #132	; 0x84
 80049a0:	2228      	movs	r2, #40	; 0x28
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f016 fd87 	bl	801b4b8 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	33ac      	adds	r3, #172	; 0xac
 80049ae:	2218      	movs	r2, #24
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f016 fd80 	bl	801b4b8 <memcpy>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	200287b8 	.word	0x200287b8
 80049c4:	200287e8 	.word	0x200287e8
 80049c8:	200287e4 	.word	0x200287e4

080049cc <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d80f      	bhi.n	80049fe <vector_push+0x32>
    	self->items[self->count++] = *item;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049e2:	1c51      	adds	r1, r2, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6619      	str	r1, [r3, #96]	; 0x60
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	440b      	add	r3, r1
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	6811      	ldr	r1, [r2, #0]
 80049f8:	6019      	str	r1, [r3, #0]
 80049fa:	8892      	ldrh	r2, [r2, #4]
 80049fc:	809a      	strh	r2, [r3, #4]
    }
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <vector_pop>:

Pulse vector_pop(vector *self){
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01c      	beq.n	8004a56 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	1e5a      	subs	r2, r3, #1
 8004a22:	6839      	ldr	r1, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	18ca      	adds	r2, r1, r3
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	6810      	ldr	r0, [r2, #0]
 8004a34:	6018      	str	r0, [r3, #0]
 8004a36:	8892      	ldrh	r2, [r2, #4]
 8004a38:	809a      	strh	r2, [r3, #4]
		self->count--;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	6010      	str	r0, [r2, #0]
 8004a50:	889b      	ldrh	r3, [r3, #4]
 8004a52:	8093      	strh	r3, [r2, #4]
 8004a54:	e005      	b.n	8004a62 <vector_pop+0x58>
	}
	return self->items[0];
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	6810      	ldr	r0, [r2, #0]
 8004a5c:	6018      	str	r0, [r3, #0]
 8004a5e:	8892      	ldrh	r2, [r2, #4]
 8004a60:	809a      	strh	r2, [r3, #4]
}
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	db12      	blt.n	8004aa6 <vector_get+0x38>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d90d      	bls.n	8004aa6 <vector_get+0x38>
    	return self->items[index];
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4413      	add	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	18ca      	adds	r2, r1, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	6019      	str	r1, [r3, #0]
 8004aa0:	8892      	ldrh	r2, [r2, #4]
 8004aa2:	809a      	strh	r2, [r3, #4]
 8004aa4:	e005      	b.n	8004ab2 <vector_get+0x44>
    }
    return self->items[0];
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	6810      	ldr	r0, [r2, #0]
 8004aac:	6018      	str	r0, [r3, #0]
 8004aae:	8892      	ldrh	r2, [r2, #4]
 8004ab0:	809a      	strh	r2, [r3, #4]
}
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <vector_clear>:

void vector_clear(vector *self){
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e00c      	b.n	8004b14 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	3310      	adds	r3, #16
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff ffd8 	bl	8004abe <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	ddef      	ble.n	8004afa <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	33d8      	adds	r3, #216	; 0xd8
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ffcd 	bl	8004abe <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff ffc7 	bl	8004abe <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	889b      	ldrh	r3, [r3, #4]
 8004b4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004b52:	d303      	bcc.n	8004b5c <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <consume_pulse+0x54>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004b5a:	e016      	b.n	8004b8a <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	889b      	ldrh	r3, [r3, #4]
 8004b60:	2b27      	cmp	r3, #39	; 0x27
 8004b62:	d907      	bls.n	8004b74 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <consume_pulse+0x54>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f813 	bl	8004b98 <process_long_pulse>
}
 8004b72:	e00a      	b.n	8004b8a <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <consume_pulse+0x54>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d006      	beq.n	8004b8a <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f89c 	bl	8004cbc <process_short_pulse>
			prev_pulse_short = 1;
 8004b84:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <consume_pulse+0x54>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000c7c 	.word	0x20000c7c

08004b98 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d144      	bne.n	8004c34 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03f      	beq.n	8004c34 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8004bba:	f107 0308 	add.w	r3, r7, #8
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ff22 	bl	8004a0a <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	885a      	ldrh	r2, [r3, #2]
 8004bca:	897b      	ldrh	r3, [r7, #10]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004be2:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004be6:	330d      	adds	r3, #13
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f113 0f1e 	cmn.w	r3, #30
 8004bf2:	db1c      	blt.n	8004c2e <process_long_pulse+0x96>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2b1d      	cmp	r3, #29
 8004bf8:	dc19      	bgt.n	8004c2e <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	885a      	ldrh	r2, [r3, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fc ff9f 	bl	8001b58 <reset>

                reset_cycle_long_pulses(self);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa64 	bl	80050e8 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fa7c 	bl	800511e <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa87 	bl	800513a <reset_cycle_short_pulses>
 8004c2c:	e002      	b.n	8004c34 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa75 	bl	800511e <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d02d      	beq.n	8004c9c <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	885a      	ldrh	r2, [r3, #2]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	891b      	ldrh	r3, [r3, #8]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	e021      	b.n	8004c96 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <process_long_pulse+0x120>)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5a:	8a7a      	ldrh	r2, [r7, #18]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004c62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c66:	f113 0f1e 	cmn.w	r3, #30
 8004c6a:	db11      	blt.n	8004c90 <process_long_pulse+0xf8>
 8004c6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c70:	2b1d      	cmp	r3, #29
 8004c72:	dc0d      	bgt.n	8004c90 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2264      	movs	r2, #100	; 0x64
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
 8004c7c:	3310      	adds	r3, #16
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fea1 	bl	80049cc <vector_push>
                pulse_classified = 1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	77fb      	strb	r3, [r7, #31]
                break;
 8004c8e:	e005      	b.n	8004c9c <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	3301      	adds	r3, #1
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	ddda      	ble.n	8004c52 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004c9c:	7ffb      	ldrb	r3, [r7, #31]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fe8e 	bl	80049cc <vector_push>
    }
}
 8004cb0:	bf00      	nop
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	0801cf10 	.word	0x0801cf10

08004cbc <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00f      	beq.n	8004cee <process_short_pulse+0x32>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d208      	bcs.n	8004cee <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	33d8      	adds	r3, #216	; 0xd8
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fe72 	bl	80049cc <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f805 	bl	8004cf8 <process_cycle_fix>
	}
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b0a2      	sub	sp, #136	; 0x88
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004d00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <process_cycle_fix+0x2a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80b7 	beq.w	8004e90 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	d80d      	bhi.n	8004d46 <process_cycle_fix+0x4e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <process_cycle_fix+0x4e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d4c:	e090      	b.n	8004e70 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d54:	2164      	movs	r1, #100	; 0x64
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3370      	adds	r3, #112	; 0x70
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d07e      	beq.n	8004e66 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	891a      	ldrh	r2, [r3, #8]
 8004d6c:	49c0      	ldr	r1, [pc, #768]	; (8005070 <process_cycle_fix+0x378>)
 8004d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d76:	4413      	add	r3, r2
 8004d78:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d82:	e03e      	b.n	8004e02 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d88:	2264      	movs	r2, #100	; 0x64
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	3310      	adds	r3, #16
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	18d1      	adds	r1, r2, r3
 8004d94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fe66 	bl	8004a6e <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dac:	4413      	add	r3, r2
 8004dae:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004db2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004db6:	4619      	mov	r1, r3
 8004db8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004dbc:	1acb      	subs	r3, r1, r3
 8004dbe:	441a      	add	r2, r3
 8004dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004dca:	440b      	add	r3, r1
 8004dcc:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dda:	4413      	add	r3, r2
 8004ddc:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004de0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004de4:	4413      	add	r3, r2
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004df2:	440b      	add	r3, r1
 8004df4:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3bb      	bcc.n	8004d84 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d929      	bls.n	8004e66 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e36:	440b      	add	r3, r1
 8004e38:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e46:	4413      	add	r3, r2
 8004e48:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e60:	440b      	add	r3, r1
 8004e62:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	f77f af6a 	ble.w	8004d4e <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fc fde3 	bl	8001a54 <process_pulse_lengths>
 8004e8e:	e008      	b.n	8004ea2 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	1e5a      	subs	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fc fe3a 	bl	8001b28 <get_phase>
 8004eb4:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f2c0 80b5 	blt.w	8005028 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004ebe:	f107 030c 	add.w	r3, r7, #12
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f016 fb01 	bl	801b4ce <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	105b      	asrs	r3, r3, #1
 8004ede:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	891a      	ldrh	r2, [r3, #8]
 8004ee4:	4962      	ldr	r1, [pc, #392]	; (8005070 <process_cycle_fix+0x378>)
 8004ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004eec:	4413      	add	r3, r2
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004ef8:	440b      	add	r3, r1
 8004efa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4413      	add	r3, r2
 8004f02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004f06:	2300      	movs	r3, #0
 8004f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f0a:	e04a      	b.n	8004fa2 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004f12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fda8 	bl	8004a6e <vector_get>
            uint32_t input_idx = p.input_idx;
 8004f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f22:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004f24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004f3a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f3e:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004f42:	d32b      	bcc.n	8004f9c <process_cycle_fix+0x2a4>
 8004f44:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f48:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d825      	bhi.n	8004f9c <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f58:	4413      	add	r3, r2
 8004f5a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <process_cycle_fix+0x280>
 8004f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004f70:	889a      	ldrh	r2, [r3, #4]
 8004f72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d211      	bcs.n	8004f9c <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f80:	4413      	add	r3, r2
 8004f82:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f86:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f92:	4413      	add	r3, r2
 8004f94:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004f98:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004fa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3ae      	bcc.n	8004f0c <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004fae:	2300      	movs	r3, #0
 8004fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fb2:	e034      	b.n	800501e <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d028      	beq.n	8005018 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc8:	015b      	lsls	r3, r3, #5
 8004fca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fdc:	4413      	add	r3, r2
 8004fde:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004fe2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fee:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005074 <process_cycle_fix+0x37c>
 8004ff2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ff6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005078 <process_cycle_fix+0x380>
 8004ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ffe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005012:	3204      	adds	r2, #4
 8005014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8005018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501a:	3301      	adds	r3, #1
 800501c:	67bb      	str	r3, [r7, #120]	; 0x78
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005024:	429a      	cmp	r2, r3
 8005026:	d3c5      	bcc.n	8004fb4 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8005028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502a:	2b00      	cmp	r3, #0
 800502c:	db06      	blt.n	800503c <process_cycle_fix+0x344>
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	2b03      	cmp	r3, #3
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e008      	b.n	800504e <process_cycle_fix+0x356>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d02b      	beq.n	80050aa <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	891a      	ldrh	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 800505c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505e:	2b00      	cmp	r3, #0
 8005060:	db0c      	blt.n	800507c <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b04      	cmp	r3, #4
 8005068:	d908      	bls.n	800507c <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 800506a:	22c8      	movs	r2, #200	; 0xc8
 800506c:	e007      	b.n	800507e <process_cycle_fix+0x386>
 800506e:	bf00      	nop
 8005070:	0801cf10 	.word	0x0801cf10
 8005074:	40490fdb 	.word	0x40490fdb
 8005078:	46023400 	.word	0x46023400
 800507c:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005092:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fd fac5 	bl	8002634 <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f81c 	bl	80050e8 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f834 	bl	800511e <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f83f 	bl	800513a <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	891a      	ldrh	r2, [r3, #8]
 80050c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050cc:	330d      	adds	r3, #13
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60da      	str	r2, [r3, #12]
}
 80050de:	bf00      	nop
 80050e0:	3788      	adds	r7, #136	; 0x88
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop

080050e8 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e00c      	b.n	8005110 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2264      	movs	r2, #100	; 0x64
 80050fa:	fb02 f303 	mul.w	r3, r2, r3
 80050fe:	3310      	adds	r3, #16
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fcda 	bl	8004abe <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b01      	cmp	r3, #1
 8005114:	ddef      	ble.n	80050f6 <reset_cycle_long_pulses+0xe>
	}
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fcc6 	bl	8004abe <vector_clear>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	33d8      	adds	r3, #216	; 0xd8
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fcb9 	bl	8004abe <vector_clear>
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0

}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8005162:	b480      	push	{r7}
 8005164:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_APB1_GRP1_EnableClock>:
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4313      	orrs	r3, r2
 800519a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4013      	ands	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <MX_RTC_Init+0x4c>)
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <MX_RTC_Init+0x50>)
 80051c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <MX_RTC_Init+0x4c>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <MX_RTC_Init+0x4c>)
 80051ca:	220f      	movs	r2, #15
 80051cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <MX_RTC_Init+0x4c>)
 80051d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80051d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <MX_RTC_Init+0x4c>)
 80051d8:	2200      	movs	r2, #0
 80051da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <MX_RTC_Init+0x4c>)
 80051de:	2200      	movs	r2, #0
 80051e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <MX_RTC_Init+0x4c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <MX_RTC_Init+0x4c>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051ee:	4805      	ldr	r0, [pc, #20]	; (8005204 <MX_RTC_Init+0x4c>)
 80051f0:	f008 fce7 	bl	800dbc2 <HAL_RTC_Init>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80051fa:	f7ff f969 	bl	80044d0 <Error_Handler>
  }

}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200287e8 	.word	0x200287e8
 8005208:	40002800 	.word	0x40002800

0800520c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a06      	ldr	r2, [pc, #24]	; (8005234 <HAL_RTC_MspInit+0x28>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d105      	bne.n	800522a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800521e:	f7ff ffa0 	bl	8005162 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005222:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005226:	f7ff ffad 	bl	8005184 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40002800 	.word	0x40002800

08005238 <RTC_ToEpoch>:
  }
}

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	f1c3 030e 	rsb	r3, r3, #14
 800524a:	4a44      	ldr	r2, [pc, #272]	; (800535c <RTC_ToEpoch+0x124>)
 800524c:	fb82 1203 	smull	r1, r2, r2, r3
 8005250:	1052      	asrs	r2, r2, #1
 8005252:	17db      	asrs	r3, r3, #31
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	78db      	ldrb	r3, [r3, #3]
 800525c:	b29a      	uxth	r2, r3
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	b29b      	uxth	r3, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	b29b      	uxth	r3, r3
 8005266:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800526a:	3310      	adds	r3, #16
 800526c:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	785a      	ldrb	r2, [r3, #1]
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	4619      	mov	r1, r3
 8005276:	0049      	lsls	r1, r1, #1
 8005278:	440b      	add	r3, r1
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	b2db      	uxtb	r3, r3
 800527e:	4413      	add	r3, r2
 8005280:	b2db      	uxtb	r3, r3
 8005282:	3b03      	subs	r3, #3
 8005284:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	789b      	ldrb	r3, [r3, #2]
 800528a:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 800528c:	7cfa      	ldrb	r2, [r7, #19]
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	4413      	add	r3, r2
 8005298:	3302      	adds	r3, #2
 800529a:	4a31      	ldr	r2, [pc, #196]	; (8005360 <RTC_ToEpoch+0x128>)
 800529c:	fb82 1203 	smull	r1, r2, r2, r3
 80052a0:	1052      	asrs	r2, r2, #1
 80052a2:	17db      	asrs	r3, r3, #31
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 80052ae:	8abb      	ldrh	r3, [r7, #20]
 80052b0:	f240 126d 	movw	r2, #365	; 0x16d
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 80052c0:	8abb      	ldrh	r3, [r7, #20]
 80052c2:	089b      	lsrs	r3, r3, #2
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 80052ce:	8abb      	ldrh	r3, [r7, #20]
 80052d0:	425b      	negs	r3, r3
 80052d2:	4a24      	ldr	r2, [pc, #144]	; (8005364 <RTC_ToEpoch+0x12c>)
 80052d4:	fb82 1203 	smull	r1, r2, r2, r3
 80052d8:	1152      	asrs	r2, r2, #5
 80052da:	17db      	asrs	r3, r3, #31
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 80052e6:	8abb      	ldrh	r3, [r7, #20]
 80052e8:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <RTC_ToEpoch+0x12c>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	09db      	lsrs	r3, r3, #7
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8005300:	3b2d      	subs	r3, #45	; 0x2d
 8005302:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <RTC_ToEpoch+0x130>)
 8005308:	4413      	add	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <RTC_ToEpoch+0x134>)
 8005310:	fb02 f303 	mul.w	r3, r2, r3
 8005314:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005320:	fb03 f302 	mul.w	r3, r3, r2
 8005324:	461a      	mov	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	461a      	mov	r2, r3
 8005332:	4613      	mov	r3, r2
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	461a      	mov	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	789b      	ldrb	r3, [r3, #2]
 8005346:	461a      	mov	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

	return JDN;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	2aaaaaab 	.word	0x2aaaaaab
 8005360:	66666667 	.word	0x66666667
 8005364:	51eb851f 	.word	0x51eb851f
 8005368:	ffdac274 	.word	0xffdac274
 800536c:	00015180 	.word	0x00015180

08005370 <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b095      	sub	sp, #84	; 0x54
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	f04f 0400 	mov.w	r4, #0
 80053ae:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	f04f 0400 	mov.w	r4, #0
 80053ba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 80053c4:	33c0      	adds	r3, #192	; 0xc0
 80053c6:	4a7c      	ldr	r2, [pc, #496]	; (80055b8 <RTC_FromEpoch+0x248>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	0bda      	lsrs	r2, r3, #15
 80053ce:	4b7b      	ldr	r3, [pc, #492]	; (80055bc <RTC_FromEpoch+0x24c>)
 80053d0:	4413      	add	r3, r2
 80053d2:	f04f 0400 	mov.w	r4, #0
 80053d6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 80053da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80053de:	0864      	lsrs	r4, r4, #1
 80053e0:	ea4f 0333 	mov.w	r3, r3, rrx
 80053e4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	4a74      	ldr	r2, [pc, #464]	; (80055c0 <RTC_FromEpoch+0x250>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	0109      	lsls	r1, r1, #4
 8005404:	1acb      	subs	r3, r1, r3
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	b29b      	uxth	r3, r3
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	b29b      	uxth	r3, r3
 800540e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	4a69      	ldr	r2, [pc, #420]	; (80055c0 <RTC_FromEpoch+0x250>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	b29a      	uxth	r2, r3
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	b29b      	uxth	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	0109      	lsls	r1, r1, #4
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	b29b      	uxth	r3, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	4a60      	ldr	r2, [pc, #384]	; (80055c4 <RTC_FromEpoch+0x254>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	b29a      	uxth	r2, r3
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	b29b      	uxth	r3, r3
 8005454:	4619      	mov	r1, r3
 8005456:	0049      	lsls	r1, r1, #1
 8005458:	440b      	add	r3, r1
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	b29b      	uxth	r3, r3
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	b29b      	uxth	r3, r3
 8005462:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 8005466:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800546a:	f04f 0207 	mov.w	r2, #7
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	f7fb fb4b 	bl	8000b0c <__aeabi_uldivmod>
 8005476:	461c      	mov	r4, r3
 8005478:	4613      	mov	r3, r2
 800547a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8005484:	332c      	adds	r3, #44	; 0x2c
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	3303      	adds	r3, #3
 800548e:	4a4e      	ldr	r2, [pc, #312]	; (80055c8 <RTC_FromEpoch+0x258>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	0bdb      	lsrs	r3, r3, #15
 8005496:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	4a4c      	ldr	r2, [pc, #304]	; (80055cc <RTC_FromEpoch+0x25c>)
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	3303      	adds	r3, #3
 80054ae:	4a48      	ldr	r2, [pc, #288]	; (80055d0 <RTC_FromEpoch+0x260>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	09db      	lsrs	r3, r3, #7
 80054b6:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f240 52b5 	movw	r2, #1461	; 0x5b5
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	3302      	adds	r3, #2
 80054d4:	4a3f      	ldr	r2, [pc, #252]	; (80055d4 <RTC_FromEpoch+0x264>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	09db      	lsrs	r3, r3, #7
 80054dc:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	b299      	uxth	r1, r3
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4613      	mov	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4413      	add	r3, r2
 80054ea:	011a      	lsls	r2, r3, #4
 80054ec:	4413      	add	r3, r2
 80054ee:	3302      	adds	r3, #2
 80054f0:	4a39      	ldr	r2, [pc, #228]	; (80055d8 <RTC_FromEpoch+0x268>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	1acb      	subs	r3, r1, r3
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3301      	adds	r3, #1
 8005500:	b29b      	uxth	r3, r3
 8005502:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	b29a      	uxth	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4932      	ldr	r1, [pc, #200]	; (80055d8 <RTC_FromEpoch+0x268>)
 800550e:	fba1 1303 	umull	r1, r3, r1, r3
 8005512:	08db      	lsrs	r3, r3, #3
 8005514:	b29b      	uxth	r3, r3
 8005516:	4619      	mov	r1, r3
 8005518:	0049      	lsls	r1, r1, #1
 800551a:	440b      	add	r3, r1
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	b29b      	uxth	r3, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	b29b      	uxth	r3, r3
 8005524:	3303      	adds	r3, #3
 8005526:	b29b      	uxth	r3, r3
 8005528:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	0092      	lsls	r2, r2, #2
 8005534:	4413      	add	r3, r2
 8005536:	461a      	mov	r2, r3
 8005538:	0091      	lsls	r1, r2, #2
 800553a:	461a      	mov	r2, r3
 800553c:	460b      	mov	r3, r1
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	b29a      	uxth	r2, r3
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	b29b      	uxth	r3, r3
 8005548:	4413      	add	r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4922      	ldr	r1, [pc, #136]	; (80055d8 <RTC_FromEpoch+0x268>)
 8005550:	fba1 1303 	umull	r1, r3, r1, r3
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	b29b      	uxth	r3, r3
 8005558:	4413      	add	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8005560:	b29b      	uxth	r3, r3
 8005562:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 8005566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800556a:	b2db      	uxtb	r3, r3
 800556c:	3330      	adds	r3, #48	; 0x30
 800556e:	b2da      	uxtb	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8005574:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005578:	b2da      	uxtb	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 800557e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005582:	b2da      	uxtb	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 8005588:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800558c:	b2da      	uxtb	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 8005592:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 800559c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 80055a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	709a      	strb	r2, [r3, #2]
}
 80055b0:	bf00      	nop
 80055b2:	3754      	adds	r7, #84	; 0x54
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd90      	pop	{r4, r7, pc}
 80055b8:	c22e4507 	.word	0xc22e4507
 80055bc:	004a7b17 	.word	0x004a7b17
 80055c0:	88888889 	.word	0x88888889
 80055c4:	aaaaaaab 	.word	0xaaaaaaab
 80055c8:	396b06bd 	.word	0x396b06bd
 80055cc:	00023ab1 	.word	0x00023ab1
 80055d0:	166db073 	.word	0x166db073
 80055d4:	d62b80d7 	.word	0xd62b80d7
 80055d8:	cccccccd 	.word	0xcccccccd

080055dc <LL_AHB3_GRP1_EnableClock>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005600:	68fb      	ldr	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8005612:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005616:	f7ff ffe1 	bl	80055dc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800561a:	2200      	movs	r2, #0
 800561c:	210f      	movs	r1, #15
 800561e:	f06f 0001 	mvn.w	r0, #1
 8005622:	f002 ff8a 	bl	800853a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8005626:	2200      	movs	r2, #0
 8005628:	2105      	movs	r1, #5
 800562a:	202e      	movs	r0, #46	; 0x2e
 800562c:	f002 ff85 	bl	800853a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8005630:	202e      	movs	r0, #46	; 0x2e
 8005632:	f002 ff9c 	bl	800856e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8005636:	2200      	movs	r2, #0
 8005638:	210f      	movs	r1, #15
 800563a:	202c      	movs	r0, #44	; 0x2c
 800563c:	f002 ff7d 	bl	800853a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8005640:	2200      	movs	r2, #0
 8005642:	210f      	movs	r1, #15
 8005644:	202d      	movs	r0, #45	; 0x2d
 8005646:	f002 ff78 	bl	800853a <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}

0800564e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800565c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4313      	orrs	r3, r2
 8005664:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4013      	ands	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005672:	68fb      	ldr	r3, [r7, #12]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8005690:	2200      	movs	r2, #0
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	2019      	movs	r0, #25
 8005696:	f002 ff50 	bl	800853a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800569a:	2019      	movs	r0, #25
 800569c:	f002 ff67 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80056a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056a4:	f7ff ffd3 	bl	800564e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80056a8:	f107 0208 	add.w	r2, r7, #8
 80056ac:	f107 030c 	add.w	r3, r7, #12
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f007 fd78 	bl	800d1a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80056b8:	f007 fd60 	bl	800d17c <HAL_RCC_GetPCLK2Freq>
 80056bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	4a12      	ldr	r2, [pc, #72]	; (800570c <HAL_InitTick+0x8c>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	0c9b      	lsrs	r3, r3, #18
 80056c8:	3b01      	subs	r3, #1
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_InitTick+0x90>)
 80056ce:	4a11      	ldr	r2, [pc, #68]	; (8005714 <HAL_InitTick+0x94>)
 80056d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <HAL_InitTick+0x90>)
 80056d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80056da:	4a0d      	ldr	r2, [pc, #52]	; (8005710 <HAL_InitTick+0x90>)
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_InitTick+0x90>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <HAL_InitTick+0x90>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80056ec:	4808      	ldr	r0, [pc, #32]	; (8005710 <HAL_InitTick+0x90>)
 80056ee:	f008 fdc5 	bl	800e27c <HAL_TIM_Base_Init>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80056f8:	4805      	ldr	r0, [pc, #20]	; (8005710 <HAL_InitTick+0x90>)
 80056fa:	f008 fe85 	bl	800e408 <HAL_TIM_Base_Start_IT>
 80056fe:	4603      	mov	r3, r0
 8005700:	e000      	b.n	8005704 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
}
 8005704:	4618      	mov	r0, r3
 8005706:	3730      	adds	r7, #48	; 0x30
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	431bde83 	.word	0x431bde83
 8005710:	2002880c 	.word	0x2002880c
 8005714:	40012c00 	.word	0x40012c00

08005718 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e072      	b.n	8005810 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f001 f80e 	bl	8006760 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6819      	ldr	r1, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005762:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800576a:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005770:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8005776:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800577c:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8005782:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8005788:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7b1b      	ldrb	r3, [r3, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	43d2      	mvns	r2, r2
 80057c0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057da:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681c      	ldr	r4, [r3, #0]
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 f952 	bl	8005a8e <TSC_extract_groups>
 80057ea:	4603      	mov	r3, r0
 80057ec:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0203 	bic.w	r2, r2, #3
 80057fc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2203      	movs	r2, #3
 8005804:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}

08005818 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_TSC_Start_IT+0x16>
 800582a:	2302      	movs	r3, #2
 800582c:	e04b      	b.n	80058c6 <HAL_TSC_Start_IT+0xae>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0201 	orr.w	r2, r2, #1
 800584c:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d108      	bne.n	800586a <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0202 	orr.w	r2, r2, #2
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e007      	b.n	800587a <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0202 	bic.w	r2, r2, #2
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2203      	movs	r2, #3
 8005880:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d108      	bne.n	800589c <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0210 	bic.w	r2, r2, #16
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e007      	b.n	80058ac <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0210 	orr.w	r2, r2, #16
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0202 	orr.w	r2, r2, #2
 80058ba:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	3310      	adds	r3, #16
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	401a      	ands	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	3310      	adds	r3, #16
 80058fa:	2101      	movs	r1, #1
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	429a      	cmp	r2, r3
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	330c      	adds	r3, #12
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	685b      	ldr	r3, [r3, #4]
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 800593a:	b590      	push	{r4, r7, lr}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_TSC_IOConfig+0x18>
 800594e:	2302      	movs	r3, #2
 8005950:	e032      	b.n	80059b8 <HAL_TSC_IOConfig+0x7e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0202 	bic.w	r2, r2, #2
 8005968:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	431a      	orrs	r2, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	43d2      	mvns	r2, r2
 8005980:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	6892      	ldr	r2, [r2, #8]
 800599a:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681c      	ldr	r4, [r3, #0]
 80059a4:	4610      	mov	r0, r2
 80059a6:	f000 f872 	bl	8005a8e <TSC_extract_groups>
 80059aa:	4603      	mov	r3, r0
 80059ac:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd90      	pop	{r4, r7, pc}

080059c0 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_TSC_IODischarge+0x1a>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e01c      	b.n	8005a14 <HAL_TSC_IODischarge+0x54>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d108      	bne.n	80059fa <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0210 	bic.w	r2, r2, #16
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e007      	b.n	8005a0a <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0210 	orr.w	r2, r2, #16
 8005a08:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d103      	bne.n	8005a3e <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d10b      	bne.n	8005a64 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2202      	movs	r2, #2
 8005a52:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2203      	movs	r2, #3
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f80c 	bl	8005a7a <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8005a62:	e006      	b.n	8005a72 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 facb 	bl	8006008 <HAL_TSC_ConvCpltCallback>
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	e011      	b.n	8005ac4 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d006      	beq.n	8005abe <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d9ea      	bls.n	8005aa0 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aea:	e7fe      	b.n	8005aea <HardFault_Handler+0x4>

08005aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005af0:	e7fe      	b.n	8005af0 <MemManage_Handler+0x4>

08005af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005af6:	e7fe      	b.n	8005af6 <BusFault_Handler+0x4>

08005af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005afc:	e7fe      	b.n	8005afc <UsageFault_Handler+0x4>

08005afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005afe:	b480      	push	{r7}
 8005b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b02:	bf00      	nop
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005b10:	2004      	movs	r0, #4
 8005b12:	f003 fa49 	bl	8008fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <EXTI2_IRQHandler+0x1c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2104      	movs	r1, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f00e fdd7 	bl	80146d0 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20028094 	.word	0x20028094

08005b2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <DMA1_Channel1_IRQHandler+0x10>)
 8005b32:	f002 ff3a 	bl	80089aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20027ae0 	.word	0x20027ae0

08005b40 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005b44:	4802      	ldr	r0, [pc, #8]	; (8005b50 <USB_LP_IRQHandler+0x10>)
 8005b46:	f005 fbc3 	bl	800b2d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20029ef8 	.word	0x20029ef8

08005b54 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005b58:	4802      	ldr	r0, [pc, #8]	; (8005b64 <COMP_IRQHandler+0x10>)
 8005b5a:	f002 fb85 	bl	8008268 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200280c0 	.word	0x200280c0

08005b68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005b6c:	2020      	movs	r0, #32
 8005b6e:	f003 fa1b 	bl	8008fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b7c:	4803      	ldr	r0, [pc, #12]	; (8005b8c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005b7e:	f008 feb5 	bl	800e8ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005b82:	4803      	ldr	r0, [pc, #12]	; (8005b90 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005b84:	f008 feb2 	bl	800e8ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005b88:	bf00      	nop
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	2002880c 	.word	0x2002880c
 8005b90:	200288a4 	.word	0x200288a4

08005b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <TIM2_IRQHandler+0x10>)
 8005b9a:	f008 fea7 	bl	800e8ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20028858 	.word	0x20028858

08005ba8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <I2C1_EV_IRQHandler+0x10>)
 8005bae:	f003 fe35 	bl	800981c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20028250 	.word	0x20028250

08005bbc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005bc0:	f003 fa0a 	bl	8008fd8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005bcc:	f014 faa2 	bl	801a114 <HW_IPCC_Tx_Handler>

  return;
 8005bd0:	bf00      	nop
}
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005bd8:	f014 fa42 	bl	801a060 <HW_IPCC_Rx_Handler>
  return;
 8005bdc:	bf00      	nop
}
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8005be4:	f7fd fbb4 	bl	8003350 <HW_TS_RTC_Wakeup_Handler>
}
 8005be8:	bf00      	nop
 8005bea:	bd80      	pop	{r7, pc}

08005bec <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005bf0:	4802      	ldr	r0, [pc, #8]	; (8005bfc <TSC_IRQHandler+0x10>)
 8005bf2:	f7ff ff15 	bl	8005a20 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20028924 	.word	0x20028924

08005c00 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005c00:	b40c      	push	{r2, r3}
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	4603      	mov	r3, r0
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	71fb      	strb	r3, [r7, #7]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	b002      	add	sp, #8
 8005c1e:	4770      	bx	lr

08005c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005c24:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <SystemInit+0xa0>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005c2a:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <SystemInit+0xa0>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c30:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <SystemInit+0xa0>)
 8005c32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005c52:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <SystemInit+0xa4>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c70:	f023 0305 	bic.w	r3, r3, #5
 8005c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	4a0d      	ldr	r2, [pc, #52]	; (8005cc8 <SystemInit+0xa8>)
 8005c92:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	4a0b      	ldr	r2, [pc, #44]	; (8005cc8 <SystemInit+0xa8>)
 8005c9a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005caa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	619a      	str	r2, [r3, #24]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000ed00 	.word	0xe000ed00
 8005cc4:	faf6fefb 	.word	0xfaf6fefb
 8005cc8:	22041000 	.word	0x22041000

08005ccc <LL_AHB2_GRP1_EnableClock>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <LL_APB1_GRP1_EnableClock>:
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d22:	68fb      	ldr	r3, [r7, #12]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <LL_APB2_GRP1_EnableClock>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	; 0x38
 8005d68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	605a      	str	r2, [r3, #4]
 8005d74:	609a      	str	r2, [r3, #8]
 8005d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d78:	f107 031c 	add.w	r3, r7, #28
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d84:	463b      	mov	r3, r7
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	609a      	str	r2, [r3, #8]
 8005d8e:	60da      	str	r2, [r3, #12]
 8005d90:	611a      	str	r2, [r3, #16]
 8005d92:	615a      	str	r2, [r3, #20]
 8005d94:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005d96:	4b3d      	ldr	r3, [pc, #244]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005da0:	f240 623f 	movw	r2, #1599	; 0x63f
 8005da4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005da8:	2220      	movs	r2, #32
 8005daa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8005dac:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005dae:	220a      	movs	r2, #10
 8005db0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005db2:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005db8:	4b34      	ldr	r3, [pc, #208]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005dba:	2280      	movs	r2, #128	; 0x80
 8005dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005dbe:	4833      	ldr	r0, [pc, #204]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005dc0:	f008 fa5c 	bl	800e27c <HAL_TIM_Base_Init>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005dca:	f7fe fb81 	bl	80044d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd8:	4619      	mov	r1, r3
 8005dda:	482c      	ldr	r0, [pc, #176]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005ddc:	f009 f82c 	bl	800ee38 <HAL_TIM_ConfigClockSource>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005de6:	f7fe fb73 	bl	80044d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005dea:	4828      	ldr	r0, [pc, #160]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005dec:	f008 fbbb 	bl	800e566 <HAL_TIM_PWM_Init>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005df6:	f7fe fb6b 	bl	80044d0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005dfa:	4824      	ldr	r0, [pc, #144]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005dfc:	f008 fb52 	bl	800e4a4 <HAL_TIM_OC_Init>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8005e06:	f7fe fb63 	bl	80044d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005e0a:	2320      	movs	r3, #32
 8005e0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e12:	f107 031c 	add.w	r3, r7, #28
 8005e16:	4619      	mov	r1, r3
 8005e18:	481c      	ldr	r0, [pc, #112]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005e1a:	f009 fc89 	bl	800f730 <HAL_TIMEx_MasterConfigSynchronization>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8005e24:	f7fe fb54 	bl	80044d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e28:	2360      	movs	r3, #96	; 0x60
 8005e2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8005e2c:	2305      	movs	r3, #5
 8005e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e38:	463b      	mov	r3, r7
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4813      	ldr	r0, [pc, #76]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005e40:	f008 feea 	bl	800ec18 <HAL_TIM_PWM_ConfigChannel>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8005e4a:	f7fe fb41 	bl	80044d0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e5c:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e66:	463b      	mov	r3, r7
 8005e68:	220c      	movs	r2, #12
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4807      	ldr	r0, [pc, #28]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005e6e:	f008 fe5d 	bl	800eb2c <HAL_TIM_OC_ConfigChannel>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8005e78:	f7fe fb2a 	bl	80044d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005e7c:	4803      	ldr	r0, [pc, #12]	; (8005e8c <MX_TIM2_Init+0x128>)
 8005e7e:	f000 f859 	bl	8005f34 <HAL_TIM_MspPostInit>

}
 8005e82:	bf00      	nop
 8005e84:	3738      	adds	r7, #56	; 0x38
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20028858 	.word	0x20028858

08005e90 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005e96:	4a10      	ldr	r2, [pc, #64]	; (8005ed8 <MX_TIM16_Init+0x48>)
 8005e98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005e9c:	221f      	movs	r2, #31
 8005e9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005eb4:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005ec0:	4804      	ldr	r0, [pc, #16]	; (8005ed4 <MX_TIM16_Init+0x44>)
 8005ec2:	f008 f9db 	bl	800e27c <HAL_TIM_Base_Init>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005ecc:	f7fe fb00 	bl	80044d0 <Error_Handler>
  }

}
 8005ed0:	bf00      	nop
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	200288a4 	.word	0x200288a4
 8005ed8:	40014400 	.word	0x40014400

08005edc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d10b      	bne.n	8005f06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005eee:	2001      	movs	r0, #1
 8005ef0:	f7ff ff05 	bl	8005cfe <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2105      	movs	r1, #5
 8005ef8:	201c      	movs	r0, #28
 8005efa:	f002 fb1e 	bl	800853a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005efe:	201c      	movs	r0, #28
 8005f00:	f002 fb35 	bl	800856e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005f04:	e010      	b.n	8005f28 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <HAL_TIM_Base_MspInit+0x54>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10b      	bne.n	8005f28 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005f14:	f7ff ff0c 	bl	8005d30 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	2019      	movs	r0, #25
 8005f1e:	f002 fb0c 	bl	800853a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005f22:	2019      	movs	r0, #25
 8005f24:	f002 fb23 	bl	800856e <HAL_NVIC_EnableIRQ>
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40014400 	.word	0x40014400

08005f34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f3c:	f107 030c 	add.w	r3, r7, #12
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	609a      	str	r2, [r3, #8]
 8005f48:	60da      	str	r2, [r3, #12]
 8005f4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f54:	d112      	bne.n	8005f7c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f56:	2002      	movs	r0, #2
 8005f58:	f7ff feb8 	bl	8005ccc <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f60:	2302      	movs	r3, #2
 8005f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 8005f70:	f107 030c 	add.w	r3, r7, #12
 8005f74:	4619      	mov	r1, r3
 8005f76:	4803      	ldr	r0, [pc, #12]	; (8005f84 <HAL_TIM_MspPostInit+0x50>)
 8005f78:	f002 fe76 	bl	8008c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005f7c:	bf00      	nop
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	48000400 	.word	0x48000400

08005f88 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8005f90:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <HAL_COMP_TriggerCallback+0x74>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <HAL_COMP_TriggerCallback+0x78>)
 8005f9a:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f002 f991 	bl	80082c4 <HAL_COMP_GetOutputLevel>
 8005fa2:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d109      	bne.n	8005fbe <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8005faa:	4b15      	ldr	r3, [pc, #84]	; (8006000 <HAL_COMP_TriggerCallback+0x78>)
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	4b15      	ldr	r3, [pc, #84]	; (8006004 <HAL_COMP_TriggerCallback+0x7c>)
 8005fb0:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8005fb4:	4b13      	ldr	r3, [pc, #76]	; (8006004 <HAL_COMP_TriggerCallback+0x7c>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8005fbc:	e019      	b.n	8005ff2 <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8005fbe:	4b11      	ldr	r3, [pc, #68]	; (8006004 <HAL_COMP_TriggerCallback+0x7c>)
 8005fc0:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d014      	beq.n	8005ff2 <HAL_COMP_TriggerCallback+0x6a>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d111      	bne.n	8005ff2 <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <HAL_COMP_TriggerCallback+0x7c>)
 8005fd0:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <HAL_COMP_TriggerCallback+0x78>)
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HAL_COMP_TriggerCallback+0x7c>)
 8005fda:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4807      	ldr	r0, [pc, #28]	; (8006004 <HAL_COMP_TriggerCallback+0x7c>)
 8005fe6:	f7fd fed3 	bl	8003d90 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_COMP_TriggerCallback+0x7c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200288a4 	.word	0x200288a4
 8006000:	20000c7e 	.word	0x20000c7e
 8006004:	20027c6c 	.word	0x20027c6c

08006008 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8006008:	b5b0      	push	{r4, r5, r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8006010:	2101      	movs	r1, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fcd4 	bl	80059c0 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8006018:	2101      	movs	r1, #1
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fc59 	bl	80058d2 <HAL_TSC_GroupGetStatus>
 8006020:	4603      	mov	r3, r0
 8006022:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 8006024:	7dbb      	ldrb	r3, [r7, #22]
 8006026:	2b01      	cmp	r3, #1
 8006028:	f040 8115 	bne.w	8006256 <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 800602c:	2101      	movs	r1, #1
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fc71 	bl	8005916 <HAL_TSC_GroupGetValue>
 8006034:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 8006036:	4ba0      	ldr	r3, [pc, #640]	; (80062b8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d17d      	bne.n	800613a <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 800603e:	4b9f      	ldr	r3, [pc, #636]	; (80062bc <HAL_TSC_ConvCpltCallback+0x2b4>)
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	2b64      	cmp	r3, #100	; 0x64
 8006044:	d83a      	bhi.n	80060bc <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 800604a:	4b9c      	ldr	r3, [pc, #624]	; (80062bc <HAL_TSC_ConvCpltCallback+0x2b4>)
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d108      	bne.n	8006064 <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605c:	4b98      	ldr	r3, [pc, #608]	; (80062c0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800605e:	edc3 7a00 	vstr	s15, [r3]
 8006062:	e024      	b.n	80060ae <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8006064:	6938      	ldr	r0, [r7, #16]
 8006066:	f7fa f9d7 	bl	8000418 <__aeabi_ui2d>
 800606a:	a38f      	add	r3, pc, #572	; (adr r3, 80062a8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f7fa fa4c 	bl	800050c <__aeabi_dmul>
 8006074:	4603      	mov	r3, r0
 8006076:	460c      	mov	r4, r1
 8006078:	4625      	mov	r5, r4
 800607a:	461c      	mov	r4, r3
 800607c:	4b90      	ldr	r3, [pc, #576]	; (80062c0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f7fa f9eb 	bl	800045c <__aeabi_f2d>
 8006086:	a38a      	add	r3, pc, #552	; (adr r3, 80062b0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f7fa fa3e 	bl	800050c <__aeabi_dmul>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4620      	mov	r0, r4
 8006096:	4629      	mov	r1, r5
 8006098:	f7fa f882 	bl	80001a0 <__adddf3>
 800609c:	4603      	mov	r3, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	4618      	mov	r0, r3
 80060a2:	4621      	mov	r1, r4
 80060a4:	f7fa fce2 	bl	8000a6c <__aeabi_d2f>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b85      	ldr	r3, [pc, #532]	; (80062c0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80060ac:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 80060ae:	4b83      	ldr	r3, [pc, #524]	; (80062bc <HAL_TSC_ConvCpltCallback+0x2b4>)
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	4b81      	ldr	r3, [pc, #516]	; (80062bc <HAL_TSC_ConvCpltCallback+0x2b4>)
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e0ba      	b.n	8006232 <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060c6:	4b7e      	ldr	r3, [pc, #504]	; (80062c0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80060c8:	edd3 7a00 	vldr	s15, [r3]
 80060cc:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80062c4 <HAL_TSC_ConvCpltCallback+0x2bc>
 80060d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060dc:	bf94      	ite	ls
 80060de:	2301      	movls	r3, #1
 80060e0:	2300      	movhi	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 80a2 	bne.w	8006232 <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 80060ee:	6938      	ldr	r0, [r7, #16]
 80060f0:	f7fa f992 	bl	8000418 <__aeabi_ui2d>
 80060f4:	a36c      	add	r3, pc, #432	; (adr r3, 80062a8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa fa07 	bl	800050c <__aeabi_dmul>
 80060fe:	4603      	mov	r3, r0
 8006100:	460c      	mov	r4, r1
 8006102:	4625      	mov	r5, r4
 8006104:	461c      	mov	r4, r3
 8006106:	4b6e      	ldr	r3, [pc, #440]	; (80062c0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fa f9a6 	bl	800045c <__aeabi_f2d>
 8006110:	a367      	add	r3, pc, #412	; (adr r3, 80062b0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fa f9f9 	bl	800050c <__aeabi_dmul>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa f83d 	bl	80001a0 <__adddf3>
 8006126:	4603      	mov	r3, r0
 8006128:	460c      	mov	r4, r1
 800612a:	4618      	mov	r0, r3
 800612c:	4621      	mov	r1, r4
 800612e:	f7fa fc9d 	bl	8000a6c <__aeabi_d2f>
 8006132:	4602      	mov	r2, r0
 8006134:	4b62      	ldr	r3, [pc, #392]	; (80062c0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	e07b      	b.n	8006232 <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 800613a:	4b63      	ldr	r3, [pc, #396]	; (80062c8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	2b64      	cmp	r3, #100	; 0x64
 8006140:	d83a      	bhi.n	80061b8 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 8006146:	4b60      	ldr	r3, [pc, #384]	; (80062c8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006158:	4b5c      	ldr	r3, [pc, #368]	; (80062cc <HAL_TSC_ConvCpltCallback+0x2c4>)
 800615a:	edc3 7a00 	vstr	s15, [r3]
 800615e:	e024      	b.n	80061aa <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8006160:	6938      	ldr	r0, [r7, #16]
 8006162:	f7fa f959 	bl	8000418 <__aeabi_ui2d>
 8006166:	a350      	add	r3, pc, #320	; (adr r3, 80062a8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f7fa f9ce 	bl	800050c <__aeabi_dmul>
 8006170:	4603      	mov	r3, r0
 8006172:	460c      	mov	r4, r1
 8006174:	4625      	mov	r5, r4
 8006176:	461c      	mov	r4, r3
 8006178:	4b54      	ldr	r3, [pc, #336]	; (80062cc <HAL_TSC_ConvCpltCallback+0x2c4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f7fa f96d 	bl	800045c <__aeabi_f2d>
 8006182:	a34b      	add	r3, pc, #300	; (adr r3, 80062b0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f9c0 	bl	800050c <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4620      	mov	r0, r4
 8006192:	4629      	mov	r1, r5
 8006194:	f7fa f804 	bl	80001a0 <__adddf3>
 8006198:	4603      	mov	r3, r0
 800619a:	460c      	mov	r4, r1
 800619c:	4618      	mov	r0, r3
 800619e:	4621      	mov	r1, r4
 80061a0:	f7fa fc64 	bl	8000a6c <__aeabi_d2f>
 80061a4:	4602      	mov	r2, r0
 80061a6:	4b49      	ldr	r3, [pc, #292]	; (80062cc <HAL_TSC_ConvCpltCallback+0x2c4>)
 80061a8:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 80061aa:	4b47      	ldr	r3, [pc, #284]	; (80062c8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	4b45      	ldr	r3, [pc, #276]	; (80062c8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e03c      	b.n	8006232 <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061c2:	4b42      	ldr	r3, [pc, #264]	; (80062cc <HAL_TSC_ConvCpltCallback+0x2c4>)
 80061c4:	edd3 7a00 	vldr	s15, [r3]
 80061c8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80062c4 <HAL_TSC_ConvCpltCallback+0x2bc>
 80061cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d8:	bf94      	ite	ls
 80061da:	2301      	movls	r3, #1
 80061dc:	2300      	movhi	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d124      	bne.n	8006232 <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 80061e8:	6938      	ldr	r0, [r7, #16]
 80061ea:	f7fa f915 	bl	8000418 <__aeabi_ui2d>
 80061ee:	a32e      	add	r3, pc, #184	; (adr r3, 80062a8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7fa f98a 	bl	800050c <__aeabi_dmul>
 80061f8:	4603      	mov	r3, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	4625      	mov	r5, r4
 80061fe:	461c      	mov	r4, r3
 8006200:	4b32      	ldr	r3, [pc, #200]	; (80062cc <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7fa f929 	bl	800045c <__aeabi_f2d>
 800620a:	a329      	add	r3, pc, #164	; (adr r3, 80062b0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f97c 	bl	800050c <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4620      	mov	r0, r4
 800621a:	4629      	mov	r1, r5
 800621c:	f7f9 ffc0 	bl	80001a0 <__adddf3>
 8006220:	4603      	mov	r3, r0
 8006222:	460c      	mov	r4, r1
 8006224:	4618      	mov	r0, r3
 8006226:	4621      	mov	r1, r4
 8006228:	f7fa fc20 	bl	8000a6c <__aeabi_d2f>
 800622c:	4602      	mov	r2, r0
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006230:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 8006232:	f000 fb79 	bl	8006928 <HAL_GetTick>
 8006236:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8006238:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	4a24      	ldr	r2, [pc, #144]	; (80062d0 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8006240:	4413      	add	r3, r2
 8006242:	7df9      	ldrb	r1, [r7, #23]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f9f2 	bl	8006630 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4920      	ldr	r1, [pc, #128]	; (80062d0 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8006250:	4820      	ldr	r0, [pc, #128]	; (80062d4 <HAL_TSC_ConvCpltCallback+0x2cc>)
 8006252:	f000 f843 	bl	80062dc <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 8006256:	4b18      	ldr	r3, [pc, #96]	; (80062b8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 800625e:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 8006264:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e005      	b.n	8006278 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <HAL_TSC_ConvCpltCallback+0x2d0>)
 800626e:	2240      	movs	r2, #64	; 0x40
 8006270:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 8006272:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 8006278:	4917      	ldr	r1, [pc, #92]	; (80062d8 <HAL_TSC_ConvCpltCallback+0x2d0>)
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff fb5d 	bl	800593a <HAL_TSC_IOConfig>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 8006286:	f7fe f923 	bl	80044d0 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff fac4 	bl	8005818 <HAL_TSC_Start_IT>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 8006296:	f7fe f91b 	bl	80044d0 <Error_Handler>
	}

}
 800629a:	bf00      	nop
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bdb0      	pop	{r4, r5, r7, pc}
 80062a2:	bf00      	nop
 80062a4:	f3af 8000 	nop.w
 80062a8:	47ae147b 	.word	0x47ae147b
 80062ac:	3f847ae1 	.word	0x3f847ae1
 80062b0:	7ae147ae 	.word	0x7ae147ae
 80062b4:	3fefae14 	.word	0x3fefae14
 80062b8:	20000c80 	.word	0x20000c80
 80062bc:	20000c94 	.word	0x20000c94
 80062c0:	200288fc 	.word	0x200288fc
 80062c4:	42700000 	.word	0x42700000
 80062c8:	20000c96 	.word	0x20000c96
 80062cc:	20028920 	.word	0x20028920
 80062d0:	20000c84 	.word	0x20000c84
 80062d4:	20028904 	.word	0x20028904
 80062d8:	200288f0 	.word	0x200288f0

080062dc <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08c      	sub	sp, #48	; 0x30
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	7e1b      	ldrb	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d123      	bne.n	8006338 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	795b      	ldrb	r3, [r3, #5]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00c      	beq.n	8006312 <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 800630a:	4b99      	ldr	r3, [pc, #612]	; (8006570 <process_touches+0x294>)
 800630c:	2205      	movs	r2, #5
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e126      	b.n	8006560 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	3308      	adds	r3, #8
 8006316:	795b      	ldrb	r3, [r3, #5]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8121 	beq.w	8006560 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	605a      	str	r2, [r3, #4]
			action = BackHold;
 8006330:	4b8f      	ldr	r3, [pc, #572]	; (8006570 <process_touches+0x294>)
 8006332:	2206      	movs	r2, #6
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e113      	b.n	8006560 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	7e1b      	ldrb	r3, [r3, #24]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d12d      	bne.n	800639c <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f1c3 0301 	rsb	r3, r3, #1
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	795b      	ldrb	r3, [r3, #5]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d010      	beq.n	8006376 <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2202      	movs	r2, #2
 8006358:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	f1c3 0301 	rsb	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]
			action = BothHold;
 800636e:	4b80      	ldr	r3, [pc, #512]	; (8006570 <process_touches+0x294>)
 8006370:	2207      	movs	r2, #7
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e0f4      	b.n	8006560 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4413      	add	r3, r2
 8006380:	795b      	ldrb	r3, [r3, #5]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 80ec 	bne.w	8006560 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2203      	movs	r2, #3
 800638c:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8006394:	4b76      	ldr	r3, [pc, #472]	; (8006570 <process_touches+0x294>)
 8006396:	2208      	movs	r2, #8
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e0e1      	b.n	8006560 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	7e1b      	ldrb	r3, [r3, #24]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d11e      	bne.n	80063e2 <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4413      	add	r3, r2
 80063ae:	795b      	ldrb	r3, [r3, #5]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2204      	movs	r2, #4
 80063b8:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	609a      	str	r2, [r3, #8]
 80063c0:	e0ce      	b.n	8006560 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	7b1b      	ldrb	r3, [r3, #12]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	4413      	add	r3, r2
 80063cc:	795b      	ldrb	r3, [r3, #5]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 80c6 	bne.w	8006560 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2205      	movs	r2, #5
 80063d8:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	615a      	str	r2, [r3, #20]
 80063e0:	e0be      	b.n	8006560 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	7e1b      	ldrb	r3, [r3, #24]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d134      	bne.n	8006454 <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	f1c3 0301 	rsb	r3, r3, #1
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	4413      	add	r3, r2
 80063f8:	795b      	ldrb	r3, [r3, #5]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00d      	beq.n	800641a <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2204      	movs	r2, #4
 8006402:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f1c3 0301 	rsb	r3, r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	611a      	str	r2, [r3, #16]
 8006418:	e0a2      	b.n	8006560 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b0a      	cmp	r3, #10
 8006424:	f240 809c 	bls.w	8006560 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b28      	cmp	r3, #40	; 0x28
 8006438:	d905      	bls.n	8006446 <process_touches+0x16a>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2bc7      	cmp	r3, #199	; 0xc7
 800643e:	d802      	bhi.n	8006446 <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 8006440:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <process_touches+0x294>)
 8006442:	2208      	movs	r2, #8
 8006444:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8006446:	4b4b      	ldr	r3, [pc, #300]	; (8006574 <process_touches+0x298>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	761a      	strb	r2, [r3, #24]
 8006452:	e085      	b.n	8006560 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	7e1b      	ldrb	r3, [r3, #24]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d148      	bne.n	80064ee <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	7b1b      	ldrb	r3, [r3, #12]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	4413      	add	r3, r2
 8006466:	795b      	ldrb	r3, [r3, #5]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d179      	bne.n	8006560 <process_touches+0x284>
			self->touch_state = Idle;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	615a      	str	r2, [r3, #20]
			action = None;
 8006478:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <process_touches+0x294>)
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2b28      	cmp	r3, #40	; 0x28
 80064a6:	d80c      	bhi.n	80064c2 <process_touches+0x1e6>
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b28      	cmp	r3, #40	; 0x28
 80064ac:	d809      	bhi.n	80064c2 <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b28      	cmp	r3, #40	; 0x28
 80064b2:	d906      	bls.n	80064c2 <process_touches+0x1e6>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2bc7      	cmp	r3, #199	; 0xc7
 80064b8:	d803      	bhi.n	80064c2 <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 80064ba:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <process_touches+0x294>)
 80064bc:	2208      	movs	r2, #8
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e011      	b.n	80064e6 <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	2b28      	cmp	r3, #40	; 0x28
 80064c6:	d90e      	bls.n	80064e6 <process_touches+0x20a>
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2b28      	cmp	r3, #40	; 0x28
 80064cc:	d90b      	bls.n	80064e6 <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	b25a      	sxtb	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	7b1b      	ldrb	r3, [r3, #12]
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4b23      	ldr	r3, [pc, #140]	; (8006570 <process_touches+0x294>)
 80064e4:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	761a      	strb	r2, [r3, #24]
 80064ec:	e038      	b.n	8006560 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	7e1b      	ldrb	r3, [r3, #24]
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d134      	bne.n	8006560 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	4413      	add	r3, r2
 8006500:	795b      	ldrb	r3, [r3, #5]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d12c      	bne.n	8006560 <process_touches+0x284>
			self->touch_state = Idle;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	2b28      	cmp	r3, #40	; 0x28
 800653a:	d80b      	bhi.n	8006554 <process_touches+0x278>
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b28      	cmp	r3, #40	; 0x28
 8006540:	d808      	bhi.n	8006554 <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	2b28      	cmp	r3, #40	; 0x28
 8006546:	d905      	bls.n	8006554 <process_touches+0x278>
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	2bc7      	cmp	r3, #199	; 0xc7
 800654c:	d802      	bhi.n	8006554 <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 800654e:	4b08      	ldr	r3, [pc, #32]	; (8006570 <process_touches+0x294>)
 8006550:	2208      	movs	r2, #8
 8006552:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <process_touches+0x298>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8006560:	4b03      	ldr	r3, [pc, #12]	; (8006570 <process_touches+0x294>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d107      	bne.n	8006578 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006568:	4b02      	ldr	r3, [pc, #8]	; (8006574 <process_touches+0x298>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e042      	b.n	80065f6 <process_touches+0x31a>
 8006570:	20000c9c 	.word	0x20000c9c
 8006574:	20028900 	.word	0x20028900

	}else if(action == SwipeForward){
 8006578:	4b29      	ldr	r3, [pc, #164]	; (8006620 <process_touches+0x344>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d103      	bne.n	8006588 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <process_touches+0x348>)
 8006582:	2203      	movs	r2, #3
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e036      	b.n	80065f6 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8006588:	4b25      	ldr	r3, [pc, #148]	; (8006620 <process_touches+0x344>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d103      	bne.n	8006598 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8006590:	4b24      	ldr	r3, [pc, #144]	; (8006624 <process_touches+0x348>)
 8006592:	2241      	movs	r2, #65	; 0x41
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e02e      	b.n	80065f6 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8006598:	4b21      	ldr	r3, [pc, #132]	; (8006620 <process_touches+0x344>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d103      	bne.n	80065a8 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 80065a0:	4b20      	ldr	r3, [pc, #128]	; (8006624 <process_touches+0x348>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e026      	b.n	80065f6 <process_touches+0x31a>
	}else if(action == BackRelease){
 80065a8:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <process_touches+0x344>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d103      	bne.n	80065b8 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 80065b0:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <process_touches+0x348>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e01e      	b.n	80065f6 <process_touches+0x31a>
	}else if(action == FrontHold){
 80065b8:	4b19      	ldr	r3, [pc, #100]	; (8006620 <process_touches+0x344>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b05      	cmp	r3, #5
 80065be:	d103      	bne.n	80065c8 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 80065c0:	4b18      	ldr	r3, [pc, #96]	; (8006624 <process_touches+0x348>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e016      	b.n	80065f6 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <process_touches+0x344>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b06      	cmp	r3, #6
 80065ce:	d103      	bne.n	80065d8 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 80065d0:	4b14      	ldr	r3, [pc, #80]	; (8006624 <process_touches+0x348>)
 80065d2:	2202      	movs	r2, #2
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e00e      	b.n	80065f6 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <process_touches+0x344>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b07      	cmp	r3, #7
 80065de:	d103      	bne.n	80065e8 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <process_touches+0x348>)
 80065e2:	2240      	movs	r2, #64	; 0x40
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e006      	b.n	80065f6 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <process_touches+0x344>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d102      	bne.n	80065f6 <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <process_touches+0x348>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <process_touches+0x34c>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <process_touches+0x348>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d00a      	beq.n	8006618 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <process_touches+0x348>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a08      	ldr	r2, [pc, #32]	; (8006628 <process_touches+0x34c>)
 8006608:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 800660a:	4b08      	ldr	r3, [pc, #32]	; (800662c <process_touches+0x350>)
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	2200      	movs	r2, #0
 8006612:	4904      	ldr	r1, [pc, #16]	; (8006624 <process_touches+0x348>)
 8006614:	f00e fe1e 	bl	8015254 <osMessageQueuePut>

	}

}
 8006618:	bf00      	nop
 800661a:	3730      	adds	r7, #48	; 0x30
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20000c9c 	.word	0x20000c9c
 8006624:	20028900 	.word	0x20028900
 8006628:	20000c98 	.word	0x20000c98
 800662c:	20027c58 	.word	0x20027c58

08006630 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	460b      	mov	r3, r1
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	791b      	ldrb	r3, [r3, #4]
 8006642:	7afa      	ldrb	r2, [r7, #11]
 8006644:	429a      	cmp	r2, r3
 8006646:	d006      	beq.n	8006656 <debounce+0x26>
		self->input = noisy_in;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	7afa      	ldrb	r2, [r7, #11]
 800664c:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8006654:	e009      	b.n	800666a <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b1e      	cmp	r3, #30
 8006660:	d903      	bls.n	800666a <debounce+0x3a>
		self->clean_out = self->input;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	791a      	ldrb	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	715a      	strb	r2, [r3, #5]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <LL_AHB1_GRP1_EnableClock>:
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800667e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4313      	orrs	r3, r2
 800668c:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4013      	ands	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800669a:	68fb      	ldr	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <LL_AHB2_GRP1_EnableClock>:
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80066b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4313      	orrs	r3, r2
 80066be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80066c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4013      	ands	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80066cc:	68fb      	ldr	r3, [r7, #12]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <MX_TSC_Init+0x7c>)
 80066e2:	4a1e      	ldr	r2, [pc, #120]	; (800675c <MX_TSC_Init+0x80>)
 80066e4:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 80066e6:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <MX_TSC_Init+0x7c>)
 80066e8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80066ec:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 80066ee:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <MX_TSC_Init+0x7c>)
 80066f0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80066f4:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 80066f6:	4b18      	ldr	r3, [pc, #96]	; (8006758 <MX_TSC_Init+0x7c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <MX_TSC_Init+0x7c>)
 80066fe:	2201      	movs	r2, #1
 8006700:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <MX_TSC_Init+0x7c>)
 8006704:	2200      	movs	r2, #0
 8006706:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8006708:	4b13      	ldr	r3, [pc, #76]	; (8006758 <MX_TSC_Init+0x7c>)
 800670a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800670e:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8006710:	4b11      	ldr	r3, [pc, #68]	; (8006758 <MX_TSC_Init+0x7c>)
 8006712:	22c0      	movs	r2, #192	; 0xc0
 8006714:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <MX_TSC_Init+0x7c>)
 8006718:	2200      	movs	r2, #0
 800671a:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 800671c:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <MX_TSC_Init+0x7c>)
 800671e:	2200      	movs	r2, #0
 8006720:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <MX_TSC_Init+0x7c>)
 8006724:	2200      	movs	r2, #0
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <MX_TSC_Init+0x7c>)
 800672a:	2200      	movs	r2, #0
 800672c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <MX_TSC_Init+0x7c>)
 8006732:	22c0      	movs	r2, #192	; 0xc0
 8006734:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 8006736:	4b08      	ldr	r3, [pc, #32]	; (8006758 <MX_TSC_Init+0x7c>)
 8006738:	2200      	movs	r2, #0
 800673a:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <MX_TSC_Init+0x7c>)
 800673e:	2210      	movs	r2, #16
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8006742:	4805      	ldr	r0, [pc, #20]	; (8006758 <MX_TSC_Init+0x7c>)
 8006744:	f7fe ffe8 	bl	8005718 <HAL_TSC_Init>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 800674e:	f7fd febf 	bl	80044d0 <Error_Handler>
  }

}
 8006752:	bf00      	nop
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20028924 	.word	0x20028924
 800675c:	40024000 	.word	0x40024000

08006760 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006768:	f107 030c 	add.w	r3, r7, #12
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <HAL_TSC_MspInit+0x88>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d12e      	bne.n	80067e0 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8006782:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006786:	f7ff ff76 	bl	8006676 <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800678a:	2002      	movs	r0, #2
 800678c:	f7ff ff8c 	bl	80066a8 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006790:	2310      	movs	r3, #16
 8006792:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006794:	2312      	movs	r3, #18
 8006796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800679c:	2300      	movs	r3, #0
 800679e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80067a0:	2309      	movs	r3, #9
 80067a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067a4:	f107 030c 	add.w	r3, r7, #12
 80067a8:	4619      	mov	r1, r3
 80067aa:	4810      	ldr	r0, [pc, #64]	; (80067ec <HAL_TSC_MspInit+0x8c>)
 80067ac:	f002 fa5c 	bl	8008c68 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067b0:	23c0      	movs	r3, #192	; 0xc0
 80067b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b4:	2302      	movs	r3, #2
 80067b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067bc:	2300      	movs	r3, #0
 80067be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80067c0:	2309      	movs	r3, #9
 80067c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067c4:	f107 030c 	add.w	r3, r7, #12
 80067c8:	4619      	mov	r1, r3
 80067ca:	4808      	ldr	r0, [pc, #32]	; (80067ec <HAL_TSC_MspInit+0x8c>)
 80067cc:	f002 fa4c 	bl	8008c68 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 80067d0:	2200      	movs	r2, #0
 80067d2:	2105      	movs	r1, #5
 80067d4:	2027      	movs	r0, #39	; 0x27
 80067d6:	f001 feb0 	bl	800853a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 80067da:	2027      	movs	r0, #39	; 0x27
 80067dc:	f001 fec7 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80067e0:	bf00      	nop
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40024000 	.word	0x40024000
 80067ec:	48000400 	.word	0x48000400

080067f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80067f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067f4:	3304      	adds	r3, #4

080067f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80067fa:	d3f9      	bcc.n	80067f0 <CopyDataInit>
  bx lr
 80067fc:	4770      	bx	lr

080067fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80067fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006800:	3004      	adds	r0, #4

08006802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006802:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006804:	d3fb      	bcc.n	80067fe <FillZerobss>
  bx lr
 8006806:	4770      	bx	lr

08006808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006808:	480c      	ldr	r0, [pc, #48]	; (800683c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800680a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800680c:	f7ff fa08 	bl	8005c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006810:	480b      	ldr	r0, [pc, #44]	; (8006840 <LoopForever+0x8>)
 8006812:	490c      	ldr	r1, [pc, #48]	; (8006844 <LoopForever+0xc>)
 8006814:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <LoopForever+0x10>)
 8006816:	2300      	movs	r3, #0
 8006818:	f7ff ffed 	bl	80067f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800681c:	480b      	ldr	r0, [pc, #44]	; (800684c <LoopForever+0x14>)
 800681e:	490c      	ldr	r1, [pc, #48]	; (8006850 <LoopForever+0x18>)
 8006820:	2300      	movs	r3, #0
 8006822:	f7ff ffee 	bl	8006802 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006826:	480b      	ldr	r0, [pc, #44]	; (8006854 <LoopForever+0x1c>)
 8006828:	490b      	ldr	r1, [pc, #44]	; (8006858 <LoopForever+0x20>)
 800682a:	2300      	movs	r3, #0
 800682c:	f7ff ffe9 	bl	8006802 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006830:	f014 fe1e 	bl	801b470 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006834:	f7fd fd6c 	bl	8004310 <main>

08006838 <LoopForever>:

LoopForever:
  b LoopForever
 8006838:	e7fe      	b.n	8006838 <LoopForever>
 800683a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800683c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006840:	20000004 	.word	0x20000004
 8006844:	200002dc 	.word	0x200002dc
 8006848:	0801d918 	.word	0x0801d918
  INIT_BSS _sbss, _ebss
 800684c:	20000390 	.word	0x20000390
 8006850:	2002a16c 	.word	0x2002a16c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006854:	200300e0 	.word	0x200300e0
 8006858:	20030c63 	.word	0x20030c63

0800685c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800685c:	e7fe      	b.n	800685c <ADC1_IRQHandler>
	...

08006860 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	6053      	str	r3, [r2, #4]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	e0042000 	.word	0xe0042000

08006880 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a04      	ldr	r2, [pc, #16]	; (800689c <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800688a:	f023 0302 	bic.w	r3, r3, #2
 800688e:	6053      	str	r3, [r2, #4]
}
 8006890:	bf00      	nop
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	e0042000 	.word	0xe0042000

080068a0 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a04      	ldr	r2, [pc, #16]	; (80068bc <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80068aa:	f023 0304 	bic.w	r3, r3, #4
 80068ae:	6053      	str	r3, [r2, #4]
}
 80068b0:	bf00      	nop
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	e0042000 	.word	0xe0042000

080068c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <HAL_Init+0x3c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a0b      	ldr	r2, [pc, #44]	; (80068fc <HAL_Init+0x3c>)
 80068d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068d6:	2003      	movs	r0, #3
 80068d8:	f001 fe24 	bl	8008524 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068dc:	2000      	movs	r0, #0
 80068de:	f7fe fecf 	bl	8005680 <HAL_InitTick>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	71fb      	strb	r3, [r7, #7]
 80068ec:	e001      	b.n	80068f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068ee:	f7fe fe8e 	bl	800560e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068f2:	79fb      	ldrb	r3, [r7, #7]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	58004000 	.word	0x58004000

08006900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_IncTick+0x20>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_IncTick+0x24>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4413      	add	r3, r2
 8006910:	4a04      	ldr	r2, [pc, #16]	; (8006924 <HAL_IncTick+0x24>)
 8006912:	6013      	str	r3, [r2, #0]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000080 	.word	0x20000080
 8006924:	20028968 	.word	0x20028968

08006928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return uwTick;
 800692c:	4b03      	ldr	r3, [pc, #12]	; (800693c <HAL_GetTick+0x14>)
 800692e:	681b      	ldr	r3, [r3, #0]
}
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	20028968 	.word	0x20028968

08006940 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <HAL_GetTickPrio+0x14>)
 8006946:	681b      	ldr	r3, [r3, #0]
}
 8006948:	4618      	mov	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000007c 	.word	0x2000007c

08006958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8006960:	f7ff ffe2 	bl	8006928 <HAL_GetTick>
 8006964:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d005      	beq.n	800697e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <HAL_Delay+0x40>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800697e:	bf00      	nop
 8006980:	f7ff ffd2 	bl	8006928 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	d8f7      	bhi.n	8006980 <HAL_Delay+0x28>
    {
    }
  }
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000080 	.word	0x20000080

0800699c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80069a0:	f7ff ff5e 	bl	8006860 <LL_DBGMCU_DisableDBGSleepMode>
}
 80069a4:	bf00      	nop
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80069ac:	f7ff ff68 	bl	8006880 <LL_DBGMCU_DisableDBGStopMode>
}
 80069b0:	bf00      	nop
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80069b8:	f7ff ff72 	bl	80068a0 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}

080069c0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	609a      	str	r2, [r3, #8]
#endif
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	609a      	str	r2, [r3, #8]
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3360      	adds	r3, #96	; 0x60
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <LL_ADC_SetOffset+0x44>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	03fff000 	.word	0x03fff000

08006a70 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3360      	adds	r3, #96	; 0x60
 8006a7e:	461a      	mov	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3360      	adds	r3, #96	; 0x60
 8006aac:	461a      	mov	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006aea:	2300      	movs	r3, #0
#endif
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3330      	adds	r3, #48	; 0x30
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	0a1b      	lsrs	r3, r3, #8
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	4413      	add	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	211f      	movs	r1, #31
 8006b24:	fa01 f303 	lsl.w	r3, r1, r3
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	401a      	ands	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	0e9b      	lsrs	r3, r3, #26
 8006b30:	f003 011f 	and.w	r1, r3, #31
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8006b44:	bf00      	nop
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0e5b      	lsrs	r3, r3, #25
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	4413      	add	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	0d1b      	lsrs	r3, r3, #20
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2107      	movs	r1, #7
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	43db      	mvns	r3, r3
 8006b84:	401a      	ands	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	0d1b      	lsrs	r3, r3, #20
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	431a      	orrs	r2, r3
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f003 0318 	and.w	r3, r3, #24
 8006bca:	4908      	ldr	r1, [pc, #32]	; (8006bec <LL_ADC_SetChannelSingleDiff+0x44>)
 8006bcc:	40d9      	lsrs	r1, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	400b      	ands	r3, r1
 8006bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	0007ffff 	.word	0x0007ffff

08006bf0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6093      	str	r3, [r2, #8]
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c28:	d101      	bne.n	8006c2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c78:	d101      	bne.n	8006c7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ca0:	f043 0201 	orr.w	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006cc8:	f043 0202 	orr.w	r2, r3, #2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <LL_ADC_IsEnabled+0x18>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <LL_ADC_IsEnabled+0x1a>
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d101      	bne.n	8006d1a <LL_ADC_IsDisableOngoing+0x18>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <LL_ADC_IsDisableOngoing+0x1a>
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d3c:	f043 0204 	orr.w	r2, r3, #4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d64:	f043 0210 	orr.w	r2, r3, #16
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d101      	bne.n	8006d90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006db2:	f043 0220 	orr.w	r2, r3, #32
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d101      	bne.n	8006dde <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e12c      	b.n	8007064 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d109      	bne.n	8006e2c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fa f877 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff feef 	bl	8006c14 <LL_ADC_IsDeepPowerDownEnabled>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff fed5 	bl	8006bf0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff ff0a 	bl	8006c64 <LL_ADC_IsInternalRegulatorEnabled>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d113      	bne.n	8006e7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff feee 	bl	8006c3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006e60:	4b82      	ldr	r3, [pc, #520]	; (800706c <HAL_ADC_Init+0x280>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	099b      	lsrs	r3, r3, #6
 8006e66:	4a82      	ldr	r2, [pc, #520]	; (8007070 <HAL_ADC_Init+0x284>)
 8006e68:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6c:	099b      	lsrs	r3, r3, #6
 8006e6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006e70:	e002      	b.n	8006e78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f9      	bne.n	8006e72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff feee 	bl	8006c64 <LL_ADC_IsInternalRegulatorEnabled>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10d      	bne.n	8006eaa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	f043 0210 	orr.w	r2, r3, #16
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9e:	f043 0201 	orr.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff ff62 	bl	8006d78 <LL_ADC_REG_IsConversionOngoing>
 8006eb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 80c7 	bne.w	8007052 <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 80c3 	bne.w	8007052 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006ed4:	f043 0202 	orr.w	r2, r3, #2
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fefb 	bl	8006cdc <LL_ADC_IsEnabled>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eec:	4861      	ldr	r0, [pc, #388]	; (8007074 <HAL_ADC_Init+0x288>)
 8006eee:	f7ff fef5 	bl	8006cdc <LL_ADC_IsEnabled>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d105      	bne.n	8006f04 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4619      	mov	r1, r3
 8006efe:	485e      	ldr	r0, [pc, #376]	; (8007078 <HAL_ADC_Init+0x28c>)
 8006f00:	f7ff fd5e 	bl	80069c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7e5b      	ldrb	r3, [r3, #25]
 8006f08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006f0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006f14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006f1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f22:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8006f24:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d106      	bne.n	8006f44 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	045b      	lsls	r3, r3, #17
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	4b45      	ldr	r3, [pc, #276]	; (800707c <HAL_ADC_Init+0x290>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	69b9      	ldr	r1, [r7, #24]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff fefd 	bl	8006d78 <LL_ADC_REG_IsConversionOngoing>
 8006f7e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff ff1e 	bl	8006dc6 <LL_ADC_INJ_IsConversionOngoing>
 8006f8a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d13d      	bne.n	800700e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d13a      	bne.n	800700e <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f9c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fa4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb4:	f023 0302 	bic.w	r3, r3, #2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	69b9      	ldr	r1, [r7, #24]
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d118      	bne.n	8006ffe <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fd6:	f023 0304 	bic.w	r3, r3, #4
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006fe2:	4311      	orrs	r1, r2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fe8:	4311      	orrs	r1, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	611a      	str	r2, [r3, #16]
 8006ffc:	e007      	b.n	800700e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0201 	bic.w	r2, r2, #1
 800700c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d10c      	bne.n	8007030 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	f023 010f 	bic.w	r1, r3, #15
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	1e5a      	subs	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	631a      	str	r2, [r3, #48]	; 0x30
 800702e:	e007      	b.n	8007040 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 020f 	bic.w	r2, r2, #15
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007044:	f023 0303 	bic.w	r3, r3, #3
 8007048:	f043 0201 	orr.w	r2, r3, #1
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	655a      	str	r2, [r3, #84]	; 0x54
 8007050:	e007      	b.n	8007062 <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f043 0210 	orr.w	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007062:	7ffb      	ldrb	r3, [r7, #31]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000078 	.word	0x20000078
 8007070:	053e2d63 	.word	0x053e2d63
 8007074:	50040000 	.word	0x50040000
 8007078:	50040300 	.word	0x50040300
 800707c:	fff0c007 	.word	0xfff0c007

08007080 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fe71 	bl	8006d78 <LL_ADC_REG_IsConversionOngoing>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d167      	bne.n	800716c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_ADC_Start_DMA+0x2a>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e063      	b.n	8007172 <HAL_ADC_Start_DMA+0xf2>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fd4c 	bl	8007b50 <ADC_Enable>
 80070b8:	4603      	mov	r3, r0
 80070ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d14f      	bne.n	8007162 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d006      	beq.n	80070f0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e6:	f023 0206 	bic.w	r2, r3, #6
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	659a      	str	r2, [r3, #88]	; 0x58
 80070ee:	e002      	b.n	80070f6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	4a20      	ldr	r2, [pc, #128]	; (800717c <HAL_ADC_Start_DMA+0xfc>)
 80070fc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007102:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <HAL_ADC_Start_DMA+0x100>)
 8007104:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710a:	4a1e      	ldr	r2, [pc, #120]	; (8007184 <HAL_ADC_Start_DMA+0x104>)
 800710c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	221c      	movs	r2, #28
 8007114:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0210 	orr.w	r2, r2, #16
 800712c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0201 	orr.w	r2, r2, #1
 800713c:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3340      	adds	r3, #64	; 0x40
 8007148:	4619      	mov	r1, r3
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f001 faf3 	bl	8008738 <HAL_DMA_Start_IT>
 8007152:	4603      	mov	r3, r0
 8007154:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fde4 	bl	8006d28 <LL_ADC_REG_StartConversion>
 8007160:	e006      	b.n	8007170 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800716a:	e001      	b.n	8007170 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800716c:	2302      	movs	r3, #2
 800716e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	08007cf5 	.word	0x08007cf5
 8007180:	08007dcd 	.word	0x08007dcd
 8007184:	08007de9 	.word	0x08007de9

08007188 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_ADC_Stop_DMA+0x16>
 800719a:	2302      	movs	r3, #2
 800719c:	e051      	b.n	8007242 <HAL_ADC_Stop_DMA+0xba>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined (ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80071a6:	2103      	movs	r1, #3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fc1d 	bl	80079e8 <ADC_ConversionStop>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d13f      	bne.n	8007238 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
#if defined (ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	60da      	str	r2, [r3, #12]
#endif

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d10f      	bne.n	80071f6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 fb27 	bl	800882e <HAL_DMA_Abort>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0210 	bic.w	r2, r2, #16
 8007204:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fd19 	bl	8007c44 <ADC_Disable>
 8007212:	4603      	mov	r3, r0
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e002      	b.n	800721e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fd13 	bl	8007c44 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d109      	bne.n	8007238 <HAL_ADC_Stop_DMA+0xb0>
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f043 0201 	orr.w	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b0b6      	sub	sp, #216	; 0xd8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_ADC_ConfigChannel+0x22>
 800727e:	2302      	movs	r3, #2
 8007280:	e39e      	b.n	80079c0 <HAL_ADC_ConfigChannel+0x760>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fd72 	bl	8006d78 <LL_ADC_REG_IsConversionOngoing>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 8383 	bne.w	80079a2 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6859      	ldr	r1, [r3, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	f7ff fc25 	bl	8006af8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fd60 	bl	8006d78 <LL_ADC_REG_IsConversionOngoing>
 80072b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff fd80 	bl	8006dc6 <LL_ADC_INJ_IsConversionOngoing>
 80072c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80072ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f040 81a6 	bne.w	8007620 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80072d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f040 81a1 	bne.w	8007620 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6819      	ldr	r1, [r3, #0]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f7ff fc30 	bl	8006b50 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695a      	ldr	r2, [r3, #20]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	08db      	lsrs	r3, r3, #3
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b04      	cmp	r3, #4
 8007310:	d00a      	beq.n	8007328 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6919      	ldr	r1, [r3, #16]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007322:	f7ff fb81 	bl	8006a28 <LL_ADC_SetOffset>
 8007326:	e17b      	b.n	8007620 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2100      	movs	r1, #0
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fb9e 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 8007334:	4603      	mov	r3, r0
 8007336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <HAL_ADC_ConfigChannel+0xf4>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2100      	movs	r1, #0
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fb93 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 800734a:	4603      	mov	r3, r0
 800734c:	0e9b      	lsrs	r3, r3, #26
 800734e:	f003 021f 	and.w	r2, r3, #31
 8007352:	e01e      	b.n	8007392 <HAL_ADC_ConfigChannel+0x132>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fb88 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 8007360:	4603      	mov	r3, r0
 8007362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007366:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800736a:	fa93 f3a3 	rbit	r3, r3
 800736e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8007372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800737a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8007382:	2320      	movs	r3, #32
 8007384:	e004      	b.n	8007390 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8007386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800738a:	fab3 f383 	clz	r3, r3
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <HAL_ADC_ConfigChannel+0x14a>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	0e9b      	lsrs	r3, r3, #26
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	e018      	b.n	80073dc <HAL_ADC_ConfigChannel+0x17c>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073b6:	fa93 f3a3 	rbit	r3, r3
 80073ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80073be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80073c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80073ce:	2320      	movs	r3, #32
 80073d0:	e004      	b.n	80073dc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80073d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073d6:	fab3 f383 	clz	r3, r3
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	429a      	cmp	r2, r3
 80073de:	d106      	bne.n	80073ee <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2200      	movs	r2, #0
 80073e6:	2100      	movs	r1, #0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff fb57 	bl	8006a9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2101      	movs	r1, #1
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fb3b 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <HAL_ADC_ConfigChannel+0x1ba>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2101      	movs	r1, #1
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fb30 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 8007410:	4603      	mov	r3, r0
 8007412:	0e9b      	lsrs	r3, r3, #26
 8007414:	f003 021f 	and.w	r2, r3, #31
 8007418:	e01e      	b.n	8007458 <HAL_ADC_ConfigChannel+0x1f8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2101      	movs	r1, #1
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fb25 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 8007426:	4603      	mov	r3, r0
 8007428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007430:	fa93 f3a3 	rbit	r3, r3
 8007434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800743c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007448:	2320      	movs	r3, #32
 800744a:	e004      	b.n	8007456 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800744c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007450:	fab3 f383 	clz	r3, r3
 8007454:	b2db      	uxtb	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <HAL_ADC_ConfigChannel+0x210>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	0e9b      	lsrs	r3, r3, #26
 800746a:	f003 031f 	and.w	r3, r3, #31
 800746e:	e018      	b.n	80074a2 <HAL_ADC_ConfigChannel+0x242>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800747c:	fa93 f3a3 	rbit	r3, r3
 8007480:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007484:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800748c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007494:	2320      	movs	r3, #32
 8007496:	e004      	b.n	80074a2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800749c:	fab3 f383 	clz	r3, r3
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d106      	bne.n	80074b4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	2101      	movs	r1, #1
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff faf4 	bl	8006a9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2102      	movs	r1, #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fad8 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <HAL_ADC_ConfigChannel+0x280>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2102      	movs	r1, #2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff facd 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 80074d6:	4603      	mov	r3, r0
 80074d8:	0e9b      	lsrs	r3, r3, #26
 80074da:	f003 021f 	and.w	r2, r3, #31
 80074de:	e01e      	b.n	800751e <HAL_ADC_ConfigChannel+0x2be>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2102      	movs	r1, #2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fac2 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074f6:	fa93 f3a3 	rbit	r3, r3
 80074fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80074fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800750e:	2320      	movs	r3, #32
 8007510:	e004      	b.n	800751c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007516:	fab3 f383 	clz	r3, r3
 800751a:	b2db      	uxtb	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007526:	2b00      	cmp	r3, #0
 8007528:	d105      	bne.n	8007536 <HAL_ADC_ConfigChannel+0x2d6>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	0e9b      	lsrs	r3, r3, #26
 8007530:	f003 031f 	and.w	r3, r3, #31
 8007534:	e016      	b.n	8007564 <HAL_ADC_ConfigChannel+0x304>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007542:	fa93 f3a3 	rbit	r3, r3
 8007546:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800754a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800754e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007556:	2320      	movs	r3, #32
 8007558:	e004      	b.n	8007564 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800755a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800755e:	fab3 f383 	clz	r3, r3
 8007562:	b2db      	uxtb	r3, r3
 8007564:	429a      	cmp	r2, r3
 8007566:	d106      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2200      	movs	r2, #0
 800756e:	2102      	movs	r1, #2
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fa93 	bl	8006a9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2103      	movs	r1, #3
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fa77 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 8007582:	4603      	mov	r3, r0
 8007584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <HAL_ADC_ConfigChannel+0x342>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2103      	movs	r1, #3
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff fa6c 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 8007598:	4603      	mov	r3, r0
 800759a:	0e9b      	lsrs	r3, r3, #26
 800759c:	f003 021f 	and.w	r2, r3, #31
 80075a0:	e017      	b.n	80075d2 <HAL_ADC_ConfigChannel+0x372>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2103      	movs	r1, #3
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fa61 	bl	8006a70 <LL_ADC_GetOffsetChannel>
 80075ae:	4603      	mov	r3, r0
 80075b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b4:	fa93 f3a3 	rbit	r3, r3
 80075b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80075ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80075be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80075c4:	2320      	movs	r3, #32
 80075c6:	e003      	b.n	80075d0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80075c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ca:	fab3 f383 	clz	r3, r3
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <HAL_ADC_ConfigChannel+0x38a>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	0e9b      	lsrs	r3, r3, #26
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	e011      	b.n	800760e <HAL_ADC_ConfigChannel+0x3ae>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075f2:	fa93 f3a3 	rbit	r3, r3
 80075f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80075f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007602:	2320      	movs	r3, #32
 8007604:	e003      	b.n	800760e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007608:	fab3 f383 	clz	r3, r3
 800760c:	b2db      	uxtb	r3, r3
 800760e:	429a      	cmp	r2, r3
 8007610:	d106      	bne.n	8007620 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2200      	movs	r2, #0
 8007618:	2103      	movs	r1, #3
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fa3e 	bl	8006a9c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fb59 	bl	8006cdc <LL_ADC_IsEnabled>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	f040 81c1 	bne.w	80079b4 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	6819      	ldr	r1, [r3, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	461a      	mov	r2, r3
 8007640:	f7ff fab2 	bl	8006ba8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4a8e      	ldr	r2, [pc, #568]	; (8007884 <HAL_ADC_ConfigChannel+0x624>)
 800764a:	4293      	cmp	r3, r2
 800764c:	f040 8130 	bne.w	80078b0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <HAL_ADC_ConfigChannel+0x418>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	0e9b      	lsrs	r3, r3, #26
 8007666:	3301      	adds	r3, #1
 8007668:	f003 031f 	and.w	r3, r3, #31
 800766c:	2b09      	cmp	r3, #9
 800766e:	bf94      	ite	ls
 8007670:	2301      	movls	r3, #1
 8007672:	2300      	movhi	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	e019      	b.n	80076ac <HAL_ADC_ConfigChannel+0x44c>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007680:	fa93 f3a3 	rbit	r3, r3
 8007684:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007688:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800768a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007690:	2320      	movs	r3, #32
 8007692:	e003      	b.n	800769c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007696:	fab3 f383 	clz	r3, r3
 800769a:	b2db      	uxtb	r3, r3
 800769c:	3301      	adds	r3, #1
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2b09      	cmp	r3, #9
 80076a4:	bf94      	ite	ls
 80076a6:	2301      	movls	r3, #1
 80076a8:	2300      	movhi	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d079      	beq.n	80077a4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d107      	bne.n	80076cc <HAL_ADC_ConfigChannel+0x46c>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	0e9b      	lsrs	r3, r3, #26
 80076c2:	3301      	adds	r3, #1
 80076c4:	069b      	lsls	r3, r3, #26
 80076c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076ca:	e015      	b.n	80076f8 <HAL_ADC_ConfigChannel+0x498>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d4:	fa93 f3a3 	rbit	r3, r3
 80076d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80076da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80076de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80076e4:	2320      	movs	r3, #32
 80076e6:	e003      	b.n	80076f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80076e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ea:	fab3 f383 	clz	r3, r3
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	3301      	adds	r3, #1
 80076f2:	069b      	lsls	r3, r3, #26
 80076f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007700:	2b00      	cmp	r3, #0
 8007702:	d109      	bne.n	8007718 <HAL_ADC_ConfigChannel+0x4b8>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	0e9b      	lsrs	r3, r3, #26
 800770a:	3301      	adds	r3, #1
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	2101      	movs	r1, #1
 8007712:	fa01 f303 	lsl.w	r3, r1, r3
 8007716:	e017      	b.n	8007748 <HAL_ADC_ConfigChannel+0x4e8>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800771e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007720:	fa93 f3a3 	rbit	r3, r3
 8007724:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007728:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800772a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8007730:	2320      	movs	r3, #32
 8007732:	e003      	b.n	800773c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8007734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007736:	fab3 f383 	clz	r3, r3
 800773a:	b2db      	uxtb	r3, r3
 800773c:	3301      	adds	r3, #1
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	2101      	movs	r1, #1
 8007744:	fa01 f303 	lsl.w	r3, r1, r3
 8007748:	ea42 0103 	orr.w	r1, r2, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <HAL_ADC_ConfigChannel+0x50e>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	0e9b      	lsrs	r3, r3, #26
 800775e:	3301      	adds	r3, #1
 8007760:	f003 021f 	and.w	r2, r3, #31
 8007764:	4613      	mov	r3, r2
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	4413      	add	r3, r2
 800776a:	051b      	lsls	r3, r3, #20
 800776c:	e018      	b.n	80077a0 <HAL_ADC_ConfigChannel+0x540>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	fa93 f3a3 	rbit	r3, r3
 800777a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007786:	2320      	movs	r3, #32
 8007788:	e003      	b.n	8007792 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800778a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778c:	fab3 f383 	clz	r3, r3
 8007790:	b2db      	uxtb	r3, r3
 8007792:	3301      	adds	r3, #1
 8007794:	f003 021f 	and.w	r2, r3, #31
 8007798:	4613      	mov	r3, r2
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	4413      	add	r3, r2
 800779e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077a0:	430b      	orrs	r3, r1
 80077a2:	e080      	b.n	80078a6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d107      	bne.n	80077c0 <HAL_ADC_ConfigChannel+0x560>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	0e9b      	lsrs	r3, r3, #26
 80077b6:	3301      	adds	r3, #1
 80077b8:	069b      	lsls	r3, r3, #26
 80077ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077be:	e015      	b.n	80077ec <HAL_ADC_ConfigChannel+0x58c>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	fa93 f3a3 	rbit	r3, r3
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80077d8:	2320      	movs	r3, #32
 80077da:	e003      	b.n	80077e4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	fab3 f383 	clz	r3, r3
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	3301      	adds	r3, #1
 80077e6:	069b      	lsls	r3, r3, #26
 80077e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <HAL_ADC_ConfigChannel+0x5ac>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	0e9b      	lsrs	r3, r3, #26
 80077fe:	3301      	adds	r3, #1
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2101      	movs	r1, #1
 8007806:	fa01 f303 	lsl.w	r3, r1, r3
 800780a:	e017      	b.n	800783c <HAL_ADC_ConfigChannel+0x5dc>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	fa93 f3a3 	rbit	r3, r3
 8007818:	61fb      	str	r3, [r7, #28]
  return result;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8007824:	2320      	movs	r3, #32
 8007826:	e003      	b.n	8007830 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	fab3 f383 	clz	r3, r3
 800782e:	b2db      	uxtb	r3, r3
 8007830:	3301      	adds	r3, #1
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2101      	movs	r1, #1
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	ea42 0103 	orr.w	r1, r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10d      	bne.n	8007868 <HAL_ADC_ConfigChannel+0x608>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	0e9b      	lsrs	r3, r3, #26
 8007852:	3301      	adds	r3, #1
 8007854:	f003 021f 	and.w	r2, r3, #31
 8007858:	4613      	mov	r3, r2
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	4413      	add	r3, r2
 800785e:	3b1e      	subs	r3, #30
 8007860:	051b      	lsls	r3, r3, #20
 8007862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007866:	e01d      	b.n	80078a4 <HAL_ADC_ConfigChannel+0x644>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	fa93 f3a3 	rbit	r3, r3
 8007874:	613b      	str	r3, [r7, #16]
  return result;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d103      	bne.n	8007888 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8007880:	2320      	movs	r3, #32
 8007882:	e005      	b.n	8007890 <HAL_ADC_ConfigChannel+0x630>
 8007884:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	fab3 f383 	clz	r3, r3
 800788e:	b2db      	uxtb	r3, r3
 8007890:	3301      	adds	r3, #1
 8007892:	f003 021f 	and.w	r2, r3, #31
 8007896:	4613      	mov	r3, r2
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	4413      	add	r3, r2
 800789c:	3b1e      	subs	r3, #30
 800789e:	051b      	lsls	r3, r3, #20
 80078a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078a4:	430b      	orrs	r3, r1
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	6892      	ldr	r2, [r2, #8]
 80078aa:	4619      	mov	r1, r3
 80078ac:	f7ff f950 	bl	8006b50 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	4b44      	ldr	r3, [pc, #272]	; (80079c8 <HAL_ADC_ConfigChannel+0x768>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d07b      	beq.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078bc:	4843      	ldr	r0, [pc, #268]	; (80079cc <HAL_ADC_ConfigChannel+0x76c>)
 80078be:	f7ff f8a5 	bl	8006a0c <LL_ADC_GetCommonPathInternalCh>
 80078c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078c6:	4842      	ldr	r0, [pc, #264]	; (80079d0 <HAL_ADC_ConfigChannel+0x770>)
 80078c8:	f7ff fa08 	bl	8006cdc <LL_ADC_IsEnabled>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d15d      	bne.n	800798e <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a3f      	ldr	r2, [pc, #252]	; (80079d4 <HAL_ADC_ConfigChannel+0x774>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d126      	bne.n	800792a <HAL_ADC_ConfigChannel+0x6ca>
 80078dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d120      	bne.n	800792a <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a38      	ldr	r2, [pc, #224]	; (80079d0 <HAL_ADC_ConfigChannel+0x770>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d160      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80078f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078fa:	4619      	mov	r1, r3
 80078fc:	4833      	ldr	r0, [pc, #204]	; (80079cc <HAL_ADC_ConfigChannel+0x76c>)
 80078fe:	f7ff f872 	bl	80069e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007902:	4b35      	ldr	r3, [pc, #212]	; (80079d8 <HAL_ADC_ConfigChannel+0x778>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a34      	ldr	r2, [pc, #208]	; (80079dc <HAL_ADC_ConfigChannel+0x77c>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	099a      	lsrs	r2, r3, #6
 8007910:	4613      	mov	r3, r2
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800791a:	e002      	b.n	8007922 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3b01      	subs	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f9      	bne.n	800791c <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007928:	e044      	b.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a2c      	ldr	r2, [pc, #176]	; (80079e0 <HAL_ADC_ConfigChannel+0x780>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d113      	bne.n	800795c <HAL_ADC_ConfigChannel+0x6fc>
 8007934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10d      	bne.n	800795c <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a22      	ldr	r2, [pc, #136]	; (80079d0 <HAL_ADC_ConfigChannel+0x770>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d134      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800794a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800794e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007952:	4619      	mov	r1, r3
 8007954:	481d      	ldr	r0, [pc, #116]	; (80079cc <HAL_ADC_ConfigChannel+0x76c>)
 8007956:	f7ff f846 	bl	80069e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800795a:	e02b      	b.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <HAL_ADC_ConfigChannel+0x784>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d126      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
 8007966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800796a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d120      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a16      	ldr	r2, [pc, #88]	; (80079d0 <HAL_ADC_ConfigChannel+0x770>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d11b      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800797c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007984:	4619      	mov	r1, r3
 8007986:	4811      	ldr	r0, [pc, #68]	; (80079cc <HAL_ADC_ConfigChannel+0x76c>)
 8007988:	f7ff f82d 	bl	80069e6 <LL_ADC_SetCommonPathInternalCh>
 800798c:	e012      	b.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80079a0:	e008      	b.n	80079b4 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a6:	f043 0220 	orr.w	r2, r3, #32
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80079bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	37d8      	adds	r7, #216	; 0xd8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	80080000 	.word	0x80080000
 80079cc:	50040300 	.word	0x50040300
 80079d0:	50040000 	.word	0x50040000
 80079d4:	c7520000 	.word	0xc7520000
 80079d8:	20000078 	.word	0x20000078
 80079dc:	053e2d63 	.word	0x053e2d63
 80079e0:	cb840000 	.word	0xcb840000
 80079e4:	80000001 	.word	0x80000001

080079e8 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff f9ba 	bl	8006d78 <LL_ADC_REG_IsConversionOngoing>
 8007a04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff f9db 	bl	8006dc6 <LL_ADC_INJ_IsConversionOngoing>
 8007a10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d103      	bne.n	8007a20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 8090 	beq.w	8007b40 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d02a      	beq.n	8007a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7e5b      	ldrb	r3, [r3, #25]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d126      	bne.n	8007a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7e1b      	ldrb	r3, [r3, #24]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d122      	bne.n	8007a84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007a42:	e014      	b.n	8007a6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4a41      	ldr	r2, [pc, #260]	; (8007b4c <ADC_ConversionStop+0x164>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d90d      	bls.n	8007a68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a50:	f043 0210 	orr.w	r2, r3, #16
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5c:	f043 0201 	orr.w	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e06c      	b.n	8007b42 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	d1e3      	bne.n	8007a44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2240      	movs	r2, #64	; 0x40
 8007a82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d014      	beq.n	8007ab4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff f972 	bl	8006d78 <LL_ADC_REG_IsConversionOngoing>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00c      	beq.n	8007ab4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff f92f 	bl	8006d02 <LL_ADC_IsDisableOngoing>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff f94e 	bl	8006d50 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d014      	beq.n	8007ae4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff f981 	bl	8006dc6 <LL_ADC_INJ_IsConversionOngoing>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00c      	beq.n	8007ae4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff f917 	bl	8006d02 <LL_ADC_IsDisableOngoing>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d104      	bne.n	8007ae4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff f95d 	bl	8006d9e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d004      	beq.n	8007af4 <ADC_ConversionStop+0x10c>
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d105      	bne.n	8007afa <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007aee:	230c      	movs	r3, #12
 8007af0:	617b      	str	r3, [r7, #20]
        break;
 8007af2:	e005      	b.n	8007b00 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007af4:	2308      	movs	r3, #8
 8007af6:	617b      	str	r3, [r7, #20]
        break;
 8007af8:	e002      	b.n	8007b00 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007afa:	2304      	movs	r3, #4
 8007afc:	617b      	str	r3, [r7, #20]
        break;
 8007afe:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007b00:	f7fe ff12 	bl	8006928 <HAL_GetTick>
 8007b04:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007b06:	e014      	b.n	8007b32 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007b08:	f7fe ff0e 	bl	8006928 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	d90d      	bls.n	8007b32 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	f043 0210 	orr.w	r2, r3, #16
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b26:	f043 0201 	orr.w	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e007      	b.n	8007b42 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e3      	bne.n	8007b08 <ADC_ConversionStop+0x120>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	a33fffff 	.word	0xa33fffff

08007b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff f8bb 	bl	8006cdc <LL_ADC_IsEnabled>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d15e      	bne.n	8007c2a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	4b30      	ldr	r3, [pc, #192]	; (8007c34 <ADC_Enable+0xe4>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00d      	beq.n	8007b96 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	f043 0210 	orr.w	r2, r3, #16
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	f043 0201 	orr.w	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e04a      	b.n	8007c2c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff f876 	bl	8006c8c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007ba0:	4825      	ldr	r0, [pc, #148]	; (8007c38 <ADC_Enable+0xe8>)
 8007ba2:	f7fe ff33 	bl	8006a0c <LL_ADC_GetCommonPathInternalCh>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00f      	beq.n	8007bd0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8007bb0:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <ADC_Enable+0xec>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	099b      	lsrs	r3, r3, #6
 8007bb6:	4a22      	ldr	r2, [pc, #136]	; (8007c40 <ADC_Enable+0xf0>)
 8007bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bbc:	099b      	lsrs	r3, r3, #6
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007bc2:	e002      	b.n	8007bca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f9      	bne.n	8007bc4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007bd0:	f7fe feaa 	bl	8006928 <HAL_GetTick>
 8007bd4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007bd6:	e021      	b.n	8007c1c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff f87d 	bl	8006cdc <LL_ADC_IsEnabled>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff f84d 	bl	8006c8c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007bf2:	f7fe fe99 	bl	8006928 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d90d      	bls.n	8007c1c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c04:	f043 0210 	orr.w	r2, r3, #16
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c10:	f043 0201 	orr.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e007      	b.n	8007c2c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d1d6      	bne.n	8007bd8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	8000003f 	.word	0x8000003f
 8007c38:	50040300 	.word	0x50040300
 8007c3c:	20000078 	.word	0x20000078
 8007c40:	053e2d63 	.word	0x053e2d63

08007c44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7ff f856 	bl	8006d02 <LL_ADC_IsDisableOngoing>
 8007c56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff f83d 	bl	8006cdc <LL_ADC_IsEnabled>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d040      	beq.n	8007cea <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d13d      	bne.n	8007cea <ADC_Disable+0xa6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 030d 	and.w	r3, r3, #13
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d10c      	bne.n	8007c96 <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff f817 	bl	8006cb4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007c8e:	f7fe fe4b 	bl	8006928 <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c94:	e022      	b.n	8007cdc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9a:	f043 0210 	orr.w	r2, r3, #16
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca6:	f043 0201 	orr.w	r2, r3, #1
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e01c      	b.n	8007cec <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007cb2:	f7fe fe39 	bl	8006928 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d90d      	bls.n	8007cdc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc4:	f043 0210 	orr.w	r2, r3, #16
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	f043 0201 	orr.w	r2, r3, #1
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e007      	b.n	8007cec <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e3      	bne.n	8007cb2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d14b      	bne.n	8007da6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d021      	beq.n	8007d6c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe fed0 	bl	8006ad2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d032      	beq.n	8007d9e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d12b      	bne.n	8007d9e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d11f      	bne.n	8007d9e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d62:	f043 0201 	orr.w	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
 8007d6a:	e018      	b.n	8007d9e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d111      	bne.n	8007d9e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d96:	f043 0201 	orr.w	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7f9 fda6 	bl	80018f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007da4:	e00e      	b.n	8007dc4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007daa:	f003 0310 	and.w	r3, r3, #16
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fa49 	bl	800724a <HAL_ADC_ErrorCallback>
}
 8007db8:	e004      	b.n	8007dc4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
}
 8007dc4:	bf00      	nop
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7f9 fda0 	bl	8001920 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007de0:	bf00      	nop
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e06:	f043 0204 	orr.w	r2, r3, #4
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fa1b 	bl	800724a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <LL_EXTI_EnableIT_0_31>:
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <LL_EXTI_EnableIT_0_31+0x24>)
 8007e26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007e2a:	4905      	ldr	r1, [pc, #20]	; (8007e40 <LL_EXTI_EnableIT_0_31+0x24>)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	58000800 	.word	0x58000800

08007e44 <LL_EXTI_DisableIT_0_31>:
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <LL_EXTI_DisableIT_0_31+0x28>)
 8007e4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	43db      	mvns	r3, r3
 8007e56:	4905      	ldr	r1, [pc, #20]	; (8007e6c <LL_EXTI_DisableIT_0_31+0x28>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	58000800 	.word	0x58000800

08007e70 <LL_EXTI_EnableEvent_0_31>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007e7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007e7e:	4905      	ldr	r1, [pc, #20]	; (8007e94 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	58000800 	.word	0x58000800

08007e98 <LL_EXTI_DisableEvent_0_31>:
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007ea2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	43db      	mvns	r3, r3
 8007eaa:	4905      	ldr	r1, [pc, #20]	; (8007ec0 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007eac:	4013      	ands	r3, r2
 8007eae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	58000800 	.word	0x58000800

08007ec4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4904      	ldr	r1, [pc, #16]	; (8007ee4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	600b      	str	r3, [r1, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	58000800 	.word	0x58000800

08007ee8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007ef0:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	4904      	ldr	r1, [pc, #16]	; (8007f0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	600b      	str	r3, [r1, #0]

}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	58000800 	.word	0x58000800

08007f10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007f18:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4904      	ldr	r1, [pc, #16]	; (8007f30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	604b      	str	r3, [r1, #4]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	58000800 	.word	0x58000800

08007f34 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	43db      	mvns	r3, r3
 8007f44:	4904      	ldr	r1, [pc, #16]	; (8007f58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	604b      	str	r3, [r1, #4]
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	58000800 	.word	0x58000800

08007f5c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007f64:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d101      	bne.n	8007f76 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	58000800 	.word	0x58000800

08007f88 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007f90:	4a04      	ldr	r2, [pc, #16]	; (8007fa4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60d3      	str	r3, [r2, #12]
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	58000800 	.word	0x58000800

08007fa8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	77fb      	strb	r3, [r7, #31]
 8007fc2:	e0c4      	b.n	800814e <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd2:	d102      	bne.n	8007fda <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	77fb      	strb	r3, [r7, #31]
 8007fd8:	e0b9      	b.n	800814e <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7f9 fcfd 	bl	80019f4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008004:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
#if defined (COMP_CSR_WINMODE)
    MODIFY_REG(hcomp->Instance->CSR,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	4b49      	ldr	r3, [pc, #292]	; (8008158 <HAL_COMP_Init+0x1b0>)
 8008032:	4013      	ands	r3, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	6979      	ldr	r1, [r7, #20]
 800803a:	430b      	orrs	r3, r1
 800803c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008046:	d106      	bne.n	8008056 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8008048:	4b44      	ldr	r3, [pc, #272]	; (800815c <HAL_COMP_Init+0x1b4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a43      	ldr	r2, [pc, #268]	; (800815c <HAL_COMP_Init+0x1b4>)
 800804e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	e005      	b.n	8008062 <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8008056:	4b41      	ldr	r3, [pc, #260]	; (800815c <HAL_COMP_Init+0x1b4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a40      	ldr	r2, [pc, #256]	; (800815c <HAL_COMP_Init+0x1b4>)
 800805c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008060:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d015      	beq.n	800809c <HAL_COMP_Init+0xf4>
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d112      	bne.n	800809c <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008076:	4b3a      	ldr	r3, [pc, #232]	; (8008160 <HAL_COMP_Init+0x1b8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	099b      	lsrs	r3, r3, #6
 800807c:	4a39      	ldr	r2, [pc, #228]	; (8008164 <HAL_COMP_Init+0x1bc>)
 800807e:	fba2 2303 	umull	r2, r3, r2, r3
 8008082:	099a      	lsrs	r2, r3, #6
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800808e:	e002      	b.n	8008096 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3b01      	subs	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f9      	bne.n	8008090 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a31      	ldr	r2, [pc, #196]	; (8008168 <HAL_COMP_Init+0x1c0>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d102      	bne.n	80080ac <HAL_COMP_Init+0x104>
 80080a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80080aa:	e001      	b.n	80080b0 <HAL_COMP_Init+0x108>
 80080ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80080b0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d037      	beq.n	800812e <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f003 0310 	and.w	r3, r3, #16
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80080ca:	6938      	ldr	r0, [r7, #16]
 80080cc:	f7ff fefa 	bl	8007ec4 <LL_EXTI_EnableRisingTrig_0_31>
 80080d0:	e002      	b.n	80080d8 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80080d2:	6938      	ldr	r0, [r7, #16]
 80080d4:	f7ff ff08 	bl	8007ee8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80080e4:	6938      	ldr	r0, [r7, #16]
 80080e6:	f7ff ff13 	bl	8007f10 <LL_EXTI_EnableFallingTrig_0_31>
 80080ea:	e002      	b.n	80080f2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80080ec:	6938      	ldr	r0, [r7, #16]
 80080ee:	f7ff ff21 	bl	8007f34 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80080f2:	6938      	ldr	r0, [r7, #16]
 80080f4:	f7ff ff48 	bl	8007f88 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8008104:	6938      	ldr	r0, [r7, #16]
 8008106:	f7ff feb3 	bl	8007e70 <LL_EXTI_EnableEvent_0_31>
 800810a:	e002      	b.n	8008112 <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800810c:	6938      	ldr	r0, [r7, #16]
 800810e:	f7ff fec3 	bl	8007e98 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800811e:	6938      	ldr	r0, [r7, #16]
 8008120:	f7ff fe7c 	bl	8007e1c <LL_EXTI_EnableIT_0_31>
 8008124:	e009      	b.n	800813a <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8008126:	6938      	ldr	r0, [r7, #16]
 8008128:	f7ff fe8c 	bl	8007e44 <LL_EXTI_DisableIT_0_31>
 800812c:	e005      	b.n	800813a <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800812e:	6938      	ldr	r0, [r7, #16]
 8008130:	f7ff feb2 	bl	8007e98 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8008134:	6938      	ldr	r0, [r7, #16]
 8008136:	f7ff fe85 	bl	8007e44 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d103      	bne.n	800814e <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800814e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3720      	adds	r7, #32
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	f9207c03 	.word	0xf9207c03
 800815c:	40010204 	.word	0x40010204
 8008160:	20000078 	.word	0x20000078
 8008164:	053e2d63 	.word	0x053e2d63
 8008168:	40010200 	.word	0x40010200

0800816c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8008174:	2300      	movs	r3, #0
 8008176:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d102      	bne.n	8008188 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	73fb      	strb	r3, [r7, #15]
 8008186:	e02f      	b.n	80081e8 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008196:	d102      	bne.n	800819e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
 800819c:	e024      	b.n	80081e8 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d11c      	bne.n	80081e4 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f042 0201 	orr.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2202      	movs	r2, #2
 80081be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <HAL_COMP_Start+0x8c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	099b      	lsrs	r3, r3, #6
 80081c8:	4a0c      	ldr	r2, [pc, #48]	; (80081fc <HAL_COMP_Start+0x90>)
 80081ca:	fba2 2303 	umull	r2, r3, r2, r3
 80081ce:	099b      	lsrs	r3, r3, #6
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80081d4:	e002      	b.n	80081dc <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3b01      	subs	r3, #1
 80081da:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1f9      	bne.n	80081d6 <HAL_COMP_Start+0x6a>
 80081e2:	e001      	b.n	80081e8 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20000078 	.word	0x20000078
 80081fc:	053e2d63 	.word	0x053e2d63

08008200 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]
 8008216:	e01f      	b.n	8008258 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008226:	d102      	bne.n	800822e <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
 800822c:	e014      	b.n	8008258 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00c      	beq.n	8008254 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0201 	bic.w	r2, r2, #1
 8008248:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8008252:	e001      	b.n	8008258 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a11      	ldr	r2, [pc, #68]	; (80082bc <HAL_COMP_IRQHandler+0x54>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d102      	bne.n	8008280 <HAL_COMP_IRQHandler+0x18>
 800827a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800827e:	e001      	b.n	8008284 <HAL_COMP_IRQHandler+0x1c>
 8008280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008284:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff fe68 	bl	8007f5c <LL_EXTI_IsActiveFlag_0_31>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d010      	beq.n	80082b4 <HAL_COMP_IRQHandler+0x4c>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8008292:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <HAL_COMP_IRQHandler+0x58>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800829e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80082a2:	f7ff fe71 	bl	8007f88 <LL_EXTI_ClearFlag_0_31>
 80082a6:	e002      	b.n	80082ae <HAL_COMP_IRQHandler+0x46>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff fe6d 	bl	8007f88 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fd fe6a 	bl	8005f88 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40010200 	.word	0x40010200
 80082c0:	40010204 	.word	0x40010204

080082c4 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	0f9b      	lsrs	r3, r3, #30
 80082d4:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082f4:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <__NVIC_SetPriorityGrouping+0x44>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008300:	4013      	ands	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800830c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008316:	4a04      	ldr	r2, [pc, #16]	; (8008328 <__NVIC_SetPriorityGrouping+0x44>)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	60d3      	str	r3, [r2, #12]
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	e000ed00 	.word	0xe000ed00

0800832c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <__NVIC_GetPriorityGrouping+0x18>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	0a1b      	lsrs	r3, r3, #8
 8008336:	f003 0307 	and.w	r3, r3, #7
}
 800833a:	4618      	mov	r0, r3
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	e000ed00 	.word	0xe000ed00

08008348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	db0b      	blt.n	8008372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	f003 021f 	and.w	r2, r3, #31
 8008360:	4907      	ldr	r1, [pc, #28]	; (8008380 <__NVIC_EnableIRQ+0x38>)
 8008362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	2001      	movs	r0, #1
 800836a:	fa00 f202 	lsl.w	r2, r0, r2
 800836e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	e000e100 	.word	0xe000e100

08008384 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800838e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008392:	2b00      	cmp	r3, #0
 8008394:	db10      	blt.n	80083b8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	f003 021f 	and.w	r2, r3, #31
 800839c:	4909      	ldr	r1, [pc, #36]	; (80083c4 <__NVIC_DisableIRQ+0x40>)
 800839e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	2001      	movs	r0, #1
 80083a6:	fa00 f202 	lsl.w	r2, r0, r2
 80083aa:	3320      	adds	r3, #32
 80083ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80083b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	e000e100 	.word	0xe000e100

080083c8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	db0c      	blt.n	80083f4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	f003 021f 	and.w	r2, r3, #31
 80083e0:	4907      	ldr	r1, [pc, #28]	; (8008400 <__NVIC_SetPendingIRQ+0x38>)
 80083e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e6:	095b      	lsrs	r3, r3, #5
 80083e8:	2001      	movs	r0, #1
 80083ea:	fa00 f202 	lsl.w	r2, r0, r2
 80083ee:	3340      	adds	r3, #64	; 0x40
 80083f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	e000e100 	.word	0xe000e100

08008404 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800840e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008412:	2b00      	cmp	r3, #0
 8008414:	db0c      	blt.n	8008430 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	f003 021f 	and.w	r2, r3, #31
 800841c:	4907      	ldr	r1, [pc, #28]	; (800843c <__NVIC_ClearPendingIRQ+0x38>)
 800841e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	2001      	movs	r0, #1
 8008426:	fa00 f202 	lsl.w	r2, r0, r2
 800842a:	3360      	adds	r3, #96	; 0x60
 800842c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	e000e100 	.word	0xe000e100

08008440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	6039      	str	r1, [r7, #0]
 800844a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800844c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008450:	2b00      	cmp	r3, #0
 8008452:	db0a      	blt.n	800846a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	b2da      	uxtb	r2, r3
 8008458:	490c      	ldr	r1, [pc, #48]	; (800848c <__NVIC_SetPriority+0x4c>)
 800845a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845e:	0112      	lsls	r2, r2, #4
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	440b      	add	r3, r1
 8008464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008468:	e00a      	b.n	8008480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	b2da      	uxtb	r2, r3
 800846e:	4908      	ldr	r1, [pc, #32]	; (8008490 <__NVIC_SetPriority+0x50>)
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	3b04      	subs	r3, #4
 8008478:	0112      	lsls	r2, r2, #4
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	440b      	add	r3, r1
 800847e:	761a      	strb	r2, [r3, #24]
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	e000e100 	.word	0xe000e100
 8008490:	e000ed00 	.word	0xe000ed00

08008494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008494:	b480      	push	{r7}
 8008496:	b089      	sub	sp, #36	; 0x24
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f1c3 0307 	rsb	r3, r3, #7
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	bf28      	it	cs
 80084b2:	2304      	movcs	r3, #4
 80084b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	3304      	adds	r3, #4
 80084ba:	2b06      	cmp	r3, #6
 80084bc:	d902      	bls.n	80084c4 <NVIC_EncodePriority+0x30>
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	3b03      	subs	r3, #3
 80084c2:	e000      	b.n	80084c6 <NVIC_EncodePriority+0x32>
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	fa02 f303 	lsl.w	r3, r2, r3
 80084d2:	43da      	mvns	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	401a      	ands	r2, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084dc:	f04f 31ff 	mov.w	r1, #4294967295
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	fa01 f303 	lsl.w	r3, r1, r3
 80084e6:	43d9      	mvns	r1, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084ec:	4313      	orrs	r3, r2
         );
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3724      	adds	r7, #36	; 0x24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008500:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <__NVIC_SystemReset+0x20>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800850c:	4903      	ldr	r1, [pc, #12]	; (800851c <__NVIC_SystemReset+0x20>)
 800850e:	4b04      	ldr	r3, [pc, #16]	; (8008520 <__NVIC_SystemReset+0x24>)
 8008510:	4313      	orrs	r3, r2
 8008512:	60cb      	str	r3, [r1, #12]
 8008514:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008518:	bf00      	nop
 800851a:	e7fd      	b.n	8008518 <__NVIC_SystemReset+0x1c>
 800851c:	e000ed00 	.word	0xe000ed00
 8008520:	05fa0004 	.word	0x05fa0004

08008524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fed9 	bl	80082e4 <__NVIC_SetPriorityGrouping>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b086      	sub	sp, #24
 800853e:	af00      	add	r7, sp, #0
 8008540:	4603      	mov	r3, r0
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
 8008546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008548:	f7ff fef0 	bl	800832c <__NVIC_GetPriorityGrouping>
 800854c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	6978      	ldr	r0, [r7, #20]
 8008554:	f7ff ff9e 	bl	8008494 <NVIC_EncodePriority>
 8008558:	4602      	mov	r2, r0
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff ff6d 	bl	8008440 <__NVIC_SetPriority>
}
 8008566:	bf00      	nop
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	4603      	mov	r3, r0
 8008576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff fee3 	bl	8008348 <__NVIC_EnableIRQ>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	4603      	mov	r3, r0
 8008592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fef3 	bl	8008384 <__NVIC_DisableIRQ>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80085aa:	f7ff ffa7 	bl	80084fc <__NVIC_SystemReset>

080085ae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	4603      	mov	r3, r0
 80085b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80085b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff ff03 	bl	80083c8 <__NVIC_SetPendingIRQ>
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	4603      	mov	r3, r0
 80085d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80085d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff ff13 	bl	8008404 <__NVIC_ClearPendingIRQ>
}
 80085de:	bf00      	nop
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e08e      	b.n	8008718 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	4b47      	ldr	r3, [pc, #284]	; (8008720 <HAL_DMA_Init+0x138>)
 8008602:	429a      	cmp	r2, r3
 8008604:	d80f      	bhi.n	8008626 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	4b45      	ldr	r3, [pc, #276]	; (8008724 <HAL_DMA_Init+0x13c>)
 800860e:	4413      	add	r3, r2
 8008610:	4a45      	ldr	r2, [pc, #276]	; (8008728 <HAL_DMA_Init+0x140>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	091b      	lsrs	r3, r3, #4
 8008618:	009a      	lsls	r2, r3, #2
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a42      	ldr	r2, [pc, #264]	; (800872c <HAL_DMA_Init+0x144>)
 8008622:	641a      	str	r2, [r3, #64]	; 0x40
 8008624:	e00e      	b.n	8008644 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	4b40      	ldr	r3, [pc, #256]	; (8008730 <HAL_DMA_Init+0x148>)
 800862e:	4413      	add	r3, r2
 8008630:	4a3d      	ldr	r2, [pc, #244]	; (8008728 <HAL_DMA_Init+0x140>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	091b      	lsrs	r3, r3, #4
 8008638:	009a      	lsls	r2, r3, #2
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a3c      	ldr	r2, [pc, #240]	; (8008734 <HAL_DMA_Init+0x14c>)
 8008642:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa82 	bl	8008ba0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a4:	d102      	bne.n	80086ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80086b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80086c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d010      	beq.n	80086ee <HAL_DMA_Init+0x106>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d80c      	bhi.n	80086ee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 faa1 	bl	8008c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	e008      	b.n	8008700 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40020407 	.word	0x40020407
 8008724:	bffdfff8 	.word	0xbffdfff8
 8008728:	cccccccd 	.word	0xcccccccd
 800872c:	40020000 	.word	0x40020000
 8008730:	bffdfbf8 	.word	0xbffdfbf8
 8008734:	40020400 	.word	0x40020400

08008738 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_DMA_Start_IT+0x20>
 8008754:	2302      	movs	r3, #2
 8008756:	e066      	b.n	8008826 <HAL_DMA_Start_IT+0xee>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b01      	cmp	r3, #1
 800876a:	d155      	bne.n	8008818 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0201 	bic.w	r2, r2, #1
 8008788:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f9c7 	bl	8008b24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	2b00      	cmp	r3, #0
 800879c:	d008      	beq.n	80087b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 020e 	orr.w	r2, r2, #14
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	e00f      	b.n	80087d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0204 	bic.w	r2, r2, #4
 80087be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 020a 	orr.w	r2, r2, #10
 80087ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008804:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0201 	orr.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	e005      	b.n	8008824 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008820:	2302      	movs	r3, #2
 8008822:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e04f      	b.n	80088e0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d008      	beq.n	800885e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2204      	movs	r2, #4
 8008850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e040      	b.n	80088e0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 020e 	bic.w	r2, r2, #14
 800886c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800887c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	f003 021c 	and.w	r2, r3, #28
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	2101      	movs	r1, #1
 800889c:	fa01 f202 	lsl.w	r2, r1, r2
 80088a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80088aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00c      	beq.n	80088ce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80088cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b02      	cmp	r3, #2
 8008902:	d005      	beq.n	8008910 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2204      	movs	r2, #4
 8008908:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	e047      	b.n	80089a0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 020e 	bic.w	r2, r2, #14
 800891e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0201 	bic.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800893e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008944:	f003 021c 	and.w	r2, r3, #28
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894c:	2101      	movs	r1, #1
 800894e:	fa01 f202 	lsl.w	r2, r1, r2
 8008952:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800895c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00c      	beq.n	8008980 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008974:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800897e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
    }
  }
  return status;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c6:	f003 031c 	and.w	r3, r3, #28
 80089ca:	2204      	movs	r2, #4
 80089cc:	409a      	lsls	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d026      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x7a>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d021      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d107      	bne.n	80089fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0204 	bic.w	r2, r2, #4
 80089fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a02:	f003 021c 	and.w	r2, r3, #28
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	2104      	movs	r1, #4
 8008a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8008a10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d071      	beq.n	8008afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008a22:	e06c      	b.n	8008afe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a28:	f003 031c 	and.w	r3, r3, #28
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	409a      	lsls	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d02e      	beq.n	8008a96 <HAL_DMA_IRQHandler+0xec>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d029      	beq.n	8008a96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0320 	and.w	r3, r3, #32
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10b      	bne.n	8008a68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 020a 	bic.w	r2, r2, #10
 8008a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6c:	f003 021c 	and.w	r2, r3, #28
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a74:	2102      	movs	r1, #2
 8008a76:	fa01 f202 	lsl.w	r2, r1, r2
 8008a7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d038      	beq.n	8008afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a94:	e033      	b.n	8008afe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9a:	f003 031c 	and.w	r3, r3, #28
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	409a      	lsls	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d02a      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x156>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d025      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 020e 	bic.w	r2, r2, #14
 8008ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	f003 021c 	and.w	r2, r3, #28
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ad6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
}
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008b16:	b2db      	uxtb	r3, r3
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d004      	beq.n	8008b4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008b4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b52:	f003 021c 	and.w	r2, r3, #28
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	2b10      	cmp	r3, #16
 8008b70:	d108      	bne.n	8008b84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b82:	e007      	b.n	8008b94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	60da      	str	r2, [r3, #12]
}
 8008b94:	bf00      	nop
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b17      	ldr	r3, [pc, #92]	; (8008c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d80a      	bhi.n	8008bca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	089b      	lsrs	r3, r3, #2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bc0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6493      	str	r3, [r2, #72]	; 0x48
 8008bc8:	e007      	b.n	8008bda <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bce:	089b      	lsrs	r3, r3, #2
 8008bd0:	009a      	lsls	r2, r3, #2
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	3b08      	subs	r3, #8
 8008be2:	4a0c      	ldr	r2, [pc, #48]	; (8008c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008be4:	fba2 2303 	umull	r2, r3, r2, r3
 8008be8:	091b      	lsrs	r3, r3, #4
 8008bea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a0a      	ldr	r2, [pc, #40]	; (8008c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008bf0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f003 031f 	and.w	r3, r3, #31
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	409a      	lsls	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40020407 	.word	0x40020407
 8008c10:	4002081c 	.word	0x4002081c
 8008c14:	cccccccd 	.word	0xcccccccd
 8008c18:	40020880 	.word	0x40020880

08008c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c2c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a09      	ldr	r2, [pc, #36]	; (8008c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	409a      	lsls	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	1000823f 	.word	0x1000823f
 8008c64:	40020940 	.word	0x40020940

08008c68 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c76:	e14c      	b.n	8008f12 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	fa01 f303 	lsl.w	r3, r1, r3
 8008c84:	4013      	ands	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 813e 	beq.w	8008f0c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d00b      	beq.n	8008cb0 <HAL_GPIO_Init+0x48>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d007      	beq.n	8008cb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ca4:	2b11      	cmp	r3, #17
 8008ca6:	d003      	beq.n	8008cb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2b12      	cmp	r3, #18
 8008cae:	d130      	bne.n	8008d12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	2203      	movs	r2, #3
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	fa02 f303 	lsl.w	r3, r2, r3
 8008cee:	43db      	mvns	r3, r3
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	091b      	lsrs	r3, r3, #4
 8008cfc:	f003 0201 	and.w	r2, r3, #1
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	43db      	mvns	r3, r3
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	4013      	ands	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	689a      	ldr	r2, [r3, #8]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	fa02 f303 	lsl.w	r3, r2, r3
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d003      	beq.n	8008d52 <HAL_GPIO_Init+0xea>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b12      	cmp	r3, #18
 8008d50:	d123      	bne.n	8008d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	08da      	lsrs	r2, r3, #3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3208      	adds	r2, #8
 8008d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	220f      	movs	r2, #15
 8008d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6e:	43db      	mvns	r3, r3
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4013      	ands	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f003 0307 	and.w	r3, r3, #7
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	08da      	lsrs	r2, r3, #3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3208      	adds	r2, #8
 8008d94:	6939      	ldr	r1, [r7, #16]
 8008d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	2203      	movs	r2, #3
 8008da6:	fa02 f303 	lsl.w	r3, r2, r3
 8008daa:	43db      	mvns	r3, r3
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4013      	ands	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f003 0203 	and.w	r2, r3, #3
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 8098 	beq.w	8008f0c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008ddc:	4a54      	ldr	r2, [pc, #336]	; (8008f30 <HAL_GPIO_Init+0x2c8>)
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	089b      	lsrs	r3, r3, #2
 8008de2:	3302      	adds	r3, #2
 8008de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	220f      	movs	r2, #15
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008e06:	d019      	beq.n	8008e3c <HAL_GPIO_Init+0x1d4>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a4a      	ldr	r2, [pc, #296]	; (8008f34 <HAL_GPIO_Init+0x2cc>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d013      	beq.n	8008e38 <HAL_GPIO_Init+0x1d0>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a49      	ldr	r2, [pc, #292]	; (8008f38 <HAL_GPIO_Init+0x2d0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00d      	beq.n	8008e34 <HAL_GPIO_Init+0x1cc>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a48      	ldr	r2, [pc, #288]	; (8008f3c <HAL_GPIO_Init+0x2d4>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d007      	beq.n	8008e30 <HAL_GPIO_Init+0x1c8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a47      	ldr	r2, [pc, #284]	; (8008f40 <HAL_GPIO_Init+0x2d8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d101      	bne.n	8008e2c <HAL_GPIO_Init+0x1c4>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	e008      	b.n	8008e3e <HAL_GPIO_Init+0x1d6>
 8008e2c:	2307      	movs	r3, #7
 8008e2e:	e006      	b.n	8008e3e <HAL_GPIO_Init+0x1d6>
 8008e30:	2303      	movs	r3, #3
 8008e32:	e004      	b.n	8008e3e <HAL_GPIO_Init+0x1d6>
 8008e34:	2302      	movs	r3, #2
 8008e36:	e002      	b.n	8008e3e <HAL_GPIO_Init+0x1d6>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <HAL_GPIO_Init+0x1d6>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	f002 0203 	and.w	r2, r2, #3
 8008e44:	0092      	lsls	r2, r2, #2
 8008e46:	4093      	lsls	r3, r2
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008e4e:	4938      	ldr	r1, [pc, #224]	; (8008f30 <HAL_GPIO_Init+0x2c8>)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	089b      	lsrs	r3, r3, #2
 8008e54:	3302      	adds	r3, #2
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008e5c:	4b39      	ldr	r3, [pc, #228]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	43db      	mvns	r3, r3
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e82:	4a30      	ldr	r2, [pc, #192]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008e8a:	4b2e      	ldr	r3, [pc, #184]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	43db      	mvns	r3, r3
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008eb0:	4a24      	ldr	r2, [pc, #144]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008eb8:	4b22      	ldr	r3, [pc, #136]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008edc:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ee2:	4b18      	ldr	r3, [pc, #96]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	43db      	mvns	r3, r3
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008f06:	4a0f      	ldr	r2, [pc, #60]	; (8008f44 <HAL_GPIO_Init+0x2dc>)
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f47f aeab 	bne.w	8008c78 <HAL_GPIO_Init+0x10>
  }
}
 8008f22:	bf00      	nop
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40010000 	.word	0x40010000
 8008f34:	48000400 	.word	0x48000400
 8008f38:	48000800 	.word	0x48000800
 8008f3c:	48000c00 	.word	0x48000c00
 8008f40:	48001000 	.word	0x48001000
 8008f44:	58000800 	.word	0x58000800

08008f48 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691a      	ldr	r2, [r3, #16]
 8008f58:	887b      	ldrh	r3, [r7, #2]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f60:	2301      	movs	r3, #1
 8008f62:	73fb      	strb	r3, [r7, #15]
 8008f64:	e001      	b.n	8008f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	807b      	strh	r3, [r7, #2]
 8008f84:	4613      	mov	r3, r2
 8008f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f88:	787b      	ldrb	r3, [r7, #1]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008f8e:	887a      	ldrh	r2, [r7, #2]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008f94:	e002      	b.n	8008f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008f96:	887a      	ldrh	r2, [r7, #2]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d006      	beq.n	8008fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008fbe:	4a05      	ldr	r2, [pc, #20]	; (8008fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fa fdc6 	bl	8003b58 <HAL_GPIO_EXTI_Callback>
  }
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	58000800 	.word	0x58000800

08008fd8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <HAL_HSEM_IRQHandler+0x30>)
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008fe4:	4b08      	ldr	r3, [pc, #32]	; (8009008 <HAL_HSEM_IRQHandler+0x30>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	43db      	mvns	r3, r3
 8008fec:	4906      	ldr	r1, [pc, #24]	; (8009008 <HAL_HSEM_IRQHandler+0x30>)
 8008fee:	4013      	ands	r3, r2
 8008ff0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008ff2:	4a05      	ldr	r2, [pc, #20]	; (8009008 <HAL_HSEM_IRQHandler+0x30>)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f807 	bl	800900c <HAL_HSEM_FreeCallback>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	58001500 	.word	0x58001500

0800900c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e081      	b.n	8009136 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7fa fcc8 	bl	80039dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2224      	movs	r2, #36	; 0x24
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0201 	bic.w	r2, r2, #1
 8009062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689a      	ldr	r2, [r3, #8]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d107      	bne.n	800909a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009096:	609a      	str	r2, [r3, #8]
 8009098:	e006      	b.n	80090a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80090a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d104      	bne.n	80090ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80090c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691a      	ldr	r2, [r3, #16]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	ea42 0103 	orr.w	r1, r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	021a      	lsls	r2, r3, #8
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	69d9      	ldr	r1, [r3, #28]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a1a      	ldr	r2, [r3, #32]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0201 	orr.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2220      	movs	r2, #32
 8009122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af02      	add	r7, sp, #8
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	607a      	str	r2, [r7, #4]
 800914a:	461a      	mov	r2, r3
 800914c:	460b      	mov	r3, r1
 800914e:	817b      	strh	r3, [r7, #10]
 8009150:	4613      	mov	r3, r2
 8009152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b20      	cmp	r3, #32
 800915e:	f040 80da 	bne.w	8009316 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_I2C_Master_Transmit+0x30>
 800916c:	2302      	movs	r3, #2
 800916e:	e0d3      	b.n	8009318 <HAL_I2C_Master_Transmit+0x1d8>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009178:	f7fd fbd6 	bl	8006928 <HAL_GetTick>
 800917c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	2319      	movs	r3, #25
 8009184:	2201      	movs	r2, #1
 8009186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f001 fc8b 	bl	800aaa6 <I2C_WaitOnFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e0be      	b.n	8009318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2221      	movs	r2, #33	; 0x21
 800919e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2210      	movs	r2, #16
 80091a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	893a      	ldrh	r2, [r7, #8]
 80091ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2bff      	cmp	r3, #255	; 0xff
 80091ca:	d90e      	bls.n	80091ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	22ff      	movs	r2, #255	; 0xff
 80091d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	8979      	ldrh	r1, [r7, #10]
 80091da:	4b51      	ldr	r3, [pc, #324]	; (8009320 <HAL_I2C_Master_Transmit+0x1e0>)
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f001 fdee 	bl	800adc4 <I2C_TransferConfig>
 80091e8:	e06c      	b.n	80092c4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	8979      	ldrh	r1, [r7, #10]
 80091fc:	4b48      	ldr	r3, [pc, #288]	; (8009320 <HAL_I2C_Master_Transmit+0x1e0>)
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f001 fddd 	bl	800adc4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800920a:	e05b      	b.n	80092c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	6a39      	ldr	r1, [r7, #32]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f001 fc88 	bl	800ab26 <I2C_WaitOnTXISFlagUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e07b      	b.n	8009318 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	781a      	ldrb	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009248:	3b01      	subs	r3, #1
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d034      	beq.n	80092c4 <HAL_I2C_Master_Transmit+0x184>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800925e:	2b00      	cmp	r3, #0
 8009260:	d130      	bne.n	80092c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	2200      	movs	r2, #0
 800926a:	2180      	movs	r1, #128	; 0x80
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f001 fc1a 	bl	800aaa6 <I2C_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e04d      	b.n	8009318 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009280:	b29b      	uxth	r3, r3
 8009282:	2bff      	cmp	r3, #255	; 0xff
 8009284:	d90e      	bls.n	80092a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	22ff      	movs	r2, #255	; 0xff
 800928a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009290:	b2da      	uxtb	r2, r3
 8009292:	8979      	ldrh	r1, [r7, #10]
 8009294:	2300      	movs	r3, #0
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f001 fd91 	bl	800adc4 <I2C_TransferConfig>
 80092a2:	e00f      	b.n	80092c4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	8979      	ldrh	r1, [r7, #10]
 80092b6:	2300      	movs	r3, #0
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f001 fd80 	bl	800adc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d19e      	bne.n	800920c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	6a39      	ldr	r1, [r7, #32]
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f001 fc67 	bl	800aba6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e01a      	b.n	8009318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2220      	movs	r2, #32
 80092e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6859      	ldr	r1, [r3, #4]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <HAL_I2C_Master_Transmit+0x1e4>)
 80092f6:	400b      	ands	r3, r1
 80092f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2220      	movs	r2, #32
 80092fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	e000      	b.n	8009318 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009316:	2302      	movs	r3, #2
  }
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	80002000 	.word	0x80002000
 8009324:	fe00e800 	.word	0xfe00e800

08009328 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af02      	add	r7, sp, #8
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	461a      	mov	r2, r3
 8009334:	460b      	mov	r3, r1
 8009336:	817b      	strh	r3, [r7, #10]
 8009338:	4613      	mov	r3, r2
 800933a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b20      	cmp	r3, #32
 8009346:	f040 80db 	bne.w	8009500 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_I2C_Master_Receive+0x30>
 8009354:	2302      	movs	r3, #2
 8009356:	e0d4      	b.n	8009502 <HAL_I2C_Master_Receive+0x1da>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009360:	f7fd fae2 	bl	8006928 <HAL_GetTick>
 8009364:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	2319      	movs	r3, #25
 800936c:	2201      	movs	r2, #1
 800936e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f001 fb97 	bl	800aaa6 <I2C_WaitOnFlagUntilTimeout>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e0bf      	b.n	8009502 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2222      	movs	r2, #34	; 0x22
 8009386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2210      	movs	r2, #16
 800938e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	893a      	ldrh	r2, [r7, #8]
 80093a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2bff      	cmp	r3, #255	; 0xff
 80093b2:	d90e      	bls.n	80093d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	22ff      	movs	r2, #255	; 0xff
 80093b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	8979      	ldrh	r1, [r7, #10]
 80093c2:	4b52      	ldr	r3, [pc, #328]	; (800950c <HAL_I2C_Master_Receive+0x1e4>)
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f001 fcfa 	bl	800adc4 <I2C_TransferConfig>
 80093d0:	e06d      	b.n	80094ae <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	8979      	ldrh	r1, [r7, #10]
 80093e4:	4b49      	ldr	r3, [pc, #292]	; (800950c <HAL_I2C_Master_Receive+0x1e4>)
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f001 fce9 	bl	800adc4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80093f2:	e05c      	b.n	80094ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	6a39      	ldr	r1, [r7, #32]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f001 fc11 	bl	800ac20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e07c      	b.n	8009502 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009424:	3b01      	subs	r3, #1
 8009426:	b29a      	uxth	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d034      	beq.n	80094ae <HAL_I2C_Master_Receive+0x186>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009448:	2b00      	cmp	r3, #0
 800944a:	d130      	bne.n	80094ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	2200      	movs	r2, #0
 8009454:	2180      	movs	r1, #128	; 0x80
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f001 fb25 	bl	800aaa6 <I2C_WaitOnFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e04d      	b.n	8009502 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946a:	b29b      	uxth	r3, r3
 800946c:	2bff      	cmp	r3, #255	; 0xff
 800946e:	d90e      	bls.n	800948e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	22ff      	movs	r2, #255	; 0xff
 8009474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947a:	b2da      	uxtb	r2, r3
 800947c:	8979      	ldrh	r1, [r7, #10]
 800947e:	2300      	movs	r3, #0
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f001 fc9c 	bl	800adc4 <I2C_TransferConfig>
 800948c:	e00f      	b.n	80094ae <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009492:	b29a      	uxth	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949c:	b2da      	uxtb	r2, r3
 800949e:	8979      	ldrh	r1, [r7, #10]
 80094a0:	2300      	movs	r3, #0
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 fc8b 	bl	800adc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d19d      	bne.n	80093f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	6a39      	ldr	r1, [r7, #32]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f001 fb72 	bl	800aba6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e01a      	b.n	8009502 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2220      	movs	r2, #32
 80094d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6859      	ldr	r1, [r3, #4]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <HAL_I2C_Master_Receive+0x1e8>)
 80094e0:	400b      	ands	r3, r1
 80094e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	e000      	b.n	8009502 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009500:	2302      	movs	r3, #2
  }
}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	80002400 	.word	0x80002400
 8009510:	fe00e800 	.word	0xfe00e800

08009514 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af02      	add	r7, sp, #8
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	461a      	mov	r2, r3
 8009520:	460b      	mov	r3, r1
 8009522:	817b      	strh	r3, [r7, #10]
 8009524:	4613      	mov	r3, r2
 8009526:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b20      	cmp	r3, #32
 8009532:	d153      	bne.n	80095dc <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800953e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009542:	d101      	bne.n	8009548 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8009544:	2302      	movs	r3, #2
 8009546:	e04a      	b.n	80095de <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <HAL_I2C_Master_Receive_IT+0x42>
 8009552:	2302      	movs	r3, #2
 8009554:	e043      	b.n	80095de <HAL_I2C_Master_Receive_IT+0xca>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2222      	movs	r2, #34	; 0x22
 8009562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2210      	movs	r2, #16
 800956a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	893a      	ldrh	r2, [r7, #8]
 800957e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a19      	ldr	r2, [pc, #100]	; (80095e8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4a18      	ldr	r2, [pc, #96]	; (80095ec <HAL_I2C_Master_Receive_IT+0xd8>)
 800958a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009590:	b29b      	uxth	r3, r3
 8009592:	2bff      	cmp	r3, #255	; 0xff
 8009594:	d906      	bls.n	80095a4 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	22ff      	movs	r2, #255	; 0xff
 800959a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800959c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	e007      	b.n	80095b4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80095ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095b2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	8979      	ldrh	r1, [r7, #10]
 80095bc:	4b0c      	ldr	r3, [pc, #48]	; (80095f0 <HAL_I2C_Master_Receive_IT+0xdc>)
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 fbfe 	bl	800adc4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80095d0:	2102      	movs	r1, #2
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f001 fc24 	bl	800ae20 <I2C_Enable_IRQ>

    return HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	e000      	b.n	80095de <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80095dc:	2302      	movs	r3, #2
  }
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	ffff0000 	.word	0xffff0000
 80095ec:	080098f9 	.word	0x080098f9
 80095f0:	80002400 	.word	0x80002400

080095f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af02      	add	r7, sp, #8
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	4608      	mov	r0, r1
 80095fe:	4611      	mov	r1, r2
 8009600:	461a      	mov	r2, r3
 8009602:	4603      	mov	r3, r0
 8009604:	817b      	strh	r3, [r7, #10]
 8009606:	460b      	mov	r3, r1
 8009608:	813b      	strh	r3, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b20      	cmp	r3, #32
 8009618:	f040 80f9 	bne.w	800980e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <HAL_I2C_Mem_Write+0x34>
 8009622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800962e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e0ed      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_I2C_Mem_Write+0x4e>
 800963e:	2302      	movs	r3, #2
 8009640:	e0e6      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800964a:	f7fd f96d 	bl	8006928 <HAL_GetTick>
 800964e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	2319      	movs	r3, #25
 8009656:	2201      	movs	r2, #1
 8009658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f001 fa22 	bl	800aaa6 <I2C_WaitOnFlagUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e0d1      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2221      	movs	r2, #33	; 0x21
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2240      	movs	r2, #64	; 0x40
 8009678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a3a      	ldr	r2, [r7, #32]
 8009686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800968c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009694:	88f8      	ldrh	r0, [r7, #6]
 8009696:	893a      	ldrh	r2, [r7, #8]
 8009698:	8979      	ldrh	r1, [r7, #10]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	4603      	mov	r3, r0
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fd27 	bl	800a0f8 <I2C_RequestMemoryWrite>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e0a9      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2bff      	cmp	r3, #255	; 0xff
 80096c4:	d90e      	bls.n	80096e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	22ff      	movs	r2, #255	; 0xff
 80096ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	8979      	ldrh	r1, [r7, #10]
 80096d4:	2300      	movs	r3, #0
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f001 fb71 	bl	800adc4 <I2C_TransferConfig>
 80096e2:	e00f      	b.n	8009704 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	8979      	ldrh	r1, [r7, #10]
 80096f6:	2300      	movs	r3, #0
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f001 fb60 	bl	800adc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f001 fa0c 	bl	800ab26 <I2C_WaitOnTXISFlagUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e07b      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	781a      	ldrb	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009732:	b29b      	uxth	r3, r3
 8009734:	3b01      	subs	r3, #1
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009740:	3b01      	subs	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d034      	beq.n	80097bc <HAL_I2C_Mem_Write+0x1c8>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009756:	2b00      	cmp	r3, #0
 8009758:	d130      	bne.n	80097bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	2200      	movs	r2, #0
 8009762:	2180      	movs	r1, #128	; 0x80
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f001 f99e 	bl	800aaa6 <I2C_WaitOnFlagUntilTimeout>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e04d      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009778:	b29b      	uxth	r3, r3
 800977a:	2bff      	cmp	r3, #255	; 0xff
 800977c:	d90e      	bls.n	800979c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	22ff      	movs	r2, #255	; 0xff
 8009782:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009788:	b2da      	uxtb	r2, r3
 800978a:	8979      	ldrh	r1, [r7, #10]
 800978c:	2300      	movs	r3, #0
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f001 fb15 	bl	800adc4 <I2C_TransferConfig>
 800979a:	e00f      	b.n	80097bc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	8979      	ldrh	r1, [r7, #10]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f001 fb04 	bl	800adc4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d19e      	bne.n	8009704 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f001 f9eb 	bl	800aba6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e01a      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2220      	movs	r2, #32
 80097e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6859      	ldr	r1, [r3, #4]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <HAL_I2C_Mem_Write+0x224>)
 80097ee:	400b      	ands	r3, r1
 80097f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	e000      	b.n	8009810 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800980e:	2302      	movs	r3, #2
  }
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	fe00e800 	.word	0xfe00e800

0800981c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	68f9      	ldr	r1, [r7, #12]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
  }
}
 8009848:	bf00      	nop
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
 8009884:	4613      	mov	r3, r2
 8009886:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <I2C_Master_ISR_IT+0x1e>
 8009912:	2302      	movs	r3, #2
 8009914:	e115      	b.n	8009b42 <I2C_Master_ISR_IT+0x24a>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	091b      	lsrs	r3, r3, #4
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d013      	beq.n	8009952 <I2C_Master_ISR_IT+0x5a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	091b      	lsrs	r3, r3, #4
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00d      	beq.n	8009952 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2210      	movs	r2, #16
 800993c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009942:	f043 0204 	orr.w	r2, r3, #4
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f001 f869 	bl	800aa22 <I2C_Flush_TXDR>
 8009950:	e0e2      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	089b      	lsrs	r3, r3, #2
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d023      	beq.n	80099a6 <I2C_Master_ISR_IT+0xae>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	089b      	lsrs	r3, r3, #2
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01d      	beq.n	80099a6 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f023 0304 	bic.w	r3, r3, #4
 8009970:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800999a:	b29b      	uxth	r3, r3
 800999c:	3b01      	subs	r3, #1
 800999e:	b29a      	uxth	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099a4:	e0b8      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	085b      	lsrs	r3, r3, #1
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01e      	beq.n	80099f0 <I2C_Master_ISR_IT+0xf8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	085b      	lsrs	r3, r3, #1
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d018      	beq.n	80099f0 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	781a      	ldrb	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d8:	3b01      	subs	r3, #1
 80099da:	b29a      	uxth	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099ee:	e093      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	09db      	lsrs	r3, r3, #7
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d05e      	beq.n	8009aba <I2C_Master_ISR_IT+0x1c2>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	099b      	lsrs	r3, r3, #6
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d058      	beq.n	8009aba <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d041      	beq.n	8009a96 <I2C_Master_ISR_IT+0x19e>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d13d      	bne.n	8009a96 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a26:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2bff      	cmp	r3, #255	; 0xff
 8009a30:	d90e      	bls.n	8009a50 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	22ff      	movs	r2, #255	; 0xff
 8009a36:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	8a79      	ldrh	r1, [r7, #18]
 8009a40:	2300      	movs	r3, #0
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f001 f9bb 	bl	800adc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a4e:	e033      	b.n	8009ab8 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a62:	d00c      	beq.n	8009a7e <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009a6e:	8a79      	ldrh	r1, [r7, #18]
 8009a70:	2300      	movs	r3, #0
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	4603      	mov	r3, r0
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f001 f9a4 	bl	800adc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a7c:	e01c      	b.n	8009ab8 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	8a79      	ldrh	r1, [r7, #18]
 8009a86:	2300      	movs	r3, #0
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f001 f998 	bl	800adc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a94:	e010      	b.n	8009ab8 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aa4:	d003      	beq.n	8009aae <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 fbfe 	bl	800a2a8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009aac:	e034      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009aae:	2140      	movs	r1, #64	; 0x40
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 febf 	bl	800a834 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ab6:	e02f      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
 8009ab8:	e02e      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	099b      	lsrs	r3, r3, #6
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d028      	beq.n	8009b18 <I2C_Master_ISR_IT+0x220>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	099b      	lsrs	r3, r3, #6
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d022      	beq.n	8009b18 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d119      	bne.n	8009b10 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aea:	d015      	beq.n	8009b18 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009af4:	d108      	bne.n	8009b08 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b04:	605a      	str	r2, [r3, #4]
 8009b06:	e007      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fbcd 	bl	800a2a8 <I2C_ITMasterSeqCplt>
 8009b0e:	e003      	b.n	8009b18 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009b10:	2140      	movs	r1, #64	; 0x40
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fe8e 	bl	800a834 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	095b      	lsrs	r3, r3, #5
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d009      	beq.n	8009b38 <I2C_Master_ISR_IT+0x240>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	095b      	lsrs	r3, r3, #5
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009b30:	6979      	ldr	r1, [r7, #20]
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 fc54 	bl	800a3e0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b086      	sub	sp, #24
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <I2C_Slave_ISR_IT+0x24>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	e0ec      	b.n	8009d48 <I2C_Slave_ISR_IT+0x1fe>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	095b      	lsrs	r3, r3, #5
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d009      	beq.n	8009b96 <I2C_Slave_ISR_IT+0x4c>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	095b      	lsrs	r3, r3, #5
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009b8e:	6939      	ldr	r1, [r7, #16]
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f000 fcef 	bl	800a574 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	091b      	lsrs	r3, r3, #4
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d04d      	beq.n	8009c3e <I2C_Slave_ISR_IT+0xf4>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	091b      	lsrs	r3, r3, #4
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d047      	beq.n	8009c3e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d128      	bne.n	8009c0a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b28      	cmp	r3, #40	; 0x28
 8009bc2:	d108      	bne.n	8009bd6 <I2C_Slave_ISR_IT+0x8c>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bca:	d104      	bne.n	8009bd6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009bcc:	6939      	ldr	r1, [r7, #16]
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 fdda 	bl	800a788 <I2C_ITListenCplt>
 8009bd4:	e032      	b.n	8009c3c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b29      	cmp	r3, #41	; 0x29
 8009be0:	d10e      	bne.n	8009c00 <I2C_Slave_ISR_IT+0xb6>
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009be8:	d00a      	beq.n	8009c00 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2210      	movs	r2, #16
 8009bf0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 ff15 	bl	800aa22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 fb92 	bl	800a322 <I2C_ITSlaveSeqCplt>
 8009bfe:	e01d      	b.n	8009c3c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2210      	movs	r2, #16
 8009c06:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009c08:	e096      	b.n	8009d38 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2210      	movs	r2, #16
 8009c10:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c16:	f043 0204 	orr.w	r2, r3, #4
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <I2C_Slave_ISR_IT+0xe4>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c2a:	f040 8085 	bne.w	8009d38 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c32:	4619      	mov	r1, r3
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 fdfd 	bl	800a834 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009c3a:	e07d      	b.n	8009d38 <I2C_Slave_ISR_IT+0x1ee>
 8009c3c:	e07c      	b.n	8009d38 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	089b      	lsrs	r3, r3, #2
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d030      	beq.n	8009cac <I2C_Slave_ISR_IT+0x162>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	089b      	lsrs	r3, r3, #2
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d02a      	beq.n	8009cac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d018      	beq.n	8009c92 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d14f      	bne.n	8009d3c <I2C_Slave_ISR_IT+0x1f2>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ca2:	d04b      	beq.n	8009d3c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fb3c 	bl	800a322 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009caa:	e047      	b.n	8009d3c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	08db      	lsrs	r3, r3, #3
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <I2C_Slave_ISR_IT+0x184>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	08db      	lsrs	r3, r3, #3
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d004      	beq.n	8009cce <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009cc4:	6939      	ldr	r1, [r7, #16]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 fa6a 	bl	800a1a0 <I2C_ITAddrCplt>
 8009ccc:	e037      	b.n	8009d3e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	085b      	lsrs	r3, r3, #1
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d031      	beq.n	8009d3e <I2C_Slave_ISR_IT+0x1f4>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d02b      	beq.n	8009d3e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d018      	beq.n	8009d22 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	781a      	ldrb	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009d20:	e00d      	b.n	8009d3e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d28:	d002      	beq.n	8009d30 <I2C_Slave_ISR_IT+0x1e6>
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d106      	bne.n	8009d3e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 faf6 	bl	800a322 <I2C_ITSlaveSeqCplt>
 8009d36:	e002      	b.n	8009d3e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009d38:	bf00      	nop
 8009d3a:	e000      	b.n	8009d3e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009d3c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <I2C_Master_ISR_DMA+0x1a>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e0e1      	b.n	8009f2e <I2C_Master_ISR_DMA+0x1de>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	091b      	lsrs	r3, r3, #4
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d017      	beq.n	8009dae <I2C_Master_ISR_DMA+0x5e>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	091b      	lsrs	r3, r3, #4
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d011      	beq.n	8009dae <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2210      	movs	r2, #16
 8009d90:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d96:	f043 0204 	orr.w	r2, r3, #4
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009d9e:	2120      	movs	r1, #32
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f001 f83d 	bl	800ae20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fe3b 	bl	800aa22 <I2C_Flush_TXDR>
 8009dac:	e0ba      	b.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	09db      	lsrs	r3, r3, #7
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d072      	beq.n	8009ea0 <I2C_Master_ISR_DMA+0x150>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	099b      	lsrs	r3, r3, #6
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d06c      	beq.n	8009ea0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dd4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d04e      	beq.n	8009e7e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	2bff      	cmp	r3, #255	; 0xff
 8009df6:	d906      	bls.n	8009e06 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	22ff      	movs	r2, #255	; 0xff
 8009dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e010      	b.n	8009e28 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e18:	d003      	beq.n	8009e22 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	e002      	b.n	8009e28 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e26:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	8a79      	ldrh	r1, [r7, #18]
 8009e30:	2300      	movs	r3, #0
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f000 ffc4 	bl	800adc4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b22      	cmp	r3, #34	; 0x22
 8009e58:	d108      	bne.n	8009e6c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e68:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009e6a:	e05b      	b.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e7a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009e7c:	e052      	b.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e8c:	d003      	beq.n	8009e96 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fa0a 	bl	800a2a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009e94:	e046      	b.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009e96:	2140      	movs	r1, #64	; 0x40
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fccb 	bl	800a834 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009e9e:	e041      	b.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	099b      	lsrs	r3, r3, #6
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d029      	beq.n	8009f00 <I2C_Master_ISR_DMA+0x1b0>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	099b      	lsrs	r3, r3, #6
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d023      	beq.n	8009f00 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d119      	bne.n	8009ef6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ed0:	d027      	beq.n	8009f22 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009eda:	d108      	bne.n	8009eee <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009eea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009eec:	e019      	b.n	8009f22 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 f9da 	bl	800a2a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009ef4:	e015      	b.n	8009f22 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009ef6:	2140      	movs	r1, #64	; 0x40
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 fc9b 	bl	800a834 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009efe:	e010      	b.n	8009f22 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	095b      	lsrs	r3, r3, #5
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d005      	beq.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 fa60 	bl	800a3e0 <I2C_ITMasterCplt>
 8009f20:	e000      	b.n	8009f24 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009f22:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b088      	sub	sp, #32
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <I2C_Slave_ISR_DMA+0x24>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e0c9      	b.n	800a0ee <I2C_Slave_ISR_DMA+0x1b8>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	095b      	lsrs	r3, r3, #5
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d009      	beq.n	8009f82 <I2C_Slave_ISR_DMA+0x4c>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	095b      	lsrs	r3, r3, #5
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 faf9 	bl	800a574 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	091b      	lsrs	r3, r3, #4
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 809a 	beq.w	800a0c4 <I2C_Slave_ISR_DMA+0x18e>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	091b      	lsrs	r3, r3, #4
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8093 	beq.w	800a0c4 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	0b9b      	lsrs	r3, r3, #14
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	0bdb      	lsrs	r3, r3, #15
 8009fae:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d07f      	beq.n	800a0b6 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00d      	beq.n	8009fda <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	0bdb      	lsrs	r3, r3, #15
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d007      	beq.n	8009fda <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00d      	beq.n	8009ffe <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	0b9b      	lsrs	r3, r3, #14
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d007      	beq.n	8009ffe <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d128      	bne.n	800a056 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b28      	cmp	r3, #40	; 0x28
 800a00e:	d108      	bne.n	800a022 <I2C_Slave_ISR_DMA+0xec>
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a016:	d104      	bne.n	800a022 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a018:	68b9      	ldr	r1, [r7, #8]
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fbb4 	bl	800a788 <I2C_ITListenCplt>
 800a020:	e048      	b.n	800a0b4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b29      	cmp	r3, #41	; 0x29
 800a02c:	d10e      	bne.n	800a04c <I2C_Slave_ISR_DMA+0x116>
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a034:	d00a      	beq.n	800a04c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2210      	movs	r2, #16
 800a03c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fcef 	bl	800aa22 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 f96c 	bl	800a322 <I2C_ITSlaveSeqCplt>
 800a04a:	e033      	b.n	800a0b4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2210      	movs	r2, #16
 800a052:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a054:	e034      	b.n	800a0c0 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2210      	movs	r2, #16
 800a05c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a062:	f043 0204 	orr.w	r2, r3, #4
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a070:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <I2C_Slave_ISR_DMA+0x14a>
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a07e:	d11f      	bne.n	800a0c0 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	2b21      	cmp	r3, #33	; 0x21
 800a084:	d002      	beq.n	800a08c <I2C_Slave_ISR_DMA+0x156>
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	2b29      	cmp	r3, #41	; 0x29
 800a08a:	d103      	bne.n	800a094 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2221      	movs	r2, #33	; 0x21
 800a090:	631a      	str	r2, [r3, #48]	; 0x30
 800a092:	e008      	b.n	800a0a6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b22      	cmp	r3, #34	; 0x22
 800a098:	d002      	beq.n	800a0a0 <I2C_Slave_ISR_DMA+0x16a>
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	2b2a      	cmp	r3, #42	; 0x2a
 800a09e:	d102      	bne.n	800a0a6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2222      	movs	r2, #34	; 0x22
 800a0a4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 fbc1 	bl	800a834 <I2C_ITError>
      if (treatdmanack == 1U)
 800a0b2:	e005      	b.n	800a0c0 <I2C_Slave_ISR_DMA+0x18a>
 800a0b4:	e004      	b.n	800a0c0 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2210      	movs	r2, #16
 800a0bc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a0be:	e011      	b.n	800a0e4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800a0c0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a0c2:	e00f      	b.n	800a0e4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	08db      	lsrs	r3, r3, #3
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d009      	beq.n	800a0e4 <I2C_Slave_ISR_DMA+0x1ae>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	08db      	lsrs	r3, r3, #3
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 f85e 	bl	800a1a0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	4608      	mov	r0, r1
 800a102:	4611      	mov	r1, r2
 800a104:	461a      	mov	r2, r3
 800a106:	4603      	mov	r3, r0
 800a108:	817b      	strh	r3, [r7, #10]
 800a10a:	460b      	mov	r3, r1
 800a10c:	813b      	strh	r3, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	b2da      	uxtb	r2, r3
 800a116:	8979      	ldrh	r1, [r7, #10]
 800a118:	4b20      	ldr	r3, [pc, #128]	; (800a19c <I2C_RequestMemoryWrite+0xa4>)
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 fe4f 	bl	800adc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a126:	69fa      	ldr	r2, [r7, #28]
 800a128:	69b9      	ldr	r1, [r7, #24]
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 fcfb 	bl	800ab26 <I2C_WaitOnTXISFlagUntilTimeout>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e02c      	b.n	800a194 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a13a:	88fb      	ldrh	r3, [r7, #6]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d105      	bne.n	800a14c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a140:	893b      	ldrh	r3, [r7, #8]
 800a142:	b2da      	uxtb	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	629a      	str	r2, [r3, #40]	; 0x28
 800a14a:	e015      	b.n	800a178 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a14c:	893b      	ldrh	r3, [r7, #8]
 800a14e:	0a1b      	lsrs	r3, r3, #8
 800a150:	b29b      	uxth	r3, r3
 800a152:	b2da      	uxtb	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a15a:	69fa      	ldr	r2, [r7, #28]
 800a15c:	69b9      	ldr	r1, [r7, #24]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 fce1 	bl	800ab26 <I2C_WaitOnTXISFlagUntilTimeout>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e012      	b.n	800a194 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a16e:	893b      	ldrh	r3, [r7, #8]
 800a170:	b2da      	uxtb	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	2200      	movs	r2, #0
 800a180:	2180      	movs	r1, #128	; 0x80
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fc8f 	bl	800aaa6 <I2C_WaitOnFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	80002000 	.word	0x80002000

0800a1a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a1b6:	2b28      	cmp	r3, #40	; 0x28
 800a1b8:	d16a      	bne.n	800a290 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	0c1b      	lsrs	r3, r3, #16
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a1d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a1f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d138      	bne.n	800a270 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a1fe:	897b      	ldrh	r3, [r7, #10]
 800a200:	09db      	lsrs	r3, r3, #7
 800a202:	b29a      	uxth	r2, r3
 800a204:	89bb      	ldrh	r3, [r7, #12]
 800a206:	4053      	eors	r3, r2
 800a208:	b29b      	uxth	r3, r3
 800a20a:	f003 0306 	and.w	r3, r3, #6
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d11c      	bne.n	800a24c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a212:	897b      	ldrh	r3, [r7, #10]
 800a214:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a224:	2b02      	cmp	r3, #2
 800a226:	d13b      	bne.n	800a2a0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2208      	movs	r2, #8
 800a234:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a23e:	89ba      	ldrh	r2, [r7, #12]
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff fb17 	bl	8009878 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a24a:	e029      	b.n	800a2a0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a24c:	893b      	ldrh	r3, [r7, #8]
 800a24e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fe47 	bl	800aee8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a262:	89ba      	ldrh	r2, [r7, #12]
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff fb05 	bl	8009878 <HAL_I2C_AddrCallback>
}
 800a26e:	e017      	b.n	800a2a0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fe37 	bl	800aee8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a282:	89ba      	ldrh	r2, [r7, #12]
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff faf5 	bl	8009878 <HAL_I2C_AddrCallback>
}
 800a28e:	e007      	b.n	800a2a0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2208      	movs	r2, #8
 800a296:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b21      	cmp	r3, #33	; 0x21
 800a2c2:	d115      	bne.n	800a2f0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2211      	movs	r2, #17
 800a2d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a2d8:	2101      	movs	r1, #1
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fe04 	bl	800aee8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7f9 fea5 	bl	8004038 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a2ee:	e014      	b.n	800a31a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2212      	movs	r2, #18
 800a2fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a304:	2102      	movs	r1, #2
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fdee 	bl	800aee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7f9 fea5 	bl	8004064 <HAL_I2C_MasterRxCpltCallback>
}
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	0b9b      	lsrs	r3, r3, #14
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	d008      	beq.n	800a358 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	e00d      	b.n	800a374 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	0bdb      	lsrs	r3, r3, #15
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d007      	beq.n	800a374 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a372:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b29      	cmp	r3, #41	; 0x29
 800a37e:	d112      	bne.n	800a3a6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2228      	movs	r2, #40	; 0x28
 800a384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2221      	movs	r2, #33	; 0x21
 800a38c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a38e:	2101      	movs	r1, #1
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fda9 	bl	800aee8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7ff fa56 	bl	8009850 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a3a4:	e017      	b.n	800a3d6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b0:	d111      	bne.n	800a3d6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2228      	movs	r2, #40	; 0x28
 800a3b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2222      	movs	r2, #34	; 0x22
 800a3be:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a3c0:	2102      	movs	r1, #2
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fd90 	bl	800aee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff fa47 	bl	8009864 <HAL_I2C_SlaveRxCpltCallback>
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b21      	cmp	r3, #33	; 0x21
 800a400:	d107      	bne.n	800a412 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a402:	2101      	movs	r1, #1
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fd6f 	bl	800aee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2211      	movs	r2, #17
 800a40e:	631a      	str	r2, [r3, #48]	; 0x30
 800a410:	e00c      	b.n	800a42c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b22      	cmp	r3, #34	; 0x22
 800a41c:	d106      	bne.n	800a42c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a41e:	2102      	movs	r1, #2
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fd61 	bl	800aee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2212      	movs	r2, #18
 800a42a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6859      	ldr	r1, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4b4d      	ldr	r3, [pc, #308]	; (800a56c <I2C_ITMasterCplt+0x18c>)
 800a438:	400b      	ands	r3, r1
 800a43a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a4a      	ldr	r2, [pc, #296]	; (800a570 <I2C_ITMasterCplt+0x190>)
 800a446:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	091b      	lsrs	r3, r3, #4
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2210      	movs	r2, #16
 800a45a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a460:	f043 0204 	orr.w	r2, r3, #4
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b60      	cmp	r3, #96	; 0x60
 800a472:	d10b      	bne.n	800a48c <I2C_ITMasterCplt+0xac>
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	089b      	lsrs	r3, r3, #2
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	b2db      	uxtb	r3, r3
 800a488:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a48a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fac8 	bl	800aa22 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a496:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b60      	cmp	r3, #96	; 0x60
 800a4a2:	d002      	beq.n	800a4aa <I2C_ITMasterCplt+0xca>
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d006      	beq.n	800a4b8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f9bf 	bl	800a834 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a4b6:	e054      	b.n	800a562 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b21      	cmp	r3, #33	; 0x21
 800a4c2:	d124      	bne.n	800a50e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b40      	cmp	r3, #64	; 0x40
 800a4dc:	d10b      	bne.n	800a4f6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff f9da 	bl	80098a8 <HAL_I2C_MemTxCpltCallback>
}
 800a4f4:	e035      	b.n	800a562 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7f9 fd96 	bl	8004038 <HAL_I2C_MasterTxCpltCallback>
}
 800a50c:	e029      	b.n	800a562 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b22      	cmp	r3, #34	; 0x22
 800a518:	d123      	bne.n	800a562 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b40      	cmp	r3, #64	; 0x40
 800a532:	d10b      	bne.n	800a54c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff f9b9 	bl	80098bc <HAL_I2C_MemRxCpltCallback>
}
 800a54a:	e00a      	b.n	800a562 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7f9 fd81 	bl	8004064 <HAL_I2C_MasterRxCpltCallback>
}
 800a562:	bf00      	nop
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	fe00e800 	.word	0xfe00e800
 800a570:	ffff0000 	.word	0xffff0000

0800a574 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a590:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2220      	movs	r2, #32
 800a598:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
 800a59c:	2b21      	cmp	r3, #33	; 0x21
 800a59e:	d002      	beq.n	800a5a6 <I2C_ITSlaveCplt+0x32>
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b29      	cmp	r3, #41	; 0x29
 800a5a4:	d108      	bne.n	800a5b8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a5a6:	f248 0101 	movw	r1, #32769	; 0x8001
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fc9c 	bl	800aee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2221      	movs	r2, #33	; 0x21
 800a5b4:	631a      	str	r2, [r3, #48]	; 0x30
 800a5b6:	e00d      	b.n	800a5d4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	2b22      	cmp	r3, #34	; 0x22
 800a5bc:	d002      	beq.n	800a5c4 <I2C_ITSlaveCplt+0x50>
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c2:	d107      	bne.n	800a5d4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a5c4:	f248 0102 	movw	r1, #32770	; 0x8002
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fc8d 	bl	800aee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2222      	movs	r2, #34	; 0x22
 800a5d2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5e2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6859      	ldr	r1, [r3, #4]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b64      	ldr	r3, [pc, #400]	; (800a780 <I2C_ITSlaveCplt+0x20c>)
 800a5f0:	400b      	ands	r3, r1
 800a5f2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fa14 	bl	800aa22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	0b9b      	lsrs	r3, r3, #14
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d013      	beq.n	800a62e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a614:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d020      	beq.n	800a660 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a62c:	e018      	b.n	800a660 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	0bdb      	lsrs	r3, r3, #15
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	d012      	beq.n	800a660 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a648:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d006      	beq.n	800a660 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	089b      	lsrs	r3, r3, #2
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d020      	beq.n	800a6ae <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f023 0304 	bic.w	r3, r3, #4
 800a672:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00c      	beq.n	800a6ae <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a698:	3b01      	subs	r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6bc:	f043 0204 	orr.w	r2, r3, #4
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d010      	beq.n	800a6fc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f8a7 	bl	800a834 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b28      	cmp	r3, #40	; 0x28
 800a6f0:	d141      	bne.n	800a776 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a6f2:	6979      	ldr	r1, [r7, #20]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f847 	bl	800a788 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a6fa:	e03c      	b.n	800a776 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a704:	d014      	beq.n	800a730 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fe0b 	bl	800a322 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a1d      	ldr	r2, [pc, #116]	; (800a784 <I2C_ITSlaveCplt+0x210>)
 800a710:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2220      	movs	r2, #32
 800a716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff f8b3 	bl	8009894 <HAL_I2C_ListenCpltCallback>
}
 800a72e:	e022      	b.n	800a776 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b22      	cmp	r3, #34	; 0x22
 800a73a:	d10e      	bne.n	800a75a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff f886 	bl	8009864 <HAL_I2C_SlaveRxCpltCallback>
}
 800a758:	e00d      	b.n	800a776 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff f86d 	bl	8009850 <HAL_I2C_SlaveTxCpltCallback>
}
 800a776:	bf00      	nop
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	fe00e800 	.word	0xfe00e800
 800a784:	ffff0000 	.word	0xffff0000

0800a788 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a26      	ldr	r2, [pc, #152]	; (800a830 <I2C_ITListenCplt+0xa8>)
 800a796:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	089b      	lsrs	r3, r3, #2
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d022      	beq.n	800a806 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ca:	b2d2      	uxtb	r2, r2
 800a7cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d012      	beq.n	800a806 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fe:	f043 0204 	orr.w	r2, r3, #4
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a806:	f248 0103 	movw	r1, #32771	; 0x8003
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fb6c 	bl	800aee8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2210      	movs	r2, #16
 800a816:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff f837 	bl	8009894 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	ffff0000 	.word	0xffff0000

0800a834 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a5d      	ldr	r2, [pc, #372]	; (800a9c8 <I2C_ITError+0x194>)
 800a852:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	431a      	orrs	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a866:	7bfb      	ldrb	r3, [r7, #15]
 800a868:	2b28      	cmp	r3, #40	; 0x28
 800a86a:	d005      	beq.n	800a878 <I2C_ITError+0x44>
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	2b29      	cmp	r3, #41	; 0x29
 800a870:	d002      	beq.n	800a878 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	2b2a      	cmp	r3, #42	; 0x2a
 800a876:	d10b      	bne.n	800a890 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a878:	2103      	movs	r1, #3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fb34 	bl	800aee8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2228      	movs	r2, #40	; 0x28
 800a884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a50      	ldr	r2, [pc, #320]	; (800a9cc <I2C_ITError+0x198>)
 800a88c:	635a      	str	r2, [r3, #52]	; 0x34
 800a88e:	e011      	b.n	800a8b4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a890:	f248 0103 	movw	r1, #32771	; 0x8003
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fb27 	bl	800aee8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b60      	cmp	r3, #96	; 0x60
 800a8a4:	d003      	beq.n	800a8ae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d039      	beq.n	800a936 <I2C_ITError+0x102>
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b11      	cmp	r3, #17
 800a8c6:	d002      	beq.n	800a8ce <I2C_ITError+0x9a>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b21      	cmp	r3, #33	; 0x21
 800a8cc:	d133      	bne.n	800a936 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8dc:	d107      	bne.n	800a8ee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a8ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe f908 	bl	8008b08 <HAL_DMA_GetState>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d017      	beq.n	800a92e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a902:	4a33      	ldr	r2, [pc, #204]	; (800a9d0 <I2C_ITError+0x19c>)
 800a904:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	4618      	mov	r0, r3
 800a914:	f7fd ffea 	bl	80088ec <HAL_DMA_Abort_IT>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d04d      	beq.n	800a9ba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a928:	4610      	mov	r0, r2
 800a92a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a92c:	e045      	b.n	800a9ba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f850 	bl	800a9d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a934:	e041      	b.n	800a9ba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d039      	beq.n	800a9b2 <I2C_ITError+0x17e>
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b12      	cmp	r3, #18
 800a942:	d002      	beq.n	800a94a <I2C_ITError+0x116>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b22      	cmp	r3, #34	; 0x22
 800a948:	d133      	bne.n	800a9b2 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a958:	d107      	bne.n	800a96a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a968:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe f8ca 	bl	8008b08 <HAL_DMA_GetState>
 800a974:	4603      	mov	r3, r0
 800a976:	2b01      	cmp	r3, #1
 800a978:	d017      	beq.n	800a9aa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97e:	4a14      	ldr	r2, [pc, #80]	; (800a9d0 <I2C_ITError+0x19c>)
 800a980:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fd ffac 	bl	80088ec <HAL_DMA_Abort_IT>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d011      	beq.n	800a9be <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9a8:	e009      	b.n	800a9be <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f812 	bl	800a9d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9b0:	e005      	b.n	800a9be <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f80e 	bl	800a9d4 <I2C_TreatErrorCallback>
  }
}
 800a9b8:	e002      	b.n	800a9c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a9ba:	bf00      	nop
 800a9bc:	e000      	b.n	800a9c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9be:	bf00      	nop
}
 800a9c0:	bf00      	nop
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	ffff0000 	.word	0xffff0000
 800a9cc:	08009b4b 	.word	0x08009b4b
 800a9d0:	0800aa6b 	.word	0x0800aa6b

0800a9d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b60      	cmp	r3, #96	; 0x60
 800a9e6:	d10e      	bne.n	800aa06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7fe ff70 	bl	80098e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aa04:	e009      	b.n	800aa1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7fe ff5b 	bl	80098d0 <HAL_I2C_ErrorCallback>
}
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d103      	bne.n	800aa40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d007      	beq.n	800aa5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	699a      	ldr	r2, [r3, #24]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f042 0201 	orr.w	r2, r2, #1
 800aa5c:	619a      	str	r2, [r3, #24]
  }
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	2200      	movs	r2, #0
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa94:	2200      	movs	r2, #0
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff ff9b 	bl	800a9d4 <I2C_TreatErrorCallback>
}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	603b      	str	r3, [r7, #0]
 800aab2:	4613      	mov	r3, r2
 800aab4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aab6:	e022      	b.n	800aafe <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d01e      	beq.n	800aafe <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aac0:	f7fb ff32 	bl	8006928 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d302      	bcc.n	800aad6 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d113      	bne.n	800aafe <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aada:	f043 0220 	orr.w	r2, r3, #32
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e00f      	b.n	800ab1e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	699a      	ldr	r2, [r3, #24]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4013      	ands	r3, r2
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	bf0c      	ite	eq
 800ab0e:	2301      	moveq	r3, #1
 800ab10:	2300      	movne	r3, #0
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d0cd      	beq.n	800aab8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab32:	e02c      	b.n	800ab8e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	68b9      	ldr	r1, [r7, #8]
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 f8dd 	bl	800acf8 <I2C_IsAcknowledgeFailed>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e02a      	b.n	800ab9e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4e:	d01e      	beq.n	800ab8e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab50:	f7fb feea 	bl	8006928 <HAL_GetTick>
 800ab54:	4602      	mov	r2, r0
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d302      	bcc.n	800ab66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d113      	bne.n	800ab8e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6a:	f043 0220 	orr.w	r2, r3, #32
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e007      	b.n	800ab9e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d1cb      	bne.n	800ab34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b084      	sub	sp, #16
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abb2:	e028      	b.n	800ac06 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	68b9      	ldr	r1, [r7, #8]
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 f89d 	bl	800acf8 <I2C_IsAcknowledgeFailed>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e026      	b.n	800ac16 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abc8:	f7fb feae 	bl	8006928 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d302      	bcc.n	800abde <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d113      	bne.n	800ac06 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe2:	f043 0220 	orr.w	r2, r3, #32
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2220      	movs	r2, #32
 800abee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e007      	b.n	800ac16 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	f003 0320 	and.w	r3, r3, #32
 800ac10:	2b20      	cmp	r3, #32
 800ac12:	d1cf      	bne.n	800abb4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac2c:	e055      	b.n	800acda <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	68b9      	ldr	r1, [r7, #8]
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f860 	bl	800acf8 <I2C_IsAcknowledgeFailed>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e053      	b.n	800acea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	f003 0320 	and.w	r3, r3, #32
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d129      	bne.n	800aca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b04      	cmp	r3, #4
 800ac5c:	d105      	bne.n	800ac6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e03f      	b.n	800acea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6859      	ldr	r1, [r3, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	4b1d      	ldr	r3, [pc, #116]	; (800acf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800ac7e:	400b      	ands	r3, r1
 800ac80:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e022      	b.n	800acea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aca4:	f7fb fe40 	bl	8006928 <HAL_GetTick>
 800aca8:	4602      	mov	r2, r0
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d302      	bcc.n	800acba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10f      	bne.n	800acda <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acbe:	f043 0220 	orr.w	r2, r3, #32
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2220      	movs	r2, #32
 800acca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e007      	b.n	800acea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	f003 0304 	and.w	r3, r3, #4
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	d1a2      	bne.n	800ac2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	fe00e800 	.word	0xfe00e800

0800acf8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	f003 0310 	and.w	r3, r3, #16
 800ad0e:	2b10      	cmp	r3, #16
 800ad10:	d151      	bne.n	800adb6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad12:	e022      	b.n	800ad5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d01e      	beq.n	800ad5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad1c:	f7fb fe04 	bl	8006928 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d302      	bcc.n	800ad32 <I2C_IsAcknowledgeFailed+0x3a>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d113      	bne.n	800ad5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	f043 0220 	orr.w	r2, r3, #32
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e02e      	b.n	800adb8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	f003 0320 	and.w	r3, r3, #32
 800ad64:	2b20      	cmp	r3, #32
 800ad66:	d1d5      	bne.n	800ad14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2210      	movs	r2, #16
 800ad6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2220      	movs	r2, #32
 800ad76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f7ff fe52 	bl	800aa22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6859      	ldr	r1, [r3, #4]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <I2C_IsAcknowledgeFailed+0xc8>)
 800ad8a:	400b      	ands	r3, r1
 800ad8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad92:	f043 0204 	orr.w	r2, r3, #4
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2220      	movs	r2, #32
 800ad9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	fe00e800 	.word	0xfe00e800

0800adc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	607b      	str	r3, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	817b      	strh	r3, [r7, #10]
 800add2:	4613      	mov	r3, r2
 800add4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	0d5b      	lsrs	r3, r3, #21
 800ade0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <I2C_TransferConfig+0x58>)
 800ade6:	430b      	orrs	r3, r1
 800ade8:	43db      	mvns	r3, r3
 800adea:	ea02 0103 	and.w	r1, r2, r3
 800adee:	897b      	ldrh	r3, [r7, #10]
 800adf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800adf4:	7a7b      	ldrb	r3, [r7, #9]
 800adf6:	041b      	lsls	r3, r3, #16
 800adf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	431a      	orrs	r2, r3
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	431a      	orrs	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ae0e:	bf00      	nop
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	03ff63ff 	.word	0x03ff63ff

0800ae20 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae34:	4a2a      	ldr	r2, [pc, #168]	; (800aee0 <I2C_Enable_IRQ+0xc0>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d004      	beq.n	800ae44 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ae3e:	4a29      	ldr	r2, [pc, #164]	; (800aee4 <I2C_Enable_IRQ+0xc4>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d11d      	bne.n	800ae80 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ae44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	da03      	bge.n	800ae54 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ae52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ae54:	887b      	ldrh	r3, [r7, #2]
 800ae56:	2b10      	cmp	r3, #16
 800ae58:	d103      	bne.n	800ae62 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ae60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ae62:	887b      	ldrh	r3, [r7, #2]
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	d103      	bne.n	800ae70 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ae6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ae70:	887b      	ldrh	r3, [r7, #2]
 800ae72:	2b40      	cmp	r3, #64	; 0x40
 800ae74:	d125      	bne.n	800aec2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ae7e:	e020      	b.n	800aec2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ae80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da03      	bge.n	800ae90 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ae8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ae90:	887b      	ldrh	r3, [r7, #2]
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800aea0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aea2:	887b      	ldrh	r3, [r7, #2]
 800aea4:	f003 0302 	and.w	r3, r3, #2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800aeb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aeb4:	887b      	ldrh	r3, [r7, #2]
 800aeb6:	2b20      	cmp	r3, #32
 800aeb8:	d103      	bne.n	800aec2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f043 0320 	orr.w	r3, r3, #32
 800aec0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6819      	ldr	r1, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	430a      	orrs	r2, r1
 800aed0:	601a      	str	r2, [r3, #0]
}
 800aed2:	bf00      	nop
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	08009d51 	.word	0x08009d51
 800aee4:	08009f37 	.word	0x08009f37

0800aee8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aef8:	887b      	ldrh	r3, [r7, #2]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00f      	beq.n	800af22 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800af08:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af10:	b2db      	uxtb	r3, r3
 800af12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800af16:	2b28      	cmp	r3, #40	; 0x28
 800af18:	d003      	beq.n	800af22 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800af20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800af22:	887b      	ldrh	r3, [r7, #2]
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00f      	beq.n	800af4c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800af32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800af40:	2b28      	cmp	r3, #40	; 0x28
 800af42:	d003      	beq.n	800af4c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800af4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800af4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800af50:	2b00      	cmp	r3, #0
 800af52:	da03      	bge.n	800af5c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800af5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800af5c:	887b      	ldrh	r3, [r7, #2]
 800af5e:	2b10      	cmp	r3, #16
 800af60:	d103      	bne.n	800af6a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800af68:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800af6a:	887b      	ldrh	r3, [r7, #2]
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d103      	bne.n	800af78 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f043 0320 	orr.w	r3, r3, #32
 800af76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800af78:	887b      	ldrh	r3, [r7, #2]
 800af7a:	2b40      	cmp	r3, #64	; 0x40
 800af7c:	d103      	bne.n	800af86 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af84:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6819      	ldr	r1, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	43da      	mvns	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	400a      	ands	r2, r1
 800af96:	601a      	str	r2, [r3, #0]
}
 800af98:	bf00      	nop
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b20      	cmp	r3, #32
 800afb8:	d138      	bne.n	800b02c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e032      	b.n	800b02e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2224      	movs	r2, #36	; 0x24
 800afd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f022 0201 	bic.w	r2, r2, #1
 800afe6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aff6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6819      	ldr	r1, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	430a      	orrs	r2, r1
 800b006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f042 0201 	orr.w	r2, r2, #1
 800b016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	e000      	b.n	800b02e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b02c:	2302      	movs	r3, #2
  }
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b085      	sub	sp, #20
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d139      	bne.n	800b0c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b056:	2b01      	cmp	r3, #1
 800b058:	d101      	bne.n	800b05e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b05a:	2302      	movs	r3, #2
 800b05c:	e033      	b.n	800b0c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2224      	movs	r2, #36	; 0x24
 800b06a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0201 	bic.w	r2, r2, #1
 800b07c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b08c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0201 	orr.w	r2, r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e000      	b.n	800b0c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b0c4:	2302      	movs	r3, #2
  }
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d4:	b08b      	sub	sp, #44	; 0x2c
 800b0d6:	af06      	add	r7, sp, #24
 800b0d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e0ad      	b.n	800b240 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d106      	bne.n	800b0fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f00f fb9b 	bl	801a834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2203      	movs	r2, #3
 800b102:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f004 fba7 	bl	800f85e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b110:	2300      	movs	r3, #0
 800b112:	73fb      	strb	r3, [r7, #15]
 800b114:	e035      	b.n	800b182 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	015b      	lsls	r3, r3, #5
 800b11c:	4413      	add	r3, r2
 800b11e:	3329      	adds	r3, #41	; 0x29
 800b120:	2201      	movs	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	015b      	lsls	r3, r3, #5
 800b12a:	4413      	add	r3, r2
 800b12c:	3328      	adds	r3, #40	; 0x28
 800b12e:	7bfa      	ldrb	r2, [r7, #15]
 800b130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b132:	7bfb      	ldrb	r3, [r7, #15]
 800b134:	7bfa      	ldrb	r2, [r7, #15]
 800b136:	b291      	uxth	r1, r2
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	015b      	lsls	r3, r3, #5
 800b13c:	4413      	add	r3, r2
 800b13e:	3336      	adds	r3, #54	; 0x36
 800b140:	460a      	mov	r2, r1
 800b142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	015b      	lsls	r3, r3, #5
 800b14a:	4413      	add	r3, r2
 800b14c:	332b      	adds	r3, #43	; 0x2b
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	015b      	lsls	r3, r3, #5
 800b158:	4413      	add	r3, r2
 800b15a:	3338      	adds	r3, #56	; 0x38
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	015b      	lsls	r3, r3, #5
 800b166:	4413      	add	r3, r2
 800b168:	333c      	adds	r3, #60	; 0x3c
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	3302      	adds	r3, #2
 800b174:	015b      	lsls	r3, r3, #5
 800b176:	4413      	add	r3, r2
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	3301      	adds	r3, #1
 800b180:	73fb      	strb	r3, [r7, #15]
 800b182:	7bfa      	ldrb	r2, [r7, #15]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d3c4      	bcc.n	800b116 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
 800b190:	e031      	b.n	800b1f6 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	015b      	lsls	r3, r3, #5
 800b198:	4413      	add	r3, r2
 800b19a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800b19e:	2200      	movs	r2, #0
 800b1a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	015b      	lsls	r3, r3, #5
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b1ae:	7bfa      	ldrb	r2, [r7, #15]
 800b1b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	015b      	lsls	r3, r3, #5
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800b1be:	2200      	movs	r2, #0
 800b1c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	015b      	lsls	r3, r3, #5
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	015b      	lsls	r3, r3, #5
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	330a      	adds	r3, #10
 800b1e8:	015b      	lsls	r3, r3, #5
 800b1ea:	4413      	add	r3, r2
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	73fb      	strb	r3, [r7, #15]
 800b1f6:	7bfa      	ldrb	r2, [r7, #15]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d3c8      	bcc.n	800b192 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	603b      	str	r3, [r7, #0]
 800b206:	687e      	ldr	r6, [r7, #4]
 800b208:	466d      	mov	r5, sp
 800b20a:	f106 0410 	add.w	r4, r6, #16
 800b20e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	1d33      	adds	r3, r6, #4
 800b218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b21a:	6838      	ldr	r0, [r7, #0]
 800b21c:	f004 fb3a 	bl	800f894 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d102      	bne.n	800b23e <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fe7b 	bl	800bf34 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b248 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b256:	2b01      	cmp	r3, #1
 800b258:	d101      	bne.n	800b25e <HAL_PCD_Start+0x16>
 800b25a:	2302      	movs	r3, #2
 800b25c:	e012      	b.n	800b284 <HAL_PCD_Start+0x3c>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f005 fd21 	bl	8010cb2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f004 fad9 	bl	800f82c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d101      	bne.n	800b2a2 <HAL_PCD_Stop+0x16>
 800b29e:	2302      	movs	r3, #2
 800b2a0:	e012      	b.n	800b2c8 <HAL_PCD_Stop+0x3c>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f004 fad5 	bl	800f85e <USB_DisableGlobalInt>

  (void)USB_StopDevice(hpcd->Instance);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f005 fccf 	bl	8010c5c <USB_StopDevice>

  __HAL_UNLOCK(hpcd);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f005 fcff 	bl	8010ce0 <USB_ReadInterrupts>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2ec:	d102      	bne.n	800b2f4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fb33 	bl	800b95a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f005 fcf1 	bl	8010ce0 <USB_ReadInterrupts>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b308:	d112      	bne.n	800b330 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b312:	b29a      	uxth	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b31c:	b292      	uxth	r2, r2
 800b31e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f00f fb0d 	bl	801a942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b328:	2100      	movs	r1, #0
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f91e 	bl	800b56c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f005 fcd3 	bl	8010ce0 <USB_ReadInterrupts>
 800b33a:	4603      	mov	r3, r0
 800b33c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b344:	d10b      	bne.n	800b35e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b34e:	b29a      	uxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b358:	b292      	uxth	r2, r2
 800b35a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f005 fcbc 	bl	8010ce0 <USB_ReadInterrupts>
 800b368:	4603      	mov	r3, r0
 800b36a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b36e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b372:	d10b      	bne.n	800b38c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b386:	b292      	uxth	r2, r2
 800b388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	f005 fca5 	bl	8010ce0 <USB_ReadInterrupts>
 800b396:	4603      	mov	r3, r0
 800b398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b39c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a0:	d133      	bne.n	800b40a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f022 0204 	bic.w	r2, r2, #4
 800b3b4:	b292      	uxth	r2, r2
 800b3b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f022 0208 	bic.w	r2, r2, #8
 800b3cc:	b292      	uxth	r2, r2
 800b3ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d107      	bne.n	800b3ec <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f00f fcb6 	bl	801ad58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f00f fae1 	bl	801a9b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b404:	b292      	uxth	r2, r2
 800b406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4618      	mov	r0, r3
 800b410:	f005 fc66 	bl	8010ce0 <USB_ReadInterrupts>
 800b414:	4603      	mov	r3, r0
 800b416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b41a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b41e:	d126      	bne.n	800b46e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b428:	b29a      	uxth	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f042 0208 	orr.w	r2, r2, #8
 800b432:	b292      	uxth	r2, r2
 800b434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b440:	b29a      	uxth	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b44a:	b292      	uxth	r2, r2
 800b44c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b458:	b29a      	uxth	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f042 0204 	orr.w	r2, r2, #4
 800b462:	b292      	uxth	r2, r2
 800b464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f00f fa89 	bl	801a980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4618      	mov	r0, r3
 800b474:	f005 fc34 	bl	8010ce0 <USB_ReadInterrupts>
 800b478:	4603      	mov	r3, r0
 800b47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47e:	2b80      	cmp	r3, #128	; 0x80
 800b480:	d13f      	bne.n	800b502 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b494:	b292      	uxth	r2, r2
 800b496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d12b      	bne.n	800b4fc <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f042 0204 	orr.w	r2, r2, #4
 800b4b6:	b292      	uxth	r2, r2
 800b4b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f042 0208 	orr.w	r2, r2, #8
 800b4ce:	b292      	uxth	r2, r2
 800b4d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	089b      	lsrs	r3, r3, #2
 800b4e8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f00f fc2f 	bl	801ad58 <HAL_PCDEx_LPM_Callback>
 800b4fa:	e002      	b.n	800b502 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f00f fa3f 	bl	801a980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f005 fbea 	bl	8010ce0 <USB_ReadInterrupts>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b516:	d10e      	bne.n	800b536 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b520:	b29a      	uxth	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b52a:	b292      	uxth	r2, r2
 800b52c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f00f f9f8 	bl	801a926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f005 fbd0 	bl	8010ce0 <USB_ReadInterrupts>
 800b540:	4603      	mov	r3, r0
 800b542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b54a:	d10b      	bne.n	800b564 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b55e:	b292      	uxth	r2, r2
 800b560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800b564:	bf00      	nop
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d101      	bne.n	800b586 <HAL_PCD_SetAddress+0x1a>
 800b582:	2302      	movs	r3, #2
 800b584:	e013      	b.n	800b5ae <HAL_PCD_SetAddress+0x42>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	78fa      	ldrb	r2, [r7, #3]
 800b592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	78fa      	ldrb	r2, [r7, #3]
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f005 fb73 	bl	8010c8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	4608      	mov	r0, r1
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	70fb      	strb	r3, [r7, #3]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	803b      	strh	r3, [r7, #0]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b5d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	da0b      	bge.n	800b5f4 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5dc:	78fb      	ldrb	r3, [r7, #3]
 800b5de:	f003 0307 	and.w	r3, r3, #7
 800b5e2:	015b      	lsls	r3, r3, #5
 800b5e4:	3328      	adds	r3, #40	; 0x28
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	705a      	strb	r2, [r3, #1]
 800b5f2:	e00b      	b.n	800b60c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5f4:	78fb      	ldrb	r3, [r7, #3]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	015b      	lsls	r3, r3, #5
 800b5fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	4413      	add	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	f003 0307 	and.w	r3, r3, #7
 800b612:	b2da      	uxtb	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b618:	883a      	ldrh	r2, [r7, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	78ba      	ldrb	r2, [r7, #2]
 800b622:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d004      	beq.n	800b636 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	b29a      	uxth	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b636:	78bb      	ldrb	r3, [r7, #2]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d102      	bne.n	800b642 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2200      	movs	r2, #0
 800b640:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d101      	bne.n	800b650 <HAL_PCD_EP_Open+0x9a>
 800b64c:	2302      	movs	r3, #2
 800b64e:	e00e      	b.n	800b66e <HAL_PCD_EP_Open+0xb8>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68f9      	ldr	r1, [r7, #12]
 800b65e:	4618      	mov	r0, r3
 800b660:	f004 f93c 	bl	800f8dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800b66c:	7afb      	ldrb	r3, [r7, #11]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b686:	2b00      	cmp	r3, #0
 800b688:	da0b      	bge.n	800b6a2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	015b      	lsls	r3, r3, #5
 800b692:	3328      	adds	r3, #40	; 0x28
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	4413      	add	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2201      	movs	r2, #1
 800b69e:	705a      	strb	r2, [r3, #1]
 800b6a0:	e00b      	b.n	800b6ba <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6a2:	78fb      	ldrb	r3, [r7, #3]
 800b6a4:	f003 0307 	and.w	r3, r3, #7
 800b6a8:	015b      	lsls	r3, r3, #5
 800b6aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b6ba:	78fb      	ldrb	r3, [r7, #3]
 800b6bc:	f003 0307 	and.w	r3, r3, #7
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d101      	bne.n	800b6d4 <HAL_PCD_EP_Close+0x5e>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	e00e      	b.n	800b6f2 <HAL_PCD_EP_Close+0x7c>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68f9      	ldr	r1, [r7, #12]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f004 fca8 	bl	8010038 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b086      	sub	sp, #24
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
 800b706:	460b      	mov	r3, r1
 800b708:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b70a:	7afb      	ldrb	r3, [r7, #11]
 800b70c:	f003 0307 	and.w	r3, r3, #7
 800b710:	015b      	lsls	r3, r3, #5
 800b712:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2200      	movs	r2, #0
 800b72c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2200      	movs	r2, #0
 800b732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b734:	7afb      	ldrb	r3, [r7, #11]
 800b736:	f003 0307 	and.w	r3, r3, #7
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	2b00      	cmp	r3, #0
 800b748:	d106      	bne.n	800b758 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6979      	ldr	r1, [r7, #20]
 800b750:	4618      	mov	r0, r3
 800b752:	f004 fe5e 	bl	8010412 <USB_EPStartXfer>
 800b756:	e005      	b.n	800b764 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6979      	ldr	r1, [r7, #20]
 800b75e:	4618      	mov	r0, r3
 800b760:	f004 fe57 	bl	8010412 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b76e:	b480      	push	{r7}
 800b770:	b083      	sub	sp, #12
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	460b      	mov	r3, r1
 800b778:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	f003 0307 	and.w	r3, r3, #7
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	330a      	adds	r3, #10
 800b784:	015b      	lsls	r3, r3, #5
 800b786:	4413      	add	r3, r2
 800b788:	3304      	adds	r3, #4
 800b78a:	681b      	ldr	r3, [r3, #0]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7a8:	7afb      	ldrb	r3, [r7, #11]
 800b7aa:	f003 0307 	and.w	r3, r3, #7
 800b7ae:	015b      	lsls	r3, r3, #5
 800b7b0:	3328      	adds	r3, #40	; 0x28
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b7dc:	7afb      	ldrb	r3, [r7, #11]
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6979      	ldr	r1, [r7, #20]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f004 fe10 	bl	8010412 <USB_EPStartXfer>
 800b7f2:	e005      	b.n	800b800 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6979      	ldr	r1, [r7, #20]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f004 fe09 	bl	8010412 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	460b      	mov	r3, r1
 800b814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	f003 0207 	and.w	r2, r3, #7
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d901      	bls.n	800b828 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	e046      	b.n	800b8b6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	da0b      	bge.n	800b848 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	015b      	lsls	r3, r3, #5
 800b838:	3328      	adds	r3, #40	; 0x28
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	4413      	add	r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2201      	movs	r2, #1
 800b844:	705a      	strb	r2, [r3, #1]
 800b846:	e009      	b.n	800b85c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b848:	78fb      	ldrb	r3, [r7, #3]
 800b84a:	015b      	lsls	r3, r3, #5
 800b84c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	4413      	add	r3, r2
 800b854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2201      	movs	r2, #1
 800b860:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b862:	78fb      	ldrb	r3, [r7, #3]
 800b864:	f003 0307 	and.w	r3, r3, #7
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <HAL_PCD_EP_SetStall+0x72>
 800b878:	2302      	movs	r3, #2
 800b87a:	e01c      	b.n	800b8b6 <HAL_PCD_EP_SetStall+0xac>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f005 f8e7 	bl	8010a5e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b890:	78fb      	ldrb	r3, [r7, #3]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	2b00      	cmp	r3, #0
 800b898:	d108      	bne.n	800b8ac <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	f005 fa2a 	bl	8010d00 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	f003 020f 	and.w	r2, r3, #15
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d901      	bls.n	800b8dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e03a      	b.n	800b952 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da0b      	bge.n	800b8fc <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	015b      	lsls	r3, r3, #5
 800b8ec:	3328      	adds	r3, #40	; 0x28
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	705a      	strb	r2, [r3, #1]
 800b8fa:	e00b      	b.n	800b914 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	015b      	lsls	r3, r3, #5
 800b904:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	4413      	add	r3, r2
 800b90c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b91a:	78fb      	ldrb	r3, [r7, #3]
 800b91c:	f003 0307 	and.w	r3, r3, #7
 800b920:	b2da      	uxtb	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d101      	bne.n	800b934 <HAL_PCD_EP_ClrStall+0x76>
 800b930:	2302      	movs	r3, #2
 800b932:	e00e      	b.n	800b952 <HAL_PCD_EP_ClrStall+0x94>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68f9      	ldr	r1, [r7, #12]
 800b942:	4618      	mov	r0, r3
 800b944:	f005 f8dc 	bl	8010b00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b08e      	sub	sp, #56	; 0x38
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b962:	e29c      	b.n	800be9e <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b96c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b96e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b970:	b2db      	uxtb	r3, r3
 800b972:	f003 030f 	and.w	r3, r3, #15
 800b976:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800b97a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f040 8152 	bne.w	800bc28 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b984:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b986:	f003 0310 	and.w	r3, r3, #16
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d150      	bne.n	800ba30 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	b29b      	uxth	r3, r3
 800b996:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b99e:	81fb      	strh	r3, [r7, #14]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	89fb      	ldrh	r3, [r7, #14]
 800b9a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3328      	adds	r3, #40	; 0x28
 800b9b6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	6812      	ldr	r2, [r2, #0]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	695a      	ldr	r2, [r3, #20]
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	441a      	add	r2, r3
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f00e ff81 	bl	801a8f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 824d 	beq.w	800be9e <PCD_EP_ISR_Handler+0x544>
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f040 8248 	bne.w	800be9e <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	b292      	uxth	r2, r2
 800ba22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ba2e:	e236      	b.n	800be9e <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba36:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ba40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d032      	beq.n	800bab0 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	461a      	mov	r2, r3
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	4413      	add	r3, r2
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	4413      	add	r3, r2
 800ba64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	f005 f988 	bl	8010d9a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	f640 738f 	movw	r3, #3983	; 0xf8f
 800ba96:	4013      	ands	r3, r2
 800ba98:	823b      	strh	r3, [r7, #16]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	8a3a      	ldrh	r2, [r7, #16]
 800baa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800baa4:	b292      	uxth	r2, r2
 800baa6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f00e fefb 	bl	801a8a4 <HAL_PCD_SetupStageCallback>
 800baae:	e1f6      	b.n	800be9e <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bab0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f280 81f2 	bge.w	800be9e <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bac6:	4013      	ands	r3, r2
 800bac8:	83fb      	strh	r3, [r7, #30]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	8bfa      	ldrh	r2, [r7, #30]
 800bad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bad4:	b292      	uxth	r2, r2
 800bad6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	461a      	mov	r2, r3
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	4413      	add	r3, r2
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	6812      	ldr	r2, [r2, #0]
 800baf0:	4413      	add	r3, r2
 800baf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	69db      	ldr	r3, [r3, #28]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d019      	beq.n	800bb3c <PCD_EP_ISR_Handler+0x1e2>
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d015      	beq.n	800bb3c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	6959      	ldr	r1, [r3, #20]
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	f005 f93a 	bl	8010d9a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	695a      	ldr	r2, [r3, #20]
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	441a      	add	r2, r3
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bb34:	2100      	movs	r1, #0
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f00e fec6 	bl	801a8c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	61bb      	str	r3, [r7, #24]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	4413      	add	r3, r2
 800bb52:	61bb      	str	r3, [r7, #24]
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d112      	bne.n	800bb8a <PCD_EP_ISR_Handler+0x230>
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	801a      	strh	r2, [r3, #0]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	801a      	strh	r2, [r3, #0]
 800bb88:	e02f      	b.n	800bbea <PCD_EP_ISR_Handler+0x290>
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	2b3e      	cmp	r3, #62	; 0x3e
 800bb90:	d813      	bhi.n	800bbba <PCD_EP_ISR_Handler+0x260>
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	085b      	lsrs	r3, r3, #1
 800bb98:	633b      	str	r3, [r7, #48]	; 0x30
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <PCD_EP_ISR_Handler+0x252>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	3301      	adds	r3, #1
 800bbaa:	633b      	str	r3, [r7, #48]	; 0x30
 800bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	029b      	lsls	r3, r3, #10
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	801a      	strh	r2, [r3, #0]
 800bbb8:	e017      	b.n	800bbea <PCD_EP_ISR_Handler+0x290>
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	095b      	lsrs	r3, r3, #5
 800bbc0:	633b      	str	r3, [r7, #48]	; 0x30
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f003 031f 	and.w	r3, r3, #31
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <PCD_EP_ISR_Handler+0x27a>
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	029b      	lsls	r3, r3, #10
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfa:	827b      	strh	r3, [r7, #18]
 800bbfc:	8a7b      	ldrh	r3, [r7, #18]
 800bbfe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc02:	827b      	strh	r3, [r7, #18]
 800bc04:	8a7b      	ldrh	r3, [r7, #18]
 800bc06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc0a:	827b      	strh	r3, [r7, #18]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	8a7b      	ldrh	r3, [r7, #18]
 800bc12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	8013      	strh	r3, [r2, #0]
 800bc26:	e13a      	b.n	800be9e <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bc3a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f280 80d6 	bge.w	800bdf0 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	853b      	strh	r3, [r7, #40]	; 0x28
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4413      	add	r3, r2
 800bc6c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bc6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc72:	b292      	uxth	r2, r2
 800bc74:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800bc76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc7a:	015b      	lsls	r3, r3, #5
 800bc7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 800bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc88:	7b1b      	ldrb	r3, [r3, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d11f      	bne.n	800bcce <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	461a      	mov	r2, r3
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	4413      	add	r3, r2
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	4413      	add	r3, r2
 800bca8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcb2:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 800bcb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d075      	beq.n	800bda6 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	6959      	ldr	r1, [r3, #20]
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	88da      	ldrh	r2, [r3, #6]
 800bcc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcc8:	f005 f867 	bl	8010d9a <USB_ReadPMA>
 800bccc:	e06b      	b.n	800bda6 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce8:	847b      	strh	r3, [r7, #34]	; 0x22
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	441a      	add	r2, r3
 800bcf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d01f      	beq.n	800bd68 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	461a      	mov	r2, r3
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	4413      	add	r3, r2
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	6812      	ldr	r2, [r2, #0]
 800bd40:	4413      	add	r3, r2
 800bd42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd4c:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 800bd4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d028      	beq.n	800bda6 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	6959      	ldr	r1, [r3, #20]
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	891a      	ldrh	r2, [r3, #8]
 800bd60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd62:	f005 f81a 	bl	8010d9a <USB_ReadPMA>
 800bd66:	e01e      	b.n	800bda6 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	00db      	lsls	r3, r3, #3
 800bd7a:	4413      	add	r3, r2
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	6812      	ldr	r2, [r2, #0]
 800bd80:	4413      	add	r3, r2
 800bd82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd8c:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 800bd8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d008      	beq.n	800bda6 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	6959      	ldr	r1, [r3, #20]
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9e:	895a      	ldrh	r2, [r3, #10]
 800bda0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bda2:	f004 fffa 	bl	8010d9a <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda8:	69da      	ldr	r2, [r3, #28]
 800bdaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdac:	441a      	add	r2, r3
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	695a      	ldr	r2, [r3, #20]
 800bdb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdb8:	441a      	add	r2, r3
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d004      	beq.n	800bdd0 <PCD_EP_ISR_Handler+0x476>
 800bdc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d206      	bcs.n	800bdde <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f00e fd76 	bl	801a8c8 <HAL_PCD_DataOutStageCallback>
 800bddc:	e008      	b.n	800bdf0 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	7819      	ldrb	r1, [r3, #0]
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	695a      	ldr	r2, [r3, #20]
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7ff fc85 	bl	800b6fa <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bdf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bdf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d051      	beq.n	800be9e <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 800bdfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bdfe:	015b      	lsls	r3, r3, #5
 800be00:	3328      	adds	r3, #40	; 0x28
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	4413      	add	r3, r2
 800be06:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	461a      	mov	r2, r3
 800be0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800be1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be22:	843b      	strh	r3, [r7, #32]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	441a      	add	r2, r3
 800be32:	8c3b      	ldrh	r3, [r7, #32]
 800be34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be48:	b29b      	uxth	r3, r3
 800be4a:	461a      	mov	r2, r3
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	4413      	add	r3, r2
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	6812      	ldr	r2, [r2, #0]
 800be58:	4413      	add	r3, r2
 800be5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	695a      	ldr	r2, [r3, #20]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	69db      	ldr	r3, [r3, #28]
 800be70:	441a      	add	r2, r3
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f00e fd37 	bl	801a8f8 <HAL_PCD_DataInStageCallback>
 800be8a:	e008      	b.n	800be9e <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8e:	7819      	ldrb	r1, [r3, #0]
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	695a      	ldr	r2, [r3, #20]
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7ff fc7d 	bl	800b798 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	b21b      	sxth	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f6ff ad5a 	blt.w	800b964 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3738      	adds	r7, #56	; 0x38
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800beba:	b480      	push	{r7}
 800bebc:	b087      	sub	sp, #28
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	60f8      	str	r0, [r7, #12]
 800bec2:	607b      	str	r3, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	817b      	strh	r3, [r7, #10]
 800bec8:	4613      	mov	r3, r2
 800beca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800becc:	897b      	ldrh	r3, [r7, #10]
 800bece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d008      	beq.n	800beea <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bed8:	897b      	ldrh	r3, [r7, #10]
 800beda:	f003 0307 	and.w	r3, r3, #7
 800bede:	015b      	lsls	r3, r3, #5
 800bee0:	3328      	adds	r3, #40	; 0x28
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	4413      	add	r3, r2
 800bee6:	617b      	str	r3, [r7, #20]
 800bee8:	e006      	b.n	800bef8 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800beea:	897b      	ldrh	r3, [r7, #10]
 800beec:	015b      	lsls	r3, r3, #5
 800beee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	4413      	add	r3, r2
 800bef6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bef8:	893b      	ldrh	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d107      	bne.n	800bf0e <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2200      	movs	r2, #0
 800bf02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	80da      	strh	r2, [r3, #6]
 800bf0c:	e00b      	b.n	800bf26 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2201      	movs	r2, #1
 800bf12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	0c1b      	lsrs	r3, r3, #16
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	371c      	adds	r7, #28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	f043 0301 	orr.w	r3, r3, #1
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	f043 0302 	orr.w	r3, r3, #2
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf8c:	4b05      	ldr	r3, [pc, #20]	; (800bfa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a04      	ldr	r2, [pc, #16]	; (800bfa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bf92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf96:	6013      	str	r3, [r2, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	58000400 	.word	0x58000400

0800bfa8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bfac:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <HAL_PWREx_GetVoltageRange+0x18>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	58000400 	.word	0x58000400

0800bfc4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bfc8:	4b05      	ldr	r3, [pc, #20]	; (800bfe0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	4a04      	ldr	r2, [pc, #16]	; (800bfe0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bfce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bfd2:	6053      	str	r3, [r2, #4]
}
 800bfd4:	bf00      	nop
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	58000400 	.word	0x58000400

0800bfe4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bfe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bff6:	d101      	bne.n	800bffc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bff8:	2301      	movs	r3, #1
 800bffa:	e000      	b.n	800bffe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <LL_RCC_HSE_Enable>:
{
 800c008:	b480      	push	{r7}
 800c00a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c00c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c01a:	6013      	str	r3, [r2, #0]
}
 800c01c:	bf00      	nop
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <LL_RCC_HSE_Disable>:
{
 800c026:	b480      	push	{r7}
 800c028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800c02a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c038:	6013      	str	r3, [r2, #0]
}
 800c03a:	bf00      	nop
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <LL_RCC_HSE_IsReady>:
{
 800c044:	b480      	push	{r7}
 800c046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c056:	d101      	bne.n	800c05c <LL_RCC_HSE_IsReady+0x18>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <LL_RCC_HSE_IsReady+0x1a>
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <LL_RCC_HSI_Enable>:
{
 800c068:	b480      	push	{r7}
 800c06a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c06c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c07a:	6013      	str	r3, [r2, #0]
}
 800c07c:	bf00      	nop
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <LL_RCC_HSI_Disable>:
{
 800c086:	b480      	push	{r7}
 800c088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c08a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c098:	6013      	str	r3, [r2, #0]
}
 800c09a:	bf00      	nop
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <LL_RCC_HSI_IsReady>:
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c0a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0b6:	d101      	bne.n	800c0bc <LL_RCC_HSI_IsReady+0x18>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e000      	b.n	800c0be <LL_RCC_HSI_IsReady+0x1a>
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <LL_RCC_HSI_SetCalibTrimming>:
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c0d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	061b      	lsls	r3, r3, #24
 800c0de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	604b      	str	r3, [r1, #4]
}
 800c0e6:	bf00      	nop
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <LL_RCC_HSI48_Enable>:
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c0f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c102:	f043 0301 	orr.w	r3, r3, #1
 800c106:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c10a:	bf00      	nop
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <LL_RCC_HSI48_Disable>:
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c11c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c124:	f023 0301 	bic.w	r3, r3, #1
 800c128:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c12c:	bf00      	nop
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <LL_RCC_HSI48_IsReady>:
{
 800c136:	b480      	push	{r7}
 800c138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c13a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c13e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c142:	f003 0302 	and.w	r3, r3, #2
 800c146:	2b02      	cmp	r3, #2
 800c148:	d101      	bne.n	800c14e <LL_RCC_HSI48_IsReady+0x18>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e000      	b.n	800c150 <LL_RCC_HSI48_IsReady+0x1a>
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <LL_RCC_LSE_Enable>:
{
 800c15a:	b480      	push	{r7}
 800c15c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c15e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c16a:	f043 0301 	orr.w	r3, r3, #1
 800c16e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c172:	bf00      	nop
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <LL_RCC_LSE_Disable>:
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c18c:	f023 0301 	bic.w	r3, r3, #1
 800c190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <LL_RCC_LSE_EnableBypass>:
{
 800c19e:	b480      	push	{r7}
 800c1a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c1a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1ae:	f043 0304 	orr.w	r3, r3, #4
 800c1b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c1b6:	bf00      	nop
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <LL_RCC_LSE_DisableBypass>:
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c1c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1d0:	f023 0304 	bic.w	r3, r3, #4
 800c1d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c1d8:	bf00      	nop
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <LL_RCC_LSE_IsReady>:
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c1e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ee:	f003 0302 	and.w	r3, r3, #2
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d101      	bne.n	800c1fa <LL_RCC_LSE_IsReady+0x18>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e000      	b.n	800c1fc <LL_RCC_LSE_IsReady+0x1a>
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <LL_RCC_LSI1_Enable>:
{
 800c206:	b480      	push	{r7}
 800c208:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c20a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c20e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c216:	f043 0301 	orr.w	r3, r3, #1
 800c21a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c21e:	bf00      	nop
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <LL_RCC_LSI1_Disable>:
{
 800c228:	b480      	push	{r7}
 800c22a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c22c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c238:	f023 0301 	bic.w	r3, r3, #1
 800c23c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c240:	bf00      	nop
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <LL_RCC_LSI1_IsReady>:
{
 800c24a:	b480      	push	{r7}
 800c24c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c24e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d101      	bne.n	800c262 <LL_RCC_LSI1_IsReady+0x18>
 800c25e:	2301      	movs	r3, #1
 800c260:	e000      	b.n	800c264 <LL_RCC_LSI1_IsReady+0x1a>
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <LL_RCC_LSI2_Enable>:
{
 800c26e:	b480      	push	{r7}
 800c270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c27a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c27e:	f043 0304 	orr.w	r3, r3, #4
 800c282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c286:	bf00      	nop
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <LL_RCC_LSI2_Disable>:
{
 800c290:	b480      	push	{r7}
 800c292:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c29c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c2a0:	f023 0304 	bic.w	r3, r3, #4
 800c2a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c2a8:	bf00      	nop
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <LL_RCC_LSI2_IsReady>:
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c2b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2be:	f003 0308 	and.w	r3, r3, #8
 800c2c2:	2b08      	cmp	r3, #8
 800c2c4:	d101      	bne.n	800c2ca <LL_RCC_LSI2_IsReady+0x18>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e000      	b.n	800c2cc <LL_RCC_LSI2_IsReady+0x1a>
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <LL_RCC_LSI2_SetTrimming>:
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b083      	sub	sp, #12
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c2de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	021b      	lsls	r3, r3, #8
 800c2ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <LL_RCC_MSI_Enable>:
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c312:	f043 0301 	orr.w	r3, r3, #1
 800c316:	6013      	str	r3, [r2, #0]
}
 800c318:	bf00      	nop
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <LL_RCC_MSI_Disable>:
{
 800c322:	b480      	push	{r7}
 800c324:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c330:	f023 0301 	bic.w	r3, r3, #1
 800c334:	6013      	str	r3, [r2, #0]
}
 800c336:	bf00      	nop
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <LL_RCC_MSI_IsReady>:
{
 800c340:	b480      	push	{r7}
 800c342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0302 	and.w	r3, r3, #2
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d101      	bne.n	800c356 <LL_RCC_MSI_IsReady+0x16>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <LL_RCC_MSI_IsReady+0x18>
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <LL_RCC_MSI_SetRange>:
{
 800c362:	b480      	push	{r7}
 800c364:	b083      	sub	sp, #12
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c36a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	600b      	str	r3, [r1, #0]
}
 800c37e:	bf00      	nop
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <LL_RCC_MSI_GetRange>:
{
 800c38a:	b480      	push	{r7}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c39a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2bb0      	cmp	r3, #176	; 0xb0
 800c3a0:	d901      	bls.n	800c3a6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c3a2:	23b0      	movs	r3, #176	; 0xb0
 800c3a4:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c3a6:	687b      	ldr	r3, [r7, #4]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c3bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	021b      	lsls	r3, r3, #8
 800c3ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	604b      	str	r3, [r1, #4]
}
 800c3d2:	bf00      	nop
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <LL_RCC_SetSysClkSource>:
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c3e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f023 0203 	bic.w	r2, r3, #3
 800c3f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	608b      	str	r3, [r1, #8]
}
 800c3fa:	bf00      	nop
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <LL_RCC_GetSysClkSource>:
{
 800c406:	b480      	push	{r7}
 800c408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c40a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f003 030c 	and.w	r3, r3, #12
}
 800c414:	4618      	mov	r0, r3
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <LL_RCC_SetAHBPrescaler>:
{
 800c41e:	b480      	push	{r7}
 800c420:	b083      	sub	sp, #12
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4313      	orrs	r3, r2
 800c438:	608b      	str	r3, [r1, #8]
}
 800c43a:	bf00      	nop
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c44e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c452:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c45a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4313      	orrs	r3, r2
 800c462:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c466:	bf00      	nop
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <LL_RCC_SetAHB4Prescaler>:
{
 800c472:	b480      	push	{r7}
 800c474:	b083      	sub	sp, #12
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c47a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c47e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c482:	f023 020f 	bic.w	r2, r3, #15
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	091b      	lsrs	r3, r3, #4
 800c48a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c48e:	4313      	orrs	r3, r2
 800c490:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <LL_RCC_SetAPB1Prescaler>:
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c4a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c4b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	608b      	str	r3, [r1, #8]
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <LL_RCC_SetAPB2Prescaler>:
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c4d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c4da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	608b      	str	r3, [r1, #8]
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <LL_RCC_GetAHBPrescaler>:
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c4f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <LL_C2_RCC_GetAHBPrescaler>:
{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800c50c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c510:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <LL_RCC_GetAHB4Prescaler>:
{
 800c522:	b480      	push	{r7}
 800c524:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c52a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c52e:	011b      	lsls	r3, r3, #4
 800c530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c534:	4618      	mov	r0, r3
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <LL_RCC_GetAPB1Prescaler>:
{
 800c53e:	b480      	push	{r7}
 800c540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <LL_RCC_GetAPB2Prescaler>:
{
 800c556:	b480      	push	{r7}
 800c558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c55a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800c564:	4618      	mov	r0, r3
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c56e:	b480      	push	{r7}
 800c570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c57c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c580:	6013      	str	r3, [r2, #0]
}
 800c582:	bf00      	nop
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c59a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c59e:	6013      	str	r3, [r2, #0]
}
 800c5a0:	bf00      	nop
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c5ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5bc:	d101      	bne.n	800c5c2 <LL_RCC_PLL_IsReady+0x18>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e000      	b.n	800c5c4 <LL_RCC_PLL_IsReady+0x1a>
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c5d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	0a1b      	lsrs	r3, r3, #8
 800c5da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c5ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c600:	b480      	push	{r7}
 800c602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c60e:	4618      	mov	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c618:	b480      	push	{r7}
 800c61a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c61c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f003 0303 	and.w	r3, r3, #3
}
 800c626:	4618      	mov	r0, r3
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c630:	b480      	push	{r7}
 800c632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c63e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c642:	d101      	bne.n	800c648 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c644:	2301      	movs	r3, #1
 800c646:	e000      	b.n	800c64a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c654:	b480      	push	{r7}
 800c656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c65c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c668:	d101      	bne.n	800c66e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c66a:	2301      	movs	r3, #1
 800c66c:	e000      	b.n	800c670 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c67a:	b480      	push	{r7}
 800c67c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c67e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c682:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c68e:	d101      	bne.n	800c694 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c6a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6b2:	d101      	bne.n	800c6b8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e000      	b.n	800c6ba <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c6c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6d6:	d101      	bne.n	800c6dc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e000      	b.n	800c6de <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c6e8:	b590      	push	{r4, r7, lr}
 800c6ea:	b08d      	sub	sp, #52	; 0x34
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d101      	bne.n	800c6fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e37e      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0320 	and.w	r3, r3, #32
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 8092 	beq.w	800c82c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c708:	f7ff fe7d 	bl	800c406 <LL_RCC_GetSysClkSource>
 800c70c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c70e:	f7ff ff83 	bl	800c618 <LL_RCC_PLL_GetMainSource>
 800c712:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	2b00      	cmp	r3, #0
 800c718:	d005      	beq.n	800c726 <HAL_RCC_OscConfig+0x3e>
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	2b0c      	cmp	r3, #12
 800c71e:	d14c      	bne.n	800c7ba <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	2b01      	cmp	r3, #1
 800c724:	d149      	bne.n	800c7ba <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c726:	f7ff fe0b 	bl	800c340 <LL_RCC_MSI_IsReady>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d005      	beq.n	800c73c <HAL_RCC_OscConfig+0x54>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e35d      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c740:	f7ff fe23 	bl	800c38a <LL_RCC_MSI_GetRange>
 800c744:	4603      	mov	r3, r0
 800c746:	429c      	cmp	r4, r3
 800c748:	d914      	bls.n	800c774 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fd5c 	bl	800d20c <RCC_SetFlashLatencyFromMSIRange>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e34c      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fdfd 	bl	800c362 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff fe21 	bl	800c3b4 <LL_RCC_MSI_SetCalibTrimming>
 800c772:	e013      	b.n	800c79c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c778:	4618      	mov	r0, r3
 800c77a:	f7ff fdf2 	bl	800c362 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff fe16 	bl	800c3b4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 fd3d 	bl	800d20c <RCC_SetFlashLatencyFromMSIRange>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e32d      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c79c:	f000 fcda 	bl	800d154 <HAL_RCC_GetHCLKFreq>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	4bb3      	ldr	r3, [pc, #716]	; (800ca70 <HAL_RCC_OscConfig+0x388>)
 800c7a4:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c7a6:	4bb3      	ldr	r3, [pc, #716]	; (800ca74 <HAL_RCC_OscConfig+0x38c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7f8 ff68 	bl	8005680 <HAL_InitTick>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d039      	beq.n	800c82a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e31e      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d01e      	beq.n	800c800 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c7c2:	f7ff fd9f 	bl	800c304 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c7c6:	f7fa f8af 	bl	8006928 <HAL_GetTick>
 800c7ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c7cc:	e008      	b.n	800c7e0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c7ce:	f7fa f8ab 	bl	8006928 <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d901      	bls.n	800c7e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e30b      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c7e0:	f7ff fdae 	bl	800c340 <LL_RCC_MSI_IsReady>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d0f1      	beq.n	800c7ce <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff fdb7 	bl	800c362 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff fddb 	bl	800c3b4 <LL_RCC_MSI_SetCalibTrimming>
 800c7fe:	e015      	b.n	800c82c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c800:	f7ff fd8f 	bl	800c322 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c804:	f7fa f890 	bl	8006928 <HAL_GetTick>
 800c808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c80a:	e008      	b.n	800c81e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c80c:	f7fa f88c 	bl	8006928 <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b02      	cmp	r3, #2
 800c818:	d901      	bls.n	800c81e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e2ec      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c81e:	f7ff fd8f 	bl	800c340 <LL_RCC_MSI_IsReady>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1f1      	bne.n	800c80c <HAL_RCC_OscConfig+0x124>
 800c828:	e000      	b.n	800c82c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c82a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d04e      	beq.n	800c8d6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c838:	f7ff fde5 	bl	800c406 <LL_RCC_GetSysClkSource>
 800c83c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c83e:	f7ff feeb 	bl	800c618 <LL_RCC_PLL_GetMainSource>
 800c842:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	2b08      	cmp	r3, #8
 800c848:	d005      	beq.n	800c856 <HAL_RCC_OscConfig+0x16e>
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	2b0c      	cmp	r3, #12
 800c84e:	d10d      	bne.n	800c86c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	2b03      	cmp	r3, #3
 800c854:	d10a      	bne.n	800c86c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c856:	f7ff fbf5 	bl	800c044 <LL_RCC_HSE_IsReady>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d039      	beq.n	800c8d4 <HAL_RCC_OscConfig+0x1ec>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d135      	bne.n	800c8d4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e2c5      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c874:	d102      	bne.n	800c87c <HAL_RCC_OscConfig+0x194>
 800c876:	f7ff fbc7 	bl	800c008 <LL_RCC_HSE_Enable>
 800c87a:	e001      	b.n	800c880 <HAL_RCC_OscConfig+0x198>
 800c87c:	f7ff fbd3 	bl	800c026 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d012      	beq.n	800c8ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c888:	f7fa f84e 	bl	8006928 <HAL_GetTick>
 800c88c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c88e:	e008      	b.n	800c8a2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c890:	f7fa f84a 	bl	8006928 <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b64      	cmp	r3, #100	; 0x64
 800c89c:	d901      	bls.n	800c8a2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e2aa      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c8a2:	f7ff fbcf 	bl	800c044 <LL_RCC_HSE_IsReady>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d0f1      	beq.n	800c890 <HAL_RCC_OscConfig+0x1a8>
 800c8ac:	e013      	b.n	800c8d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ae:	f7fa f83b 	bl	8006928 <HAL_GetTick>
 800c8b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c8b4:	e008      	b.n	800c8c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8b6:	f7fa f837 	bl	8006928 <HAL_GetTick>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	2b64      	cmp	r3, #100	; 0x64
 800c8c2:	d901      	bls.n	800c8c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e297      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c8c8:	f7ff fbbc 	bl	800c044 <LL_RCC_HSE_IsReady>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1f1      	bne.n	800c8b6 <HAL_RCC_OscConfig+0x1ce>
 800c8d2:	e000      	b.n	800c8d6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 0302 	and.w	r3, r3, #2
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d051      	beq.n	800c986 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8e2:	f7ff fd90 	bl	800c406 <LL_RCC_GetSysClkSource>
 800c8e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c8e8:	f7ff fe96 	bl	800c618 <LL_RCC_PLL_GetMainSource>
 800c8ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	d005      	beq.n	800c900 <HAL_RCC_OscConfig+0x218>
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	2b0c      	cmp	r3, #12
 800c8f8:	d113      	bne.n	800c922 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	d110      	bne.n	800c922 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c900:	f7ff fbd0 	bl	800c0a4 <LL_RCC_HSI_IsReady>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d005      	beq.n	800c916 <HAL_RCC_OscConfig+0x22e>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e270      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fbd4 	bl	800c0c8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c920:	e031      	b.n	800c986 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d019      	beq.n	800c95e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c92a:	f7ff fb9d 	bl	800c068 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c92e:	f7f9 fffb 	bl	8006928 <HAL_GetTick>
 800c932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c934:	e008      	b.n	800c948 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c936:	f7f9 fff7 	bl	8006928 <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	2b02      	cmp	r3, #2
 800c942:	d901      	bls.n	800c948 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e257      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c948:	f7ff fbac 	bl	800c0a4 <LL_RCC_HSI_IsReady>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0f1      	beq.n	800c936 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff fbb6 	bl	800c0c8 <LL_RCC_HSI_SetCalibTrimming>
 800c95c:	e013      	b.n	800c986 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c95e:	f7ff fb92 	bl	800c086 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c962:	f7f9 ffe1 	bl	8006928 <HAL_GetTick>
 800c966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c968:	e008      	b.n	800c97c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c96a:	f7f9 ffdd 	bl	8006928 <HAL_GetTick>
 800c96e:	4602      	mov	r2, r0
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	2b02      	cmp	r3, #2
 800c976:	d901      	bls.n	800c97c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800c978:	2303      	movs	r3, #3
 800c97a:	e23d      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c97c:	f7ff fb92 	bl	800c0a4 <LL_RCC_HSI_IsReady>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1f1      	bne.n	800c96a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f003 0308 	and.w	r3, r3, #8
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f000 80a3 	beq.w	800cae6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	695b      	ldr	r3, [r3, #20]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d076      	beq.n	800ca96 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f003 0310 	and.w	r3, r3, #16
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d046      	beq.n	800ca42 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c9b4:	f7ff fc49 	bl	800c24a <LL_RCC_LSI1_IsReady>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d113      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c9be:	f7ff fc22 	bl	800c206 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c9c2:	f7f9 ffb1 	bl	8006928 <HAL_GetTick>
 800c9c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c9c8:	e008      	b.n	800c9dc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c9ca:	f7f9 ffad 	bl	8006928 <HAL_GetTick>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d901      	bls.n	800c9dc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e20d      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c9dc:	f7ff fc35 	bl	800c24a <LL_RCC_LSI1_IsReady>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d0f1      	beq.n	800c9ca <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c9e6:	f7ff fc42 	bl	800c26e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9ea:	f7f9 ff9d 	bl	8006928 <HAL_GetTick>
 800c9ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c9f0:	e008      	b.n	800ca04 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c9f2:	f7f9 ff99 	bl	8006928 <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d901      	bls.n	800ca04 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e1f9      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ca04:	f7ff fc55 	bl	800c2b2 <LL_RCC_LSI2_IsReady>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d0f1      	beq.n	800c9f2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fc5f 	bl	800c2d6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ca18:	f7ff fc06 	bl	800c228 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca1c:	f7f9 ff84 	bl	8006928 <HAL_GetTick>
 800ca20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ca22:	e008      	b.n	800ca36 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ca24:	f7f9 ff80 	bl	8006928 <HAL_GetTick>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d901      	bls.n	800ca36 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800ca32:	2303      	movs	r3, #3
 800ca34:	e1e0      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ca36:	f7ff fc08 	bl	800c24a <LL_RCC_LSI1_IsReady>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1f1      	bne.n	800ca24 <HAL_RCC_OscConfig+0x33c>
 800ca40:	e051      	b.n	800cae6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ca42:	f7ff fbe0 	bl	800c206 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca46:	f7f9 ff6f 	bl	8006928 <HAL_GetTick>
 800ca4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ca4c:	e008      	b.n	800ca60 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ca4e:	f7f9 ff6b 	bl	8006928 <HAL_GetTick>
 800ca52:	4602      	mov	r2, r0
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d901      	bls.n	800ca60 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e1cb      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ca60:	f7ff fbf3 	bl	800c24a <LL_RCC_LSI1_IsReady>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0f1      	beq.n	800ca4e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ca6a:	f7ff fc11 	bl	800c290 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ca6e:	e00c      	b.n	800ca8a <HAL_RCC_OscConfig+0x3a2>
 800ca70:	20000078 	.word	0x20000078
 800ca74:	2000007c 	.word	0x2000007c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ca78:	f7f9 ff56 	bl	8006928 <HAL_GetTick>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d901      	bls.n	800ca8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e1b6      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ca8a:	f7ff fc12 	bl	800c2b2 <LL_RCC_LSI2_IsReady>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1f1      	bne.n	800ca78 <HAL_RCC_OscConfig+0x390>
 800ca94:	e027      	b.n	800cae6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ca96:	f7ff fbfb 	bl	800c290 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca9a:	f7f9 ff45 	bl	8006928 <HAL_GetTick>
 800ca9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800caa0:	e008      	b.n	800cab4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800caa2:	f7f9 ff41 	bl	8006928 <HAL_GetTick>
 800caa6:	4602      	mov	r2, r0
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	2b03      	cmp	r3, #3
 800caae:	d901      	bls.n	800cab4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cab0:	2303      	movs	r3, #3
 800cab2:	e1a1      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800cab4:	f7ff fbfd 	bl	800c2b2 <LL_RCC_LSI2_IsReady>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1f1      	bne.n	800caa2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800cabe:	f7ff fbb3 	bl	800c228 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cac2:	f7f9 ff31 	bl	8006928 <HAL_GetTick>
 800cac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cac8:	e008      	b.n	800cadc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800caca:	f7f9 ff2d 	bl	8006928 <HAL_GetTick>
 800cace:	4602      	mov	r2, r0
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d901      	bls.n	800cadc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800cad8:	2303      	movs	r3, #3
 800cada:	e18d      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cadc:	f7ff fbb5 	bl	800c24a <LL_RCC_LSI1_IsReady>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1f1      	bne.n	800caca <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0304 	and.w	r3, r3, #4
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d05b      	beq.n	800cbaa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800caf2:	4bb5      	ldr	r3, [pc, #724]	; (800cdc8 <HAL_RCC_OscConfig+0x6e0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d114      	bne.n	800cb28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cafe:	f7ff fa43 	bl	800bf88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cb02:	f7f9 ff11 	bl	8006928 <HAL_GetTick>
 800cb06:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb08:	e008      	b.n	800cb1c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb0a:	f7f9 ff0d 	bl	8006928 <HAL_GetTick>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	1ad3      	subs	r3, r2, r3
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d901      	bls.n	800cb1c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800cb18:	2303      	movs	r3, #3
 800cb1a:	e16d      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cb1c:	4baa      	ldr	r3, [pc, #680]	; (800cdc8 <HAL_RCC_OscConfig+0x6e0>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d0f0      	beq.n	800cb0a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d102      	bne.n	800cb36 <HAL_RCC_OscConfig+0x44e>
 800cb30:	f7ff fb13 	bl	800c15a <LL_RCC_LSE_Enable>
 800cb34:	e00c      	b.n	800cb50 <HAL_RCC_OscConfig+0x468>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	2b05      	cmp	r3, #5
 800cb3c:	d104      	bne.n	800cb48 <HAL_RCC_OscConfig+0x460>
 800cb3e:	f7ff fb2e 	bl	800c19e <LL_RCC_LSE_EnableBypass>
 800cb42:	f7ff fb0a 	bl	800c15a <LL_RCC_LSE_Enable>
 800cb46:	e003      	b.n	800cb50 <HAL_RCC_OscConfig+0x468>
 800cb48:	f7ff fb18 	bl	800c17c <LL_RCC_LSE_Disable>
 800cb4c:	f7ff fb38 	bl	800c1c0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d014      	beq.n	800cb82 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb58:	f7f9 fee6 	bl	8006928 <HAL_GetTick>
 800cb5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800cb5e:	e00a      	b.n	800cb76 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb60:	f7f9 fee2 	bl	8006928 <HAL_GetTick>
 800cb64:	4602      	mov	r2, r0
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d901      	bls.n	800cb76 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e140      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800cb76:	f7ff fb34 	bl	800c1e2 <LL_RCC_LSE_IsReady>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d0ef      	beq.n	800cb60 <HAL_RCC_OscConfig+0x478>
 800cb80:	e013      	b.n	800cbaa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb82:	f7f9 fed1 	bl	8006928 <HAL_GetTick>
 800cb86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800cb88:	e00a      	b.n	800cba0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb8a:	f7f9 fecd 	bl	8006928 <HAL_GetTick>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d901      	bls.n	800cba0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800cb9c:	2303      	movs	r3, #3
 800cb9e:	e12b      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800cba0:	f7ff fb1f 	bl	800c1e2 <LL_RCC_LSE_IsReady>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1ef      	bne.n	800cb8a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d02c      	beq.n	800cc10 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d014      	beq.n	800cbe8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cbbe:	f7ff fa98 	bl	800c0f2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbc2:	f7f9 feb1 	bl	8006928 <HAL_GetTick>
 800cbc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800cbc8:	e008      	b.n	800cbdc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cbca:	f7f9 fead 	bl	8006928 <HAL_GetTick>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d901      	bls.n	800cbdc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800cbd8:	2303      	movs	r3, #3
 800cbda:	e10d      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800cbdc:	f7ff faab 	bl	800c136 <LL_RCC_HSI48_IsReady>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0f1      	beq.n	800cbca <HAL_RCC_OscConfig+0x4e2>
 800cbe6:	e013      	b.n	800cc10 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cbe8:	f7ff fa94 	bl	800c114 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbec:	f7f9 fe9c 	bl	8006928 <HAL_GetTick>
 800cbf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cbf2:	e008      	b.n	800cc06 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cbf4:	f7f9 fe98 	bl	8006928 <HAL_GetTick>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	d901      	bls.n	800cc06 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800cc02:	2303      	movs	r3, #3
 800cc04:	e0f8      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cc06:	f7ff fa96 	bl	800c136 <LL_RCC_HSI48_IsReady>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f1      	bne.n	800cbf4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f000 80ee 	beq.w	800cdf6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc1a:	f7ff fbf4 	bl	800c406 <LL_RCC_GetSysClkSource>
 800cc1e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800cc20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	f040 80af 	bne.w	800cd90 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f003 0203 	and.w	r2, r3, #3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d123      	bne.n	800cc88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d11c      	bne.n	800cc88 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	0a1b      	lsrs	r3, r3, #8
 800cc52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d114      	bne.n	800cc88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d10d      	bne.n	800cc88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d106      	bne.n	800cc88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d05d      	beq.n	800cd44 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2b0c      	cmp	r3, #12
 800cc8c:	d058      	beq.n	800cd40 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cc8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d001      	beq.n	800cca0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e0ab      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cca0:	f7ff fc74 	bl	800c58c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cca4:	f7f9 fe40 	bl	8006928 <HAL_GetTick>
 800cca8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ccaa:	e008      	b.n	800ccbe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccac:	f7f9 fe3c 	bl	8006928 <HAL_GetTick>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d901      	bls.n	800ccbe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e09c      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ccbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1ef      	bne.n	800ccac <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccd0:	68da      	ldr	r2, [r3, #12]
 800ccd2:	4b3e      	ldr	r3, [pc, #248]	; (800cdcc <HAL_RCC_OscConfig+0x6e4>)
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ccde:	4311      	orrs	r1, r2
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cce4:	0212      	lsls	r2, r2, #8
 800cce6:	4311      	orrs	r1, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ccec:	4311      	orrs	r1, r2
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ccf2:	4311      	orrs	r1, r2
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cd02:	f7ff fc34 	bl	800c56e <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cd06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd14:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cd16:	f7f9 fe07 	bl	8006928 <HAL_GetTick>
 800cd1a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cd1c:	e008      	b.n	800cd30 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd1e:	f7f9 fe03 	bl	8006928 <HAL_GetTick>
 800cd22:	4602      	mov	r2, r0
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	1ad3      	subs	r3, r2, r3
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d901      	bls.n	800cd30 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e063      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cd30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d0ef      	beq.n	800cd1e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cd3e:	e05a      	b.n	800cdf6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	e059      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cd44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d151      	bne.n	800cdf6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cd52:	f7ff fc0c 	bl	800c56e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cd56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd64:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cd66:	f7f9 fddf 	bl	8006928 <HAL_GetTick>
 800cd6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cd6c:	e008      	b.n	800cd80 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd6e:	f7f9 fddb 	bl	8006928 <HAL_GetTick>
 800cd72:	4602      	mov	r2, r0
 800cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d901      	bls.n	800cd80 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	e03b      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cd80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d0ef      	beq.n	800cd6e <HAL_RCC_OscConfig+0x686>
 800cd8e:	e032      	b.n	800cdf6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	2b0c      	cmp	r3, #12
 800cd94:	d02d      	beq.n	800cdf2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd96:	f7ff fbf9 	bl	800c58c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800cd9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cda4:	f023 0303 	bic.w	r3, r3, #3
 800cda8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800cdaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cdb4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800cdb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cdbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdbe:	f7f9 fdb3 	bl	8006928 <HAL_GetTick>
 800cdc2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cdc4:	e00d      	b.n	800cde2 <HAL_RCC_OscConfig+0x6fa>
 800cdc6:	bf00      	nop
 800cdc8:	58000400 	.word	0x58000400
 800cdcc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdd0:	f7f9 fdaa 	bl	8006928 <HAL_GetTick>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d901      	bls.n	800cde2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e00a      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cde2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1ef      	bne.n	800cdd0 <HAL_RCC_OscConfig+0x6e8>
 800cdf0:	e001      	b.n	800cdf6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e000      	b.n	800cdf8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3734      	adds	r7, #52	; 0x34
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd90      	pop	{r4, r7, pc}

0800ce00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	e12d      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ce14:	4b98      	ldr	r3, [pc, #608]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 0307 	and.w	r3, r3, #7
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d91b      	bls.n	800ce5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce22:	4b95      	ldr	r3, [pc, #596]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f023 0207 	bic.w	r2, r3, #7
 800ce2a:	4993      	ldr	r1, [pc, #588]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce32:	f7f9 fd79 	bl	8006928 <HAL_GetTick>
 800ce36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce38:	e008      	b.n	800ce4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ce3a:	f7f9 fd75 	bl	8006928 <HAL_GetTick>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d901      	bls.n	800ce4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	e111      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce4c:	4b8a      	ldr	r3, [pc, #552]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0307 	and.w	r3, r3, #7
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d1ef      	bne.n	800ce3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 0302 	and.w	r3, r3, #2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d016      	beq.n	800ce94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7ff fad7 	bl	800c41e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ce70:	f7f9 fd5a 	bl	8006928 <HAL_GetTick>
 800ce74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ce76:	e008      	b.n	800ce8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ce78:	f7f9 fd56 	bl	8006928 <HAL_GetTick>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d901      	bls.n	800ce8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e0f2      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ce8a:	f7ff fbd1 	bl	800c630 <LL_RCC_IsActiveFlag_HPRE>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d0f1      	beq.n	800ce78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0320 	and.w	r3, r3, #32
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d016      	beq.n	800cece <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff face 	bl	800c446 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ceaa:	f7f9 fd3d 	bl	8006928 <HAL_GetTick>
 800ceae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ceb0:	e008      	b.n	800cec4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ceb2:	f7f9 fd39 	bl	8006928 <HAL_GetTick>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d901      	bls.n	800cec4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800cec0:	2303      	movs	r3, #3
 800cec2:	e0d5      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cec4:	f7ff fbc6 	bl	800c654 <LL_RCC_IsActiveFlag_C2HPRE>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0f1      	beq.n	800ceb2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d016      	beq.n	800cf08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff fac7 	bl	800c472 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cee4:	f7f9 fd20 	bl	8006928 <HAL_GetTick>
 800cee8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ceea:	e008      	b.n	800cefe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ceec:	f7f9 fd1c 	bl	8006928 <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d901      	bls.n	800cefe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e0b8      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cefe:	f7ff fbbc 	bl	800c67a <LL_RCC_IsActiveFlag_SHDHPRE>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0f1      	beq.n	800ceec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0304 	and.w	r3, r3, #4
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d016      	beq.n	800cf42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff fac1 	bl	800c4a0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cf1e:	f7f9 fd03 	bl	8006928 <HAL_GetTick>
 800cf22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cf24:	e008      	b.n	800cf38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cf26:	f7f9 fcff 	bl	8006928 <HAL_GetTick>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d901      	bls.n	800cf38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cf34:	2303      	movs	r3, #3
 800cf36:	e09b      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cf38:	f7ff fbb2 	bl	800c6a0 <LL_RCC_IsActiveFlag_PPRE1>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0f1      	beq.n	800cf26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0308 	and.w	r3, r3, #8
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d017      	beq.n	800cf7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7ff fab7 	bl	800c4c8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cf5a:	f7f9 fce5 	bl	8006928 <HAL_GetTick>
 800cf5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cf60:	e008      	b.n	800cf74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cf62:	f7f9 fce1 	bl	8006928 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d901      	bls.n	800cf74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e07d      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cf74:	f7ff fba6 	bl	800c6c4 <LL_RCC_IsActiveFlag_PPRE2>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0f1      	beq.n	800cf62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d043      	beq.n	800d012 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d106      	bne.n	800cfa0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cf92:	f7ff f857 	bl	800c044 <LL_RCC_HSE_IsReady>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d11e      	bne.n	800cfda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e067      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	d106      	bne.n	800cfb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cfa8:	f7ff faff 	bl	800c5aa <LL_RCC_PLL_IsReady>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d113      	bne.n	800cfda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e05c      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cfbe:	f7ff f9bf 	bl	800c340 <LL_RCC_MSI_IsReady>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d108      	bne.n	800cfda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e051      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cfcc:	f7ff f86a 	bl	800c0a4 <LL_RCC_HSI_IsReady>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e04a      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff f9fd 	bl	800c3de <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfe4:	f7f9 fca0 	bl	8006928 <HAL_GetTick>
 800cfe8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfea:	e00a      	b.n	800d002 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cfec:	f7f9 fc9c 	bl	8006928 <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d901      	bls.n	800d002 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cffe:	2303      	movs	r3, #3
 800d000:	e036      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d002:	f7ff fa00 	bl	800c406 <LL_RCC_GetSysClkSource>
 800d006:	4602      	mov	r2, r0
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	429a      	cmp	r2, r3
 800d010:	d1ec      	bne.n	800cfec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d012:	4b19      	ldr	r3, [pc, #100]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 0307 	and.w	r3, r3, #7
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d21b      	bcs.n	800d058 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d020:	4b15      	ldr	r3, [pc, #84]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f023 0207 	bic.w	r2, r3, #7
 800d028:	4913      	ldr	r1, [pc, #76]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d030:	f7f9 fc7a 	bl	8006928 <HAL_GetTick>
 800d034:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d036:	e008      	b.n	800d04a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d038:	f7f9 fc76 	bl	8006928 <HAL_GetTick>
 800d03c:	4602      	mov	r2, r0
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	2b02      	cmp	r3, #2
 800d044:	d901      	bls.n	800d04a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800d046:	2303      	movs	r3, #3
 800d048:	e012      	b.n	800d070 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d04a:	4b0b      	ldr	r3, [pc, #44]	; (800d078 <HAL_RCC_ClockConfig+0x278>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 0307 	and.w	r3, r3, #7
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	d1ef      	bne.n	800d038 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d058:	f000 f87c 	bl	800d154 <HAL_RCC_GetHCLKFreq>
 800d05c:	4602      	mov	r2, r0
 800d05e:	4b07      	ldr	r3, [pc, #28]	; (800d07c <HAL_RCC_ClockConfig+0x27c>)
 800d060:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800d062:	f7f9 fc6d 	bl	8006940 <HAL_GetTickPrio>
 800d066:	4603      	mov	r3, r0
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f8 fb09 	bl	8005680 <HAL_InitTick>
 800d06e:	4603      	mov	r3, r0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	58004000 	.word	0x58004000
 800d07c:	20000078 	.word	0x20000078

0800d080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d080:	b590      	push	{r4, r7, lr}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d086:	f7ff f9be 	bl	800c406 <LL_RCC_GetSysClkSource>
 800d08a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d092:	f7ff f97a 	bl	800c38a <LL_RCC_MSI_GetRange>
 800d096:	4603      	mov	r3, r0
 800d098:	091b      	lsrs	r3, r3, #4
 800d09a:	f003 030f 	and.w	r3, r3, #15
 800d09e:	4a2a      	ldr	r2, [pc, #168]	; (800d148 <HAL_RCC_GetSysClockFreq+0xc8>)
 800d0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a4:	60fb      	str	r3, [r7, #12]
 800d0a6:	e04a      	b.n	800d13e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b04      	cmp	r3, #4
 800d0ac:	d102      	bne.n	800d0b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d0ae:	4b27      	ldr	r3, [pc, #156]	; (800d14c <HAL_RCC_GetSysClockFreq+0xcc>)
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	e044      	b.n	800d13e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	d10a      	bne.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d0ba:	f7fe ff93 	bl	800bfe4 <LL_RCC_HSE_IsEnabledDiv2>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d102      	bne.n	800d0ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800d0c4:	4b21      	ldr	r3, [pc, #132]	; (800d14c <HAL_RCC_GetSysClockFreq+0xcc>)
 800d0c6:	60fb      	str	r3, [r7, #12]
 800d0c8:	e039      	b.n	800d13e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800d0ca:	4b21      	ldr	r3, [pc, #132]	; (800d150 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d0cc:	60fb      	str	r3, [r7, #12]
 800d0ce:	e036      	b.n	800d13e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800d0d0:	f7ff faa2 	bl	800c618 <LL_RCC_PLL_GetMainSource>
 800d0d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d002      	beq.n	800d0e2 <HAL_RCC_GetSysClockFreq+0x62>
 800d0dc:	2b03      	cmp	r3, #3
 800d0de:	d003      	beq.n	800d0e8 <HAL_RCC_GetSysClockFreq+0x68>
 800d0e0:	e00d      	b.n	800d0fe <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800d0e2:	4b1a      	ldr	r3, [pc, #104]	; (800d14c <HAL_RCC_GetSysClockFreq+0xcc>)
 800d0e4:	60bb      	str	r3, [r7, #8]
        break;
 800d0e6:	e015      	b.n	800d114 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d0e8:	f7fe ff7c 	bl	800bfe4 <LL_RCC_HSE_IsEnabledDiv2>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d102      	bne.n	800d0f8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800d0f2:	4b16      	ldr	r3, [pc, #88]	; (800d14c <HAL_RCC_GetSysClockFreq+0xcc>)
 800d0f4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800d0f6:	e00d      	b.n	800d114 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800d0f8:	4b15      	ldr	r3, [pc, #84]	; (800d150 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d0fa:	60bb      	str	r3, [r7, #8]
        break;
 800d0fc:	e00a      	b.n	800d114 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d0fe:	f7ff f944 	bl	800c38a <LL_RCC_MSI_GetRange>
 800d102:	4603      	mov	r3, r0
 800d104:	091b      	lsrs	r3, r3, #4
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	4a0f      	ldr	r2, [pc, #60]	; (800d148 <HAL_RCC_GetSysClockFreq+0xc8>)
 800d10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d110:	60bb      	str	r3, [r7, #8]
        break;
 800d112:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800d114:	f7ff fa5b 	bl	800c5ce <LL_RCC_PLL_GetN>
 800d118:	4602      	mov	r2, r0
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	fb03 f402 	mul.w	r4, r3, r2
 800d120:	f7ff fa6e 	bl	800c600 <LL_RCC_PLL_GetDivider>
 800d124:	4603      	mov	r3, r0
 800d126:	091b      	lsrs	r3, r3, #4
 800d128:	3301      	adds	r3, #1
 800d12a:	fbb4 f4f3 	udiv	r4, r4, r3
 800d12e:	f7ff fa5b 	bl	800c5e8 <LL_RCC_PLL_GetR>
 800d132:	4603      	mov	r3, r0
 800d134:	0f5b      	lsrs	r3, r3, #29
 800d136:	3301      	adds	r3, #1
 800d138:	fbb4 f3f3 	udiv	r3, r4, r3
 800d13c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800d13e:	68fb      	ldr	r3, [r7, #12]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	bd90      	pop	{r4, r7, pc}
 800d148:	0801cf74 	.word	0x0801cf74
 800d14c:	00f42400 	.word	0x00f42400
 800d150:	01e84800 	.word	0x01e84800

0800d154 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d154:	b598      	push	{r3, r4, r7, lr}
 800d156:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800d158:	f7ff ff92 	bl	800d080 <HAL_RCC_GetSysClockFreq>
 800d15c:	4604      	mov	r4, r0
 800d15e:	f7ff f9c7 	bl	800c4f0 <LL_RCC_GetAHBPrescaler>
 800d162:	4603      	mov	r3, r0
 800d164:	091b      	lsrs	r3, r3, #4
 800d166:	f003 030f 	and.w	r3, r3, #15
 800d16a:	4a03      	ldr	r2, [pc, #12]	; (800d178 <HAL_RCC_GetHCLKFreq+0x24>)
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800d174:	4618      	mov	r0, r3
 800d176:	bd98      	pop	{r3, r4, r7, pc}
 800d178:	0801cf14 	.word	0x0801cf14

0800d17c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d17c:	b598      	push	{r3, r4, r7, lr}
 800d17e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800d180:	f7ff ffe8 	bl	800d154 <HAL_RCC_GetHCLKFreq>
 800d184:	4604      	mov	r4, r0
 800d186:	f7ff f9e6 	bl	800c556 <LL_RCC_GetAPB2Prescaler>
 800d18a:	4603      	mov	r3, r0
 800d18c:	0adb      	lsrs	r3, r3, #11
 800d18e:	f003 0307 	and.w	r3, r3, #7
 800d192:	4a04      	ldr	r2, [pc, #16]	; (800d1a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d198:	f003 031f 	and.w	r3, r3, #31
 800d19c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	bd98      	pop	{r3, r4, r7, pc}
 800d1a4:	0801cf54 	.word	0x0801cf54

0800d1a8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	226f      	movs	r2, #111	; 0x6f
 800d1b6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800d1b8:	f7ff f925 	bl	800c406 <LL_RCC_GetSysClkSource>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800d1c2:	f7ff f995 	bl	800c4f0 <LL_RCC_GetAHBPrescaler>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800d1cc:	f7ff f9b7 	bl	800c53e <LL_RCC_GetAPB1Prescaler>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800d1d6:	f7ff f9be 	bl	800c556 <LL_RCC_GetAPB2Prescaler>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800d1e0:	f7ff f992 	bl	800c508 <LL_C2_RCC_GetAHBPrescaler>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800d1ea:	f7ff f99a 	bl	800c522 <LL_RCC_GetAHB4Prescaler>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d1f4:	4b04      	ldr	r3, [pc, #16]	; (800d208 <HAL_RCC_GetClockConfig+0x60>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0207 	and.w	r2, r3, #7
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	601a      	str	r2, [r3, #0]
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	58004000 	.word	0x58004000

0800d20c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2bb0      	cmp	r3, #176	; 0xb0
 800d218:	d903      	bls.n	800d222 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800d21a:	4b15      	ldr	r3, [pc, #84]	; (800d270 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21e:	60fb      	str	r3, [r7, #12]
 800d220:	e007      	b.n	800d232 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	091b      	lsrs	r3, r3, #4
 800d226:	f003 030f 	and.w	r3, r3, #15
 800d22a:	4a11      	ldr	r2, [pc, #68]	; (800d270 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d230:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800d232:	f7ff f976 	bl	800c522 <LL_RCC_GetAHB4Prescaler>
 800d236:	4603      	mov	r3, r0
 800d238:	091b      	lsrs	r3, r3, #4
 800d23a:	f003 030f 	and.w	r3, r3, #15
 800d23e:	4a0d      	ldr	r2, [pc, #52]	; (800d274 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800d240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	fbb2 f3f3 	udiv	r3, r2, r3
 800d24a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	4a0a      	ldr	r2, [pc, #40]	; (800d278 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800d250:	fba2 2303 	umull	r2, r3, r2, r3
 800d254:	0c9c      	lsrs	r4, r3, #18
 800d256:	f7fe fea7 	bl	800bfa8 <HAL_PWREx_GetVoltageRange>
 800d25a:	4603      	mov	r3, r0
 800d25c:	4619      	mov	r1, r3
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 f80c 	bl	800d27c <RCC_SetFlashLatency>
 800d264:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800d266:	4618      	mov	r0, r3
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd90      	pop	{r4, r7, pc}
 800d26e:	bf00      	nop
 800d270:	0801cf74 	.word	0x0801cf74
 800d274:	0801cf14 	.word	0x0801cf14
 800d278:	431bde83 	.word	0x431bde83

0800d27c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b093      	sub	sp, #76	; 0x4c
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800d286:	4b39      	ldr	r3, [pc, #228]	; (800d36c <RCC_SetFlashLatency+0xf0>)
 800d288:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d28c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d28e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800d292:	4a37      	ldr	r2, [pc, #220]	; (800d370 <RCC_SetFlashLatency+0xf4>)
 800d294:	f107 031c 	add.w	r3, r7, #28
 800d298:	ca07      	ldmia	r2, {r0, r1, r2}
 800d29a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800d29e:	4b35      	ldr	r3, [pc, #212]	; (800d374 <RCC_SetFlashLatency+0xf8>)
 800d2a0:	f107 040c 	add.w	r4, r7, #12
 800d2a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2b4:	d11c      	bne.n	800d2f0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	643b      	str	r3, [r7, #64]	; 0x40
 800d2ba:	e015      	b.n	800d2e8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800d2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d808      	bhi.n	800d2e2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d2d8:	4413      	add	r3, r2
 800d2da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d2de:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d2e0:	e022      	b.n	800d328 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	643b      	str	r3, [r7, #64]	; 0x40
 800d2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d9e6      	bls.n	800d2bc <RCC_SetFlashLatency+0x40>
 800d2ee:	e01b      	b.n	800d328 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2f4:	e015      	b.n	800d322 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d2fe:	4413      	add	r3, r2
 800d300:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	429a      	cmp	r2, r3
 800d308:	d808      	bhi.n	800d31c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d312:	4413      	add	r3, r2
 800d314:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d318:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d31a:	e005      	b.n	800d328 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d31e:	3301      	adds	r3, #1
 800d320:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d324:	2b02      	cmp	r3, #2
 800d326:	d9e6      	bls.n	800d2f6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800d328:	4b13      	ldr	r3, [pc, #76]	; (800d378 <RCC_SetFlashLatency+0xfc>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f023 0207 	bic.w	r2, r3, #7
 800d330:	4911      	ldr	r1, [pc, #68]	; (800d378 <RCC_SetFlashLatency+0xfc>)
 800d332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d334:	4313      	orrs	r3, r2
 800d336:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d338:	f7f9 faf6 	bl	8006928 <HAL_GetTick>
 800d33c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d33e:	e008      	b.n	800d352 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d340:	f7f9 faf2 	bl	8006928 <HAL_GetTick>
 800d344:	4602      	mov	r2, r0
 800d346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d901      	bls.n	800d352 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800d34e:	2303      	movs	r3, #3
 800d350:	e007      	b.n	800d362 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d352:	4b09      	ldr	r3, [pc, #36]	; (800d378 <RCC_SetFlashLatency+0xfc>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0307 	and.w	r3, r3, #7
 800d35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d1ef      	bne.n	800d340 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800d360:	2300      	movs	r3, #0
}
 800d362:	4618      	mov	r0, r3
 800d364:	374c      	adds	r7, #76	; 0x4c
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}
 800d36a:	bf00      	nop
 800d36c:	0801c86c 	.word	0x0801c86c
 800d370:	0801c87c 	.word	0x0801c87c
 800d374:	0801c888 	.word	0x0801c888
 800d378:	58004000 	.word	0x58004000

0800d37c <LL_RCC_LSE_IsEnabled>:
{
 800d37c:	b480      	push	{r7}
 800d37e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800d380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d101      	bne.n	800d394 <LL_RCC_LSE_IsEnabled+0x18>
 800d390:	2301      	movs	r3, #1
 800d392:	e000      	b.n	800d396 <LL_RCC_LSE_IsEnabled+0x1a>
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <LL_RCC_LSE_IsReady>:
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d3a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ac:	f003 0302 	and.w	r3, r3, #2
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d101      	bne.n	800d3b8 <LL_RCC_LSE_IsReady+0x18>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e000      	b.n	800d3ba <LL_RCC_LSE_IsReady+0x1a>
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <LL_RCC_SetRFWKPClockSource>:
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d3cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d3d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800d3e4:	bf00      	nop
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <LL_RCC_SetSMPSClockSource>:
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d3f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	f023 0203 	bic.w	r2, r3, #3
 800d402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4313      	orrs	r3, r2
 800d40a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d40c:	bf00      	nop
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <LL_RCC_SetSMPSPrescaler>:
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d426:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d42a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4313      	orrs	r3, r2
 800d432:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <LL_RCC_SetUSARTClockSource>:
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d450:	f023 0203 	bic.w	r2, r3, #3
 800d454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <LL_RCC_SetLPUARTClockSource>:
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d47c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4313      	orrs	r3, r2
 800d488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <LL_RCC_SetI2CClockSource>:
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d4a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	091b      	lsrs	r3, r3, #4
 800d4ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d4b0:	43db      	mvns	r3, r3
 800d4b2:	401a      	ands	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d4bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <LL_RCC_SetLPTIMClockSource>:
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d4da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	0c1b      	lsrs	r3, r3, #16
 800d4e6:	041b      	lsls	r3, r3, #16
 800d4e8:	43db      	mvns	r3, r3
 800d4ea:	401a      	ands	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	041b      	lsls	r3, r3, #16
 800d4f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d4fa:	bf00      	nop
 800d4fc:	370c      	adds	r7, #12
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr

0800d506 <LL_RCC_SetSAIClockSource>:
{
 800d506:	b480      	push	{r7}
 800d508:	b083      	sub	sp, #12
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d50e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d51a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4313      	orrs	r3, r2
 800d522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d526:	bf00      	nop
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <LL_RCC_SetRNGClockSource>:
{
 800d532:	b480      	push	{r7}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d53a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d542:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d552:	bf00      	nop
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr

0800d55e <LL_RCC_SetCLK48ClockSource>:
{
 800d55e:	b480      	push	{r7}
 800d560:	b083      	sub	sp, #12
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d56e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4313      	orrs	r3, r2
 800d57a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d57e:	bf00      	nop
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <LL_RCC_SetUSBClockSource>:
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b082      	sub	sp, #8
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff ffe3 	bl	800d55e <LL_RCC_SetCLK48ClockSource>
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <LL_RCC_SetADCClockSource>:
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d5a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d5b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <LL_RCC_SetRTCClockSource>:
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d5d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d5e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <LL_RCC_GetRTCClockSource>:
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d5fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d604:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800d608:	4618      	mov	r0, r3
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <LL_RCC_ForceBackupDomainReset>:
{
 800d612:	b480      	push	{r7}
 800d614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d61e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d62a:	bf00      	nop
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d634:	b480      	push	{r7}
 800d636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d64c:	bf00      	nop
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <LL_RCC_PLLSAI1_Enable>:
{
 800d656:	b480      	push	{r7}
 800d658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d65a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d664:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d668:	6013      	str	r3, [r2, #0]
}
 800d66a:	bf00      	nop
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <LL_RCC_PLLSAI1_Disable>:
{
 800d674:	b480      	push	{r7}
 800d676:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d682:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d686:	6013      	str	r3, [r2, #0]
}
 800d688:	bf00      	nop
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <LL_RCC_PLLSAI1_IsReady>:
{
 800d692:	b480      	push	{r7}
 800d694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6a4:	d101      	bne.n	800d6aa <LL_RCC_PLLSAI1_IsReady+0x18>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e000      	b.n	800d6ac <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b088      	sub	sp, #32
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d6be:	2300      	movs	r3, #0
 800d6c0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d033      	beq.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6da:	d00c      	beq.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800d6dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6e0:	d802      	bhi.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d010      	beq.n	800d708 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d6e6:	e017      	b.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d6e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d6ec:	d017      	beq.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800d6ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d6f2:	d016      	beq.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800d6f4:	e010      	b.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d6f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d704:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d706:	e00d      	b.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	3304      	adds	r3, #4
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 f947 	bl	800d9a0 <RCCEx_PLLSAI1_ConfigNP>
 800d712:	4603      	mov	r3, r0
 800d714:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d716:	e005      	b.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d718:	2301      	movs	r3, #1
 800d71a:	77fb      	strb	r3, [r7, #31]
        break;
 800d71c:	e002      	b.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d71e:	bf00      	nop
 800d720:	e000      	b.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d722:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d724:	7ffb      	ldrb	r3, [r7, #31]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d105      	bne.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72e:	4618      	mov	r0, r3
 800d730:	f7ff fee9 	bl	800d506 <LL_RCC_SetSAIClockSource>
 800d734:	e001      	b.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d736:	7ffb      	ldrb	r3, [r7, #31]
 800d738:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d742:	2b00      	cmp	r3, #0
 800d744:	d046      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d746:	f7ff ff57 	bl	800d5f8 <LL_RCC_GetRTCClockSource>
 800d74a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d750:	69ba      	ldr	r2, [r7, #24]
 800d752:	429a      	cmp	r2, r3
 800d754:	d03c      	beq.n	800d7d0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d756:	f7fe fc17 	bl	800bf88 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d105      	bne.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff ff31 	bl	800d5cc <LL_RCC_SetRTCClockSource>
 800d76a:	e02e      	b.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d76c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d774:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d776:	f7ff ff4c 	bl	800d612 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d77a:	f7ff ff5b 	bl	800d634 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d788:	4313      	orrs	r3, r2
 800d78a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d78c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d796:	f7ff fdf1 	bl	800d37c <LL_RCC_LSE_IsEnabled>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d114      	bne.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d7a0:	f7f9 f8c2 	bl	8006928 <HAL_GetTick>
 800d7a4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d7a6:	e00b      	b.n	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7a8:	f7f9 f8be 	bl	8006928 <HAL_GetTick>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	1ad3      	subs	r3, r2, r3
 800d7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d902      	bls.n	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800d7ba:	2303      	movs	r3, #3
 800d7bc:	77fb      	strb	r3, [r7, #31]
              break;
 800d7be:	e004      	b.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d7c0:	f7ff fdee 	bl	800d3a0 <LL_RCC_LSE_IsReady>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d1ee      	bne.n	800d7a8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d7ca:	7ffb      	ldrb	r3, [r7, #31]
 800d7cc:	77bb      	strb	r3, [r7, #30]
 800d7ce:	e001      	b.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7d0:	7ffb      	ldrb	r3, [r7, #31]
 800d7d2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d004      	beq.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7ff fe2b 	bl	800d440 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d004      	beq.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	69db      	ldr	r3, [r3, #28]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff fe36 	bl	800d46c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0310 	and.w	r3, r3, #16
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff fe5e 	bl	800d4d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 0320 	and.w	r3, r3, #32
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d004      	beq.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff fe53 	bl	800d4d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	2b00      	cmp	r3, #0
 800d836:	d004      	beq.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a1b      	ldr	r3, [r3, #32]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff fe2b 	bl	800d498 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f003 0308 	and.w	r3, r3, #8
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff fe20 	bl	800d498 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d860:	2b00      	cmp	r3, #0
 800d862:	d022      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d868:	4618      	mov	r0, r3
 800d86a:	f7ff fe8e 	bl	800d58a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d876:	d107      	bne.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d886:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d88c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d890:	d10b      	bne.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3304      	adds	r3, #4
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f8dd 	bl	800da56 <RCCEx_PLLSAI1_ConfigNQ>
 800d89c:	4603      	mov	r3, r0
 800d89e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800d8a0:	7ffb      	ldrb	r3, [r7, #31]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800d8a6:	7ffb      	ldrb	r3, [r7, #31]
 800d8a8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d02b      	beq.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8be:	d008      	beq.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8c8:	d003      	beq.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d105      	bne.n	800d8de <HAL_RCCEx_PeriphCLKConfig+0x228>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fe2b 	bl	800d532 <LL_RCC_SetRNGClockSource>
 800d8dc:	e00a      	b.n	800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f7ff fe22 	bl	800d532 <LL_RCC_SetRNGClockSource>
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f7ff fe35 	bl	800d55e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800d8fc:	d107      	bne.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d90c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d916:	2b00      	cmp	r3, #0
 800d918:	d022      	beq.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff fe3e 	bl	800d5a0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d92c:	d107      	bne.n	800d93e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d92e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d93c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d946:	d10b      	bne.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 f8dd 	bl	800db0c <RCCEx_PLLSAI1_ConfigNR>
 800d952:	4603      	mov	r3, r0
 800d954:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800d956:	7ffb      	ldrb	r3, [r7, #31]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800d95c:	7ffb      	ldrb	r3, [r7, #31]
 800d95e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d004      	beq.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d970:	4618      	mov	r0, r3
 800d972:	f7ff fd27 	bl	800d3c4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d009      	beq.n	800d996 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fd46 	bl	800d418 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fd2d 	bl	800d3f0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800d996:	7fbb      	ldrb	r3, [r7, #30]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3720      	adds	r7, #32
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d9ac:	f7ff fe62 	bl	800d674 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d9b0:	f7f8 ffba 	bl	8006928 <HAL_GetTick>
 800d9b4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d9b6:	e009      	b.n	800d9cc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d9b8:	f7f8 ffb6 	bl	8006928 <HAL_GetTick>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d902      	bls.n	800d9cc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d9c6:	2303      	movs	r3, #3
 800d9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800d9ca:	e004      	b.n	800d9d6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d9cc:	f7ff fe61 	bl	800d692 <LL_RCC_PLLSAI1_IsReady>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1f0      	bne.n	800d9b8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d9d6:	7bfb      	ldrb	r3, [r7, #15]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d137      	bne.n	800da4c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d9dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	021b      	lsls	r3, r3, #8
 800d9ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d9f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da06:	4313      	orrs	r3, r2
 800da08:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800da0a:	f7ff fe24 	bl	800d656 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da0e:	f7f8 ff8b 	bl	8006928 <HAL_GetTick>
 800da12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800da14:	e009      	b.n	800da2a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800da16:	f7f8 ff87 	bl	8006928 <HAL_GetTick>
 800da1a:	4602      	mov	r2, r0
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	2b02      	cmp	r3, #2
 800da22:	d902      	bls.n	800da2a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	73fb      	strb	r3, [r7, #15]
        break;
 800da28:	e004      	b.n	800da34 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800da2a:	f7ff fe32 	bl	800d692 <LL_RCC_PLLSAI1_IsReady>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b01      	cmp	r3, #1
 800da32:	d1f0      	bne.n	800da16 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d108      	bne.n	800da4c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800da3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da3e:	691a      	ldr	r2, [r3, #16]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da48:	4313      	orrs	r3, r2
 800da4a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b084      	sub	sp, #16
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800da62:	f7ff fe07 	bl	800d674 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800da66:	f7f8 ff5f 	bl	8006928 <HAL_GetTick>
 800da6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800da6c:	e009      	b.n	800da82 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800da6e:	f7f8 ff5b 	bl	8006928 <HAL_GetTick>
 800da72:	4602      	mov	r2, r0
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	1ad3      	subs	r3, r2, r3
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d902      	bls.n	800da82 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800da7c:	2303      	movs	r3, #3
 800da7e:	73fb      	strb	r3, [r7, #15]
      break;
 800da80:	e004      	b.n	800da8c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800da82:	f7ff fe06 	bl	800d692 <LL_RCC_PLLSAI1_IsReady>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1f0      	bne.n	800da6e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d137      	bne.n	800db02 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800da92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	021b      	lsls	r3, r3, #8
 800daa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800daa6:	4313      	orrs	r3, r2
 800daa8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800daaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dabc:	4313      	orrs	r3, r2
 800dabe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dac0:	f7ff fdc9 	bl	800d656 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dac4:	f7f8 ff30 	bl	8006928 <HAL_GetTick>
 800dac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800daca:	e009      	b.n	800dae0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dacc:	f7f8 ff2c 	bl	8006928 <HAL_GetTick>
 800dad0:	4602      	mov	r2, r0
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d902      	bls.n	800dae0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800dada:	2303      	movs	r3, #3
 800dadc:	73fb      	strb	r3, [r7, #15]
        break;
 800dade:	e004      	b.n	800daea <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dae0:	f7ff fdd7 	bl	800d692 <LL_RCC_PLLSAI1_IsReady>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d1f0      	bne.n	800dacc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800daea:	7bfb      	ldrb	r3, [r7, #15]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d108      	bne.n	800db02 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800daf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800daf4:	691a      	ldr	r2, [r3, #16]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	691b      	ldr	r3, [r3, #16]
 800dafa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dafe:	4313      	orrs	r3, r2
 800db00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800db02:	7bfb      	ldrb	r3, [r7, #15]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800db18:	f7ff fdac 	bl	800d674 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800db1c:	f7f8 ff04 	bl	8006928 <HAL_GetTick>
 800db20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800db22:	e009      	b.n	800db38 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800db24:	f7f8 ff00 	bl	8006928 <HAL_GetTick>
 800db28:	4602      	mov	r2, r0
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d902      	bls.n	800db38 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800db32:	2303      	movs	r3, #3
 800db34:	73fb      	strb	r3, [r7, #15]
      break;
 800db36:	e004      	b.n	800db42 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800db38:	f7ff fdab 	bl	800d692 <LL_RCC_PLLSAI1_IsReady>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1f0      	bne.n	800db24 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800db42:	7bfb      	ldrb	r3, [r7, #15]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d137      	bne.n	800dbb8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800db48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db4c:	691b      	ldr	r3, [r3, #16]
 800db4e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	021b      	lsls	r3, r3, #8
 800db58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800db5c:	4313      	orrs	r3, r2
 800db5e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800db60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800db72:	4313      	orrs	r3, r2
 800db74:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800db76:	f7ff fd6e 	bl	800d656 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db7a:	f7f8 fed5 	bl	8006928 <HAL_GetTick>
 800db7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800db80:	e009      	b.n	800db96 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800db82:	f7f8 fed1 	bl	8006928 <HAL_GetTick>
 800db86:	4602      	mov	r2, r0
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d902      	bls.n	800db96 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800db90:	2303      	movs	r3, #3
 800db92:	73fb      	strb	r3, [r7, #15]
        break;
 800db94:	e004      	b.n	800dba0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800db96:	f7ff fd7c 	bl	800d692 <LL_RCC_PLLSAI1_IsReady>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d1f0      	bne.n	800db82 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d108      	bne.n	800dbb8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbaa:	691a      	ldr	r2, [r3, #16]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	691b      	ldr	r3, [r3, #16]
 800dbb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e090      	b.n	800dcf6 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d106      	bne.n	800dbee <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7f7 fb0f 	bl	800520c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2202      	movs	r2, #2
 800dbf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	22ca      	movs	r2, #202	; 0xca
 800dbfc:	625a      	str	r2, [r3, #36]	; 0x24
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2253      	movs	r2, #83	; 0x53
 800dc04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 faba 	bl	800e180 <RTC_EnterInitMode>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d009      	beq.n	800dc26 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	22ff      	movs	r2, #255	; 0xff
 800dc18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2204      	movs	r2, #4
 800dc1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e067      	b.n	800dcf6 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	6812      	ldr	r2, [r2, #0]
 800dc30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc38:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	6899      	ldr	r1, [r3, #8]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	431a      	orrs	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	431a      	orrs	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	430a      	orrs	r2, r1
 800dc56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	68d2      	ldr	r2, [r2, #12]
 800dc60:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	6919      	ldr	r1, [r3, #16]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	041a      	lsls	r2, r3, #16
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	430a      	orrs	r2, r1
 800dc74:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc84:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f022 0203 	bic.w	r2, r2, #3
 800dc94:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	69da      	ldr	r2, [r3, #28]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	695b      	ldr	r3, [r3, #20]
 800dca4:	431a      	orrs	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	430a      	orrs	r2, r1
 800dcac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f003 0320 	and.w	r3, r3, #32
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d113      	bne.n	800dce4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fa39 	bl	800e134 <HAL_RTC_WaitForSynchro>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00d      	beq.n	800dce4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	22ff      	movs	r2, #255	; 0xff
 800dcce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2204      	movs	r2, #4
 800dcd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dce0:	2301      	movs	r3, #1
 800dce2:	e008      	b.n	800dcf6 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	22ff      	movs	r2, #255	; 0xff
 800dcea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
  }
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dcfe:	b590      	push	{r4, r7, lr}
 800dd00:	b087      	sub	sp, #28
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	60f8      	str	r0, [r7, #12]
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d101      	bne.n	800dd18 <HAL_RTC_SetTime+0x1a>
 800dd14:	2302      	movs	r3, #2
 800dd16:	e0b2      	b.n	800de7e <HAL_RTC_SetTime+0x180>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2202      	movs	r2, #2
 800dd24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d126      	bne.n	800dd7c <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fa44 	bl	800e1d4 <RTC_ByteToBcd2>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	785b      	ldrb	r3, [r3, #1]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f000 fa3d 	bl	800e1d4 <RTC_ByteToBcd2>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800dd5e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	789b      	ldrb	r3, [r3, #2]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f000 fa35 	bl	800e1d4 <RTC_ByteToBcd2>
 800dd6a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800dd6c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	78db      	ldrb	r3, [r3, #3]
 800dd74:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800dd76:	4313      	orrs	r3, r2
 800dd78:	617b      	str	r3, [r7, #20]
 800dd7a:	e018      	b.n	800ddae <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d102      	bne.n	800dd90 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	785b      	ldrb	r3, [r3, #1]
 800dd9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dd9c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800dda2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	78db      	ldrb	r3, [r3, #3]
 800dda8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	22ca      	movs	r2, #202	; 0xca
 800ddb4:	625a      	str	r2, [r3, #36]	; 0x24
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2253      	movs	r2, #83	; 0x53
 800ddbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f000 f9de 	bl	800e180 <RTC_EnterInitMode>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00d      	beq.n	800dde6 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	22ff      	movs	r2, #255	; 0xff
 800ddd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2204      	movs	r2, #4
 800ddd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2200      	movs	r2, #0
 800ddde:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	e04b      	b.n	800de7e <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ddf0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ddf4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	689a      	ldr	r2, [r3, #8]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800de04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	6899      	ldr	r1, [r3, #8]
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	68da      	ldr	r2, [r3, #12]
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	691b      	ldr	r3, [r3, #16]
 800de14:	431a      	orrs	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	430a      	orrs	r2, r1
 800de1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68da      	ldr	r2, [r3, #12]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de2c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	f003 0320 	and.w	r3, r3, #32
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d113      	bne.n	800de64 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 f979 	bl	800e134 <HAL_RTC_WaitForSynchro>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00d      	beq.n	800de64 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	22ff      	movs	r2, #255	; 0xff
 800de4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2204      	movs	r2, #4
 800de54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	e00c      	b.n	800de7e <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	22ff      	movs	r2, #255	; 0xff
 800de6a:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2201      	movs	r2, #1
 800de70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2200      	movs	r2, #0
 800de78:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800de7c:	2300      	movs	r3, #0
  }
}
 800de7e:	4618      	mov	r0, r3
 800de80:	371c      	adds	r7, #28
 800de82:	46bd      	mov	sp, r7
 800de84:	bd90      	pop	{r4, r7, pc}

0800de86 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b086      	sub	sp, #24
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	60f8      	str	r0, [r7, #12]
 800de8e:	60b9      	str	r1, [r7, #8]
 800de90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800deb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800deb8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	0c1b      	lsrs	r3, r3, #16
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	0a1b      	lsrs	r3, r3, #8
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	0c1b      	lsrs	r3, r3, #16
 800deec:	b2db      	uxtb	r3, r3
 800deee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800def2:	b2da      	uxtb	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d11a      	bne.n	800df34 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	4618      	mov	r0, r3
 800df04:	f000 f986 	bl	800e214 <RTC_Bcd2ToByte>
 800df08:	4603      	mov	r3, r0
 800df0a:	461a      	mov	r2, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	785b      	ldrb	r3, [r3, #1]
 800df14:	4618      	mov	r0, r3
 800df16:	f000 f97d 	bl	800e214 <RTC_Bcd2ToByte>
 800df1a:	4603      	mov	r3, r0
 800df1c:	461a      	mov	r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	789b      	ldrb	r3, [r3, #2]
 800df26:	4618      	mov	r0, r3
 800df28:	f000 f974 	bl	800e214 <RTC_Bcd2ToByte>
 800df2c:	4603      	mov	r3, r0
 800df2e:	461a      	mov	r2, r3
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3718      	adds	r7, #24
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800df3e:	b590      	push	{r4, r7, lr}
 800df40:	b087      	sub	sp, #28
 800df42:	af00      	add	r7, sp, #0
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	60b9      	str	r1, [r7, #8]
 800df48:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d101      	bne.n	800df58 <HAL_RTC_SetDate+0x1a>
 800df54:	2302      	movs	r3, #2
 800df56:	e09c      	b.n	800e092 <HAL_RTC_SetDate+0x154>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2202      	movs	r2, #2
 800df64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10e      	bne.n	800df8c <HAL_RTC_SetDate+0x4e>
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	f003 0310 	and.w	r3, r3, #16
 800df76:	2b00      	cmp	r3, #0
 800df78:	d008      	beq.n	800df8c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	785b      	ldrb	r3, [r3, #1]
 800df7e:	f023 0310 	bic.w	r3, r3, #16
 800df82:	b2db      	uxtb	r3, r3
 800df84:	330a      	adds	r3, #10
 800df86:	b2da      	uxtb	r2, r3
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d11c      	bne.n	800dfcc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	78db      	ldrb	r3, [r3, #3]
 800df96:	4618      	mov	r0, r3
 800df98:	f000 f91c 	bl	800e1d4 <RTC_ByteToBcd2>
 800df9c:	4603      	mov	r3, r0
 800df9e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	785b      	ldrb	r3, [r3, #1]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f000 f915 	bl	800e1d4 <RTC_ByteToBcd2>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dfae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	789b      	ldrb	r3, [r3, #2]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 f90d 	bl	800e1d4 <RTC_ByteToBcd2>
 800dfba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dfbc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	e00e      	b.n	800dfea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	78db      	ldrb	r3, [r3, #3]
 800dfd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	785b      	ldrb	r3, [r3, #1]
 800dfd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dfd8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800dfde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	22ca      	movs	r2, #202	; 0xca
 800dff0:	625a      	str	r2, [r3, #36]	; 0x24
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2253      	movs	r2, #83	; 0x53
 800dff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f000 f8c0 	bl	800e180 <RTC_EnterInitMode>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00d      	beq.n	800e022 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	22ff      	movs	r2, #255	; 0xff
 800e00c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2204      	movs	r2, #4
 800e012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
 800e020:	e037      	b.n	800e092 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e02c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e030:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	68da      	ldr	r2, [r3, #12]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e040:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f003 0320 	and.w	r3, r3, #32
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d113      	bne.n	800e078 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 f86f 	bl	800e134 <HAL_RTC_WaitForSynchro>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00d      	beq.n	800e078 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	22ff      	movs	r2, #255	; 0xff
 800e062:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2204      	movs	r2, #4
 800e068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800e074:	2301      	movs	r3, #1
 800e076:	e00c      	b.n	800e092 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	22ff      	movs	r2, #255	; 0xff
 800e07e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800e090:	2300      	movs	r3, #0
  }
}
 800e092:	4618      	mov	r0, r3
 800e094:	371c      	adds	r7, #28
 800e096:	46bd      	mov	sp, r7
 800e098:	bd90      	pop	{r4, r7, pc}

0800e09a <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b086      	sub	sp, #24
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	60f8      	str	r0, [r7, #12]
 800e0a2:	60b9      	str	r1, [r7, #8]
 800e0a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e0b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e0b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	0c1b      	lsrs	r3, r3, #16
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	0a1b      	lsrs	r3, r3, #8
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	f003 031f 	and.w	r3, r3, #31
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	0b5b      	lsrs	r3, r3, #13
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 0307 	and.w	r3, r3, #7
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d11a      	bne.n	800e12a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	78db      	ldrb	r3, [r3, #3]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 f88b 	bl	800e214 <RTC_Bcd2ToByte>
 800e0fe:	4603      	mov	r3, r0
 800e100:	461a      	mov	r2, r3
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	785b      	ldrb	r3, [r3, #1]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f882 	bl	800e214 <RTC_Bcd2ToByte>
 800e110:	4603      	mov	r3, r0
 800e112:	461a      	mov	r2, r3
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	789b      	ldrb	r3, [r3, #2]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 f879 	bl	800e214 <RTC_Bcd2ToByte>
 800e122:	4603      	mov	r3, r0
 800e124:	461a      	mov	r2, r3
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68da      	ldr	r2, [r3, #12]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e14a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e14c:	f7f8 fbec 	bl	8006928 <HAL_GetTick>
 800e150:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e152:	e009      	b.n	800e168 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e154:	f7f8 fbe8 	bl	8006928 <HAL_GetTick>
 800e158:	4602      	mov	r2, r0
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e162:	d901      	bls.n	800e168 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800e164:	2303      	movs	r3, #3
 800e166:	e007      	b.n	800e178 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	f003 0320 	and.w	r3, r3, #32
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0ee      	beq.n	800e154 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800e176:	2300      	movs	r3, #0
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e192:	2b00      	cmp	r3, #0
 800e194:	d119      	bne.n	800e1ca <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f04f 32ff 	mov.w	r2, #4294967295
 800e19e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e1a0:	f7f8 fbc2 	bl	8006928 <HAL_GetTick>
 800e1a4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e1a6:	e009      	b.n	800e1bc <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e1a8:	f7f8 fbbe 	bl	8006928 <HAL_GetTick>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1b6:	d901      	bls.n	800e1bc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800e1b8:	2303      	movs	r3, #3
 800e1ba:	e007      	b.n	800e1cc <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d0ee      	beq.n	800e1a8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800e1e6:	e005      	b.n	800e1f4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800e1ee:	7afb      	ldrb	r3, [r7, #11]
 800e1f0:	3b0a      	subs	r3, #10
 800e1f2:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800e1f4:	7afb      	ldrb	r3, [r7, #11]
 800e1f6:	2b09      	cmp	r3, #9
 800e1f8:	d8f6      	bhi.n	800e1e8 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	011b      	lsls	r3, r3, #4
 800e200:	b2da      	uxtb	r2, r3
 800e202:	7afb      	ldrb	r3, [r7, #11]
 800e204:	4313      	orrs	r3, r2
 800e206:	b2db      	uxtb	r3, r3
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3714      	adds	r7, #20
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	4603      	mov	r3, r0
 800e21c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	091b      	lsrs	r3, r3, #4
 800e222:	b2db      	uxtb	r3, r3
 800e224:	461a      	mov	r2, r3
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	b2da      	uxtb	r2, r3
 800e234:	79fb      	ldrb	r3, [r7, #7]
 800e236:	f003 030f 	and.w	r3, r3, #15
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	4413      	add	r3, r2
 800e23e:	b2db      	uxtb	r3, r3
}
 800e240:	4618      	mov	r0, r3
 800e242:	3714      	adds	r7, #20
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b087      	sub	sp, #28
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3350      	adds	r3, #80	; 0x50
 800e25e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	697a      	ldr	r2, [r7, #20]
 800e266:	4413      	add	r3, r2
 800e268:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	601a      	str	r2, [r3, #0]
}
 800e270:	bf00      	nop
 800e272:	371c      	adds	r7, #28
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	e049      	b.n	800e322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e294:	b2db      	uxtb	r3, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	d106      	bne.n	800e2a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7f7 fe1a 	bl	8005edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	f000 fe94 	bl	800efe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
	...

0800e32c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d001      	beq.n	800e344 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e02e      	b.n	800e3a2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2202      	movs	r2, #2
 800e348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a17      	ldr	r2, [pc, #92]	; (800e3b0 <HAL_TIM_Base_Start+0x84>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d004      	beq.n	800e360 <HAL_TIM_Base_Start+0x34>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e35e:	d115      	bne.n	800e38c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	689a      	ldr	r2, [r3, #8]
 800e366:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <HAL_TIM_Base_Start+0x88>)
 800e368:	4013      	ands	r3, r2
 800e36a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b06      	cmp	r3, #6
 800e370:	d015      	beq.n	800e39e <HAL_TIM_Base_Start+0x72>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e378:	d011      	beq.n	800e39e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f042 0201 	orr.w	r2, r2, #1
 800e388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e38a:	e008      	b.n	800e39e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f042 0201 	orr.w	r2, r2, #1
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	e000      	b.n	800e3a0 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e39e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3714      	adds	r7, #20
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	40012c00 	.word	0x40012c00
 800e3b4:	00010007 	.word	0x00010007

0800e3b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6a1a      	ldr	r2, [r3, #32]
 800e3c6:	f241 1311 	movw	r3, #4369	; 0x1111
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10f      	bne.n	800e3f0 <HAL_TIM_Base_Stop+0x38>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6a1a      	ldr	r2, [r3, #32]
 800e3d6:	f240 4344 	movw	r3, #1092	; 0x444
 800e3da:	4013      	ands	r3, r2
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d107      	bne.n	800e3f0 <HAL_TIM_Base_Stop+0x38>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f022 0201 	bic.w	r2, r2, #1
 800e3ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	370c      	adds	r7, #12
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
	...

0800e408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e416:	b2db      	uxtb	r3, r3
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d001      	beq.n	800e420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e41c:	2301      	movs	r3, #1
 800e41e:	e036      	b.n	800e48e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2202      	movs	r2, #2
 800e424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68da      	ldr	r2, [r3, #12]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f042 0201 	orr.w	r2, r2, #1
 800e436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a17      	ldr	r2, [pc, #92]	; (800e49c <HAL_TIM_Base_Start_IT+0x94>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d004      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x44>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e44a:	d115      	bne.n	800e478 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	689a      	ldr	r2, [r3, #8]
 800e452:	4b13      	ldr	r3, [pc, #76]	; (800e4a0 <HAL_TIM_Base_Start_IT+0x98>)
 800e454:	4013      	ands	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2b06      	cmp	r3, #6
 800e45c:	d015      	beq.n	800e48a <HAL_TIM_Base_Start_IT+0x82>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e464:	d011      	beq.n	800e48a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f042 0201 	orr.w	r2, r2, #1
 800e474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e476:	e008      	b.n	800e48a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f042 0201 	orr.w	r2, r2, #1
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	e000      	b.n	800e48c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e48a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e48c:	2300      	movs	r3, #0
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	40012c00 	.word	0x40012c00
 800e4a0:	00010007 	.word	0x00010007

0800e4a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d101      	bne.n	800e4b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e049      	b.n	800e54a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d106      	bne.n	800e4d0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 f841 	bl	800e552 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	4610      	mov	r0, r2
 800e4e4:	f000 fd80 	bl	800efe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800e552:	b480      	push	{r7}
 800e554:	b083      	sub	sp, #12
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800e55a:	bf00      	nop
 800e55c:	370c      	adds	r7, #12
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr

0800e566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b082      	sub	sp, #8
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d101      	bne.n	800e578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e574:	2301      	movs	r3, #1
 800e576:	e049      	b.n	800e60c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d106      	bne.n	800e592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 f841 	bl	800e614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2202      	movs	r2, #2
 800e596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3304      	adds	r3, #4
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	f000 fd1f 	bl	800efe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d109      	bne.n	800e64c <HAL_TIM_PWM_Start+0x24>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b01      	cmp	r3, #1
 800e642:	bf14      	ite	ne
 800e644:	2301      	movne	r3, #1
 800e646:	2300      	moveq	r3, #0
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	e03c      	b.n	800e6c6 <HAL_TIM_PWM_Start+0x9e>
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	2b04      	cmp	r3, #4
 800e650:	d109      	bne.n	800e666 <HAL_TIM_PWM_Start+0x3e>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	bf14      	ite	ne
 800e65e:	2301      	movne	r3, #1
 800e660:	2300      	moveq	r3, #0
 800e662:	b2db      	uxtb	r3, r3
 800e664:	e02f      	b.n	800e6c6 <HAL_TIM_PWM_Start+0x9e>
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	2b08      	cmp	r3, #8
 800e66a:	d109      	bne.n	800e680 <HAL_TIM_PWM_Start+0x58>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e672:	b2db      	uxtb	r3, r3
 800e674:	2b01      	cmp	r3, #1
 800e676:	bf14      	ite	ne
 800e678:	2301      	movne	r3, #1
 800e67a:	2300      	moveq	r3, #0
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	e022      	b.n	800e6c6 <HAL_TIM_PWM_Start+0x9e>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2b0c      	cmp	r3, #12
 800e684:	d109      	bne.n	800e69a <HAL_TIM_PWM_Start+0x72>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b01      	cmp	r3, #1
 800e690:	bf14      	ite	ne
 800e692:	2301      	movne	r3, #1
 800e694:	2300      	moveq	r3, #0
 800e696:	b2db      	uxtb	r3, r3
 800e698:	e015      	b.n	800e6c6 <HAL_TIM_PWM_Start+0x9e>
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	2b10      	cmp	r3, #16
 800e69e:	d109      	bne.n	800e6b4 <HAL_TIM_PWM_Start+0x8c>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	bf14      	ite	ne
 800e6ac:	2301      	movne	r3, #1
 800e6ae:	2300      	moveq	r3, #0
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	e008      	b.n	800e6c6 <HAL_TIM_PWM_Start+0x9e>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	bf14      	ite	ne
 800e6c0:	2301      	movne	r3, #1
 800e6c2:	2300      	moveq	r3, #0
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d001      	beq.n	800e6ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e079      	b.n	800e7c2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d104      	bne.n	800e6de <HAL_TIM_PWM_Start+0xb6>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2202      	movs	r2, #2
 800e6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6dc:	e023      	b.n	800e726 <HAL_TIM_PWM_Start+0xfe>
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	2b04      	cmp	r3, #4
 800e6e2:	d104      	bne.n	800e6ee <HAL_TIM_PWM_Start+0xc6>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6ec:	e01b      	b.n	800e726 <HAL_TIM_PWM_Start+0xfe>
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	2b08      	cmp	r3, #8
 800e6f2:	d104      	bne.n	800e6fe <HAL_TIM_PWM_Start+0xd6>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6fc:	e013      	b.n	800e726 <HAL_TIM_PWM_Start+0xfe>
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b0c      	cmp	r3, #12
 800e702:	d104      	bne.n	800e70e <HAL_TIM_PWM_Start+0xe6>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2202      	movs	r2, #2
 800e708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e70c:	e00b      	b.n	800e726 <HAL_TIM_PWM_Start+0xfe>
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	2b10      	cmp	r3, #16
 800e712:	d104      	bne.n	800e71e <HAL_TIM_PWM_Start+0xf6>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2202      	movs	r2, #2
 800e718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e71c:	e003      	b.n	800e726 <HAL_TIM_PWM_Start+0xfe>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2202      	movs	r2, #2
 800e722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2201      	movs	r2, #1
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	4618      	mov	r0, r3
 800e730:	f000 ffd8 	bl	800f6e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a24      	ldr	r2, [pc, #144]	; (800e7cc <HAL_TIM_PWM_Start+0x1a4>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d009      	beq.n	800e752 <HAL_TIM_PWM_Start+0x12a>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a23      	ldr	r2, [pc, #140]	; (800e7d0 <HAL_TIM_PWM_Start+0x1a8>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d004      	beq.n	800e752 <HAL_TIM_PWM_Start+0x12a>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a21      	ldr	r2, [pc, #132]	; (800e7d4 <HAL_TIM_PWM_Start+0x1ac>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d101      	bne.n	800e756 <HAL_TIM_PWM_Start+0x12e>
 800e752:	2301      	movs	r3, #1
 800e754:	e000      	b.n	800e758 <HAL_TIM_PWM_Start+0x130>
 800e756:	2300      	movs	r3, #0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d007      	beq.n	800e76c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e76a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a16      	ldr	r2, [pc, #88]	; (800e7cc <HAL_TIM_PWM_Start+0x1a4>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d004      	beq.n	800e780 <HAL_TIM_PWM_Start+0x158>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e77e:	d115      	bne.n	800e7ac <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	689a      	ldr	r2, [r3, #8]
 800e786:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <HAL_TIM_PWM_Start+0x1b0>)
 800e788:	4013      	ands	r3, r2
 800e78a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2b06      	cmp	r3, #6
 800e790:	d015      	beq.n	800e7be <HAL_TIM_PWM_Start+0x196>
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e798:	d011      	beq.n	800e7be <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f042 0201 	orr.w	r2, r2, #1
 800e7a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7aa:	e008      	b.n	800e7be <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f042 0201 	orr.w	r2, r2, #1
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	e000      	b.n	800e7c0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	40012c00 	.word	0x40012c00
 800e7d0:	40014400 	.word	0x40014400
 800e7d4:	40014800 	.word	0x40014800
 800e7d8:	00010007 	.word	0x00010007

0800e7dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	6839      	ldr	r1, [r7, #0]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f000 ff78 	bl	800f6e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a39      	ldr	r2, [pc, #228]	; (800e8e0 <HAL_TIM_PWM_Stop+0x104>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d009      	beq.n	800e812 <HAL_TIM_PWM_Stop+0x36>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4a38      	ldr	r2, [pc, #224]	; (800e8e4 <HAL_TIM_PWM_Stop+0x108>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d004      	beq.n	800e812 <HAL_TIM_PWM_Stop+0x36>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a36      	ldr	r2, [pc, #216]	; (800e8e8 <HAL_TIM_PWM_Stop+0x10c>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d101      	bne.n	800e816 <HAL_TIM_PWM_Stop+0x3a>
 800e812:	2301      	movs	r3, #1
 800e814:	e000      	b.n	800e818 <HAL_TIM_PWM_Stop+0x3c>
 800e816:	2300      	movs	r3, #0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d017      	beq.n	800e84c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6a1a      	ldr	r2, [r3, #32]
 800e822:	f241 1311 	movw	r3, #4369	; 0x1111
 800e826:	4013      	ands	r3, r2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10f      	bne.n	800e84c <HAL_TIM_PWM_Stop+0x70>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6a1a      	ldr	r2, [r3, #32]
 800e832:	f240 4344 	movw	r3, #1092	; 0x444
 800e836:	4013      	ands	r3, r2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d107      	bne.n	800e84c <HAL_TIM_PWM_Stop+0x70>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e84a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6a1a      	ldr	r2, [r3, #32]
 800e852:	f241 1311 	movw	r3, #4369	; 0x1111
 800e856:	4013      	ands	r3, r2
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10f      	bne.n	800e87c <HAL_TIM_PWM_Stop+0xa0>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6a1a      	ldr	r2, [r3, #32]
 800e862:	f240 4344 	movw	r3, #1092	; 0x444
 800e866:	4013      	ands	r3, r2
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d107      	bne.n	800e87c <HAL_TIM_PWM_Stop+0xa0>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f022 0201 	bic.w	r2, r2, #1
 800e87a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d104      	bne.n	800e88c <HAL_TIM_PWM_Stop+0xb0>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e88a:	e023      	b.n	800e8d4 <HAL_TIM_PWM_Stop+0xf8>
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b04      	cmp	r3, #4
 800e890:	d104      	bne.n	800e89c <HAL_TIM_PWM_Stop+0xc0>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e89a:	e01b      	b.n	800e8d4 <HAL_TIM_PWM_Stop+0xf8>
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	2b08      	cmp	r3, #8
 800e8a0:	d104      	bne.n	800e8ac <HAL_TIM_PWM_Stop+0xd0>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e8aa:	e013      	b.n	800e8d4 <HAL_TIM_PWM_Stop+0xf8>
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2b0c      	cmp	r3, #12
 800e8b0:	d104      	bne.n	800e8bc <HAL_TIM_PWM_Stop+0xe0>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e8ba:	e00b      	b.n	800e8d4 <HAL_TIM_PWM_Stop+0xf8>
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	2b10      	cmp	r3, #16
 800e8c0:	d104      	bne.n	800e8cc <HAL_TIM_PWM_Stop+0xf0>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8ca:	e003      	b.n	800e8d4 <HAL_TIM_PWM_Stop+0xf8>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	40012c00 	.word	0x40012c00
 800e8e4:	40014400 	.word	0x40014400
 800e8e8:	40014800 	.word	0x40014800

0800e8ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	f003 0302 	and.w	r3, r3, #2
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d122      	bne.n	800e948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	f003 0302 	and.w	r3, r3, #2
 800e90c:	2b02      	cmp	r3, #2
 800e90e:	d11b      	bne.n	800e948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f06f 0202 	mvn.w	r2, #2
 800e918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	699b      	ldr	r3, [r3, #24]
 800e926:	f003 0303 	and.w	r3, r3, #3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d003      	beq.n	800e936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 fb45 	bl	800efbe <HAL_TIM_IC_CaptureCallback>
 800e934:	e005      	b.n	800e942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 fb37 	bl	800efaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7f3 f807 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	f003 0304 	and.w	r3, r3, #4
 800e952:	2b04      	cmp	r3, #4
 800e954:	d122      	bne.n	800e99c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	f003 0304 	and.w	r3, r3, #4
 800e960:	2b04      	cmp	r3, #4
 800e962:	d11b      	bne.n	800e99c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f06f 0204 	mvn.w	r2, #4
 800e96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2202      	movs	r2, #2
 800e972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	699b      	ldr	r3, [r3, #24]
 800e97a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d003      	beq.n	800e98a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fb1b 	bl	800efbe <HAL_TIM_IC_CaptureCallback>
 800e988:	e005      	b.n	800e996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 fb0d 	bl	800efaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7f2 ffdd 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	f003 0308 	and.w	r3, r3, #8
 800e9a6:	2b08      	cmp	r3, #8
 800e9a8:	d122      	bne.n	800e9f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	f003 0308 	and.w	r3, r3, #8
 800e9b4:	2b08      	cmp	r3, #8
 800e9b6:	d11b      	bne.n	800e9f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f06f 0208 	mvn.w	r2, #8
 800e9c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2204      	movs	r2, #4
 800e9c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	69db      	ldr	r3, [r3, #28]
 800e9ce:	f003 0303 	and.w	r3, r3, #3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d003      	beq.n	800e9de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 faf1 	bl	800efbe <HAL_TIM_IC_CaptureCallback>
 800e9dc:	e005      	b.n	800e9ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 fae3 	bl	800efaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7f2 ffb3 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	f003 0310 	and.w	r3, r3, #16
 800e9fa:	2b10      	cmp	r3, #16
 800e9fc:	d122      	bne.n	800ea44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	f003 0310 	and.w	r3, r3, #16
 800ea08:	2b10      	cmp	r3, #16
 800ea0a:	d11b      	bne.n	800ea44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f06f 0210 	mvn.w	r2, #16
 800ea14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2208      	movs	r2, #8
 800ea1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	69db      	ldr	r3, [r3, #28]
 800ea22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 fac7 	bl	800efbe <HAL_TIM_IC_CaptureCallback>
 800ea30:	e005      	b.n	800ea3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 fab9 	bl	800efaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7f2 ff89 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	691b      	ldr	r3, [r3, #16]
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d10e      	bne.n	800ea70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	f003 0301 	and.w	r3, r3, #1
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d107      	bne.n	800ea70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f06f 0201 	mvn.w	r2, #1
 800ea68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f7f5 fd1e 	bl	80044ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea7a:	2b80      	cmp	r3, #128	; 0x80
 800ea7c:	d10e      	bne.n	800ea9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea88:	2b80      	cmp	r3, #128	; 0x80
 800ea8a:	d107      	bne.n	800ea9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ea94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 feb4 	bl	800f804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaaa:	d10e      	bne.n	800eaca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eab6:	2b80      	cmp	r3, #128	; 0x80
 800eab8:	d107      	bne.n	800eaca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 fea7 	bl	800f818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	691b      	ldr	r3, [r3, #16]
 800ead0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead4:	2b40      	cmp	r3, #64	; 0x40
 800ead6:	d10e      	bne.n	800eaf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae2:	2b40      	cmp	r3, #64	; 0x40
 800eae4:	d107      	bne.n	800eaf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eaee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fa6e 	bl	800efd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	691b      	ldr	r3, [r3, #16]
 800eafc:	f003 0320 	and.w	r3, r3, #32
 800eb00:	2b20      	cmp	r3, #32
 800eb02:	d10e      	bne.n	800eb22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	f003 0320 	and.w	r3, r3, #32
 800eb0e:	2b20      	cmp	r3, #32
 800eb10:	d107      	bne.n	800eb22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f06f 0220 	mvn.w	r2, #32
 800eb1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 fe67 	bl	800f7f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb22:	bf00      	nop
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
	...

0800eb2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d101      	bne.n	800eb46 <HAL_TIM_OC_ConfigChannel+0x1a>
 800eb42:	2302      	movs	r3, #2
 800eb44:	e064      	b.n	800ec10 <HAL_TIM_OC_ConfigChannel+0xe4>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b14      	cmp	r3, #20
 800eb52:	d857      	bhi.n	800ec04 <HAL_TIM_OC_ConfigChannel+0xd8>
 800eb54:	a201      	add	r2, pc, #4	; (adr r2, 800eb5c <HAL_TIM_OC_ConfigChannel+0x30>)
 800eb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb5a:	bf00      	nop
 800eb5c:	0800ebb1 	.word	0x0800ebb1
 800eb60:	0800ec05 	.word	0x0800ec05
 800eb64:	0800ec05 	.word	0x0800ec05
 800eb68:	0800ec05 	.word	0x0800ec05
 800eb6c:	0800ebbf 	.word	0x0800ebbf
 800eb70:	0800ec05 	.word	0x0800ec05
 800eb74:	0800ec05 	.word	0x0800ec05
 800eb78:	0800ec05 	.word	0x0800ec05
 800eb7c:	0800ebcd 	.word	0x0800ebcd
 800eb80:	0800ec05 	.word	0x0800ec05
 800eb84:	0800ec05 	.word	0x0800ec05
 800eb88:	0800ec05 	.word	0x0800ec05
 800eb8c:	0800ebdb 	.word	0x0800ebdb
 800eb90:	0800ec05 	.word	0x0800ec05
 800eb94:	0800ec05 	.word	0x0800ec05
 800eb98:	0800ec05 	.word	0x0800ec05
 800eb9c:	0800ebe9 	.word	0x0800ebe9
 800eba0:	0800ec05 	.word	0x0800ec05
 800eba4:	0800ec05 	.word	0x0800ec05
 800eba8:	0800ec05 	.word	0x0800ec05
 800ebac:	0800ebf7 	.word	0x0800ebf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68b9      	ldr	r1, [r7, #8]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f000 fa7a 	bl	800f0b0 <TIM_OC1_SetConfig>
      break;
 800ebbc:	e023      	b.n	800ec06 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68b9      	ldr	r1, [r7, #8]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 faef 	bl	800f1a8 <TIM_OC2_SetConfig>
      break;
 800ebca:	e01c      	b.n	800ec06 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68b9      	ldr	r1, [r7, #8]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f000 fb62 	bl	800f29c <TIM_OC3_SetConfig>
      break;
 800ebd8:	e015      	b.n	800ec06 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	68b9      	ldr	r1, [r7, #8]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f000 fbd3 	bl	800f38c <TIM_OC4_SetConfig>
      break;
 800ebe6:	e00e      	b.n	800ec06 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68b9      	ldr	r1, [r7, #8]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 fc2a 	bl	800f448 <TIM_OC5_SetConfig>
      break;
 800ebf4:	e007      	b.n	800ec06 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68b9      	ldr	r1, [r7, #8]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 fc7b 	bl	800f4f8 <TIM_OC6_SetConfig>
      break;
 800ec02:	e000      	b.n	800ec06 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800ec04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d101      	bne.n	800ec32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ec2e:	2302      	movs	r3, #2
 800ec30:	e0fd      	b.n	800ee2e <HAL_TIM_PWM_ConfigChannel+0x216>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b14      	cmp	r3, #20
 800ec3e:	f200 80f0 	bhi.w	800ee22 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ec42:	a201      	add	r2, pc, #4	; (adr r2, 800ec48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec9d 	.word	0x0800ec9d
 800ec4c:	0800ee23 	.word	0x0800ee23
 800ec50:	0800ee23 	.word	0x0800ee23
 800ec54:	0800ee23 	.word	0x0800ee23
 800ec58:	0800ecdd 	.word	0x0800ecdd
 800ec5c:	0800ee23 	.word	0x0800ee23
 800ec60:	0800ee23 	.word	0x0800ee23
 800ec64:	0800ee23 	.word	0x0800ee23
 800ec68:	0800ed1f 	.word	0x0800ed1f
 800ec6c:	0800ee23 	.word	0x0800ee23
 800ec70:	0800ee23 	.word	0x0800ee23
 800ec74:	0800ee23 	.word	0x0800ee23
 800ec78:	0800ed5f 	.word	0x0800ed5f
 800ec7c:	0800ee23 	.word	0x0800ee23
 800ec80:	0800ee23 	.word	0x0800ee23
 800ec84:	0800ee23 	.word	0x0800ee23
 800ec88:	0800eda1 	.word	0x0800eda1
 800ec8c:	0800ee23 	.word	0x0800ee23
 800ec90:	0800ee23 	.word	0x0800ee23
 800ec94:	0800ee23 	.word	0x0800ee23
 800ec98:	0800ede1 	.word	0x0800ede1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68b9      	ldr	r1, [r7, #8]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 fa04 	bl	800f0b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	699a      	ldr	r2, [r3, #24]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f042 0208 	orr.w	r2, r2, #8
 800ecb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	699a      	ldr	r2, [r3, #24]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f022 0204 	bic.w	r2, r2, #4
 800ecc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6999      	ldr	r1, [r3, #24]
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	691a      	ldr	r2, [r3, #16]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	430a      	orrs	r2, r1
 800ecd8:	619a      	str	r2, [r3, #24]
      break;
 800ecda:	e0a3      	b.n	800ee24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68b9      	ldr	r1, [r7, #8]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f000 fa60 	bl	800f1a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	699a      	ldr	r2, [r3, #24]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	699a      	ldr	r2, [r3, #24]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6999      	ldr	r1, [r3, #24]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	691b      	ldr	r3, [r3, #16]
 800ed12:	021a      	lsls	r2, r3, #8
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	430a      	orrs	r2, r1
 800ed1a:	619a      	str	r2, [r3, #24]
      break;
 800ed1c:	e082      	b.n	800ee24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	68b9      	ldr	r1, [r7, #8]
 800ed24:	4618      	mov	r0, r3
 800ed26:	f000 fab9 	bl	800f29c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	69da      	ldr	r2, [r3, #28]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f042 0208 	orr.w	r2, r2, #8
 800ed38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	69da      	ldr	r2, [r3, #28]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f022 0204 	bic.w	r2, r2, #4
 800ed48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	69d9      	ldr	r1, [r3, #28]
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	691a      	ldr	r2, [r3, #16]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	430a      	orrs	r2, r1
 800ed5a:	61da      	str	r2, [r3, #28]
      break;
 800ed5c:	e062      	b.n	800ee24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	68b9      	ldr	r1, [r7, #8]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f000 fb11 	bl	800f38c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	69da      	ldr	r2, [r3, #28]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	69da      	ldr	r2, [r3, #28]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	69d9      	ldr	r1, [r3, #28]
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	021a      	lsls	r2, r3, #8
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	430a      	orrs	r2, r1
 800ed9c:	61da      	str	r2, [r3, #28]
      break;
 800ed9e:	e041      	b.n	800ee24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68b9      	ldr	r1, [r7, #8]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 fb4e 	bl	800f448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f042 0208 	orr.w	r2, r2, #8
 800edba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f022 0204 	bic.w	r2, r2, #4
 800edca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	691a      	ldr	r2, [r3, #16]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	430a      	orrs	r2, r1
 800eddc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800edde:	e021      	b.n	800ee24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	68b9      	ldr	r1, [r7, #8]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f000 fb86 	bl	800f4f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	021a      	lsls	r2, r3, #8
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	430a      	orrs	r2, r1
 800ee1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee20:	e000      	b.n	800ee24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ee22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop

0800ee38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d101      	bne.n	800ee50 <HAL_TIM_ConfigClockSource+0x18>
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	e0a8      	b.n	800efa2 <HAL_TIM_ConfigClockSource+0x16a>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ee6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ee72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b40      	cmp	r3, #64	; 0x40
 800ee8a:	d067      	beq.n	800ef5c <HAL_TIM_ConfigClockSource+0x124>
 800ee8c:	2b40      	cmp	r3, #64	; 0x40
 800ee8e:	d80b      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x70>
 800ee90:	2b10      	cmp	r3, #16
 800ee92:	d073      	beq.n	800ef7c <HAL_TIM_ConfigClockSource+0x144>
 800ee94:	2b10      	cmp	r3, #16
 800ee96:	d802      	bhi.n	800ee9e <HAL_TIM_ConfigClockSource+0x66>
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d06f      	beq.n	800ef7c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ee9c:	e078      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800ee9e:	2b20      	cmp	r3, #32
 800eea0:	d06c      	beq.n	800ef7c <HAL_TIM_ConfigClockSource+0x144>
 800eea2:	2b30      	cmp	r3, #48	; 0x30
 800eea4:	d06a      	beq.n	800ef7c <HAL_TIM_ConfigClockSource+0x144>
      break;
 800eea6:	e073      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800eea8:	2b70      	cmp	r3, #112	; 0x70
 800eeaa:	d00d      	beq.n	800eec8 <HAL_TIM_ConfigClockSource+0x90>
 800eeac:	2b70      	cmp	r3, #112	; 0x70
 800eeae:	d804      	bhi.n	800eeba <HAL_TIM_ConfigClockSource+0x82>
 800eeb0:	2b50      	cmp	r3, #80	; 0x50
 800eeb2:	d033      	beq.n	800ef1c <HAL_TIM_ConfigClockSource+0xe4>
 800eeb4:	2b60      	cmp	r3, #96	; 0x60
 800eeb6:	d041      	beq.n	800ef3c <HAL_TIM_ConfigClockSource+0x104>
      break;
 800eeb8:	e06a      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800eeba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eebe:	d066      	beq.n	800ef8e <HAL_TIM_ConfigClockSource+0x156>
 800eec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eec4:	d017      	beq.n	800eef6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800eec6:	e063      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6818      	ldr	r0, [r3, #0]
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	6899      	ldr	r1, [r3, #8]
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	f000 fbe4 	bl	800f6a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eeea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	609a      	str	r2, [r3, #8]
      break;
 800eef4:	e04c      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6818      	ldr	r0, [r3, #0]
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	6899      	ldr	r1, [r3, #8]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	685a      	ldr	r2, [r3, #4]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	f000 fbcd 	bl	800f6a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	689a      	ldr	r2, [r3, #8]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef18:	609a      	str	r2, [r3, #8]
      break;
 800ef1a:	e039      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6818      	ldr	r0, [r3, #0]
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	6859      	ldr	r1, [r3, #4]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	f000 fb3f 	bl	800f5ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2150      	movs	r1, #80	; 0x50
 800ef34:	4618      	mov	r0, r3
 800ef36:	f000 fb98 	bl	800f66a <TIM_ITRx_SetConfig>
      break;
 800ef3a:	e029      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	6859      	ldr	r1, [r3, #4]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	68db      	ldr	r3, [r3, #12]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	f000 fb5e 	bl	800f60a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2160      	movs	r1, #96	; 0x60
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 fb88 	bl	800f66a <TIM_ITRx_SetConfig>
      break;
 800ef5a:	e019      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6818      	ldr	r0, [r3, #0]
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	6859      	ldr	r1, [r3, #4]
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f000 fb1f 	bl	800f5ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2140      	movs	r1, #64	; 0x40
 800ef74:	4618      	mov	r0, r3
 800ef76:	f000 fb78 	bl	800f66a <TIM_ITRx_SetConfig>
      break;
 800ef7a:	e009      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4619      	mov	r1, r3
 800ef86:	4610      	mov	r0, r2
 800ef88:	f000 fb6f 	bl	800f66a <TIM_ITRx_SetConfig>
        break;
 800ef8c:	e000      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800ef8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800efb2:	bf00      	nop
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800efbe:	b480      	push	{r7}
 800efc0:	b083      	sub	sp, #12
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800efc6:	bf00      	nop
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b083      	sub	sp, #12
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efda:	bf00      	nop
 800efdc:	370c      	adds	r7, #12
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr
	...

0800efe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4a2a      	ldr	r2, [pc, #168]	; (800f0a4 <TIM_Base_SetConfig+0xbc>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d003      	beq.n	800f008 <TIM_Base_SetConfig+0x20>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f006:	d108      	bne.n	800f01a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f00e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	4313      	orrs	r3, r2
 800f018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4a21      	ldr	r2, [pc, #132]	; (800f0a4 <TIM_Base_SetConfig+0xbc>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d00b      	beq.n	800f03a <TIM_Base_SetConfig+0x52>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f028:	d007      	beq.n	800f03a <TIM_Base_SetConfig+0x52>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4a1e      	ldr	r2, [pc, #120]	; (800f0a8 <TIM_Base_SetConfig+0xc0>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d003      	beq.n	800f03a <TIM_Base_SetConfig+0x52>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4a1d      	ldr	r2, [pc, #116]	; (800f0ac <TIM_Base_SetConfig+0xc4>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d108      	bne.n	800f04c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	4313      	orrs	r3, r2
 800f04a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	695b      	ldr	r3, [r3, #20]
 800f056:	4313      	orrs	r3, r2
 800f058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	689a      	ldr	r2, [r3, #8]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a0c      	ldr	r2, [pc, #48]	; (800f0a4 <TIM_Base_SetConfig+0xbc>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d007      	beq.n	800f088 <TIM_Base_SetConfig+0xa0>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a0b      	ldr	r2, [pc, #44]	; (800f0a8 <TIM_Base_SetConfig+0xc0>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d003      	beq.n	800f088 <TIM_Base_SetConfig+0xa0>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a0a      	ldr	r2, [pc, #40]	; (800f0ac <TIM_Base_SetConfig+0xc4>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d103      	bne.n	800f090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	691a      	ldr	r2, [r3, #16]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	615a      	str	r2, [r3, #20]
}
 800f096:	bf00      	nop
 800f098:	3714      	adds	r7, #20
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	40012c00 	.word	0x40012c00
 800f0a8:	40014400 	.word	0x40014400
 800f0ac:	40014800 	.word	0x40014800

0800f0b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b087      	sub	sp, #28
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6a1b      	ldr	r3, [r3, #32]
 800f0be:	f023 0201 	bic.w	r2, r3, #1
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6a1b      	ldr	r3, [r3, #32]
 800f0ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	699b      	ldr	r3, [r3, #24]
 800f0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f023 0303 	bic.w	r3, r3, #3
 800f0ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	f023 0302 	bic.w	r3, r3, #2
 800f0fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	697a      	ldr	r2, [r7, #20]
 800f104:	4313      	orrs	r3, r2
 800f106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4a24      	ldr	r2, [pc, #144]	; (800f19c <TIM_OC1_SetConfig+0xec>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d007      	beq.n	800f120 <TIM_OC1_SetConfig+0x70>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4a23      	ldr	r2, [pc, #140]	; (800f1a0 <TIM_OC1_SetConfig+0xf0>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d003      	beq.n	800f120 <TIM_OC1_SetConfig+0x70>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4a22      	ldr	r2, [pc, #136]	; (800f1a4 <TIM_OC1_SetConfig+0xf4>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d10c      	bne.n	800f13a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	f023 0308 	bic.w	r3, r3, #8
 800f126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	4313      	orrs	r3, r2
 800f130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f023 0304 	bic.w	r3, r3, #4
 800f138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a17      	ldr	r2, [pc, #92]	; (800f19c <TIM_OC1_SetConfig+0xec>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d007      	beq.n	800f152 <TIM_OC1_SetConfig+0xa2>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a17      	ldr	r2, [pc, #92]	; (800f1a4 <TIM_OC1_SetConfig+0xf4>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d003      	beq.n	800f152 <TIM_OC1_SetConfig+0xa2>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a14      	ldr	r2, [pc, #80]	; (800f1a0 <TIM_OC1_SetConfig+0xf0>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d111      	bne.n	800f176 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	695b      	ldr	r3, [r3, #20]
 800f166:	693a      	ldr	r2, [r7, #16]
 800f168:	4313      	orrs	r3, r2
 800f16a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	4313      	orrs	r3, r2
 800f174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	693a      	ldr	r2, [r7, #16]
 800f17a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	697a      	ldr	r2, [r7, #20]
 800f18e:	621a      	str	r2, [r3, #32]
}
 800f190:	bf00      	nop
 800f192:	371c      	adds	r7, #28
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	40012c00 	.word	0x40012c00
 800f1a0:	40014800 	.word	0x40014800
 800f1a4:	40014400 	.word	0x40014400

0800f1a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b087      	sub	sp, #28
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6a1b      	ldr	r3, [r3, #32]
 800f1b6:	f023 0210 	bic.w	r2, r3, #16
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6a1b      	ldr	r3, [r3, #32]
 800f1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	699b      	ldr	r3, [r3, #24]
 800f1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f1d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	021b      	lsls	r3, r3, #8
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	f023 0320 	bic.w	r3, r3, #32
 800f1f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	011b      	lsls	r3, r3, #4
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	4313      	orrs	r3, r2
 800f202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a22      	ldr	r2, [pc, #136]	; (800f290 <TIM_OC2_SetConfig+0xe8>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d10d      	bne.n	800f228 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	011b      	lsls	r3, r3, #4
 800f21a:	697a      	ldr	r2, [r7, #20]
 800f21c:	4313      	orrs	r3, r2
 800f21e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	4a19      	ldr	r2, [pc, #100]	; (800f290 <TIM_OC2_SetConfig+0xe8>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d007      	beq.n	800f240 <TIM_OC2_SetConfig+0x98>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4a18      	ldr	r2, [pc, #96]	; (800f294 <TIM_OC2_SetConfig+0xec>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d003      	beq.n	800f240 <TIM_OC2_SetConfig+0x98>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4a17      	ldr	r2, [pc, #92]	; (800f298 <TIM_OC2_SetConfig+0xf0>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d113      	bne.n	800f268 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f24e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	695b      	ldr	r3, [r3, #20]
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	693a      	ldr	r2, [r7, #16]
 800f258:	4313      	orrs	r3, r2
 800f25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	699b      	ldr	r3, [r3, #24]
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	693a      	ldr	r2, [r7, #16]
 800f264:	4313      	orrs	r3, r2
 800f266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	693a      	ldr	r2, [r7, #16]
 800f26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	68fa      	ldr	r2, [r7, #12]
 800f272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	685a      	ldr	r2, [r3, #4]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	621a      	str	r2, [r3, #32]
}
 800f282:	bf00      	nop
 800f284:	371c      	adds	r7, #28
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop
 800f290:	40012c00 	.word	0x40012c00
 800f294:	40014400 	.word	0x40014400
 800f298:	40014800 	.word	0x40014800

0800f29c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b087      	sub	sp, #28
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	69db      	ldr	r3, [r3, #28]
 800f2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f023 0303 	bic.w	r3, r3, #3
 800f2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f2e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	689b      	ldr	r3, [r3, #8]
 800f2ee:	021b      	lsls	r3, r3, #8
 800f2f0:	697a      	ldr	r2, [r7, #20]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a21      	ldr	r2, [pc, #132]	; (800f380 <TIM_OC3_SetConfig+0xe4>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d10d      	bne.n	800f31a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	021b      	lsls	r3, r3, #8
 800f30c:	697a      	ldr	r2, [r7, #20]
 800f30e:	4313      	orrs	r3, r2
 800f310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a18      	ldr	r2, [pc, #96]	; (800f380 <TIM_OC3_SetConfig+0xe4>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d007      	beq.n	800f332 <TIM_OC3_SetConfig+0x96>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4a17      	ldr	r2, [pc, #92]	; (800f384 <TIM_OC3_SetConfig+0xe8>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d003      	beq.n	800f332 <TIM_OC3_SetConfig+0x96>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4a16      	ldr	r2, [pc, #88]	; (800f388 <TIM_OC3_SetConfig+0xec>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d113      	bne.n	800f35a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	695b      	ldr	r3, [r3, #20]
 800f346:	011b      	lsls	r3, r3, #4
 800f348:	693a      	ldr	r2, [r7, #16]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	699b      	ldr	r3, [r3, #24]
 800f352:	011b      	lsls	r3, r3, #4
 800f354:	693a      	ldr	r2, [r7, #16]
 800f356:	4313      	orrs	r3, r2
 800f358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	693a      	ldr	r2, [r7, #16]
 800f35e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	697a      	ldr	r2, [r7, #20]
 800f372:	621a      	str	r2, [r3, #32]
}
 800f374:	bf00      	nop
 800f376:	371c      	adds	r7, #28
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	40012c00 	.word	0x40012c00
 800f384:	40014400 	.word	0x40014400
 800f388:	40014800 	.word	0x40014800

0800f38c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b087      	sub	sp, #28
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a1b      	ldr	r3, [r3, #32]
 800f39a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6a1b      	ldr	r3, [r3, #32]
 800f3a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	69db      	ldr	r3, [r3, #28]
 800f3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f3ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	021b      	lsls	r3, r3, #8
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	031b      	lsls	r3, r3, #12
 800f3e2:	693a      	ldr	r2, [r7, #16]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a14      	ldr	r2, [pc, #80]	; (800f43c <TIM_OC4_SetConfig+0xb0>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d007      	beq.n	800f400 <TIM_OC4_SetConfig+0x74>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a13      	ldr	r2, [pc, #76]	; (800f440 <TIM_OC4_SetConfig+0xb4>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d003      	beq.n	800f400 <TIM_OC4_SetConfig+0x74>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a12      	ldr	r2, [pc, #72]	; (800f444 <TIM_OC4_SetConfig+0xb8>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d109      	bne.n	800f414 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	695b      	ldr	r3, [r3, #20]
 800f40c:	019b      	lsls	r3, r3, #6
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	4313      	orrs	r3, r2
 800f412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	693a      	ldr	r2, [r7, #16]
 800f42c:	621a      	str	r2, [r3, #32]
}
 800f42e:	bf00      	nop
 800f430:	371c      	adds	r7, #28
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	40012c00 	.word	0x40012c00
 800f440:	40014400 	.word	0x40014400
 800f444:	40014800 	.word	0x40014800

0800f448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f448:	b480      	push	{r7}
 800f44a:	b087      	sub	sp, #28
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6a1b      	ldr	r3, [r3, #32]
 800f456:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a1b      	ldr	r3, [r3, #32]
 800f462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f47a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	4313      	orrs	r3, r2
 800f484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f48c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	041b      	lsls	r3, r3, #16
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	4313      	orrs	r3, r2
 800f498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a13      	ldr	r2, [pc, #76]	; (800f4ec <TIM_OC5_SetConfig+0xa4>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d007      	beq.n	800f4b2 <TIM_OC5_SetConfig+0x6a>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a12      	ldr	r2, [pc, #72]	; (800f4f0 <TIM_OC5_SetConfig+0xa8>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d003      	beq.n	800f4b2 <TIM_OC5_SetConfig+0x6a>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a11      	ldr	r2, [pc, #68]	; (800f4f4 <TIM_OC5_SetConfig+0xac>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d109      	bne.n	800f4c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	695b      	ldr	r3, [r3, #20]
 800f4be:	021b      	lsls	r3, r3, #8
 800f4c0:	697a      	ldr	r2, [r7, #20]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	697a      	ldr	r2, [r7, #20]
 800f4ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	685a      	ldr	r2, [r3, #4]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	693a      	ldr	r2, [r7, #16]
 800f4de:	621a      	str	r2, [r3, #32]
}
 800f4e0:	bf00      	nop
 800f4e2:	371c      	adds	r7, #28
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	40012c00 	.word	0x40012c00
 800f4f0:	40014400 	.word	0x40014400
 800f4f4:	40014800 	.word	0x40014800

0800f4f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b087      	sub	sp, #28
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a1b      	ldr	r3, [r3, #32]
 800f506:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6a1b      	ldr	r3, [r3, #32]
 800f512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	4313      	orrs	r3, r2
 800f536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f53e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	051b      	lsls	r3, r3, #20
 800f546:	693a      	ldr	r2, [r7, #16]
 800f548:	4313      	orrs	r3, r2
 800f54a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a14      	ldr	r2, [pc, #80]	; (800f5a0 <TIM_OC6_SetConfig+0xa8>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d007      	beq.n	800f564 <TIM_OC6_SetConfig+0x6c>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a13      	ldr	r2, [pc, #76]	; (800f5a4 <TIM_OC6_SetConfig+0xac>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d003      	beq.n	800f564 <TIM_OC6_SetConfig+0x6c>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a12      	ldr	r2, [pc, #72]	; (800f5a8 <TIM_OC6_SetConfig+0xb0>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d109      	bne.n	800f578 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f56a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	029b      	lsls	r3, r3, #10
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	4313      	orrs	r3, r2
 800f576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	693a      	ldr	r2, [r7, #16]
 800f590:	621a      	str	r2, [r3, #32]
}
 800f592:	bf00      	nop
 800f594:	371c      	adds	r7, #28
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	40012c00 	.word	0x40012c00
 800f5a4:	40014400 	.word	0x40014400
 800f5a8:	40014800 	.word	0x40014800

0800f5ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b087      	sub	sp, #28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6a1b      	ldr	r3, [r3, #32]
 800f5bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6a1b      	ldr	r3, [r3, #32]
 800f5c2:	f023 0201 	bic.w	r2, r3, #1
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	699b      	ldr	r3, [r3, #24]
 800f5ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	011b      	lsls	r3, r3, #4
 800f5dc:	693a      	ldr	r2, [r7, #16]
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	f023 030a 	bic.w	r3, r3, #10
 800f5e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	693a      	ldr	r2, [r7, #16]
 800f5f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	697a      	ldr	r2, [r7, #20]
 800f5fc:	621a      	str	r2, [r3, #32]
}
 800f5fe:	bf00      	nop
 800f600:	371c      	adds	r7, #28
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f60a:	b480      	push	{r7}
 800f60c:	b087      	sub	sp, #28
 800f60e:	af00      	add	r7, sp, #0
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	60b9      	str	r1, [r7, #8]
 800f614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	f023 0210 	bic.w	r2, r3, #16
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	699b      	ldr	r3, [r3, #24]
 800f626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6a1b      	ldr	r3, [r3, #32]
 800f62c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	031b      	lsls	r3, r3, #12
 800f63a:	697a      	ldr	r2, [r7, #20]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	011b      	lsls	r3, r3, #4
 800f64c:	693a      	ldr	r2, [r7, #16]
 800f64e:	4313      	orrs	r3, r2
 800f650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	697a      	ldr	r2, [r7, #20]
 800f656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	693a      	ldr	r2, [r7, #16]
 800f65c:	621a      	str	r2, [r3, #32]
}
 800f65e:	bf00      	nop
 800f660:	371c      	adds	r7, #28
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr

0800f66a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f66a:	b480      	push	{r7}
 800f66c:	b085      	sub	sp, #20
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	f043 0307 	orr.w	r3, r3, #7
 800f690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	609a      	str	r2, [r3, #8]
}
 800f698:	bf00      	nop
 800f69a:	3714      	adds	r7, #20
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	021a      	lsls	r2, r3, #8
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	431a      	orrs	r2, r3
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	697a      	ldr	r2, [r7, #20]
 800f6d6:	609a      	str	r2, [r3, #8]
}
 800f6d8:	bf00      	nop
 800f6da:	371c      	adds	r7, #28
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b087      	sub	sp, #28
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	f003 031f 	and.w	r3, r3, #31
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f6fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6a1a      	ldr	r2, [r3, #32]
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	43db      	mvns	r3, r3
 800f706:	401a      	ands	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6a1a      	ldr	r2, [r3, #32]
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	f003 031f 	and.w	r3, r3, #31
 800f716:	6879      	ldr	r1, [r7, #4]
 800f718:	fa01 f303 	lsl.w	r3, r1, r3
 800f71c:	431a      	orrs	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	621a      	str	r2, [r3, #32]
}
 800f722:	bf00      	nop
 800f724:	371c      	adds	r7, #28
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
	...

0800f730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f740:	2b01      	cmp	r3, #1
 800f742:	d101      	bne.n	800f748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f744:	2302      	movs	r3, #2
 800f746:	e04a      	b.n	800f7de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a1f      	ldr	r2, [pc, #124]	; (800f7ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d108      	bne.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f778:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	4313      	orrs	r3, r2
 800f782:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f78a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	4313      	orrs	r3, r2
 800f794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4a12      	ldr	r2, [pc, #72]	; (800f7ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d004      	beq.n	800f7b2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7b0:	d10c      	bne.n	800f7cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	68ba      	ldr	r2, [r7, #8]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	40012c00 	.word	0x40012c00

0800f7f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f80c:	bf00      	nop
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f820:	bf00      	nop
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b085      	sub	sp, #20
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f834:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f838:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f840:	b29a      	uxth	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	b29b      	uxth	r3, r3
 800f846:	4313      	orrs	r3, r2
 800f848:	b29a      	uxth	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f850:	2300      	movs	r3, #0
}
 800f852:	4618      	mov	r0, r3
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr

0800f85e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f85e:	b480      	push	{r7}
 800f860:	b085      	sub	sp, #20
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f866:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f86a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f872:	b29a      	uxth	r2, r3
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	b29b      	uxth	r3, r3
 800f878:	43db      	mvns	r3, r3
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	4013      	ands	r3, r2
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3714      	adds	r7, #20
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f894:	b084      	sub	sp, #16
 800f896:	b580      	push	{r7, lr}
 800f898:	b082      	sub	sp, #8
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
 800f89e:	f107 0014 	add.w	r0, r7, #20
 800f8a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f7ff ffb0 	bl	800f82c <USB_EnableGlobalInt>

  return HAL_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f8d8:	b004      	add	sp, #16
 800f8da:	4770      	bx	lr

0800f8dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b09d      	sub	sp, #116	; 0x74
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	881b      	ldrh	r3, [r3, #0]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f902:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	78db      	ldrb	r3, [r3, #3]
 800f90a:	2b03      	cmp	r3, #3
 800f90c:	d81f      	bhi.n	800f94e <USB_ActivateEndpoint+0x72>
 800f90e:	a201      	add	r2, pc, #4	; (adr r2, 800f914 <USB_ActivateEndpoint+0x38>)
 800f910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f914:	0800f925 	.word	0x0800f925
 800f918:	0800f941 	.word	0x0800f941
 800f91c:	0800f957 	.word	0x0800f957
 800f920:	0800f933 	.word	0x0800f933
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f924:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f92c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f930:	e012      	b.n	800f958 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f932:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f936:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f93a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f93e:	e00b      	b.n	800f958 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f940:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f948:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f94c:	e004      	b.n	800f958 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f954:	e000      	b.n	800f958 <USB_ActivateEndpoint+0x7c>
      break;
 800f956:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	441a      	add	r2, r3
 800f962:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f96a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f96e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f976:	b29b      	uxth	r3, r3
 800f978:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	4413      	add	r3, r2
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	b29b      	uxth	r3, r3
 800f988:	b21b      	sxth	r3, r3
 800f98a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f992:	b21a      	sxth	r2, r3
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	b21b      	sxth	r3, r3
 800f99a:	4313      	orrs	r3, r2
 800f99c:	b21b      	sxth	r3, r3
 800f99e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	009b      	lsls	r3, r3, #2
 800f9aa:	441a      	add	r2, r3
 800f9ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f9b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	7b1b      	ldrb	r3, [r3, #12]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f040 8149 	bne.w	800fc60 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	785b      	ldrb	r3, [r3, #1]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f000 8084 	beq.w	800fae0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	61bb      	str	r3, [r7, #24]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	61bb      	str	r3, [r7, #24]
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	00da      	lsls	r2, r3, #3
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9fa:	617b      	str	r3, [r7, #20]
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	88db      	ldrh	r3, [r3, #6]
 800fa00:	085b      	lsrs	r3, r3, #1
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	005b      	lsls	r3, r3, #1
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	4413      	add	r3, r2
 800fa16:	881b      	ldrh	r3, [r3, #0]
 800fa18:	827b      	strh	r3, [r7, #18]
 800fa1a:	8a7b      	ldrh	r3, [r7, #18]
 800fa1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d01b      	beq.n	800fa5c <USB_ActivateEndpoint+0x180>
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4413      	add	r3, r2
 800fa2e:	881b      	ldrh	r3, [r3, #0]
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa3a:	823b      	strh	r3, [r7, #16]
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	441a      	add	r2, r3
 800fa46:	8a3b      	ldrh	r3, [r7, #16]
 800fa48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	78db      	ldrb	r3, [r3, #3]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d020      	beq.n	800faa6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa7a:	81bb      	strh	r3, [r7, #12]
 800fa7c:	89bb      	ldrh	r3, [r7, #12]
 800fa7e:	f083 0320 	eor.w	r3, r3, #32
 800fa82:	81bb      	strh	r3, [r7, #12]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	441a      	add	r2, r3
 800fa8e:	89bb      	ldrh	r3, [r7, #12]
 800fa90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	8013      	strh	r3, [r2, #0]
 800faa4:	e2bf      	b.n	8010026 <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fabc:	81fb      	strh	r3, [r7, #14]
 800fabe:	687a      	ldr	r2, [r7, #4]
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	441a      	add	r2, r3
 800fac8:	89fb      	ldrh	r3, [r7, #14]
 800faca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800face:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fada:	b29b      	uxth	r3, r3
 800fadc:	8013      	strh	r3, [r2, #0]
 800fade:	e2a2      	b.n	8010026 <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	633b      	str	r3, [r7, #48]	; 0x30
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800faea:	b29b      	uxth	r3, r3
 800faec:	461a      	mov	r2, r3
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	4413      	add	r3, r2
 800faf2:	633b      	str	r3, [r7, #48]	; 0x30
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	00da      	lsls	r2, r3, #3
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	4413      	add	r3, r2
 800fafe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fb02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	88db      	ldrh	r3, [r3, #6]
 800fb08:	085b      	lsrs	r3, r3, #1
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	005b      	lsls	r3, r3, #1
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	461a      	mov	r2, r3
 800fb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb24:	4413      	add	r3, r2
 800fb26:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	00da      	lsls	r2, r3, #3
 800fb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb30:	4413      	add	r3, r2
 800fb32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb36:	627b      	str	r3, [r7, #36]	; 0x24
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	691b      	ldr	r3, [r3, #16]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d112      	bne.n	800fb66 <USB_ActivateEndpoint+0x28a>
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4e:	801a      	strh	r2, [r3, #0]
 800fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb62:	801a      	strh	r2, [r3, #0]
 800fb64:	e02f      	b.n	800fbc6 <USB_ActivateEndpoint+0x2ea>
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	2b3e      	cmp	r3, #62	; 0x3e
 800fb6c:	d813      	bhi.n	800fb96 <USB_ActivateEndpoint+0x2ba>
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	691b      	ldr	r3, [r3, #16]
 800fb72:	085b      	lsrs	r3, r3, #1
 800fb74:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	f003 0301 	and.w	r3, r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d002      	beq.n	800fb88 <USB_ActivateEndpoint+0x2ac>
 800fb82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb84:	3301      	adds	r3, #1
 800fb86:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	029b      	lsls	r3, r3, #10
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	801a      	strh	r2, [r3, #0]
 800fb94:	e017      	b.n	800fbc6 <USB_ActivateEndpoint+0x2ea>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	095b      	lsrs	r3, r3, #5
 800fb9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	f003 031f 	and.w	r3, r3, #31
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d102      	bne.n	800fbb0 <USB_ActivateEndpoint+0x2d4>
 800fbaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbac:	3b01      	subs	r3, #1
 800fbae:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	029b      	lsls	r3, r3, #10
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	4413      	add	r3, r2
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	847b      	strh	r3, [r7, #34]	; 0x22
 800fbd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d01b      	beq.n	800fc16 <USB_ActivateEndpoint+0x33a>
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	881b      	ldrh	r3, [r3, #0]
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbf4:	843b      	strh	r3, [r7, #32]
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	441a      	add	r2, r3
 800fc00:	8c3b      	ldrh	r3, [r7, #32]
 800fc02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fc0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4413      	add	r3, r2
 800fc20:	881b      	ldrh	r3, [r3, #0]
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc2c:	83fb      	strh	r3, [r7, #30]
 800fc2e:	8bfb      	ldrh	r3, [r7, #30]
 800fc30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fc34:	83fb      	strh	r3, [r7, #30]
 800fc36:	8bfb      	ldrh	r3, [r7, #30]
 800fc38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fc3c:	83fb      	strh	r3, [r7, #30]
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	441a      	add	r2, r3
 800fc48:	8bfb      	ldrh	r3, [r7, #30]
 800fc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	8013      	strh	r3, [r2, #0]
 800fc5e:	e1e2      	b.n	8010026 <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	4413      	add	r3, r2
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	441a      	add	r2, r3
 800fc84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fc88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fc94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	663b      	str	r3, [r7, #96]	; 0x60
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	461a      	mov	r2, r3
 800fcaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcac:	4413      	add	r3, r2
 800fcae:	663b      	str	r3, [r7, #96]	; 0x60
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	00da      	lsls	r2, r3, #3
 800fcb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcb8:	4413      	add	r3, r2
 800fcba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fcbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	891b      	ldrh	r3, [r3, #8]
 800fcc4:	085b      	lsrs	r3, r3, #1
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	005b      	lsls	r3, r3, #1
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcce:	801a      	strh	r2, [r3, #0]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	461a      	mov	r2, r3
 800fcde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fce0:	4413      	add	r3, r2
 800fce2:	65bb      	str	r3, [r7, #88]	; 0x58
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	00da      	lsls	r2, r3, #3
 800fcea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcec:	4413      	add	r3, r2
 800fcee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fcf2:	657b      	str	r3, [r7, #84]	; 0x54
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	895b      	ldrh	r3, [r3, #10]
 800fcf8:	085b      	lsrs	r3, r3, #1
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	005b      	lsls	r3, r3, #1
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd02:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	785b      	ldrb	r3, [r3, #1]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f040 80b1 	bne.w	800fe70 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fd1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d01d      	beq.n	800fd66 <USB_ActivateEndpoint+0x48a>
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	4413      	add	r3, r2
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	441a      	add	r2, r3
 800fd4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fd5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4413      	add	r3, r2
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fd74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d01b      	beq.n	800fdb6 <USB_ActivateEndpoint+0x4da>
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	881b      	ldrh	r3, [r3, #0]
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd94:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	441a      	add	r2, r3
 800fda0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fda2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fda6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4413      	add	r3, r2
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	441a      	add	r2, r3
 800fdd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fdda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fde2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fde6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4413      	add	r3, r2
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe04:	873b      	strh	r3, [r7, #56]	; 0x38
 800fe06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fe08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fe0c:	873b      	strh	r3, [r7, #56]	; 0x38
 800fe0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fe10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fe14:	873b      	strh	r3, [r7, #56]	; 0x38
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	441a      	add	r2, r3
 800fe20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fe22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	4413      	add	r3, r2
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	441a      	add	r2, r3
 800fe58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	8013      	strh	r3, [r2, #0]
 800fe6e:	e0da      	b.n	8010026 <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800fe80:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800fe84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d01d      	beq.n	800fec8 <USB_ActivateEndpoint+0x5ec>
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4413      	add	r3, r2
 800fe96:	881b      	ldrh	r3, [r3, #0]
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fea2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	441a      	add	r2, r3
 800feb0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800feb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800feb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800febc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4413      	add	r3, r2
 800fed2:	881b      	ldrh	r3, [r3, #0]
 800fed4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800fed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01d      	beq.n	800ff20 <USB_ActivateEndpoint+0x644>
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	4413      	add	r3, r2
 800feee:	881b      	ldrh	r3, [r3, #0]
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fefa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	441a      	add	r2, r3
 800ff08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ff0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	4413      	add	r3, r2
 800ff2a:	881b      	ldrh	r3, [r3, #0]
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ff3a:	687a      	ldr	r2, [r7, #4]
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	009b      	lsls	r3, r3, #2
 800ff42:	441a      	add	r2, r3
 800ff44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ff48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ff54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	78db      	ldrb	r3, [r3, #3]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d024      	beq.n	800ffae <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	009b      	lsls	r3, r3, #2
 800ff6c:	4413      	add	r3, r2
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ff7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ff82:	f083 0320 	eor.w	r3, r3, #32
 800ff86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	441a      	add	r2, r3
 800ff94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ff98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	8013      	strh	r3, [r2, #0]
 800ffac:	e01d      	b.n	800ffea <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	441a      	add	r2, r3
 800ffd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ffd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	4413      	add	r3, r2
 800fff4:	881b      	ldrh	r3, [r3, #0]
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010000:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	441a      	add	r2, r3
 801000e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801001a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801001e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010022:	b29b      	uxth	r3, r3
 8010024:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8010026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801002a:	4618      	mov	r0, r3
 801002c:	3774      	adds	r7, #116	; 0x74
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop

08010038 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010038:	b480      	push	{r7}
 801003a:	b08d      	sub	sp, #52	; 0x34
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	7b1b      	ldrb	r3, [r3, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	f040 808e 	bne.w	8010168 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	785b      	ldrb	r3, [r3, #1]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d044      	beq.n	80100de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	4413      	add	r3, r2
 801005e:	881b      	ldrh	r3, [r3, #0]
 8010060:	81bb      	strh	r3, [r7, #12]
 8010062:	89bb      	ldrh	r3, [r7, #12]
 8010064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010068:	2b00      	cmp	r3, #0
 801006a:	d01b      	beq.n	80100a4 <USB_DeactivateEndpoint+0x6c>
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	4413      	add	r3, r2
 8010076:	881b      	ldrh	r3, [r3, #0]
 8010078:	b29b      	uxth	r3, r3
 801007a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801007e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010082:	817b      	strh	r3, [r7, #10]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	441a      	add	r2, r3
 801008e:	897b      	ldrh	r3, [r7, #10]
 8010090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801009c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	009b      	lsls	r3, r3, #2
 80100ac:	4413      	add	r3, r2
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100ba:	813b      	strh	r3, [r7, #8]
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	441a      	add	r2, r3
 80100c6:	893b      	ldrh	r3, [r7, #8]
 80100c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100d8:	b29b      	uxth	r3, r3
 80100da:	8013      	strh	r3, [r2, #0]
 80100dc:	e192      	b.n	8010404 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4413      	add	r3, r2
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	827b      	strh	r3, [r7, #18]
 80100ec:	8a7b      	ldrh	r3, [r7, #18]
 80100ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d01b      	beq.n	801012e <USB_DeactivateEndpoint+0xf6>
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	4413      	add	r3, r2
 8010100:	881b      	ldrh	r3, [r3, #0]
 8010102:	b29b      	uxth	r3, r3
 8010104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801010c:	823b      	strh	r3, [r7, #16]
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	441a      	add	r2, r3
 8010118:	8a3b      	ldrh	r3, [r7, #16]
 801011a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801011e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801012a:	b29b      	uxth	r3, r3
 801012c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4413      	add	r3, r2
 8010138:	881b      	ldrh	r3, [r3, #0]
 801013a:	b29b      	uxth	r3, r3
 801013c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010144:	81fb      	strh	r3, [r7, #14]
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	441a      	add	r2, r3
 8010150:	89fb      	ldrh	r3, [r7, #14]
 8010152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801015a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801015e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010162:	b29b      	uxth	r3, r3
 8010164:	8013      	strh	r3, [r2, #0]
 8010166:	e14d      	b.n	8010404 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	785b      	ldrb	r3, [r3, #1]
 801016c:	2b00      	cmp	r3, #0
 801016e:	f040 80a5 	bne.w	80102bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	4413      	add	r3, r2
 801017c:	881b      	ldrh	r3, [r3, #0]
 801017e:	843b      	strh	r3, [r7, #32]
 8010180:	8c3b      	ldrh	r3, [r7, #32]
 8010182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010186:	2b00      	cmp	r3, #0
 8010188:	d01b      	beq.n	80101c2 <USB_DeactivateEndpoint+0x18a>
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4413      	add	r3, r2
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	b29b      	uxth	r3, r3
 8010198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801019c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101a0:	83fb      	strh	r3, [r7, #30]
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	441a      	add	r2, r3
 80101ac:	8bfb      	ldrh	r3, [r7, #30]
 80101ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80101ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101be:	b29b      	uxth	r3, r3
 80101c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4413      	add	r3, r2
 80101cc:	881b      	ldrh	r3, [r3, #0]
 80101ce:	83bb      	strh	r3, [r7, #28]
 80101d0:	8bbb      	ldrh	r3, [r7, #28]
 80101d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d01b      	beq.n	8010212 <USB_DeactivateEndpoint+0x1da>
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101f0:	837b      	strh	r3, [r7, #26]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	441a      	add	r2, r3
 80101fc:	8b7b      	ldrh	r3, [r7, #26]
 80101fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801020a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801020e:	b29b      	uxth	r3, r3
 8010210:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	4413      	add	r3, r2
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	b29b      	uxth	r3, r3
 8010220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010228:	833b      	strh	r3, [r7, #24]
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	441a      	add	r2, r3
 8010234:	8b3b      	ldrh	r3, [r7, #24]
 8010236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801023a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801023e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010246:	b29b      	uxth	r3, r3
 8010248:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	4413      	add	r3, r2
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	b29b      	uxth	r3, r3
 8010258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801025c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010260:	82fb      	strh	r3, [r7, #22]
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	441a      	add	r2, r3
 801026c:	8afb      	ldrh	r3, [r7, #22]
 801026e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801027e:	b29b      	uxth	r3, r3
 8010280:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4413      	add	r3, r2
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	b29b      	uxth	r3, r3
 8010290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010298:	82bb      	strh	r3, [r7, #20]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	441a      	add	r2, r3
 80102a4:	8abb      	ldrh	r3, [r7, #20]
 80102a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	8013      	strh	r3, [r2, #0]
 80102ba:	e0a3      	b.n	8010404 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	881b      	ldrh	r3, [r3, #0]
 80102c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80102ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80102cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d01b      	beq.n	801030c <USB_DeactivateEndpoint+0x2d4>
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	4413      	add	r3, r2
 80102de:	881b      	ldrh	r3, [r3, #0]
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	441a      	add	r2, r3
 80102f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80102f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010308:	b29b      	uxth	r3, r3
 801030a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	4413      	add	r3, r2
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	857b      	strh	r3, [r7, #42]	; 0x2a
 801031a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801031c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010320:	2b00      	cmp	r3, #0
 8010322:	d01b      	beq.n	801035c <USB_DeactivateEndpoint+0x324>
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	4413      	add	r3, r2
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	b29b      	uxth	r3, r3
 8010332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801033a:	853b      	strh	r3, [r7, #40]	; 0x28
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	441a      	add	r2, r3
 8010346:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801034c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010354:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010358:	b29b      	uxth	r3, r3
 801035a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	4413      	add	r3, r2
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	b29b      	uxth	r3, r3
 801036a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801036e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010372:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	441a      	add	r2, r3
 801037e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801038c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010390:	b29b      	uxth	r3, r3
 8010392:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	4413      	add	r3, r2
 801039e:	881b      	ldrh	r3, [r3, #0]
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	441a      	add	r2, r3
 80103b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	4413      	add	r3, r2
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	b29b      	uxth	r3, r3
 80103da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80103de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	441a      	add	r2, r3
 80103ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010400:	b29b      	uxth	r3, r3
 8010402:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	3734      	adds	r7, #52	; 0x34
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b0a0      	sub	sp, #128	; 0x80
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	785b      	ldrb	r3, [r3, #1]
 8010420:	2b01      	cmp	r3, #1
 8010422:	f040 81a1 	bne.w	8010768 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	699a      	ldr	r2, [r3, #24]
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	429a      	cmp	r2, r3
 8010430:	d909      	bls.n	8010446 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	699a      	ldr	r2, [r3, #24]
 801043c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801043e:	1ad2      	subs	r2, r2, r3
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	619a      	str	r2, [r3, #24]
 8010444:	e005      	b.n	8010452 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	2200      	movs	r2, #0
 8010450:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	7b1b      	ldrb	r3, [r3, #12]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d11f      	bne.n	801049a <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	6959      	ldr	r1, [r3, #20]
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	88da      	ldrh	r2, [r3, #6]
 8010462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010464:	b29b      	uxth	r3, r3
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 fc56 	bl	8010d18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	613b      	str	r3, [r7, #16]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010476:	b29b      	uxth	r3, r3
 8010478:	461a      	mov	r2, r3
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	4413      	add	r3, r2
 801047e:	613b      	str	r3, [r7, #16]
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	00da      	lsls	r2, r3, #3
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	4413      	add	r3, r2
 801048a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010492:	b29a      	uxth	r2, r3
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	801a      	strh	r2, [r3, #0]
 8010498:	e141      	b.n	801071e <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4413      	add	r3, r2
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d076      	beq.n	801059e <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	627b      	str	r3, [r7, #36]	; 0x24
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	785b      	ldrb	r3, [r3, #1]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d153      	bne.n	8010564 <USB_EPStartXfer+0x152>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	61fb      	str	r3, [r7, #28]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	461a      	mov	r2, r3
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	4413      	add	r3, r2
 80104ce:	61fb      	str	r3, [r7, #28]
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	00da      	lsls	r2, r3, #3
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	4413      	add	r3, r2
 80104da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80104de:	61bb      	str	r3, [r7, #24]
 80104e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d112      	bne.n	801050c <USB_EPStartXfer+0xfa>
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	881b      	ldrh	r3, [r3, #0]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	801a      	strh	r2, [r3, #0]
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	881b      	ldrh	r3, [r3, #0]
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010504:	b29a      	uxth	r2, r3
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	801a      	strh	r2, [r3, #0]
 801050a:	e043      	b.n	8010594 <USB_EPStartXfer+0x182>
 801050c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801050e:	2b3e      	cmp	r3, #62	; 0x3e
 8010510:	d811      	bhi.n	8010536 <USB_EPStartXfer+0x124>
 8010512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010514:	085b      	lsrs	r3, r3, #1
 8010516:	677b      	str	r3, [r7, #116]	; 0x74
 8010518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801051a:	f003 0301 	and.w	r3, r3, #1
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <USB_EPStartXfer+0x116>
 8010522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010524:	3301      	adds	r3, #1
 8010526:	677b      	str	r3, [r7, #116]	; 0x74
 8010528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801052a:	b29b      	uxth	r3, r3
 801052c:	029b      	lsls	r3, r3, #10
 801052e:	b29a      	uxth	r2, r3
 8010530:	69bb      	ldr	r3, [r7, #24]
 8010532:	801a      	strh	r2, [r3, #0]
 8010534:	e02e      	b.n	8010594 <USB_EPStartXfer+0x182>
 8010536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010538:	095b      	lsrs	r3, r3, #5
 801053a:	677b      	str	r3, [r7, #116]	; 0x74
 801053c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801053e:	f003 031f 	and.w	r3, r3, #31
 8010542:	2b00      	cmp	r3, #0
 8010544:	d102      	bne.n	801054c <USB_EPStartXfer+0x13a>
 8010546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010548:	3b01      	subs	r3, #1
 801054a:	677b      	str	r3, [r7, #116]	; 0x74
 801054c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801054e:	b29b      	uxth	r3, r3
 8010550:	029b      	lsls	r3, r3, #10
 8010552:	b29b      	uxth	r3, r3
 8010554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801055c:	b29a      	uxth	r2, r3
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	801a      	strh	r2, [r3, #0]
 8010562:	e017      	b.n	8010594 <USB_EPStartXfer+0x182>
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	785b      	ldrb	r3, [r3, #1]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d113      	bne.n	8010594 <USB_EPStartXfer+0x182>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010572:	b29b      	uxth	r3, r3
 8010574:	461a      	mov	r2, r3
 8010576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010578:	4413      	add	r3, r2
 801057a:	627b      	str	r3, [r7, #36]	; 0x24
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	00da      	lsls	r2, r3, #3
 8010582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010584:	4413      	add	r3, r2
 8010586:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801058a:	623b      	str	r3, [r7, #32]
 801058c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801058e:	b29a      	uxth	r2, r3
 8010590:	6a3b      	ldr	r3, [r7, #32]
 8010592:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	895b      	ldrh	r3, [r3, #10]
 8010598:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801059c:	e075      	b.n	801068a <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	785b      	ldrb	r3, [r3, #1]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d153      	bne.n	801064e <USB_EPStartXfer+0x23c>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	461a      	mov	r2, r3
 80105b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b6:	4413      	add	r3, r2
 80105b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	00da      	lsls	r2, r3, #3
 80105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c2:	4413      	add	r3, r2
 80105c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80105c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80105ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d112      	bne.n	80105f6 <USB_EPStartXfer+0x1e4>
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d2:	881b      	ldrh	r3, [r3, #0]
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80105da:	b29a      	uxth	r2, r3
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	801a      	strh	r2, [r3, #0]
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	801a      	strh	r2, [r3, #0]
 80105f4:	e045      	b.n	8010682 <USB_EPStartXfer+0x270>
 80105f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105f8:	2b3e      	cmp	r3, #62	; 0x3e
 80105fa:	d811      	bhi.n	8010620 <USB_EPStartXfer+0x20e>
 80105fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105fe:	085b      	lsrs	r3, r3, #1
 8010600:	673b      	str	r3, [r7, #112]	; 0x70
 8010602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	2b00      	cmp	r3, #0
 801060a:	d002      	beq.n	8010612 <USB_EPStartXfer+0x200>
 801060c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801060e:	3301      	adds	r3, #1
 8010610:	673b      	str	r3, [r7, #112]	; 0x70
 8010612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010614:	b29b      	uxth	r3, r3
 8010616:	029b      	lsls	r3, r3, #10
 8010618:	b29a      	uxth	r2, r3
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	801a      	strh	r2, [r3, #0]
 801061e:	e030      	b.n	8010682 <USB_EPStartXfer+0x270>
 8010620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010622:	095b      	lsrs	r3, r3, #5
 8010624:	673b      	str	r3, [r7, #112]	; 0x70
 8010626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010628:	f003 031f 	and.w	r3, r3, #31
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <USB_EPStartXfer+0x224>
 8010630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010632:	3b01      	subs	r3, #1
 8010634:	673b      	str	r3, [r7, #112]	; 0x70
 8010636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010638:	b29b      	uxth	r3, r3
 801063a:	029b      	lsls	r3, r3, #10
 801063c:	b29b      	uxth	r3, r3
 801063e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010646:	b29a      	uxth	r2, r3
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	801a      	strh	r2, [r3, #0]
 801064c:	e019      	b.n	8010682 <USB_EPStartXfer+0x270>
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	785b      	ldrb	r3, [r3, #1]
 8010652:	2b01      	cmp	r3, #1
 8010654:	d115      	bne.n	8010682 <USB_EPStartXfer+0x270>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	637b      	str	r3, [r7, #52]	; 0x34
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010660:	b29b      	uxth	r3, r3
 8010662:	461a      	mov	r2, r3
 8010664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010666:	4413      	add	r3, r2
 8010668:	637b      	str	r3, [r7, #52]	; 0x34
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	00da      	lsls	r2, r3, #3
 8010670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010672:	4413      	add	r3, r2
 8010674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010678:	633b      	str	r3, [r7, #48]	; 0x30
 801067a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801067c:	b29a      	uxth	r2, r3
 801067e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010680:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	891b      	ldrh	r3, [r3, #8]
 8010686:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	6959      	ldr	r1, [r3, #20]
 801068e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010690:	b29b      	uxth	r3, r3
 8010692:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 fb3e 	bl	8010d18 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	785b      	ldrb	r3, [r3, #1]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d11c      	bne.n	80106de <USB_EPStartXfer+0x2cc>
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	4413      	add	r3, r2
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106ba:	82bb      	strh	r3, [r7, #20]
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	441a      	add	r2, r3
 80106c6:	8abb      	ldrh	r3, [r7, #20]
 80106c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80106d8:	b29b      	uxth	r3, r3
 80106da:	8013      	strh	r3, [r2, #0]
 80106dc:	e01f      	b.n	801071e <USB_EPStartXfer+0x30c>
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	785b      	ldrb	r3, [r3, #1]
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d11b      	bne.n	801071e <USB_EPStartXfer+0x30c>
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	4413      	add	r3, r2
 80106f0:	881b      	ldrh	r3, [r3, #0]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106fc:	82fb      	strh	r3, [r7, #22]
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	441a      	add	r2, r3
 8010708:	8afb      	ldrh	r3, [r7, #22]
 801070a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801070e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801071a:	b29b      	uxth	r3, r3
 801071c:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	4413      	add	r3, r2
 8010728:	881b      	ldrh	r3, [r3, #0]
 801072a:	b29b      	uxth	r3, r3
 801072c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010734:	817b      	strh	r3, [r7, #10]
 8010736:	897b      	ldrh	r3, [r7, #10]
 8010738:	f083 0310 	eor.w	r3, r3, #16
 801073c:	817b      	strh	r3, [r7, #10]
 801073e:	897b      	ldrh	r3, [r7, #10]
 8010740:	f083 0320 	eor.w	r3, r3, #32
 8010744:	817b      	strh	r3, [r7, #10]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	441a      	add	r2, r3
 8010750:	897b      	ldrh	r3, [r7, #10]
 8010752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801075a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801075e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010762:	b29b      	uxth	r3, r3
 8010764:	8013      	strh	r3, [r2, #0]
 8010766:	e175      	b.n	8010a54 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	699a      	ldr	r2, [r3, #24]
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	429a      	cmp	r2, r3
 8010772:	d909      	bls.n	8010788 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	691b      	ldr	r3, [r3, #16]
 8010778:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	699a      	ldr	r2, [r3, #24]
 801077e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010780:	1ad2      	subs	r2, r2, r3
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	619a      	str	r2, [r3, #24]
 8010786:	e005      	b.n	8010794 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	699b      	ldr	r3, [r3, #24]
 801078c:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	2200      	movs	r2, #0
 8010792:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	7b1b      	ldrb	r3, [r3, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d153      	bne.n	8010844 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	643b      	str	r3, [r7, #64]	; 0x40
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	461a      	mov	r2, r3
 80107aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ac:	4413      	add	r3, r2
 80107ae:	643b      	str	r3, [r7, #64]	; 0x40
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	00da      	lsls	r2, r3, #3
 80107b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b8:	4413      	add	r3, r2
 80107ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d112      	bne.n	80107ec <USB_EPStartXfer+0x3da>
 80107c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107c8:	881b      	ldrh	r3, [r3, #0]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d4:	801a      	strh	r2, [r3, #0]
 80107d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	b29b      	uxth	r3, r3
 80107dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107e8:	801a      	strh	r2, [r3, #0]
 80107ea:	e10f      	b.n	8010a0c <USB_EPStartXfer+0x5fa>
 80107ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107ee:	2b3e      	cmp	r3, #62	; 0x3e
 80107f0:	d811      	bhi.n	8010816 <USB_EPStartXfer+0x404>
 80107f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107f4:	085b      	lsrs	r3, r3, #1
 80107f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80107f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107fa:	f003 0301 	and.w	r3, r3, #1
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d002      	beq.n	8010808 <USB_EPStartXfer+0x3f6>
 8010802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010804:	3301      	adds	r3, #1
 8010806:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801080a:	b29b      	uxth	r3, r3
 801080c:	029b      	lsls	r3, r3, #10
 801080e:	b29a      	uxth	r2, r3
 8010810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010812:	801a      	strh	r2, [r3, #0]
 8010814:	e0fa      	b.n	8010a0c <USB_EPStartXfer+0x5fa>
 8010816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010818:	095b      	lsrs	r3, r3, #5
 801081a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801081c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801081e:	f003 031f 	and.w	r3, r3, #31
 8010822:	2b00      	cmp	r3, #0
 8010824:	d102      	bne.n	801082c <USB_EPStartXfer+0x41a>
 8010826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010828:	3b01      	subs	r3, #1
 801082a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801082c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801082e:	b29b      	uxth	r3, r3
 8010830:	029b      	lsls	r3, r3, #10
 8010832:	b29b      	uxth	r3, r3
 8010834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801083c:	b29a      	uxth	r2, r3
 801083e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010840:	801a      	strh	r2, [r3, #0]
 8010842:	e0e3      	b.n	8010a0c <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	785b      	ldrb	r3, [r3, #1]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d153      	bne.n	80108f4 <USB_EPStartXfer+0x4e2>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010856:	b29b      	uxth	r3, r3
 8010858:	461a      	mov	r2, r3
 801085a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801085c:	4413      	add	r3, r2
 801085e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	00da      	lsls	r2, r3, #3
 8010866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010868:	4413      	add	r3, r2
 801086a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801086e:	657b      	str	r3, [r7, #84]	; 0x54
 8010870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010872:	2b00      	cmp	r3, #0
 8010874:	d112      	bne.n	801089c <USB_EPStartXfer+0x48a>
 8010876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	b29b      	uxth	r3, r3
 801087c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010880:	b29a      	uxth	r2, r3
 8010882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010884:	801a      	strh	r2, [r3, #0]
 8010886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010888:	881b      	ldrh	r3, [r3, #0]
 801088a:	b29b      	uxth	r3, r3
 801088c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010894:	b29a      	uxth	r2, r3
 8010896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010898:	801a      	strh	r2, [r3, #0]
 801089a:	e045      	b.n	8010928 <USB_EPStartXfer+0x516>
 801089c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801089e:	2b3e      	cmp	r3, #62	; 0x3e
 80108a0:	d811      	bhi.n	80108c6 <USB_EPStartXfer+0x4b4>
 80108a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108a4:	085b      	lsrs	r3, r3, #1
 80108a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80108a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108aa:	f003 0301 	and.w	r3, r3, #1
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d002      	beq.n	80108b8 <USB_EPStartXfer+0x4a6>
 80108b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80108b4:	3301      	adds	r3, #1
 80108b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80108b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	029b      	lsls	r3, r3, #10
 80108be:	b29a      	uxth	r2, r3
 80108c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108c2:	801a      	strh	r2, [r3, #0]
 80108c4:	e030      	b.n	8010928 <USB_EPStartXfer+0x516>
 80108c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108c8:	095b      	lsrs	r3, r3, #5
 80108ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80108cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108ce:	f003 031f 	and.w	r3, r3, #31
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d102      	bne.n	80108dc <USB_EPStartXfer+0x4ca>
 80108d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80108d8:	3b01      	subs	r3, #1
 80108da:	66bb      	str	r3, [r7, #104]	; 0x68
 80108dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80108de:	b29b      	uxth	r3, r3
 80108e0:	029b      	lsls	r3, r3, #10
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108f0:	801a      	strh	r2, [r3, #0]
 80108f2:	e019      	b.n	8010928 <USB_EPStartXfer+0x516>
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	785b      	ldrb	r3, [r3, #1]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d115      	bne.n	8010928 <USB_EPStartXfer+0x516>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	663b      	str	r3, [r7, #96]	; 0x60
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010906:	b29b      	uxth	r3, r3
 8010908:	461a      	mov	r2, r3
 801090a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801090c:	4413      	add	r3, r2
 801090e:	663b      	str	r3, [r7, #96]	; 0x60
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	00da      	lsls	r2, r3, #3
 8010916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010918:	4413      	add	r3, r2
 801091a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801091e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010922:	b29a      	uxth	r2, r3
 8010924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010926:	801a      	strh	r2, [r3, #0]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	653b      	str	r3, [r7, #80]	; 0x50
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	785b      	ldrb	r3, [r3, #1]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d153      	bne.n	80109dc <USB_EPStartXfer+0x5ca>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	64bb      	str	r3, [r7, #72]	; 0x48
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801093e:	b29b      	uxth	r3, r3
 8010940:	461a      	mov	r2, r3
 8010942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010944:	4413      	add	r3, r2
 8010946:	64bb      	str	r3, [r7, #72]	; 0x48
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	00da      	lsls	r2, r3, #3
 801094e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010950:	4413      	add	r3, r2
 8010952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010956:	647b      	str	r3, [r7, #68]	; 0x44
 8010958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801095a:	2b00      	cmp	r3, #0
 801095c:	d112      	bne.n	8010984 <USB_EPStartXfer+0x572>
 801095e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	b29b      	uxth	r3, r3
 8010964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010968:	b29a      	uxth	r2, r3
 801096a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801096c:	801a      	strh	r2, [r3, #0]
 801096e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010970:	881b      	ldrh	r3, [r3, #0]
 8010972:	b29b      	uxth	r3, r3
 8010974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801097c:	b29a      	uxth	r2, r3
 801097e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010980:	801a      	strh	r2, [r3, #0]
 8010982:	e043      	b.n	8010a0c <USB_EPStartXfer+0x5fa>
 8010984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010986:	2b3e      	cmp	r3, #62	; 0x3e
 8010988:	d811      	bhi.n	80109ae <USB_EPStartXfer+0x59c>
 801098a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801098c:	085b      	lsrs	r3, r3, #1
 801098e:	667b      	str	r3, [r7, #100]	; 0x64
 8010990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010992:	f003 0301 	and.w	r3, r3, #1
 8010996:	2b00      	cmp	r3, #0
 8010998:	d002      	beq.n	80109a0 <USB_EPStartXfer+0x58e>
 801099a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801099c:	3301      	adds	r3, #1
 801099e:	667b      	str	r3, [r7, #100]	; 0x64
 80109a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	029b      	lsls	r3, r3, #10
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109aa:	801a      	strh	r2, [r3, #0]
 80109ac:	e02e      	b.n	8010a0c <USB_EPStartXfer+0x5fa>
 80109ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109b0:	095b      	lsrs	r3, r3, #5
 80109b2:	667b      	str	r3, [r7, #100]	; 0x64
 80109b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109b6:	f003 031f 	and.w	r3, r3, #31
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d102      	bne.n	80109c4 <USB_EPStartXfer+0x5b2>
 80109be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109c0:	3b01      	subs	r3, #1
 80109c2:	667b      	str	r3, [r7, #100]	; 0x64
 80109c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	029b      	lsls	r3, r3, #10
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109d8:	801a      	strh	r2, [r3, #0]
 80109da:	e017      	b.n	8010a0c <USB_EPStartXfer+0x5fa>
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	785b      	ldrb	r3, [r3, #1]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d113      	bne.n	8010a0c <USB_EPStartXfer+0x5fa>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	461a      	mov	r2, r3
 80109ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109f0:	4413      	add	r3, r2
 80109f2:	653b      	str	r3, [r7, #80]	; 0x50
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	00da      	lsls	r2, r3, #3
 80109fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109fc:	4413      	add	r3, r2
 80109fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a0a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	4413      	add	r3, r2
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a22:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010a24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010a2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010a2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010a32:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	441a      	add	r2, r3
 8010a3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3780      	adds	r7, #128	; 0x80
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a5e:	b480      	push	{r7}
 8010a60:	b085      	sub	sp, #20
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
 8010a66:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	785b      	ldrb	r3, [r3, #1]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d020      	beq.n	8010ab2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4413      	add	r3, r2
 8010a7a:	881b      	ldrh	r3, [r3, #0]
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a86:	81bb      	strh	r3, [r7, #12]
 8010a88:	89bb      	ldrh	r3, [r7, #12]
 8010a8a:	f083 0310 	eor.w	r3, r3, #16
 8010a8e:	81bb      	strh	r3, [r7, #12]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	441a      	add	r2, r3
 8010a9a:	89bb      	ldrh	r3, [r7, #12]
 8010a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	8013      	strh	r3, [r2, #0]
 8010ab0:	e01f      	b.n	8010af2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	009b      	lsls	r3, r3, #2
 8010aba:	4413      	add	r3, r2
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ac8:	81fb      	strh	r3, [r7, #14]
 8010aca:	89fb      	ldrh	r3, [r7, #14]
 8010acc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010ad0:	81fb      	strh	r3, [r7, #14]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	441a      	add	r2, r3
 8010adc:	89fb      	ldrh	r3, [r7, #14]
 8010ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010af2:	2300      	movs	r3, #0
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b087      	sub	sp, #28
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	7b1b      	ldrb	r3, [r3, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f040 809d 	bne.w	8010c4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	785b      	ldrb	r3, [r3, #1]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d04c      	beq.n	8010bb6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	4413      	add	r3, r2
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	823b      	strh	r3, [r7, #16]
 8010b2a:	8a3b      	ldrh	r3, [r7, #16]
 8010b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d01b      	beq.n	8010b6c <USB_EPClearStall+0x6c>
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	4413      	add	r3, r2
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b4a:	81fb      	strh	r3, [r7, #14]
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	441a      	add	r2, r3
 8010b56:	89fb      	ldrh	r3, [r7, #14]
 8010b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	78db      	ldrb	r3, [r3, #3]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d06c      	beq.n	8010c4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	4413      	add	r3, r2
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b8a:	81bb      	strh	r3, [r7, #12]
 8010b8c:	89bb      	ldrh	r3, [r7, #12]
 8010b8e:	f083 0320 	eor.w	r3, r3, #32
 8010b92:	81bb      	strh	r3, [r7, #12]
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	441a      	add	r2, r3
 8010b9e:	89bb      	ldrh	r3, [r7, #12]
 8010ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	8013      	strh	r3, [r2, #0]
 8010bb4:	e04b      	b.n	8010c4e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	4413      	add	r3, r2
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	82fb      	strh	r3, [r7, #22]
 8010bc4:	8afb      	ldrh	r3, [r7, #22]
 8010bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d01b      	beq.n	8010c06 <USB_EPClearStall+0x106>
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	4413      	add	r3, r2
 8010bd8:	881b      	ldrh	r3, [r3, #0]
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010be4:	82bb      	strh	r3, [r7, #20]
 8010be6:	687a      	ldr	r2, [r7, #4]
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	441a      	add	r2, r3
 8010bf0:	8abb      	ldrh	r3, [r7, #20]
 8010bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	4413      	add	r3, r2
 8010c10:	881b      	ldrh	r3, [r3, #0]
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c1c:	827b      	strh	r3, [r7, #18]
 8010c1e:	8a7b      	ldrh	r3, [r7, #18]
 8010c20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010c24:	827b      	strh	r3, [r7, #18]
 8010c26:	8a7b      	ldrh	r3, [r7, #18]
 8010c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010c2c:	827b      	strh	r3, [r7, #18]
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	441a      	add	r2, r3
 8010c38:	8a7b      	ldrh	r3, [r7, #18]
 8010c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	371c      	adds	r7, #28
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2201      	movs	r2, #1
 8010c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2203      	movs	r2, #3
 8010c78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	370c      	adds	r7, #12
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr

08010c8a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b083      	sub	sp, #12
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
 8010c92:	460b      	mov	r3, r1
 8010c94:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010c96:	78fb      	ldrb	r3, [r7, #3]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d103      	bne.n	8010ca4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2280      	movs	r2, #128	; 0x80
 8010ca0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010ca4:	2300      	movs	r3, #0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	370c      	adds	r7, #12
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr

08010cb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010cb2:	b480      	push	{r7}
 8010cb4:	b083      	sub	sp, #12
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3714      	adds	r7, #20
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8010d0a:	2300      	movs	r3, #0
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	370c      	adds	r7, #12
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b08d      	sub	sp, #52	; 0x34
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	4611      	mov	r1, r2
 8010d24:	461a      	mov	r2, r3
 8010d26:	460b      	mov	r3, r1
 8010d28:	80fb      	strh	r3, [r7, #6]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010d2e:	88bb      	ldrh	r3, [r7, #4]
 8010d30:	3301      	adds	r3, #1
 8010d32:	085b      	lsrs	r3, r3, #1
 8010d34:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010d3e:	88fa      	ldrh	r2, [r7, #6]
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	4413      	add	r3, r2
 8010d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d48:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8010d4a:	6a3b      	ldr	r3, [r7, #32]
 8010d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d4e:	e01b      	b.n	8010d88 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8010d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d58:	3301      	adds	r3, #1
 8010d5a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	021b      	lsls	r3, r3, #8
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	461a      	mov	r2, r3
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	4313      	orrs	r3, r2
 8010d6c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d74:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d78:	3302      	adds	r3, #2
 8010d7a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8010d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7e:	3301      	adds	r3, #1
 8010d80:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8010d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d84:	3b01      	subs	r3, #1
 8010d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1e0      	bne.n	8010d50 <USB_WritePMA+0x38>
  }
}
 8010d8e:	bf00      	nop
 8010d90:	3734      	adds	r7, #52	; 0x34
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr

08010d9a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	b08b      	sub	sp, #44	; 0x2c
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	60f8      	str	r0, [r7, #12]
 8010da2:	60b9      	str	r1, [r7, #8]
 8010da4:	4611      	mov	r1, r2
 8010da6:	461a      	mov	r2, r3
 8010da8:	460b      	mov	r3, r1
 8010daa:	80fb      	strh	r3, [r7, #6]
 8010dac:	4613      	mov	r3, r2
 8010dae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010db0:	88bb      	ldrh	r3, [r7, #4]
 8010db2:	085b      	lsrs	r3, r3, #1
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010dc0:	88fa      	ldrh	r2, [r7, #6]
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010dca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	627b      	str	r3, [r7, #36]	; 0x24
 8010dd0:	e018      	b.n	8010e04 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8010dd2:	6a3b      	ldr	r3, [r7, #32]
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010dda:	6a3b      	ldr	r3, [r7, #32]
 8010ddc:	3302      	adds	r3, #2
 8010dde:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	3301      	adds	r3, #1
 8010dec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	0a1b      	lsrs	r3, r3, #8
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	3b01      	subs	r3, #1
 8010e02:	627b      	str	r3, [r7, #36]	; 0x24
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1e3      	bne.n	8010dd2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8010e0a:	88bb      	ldrh	r3, [r7, #4]
 8010e0c:	f003 0301 	and.w	r3, r3, #1
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d007      	beq.n	8010e26 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8010e16:	6a3b      	ldr	r3, [r7, #32]
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	b2da      	uxtb	r2, r3
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	701a      	strb	r2, [r3, #0]
  }
}
 8010e26:	bf00      	nop
 8010e28:	372c      	adds	r7, #44	; 0x2c
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr

08010e32 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e32:	b580      	push	{r7, lr}
 8010e34:	b084      	sub	sp, #16
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
 8010e3a:	460b      	mov	r3, r1
 8010e3c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010e3e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010e42:	f009 ffbf 	bl	801adc4 <USBD_static_malloc>
 8010e46:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d105      	bne.n	8010e5a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010e56:	2302      	movs	r3, #2
 8010e58:	e066      	b.n	8010f28 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	7c1b      	ldrb	r3, [r3, #16]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d119      	bne.n	8010e9e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e6e:	2202      	movs	r2, #2
 8010e70:	2181      	movs	r1, #129	; 0x81
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f009 fe52 	bl	801ab1c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e82:	2202      	movs	r2, #2
 8010e84:	2101      	movs	r1, #1
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f009 fe48 	bl	801ab1c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2201      	movs	r2, #1
 8010e90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2210      	movs	r2, #16
 8010e98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010e9c:	e016      	b.n	8010ecc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010e9e:	2340      	movs	r3, #64	; 0x40
 8010ea0:	2202      	movs	r2, #2
 8010ea2:	2181      	movs	r1, #129	; 0x81
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f009 fe39 	bl	801ab1c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2201      	movs	r2, #1
 8010eae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010eb0:	2340      	movs	r3, #64	; 0x40
 8010eb2:	2202      	movs	r2, #2
 8010eb4:	2101      	movs	r1, #1
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f009 fe30 	bl	801ab1c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2210      	movs	r2, #16
 8010ec8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010ecc:	2308      	movs	r3, #8
 8010ece:	2203      	movs	r2, #3
 8010ed0:	2182      	movs	r1, #130	; 0x82
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f009 fe22 	bl	801ab1c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2201      	movs	r2, #1
 8010edc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2200      	movs	r2, #0
 8010eee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	7c1b      	ldrb	r3, [r3, #16]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d109      	bne.n	8010f16 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f009 feed 	bl	801acee <USBD_LL_PrepareReceive>
 8010f14:	e007      	b.n	8010f26 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f1c:	2340      	movs	r3, #64	; 0x40
 8010f1e:	2101      	movs	r1, #1
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f009 fee4 	bl	801acee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3710      	adds	r7, #16
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010f3c:	2181      	movs	r1, #129	; 0x81
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f009 fe12 	bl	801ab68 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010f4a:	2101      	movs	r1, #1
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f009 fe0b 	bl	801ab68 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2200      	movs	r2, #0
 8010f56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010f5a:	2182      	movs	r1, #130	; 0x82
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f009 fe03 	bl	801ab68 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2200      	movs	r2, #0
 8010f66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00e      	beq.n	8010f9a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f009 ff27 	bl	801ade0 <USBD_static_free>
    pdev->pClassData = NULL;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010f9a:	2300      	movs	r3, #0
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b086      	sub	sp, #24
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d101      	bne.n	8010fcc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010fc8:	2303      	movs	r3, #3
 8010fca:	e0af      	b.n	801112c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d03f      	beq.n	8011058 <USBD_CDC_Setup+0xb4>
 8010fd8:	2b20      	cmp	r3, #32
 8010fda:	f040 809f 	bne.w	801111c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	88db      	ldrh	r3, [r3, #6]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d02e      	beq.n	8011044 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	b25b      	sxtb	r3, r3
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	da16      	bge.n	801101e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ff6:	689b      	ldr	r3, [r3, #8]
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010ffc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	88d2      	ldrh	r2, [r2, #6]
 8011002:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	88db      	ldrh	r3, [r3, #6]
 8011008:	2b07      	cmp	r3, #7
 801100a:	bf28      	it	cs
 801100c:	2307      	movcs	r3, #7
 801100e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	89fa      	ldrh	r2, [r7, #14]
 8011014:	4619      	mov	r1, r3
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f001 faaa 	bl	8012570 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801101c:	e085      	b.n	801112a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	785a      	ldrb	r2, [r3, #1]
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	88db      	ldrh	r3, [r3, #6]
 801102c:	b2da      	uxtb	r2, r3
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011034:	6939      	ldr	r1, [r7, #16]
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	88db      	ldrh	r3, [r3, #6]
 801103a:	461a      	mov	r2, r3
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f001 fac3 	bl	80125c8 <USBD_CtlPrepareRx>
      break;
 8011042:	e072      	b.n	801112a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	7850      	ldrb	r0, [r2, #1]
 8011050:	2200      	movs	r2, #0
 8011052:	6839      	ldr	r1, [r7, #0]
 8011054:	4798      	blx	r3
      break;
 8011056:	e068      	b.n	801112a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	785b      	ldrb	r3, [r3, #1]
 801105c:	2b0b      	cmp	r3, #11
 801105e:	d852      	bhi.n	8011106 <USBD_CDC_Setup+0x162>
 8011060:	a201      	add	r2, pc, #4	; (adr r2, 8011068 <USBD_CDC_Setup+0xc4>)
 8011062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011066:	bf00      	nop
 8011068:	08011099 	.word	0x08011099
 801106c:	08011115 	.word	0x08011115
 8011070:	08011107 	.word	0x08011107
 8011074:	08011107 	.word	0x08011107
 8011078:	08011107 	.word	0x08011107
 801107c:	08011107 	.word	0x08011107
 8011080:	08011107 	.word	0x08011107
 8011084:	08011107 	.word	0x08011107
 8011088:	08011107 	.word	0x08011107
 801108c:	08011107 	.word	0x08011107
 8011090:	080110c3 	.word	0x080110c3
 8011094:	080110ed 	.word	0x080110ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	2b03      	cmp	r3, #3
 80110a2:	d107      	bne.n	80110b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80110a4:	f107 030a 	add.w	r3, r7, #10
 80110a8:	2202      	movs	r2, #2
 80110aa:	4619      	mov	r1, r3
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f001 fa5f 	bl	8012570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80110b2:	e032      	b.n	801111a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80110b4:	6839      	ldr	r1, [r7, #0]
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f001 f9e9 	bl	801248e <USBD_CtlError>
            ret = USBD_FAIL;
 80110bc:	2303      	movs	r3, #3
 80110be:	75fb      	strb	r3, [r7, #23]
          break;
 80110c0:	e02b      	b.n	801111a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	2b03      	cmp	r3, #3
 80110cc:	d107      	bne.n	80110de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80110ce:	f107 030d 	add.w	r3, r7, #13
 80110d2:	2201      	movs	r2, #1
 80110d4:	4619      	mov	r1, r3
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f001 fa4a 	bl	8012570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80110dc:	e01d      	b.n	801111a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80110de:	6839      	ldr	r1, [r7, #0]
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f001 f9d4 	bl	801248e <USBD_CtlError>
            ret = USBD_FAIL;
 80110e6:	2303      	movs	r3, #3
 80110e8:	75fb      	strb	r3, [r7, #23]
          break;
 80110ea:	e016      	b.n	801111a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b03      	cmp	r3, #3
 80110f6:	d00f      	beq.n	8011118 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80110f8:	6839      	ldr	r1, [r7, #0]
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f001 f9c7 	bl	801248e <USBD_CtlError>
            ret = USBD_FAIL;
 8011100:	2303      	movs	r3, #3
 8011102:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011104:	e008      	b.n	8011118 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011106:	6839      	ldr	r1, [r7, #0]
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f001 f9c0 	bl	801248e <USBD_CtlError>
          ret = USBD_FAIL;
 801110e:	2303      	movs	r3, #3
 8011110:	75fb      	strb	r3, [r7, #23]
          break;
 8011112:	e002      	b.n	801111a <USBD_CDC_Setup+0x176>
          break;
 8011114:	bf00      	nop
 8011116:	e008      	b.n	801112a <USBD_CDC_Setup+0x186>
          break;
 8011118:	bf00      	nop
      }
      break;
 801111a:	e006      	b.n	801112a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f001 f9b5 	bl	801248e <USBD_CtlError>
      ret = USBD_FAIL;
 8011124:	2303      	movs	r3, #3
 8011126:	75fb      	strb	r3, [r7, #23]
      break;
 8011128:	bf00      	nop
  }

  return (uint8_t)ret;
 801112a:	7dfb      	ldrb	r3, [r7, #23]
}
 801112c:	4618      	mov	r0, r3
 801112e:	3718      	adds	r7, #24
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	460b      	mov	r3, r1
 801113e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801114e:	2b00      	cmp	r3, #0
 8011150:	d101      	bne.n	8011156 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011152:	2303      	movs	r3, #3
 8011154:	e04c      	b.n	80111f0 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801115c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801115e:	78fa      	ldrb	r2, [r7, #3]
 8011160:	6879      	ldr	r1, [r7, #4]
 8011162:	4613      	mov	r3, r2
 8011164:	009b      	lsls	r3, r3, #2
 8011166:	4413      	add	r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	440b      	add	r3, r1
 801116c:	3318      	adds	r3, #24
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d026      	beq.n	80111c2 <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011174:	78fa      	ldrb	r2, [r7, #3]
 8011176:	6879      	ldr	r1, [r7, #4]
 8011178:	4613      	mov	r3, r2
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	4413      	add	r3, r2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	440b      	add	r3, r1
 8011182:	3318      	adds	r3, #24
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	78fa      	ldrb	r2, [r7, #3]
 8011188:	68f9      	ldr	r1, [r7, #12]
 801118a:	0152      	lsls	r2, r2, #5
 801118c:	440a      	add	r2, r1
 801118e:	3238      	adds	r2, #56	; 0x38
 8011190:	6812      	ldr	r2, [r2, #0]
 8011192:	fbb3 f1f2 	udiv	r1, r3, r2
 8011196:	fb02 f201 	mul.w	r2, r2, r1
 801119a:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801119c:	2b00      	cmp	r3, #0
 801119e:	d110      	bne.n	80111c2 <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80111a0:	78fa      	ldrb	r2, [r7, #3]
 80111a2:	6879      	ldr	r1, [r7, #4]
 80111a4:	4613      	mov	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	4413      	add	r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	440b      	add	r3, r1
 80111ae:	3318      	adds	r3, #24
 80111b0:	2200      	movs	r2, #0
 80111b2:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80111b4:	78f9      	ldrb	r1, [r7, #3]
 80111b6:	2300      	movs	r3, #0
 80111b8:	2200      	movs	r2, #0
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f009 fd76 	bl	801acac <USBD_LL_Transmit>
 80111c0:	e015      	b.n	80111ee <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	2200      	movs	r2, #0
 80111c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111d0:	691b      	ldr	r3, [r3, #16]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d00b      	beq.n	80111ee <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	68ba      	ldr	r2, [r7, #8]
 80111e0:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80111e4:	68ba      	ldr	r2, [r7, #8]
 80111e6:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80111ea:	78fa      	ldrb	r2, [r7, #3]
 80111ec:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80111ee:	2300      	movs	r3, #0
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3710      	adds	r7, #16
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801120a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011212:	2b00      	cmp	r3, #0
 8011214:	d101      	bne.n	801121a <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011216:	2303      	movs	r3, #3
 8011218:	e015      	b.n	8011246 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801121a:	78fb      	ldrb	r3, [r7, #3]
 801121c:	4619      	mov	r1, r3
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f009 fd86 	bl	801ad30 <USBD_LL_GetRxDataSize>
 8011224:	4602      	mov	r2, r0
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801123a:	68fa      	ldr	r2, [r7, #12]
 801123c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011240:	4611      	mov	r1, r2
 8011242:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011244:	2300      	movs	r3, #0
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b084      	sub	sp, #16
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801125c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d101      	bne.n	8011268 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011264:	2303      	movs	r3, #3
 8011266:	e01b      	b.n	80112a0 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d015      	beq.n	801129e <USBD_CDC_EP0_RxReady+0x50>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011278:	2bff      	cmp	r3, #255	; 0xff
 801127a:	d010      	beq.n	801129e <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	68fa      	ldr	r2, [r7, #12]
 8011286:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801128a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801128c:	68fa      	ldr	r2, [r7, #12]
 801128e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011292:	b292      	uxth	r2, r2
 8011294:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	22ff      	movs	r2, #255	; 0xff
 801129a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801129e:	2300      	movs	r3, #0
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3710      	adds	r7, #16
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2243      	movs	r2, #67	; 0x43
 80112b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80112b6:	4b03      	ldr	r3, [pc, #12]	; (80112c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	2000010c 	.word	0x2000010c

080112c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2243      	movs	r2, #67	; 0x43
 80112d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80112d6:	4b03      	ldr	r3, [pc, #12]	; (80112e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	200000c8 	.word	0x200000c8

080112e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2243      	movs	r2, #67	; 0x43
 80112f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80112f6:	4b03      	ldr	r3, [pc, #12]	; (8011304 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	20000150 	.word	0x20000150

08011308 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	220a      	movs	r2, #10
 8011314:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011316:	4b03      	ldr	r3, [pc, #12]	; (8011324 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011318:	4618      	mov	r0, r3
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr
 8011324:	20000084 	.word	0x20000084

08011328 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011328:	b480      	push	{r7}
 801132a:	b083      	sub	sp, #12
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011338:	2303      	movs	r3, #3
 801133a:	e004      	b.n	8011346 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011344:	2300      	movs	r3, #0
}
 8011346:	4618      	mov	r0, r3
 8011348:	370c      	adds	r7, #12
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr

08011352 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011352:	b480      	push	{r7}
 8011354:	b087      	sub	sp, #28
 8011356:	af00      	add	r7, sp, #0
 8011358:	60f8      	str	r0, [r7, #12]
 801135a:	60b9      	str	r1, [r7, #8]
 801135c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011364:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d101      	bne.n	8011370 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801136c:	2303      	movs	r3, #3
 801136e:	e008      	b.n	8011382 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011380:	2300      	movs	r3, #0
}
 8011382:	4618      	mov	r0, r3
 8011384:	371c      	adds	r7, #28
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801138e:	b480      	push	{r7}
 8011390:	b085      	sub	sp, #20
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]
 8011396:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801139e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d101      	bne.n	80113aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80113a6:	2303      	movs	r3, #3
 80113a8:	e004      	b.n	80113b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	683a      	ldr	r2, [r7, #0]
 80113ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80113b2:	2300      	movs	r3, #0
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr

080113c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d101      	bne.n	80113de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80113da:	2303      	movs	r3, #3
 80113dc:	e016      	b.n	801140c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	7c1b      	ldrb	r3, [r3, #16]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d109      	bne.n	80113fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80113ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80113f0:	2101      	movs	r1, #1
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f009 fc7b 	bl	801acee <USBD_LL_PrepareReceive>
 80113f8:	e007      	b.n	801140a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011400:	2340      	movs	r3, #64	; 0x40
 8011402:	2101      	movs	r1, #1
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f009 fc72 	bl	801acee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b086      	sub	sp, #24
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4613      	mov	r3, r2
 8011420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011428:	2303      	movs	r3, #3
 801142a:	e01f      	b.n	801146c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2200      	movs	r2, #0
 8011430:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2200      	movs	r2, #0
 8011438:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2200      	movs	r2, #0
 8011440:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d003      	beq.n	8011452 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2201      	movs	r2, #1
 8011456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	79fa      	ldrb	r2, [r7, #7]
 801145e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f009 fac3 	bl	801a9ec <USBD_LL_Init>
 8011466:	4603      	mov	r3, r0
 8011468:	75fb      	strb	r3, [r7, #23]

  return ret;
 801146a:	7dfb      	ldrb	r3, [r7, #23]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3718      	adds	r7, #24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b084      	sub	sp, #16
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801147e:	2300      	movs	r3, #0
 8011480:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d101      	bne.n	801148c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011488:	2303      	movs	r3, #3
 801148a:	e016      	b.n	80114ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	683a      	ldr	r2, [r7, #0]
 8011490:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00b      	beq.n	80114b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a8:	f107 020e 	add.w	r2, r7, #14
 80114ac:	4610      	mov	r0, r2
 80114ae:	4798      	blx	r3
 80114b0:	4602      	mov	r2, r0
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b082      	sub	sp, #8
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f009 faf0 	bl	801aab0 <USBD_LL_Start>
 80114d0:	4603      	mov	r3, r0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b082      	sub	sp, #8
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f009 faff 	bl	801aae6 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d009      	beq.n	8011506 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	6852      	ldr	r2, [r2, #4]
 80114fe:	b2d2      	uxtb	r2, r2
 8011500:	4611      	mov	r1, r2
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	4798      	blx	r3
  }

  return USBD_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	370c      	adds	r7, #12
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr

08011526 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011526:	b580      	push	{r7, lr}
 8011528:	b084      	sub	sp, #16
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
 801152e:	460b      	mov	r3, r1
 8011530:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011532:	2303      	movs	r3, #3
 8011534:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801153c:	2b00      	cmp	r3, #0
 801153e:	d009      	beq.n	8011554 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	78fa      	ldrb	r2, [r7, #3]
 801154a:	4611      	mov	r1, r2
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	4798      	blx	r3
 8011550:	4603      	mov	r3, r0
 8011552:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011554:	7bfb      	ldrb	r3, [r7, #15]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b082      	sub	sp, #8
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
 8011566:	460b      	mov	r3, r1
 8011568:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011570:	2b00      	cmp	r3, #0
 8011572:	d007      	beq.n	8011584 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	78fa      	ldrb	r2, [r7, #3]
 801157e:	4611      	mov	r1, r2
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	4798      	blx	r3
  }

  return USBD_OK;
 8011584:	2300      	movs	r3, #0
}
 8011586:	4618      	mov	r0, r3
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}

0801158e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801158e:	b580      	push	{r7, lr}
 8011590:	b084      	sub	sp, #16
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
 8011596:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801159e:	6839      	ldr	r1, [r7, #0]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f000 ff3a 	bl	801241a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2201      	movs	r2, #1
 80115aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80115b4:	461a      	mov	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80115c2:	f003 031f 	and.w	r3, r3, #31
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d00e      	beq.n	80115e8 <USBD_LL_SetupStage+0x5a>
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d302      	bcc.n	80115d4 <USBD_LL_SetupStage+0x46>
 80115ce:	2b02      	cmp	r3, #2
 80115d0:	d014      	beq.n	80115fc <USBD_LL_SetupStage+0x6e>
 80115d2:	e01d      	b.n	8011610 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80115da:	4619      	mov	r1, r3
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f000 f9ef 	bl	80119c0 <USBD_StdDevReq>
 80115e2:	4603      	mov	r3, r0
 80115e4:	73fb      	strb	r3, [r7, #15]
      break;
 80115e6:	e020      	b.n	801162a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80115ee:	4619      	mov	r1, r3
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 fa53 	bl	8011a9c <USBD_StdItfReq>
 80115f6:	4603      	mov	r3, r0
 80115f8:	73fb      	strb	r3, [r7, #15]
      break;
 80115fa:	e016      	b.n	801162a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011602:	4619      	mov	r1, r3
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f000 fa90 	bl	8011b2a <USBD_StdEPReq>
 801160a:	4603      	mov	r3, r0
 801160c:	73fb      	strb	r3, [r7, #15]
      break;
 801160e:	e00c      	b.n	801162a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011616:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801161a:	b2db      	uxtb	r3, r3
 801161c:	4619      	mov	r1, r3
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f009 fac1 	bl	801aba6 <USBD_LL_StallEP>
 8011624:	4603      	mov	r3, r0
 8011626:	73fb      	strb	r3, [r7, #15]
      break;
 8011628:	bf00      	nop
  }

  return ret;
 801162a:	7bfb      	ldrb	r3, [r7, #15]
}
 801162c:	4618      	mov	r0, r3
 801162e:	3710      	adds	r7, #16
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b086      	sub	sp, #24
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	460b      	mov	r3, r1
 801163e:	607a      	str	r2, [r7, #4]
 8011640:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011642:	7afb      	ldrb	r3, [r7, #11]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d138      	bne.n	80116ba <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801164e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011656:	2b03      	cmp	r3, #3
 8011658:	d14a      	bne.n	80116f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	689a      	ldr	r2, [r3, #8]
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	429a      	cmp	r2, r3
 8011664:	d913      	bls.n	801168e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	689a      	ldr	r2, [r3, #8]
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	1ad2      	subs	r2, r2, r3
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	68da      	ldr	r2, [r3, #12]
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	4293      	cmp	r3, r2
 801167e:	bf28      	it	cs
 8011680:	4613      	movcs	r3, r2
 8011682:	461a      	mov	r2, r3
 8011684:	6879      	ldr	r1, [r7, #4]
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f000 ffbb 	bl	8012602 <USBD_CtlContinueRx>
 801168c:	e030      	b.n	80116f0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011694:	b2db      	uxtb	r3, r3
 8011696:	2b03      	cmp	r3, #3
 8011698:	d10b      	bne.n	80116b2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a0:	691b      	ldr	r3, [r3, #16]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d005      	beq.n	80116b2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f000 ffb6 	bl	8012624 <USBD_CtlSendStatus>
 80116b8:	e01a      	b.n	80116f0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116c0:	b2db      	uxtb	r3, r3
 80116c2:	2b03      	cmp	r3, #3
 80116c4:	d114      	bne.n	80116f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116cc:	699b      	ldr	r3, [r3, #24]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00e      	beq.n	80116f0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116d8:	699b      	ldr	r3, [r3, #24]
 80116da:	7afa      	ldrb	r2, [r7, #11]
 80116dc:	4611      	mov	r1, r2
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	4798      	blx	r3
 80116e2:	4603      	mov	r3, r0
 80116e4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80116e6:	7dfb      	ldrb	r3, [r7, #23]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d001      	beq.n	80116f0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80116ec:	7dfb      	ldrb	r3, [r7, #23]
 80116ee:	e000      	b.n	80116f2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80116f0:	2300      	movs	r3, #0
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3718      	adds	r7, #24
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}

080116fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80116fa:	b580      	push	{r7, lr}
 80116fc:	b086      	sub	sp, #24
 80116fe:	af00      	add	r7, sp, #0
 8011700:	60f8      	str	r0, [r7, #12]
 8011702:	460b      	mov	r3, r1
 8011704:	607a      	str	r2, [r7, #4]
 8011706:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011708:	7afb      	ldrb	r3, [r7, #11]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d16b      	bne.n	80117e6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3314      	adds	r3, #20
 8011712:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801171a:	2b02      	cmp	r3, #2
 801171c:	d156      	bne.n	80117cc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	689a      	ldr	r2, [r3, #8]
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	429a      	cmp	r2, r3
 8011728:	d914      	bls.n	8011754 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	689a      	ldr	r2, [r3, #8]
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	1ad2      	subs	r2, r2, r3
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	461a      	mov	r2, r3
 801173e:	6879      	ldr	r1, [r7, #4]
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f000 ff30 	bl	80125a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011746:	2300      	movs	r3, #0
 8011748:	2200      	movs	r2, #0
 801174a:	2100      	movs	r1, #0
 801174c:	68f8      	ldr	r0, [r7, #12]
 801174e:	f009 face 	bl	801acee <USBD_LL_PrepareReceive>
 8011752:	e03b      	b.n	80117cc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	68da      	ldr	r2, [r3, #12]
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	429a      	cmp	r2, r3
 801175e:	d11c      	bne.n	801179a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011768:	429a      	cmp	r2, r3
 801176a:	d316      	bcc.n	801179a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	685a      	ldr	r2, [r3, #4]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011776:	429a      	cmp	r2, r3
 8011778:	d20f      	bcs.n	801179a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801177a:	2200      	movs	r2, #0
 801177c:	2100      	movs	r1, #0
 801177e:	68f8      	ldr	r0, [r7, #12]
 8011780:	f000 ff11 	bl	80125a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2200      	movs	r2, #0
 8011788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801178c:	2300      	movs	r3, #0
 801178e:	2200      	movs	r2, #0
 8011790:	2100      	movs	r1, #0
 8011792:	68f8      	ldr	r0, [r7, #12]
 8011794:	f009 faab 	bl	801acee <USBD_LL_PrepareReceive>
 8011798:	e018      	b.n	80117cc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	2b03      	cmp	r3, #3
 80117a4:	d10b      	bne.n	80117be <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d005      	beq.n	80117be <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	68f8      	ldr	r0, [r7, #12]
 80117bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80117be:	2180      	movs	r1, #128	; 0x80
 80117c0:	68f8      	ldr	r0, [r7, #12]
 80117c2:	f009 f9f0 	bl	801aba6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f000 ff3f 	bl	801264a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d122      	bne.n	801181c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f7ff fe9a 	bl	8011510 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2200      	movs	r2, #0
 80117e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80117e4:	e01a      	b.n	801181c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	2b03      	cmp	r3, #3
 80117f0:	d114      	bne.n	801181c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117f8:	695b      	ldr	r3, [r3, #20]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00e      	beq.n	801181c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	7afa      	ldrb	r2, [r7, #11]
 8011808:	4611      	mov	r1, r2
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	4798      	blx	r3
 801180e:	4603      	mov	r3, r0
 8011810:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011812:	7dfb      	ldrb	r3, [r7, #23]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011818:	7dfb      	ldrb	r3, [r7, #23]
 801181a:	e000      	b.n	801181e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	3718      	adds	r7, #24
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011826:	b580      	push	{r7, lr}
 8011828:	b082      	sub	sp, #8
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2201      	movs	r2, #1
 8011832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2200      	movs	r2, #0
 801183a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2200      	movs	r2, #0
 8011848:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011852:	2b00      	cmp	r3, #0
 8011854:	d101      	bne.n	801185a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011856:	2303      	movs	r3, #3
 8011858:	e02f      	b.n	80118ba <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011860:	2b00      	cmp	r3, #0
 8011862:	d00f      	beq.n	8011884 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d009      	beq.n	8011884 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	6852      	ldr	r2, [r2, #4]
 801187c:	b2d2      	uxtb	r2, r2
 801187e:	4611      	mov	r1, r2
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011884:	2340      	movs	r3, #64	; 0x40
 8011886:	2200      	movs	r2, #0
 8011888:	2100      	movs	r1, #0
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f009 f946 	bl	801ab1c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2201      	movs	r2, #1
 8011894:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2240      	movs	r2, #64	; 0x40
 801189c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80118a0:	2340      	movs	r3, #64	; 0x40
 80118a2:	2200      	movs	r2, #0
 80118a4:	2180      	movs	r1, #128	; 0x80
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f009 f938 	bl	801ab1c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2201      	movs	r2, #1
 80118b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2240      	movs	r2, #64	; 0x40
 80118b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80118b8:	2300      	movs	r3, #0
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3708      	adds	r7, #8
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80118c2:	b480      	push	{r7}
 80118c4:	b083      	sub	sp, #12
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
 80118ca:	460b      	mov	r3, r1
 80118cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	78fa      	ldrb	r2, [r7, #3]
 80118d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80118d4:	2300      	movs	r3, #0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	370c      	adds	r7, #12
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr

080118e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80118e2:	b480      	push	{r7}
 80118e4:	b083      	sub	sp, #12
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118f0:	b2da      	uxtb	r2, r3
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2204      	movs	r2, #4
 80118fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011900:	2300      	movs	r3, #0
}
 8011902:	4618      	mov	r0, r3
 8011904:	370c      	adds	r7, #12
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr

0801190e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801190e:	b480      	push	{r7}
 8011910:	b083      	sub	sp, #12
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801191c:	b2db      	uxtb	r3, r3
 801191e:	2b04      	cmp	r3, #4
 8011920:	d106      	bne.n	8011930 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011928:	b2da      	uxtb	r2, r3
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011930:	2300      	movs	r3, #0
}
 8011932:	4618      	mov	r0, r3
 8011934:	370c      	adds	r7, #12
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr

0801193e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801193e:	b580      	push	{r7, lr}
 8011940:	b082      	sub	sp, #8
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801194c:	2b00      	cmp	r3, #0
 801194e:	d101      	bne.n	8011954 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011950:	2303      	movs	r3, #3
 8011952:	e012      	b.n	801197a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801195a:	b2db      	uxtb	r3, r3
 801195c:	2b03      	cmp	r3, #3
 801195e:	d10b      	bne.n	8011978 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011966:	69db      	ldr	r3, [r3, #28]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d005      	beq.n	8011978 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011972:	69db      	ldr	r3, [r3, #28]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011978:	2300      	movs	r3, #0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011982:	b480      	push	{r7}
 8011984:	b087      	sub	sp, #28
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	3301      	adds	r3, #1
 8011998:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80119a0:	8a3b      	ldrh	r3, [r7, #16]
 80119a2:	021b      	lsls	r3, r3, #8
 80119a4:	b21a      	sxth	r2, r3
 80119a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119aa:	4313      	orrs	r3, r2
 80119ac:	b21b      	sxth	r3, r3
 80119ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80119b0:	89fb      	ldrh	r3, [r7, #14]
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	371c      	adds	r7, #28
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
	...

080119c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119d6:	2b20      	cmp	r3, #32
 80119d8:	d004      	beq.n	80119e4 <USBD_StdDevReq+0x24>
 80119da:	2b40      	cmp	r3, #64	; 0x40
 80119dc:	d002      	beq.n	80119e4 <USBD_StdDevReq+0x24>
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00a      	beq.n	80119f8 <USBD_StdDevReq+0x38>
 80119e2:	e050      	b.n	8011a86 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119ea:	689b      	ldr	r3, [r3, #8]
 80119ec:	6839      	ldr	r1, [r7, #0]
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	4798      	blx	r3
 80119f2:	4603      	mov	r3, r0
 80119f4:	73fb      	strb	r3, [r7, #15]
      break;
 80119f6:	e04b      	b.n	8011a90 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	785b      	ldrb	r3, [r3, #1]
 80119fc:	2b09      	cmp	r3, #9
 80119fe:	d83c      	bhi.n	8011a7a <USBD_StdDevReq+0xba>
 8011a00:	a201      	add	r2, pc, #4	; (adr r2, 8011a08 <USBD_StdDevReq+0x48>)
 8011a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a06:	bf00      	nop
 8011a08:	08011a5d 	.word	0x08011a5d
 8011a0c:	08011a71 	.word	0x08011a71
 8011a10:	08011a7b 	.word	0x08011a7b
 8011a14:	08011a67 	.word	0x08011a67
 8011a18:	08011a7b 	.word	0x08011a7b
 8011a1c:	08011a3b 	.word	0x08011a3b
 8011a20:	08011a31 	.word	0x08011a31
 8011a24:	08011a7b 	.word	0x08011a7b
 8011a28:	08011a53 	.word	0x08011a53
 8011a2c:	08011a45 	.word	0x08011a45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 f9d4 	bl	8011de0 <USBD_GetDescriptor>
          break;
 8011a38:	e024      	b.n	8011a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011a3a:	6839      	ldr	r1, [r7, #0]
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 fb63 	bl	8012108 <USBD_SetAddress>
          break;
 8011a42:	e01f      	b.n	8011a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011a44:	6839      	ldr	r1, [r7, #0]
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 fba2 	bl	8012190 <USBD_SetConfig>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	73fb      	strb	r3, [r7, #15]
          break;
 8011a50:	e018      	b.n	8011a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a52:	6839      	ldr	r1, [r7, #0]
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 fc41 	bl	80122dc <USBD_GetConfig>
          break;
 8011a5a:	e013      	b.n	8011a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a5c:	6839      	ldr	r1, [r7, #0]
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 fc71 	bl	8012346 <USBD_GetStatus>
          break;
 8011a64:	e00e      	b.n	8011a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a66:	6839      	ldr	r1, [r7, #0]
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f000 fca0 	bl	80123ae <USBD_SetFeature>
          break;
 8011a6e:	e009      	b.n	8011a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f000 fcaf 	bl	80123d6 <USBD_ClrFeature>
          break;
 8011a78:	e004      	b.n	8011a84 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011a7a:	6839      	ldr	r1, [r7, #0]
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 fd06 	bl	801248e <USBD_CtlError>
          break;
 8011a82:	bf00      	nop
      }
      break;
 8011a84:	e004      	b.n	8011a90 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011a86:	6839      	ldr	r1, [r7, #0]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 fd00 	bl	801248e <USBD_CtlError>
      break;
 8011a8e:	bf00      	nop
  }

  return ret;
 8011a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop

08011a9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ab2:	2b20      	cmp	r3, #32
 8011ab4:	d003      	beq.n	8011abe <USBD_StdItfReq+0x22>
 8011ab6:	2b40      	cmp	r3, #64	; 0x40
 8011ab8:	d001      	beq.n	8011abe <USBD_StdItfReq+0x22>
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d12b      	bne.n	8011b16 <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	3b01      	subs	r3, #1
 8011ac8:	2b02      	cmp	r3, #2
 8011aca:	d81d      	bhi.n	8011b08 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	889b      	ldrh	r3, [r3, #4]
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b01      	cmp	r3, #1
 8011ad4:	d813      	bhi.n	8011afe <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011adc:	689b      	ldr	r3, [r3, #8]
 8011ade:	6839      	ldr	r1, [r7, #0]
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	4798      	blx	r3
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	88db      	ldrh	r3, [r3, #6]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d110      	bne.n	8011b12 <USBD_StdItfReq+0x76>
 8011af0:	7bfb      	ldrb	r3, [r7, #15]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d10d      	bne.n	8011b12 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fd94 	bl	8012624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011afc:	e009      	b.n	8011b12 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 8011afe:	6839      	ldr	r1, [r7, #0]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 fcc4 	bl	801248e <USBD_CtlError>
          break;
 8011b06:	e004      	b.n	8011b12 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 8011b08:	6839      	ldr	r1, [r7, #0]
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 fcbf 	bl	801248e <USBD_CtlError>
          break;
 8011b10:	e000      	b.n	8011b14 <USBD_StdItfReq+0x78>
          break;
 8011b12:	bf00      	nop
      }
      break;
 8011b14:	e004      	b.n	8011b20 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 fcb8 	bl	801248e <USBD_CtlError>
      break;
 8011b1e:	bf00      	nop
  }

  return ret;
 8011b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b084      	sub	sp, #16
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
 8011b32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	889b      	ldrh	r3, [r3, #4]
 8011b3c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b46:	2b20      	cmp	r3, #32
 8011b48:	d004      	beq.n	8011b54 <USBD_StdEPReq+0x2a>
 8011b4a:	2b40      	cmp	r3, #64	; 0x40
 8011b4c:	d002      	beq.n	8011b54 <USBD_StdEPReq+0x2a>
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d00a      	beq.n	8011b68 <USBD_StdEPReq+0x3e>
 8011b52:	e13a      	b.n	8011dca <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b5a:	689b      	ldr	r3, [r3, #8]
 8011b5c:	6839      	ldr	r1, [r7, #0]
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	4798      	blx	r3
 8011b62:	4603      	mov	r3, r0
 8011b64:	73fb      	strb	r3, [r7, #15]
      break;
 8011b66:	e135      	b.n	8011dd4 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	785b      	ldrb	r3, [r3, #1]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d03f      	beq.n	8011bf0 <USBD_StdEPReq+0xc6>
 8011b70:	2b03      	cmp	r3, #3
 8011b72:	d002      	beq.n	8011b7a <USBD_StdEPReq+0x50>
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d07b      	beq.n	8011c70 <USBD_StdEPReq+0x146>
 8011b78:	e121      	b.n	8011dbe <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	d002      	beq.n	8011b8c <USBD_StdEPReq+0x62>
 8011b86:	2b03      	cmp	r3, #3
 8011b88:	d015      	beq.n	8011bb6 <USBD_StdEPReq+0x8c>
 8011b8a:	e02b      	b.n	8011be4 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b8c:	7bbb      	ldrb	r3, [r7, #14]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d00c      	beq.n	8011bac <USBD_StdEPReq+0x82>
 8011b92:	7bbb      	ldrb	r3, [r7, #14]
 8011b94:	2b80      	cmp	r3, #128	; 0x80
 8011b96:	d009      	beq.n	8011bac <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b98:	7bbb      	ldrb	r3, [r7, #14]
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f009 f802 	bl	801aba6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ba2:	2180      	movs	r1, #128	; 0x80
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f008 fffe 	bl	801aba6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011baa:	e020      	b.n	8011bee <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fc6d 	bl	801248e <USBD_CtlError>
              break;
 8011bb4:	e01b      	b.n	8011bee <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	885b      	ldrh	r3, [r3, #2]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d10e      	bne.n	8011bdc <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d00b      	beq.n	8011bdc <USBD_StdEPReq+0xb2>
 8011bc4:	7bbb      	ldrb	r3, [r7, #14]
 8011bc6:	2b80      	cmp	r3, #128	; 0x80
 8011bc8:	d008      	beq.n	8011bdc <USBD_StdEPReq+0xb2>
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	88db      	ldrh	r3, [r3, #6]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d104      	bne.n	8011bdc <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bd2:	7bbb      	ldrb	r3, [r7, #14]
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f008 ffe5 	bl	801aba6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 fd21 	bl	8012624 <USBD_CtlSendStatus>

              break;
 8011be2:	e004      	b.n	8011bee <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 8011be4:	6839      	ldr	r1, [r7, #0]
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f000 fc51 	bl	801248e <USBD_CtlError>
              break;
 8011bec:	bf00      	nop
          }
          break;
 8011bee:	e0eb      	b.n	8011dc8 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b02      	cmp	r3, #2
 8011bfa:	d002      	beq.n	8011c02 <USBD_StdEPReq+0xd8>
 8011bfc:	2b03      	cmp	r3, #3
 8011bfe:	d015      	beq.n	8011c2c <USBD_StdEPReq+0x102>
 8011c00:	e02f      	b.n	8011c62 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c02:	7bbb      	ldrb	r3, [r7, #14]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d00c      	beq.n	8011c22 <USBD_StdEPReq+0xf8>
 8011c08:	7bbb      	ldrb	r3, [r7, #14]
 8011c0a:	2b80      	cmp	r3, #128	; 0x80
 8011c0c:	d009      	beq.n	8011c22 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c0e:	7bbb      	ldrb	r3, [r7, #14]
 8011c10:	4619      	mov	r1, r3
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f008 ffc7 	bl	801aba6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c18:	2180      	movs	r1, #128	; 0x80
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f008 ffc3 	bl	801aba6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c20:	e025      	b.n	8011c6e <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 8011c22:	6839      	ldr	r1, [r7, #0]
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f000 fc32 	bl	801248e <USBD_CtlError>
              break;
 8011c2a:	e020      	b.n	8011c6e <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	885b      	ldrh	r3, [r3, #2]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d11b      	bne.n	8011c6c <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011c34:	7bbb      	ldrb	r3, [r7, #14]
 8011c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d004      	beq.n	8011c48 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c3e:	7bbb      	ldrb	r3, [r7, #14]
 8011c40:	4619      	mov	r1, r3
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f008 ffce 	bl	801abe4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 fceb 	bl	8012624 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c54:	689b      	ldr	r3, [r3, #8]
 8011c56:	6839      	ldr	r1, [r7, #0]
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	4798      	blx	r3
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011c60:	e004      	b.n	8011c6c <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 8011c62:	6839      	ldr	r1, [r7, #0]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f000 fc12 	bl	801248e <USBD_CtlError>
              break;
 8011c6a:	e000      	b.n	8011c6e <USBD_StdEPReq+0x144>
              break;
 8011c6c:	bf00      	nop
          }
          break;
 8011c6e:	e0ab      	b.n	8011dc8 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	2b02      	cmp	r3, #2
 8011c7a:	d002      	beq.n	8011c82 <USBD_StdEPReq+0x158>
 8011c7c:	2b03      	cmp	r3, #3
 8011c7e:	d032      	beq.n	8011ce6 <USBD_StdEPReq+0x1bc>
 8011c80:	e097      	b.n	8011db2 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c82:	7bbb      	ldrb	r3, [r7, #14]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d007      	beq.n	8011c98 <USBD_StdEPReq+0x16e>
 8011c88:	7bbb      	ldrb	r3, [r7, #14]
 8011c8a:	2b80      	cmp	r3, #128	; 0x80
 8011c8c:	d004      	beq.n	8011c98 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fbfc 	bl	801248e <USBD_CtlError>
                break;
 8011c96:	e091      	b.n	8011dbc <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	da0b      	bge.n	8011cb8 <USBD_StdEPReq+0x18e>
 8011ca0:	7bbb      	ldrb	r3, [r7, #14]
 8011ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	3310      	adds	r3, #16
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	3304      	adds	r3, #4
 8011cb6:	e00b      	b.n	8011cd0 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011cb8:	7bbb      	ldrb	r3, [r7, #14]
 8011cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	4413      	add	r3, r2
 8011cce:	3304      	adds	r3, #4
 8011cd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	2202      	movs	r2, #2
 8011cdc:	4619      	mov	r1, r3
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f000 fc46 	bl	8012570 <USBD_CtlSendData>
              break;
 8011ce4:	e06a      	b.n	8011dbc <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	da11      	bge.n	8011d12 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011cee:	7bbb      	ldrb	r3, [r7, #14]
 8011cf0:	f003 020f 	and.w	r2, r3, #15
 8011cf4:	6879      	ldr	r1, [r7, #4]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	440b      	add	r3, r1
 8011d00:	3324      	adds	r3, #36	; 0x24
 8011d02:	881b      	ldrh	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d117      	bne.n	8011d38 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 fbbf 	bl	801248e <USBD_CtlError>
                  break;
 8011d10:	e054      	b.n	8011dbc <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011d12:	7bbb      	ldrb	r3, [r7, #14]
 8011d14:	f003 020f 	and.w	r2, r3, #15
 8011d18:	6879      	ldr	r1, [r7, #4]
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4413      	add	r3, r2
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	440b      	add	r3, r1
 8011d24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011d28:	881b      	ldrh	r3, [r3, #0]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d104      	bne.n	8011d38 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8011d2e:	6839      	ldr	r1, [r7, #0]
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f000 fbac 	bl	801248e <USBD_CtlError>
                  break;
 8011d36:	e041      	b.n	8011dbc <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	da0b      	bge.n	8011d58 <USBD_StdEPReq+0x22e>
 8011d40:	7bbb      	ldrb	r3, [r7, #14]
 8011d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d46:	4613      	mov	r3, r2
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	4413      	add	r3, r2
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	3310      	adds	r3, #16
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	4413      	add	r3, r2
 8011d54:	3304      	adds	r3, #4
 8011d56:	e00b      	b.n	8011d70 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d58:	7bbb      	ldrb	r3, [r7, #14]
 8011d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d5e:	4613      	mov	r3, r2
 8011d60:	009b      	lsls	r3, r3, #2
 8011d62:	4413      	add	r3, r2
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	3304      	adds	r3, #4
 8011d70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011d72:	7bbb      	ldrb	r3, [r7, #14]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d002      	beq.n	8011d7e <USBD_StdEPReq+0x254>
 8011d78:	7bbb      	ldrb	r3, [r7, #14]
 8011d7a:	2b80      	cmp	r3, #128	; 0x80
 8011d7c:	d103      	bne.n	8011d86 <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	2200      	movs	r2, #0
 8011d82:	601a      	str	r2, [r3, #0]
 8011d84:	e00e      	b.n	8011da4 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011d86:	7bbb      	ldrb	r3, [r7, #14]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f008 ff49 	bl	801ac22 <USBD_LL_IsStallEP>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d003      	beq.n	8011d9e <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	2201      	movs	r2, #1
 8011d9a:	601a      	str	r2, [r3, #0]
 8011d9c:	e002      	b.n	8011da4 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	2200      	movs	r2, #0
 8011da2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2202      	movs	r2, #2
 8011da8:	4619      	mov	r1, r3
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 fbe0 	bl	8012570 <USBD_CtlSendData>
              break;
 8011db0:	e004      	b.n	8011dbc <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 fb6a 	bl	801248e <USBD_CtlError>
              break;
 8011dba:	bf00      	nop
          }
          break;
 8011dbc:	e004      	b.n	8011dc8 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 8011dbe:	6839      	ldr	r1, [r7, #0]
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f000 fb64 	bl	801248e <USBD_CtlError>
          break;
 8011dc6:	bf00      	nop
      }
      break;
 8011dc8:	e004      	b.n	8011dd4 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f000 fb5e 	bl	801248e <USBD_CtlError>
      break;
 8011dd2:	bf00      	nop
  }

  return ret;
 8011dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
	...

08011de0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011dea:	2300      	movs	r3, #0
 8011dec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011dee:	2300      	movs	r3, #0
 8011df0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011df2:	2300      	movs	r3, #0
 8011df4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	885b      	ldrh	r3, [r3, #2]
 8011dfa:	0a1b      	lsrs	r3, r3, #8
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	3b01      	subs	r3, #1
 8011e00:	2b0e      	cmp	r3, #14
 8011e02:	f200 8152 	bhi.w	80120aa <USBD_GetDescriptor+0x2ca>
 8011e06:	a201      	add	r2, pc, #4	; (adr r2, 8011e0c <USBD_GetDescriptor+0x2c>)
 8011e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e0c:	08011e7d 	.word	0x08011e7d
 8011e10:	08011e95 	.word	0x08011e95
 8011e14:	08011ed5 	.word	0x08011ed5
 8011e18:	080120ab 	.word	0x080120ab
 8011e1c:	080120ab 	.word	0x080120ab
 8011e20:	0801204b 	.word	0x0801204b
 8011e24:	08012077 	.word	0x08012077
 8011e28:	080120ab 	.word	0x080120ab
 8011e2c:	080120ab 	.word	0x080120ab
 8011e30:	080120ab 	.word	0x080120ab
 8011e34:	080120ab 	.word	0x080120ab
 8011e38:	080120ab 	.word	0x080120ab
 8011e3c:	080120ab 	.word	0x080120ab
 8011e40:	080120ab 	.word	0x080120ab
 8011e44:	08011e49 	.word	0x08011e49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4e:	69db      	ldr	r3, [r3, #28]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00b      	beq.n	8011e6c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e5a:	69db      	ldr	r3, [r3, #28]
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	7c12      	ldrb	r2, [r2, #16]
 8011e60:	f107 0108 	add.w	r1, r7, #8
 8011e64:	4610      	mov	r0, r2
 8011e66:	4798      	blx	r3
 8011e68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e6a:	e126      	b.n	80120ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f000 fb0d 	bl	801248e <USBD_CtlError>
        err++;
 8011e74:	7afb      	ldrb	r3, [r7, #11]
 8011e76:	3301      	adds	r3, #1
 8011e78:	72fb      	strb	r3, [r7, #11]
      break;
 8011e7a:	e11e      	b.n	80120ba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	7c12      	ldrb	r2, [r2, #16]
 8011e88:	f107 0108 	add.w	r1, r7, #8
 8011e8c:	4610      	mov	r0, r2
 8011e8e:	4798      	blx	r3
 8011e90:	60f8      	str	r0, [r7, #12]
      break;
 8011e92:	e112      	b.n	80120ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	7c1b      	ldrb	r3, [r3, #16]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10d      	bne.n	8011eb8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ea4:	f107 0208 	add.w	r2, r7, #8
 8011ea8:	4610      	mov	r0, r2
 8011eaa:	4798      	blx	r3
 8011eac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	2202      	movs	r2, #2
 8011eb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011eb6:	e100      	b.n	80120ba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec0:	f107 0208 	add.w	r2, r7, #8
 8011ec4:	4610      	mov	r0, r2
 8011ec6:	4798      	blx	r3
 8011ec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	2202      	movs	r2, #2
 8011ed0:	701a      	strb	r2, [r3, #0]
      break;
 8011ed2:	e0f2      	b.n	80120ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	885b      	ldrh	r3, [r3, #2]
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	2b05      	cmp	r3, #5
 8011edc:	f200 80ac 	bhi.w	8012038 <USBD_GetDescriptor+0x258>
 8011ee0:	a201      	add	r2, pc, #4	; (adr r2, 8011ee8 <USBD_GetDescriptor+0x108>)
 8011ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee6:	bf00      	nop
 8011ee8:	08011f01 	.word	0x08011f01
 8011eec:	08011f35 	.word	0x08011f35
 8011ef0:	08011f69 	.word	0x08011f69
 8011ef4:	08011f9d 	.word	0x08011f9d
 8011ef8:	08011fd1 	.word	0x08011fd1
 8011efc:	08012005 	.word	0x08012005
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00b      	beq.n	8011f24 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	7c12      	ldrb	r2, [r2, #16]
 8011f18:	f107 0108 	add.w	r1, r7, #8
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	4798      	blx	r3
 8011f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f22:	e091      	b.n	8012048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f24:	6839      	ldr	r1, [r7, #0]
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fab1 	bl	801248e <USBD_CtlError>
            err++;
 8011f2c:	7afb      	ldrb	r3, [r7, #11]
 8011f2e:	3301      	adds	r3, #1
 8011f30:	72fb      	strb	r3, [r7, #11]
          break;
 8011f32:	e089      	b.n	8012048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d00b      	beq.n	8011f58 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f46:	689b      	ldr	r3, [r3, #8]
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	7c12      	ldrb	r2, [r2, #16]
 8011f4c:	f107 0108 	add.w	r1, r7, #8
 8011f50:	4610      	mov	r0, r2
 8011f52:	4798      	blx	r3
 8011f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f56:	e077      	b.n	8012048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f58:	6839      	ldr	r1, [r7, #0]
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fa97 	bl	801248e <USBD_CtlError>
            err++;
 8011f60:	7afb      	ldrb	r3, [r7, #11]
 8011f62:	3301      	adds	r3, #1
 8011f64:	72fb      	strb	r3, [r7, #11]
          break;
 8011f66:	e06f      	b.n	8012048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f6e:	68db      	ldr	r3, [r3, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d00b      	beq.n	8011f8c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	7c12      	ldrb	r2, [r2, #16]
 8011f80:	f107 0108 	add.w	r1, r7, #8
 8011f84:	4610      	mov	r0, r2
 8011f86:	4798      	blx	r3
 8011f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f8a:	e05d      	b.n	8012048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f8c:	6839      	ldr	r1, [r7, #0]
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 fa7d 	bl	801248e <USBD_CtlError>
            err++;
 8011f94:	7afb      	ldrb	r3, [r7, #11]
 8011f96:	3301      	adds	r3, #1
 8011f98:	72fb      	strb	r3, [r7, #11]
          break;
 8011f9a:	e055      	b.n	8012048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fa2:	691b      	ldr	r3, [r3, #16]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00b      	beq.n	8011fc0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fae:	691b      	ldr	r3, [r3, #16]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	7c12      	ldrb	r2, [r2, #16]
 8011fb4:	f107 0108 	add.w	r1, r7, #8
 8011fb8:	4610      	mov	r0, r2
 8011fba:	4798      	blx	r3
 8011fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fbe:	e043      	b.n	8012048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011fc0:	6839      	ldr	r1, [r7, #0]
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 fa63 	bl	801248e <USBD_CtlError>
            err++;
 8011fc8:	7afb      	ldrb	r3, [r7, #11]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8011fce:	e03b      	b.n	8012048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fd6:	695b      	ldr	r3, [r3, #20]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00b      	beq.n	8011ff4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fe2:	695b      	ldr	r3, [r3, #20]
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	7c12      	ldrb	r2, [r2, #16]
 8011fe8:	f107 0108 	add.w	r1, r7, #8
 8011fec:	4610      	mov	r0, r2
 8011fee:	4798      	blx	r3
 8011ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ff2:	e029      	b.n	8012048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011ff4:	6839      	ldr	r1, [r7, #0]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 fa49 	bl	801248e <USBD_CtlError>
            err++;
 8011ffc:	7afb      	ldrb	r3, [r7, #11]
 8011ffe:	3301      	adds	r3, #1
 8012000:	72fb      	strb	r3, [r7, #11]
          break;
 8012002:	e021      	b.n	8012048 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801200a:	699b      	ldr	r3, [r3, #24]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00b      	beq.n	8012028 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012016:	699b      	ldr	r3, [r3, #24]
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	7c12      	ldrb	r2, [r2, #16]
 801201c:	f107 0108 	add.w	r1, r7, #8
 8012020:	4610      	mov	r0, r2
 8012022:	4798      	blx	r3
 8012024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012026:	e00f      	b.n	8012048 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012028:	6839      	ldr	r1, [r7, #0]
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f000 fa2f 	bl	801248e <USBD_CtlError>
            err++;
 8012030:	7afb      	ldrb	r3, [r7, #11]
 8012032:	3301      	adds	r3, #1
 8012034:	72fb      	strb	r3, [r7, #11]
          break;
 8012036:	e007      	b.n	8012048 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012038:	6839      	ldr	r1, [r7, #0]
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 fa27 	bl	801248e <USBD_CtlError>
          err++;
 8012040:	7afb      	ldrb	r3, [r7, #11]
 8012042:	3301      	adds	r3, #1
 8012044:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012046:	bf00      	nop
      }
      break;
 8012048:	e037      	b.n	80120ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	7c1b      	ldrb	r3, [r3, #16]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d109      	bne.n	8012066 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801205a:	f107 0208 	add.w	r2, r7, #8
 801205e:	4610      	mov	r0, r2
 8012060:	4798      	blx	r3
 8012062:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012064:	e029      	b.n	80120ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012066:	6839      	ldr	r1, [r7, #0]
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f000 fa10 	bl	801248e <USBD_CtlError>
        err++;
 801206e:	7afb      	ldrb	r3, [r7, #11]
 8012070:	3301      	adds	r3, #1
 8012072:	72fb      	strb	r3, [r7, #11]
      break;
 8012074:	e021      	b.n	80120ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	7c1b      	ldrb	r3, [r3, #16]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d10d      	bne.n	801209a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012086:	f107 0208 	add.w	r2, r7, #8
 801208a:	4610      	mov	r0, r2
 801208c:	4798      	blx	r3
 801208e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	3301      	adds	r3, #1
 8012094:	2207      	movs	r2, #7
 8012096:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012098:	e00f      	b.n	80120ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801209a:	6839      	ldr	r1, [r7, #0]
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f000 f9f6 	bl	801248e <USBD_CtlError>
        err++;
 80120a2:	7afb      	ldrb	r3, [r7, #11]
 80120a4:	3301      	adds	r3, #1
 80120a6:	72fb      	strb	r3, [r7, #11]
      break;
 80120a8:	e007      	b.n	80120ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80120aa:	6839      	ldr	r1, [r7, #0]
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f9ee 	bl	801248e <USBD_CtlError>
      err++;
 80120b2:	7afb      	ldrb	r3, [r7, #11]
 80120b4:	3301      	adds	r3, #1
 80120b6:	72fb      	strb	r3, [r7, #11]
      break;
 80120b8:	bf00      	nop
  }

  if (err != 0U)
 80120ba:	7afb      	ldrb	r3, [r7, #11]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d11e      	bne.n	80120fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	88db      	ldrh	r3, [r3, #6]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d016      	beq.n	80120f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80120c8:	893b      	ldrh	r3, [r7, #8]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00e      	beq.n	80120ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	88da      	ldrh	r2, [r3, #6]
 80120d2:	893b      	ldrh	r3, [r7, #8]
 80120d4:	4293      	cmp	r3, r2
 80120d6:	bf28      	it	cs
 80120d8:	4613      	movcs	r3, r2
 80120da:	b29b      	uxth	r3, r3
 80120dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80120de:	893b      	ldrh	r3, [r7, #8]
 80120e0:	461a      	mov	r2, r3
 80120e2:	68f9      	ldr	r1, [r7, #12]
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 fa43 	bl	8012570 <USBD_CtlSendData>
 80120ea:	e009      	b.n	8012100 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80120ec:	6839      	ldr	r1, [r7, #0]
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f000 f9cd 	bl	801248e <USBD_CtlError>
 80120f4:	e004      	b.n	8012100 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 fa94 	bl	8012624 <USBD_CtlSendStatus>
 80120fc:	e000      	b.n	8012100 <USBD_GetDescriptor+0x320>
    return;
 80120fe:	bf00      	nop
  }
}
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop

08012108 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	889b      	ldrh	r3, [r3, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d131      	bne.n	801217e <USBD_SetAddress+0x76>
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	88db      	ldrh	r3, [r3, #6]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d12d      	bne.n	801217e <USBD_SetAddress+0x76>
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	885b      	ldrh	r3, [r3, #2]
 8012126:	2b7f      	cmp	r3, #127	; 0x7f
 8012128:	d829      	bhi.n	801217e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	885b      	ldrh	r3, [r3, #2]
 801212e:	b2db      	uxtb	r3, r3
 8012130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012134:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801213c:	b2db      	uxtb	r3, r3
 801213e:	2b03      	cmp	r3, #3
 8012140:	d104      	bne.n	801214c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012142:	6839      	ldr	r1, [r7, #0]
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f000 f9a2 	bl	801248e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801214a:	e01c      	b.n	8012186 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	7bfa      	ldrb	r2, [r7, #15]
 8012150:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012154:	7bfb      	ldrb	r3, [r7, #15]
 8012156:	4619      	mov	r1, r3
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f008 fd88 	bl	801ac6e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f000 fa60 	bl	8012624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012164:	7bfb      	ldrb	r3, [r7, #15]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d004      	beq.n	8012174 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2202      	movs	r2, #2
 801216e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012172:	e008      	b.n	8012186 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2201      	movs	r2, #1
 8012178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801217c:	e003      	b.n	8012186 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801217e:	6839      	ldr	r1, [r7, #0]
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 f984 	bl	801248e <USBD_CtlError>
  }
}
 8012186:	bf00      	nop
 8012188:	3710      	adds	r7, #16
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
	...

08012190 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801219a:	2300      	movs	r3, #0
 801219c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	885b      	ldrh	r3, [r3, #2]
 80121a2:	b2da      	uxtb	r2, r3
 80121a4:	4b4c      	ldr	r3, [pc, #304]	; (80122d8 <USBD_SetConfig+0x148>)
 80121a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80121a8:	4b4b      	ldr	r3, [pc, #300]	; (80122d8 <USBD_SetConfig+0x148>)
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d905      	bls.n	80121bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80121b0:	6839      	ldr	r1, [r7, #0]
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 f96b 	bl	801248e <USBD_CtlError>
    return USBD_FAIL;
 80121b8:	2303      	movs	r3, #3
 80121ba:	e088      	b.n	80122ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	2b02      	cmp	r3, #2
 80121c6:	d002      	beq.n	80121ce <USBD_SetConfig+0x3e>
 80121c8:	2b03      	cmp	r3, #3
 80121ca:	d025      	beq.n	8012218 <USBD_SetConfig+0x88>
 80121cc:	e071      	b.n	80122b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80121ce:	4b42      	ldr	r3, [pc, #264]	; (80122d8 <USBD_SetConfig+0x148>)
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d01c      	beq.n	8012210 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80121d6:	4b40      	ldr	r3, [pc, #256]	; (80122d8 <USBD_SetConfig+0x148>)
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	461a      	mov	r2, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80121e0:	4b3d      	ldr	r3, [pc, #244]	; (80122d8 <USBD_SetConfig+0x148>)
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	4619      	mov	r1, r3
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f7ff f99d 	bl	8011526 <USBD_SetClassConfig>
 80121ec:	4603      	mov	r3, r0
 80121ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80121f0:	7bfb      	ldrb	r3, [r7, #15]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d004      	beq.n	8012200 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80121f6:	6839      	ldr	r1, [r7, #0]
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 f948 	bl	801248e <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80121fe:	e065      	b.n	80122cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f000 fa0f 	bl	8012624 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2203      	movs	r2, #3
 801220a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801220e:	e05d      	b.n	80122cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f000 fa07 	bl	8012624 <USBD_CtlSendStatus>
      break;
 8012216:	e059      	b.n	80122cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012218:	4b2f      	ldr	r3, [pc, #188]	; (80122d8 <USBD_SetConfig+0x148>)
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d112      	bne.n	8012246 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2202      	movs	r2, #2
 8012224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012228:	4b2b      	ldr	r3, [pc, #172]	; (80122d8 <USBD_SetConfig+0x148>)
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	461a      	mov	r2, r3
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012232:	4b29      	ldr	r3, [pc, #164]	; (80122d8 <USBD_SetConfig+0x148>)
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	4619      	mov	r1, r3
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7ff f990 	bl	801155e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f9f0 	bl	8012624 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012244:	e042      	b.n	80122cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012246:	4b24      	ldr	r3, [pc, #144]	; (80122d8 <USBD_SetConfig+0x148>)
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	461a      	mov	r2, r3
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	429a      	cmp	r2, r3
 8012252:	d02a      	beq.n	80122aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	b2db      	uxtb	r3, r3
 801225a:	4619      	mov	r1, r3
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f7ff f97e 	bl	801155e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012262:	4b1d      	ldr	r3, [pc, #116]	; (80122d8 <USBD_SetConfig+0x148>)
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	461a      	mov	r2, r3
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801226c:	4b1a      	ldr	r3, [pc, #104]	; (80122d8 <USBD_SetConfig+0x148>)
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	4619      	mov	r1, r3
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7ff f957 	bl	8011526 <USBD_SetClassConfig>
 8012278:	4603      	mov	r3, r0
 801227a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801227c:	7bfb      	ldrb	r3, [r7, #15]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00f      	beq.n	80122a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012282:	6839      	ldr	r1, [r7, #0]
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 f902 	bl	801248e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	b2db      	uxtb	r3, r3
 8012290:	4619      	mov	r1, r3
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f7ff f963 	bl	801155e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2202      	movs	r2, #2
 801229c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80122a0:	e014      	b.n	80122cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 f9be 	bl	8012624 <USBD_CtlSendStatus>
      break;
 80122a8:	e010      	b.n	80122cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 f9ba 	bl	8012624 <USBD_CtlSendStatus>
      break;
 80122b0:	e00c      	b.n	80122cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80122b2:	6839      	ldr	r1, [r7, #0]
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f000 f8ea 	bl	801248e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80122ba:	4b07      	ldr	r3, [pc, #28]	; (80122d8 <USBD_SetConfig+0x148>)
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	4619      	mov	r1, r3
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7ff f94c 	bl	801155e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80122c6:	2303      	movs	r3, #3
 80122c8:	73fb      	strb	r3, [r7, #15]
      break;
 80122ca:	bf00      	nop
  }

  return ret;
 80122cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	20000c9d 	.word	0x20000c9d

080122dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	88db      	ldrh	r3, [r3, #6]
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d004      	beq.n	80122f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80122ee:	6839      	ldr	r1, [r7, #0]
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 f8cc 	bl	801248e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80122f6:	e022      	b.n	801233e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	2b01      	cmp	r3, #1
 8012302:	db17      	blt.n	8012334 <USBD_GetConfig+0x58>
 8012304:	2b02      	cmp	r3, #2
 8012306:	dd02      	ble.n	801230e <USBD_GetConfig+0x32>
 8012308:	2b03      	cmp	r3, #3
 801230a:	d00b      	beq.n	8012324 <USBD_GetConfig+0x48>
 801230c:	e012      	b.n	8012334 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	3308      	adds	r3, #8
 8012318:	2201      	movs	r2, #1
 801231a:	4619      	mov	r1, r3
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 f927 	bl	8012570 <USBD_CtlSendData>
        break;
 8012322:	e00c      	b.n	801233e <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3304      	adds	r3, #4
 8012328:	2201      	movs	r2, #1
 801232a:	4619      	mov	r1, r3
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f000 f91f 	bl	8012570 <USBD_CtlSendData>
        break;
 8012332:	e004      	b.n	801233e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8012334:	6839      	ldr	r1, [r7, #0]
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 f8a9 	bl	801248e <USBD_CtlError>
        break;
 801233c:	bf00      	nop
}
 801233e:	bf00      	nop
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012346:	b580      	push	{r7, lr}
 8012348:	b082      	sub	sp, #8
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
 801234e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012356:	b2db      	uxtb	r3, r3
 8012358:	3b01      	subs	r3, #1
 801235a:	2b02      	cmp	r3, #2
 801235c:	d81e      	bhi.n	801239c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	88db      	ldrh	r3, [r3, #6]
 8012362:	2b02      	cmp	r3, #2
 8012364:	d004      	beq.n	8012370 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012366:	6839      	ldr	r1, [r7, #0]
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f000 f890 	bl	801248e <USBD_CtlError>
        break;
 801236e:	e01a      	b.n	80123a6 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2201      	movs	r2, #1
 8012374:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801237c:	2b00      	cmp	r3, #0
 801237e:	d005      	beq.n	801238c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	f043 0202 	orr.w	r2, r3, #2
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	330c      	adds	r3, #12
 8012390:	2202      	movs	r2, #2
 8012392:	4619      	mov	r1, r3
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 f8eb 	bl	8012570 <USBD_CtlSendData>
      break;
 801239a:	e004      	b.n	80123a6 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801239c:	6839      	ldr	r1, [r7, #0]
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f000 f875 	bl	801248e <USBD_CtlError>
      break;
 80123a4:	bf00      	nop
  }
}
 80123a6:	bf00      	nop
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b082      	sub	sp, #8
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	885b      	ldrh	r3, [r3, #2]
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d106      	bne.n	80123ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2201      	movs	r2, #1
 80123c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 f92b 	bl	8012624 <USBD_CtlSendStatus>
  }
}
 80123ce:	bf00      	nop
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}

080123d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b082      	sub	sp, #8
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
 80123de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	3b01      	subs	r3, #1
 80123ea:	2b02      	cmp	r3, #2
 80123ec:	d80b      	bhi.n	8012406 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	885b      	ldrh	r3, [r3, #2]
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d10c      	bne.n	8012410 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 f910 	bl	8012624 <USBD_CtlSendStatus>
      }
      break;
 8012404:	e004      	b.n	8012410 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 f840 	bl	801248e <USBD_CtlError>
      break;
 801240e:	e000      	b.n	8012412 <USBD_ClrFeature+0x3c>
      break;
 8012410:	bf00      	nop
  }
}
 8012412:	bf00      	nop
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801241a:	b580      	push	{r7, lr}
 801241c:	b084      	sub	sp, #16
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
 8012422:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	781a      	ldrb	r2, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	3301      	adds	r3, #1
 8012434:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	781a      	ldrb	r2, [r3, #0]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	3301      	adds	r3, #1
 8012442:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7ff fa9c 	bl	8011982 <SWAPBYTE>
 801244a:	4603      	mov	r3, r0
 801244c:	461a      	mov	r2, r3
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	3301      	adds	r3, #1
 8012456:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	3301      	adds	r3, #1
 801245c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801245e:	68f8      	ldr	r0, [r7, #12]
 8012460:	f7ff fa8f 	bl	8011982 <SWAPBYTE>
 8012464:	4603      	mov	r3, r0
 8012466:	461a      	mov	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	3301      	adds	r3, #1
 8012470:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	3301      	adds	r3, #1
 8012476:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012478:	68f8      	ldr	r0, [r7, #12]
 801247a:	f7ff fa82 	bl	8011982 <SWAPBYTE>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	80da      	strh	r2, [r3, #6]
}
 8012486:	bf00      	nop
 8012488:	3710      	adds	r7, #16
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801248e:	b580      	push	{r7, lr}
 8012490:	b082      	sub	sp, #8
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
 8012496:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012498:	2180      	movs	r1, #128	; 0x80
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f008 fb83 	bl	801aba6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80124a0:	2100      	movs	r1, #0
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f008 fb7f 	bl	801aba6 <USBD_LL_StallEP>
}
 80124a8:	bf00      	nop
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80124bc:	2300      	movs	r3, #0
 80124be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d036      	beq.n	8012534 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80124ca:	6938      	ldr	r0, [r7, #16]
 80124cc:	f000 f836 	bl	801253c <USBD_GetLen>
 80124d0:	4603      	mov	r3, r0
 80124d2:	3301      	adds	r3, #1
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	005b      	lsls	r3, r3, #1
 80124d8:	b29a      	uxth	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80124de:	7dfb      	ldrb	r3, [r7, #23]
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	4413      	add	r3, r2
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	7812      	ldrb	r2, [r2, #0]
 80124e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80124ea:	7dfb      	ldrb	r3, [r7, #23]
 80124ec:	3301      	adds	r3, #1
 80124ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80124f0:	7dfb      	ldrb	r3, [r7, #23]
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	4413      	add	r3, r2
 80124f6:	2203      	movs	r2, #3
 80124f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80124fa:	7dfb      	ldrb	r3, [r7, #23]
 80124fc:	3301      	adds	r3, #1
 80124fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012500:	e013      	b.n	801252a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012502:	7dfb      	ldrb	r3, [r7, #23]
 8012504:	68ba      	ldr	r2, [r7, #8]
 8012506:	4413      	add	r3, r2
 8012508:	693a      	ldr	r2, [r7, #16]
 801250a:	7812      	ldrb	r2, [r2, #0]
 801250c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	3301      	adds	r3, #1
 8012512:	613b      	str	r3, [r7, #16]
    idx++;
 8012514:	7dfb      	ldrb	r3, [r7, #23]
 8012516:	3301      	adds	r3, #1
 8012518:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801251a:	7dfb      	ldrb	r3, [r7, #23]
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	4413      	add	r3, r2
 8012520:	2200      	movs	r2, #0
 8012522:	701a      	strb	r2, [r3, #0]
    idx++;
 8012524:	7dfb      	ldrb	r3, [r7, #23]
 8012526:	3301      	adds	r3, #1
 8012528:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1e7      	bne.n	8012502 <USBD_GetString+0x52>
 8012532:	e000      	b.n	8012536 <USBD_GetString+0x86>
    return;
 8012534:	bf00      	nop
  }
}
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801253c:	b480      	push	{r7}
 801253e:	b085      	sub	sp, #20
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012544:	2300      	movs	r3, #0
 8012546:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801254c:	e005      	b.n	801255a <USBD_GetLen+0x1e>
  {
    len++;
 801254e:	7bfb      	ldrb	r3, [r7, #15]
 8012550:	3301      	adds	r3, #1
 8012552:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	3301      	adds	r3, #1
 8012558:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d1f5      	bne.n	801254e <USBD_GetLen+0x12>
  }

  return len;
 8012562:	7bfb      	ldrb	r3, [r7, #15]
}
 8012564:	4618      	mov	r0, r3
 8012566:	3714      	adds	r7, #20
 8012568:	46bd      	mov	sp, r7
 801256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256e:	4770      	bx	lr

08012570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2202      	movs	r2, #2
 8012580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	68ba      	ldr	r2, [r7, #8]
 8012594:	2100      	movs	r1, #0
 8012596:	68f8      	ldr	r0, [r7, #12]
 8012598:	f008 fb88 	bl	801acac <USBD_LL_Transmit>

  return USBD_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b084      	sub	sp, #16
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	60f8      	str	r0, [r7, #12]
 80125ae:	60b9      	str	r1, [r7, #8]
 80125b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	68ba      	ldr	r2, [r7, #8]
 80125b6:	2100      	movs	r1, #0
 80125b8:	68f8      	ldr	r0, [r7, #12]
 80125ba:	f008 fb77 	bl	801acac <USBD_LL_Transmit>

  return USBD_OK;
 80125be:	2300      	movs	r3, #0
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2203      	movs	r2, #3
 80125d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	2100      	movs	r1, #0
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f008 fb7b 	bl	801acee <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125f8:	2300      	movs	r3, #0
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3710      	adds	r7, #16
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012602:	b580      	push	{r7, lr}
 8012604:	b084      	sub	sp, #16
 8012606:	af00      	add	r7, sp, #0
 8012608:	60f8      	str	r0, [r7, #12]
 801260a:	60b9      	str	r1, [r7, #8]
 801260c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	2100      	movs	r1, #0
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f008 fb6a 	bl	801acee <USBD_LL_PrepareReceive>

  return USBD_OK;
 801261a:	2300      	movs	r3, #0
}
 801261c:	4618      	mov	r0, r3
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2204      	movs	r2, #4
 8012630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012634:	2300      	movs	r3, #0
 8012636:	2200      	movs	r2, #0
 8012638:	2100      	movs	r1, #0
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f008 fb36 	bl	801acac <USBD_LL_Transmit>

  return USBD_OK;
 8012640:	2300      	movs	r3, #0
}
 8012642:	4618      	mov	r0, r3
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}

0801264a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801264a:	b580      	push	{r7, lr}
 801264c:	b082      	sub	sp, #8
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2205      	movs	r2, #5
 8012656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801265a:	2300      	movs	r3, #0
 801265c:	2200      	movs	r2, #0
 801265e:	2100      	movs	r1, #0
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f008 fb44 	bl	801acee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012666:	2300      	movs	r3, #0
}
 8012668:	4618      	mov	r0, r3
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b086      	sub	sp, #24
 8012674:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012676:	1d3b      	adds	r3, r7, #4
 8012678:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	2200      	movs	r2, #0
 801267e:	2100      	movs	r1, #0
 8012680:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8012684:	f000 f938 	bl	80128f8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	330b      	adds	r3, #11
 801268c:	78db      	ldrb	r3, [r3, #3]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3718      	adds	r7, #24
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8012696:	b580      	push	{r7, lr}
 8012698:	b088      	sub	sp, #32
 801269a:	af00      	add	r7, sp, #0
 801269c:	4603      	mov	r3, r0
 801269e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80126a0:	f107 030c 	add.w	r3, r7, #12
 80126a4:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80126a6:	79fb      	ldrb	r3, [r7, #7]
 80126a8:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80126aa:	f107 020c 	add.w	r2, r7, #12
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	2101      	movs	r1, #1
 80126b2:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80126b6:	f000 f91f 	bl	80128f8 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	330b      	adds	r3, #11
 80126be:	78db      	ldrb	r3, [r3, #3]
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3720      	adds	r7, #32
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80126c8:	b480      	push	{r7}
 80126ca:	b08b      	sub	sp, #44	; 0x2c
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80126d0:	2300      	movs	r3, #0
 80126d2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80126d4:	2300      	movs	r3, #0
 80126d6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80126d8:	2300      	movs	r3, #0
 80126da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80126dc:	2300      	movs	r3, #0
 80126de:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80126e0:	2300      	movs	r3, #0
 80126e2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80126e4:	2300      	movs	r3, #0
 80126e6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80126ec:	2300      	movs	r3, #0
 80126ee:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80126f0:	4b4a      	ldr	r3, [pc, #296]	; (801281c <SHCI_GetWirelessFwInfo+0x154>)
 80126f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80126f8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	009b      	lsls	r3, r3, #2
 80126fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012702:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	4a44      	ldr	r2, [pc, #272]	; (8012820 <SHCI_GetWirelessFwInfo+0x158>)
 8012710:	4293      	cmp	r3, r2
 8012712:	d10f      	bne.n	8012734 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	695b      	ldr	r3, [r3, #20]
 8012718:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	699b      	ldr	r3, [r3, #24]
 801271e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	69db      	ldr	r3, [r3, #28]
 8012724:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	691b      	ldr	r3, [r3, #16]
 8012730:	617b      	str	r3, [r7, #20]
 8012732:	e01a      	b.n	801276a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801273c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8012740:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	691b      	ldr	r3, [r3, #16]
 8012748:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	695b      	ldr	r3, [r3, #20]
 8012750:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	699b      	ldr	r3, [r3, #24]
 8012758:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	689b      	ldr	r3, [r3, #8]
 8012768:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276c:	0e1b      	lsrs	r3, r3, #24
 801276e:	b2da      	uxtb	r2, r3
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012776:	0c1b      	lsrs	r3, r3, #16
 8012778:	b2da      	uxtb	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012780:	0a1b      	lsrs	r3, r3, #8
 8012782:	b2da      	uxtb	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	091b      	lsrs	r3, r3, #4
 801278c:	b2db      	uxtb	r3, r3
 801278e:	f003 030f 	and.w	r3, r3, #15
 8012792:	b2da      	uxtb	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	b2db      	uxtb	r3, r3
 801279c:	f003 030f 	and.w	r3, r3, #15
 80127a0:	b2da      	uxtb	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	0e1b      	lsrs	r3, r3, #24
 80127aa:	b2da      	uxtb	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80127b0:	6a3b      	ldr	r3, [r7, #32]
 80127b2:	0c1b      	lsrs	r3, r3, #16
 80127b4:	b2da      	uxtb	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	0a1b      	lsrs	r3, r3, #8
 80127be:	b2da      	uxtb	r2, r3
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80127c4:	6a3b      	ldr	r3, [r7, #32]
 80127c6:	b2da      	uxtb	r2, r3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	b2da      	uxtb	r2, r3
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80127d4:	69bb      	ldr	r3, [r7, #24]
 80127d6:	0e1b      	lsrs	r3, r3, #24
 80127d8:	b2da      	uxtb	r2, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	0c1b      	lsrs	r3, r3, #16
 80127e2:	b2da      	uxtb	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	0a1b      	lsrs	r3, r3, #8
 80127ec:	b2da      	uxtb	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	0e1b      	lsrs	r3, r3, #24
 80127f6:	b2da      	uxtb	r2, r3
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	0c1b      	lsrs	r3, r3, #16
 8012800:	b2da      	uxtb	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	b2da      	uxtb	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801280e:	2300      	movs	r3, #0
}
 8012810:	4618      	mov	r0, r3
 8012812:	372c      	adds	r7, #44	; 0x2c
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr
 801281c:	58004000 	.word	0x58004000
 8012820:	a94656b9 	.word	0xa94656b9

08012824 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4a08      	ldr	r2, [pc, #32]	; (8012854 <shci_init+0x30>)
 8012834:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8012836:	4a08      	ldr	r2, [pc, #32]	; (8012858 <shci_init+0x34>)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801283c:	4806      	ldr	r0, [pc, #24]	; (8012858 <shci_init+0x34>)
 801283e:	f000 f911 	bl	8012a64 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	4618      	mov	r0, r3
 8012848:	f000 f894 	bl	8012974 <TlInit>

  return;
 801284c:	bf00      	nop
}
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	20000cc0 	.word	0x20000cc0
 8012858:	20000ca0 	.word	0x20000ca0

0801285c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012862:	4822      	ldr	r0, [pc, #136]	; (80128ec <shci_user_evt_proc+0x90>)
 8012864:	f001 fd78 	bl	8014358 <LST_is_empty>
 8012868:	4603      	mov	r3, r0
 801286a:	2b00      	cmp	r3, #0
 801286c:	d12b      	bne.n	80128c6 <shci_user_evt_proc+0x6a>
 801286e:	4b20      	ldr	r3, [pc, #128]	; (80128f0 <shci_user_evt_proc+0x94>)
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d027      	beq.n	80128c6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012876:	f107 030c 	add.w	r3, r7, #12
 801287a:	4619      	mov	r1, r3
 801287c:	481b      	ldr	r0, [pc, #108]	; (80128ec <shci_user_evt_proc+0x90>)
 801287e:	f001 fdf2 	bl	8014466 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8012882:	4b1c      	ldr	r3, [pc, #112]	; (80128f4 <shci_user_evt_proc+0x98>)
 8012884:	69db      	ldr	r3, [r3, #28]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d00c      	beq.n	80128a4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801288e:	2301      	movs	r3, #1
 8012890:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012892:	4b18      	ldr	r3, [pc, #96]	; (80128f4 <shci_user_evt_proc+0x98>)
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	1d3a      	adds	r2, r7, #4
 8012898:	4610      	mov	r0, r2
 801289a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801289c:	793a      	ldrb	r2, [r7, #4]
 801289e:	4b14      	ldr	r3, [pc, #80]	; (80128f0 <shci_user_evt_proc+0x94>)
 80128a0:	701a      	strb	r2, [r3, #0]
 80128a2:	e002      	b.n	80128aa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80128a4:	4b12      	ldr	r3, [pc, #72]	; (80128f0 <shci_user_evt_proc+0x94>)
 80128a6:	2201      	movs	r2, #1
 80128a8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80128aa:	4b11      	ldr	r3, [pc, #68]	; (80128f0 <shci_user_evt_proc+0x94>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d004      	beq.n	80128bc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	4618      	mov	r0, r3
 80128b6:	f000 fa95 	bl	8012de4 <TL_MM_EvtDone>
 80128ba:	e004      	b.n	80128c6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	4619      	mov	r1, r3
 80128c0:	480a      	ldr	r0, [pc, #40]	; (80128ec <shci_user_evt_proc+0x90>)
 80128c2:	f001 fd69 	bl	8014398 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80128c6:	4809      	ldr	r0, [pc, #36]	; (80128ec <shci_user_evt_proc+0x90>)
 80128c8:	f001 fd46 	bl	8014358 <LST_is_empty>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d107      	bne.n	80128e2 <shci_user_evt_proc+0x86>
 80128d2:	4b07      	ldr	r3, [pc, #28]	; (80128f0 <shci_user_evt_proc+0x94>)
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d003      	beq.n	80128e2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80128da:	4804      	ldr	r0, [pc, #16]	; (80128ec <shci_user_evt_proc+0x90>)
 80128dc:	f7ee fcee 	bl	80012bc <shci_notify_asynch_evt>
  }


  return;
 80128e0:	bf00      	nop
 80128e2:	bf00      	nop
}
 80128e4:	3710      	adds	r7, #16
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	20000378 	.word	0x20000378
 80128f0:	20000388 	.word	0x20000388
 80128f4:	20000ca0 	.word	0x20000ca0

080128f8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60ba      	str	r2, [r7, #8]
 8012900:	607b      	str	r3, [r7, #4]
 8012902:	4603      	mov	r3, r0
 8012904:	81fb      	strh	r3, [r7, #14]
 8012906:	460b      	mov	r3, r1
 8012908:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801290a:	2000      	movs	r0, #0
 801290c:	f000 f864 	bl	80129d8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8012910:	4b16      	ldr	r3, [pc, #88]	; (801296c <shci_send+0x74>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	89fa      	ldrh	r2, [r7, #14]
 8012916:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801291a:	4b14      	ldr	r3, [pc, #80]	; (801296c <shci_send+0x74>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	7b7a      	ldrb	r2, [r7, #13]
 8012920:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8012922:	4b12      	ldr	r3, [pc, #72]	; (801296c <shci_send+0x74>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	330c      	adds	r3, #12
 8012928:	7b7a      	ldrb	r2, [r7, #13]
 801292a:	68b9      	ldr	r1, [r7, #8]
 801292c:	4618      	mov	r0, r3
 801292e:	f008 fdc3 	bl	801b4b8 <memcpy>

  shciContext.io.Send(0,0);
 8012932:	4b0f      	ldr	r3, [pc, #60]	; (8012970 <shci_send+0x78>)
 8012934:	691b      	ldr	r3, [r3, #16]
 8012936:	2100      	movs	r1, #0
 8012938:	2000      	movs	r0, #0
 801293a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801293c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8012940:	f7ee fcdc 	bl	80012fc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f103 0008 	add.w	r0, r3, #8
 801294a:	4b08      	ldr	r3, [pc, #32]	; (801296c <shci_send+0x74>)
 801294c:	6819      	ldr	r1, [r3, #0]
 801294e:	4b07      	ldr	r3, [pc, #28]	; (801296c <shci_send+0x74>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	789b      	ldrb	r3, [r3, #2]
 8012954:	3303      	adds	r3, #3
 8012956:	461a      	mov	r2, r3
 8012958:	f008 fdae 	bl	801b4b8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801295c:	2001      	movs	r0, #1
 801295e:	f000 f83b 	bl	80129d8 <Cmd_SetStatus>

  return;
 8012962:	bf00      	nop
}
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	20000384 	.word	0x20000384
 8012970:	20000ca0 	.word	0x20000ca0

08012974 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b086      	sub	sp, #24
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 801297c:	4a10      	ldr	r2, [pc, #64]	; (80129c0 <TlInit+0x4c>)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8012982:	4810      	ldr	r0, [pc, #64]	; (80129c4 <TlInit+0x50>)
 8012984:	f001 fcd8 	bl	8014338 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012988:	2001      	movs	r0, #1
 801298a:	f000 f825 	bl	80129d8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801298e:	4b0e      	ldr	r3, [pc, #56]	; (80129c8 <TlInit+0x54>)
 8012990:	2201      	movs	r2, #1
 8012992:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8012994:	4b0d      	ldr	r3, [pc, #52]	; (80129cc <TlInit+0x58>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00c      	beq.n	80129b6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80129a0:	4b0b      	ldr	r3, [pc, #44]	; (80129d0 <TlInit+0x5c>)
 80129a2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80129a4:	4b0b      	ldr	r3, [pc, #44]	; (80129d4 <TlInit+0x60>)
 80129a6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80129a8:	4b08      	ldr	r3, [pc, #32]	; (80129cc <TlInit+0x58>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	f107 020c 	add.w	r2, r7, #12
 80129b0:	4610      	mov	r0, r2
 80129b2:	4798      	blx	r3
  }

  return;
 80129b4:	bf00      	nop
 80129b6:	bf00      	nop
}
 80129b8:	3718      	adds	r7, #24
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	20000384 	.word	0x20000384
 80129c4:	20000378 	.word	0x20000378
 80129c8:	20000388 	.word	0x20000388
 80129cc:	20000ca0 	.word	0x20000ca0
 80129d0:	08012a29 	.word	0x08012a29
 80129d4:	08012a41 	.word	0x08012a41

080129d8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	4603      	mov	r3, r0
 80129e0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80129e2:	79fb      	ldrb	r3, [r7, #7]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d10b      	bne.n	8012a00 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80129e8:	4b0d      	ldr	r3, [pc, #52]	; (8012a20 <Cmd_SetStatus+0x48>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d003      	beq.n	80129f8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80129f0:	4b0b      	ldr	r3, [pc, #44]	; (8012a20 <Cmd_SetStatus+0x48>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2000      	movs	r0, #0
 80129f6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80129f8:	4b0a      	ldr	r3, [pc, #40]	; (8012a24 <Cmd_SetStatus+0x4c>)
 80129fa:	2200      	movs	r2, #0
 80129fc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80129fe:	e00b      	b.n	8012a18 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8012a00:	4b08      	ldr	r3, [pc, #32]	; (8012a24 <Cmd_SetStatus+0x4c>)
 8012a02:	2201      	movs	r2, #1
 8012a04:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8012a06:	4b06      	ldr	r3, [pc, #24]	; (8012a20 <Cmd_SetStatus+0x48>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d004      	beq.n	8012a18 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8012a0e:	4b04      	ldr	r3, [pc, #16]	; (8012a20 <Cmd_SetStatus+0x48>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2001      	movs	r0, #1
 8012a14:	4798      	blx	r3
  return;
 8012a16:	bf00      	nop
 8012a18:	bf00      	nop
}
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	20000cc0 	.word	0x20000cc0
 8012a24:	20000380 	.word	0x20000380

08012a28 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8012a30:	2000      	movs	r0, #0
 8012a32:	f7ee fc53 	bl	80012dc <shci_cmd_resp_release>

  return;
 8012a36:	bf00      	nop
}
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
	...

08012a40 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8012a48:	6879      	ldr	r1, [r7, #4]
 8012a4a:	4805      	ldr	r0, [pc, #20]	; (8012a60 <TlUserEvtReceived+0x20>)
 8012a4c:	f001 fcc8 	bl	80143e0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012a50:	4803      	ldr	r0, [pc, #12]	; (8012a60 <TlUserEvtReceived+0x20>)
 8012a52:	f7ee fc33 	bl	80012bc <shci_notify_asynch_evt>

  return;
 8012a56:	bf00      	nop
}
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	20000378 	.word	0x20000378

08012a64 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8012a64:	b480      	push	{r7}
 8012a66:	b083      	sub	sp, #12
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	4a05      	ldr	r2, [pc, #20]	; (8012a84 <shci_register_io_bus+0x20>)
 8012a70:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4a04      	ldr	r2, [pc, #16]	; (8012a88 <shci_register_io_bus+0x24>)
 8012a76:	611a      	str	r2, [r3, #16]

  return;
 8012a78:	bf00      	nop
}
 8012a7a:	370c      	adds	r7, #12
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr
 8012a84:	08012b81 	.word	0x08012b81
 8012a88:	08012bd5 	.word	0x08012bd5

08012a8c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8012a90:	f007 fb9c 	bl	801a1cc <HW_IPCC_Enable>

  return;
 8012a94:	bf00      	nop
}
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <TL_Init>:


void TL_Init( void )
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8012a9c:	4b10      	ldr	r3, [pc, #64]	; (8012ae0 <TL_Init+0x48>)
 8012a9e:	4a11      	ldr	r2, [pc, #68]	; (8012ae4 <TL_Init+0x4c>)
 8012aa0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8012aa2:	4b0f      	ldr	r3, [pc, #60]	; (8012ae0 <TL_Init+0x48>)
 8012aa4:	4a10      	ldr	r2, [pc, #64]	; (8012ae8 <TL_Init+0x50>)
 8012aa6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012aa8:	4b0d      	ldr	r3, [pc, #52]	; (8012ae0 <TL_Init+0x48>)
 8012aaa:	4a10      	ldr	r2, [pc, #64]	; (8012aec <TL_Init+0x54>)
 8012aac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8012aae:	4b0c      	ldr	r3, [pc, #48]	; (8012ae0 <TL_Init+0x48>)
 8012ab0:	4a0f      	ldr	r2, [pc, #60]	; (8012af0 <TL_Init+0x58>)
 8012ab2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8012ab4:	4b0a      	ldr	r3, [pc, #40]	; (8012ae0 <TL_Init+0x48>)
 8012ab6:	4a0f      	ldr	r2, [pc, #60]	; (8012af4 <TL_Init+0x5c>)
 8012ab8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8012aba:	4b09      	ldr	r3, [pc, #36]	; (8012ae0 <TL_Init+0x48>)
 8012abc:	4a0e      	ldr	r2, [pc, #56]	; (8012af8 <TL_Init+0x60>)
 8012abe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012ac0:	4b07      	ldr	r3, [pc, #28]	; (8012ae0 <TL_Init+0x48>)
 8012ac2:	4a0e      	ldr	r2, [pc, #56]	; (8012afc <TL_Init+0x64>)
 8012ac4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8012ac6:	4b06      	ldr	r3, [pc, #24]	; (8012ae0 <TL_Init+0x48>)
 8012ac8:	4a0d      	ldr	r2, [pc, #52]	; (8012b00 <TL_Init+0x68>)
 8012aca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8012acc:	4b04      	ldr	r3, [pc, #16]	; (8012ae0 <TL_Init+0x48>)
 8012ace:	4a0d      	ldr	r2, [pc, #52]	; (8012b04 <TL_Init+0x6c>)
 8012ad0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8012ad2:	4b03      	ldr	r3, [pc, #12]	; (8012ae0 <TL_Init+0x48>)
 8012ad4:	4a0c      	ldr	r2, [pc, #48]	; (8012b08 <TL_Init+0x70>)
 8012ad6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8012ad8:	f007 fb8c 	bl	801a1f4 <HW_IPCC_Init>

  return;
 8012adc:	bf00      	nop
}
 8012ade:	bd80      	pop	{r7, pc}
 8012ae0:	20030000 	.word	0x20030000
 8012ae4:	20030028 	.word	0x20030028
 8012ae8:	20030048 	.word	0x20030048
 8012aec:	20030058 	.word	0x20030058
 8012af0:	20030064 	.word	0x20030064
 8012af4:	2003006c 	.word	0x2003006c
 8012af8:	20030074 	.word	0x20030074
 8012afc:	2003007c 	.word	0x2003007c
 8012b00:	20030098 	.word	0x20030098
 8012b04:	2003009c 	.word	0x2003009c
 8012b08:	200300a8 	.word	0x200300a8

08012b0c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8012b12:	e01c      	b.n	8012b4e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8012b14:	1d3b      	adds	r3, r7, #4
 8012b16:	4619      	mov	r1, r3
 8012b18:	4812      	ldr	r0, [pc, #72]	; (8012b64 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8012b1a:	f001 fca4 	bl	8014466 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	7a5b      	ldrb	r3, [r3, #9]
 8012b22:	2b0f      	cmp	r3, #15
 8012b24:	d003      	beq.n	8012b2e <HW_IPCC_BLE_RxEvtNot+0x22>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	7a5b      	ldrb	r3, [r3, #9]
 8012b2a:	2b0e      	cmp	r3, #14
 8012b2c:	d105      	bne.n	8012b3a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4619      	mov	r1, r3
 8012b32:	2002      	movs	r0, #2
 8012b34:	f000 f9ba 	bl	8012eac <OutputDbgTrace>
 8012b38:	e004      	b.n	8012b44 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	2003      	movs	r0, #3
 8012b40:	f000 f9b4 	bl	8012eac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8012b44:	4b08      	ldr	r3, [pc, #32]	; (8012b68 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	4610      	mov	r0, r2
 8012b4c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8012b4e:	4805      	ldr	r0, [pc, #20]	; (8012b64 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8012b50:	f001 fc02 	bl	8014358 <LST_is_empty>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d0dc      	beq.n	8012b14 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8012b5a:	bf00      	nop
}
 8012b5c:	3708      	adds	r7, #8
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	200300c4 	.word	0x200300c4
 8012b68:	20000ccc 	.word	0x20000ccc

08012b6c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8012b70:	4b02      	ldr	r3, [pc, #8]	; (8012b7c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	4798      	blx	r3

  return;
 8012b76:	bf00      	nop
}
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	20000cd0 	.word	0x20000cd0

08012b80 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8012b8c:	480d      	ldr	r0, [pc, #52]	; (8012bc4 <TL_SYS_Init+0x44>)
 8012b8e:	f001 fbd3 	bl	8014338 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8012b92:	4b0d      	ldr	r3, [pc, #52]	; (8012bc8 <TL_SYS_Init+0x48>)
 8012b94:	68db      	ldr	r3, [r3, #12]
 8012b96:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	689a      	ldr	r2, [r3, #8]
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	4a08      	ldr	r2, [pc, #32]	; (8012bc4 <TL_SYS_Init+0x44>)
 8012ba4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8012ba6:	f007 fb53 	bl	801a250 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	4a07      	ldr	r2, [pc, #28]	; (8012bcc <TL_SYS_Init+0x4c>)
 8012bb0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	4a06      	ldr	r2, [pc, #24]	; (8012bd0 <TL_SYS_Init+0x50>)
 8012bb8:	6013      	str	r3, [r2, #0]

  return 0;
 8012bba:	2300      	movs	r3, #0
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3710      	adds	r7, #16
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}
 8012bc4:	200300cc 	.word	0x200300cc
 8012bc8:	20030000 	.word	0x20030000
 8012bcc:	20000cd4 	.word	0x20000cd4
 8012bd0:	20000cd8 	.word	0x20000cd8

08012bd4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	460b      	mov	r3, r1
 8012bde:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012be0:	4b09      	ldr	r3, [pc, #36]	; (8012c08 <TL_SYS_SendCmd+0x34>)
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2210      	movs	r2, #16
 8012be8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8012bea:	4b07      	ldr	r3, [pc, #28]	; (8012c08 <TL_SYS_SendCmd+0x34>)
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	2004      	movs	r0, #4
 8012bf4:	f000 f95a 	bl	8012eac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8012bf8:	f007 fb34 	bl	801a264 <HW_IPCC_SYS_SendCmd>

  return 0;
 8012bfc:	2300      	movs	r3, #0
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	20030000 	.word	0x20030000

08012c0c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012c10:	4b07      	ldr	r3, [pc, #28]	; (8012c30 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4619      	mov	r1, r3
 8012c18:	2005      	movs	r0, #5
 8012c1a:	f000 f947 	bl	8012eac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012c1e:	4b05      	ldr	r3, [pc, #20]	; (8012c34 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	4a03      	ldr	r2, [pc, #12]	; (8012c30 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012c24:	68d2      	ldr	r2, [r2, #12]
 8012c26:	6812      	ldr	r2, [r2, #0]
 8012c28:	4610      	mov	r0, r2
 8012c2a:	4798      	blx	r3

  return;
 8012c2c:	bf00      	nop
}
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	20030000 	.word	0x20030000
 8012c34:	20000cd4 	.word	0x20000cd4

08012c38 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012c3e:	e00e      	b.n	8012c5e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8012c40:	1d3b      	adds	r3, r7, #4
 8012c42:	4619      	mov	r1, r3
 8012c44:	480b      	ldr	r0, [pc, #44]	; (8012c74 <HW_IPCC_SYS_EvtNot+0x3c>)
 8012c46:	f001 fc0e 	bl	8014466 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	2006      	movs	r0, #6
 8012c50:	f000 f92c 	bl	8012eac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8012c54:	4b08      	ldr	r3, [pc, #32]	; (8012c78 <HW_IPCC_SYS_EvtNot+0x40>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	4610      	mov	r0, r2
 8012c5c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012c5e:	4805      	ldr	r0, [pc, #20]	; (8012c74 <HW_IPCC_SYS_EvtNot+0x3c>)
 8012c60:	f001 fb7a 	bl	8014358 <LST_is_empty>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d0ea      	beq.n	8012c40 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8012c6a:	bf00      	nop
}
 8012c6c:	3708      	adds	r7, #8
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	200300cc 	.word	0x200300cc
 8012c78:	20000cd8 	.word	0x20000cd8

08012c7c <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8012c84:	4b0a      	ldr	r3, [pc, #40]	; (8012cb0 <TL_THREAD_Init+0x34>)
 8012c86:	689b      	ldr	r3, [r3, #8]
 8012c88:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	685a      	ldr	r2, [r3, #4]
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	689a      	ldr	r2, [r3, #8]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8012ca2:	f007 fb05 	bl	801a2b0 <HW_IPCC_THREAD_Init>

  return;
 8012ca6:	bf00      	nop
}
 8012ca8:	3710      	adds	r7, #16
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	20030000 	.word	0x20030000

08012cb4 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8012cb8:	4b04      	ldr	r3, [pc, #16]	; (8012ccc <TL_OT_SendCmd+0x18>)
 8012cba:	689b      	ldr	r3, [r3, #8]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	2208      	movs	r2, #8
 8012cc0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8012cc2:	f007 fb03 	bl	801a2cc <HW_IPCC_OT_SendCmd>

  return;
 8012cc6:	bf00      	nop
}
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	20030000 	.word	0x20030000

08012cd0 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8012cd4:	4b04      	ldr	r3, [pc, #16]	; (8012ce8 <TL_CLI_SendCmd+0x18>)
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	220a      	movs	r2, #10
 8012cdc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 8012cde:	f007 fb03 	bl	801a2e8 <HW_IPCC_CLI_SendCmd>

  return;
 8012ce2:	bf00      	nop
}
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	20030000 	.word	0x20030000

08012cec <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8012cf0:	4b04      	ldr	r3, [pc, #16]	; (8012d04 <TL_THREAD_SendAck+0x18>)
 8012cf2:	689b      	ldr	r3, [r3, #8]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	220d      	movs	r2, #13
 8012cf8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8012cfa:	f007 faff 	bl	801a2fc <HW_IPCC_THREAD_SendAck>

  return;
 8012cfe:	bf00      	nop
}
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	20030000 	.word	0x20030000

08012d08 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8012d0c:	4b04      	ldr	r3, [pc, #16]	; (8012d20 <TL_THREAD_CliSendAck+0x18>)
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	220d      	movs	r2, #13
 8012d14:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8012d16:	f007 faff 	bl	801a318 <HW_IPCC_THREAD_CliSendAck>

  return;
 8012d1a:	bf00      	nop
}
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	20030000 	.word	0x20030000

08012d24 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8012d28:	4b03      	ldr	r3, [pc, #12]	; (8012d38 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8012d2a:	689b      	ldr	r3, [r3, #8]
 8012d2c:	689b      	ldr	r3, [r3, #8]
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f006 ff92 	bl	8019c58 <TL_OT_CmdEvtReceived>

  return;
 8012d34:	bf00      	nop
}
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	20030000 	.word	0x20030000

08012d3c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8012d40:	4b03      	ldr	r3, [pc, #12]	; (8012d50 <HW_IPCC_THREAD_EvtNot+0x14>)
 8012d42:	689b      	ldr	r3, [r3, #8]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	4618      	mov	r0, r3
 8012d48:	f006 ff90 	bl	8019c6c <TL_THREAD_NotReceived>

  return;
 8012d4c:	bf00      	nop
}
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	20030000 	.word	0x20030000

08012d54 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8012d58:	4b03      	ldr	r3, [pc, #12]	; (8012d68 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8012d5a:	689b      	ldr	r3, [r3, #8]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f007 f832 	bl	8019dc8 <TL_THREAD_CliNotReceived>

  return;
 8012d64:	bf00      	nop
}
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	20030000 	.word	0x20030000

08012d6c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8012d74:	4817      	ldr	r0, [pc, #92]	; (8012dd4 <TL_MM_Init+0x68>)
 8012d76:	f001 fadf 	bl	8014338 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8012d7a:	4817      	ldr	r0, [pc, #92]	; (8012dd8 <TL_MM_Init+0x6c>)
 8012d7c:	f001 fadc 	bl	8014338 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8012d80:	4b16      	ldr	r3, [pc, #88]	; (8012ddc <TL_MM_Init+0x70>)
 8012d82:	691b      	ldr	r3, [r3, #16]
 8012d84:	4a16      	ldr	r2, [pc, #88]	; (8012de0 <TL_MM_Init+0x74>)
 8012d86:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8012d88:	4b15      	ldr	r3, [pc, #84]	; (8012de0 <TL_MM_Init+0x74>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	6892      	ldr	r2, [r2, #8]
 8012d90:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8012d92:	4b13      	ldr	r3, [pc, #76]	; (8012de0 <TL_MM_Init+0x74>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	68d2      	ldr	r2, [r2, #12]
 8012d9a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8012d9c:	4b10      	ldr	r3, [pc, #64]	; (8012de0 <TL_MM_Init+0x74>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	4a0c      	ldr	r2, [pc, #48]	; (8012dd4 <TL_MM_Init+0x68>)
 8012da2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8012da4:	4b0e      	ldr	r3, [pc, #56]	; (8012de0 <TL_MM_Init+0x74>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	6812      	ldr	r2, [r2, #0]
 8012dac:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8012dae:	4b0c      	ldr	r3, [pc, #48]	; (8012de0 <TL_MM_Init+0x74>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	687a      	ldr	r2, [r7, #4]
 8012db4:	6852      	ldr	r2, [r2, #4]
 8012db6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8012db8:	4b09      	ldr	r3, [pc, #36]	; (8012de0 <TL_MM_Init+0x74>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	6912      	ldr	r2, [r2, #16]
 8012dc0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012dc2:	4b07      	ldr	r3, [pc, #28]	; (8012de0 <TL_MM_Init+0x74>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	6952      	ldr	r2, [r2, #20]
 8012dca:	619a      	str	r2, [r3, #24]

  return;
 8012dcc:	bf00      	nop
}
 8012dce:	3708      	adds	r7, #8
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	200300b4 	.word	0x200300b4
 8012dd8:	20000cc4 	.word	0x20000cc4
 8012ddc:	20030000 	.word	0x20030000
 8012de0:	20000cdc 	.word	0x20000cdc

08012de4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8012dec:	6879      	ldr	r1, [r7, #4]
 8012dee:	4807      	ldr	r0, [pc, #28]	; (8012e0c <TL_MM_EvtDone+0x28>)
 8012df0:	f001 faf6 	bl	80143e0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8012df4:	6879      	ldr	r1, [r7, #4]
 8012df6:	2000      	movs	r0, #0
 8012df8:	f000 f858 	bl	8012eac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8012dfc:	4804      	ldr	r0, [pc, #16]	; (8012e10 <TL_MM_EvtDone+0x2c>)
 8012dfe:	f007 fabd 	bl	801a37c <HW_IPCC_MM_SendFreeBuf>

  return;
 8012e02:	bf00      	nop
}
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	20000cc4 	.word	0x20000cc4
 8012e10:	08012e15 	.word	0x08012e15

08012e14 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012e1a:	e00c      	b.n	8012e36 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8012e1c:	1d3b      	adds	r3, r7, #4
 8012e1e:	4619      	mov	r1, r3
 8012e20:	480a      	ldr	r0, [pc, #40]	; (8012e4c <SendFreeBuf+0x38>)
 8012e22:	f001 fb20 	bl	8014466 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8012e26:	4b0a      	ldr	r3, [pc, #40]	; (8012e50 <SendFreeBuf+0x3c>)
 8012e28:	691b      	ldr	r3, [r3, #16]
 8012e2a:	691b      	ldr	r3, [r3, #16]
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	4611      	mov	r1, r2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f001 fad5 	bl	80143e0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012e36:	4805      	ldr	r0, [pc, #20]	; (8012e4c <SendFreeBuf+0x38>)
 8012e38:	f001 fa8e 	bl	8014358 <LST_is_empty>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d0ec      	beq.n	8012e1c <SendFreeBuf+0x8>
  }

  return;
 8012e42:	bf00      	nop
}
 8012e44:	3708      	adds	r7, #8
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	20000cc4 	.word	0x20000cc4
 8012e50:	20030000 	.word	0x20030000

08012e54 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8012e58:	4805      	ldr	r0, [pc, #20]	; (8012e70 <TL_TRACES_Init+0x1c>)
 8012e5a:	f001 fa6d 	bl	8014338 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8012e5e:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <TL_TRACES_Init+0x20>)
 8012e60:	695b      	ldr	r3, [r3, #20]
 8012e62:	4a03      	ldr	r2, [pc, #12]	; (8012e70 <TL_TRACES_Init+0x1c>)
 8012e64:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8012e66:	f007 fabf 	bl	801a3e8 <HW_IPCC_TRACES_Init>

  return;
 8012e6a:	bf00      	nop
}
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	200300bc 	.word	0x200300bc
 8012e74:	20030000 	.word	0x20030000

08012e78 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012e7e:	e008      	b.n	8012e92 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8012e80:	1d3b      	adds	r3, r7, #4
 8012e82:	4619      	mov	r1, r3
 8012e84:	4808      	ldr	r0, [pc, #32]	; (8012ea8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8012e86:	f001 faee 	bl	8014466 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7ee fa47 	bl	8001320 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012e92:	4805      	ldr	r0, [pc, #20]	; (8012ea8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8012e94:	f001 fa60 	bl	8014358 <LST_is_empty>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d0f0      	beq.n	8012e80 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8012e9e:	bf00      	nop
}
 8012ea0:	3708      	adds	r7, #8
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	200300bc 	.word	0x200300bc

08012eac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	6039      	str	r1, [r7, #0]
 8012eb6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	2b06      	cmp	r3, #6
 8012ebc:	d849      	bhi.n	8012f52 <OutputDbgTrace+0xa6>
 8012ebe:	a201      	add	r2, pc, #4	; (adr r2, 8012ec4 <OutputDbgTrace+0x18>)
 8012ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ec4:	08012ee1 	.word	0x08012ee1
 8012ec8:	08012f03 	.word	0x08012f03
 8012ecc:	08012f09 	.word	0x08012f09
 8012ed0:	08012f23 	.word	0x08012f23
 8012ed4:	08012f2f 	.word	0x08012f2f
 8012ed8:	08012f35 	.word	0x08012f35
 8012edc:	08012f47 	.word	0x08012f47
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	7a5b      	ldrb	r3, [r3, #9]
 8012ee8:	2b0f      	cmp	r3, #15
 8012eea:	d004      	beq.n	8012ef6 <OutputDbgTrace+0x4a>
 8012eec:	2bff      	cmp	r3, #255	; 0xff
 8012eee:	d004      	beq.n	8012efa <OutputDbgTrace+0x4e>
 8012ef0:	2b0e      	cmp	r3, #14
 8012ef2:	d004      	beq.n	8012efe <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8012ef4:	e004      	b.n	8012f00 <OutputDbgTrace+0x54>
          break;
 8012ef6:	bf00      	nop
 8012ef8:	e02c      	b.n	8012f54 <OutputDbgTrace+0xa8>
          break;
 8012efa:	bf00      	nop
 8012efc:	e02a      	b.n	8012f54 <OutputDbgTrace+0xa8>
          break;
 8012efe:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8012f00:	e028      	b.n	8012f54 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8012f06:	e025      	b.n	8012f54 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	7a5b      	ldrb	r3, [r3, #9]
 8012f10:	2b0e      	cmp	r3, #14
 8012f12:	d002      	beq.n	8012f1a <OutputDbgTrace+0x6e>
 8012f14:	2b0f      	cmp	r3, #15
 8012f16:	d002      	beq.n	8012f1e <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012f18:	e002      	b.n	8012f20 <OutputDbgTrace+0x74>
          break;
 8012f1a:	bf00      	nop
 8012f1c:	e01a      	b.n	8012f54 <OutputDbgTrace+0xa8>
          break;
 8012f1e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012f20:	e018      	b.n	8012f54 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	7a5b      	ldrb	r3, [r3, #9]
 8012f2a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012f2c:	e012      	b.n	8012f54 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8012f32:	e00f      	b.n	8012f54 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	7a5b      	ldrb	r3, [r3, #9]
 8012f3c:	2b0e      	cmp	r3, #14
 8012f3e:	d000      	beq.n	8012f42 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012f40:	e000      	b.n	8012f44 <OutputDbgTrace+0x98>
          break;
 8012f42:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012f44:	e006      	b.n	8012f54 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	7a5b      	ldrb	r3, [r3, #9]
 8012f4e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012f50:	e000      	b.n	8012f54 <OutputDbgTrace+0xa8>

    default:
      break;
 8012f52:	bf00      	nop
  }

  return;
 8012f54:	bf00      	nop
}
 8012f56:	3714      	adds	r7, #20
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr

08012f60 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	460b      	mov	r3, r1
 8012f6a:	70fb      	strb	r3, [r7, #3]
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012f70:	f006 fe8c 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f74:	f006 fe28 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8012f78:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f062 0260 	orn	r2, r2, #96	; 0x60
 8012f82:	701a      	strb	r2, [r3, #0]
 8012f84:	2200      	movs	r2, #0
 8012f86:	705a      	strb	r2, [r3, #1]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	709a      	strb	r2, [r3, #2]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2200      	movs	r2, #0
 8012f94:	f042 0203 	orr.w	r2, r2, #3
 8012f98:	711a      	strb	r2, [r3, #4]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	715a      	strb	r2, [r3, #5]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	719a      	strb	r2, [r3, #6]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8012fac:	78fa      	ldrb	r2, [r7, #3]
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8012fb2:	78ba      	ldrb	r2, [r7, #2]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8012fb8:	f006 fe2a 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012fbc:	f006 fe10 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012fc0:	60f8      	str	r0, [r7, #12]
}
 8012fc2:	bf00      	nop
 8012fc4:	3710      	adds	r7, #16
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b086      	sub	sp, #24
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	60f8      	str	r0, [r7, #12]
 8012fd2:	60b9      	str	r1, [r7, #8]
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8012fd8:	f006 fe58 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012fdc:	f006 fdf4 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8012fe0:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8012fea:	701a      	strb	r2, [r3, #0]
 8012fec:	2200      	movs	r2, #0
 8012fee:	705a      	strb	r2, [r3, #1]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	709a      	strb	r2, [r3, #2]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	f042 0203 	orr.w	r2, r2, #3
 8013000:	711a      	strb	r2, [r3, #4]
 8013002:	2200      	movs	r2, #0
 8013004:	715a      	strb	r2, [r3, #5]
 8013006:	2200      	movs	r2, #0
 8013008:	719a      	strb	r2, [r3, #6]
 801300a:	2200      	movs	r2, #0
 801300c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801300e:	68fa      	ldr	r2, [r7, #12]
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8013014:	68ba      	ldr	r2, [r7, #8]
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 801301a:	79fa      	ldrb	r2, [r7, #7]
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8013020:	f006 fdf6 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013024:	f006 fddc 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013028:	6178      	str	r0, [r7, #20]
}
 801302a:	bf00      	nop
 801302c:	3718      	adds	r7, #24
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}

08013032 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8013032:	b580      	push	{r7, lr}
 8013034:	b084      	sub	sp, #16
 8013036:	af00      	add	r7, sp, #0
 8013038:	6078      	str	r0, [r7, #4]
 801303a:	460b      	mov	r3, r1
 801303c:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 801303e:	f006 fe25 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013042:	f006 fdc1 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013046:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2200      	movs	r2, #0
 801304c:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8013050:	701a      	strb	r2, [r3, #0]
 8013052:	2200      	movs	r2, #0
 8013054:	705a      	strb	r2, [r3, #1]
 8013056:	2200      	movs	r2, #0
 8013058:	709a      	strb	r2, [r3, #2]
 801305a:	2200      	movs	r2, #0
 801305c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	f042 0202 	orr.w	r2, r2, #2
 8013066:	711a      	strb	r2, [r3, #4]
 8013068:	2200      	movs	r2, #0
 801306a:	715a      	strb	r2, [r3, #5]
 801306c:	2200      	movs	r2, #0
 801306e:	719a      	strb	r2, [r3, #6]
 8013070:	2200      	movs	r2, #0
 8013072:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 801307a:	78fa      	ldrb	r2, [r7, #3]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8013080:	f006 fdc6 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013084:	f006 fdac 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013088:	60f8      	str	r0, [r7, #12]
}
 801308a:	bf00      	nop
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b084      	sub	sp, #16
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
 801309a:	460b      	mov	r3, r1
 801309c:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 801309e:	f006 fdf5 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80130a2:	f006 fd91 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80130a6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f062 025d 	orn	r2, r2, #93	; 0x5d
 80130b0:	701a      	strb	r2, [r3, #0]
 80130b2:	2200      	movs	r2, #0
 80130b4:	705a      	strb	r2, [r3, #1]
 80130b6:	2200      	movs	r2, #0
 80130b8:	709a      	strb	r2, [r3, #2]
 80130ba:	2200      	movs	r2, #0
 80130bc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2200      	movs	r2, #0
 80130c2:	f042 0202 	orr.w	r2, r2, #2
 80130c6:	711a      	strb	r2, [r3, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	715a      	strb	r2, [r3, #5]
 80130cc:	2200      	movs	r2, #0
 80130ce:	719a      	strb	r2, [r3, #6]
 80130d0:	2200      	movs	r2, #0
 80130d2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80130da:	78fa      	ldrb	r2, [r7, #3]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80130e0:	f006 fd96 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80130e4:	f006 fd7c 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80130e8:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	689b      	ldr	r3, [r3, #8]
 80130ee:	b2db      	uxtb	r3, r3
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8013102:	f006 fdc3 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013106:	f006 fd5f 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801310a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2200      	movs	r2, #0
 8013110:	f062 0250 	orn	r2, r2, #80	; 0x50
 8013114:	701a      	strb	r2, [r3, #0]
 8013116:	2200      	movs	r2, #0
 8013118:	705a      	strb	r2, [r3, #1]
 801311a:	2200      	movs	r2, #0
 801311c:	709a      	strb	r2, [r3, #2]
 801311e:	2200      	movs	r2, #0
 8013120:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2200      	movs	r2, #0
 8013126:	f042 0202 	orr.w	r2, r2, #2
 801312a:	711a      	strb	r2, [r3, #4]
 801312c:	2200      	movs	r2, #0
 801312e:	715a      	strb	r2, [r3, #5]
 8013130:	2200      	movs	r2, #0
 8013132:	719a      	strb	r2, [r3, #6]
 8013134:	2200      	movs	r2, #0
 8013136:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 801313e:	683a      	ldr	r2, [r7, #0]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8013144:	f006 fd64 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013148:	f006 fd4a 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801314c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	689b      	ldr	r3, [r3, #8]
 8013152:	b2db      	uxtb	r3, r3
}
 8013154:	4618      	mov	r0, r3
 8013156:	3710      	adds	r7, #16
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013164:	f006 fd92 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013168:	f006 fd2e 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801316c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2200      	movs	r2, #0
 8013172:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8013176:	701a      	strb	r2, [r3, #0]
 8013178:	2200      	movs	r2, #0
 801317a:	705a      	strb	r2, [r3, #1]
 801317c:	2200      	movs	r2, #0
 801317e:	709a      	strb	r2, [r3, #2]
 8013180:	2200      	movs	r2, #0
 8013182:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2200      	movs	r2, #0
 8013188:	f042 0201 	orr.w	r2, r2, #1
 801318c:	711a      	strb	r2, [r3, #4]
 801318e:	2200      	movs	r2, #0
 8013190:	715a      	strb	r2, [r3, #5]
 8013192:	2200      	movs	r2, #0
 8013194:	719a      	strb	r2, [r3, #6]
 8013196:	2200      	movs	r2, #0
 8013198:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80131a0:	f006 fd36 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80131a4:	f006 fd1c 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80131a8:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	689b      	ldr	r3, [r3, #8]
 80131ae:	b2db      	uxtb	r3, r3
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3710      	adds	r7, #16
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	460b      	mov	r3, r1
 80131c2:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80131c4:	f006 fd62 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80131c8:	f006 fcfe 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80131cc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2200      	movs	r2, #0
 80131d2:	f062 0256 	orn	r2, r2, #86	; 0x56
 80131d6:	701a      	strb	r2, [r3, #0]
 80131d8:	2200      	movs	r2, #0
 80131da:	705a      	strb	r2, [r3, #1]
 80131dc:	2200      	movs	r2, #0
 80131de:	709a      	strb	r2, [r3, #2]
 80131e0:	2200      	movs	r2, #0
 80131e2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2200      	movs	r2, #0
 80131e8:	f042 0202 	orr.w	r2, r2, #2
 80131ec:	711a      	strb	r2, [r3, #4]
 80131ee:	2200      	movs	r2, #0
 80131f0:	715a      	strb	r2, [r3, #5]
 80131f2:	2200      	movs	r2, #0
 80131f4:	719a      	strb	r2, [r3, #6]
 80131f6:	2200      	movs	r2, #0
 80131f8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8013200:	887a      	ldrh	r2, [r7, #2]
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8013206:	f006 fd03 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801320a:	f006 fce9 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801320e:	60f8      	str	r0, [r7, #12]
}
 8013210:	bf00      	nop
 8013212:	3710      	adds	r7, #16
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013220:	f006 fd34 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013224:	f006 fcd0 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013228:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2200      	movs	r2, #0
 801322e:	f062 0261 	orn	r2, r2, #97	; 0x61
 8013232:	701a      	strb	r2, [r3, #0]
 8013234:	2200      	movs	r2, #0
 8013236:	705a      	strb	r2, [r3, #1]
 8013238:	2200      	movs	r2, #0
 801323a:	709a      	strb	r2, [r3, #2]
 801323c:	2200      	movs	r2, #0
 801323e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2200      	movs	r2, #0
 8013244:	f042 0201 	orr.w	r2, r2, #1
 8013248:	711a      	strb	r2, [r3, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	715a      	strb	r2, [r3, #5]
 801324e:	2200      	movs	r2, #0
 8013250:	719a      	strb	r2, [r3, #6]
 8013252:	2200      	movs	r2, #0
 8013254:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801325c:	f006 fcd8 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013260:	f006 fcbe 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013264:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	689b      	ldr	r3, [r3, #8]
 801326a:	b2db      	uxtb	r3, r3
}
 801326c:	4618      	mov	r0, r3
 801326e:	3710      	adds	r7, #16
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801327c:	f006 fd06 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013280:	f006 fca2 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013284:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2200      	movs	r2, #0
 801328a:	f062 024c 	orn	r2, r2, #76	; 0x4c
 801328e:	701a      	strb	r2, [r3, #0]
 8013290:	2200      	movs	r2, #0
 8013292:	705a      	strb	r2, [r3, #1]
 8013294:	2200      	movs	r2, #0
 8013296:	709a      	strb	r2, [r3, #2]
 8013298:	2200      	movs	r2, #0
 801329a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2200      	movs	r2, #0
 80132a0:	f042 0201 	orr.w	r2, r2, #1
 80132a4:	711a      	strb	r2, [r3, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	715a      	strb	r2, [r3, #5]
 80132aa:	2200      	movs	r2, #0
 80132ac:	719a      	strb	r2, [r3, #6]
 80132ae:	2200      	movs	r2, #0
 80132b0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80132b2:	687a      	ldr	r2, [r7, #4]
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80132b8:	f006 fcaa 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80132bc:	f006 fc90 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80132c0:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	b2db      	uxtb	r3, r3
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3710      	adds	r7, #16
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80132d8:	f006 fcd8 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80132dc:	f006 fc74 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80132e0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2200      	movs	r2, #0
 80132e6:	f062 0255 	orn	r2, r2, #85	; 0x55
 80132ea:	701a      	strb	r2, [r3, #0]
 80132ec:	2200      	movs	r2, #0
 80132ee:	705a      	strb	r2, [r3, #1]
 80132f0:	2200      	movs	r2, #0
 80132f2:	709a      	strb	r2, [r3, #2]
 80132f4:	2200      	movs	r2, #0
 80132f6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2200      	movs	r2, #0
 80132fc:	f042 0201 	orr.w	r2, r2, #1
 8013300:	711a      	strb	r2, [r3, #4]
 8013302:	2200      	movs	r2, #0
 8013304:	715a      	strb	r2, [r3, #5]
 8013306:	2200      	movs	r2, #0
 8013308:	719a      	strb	r2, [r3, #6]
 801330a:	2200      	movs	r2, #0
 801330c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013314:	f006 fc7c 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013318:	f006 fc62 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801331c:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	689b      	ldr	r3, [r3, #8]
 8013322:	b29b      	uxth	r3, r3
}
 8013324:	4618      	mov	r0, r3
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013334:	f006 fcaa 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013338:	f006 fc46 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801333c:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2200      	movs	r2, #0
 8013342:	f062 0254 	orn	r2, r2, #84	; 0x54
 8013346:	701a      	strb	r2, [r3, #0]
 8013348:	2200      	movs	r2, #0
 801334a:	705a      	strb	r2, [r3, #1]
 801334c:	2200      	movs	r2, #0
 801334e:	709a      	strb	r2, [r3, #2]
 8013350:	2200      	movs	r2, #0
 8013352:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2200      	movs	r2, #0
 8013358:	f042 0201 	orr.w	r2, r2, #1
 801335c:	711a      	strb	r2, [r3, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	715a      	strb	r2, [r3, #5]
 8013362:	2200      	movs	r2, #0
 8013364:	719a      	strb	r2, [r3, #6]
 8013366:	2200      	movs	r2, #0
 8013368:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013370:	f006 fc4e 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013374:	f006 fc34 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013378:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	689b      	ldr	r3, [r3, #8]
 801337e:	b2db      	uxtb	r3, r3
}
 8013380:	4618      	mov	r0, r3
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013390:	f006 fc7c 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013394:	f006 fc18 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013398:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	2200      	movs	r2, #0
 801339e:	f062 0253 	orn	r2, r2, #83	; 0x53
 80133a2:	701a      	strb	r2, [r3, #0]
 80133a4:	2200      	movs	r2, #0
 80133a6:	705a      	strb	r2, [r3, #1]
 80133a8:	2200      	movs	r2, #0
 80133aa:	709a      	strb	r2, [r3, #2]
 80133ac:	2200      	movs	r2, #0
 80133ae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2200      	movs	r2, #0
 80133b4:	f042 0201 	orr.w	r2, r2, #1
 80133b8:	711a      	strb	r2, [r3, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	715a      	strb	r2, [r3, #5]
 80133be:	2200      	movs	r2, #0
 80133c0:	719a      	strb	r2, [r3, #6]
 80133c2:	2200      	movs	r2, #0
 80133c4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80133cc:	f006 fc20 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80133d0:	f006 fc06 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80133d4:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	689b      	ldr	r3, [r3, #8]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b084      	sub	sp, #16
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	6078      	str	r0, [r7, #4]
 80133ea:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80133ec:	f006 fc4e 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80133f0:	f006 fbea 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80133f4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2200      	movs	r2, #0
 80133fa:	f062 0259 	orn	r2, r2, #89	; 0x59
 80133fe:	701a      	strb	r2, [r3, #0]
 8013400:	2200      	movs	r2, #0
 8013402:	705a      	strb	r2, [r3, #1]
 8013404:	2200      	movs	r2, #0
 8013406:	709a      	strb	r2, [r3, #2]
 8013408:	2200      	movs	r2, #0
 801340a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	2200      	movs	r2, #0
 8013410:	f042 0201 	orr.w	r2, r2, #1
 8013414:	711a      	strb	r2, [r3, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	715a      	strb	r2, [r3, #5]
 801341a:	2200      	movs	r2, #0
 801341c:	719a      	strb	r2, [r3, #6]
 801341e:	2200      	movs	r2, #0
 8013420:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013422:	683a      	ldr	r2, [r7, #0]
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013428:	f006 fbf2 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801342c:	f006 fbd8 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013430:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	689b      	ldr	r3, [r3, #8]

}
 8013436:	4618      	mov	r0, r3
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b086      	sub	sp, #24
 8013442:	af00      	add	r7, sp, #0
 8013444:	60f8      	str	r0, [r7, #12]
 8013446:	60b9      	str	r1, [r7, #8]
 8013448:	607a      	str	r2, [r7, #4]
 801344a:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 801344c:	f006 fc1e 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013450:	f006 fbba 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013454:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	2200      	movs	r2, #0
 801345a:	f062 0258 	orn	r2, r2, #88	; 0x58
 801345e:	701a      	strb	r2, [r3, #0]
 8013460:	2200      	movs	r2, #0
 8013462:	705a      	strb	r2, [r3, #1]
 8013464:	2200      	movs	r2, #0
 8013466:	709a      	strb	r2, [r3, #2]
 8013468:	2200      	movs	r2, #0
 801346a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	2200      	movs	r2, #0
 8013470:	f042 0203 	orr.w	r2, r2, #3
 8013474:	711a      	strb	r2, [r3, #4]
 8013476:	2200      	movs	r2, #0
 8013478:	715a      	strb	r2, [r3, #5]
 801347a:	2200      	movs	r2, #0
 801347c:	719a      	strb	r2, [r3, #6]
 801347e:	2200      	movs	r2, #0
 8013480:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013482:	68ba      	ldr	r2, [r7, #8]
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 801348e:	683a      	ldr	r2, [r7, #0]
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8013494:	6a3a      	ldr	r2, [r7, #32]
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 801349a:	f006 fbb9 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801349e:	f006 fb9f 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80134a2:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	689b      	ldr	r3, [r3, #8]
 80134a8:	b2db      	uxtb	r3, r3
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3718      	adds	r7, #24
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}

080134b2 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80134b2:	b580      	push	{r7, lr}
 80134b4:	b084      	sub	sp, #16
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	6078      	str	r0, [r7, #4]
 80134ba:	460b      	mov	r3, r1
 80134bc:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80134be:	f006 fbe5 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80134c2:	f006 fb81 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80134c6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2200      	movs	r2, #0
 80134cc:	f062 024b 	orn	r2, r2, #75	; 0x4b
 80134d0:	701a      	strb	r2, [r3, #0]
 80134d2:	2200      	movs	r2, #0
 80134d4:	705a      	strb	r2, [r3, #1]
 80134d6:	2200      	movs	r2, #0
 80134d8:	709a      	strb	r2, [r3, #2]
 80134da:	2200      	movs	r2, #0
 80134dc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2200      	movs	r2, #0
 80134e2:	f042 0201 	orr.w	r2, r2, #1
 80134e6:	711a      	strb	r2, [r3, #4]
 80134e8:	2200      	movs	r2, #0
 80134ea:	715a      	strb	r2, [r3, #5]
 80134ec:	2200      	movs	r2, #0
 80134ee:	719a      	strb	r2, [r3, #6]
 80134f0:	2200      	movs	r2, #0
 80134f2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 80134f4:	887a      	ldrh	r2, [r7, #2]
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80134fa:	f006 fb89 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80134fe:	f006 fb6f 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013502:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	689b      	ldr	r3, [r3, #8]
 8013508:	b2db      	uxtb	r3, r3
}
 801350a:	4618      	mov	r0, r3
 801350c:	3710      	adds	r7, #16
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}

08013512 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8013512:	b580      	push	{r7, lr}
 8013514:	b084      	sub	sp, #16
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
 801351a:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 801351c:	f006 fbb6 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013520:	f006 fb52 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013524:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	f062 0249 	orn	r2, r2, #73	; 0x49
 801352e:	701a      	strb	r2, [r3, #0]
 8013530:	2200      	movs	r2, #0
 8013532:	705a      	strb	r2, [r3, #1]
 8013534:	2200      	movs	r2, #0
 8013536:	709a      	strb	r2, [r3, #2]
 8013538:	2200      	movs	r2, #0
 801353a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2200      	movs	r2, #0
 8013540:	f042 0201 	orr.w	r2, r2, #1
 8013544:	711a      	strb	r2, [r3, #4]
 8013546:	2200      	movs	r2, #0
 8013548:	715a      	strb	r2, [r3, #5]
 801354a:	2200      	movs	r2, #0
 801354c:	719a      	strb	r2, [r3, #6]
 801354e:	2200      	movs	r2, #0
 8013550:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8013552:	683a      	ldr	r2, [r7, #0]
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013558:	f006 fb5a 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801355c:	f006 fb40 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013560:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	689b      	ldr	r3, [r3, #8]
 8013566:	b2db      	uxtb	r3, r3
}
 8013568:	4618      	mov	r0, r3
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 801357c:	f006 fb86 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013580:	f006 fb22 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013584:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	2200      	movs	r2, #0
 801358a:	f062 0257 	orn	r2, r2, #87	; 0x57
 801358e:	701a      	strb	r2, [r3, #0]
 8013590:	2200      	movs	r2, #0
 8013592:	705a      	strb	r2, [r3, #1]
 8013594:	2200      	movs	r2, #0
 8013596:	709a      	strb	r2, [r3, #2]
 8013598:	2200      	movs	r2, #0
 801359a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	2200      	movs	r2, #0
 80135a0:	f042 0202 	orr.w	r2, r2, #2
 80135a4:	711a      	strb	r2, [r3, #4]
 80135a6:	2200      	movs	r2, #0
 80135a8:	715a      	strb	r2, [r3, #5]
 80135aa:	2200      	movs	r2, #0
 80135ac:	719a      	strb	r2, [r3, #6]
 80135ae:	2200      	movs	r2, #0
 80135b0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80135b2:	68ba      	ldr	r2, [r7, #8]
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80135be:	f006 fb27 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80135c2:	f006 fb0d 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80135c6:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	b2db      	uxtb	r3, r3
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3718      	adds	r7, #24
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}

080135d6 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b082      	sub	sp, #8
 80135da:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 80135dc:	f006 fb56 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80135e0:	f006 faf2 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80135e4:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2200      	movs	r2, #0
 80135ea:	f062 026b 	orn	r2, r2, #107	; 0x6b
 80135ee:	701a      	strb	r2, [r3, #0]
 80135f0:	2200      	movs	r2, #0
 80135f2:	705a      	strb	r2, [r3, #1]
 80135f4:	2200      	movs	r2, #0
 80135f6:	709a      	strb	r2, [r3, #2]
 80135f8:	2200      	movs	r2, #0
 80135fa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	711a      	strb	r2, [r3, #4]
 8013602:	2200      	movs	r2, #0
 8013604:	715a      	strb	r2, [r3, #5]
 8013606:	2200      	movs	r2, #0
 8013608:	719a      	strb	r2, [r3, #6]
 801360a:	2200      	movs	r2, #0
 801360c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801360e:	f006 faff 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013612:	f006 fae5 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013616:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	689b      	ldr	r3, [r3, #8]
}
 801361c:	4618      	mov	r0, r3
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801362c:	f006 fb2e 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013630:	f006 faca 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013634:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2200      	movs	r2, #0
 801363a:	f062 0269 	orn	r2, r2, #105	; 0x69
 801363e:	701a      	strb	r2, [r3, #0]
 8013640:	2200      	movs	r2, #0
 8013642:	705a      	strb	r2, [r3, #1]
 8013644:	2200      	movs	r2, #0
 8013646:	709a      	strb	r2, [r3, #2]
 8013648:	2200      	movs	r2, #0
 801364a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2200      	movs	r2, #0
 8013650:	711a      	strb	r2, [r3, #4]
 8013652:	2200      	movs	r2, #0
 8013654:	715a      	strb	r2, [r3, #5]
 8013656:	2200      	movs	r2, #0
 8013658:	719a      	strb	r2, [r3, #6]
 801365a:	2200      	movs	r2, #0
 801365c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801365e:	f006 fad7 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013662:	f006 fabd 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013666:	60f8      	str	r0, [r7, #12]
}
 8013668:	bf00      	nop
 801366a:	3710      	adds	r7, #16
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b086      	sub	sp, #24
 8013674:	af00      	add	r7, sp, #0
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 801367c:	f006 fb06 	bl	8019c8c <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8013680:	4a15      	ldr	r2, [pc, #84]	; (80136d8 <otSetStateChangedCallback+0x68>)
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013686:	f006 fa9f 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801368a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	2200      	movs	r2, #0
 8013690:	f062 0268 	orn	r2, r2, #104	; 0x68
 8013694:	701a      	strb	r2, [r3, #0]
 8013696:	2200      	movs	r2, #0
 8013698:	705a      	strb	r2, [r3, #1]
 801369a:	2200      	movs	r2, #0
 801369c:	709a      	strb	r2, [r3, #2]
 801369e:	2200      	movs	r2, #0
 80136a0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	2200      	movs	r2, #0
 80136a6:	f042 0201 	orr.w	r2, r2, #1
 80136aa:	711a      	strb	r2, [r3, #4]
 80136ac:	2200      	movs	r2, #0
 80136ae:	715a      	strb	r2, [r3, #5]
 80136b0:	2200      	movs	r2, #0
 80136b2:	719a      	strb	r2, [r3, #6]
 80136b4:	2200      	movs	r2, #0
 80136b6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80136be:	f006 faa7 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80136c2:	f006 fa8d 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80136c6:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	689b      	ldr	r3, [r3, #8]
 80136cc:	b2db      	uxtb	r3, r3
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3718      	adds	r7, #24
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
 80136d6:	bf00      	nop
 80136d8:	20000ce0 	.word	0x20000ce0

080136dc <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b084      	sub	sp, #16
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80136e4:	f006 fad2 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80136e8:	f006 fa6e 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80136ec:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	f062 0264 	orn	r2, r2, #100	; 0x64
 80136f6:	701a      	strb	r2, [r3, #0]
 80136f8:	2200      	movs	r2, #0
 80136fa:	705a      	strb	r2, [r3, #1]
 80136fc:	2200      	movs	r2, #0
 80136fe:	709a      	strb	r2, [r3, #2]
 8013700:	2200      	movs	r2, #0
 8013702:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	711a      	strb	r2, [r3, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	715a      	strb	r2, [r3, #5]
 801370e:	2200      	movs	r2, #0
 8013710:	719a      	strb	r2, [r3, #6]
 8013712:	2200      	movs	r2, #0
 8013714:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8013716:	f006 fa7b 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801371a:	f006 fa61 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801371e:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	689b      	ldr	r3, [r3, #8]
 8013724:	b2db      	uxtb	r3, r3
}
 8013726:	4618      	mov	r0, r3
 8013728:	3710      	adds	r7, #16
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}

0801372e <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 801372e:	b580      	push	{r7, lr}
 8013730:	b084      	sub	sp, #16
 8013732:	af00      	add	r7, sp, #0
 8013734:	6078      	str	r0, [r7, #4]
 8013736:	460b      	mov	r3, r1
 8013738:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801373a:	f006 faa7 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801373e:	f006 fa43 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013742:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	2200      	movs	r2, #0
 8013748:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 801374c:	701a      	strb	r2, [r3, #0]
 801374e:	2200      	movs	r2, #0
 8013750:	705a      	strb	r2, [r3, #1]
 8013752:	2200      	movs	r2, #0
 8013754:	709a      	strb	r2, [r3, #2]
 8013756:	2200      	movs	r2, #0
 8013758:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	2200      	movs	r2, #0
 801375e:	f042 0201 	orr.w	r2, r2, #1
 8013762:	711a      	strb	r2, [r3, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	715a      	strb	r2, [r3, #5]
 8013768:	2200      	movs	r2, #0
 801376a:	719a      	strb	r2, [r3, #6]
 801376c:	2200      	movs	r2, #0
 801376e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013770:	78fa      	ldrb	r2, [r7, #3]
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013776:	f006 fa4b 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801377a:	f006 fa31 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801377e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	689b      	ldr	r3, [r3, #8]
 8013784:	b2db      	uxtb	r3, r3
}
 8013786:	4618      	mov	r0, r3
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 801378e:	b580      	push	{r7, lr}
 8013790:	b084      	sub	sp, #16
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013796:	f006 fa79 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801379a:	f006 fa15 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801379e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2200      	movs	r2, #0
 80137a4:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80137a8:	701a      	strb	r2, [r3, #0]
 80137aa:	2200      	movs	r2, #0
 80137ac:	705a      	strb	r2, [r3, #1]
 80137ae:	2200      	movs	r2, #0
 80137b0:	709a      	strb	r2, [r3, #2]
 80137b2:	2200      	movs	r2, #0
 80137b4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2200      	movs	r2, #0
 80137ba:	711a      	strb	r2, [r3, #4]
 80137bc:	2200      	movs	r2, #0
 80137be:	715a      	strb	r2, [r3, #5]
 80137c0:	2200      	movs	r2, #0
 80137c2:	719a      	strb	r2, [r3, #6]
 80137c4:	2200      	movs	r2, #0
 80137c6:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80137c8:	f006 fa22 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80137cc:	f006 fa08 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80137d0:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	bf14      	ite	ne
 80137da:	2301      	movne	r3, #1
 80137dc:	2300      	moveq	r3, #0
 80137de:	b2db      	uxtb	r3, r3
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80137f0:	f006 fa4c 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80137f4:	f006 f9e8 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80137f8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2200      	movs	r2, #0
 80137fe:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8013802:	701a      	strb	r2, [r3, #0]
 8013804:	2200      	movs	r2, #0
 8013806:	705a      	strb	r2, [r3, #1]
 8013808:	2200      	movs	r2, #0
 801380a:	709a      	strb	r2, [r3, #2]
 801380c:	2200      	movs	r2, #0
 801380e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	2200      	movs	r2, #0
 8013814:	711a      	strb	r2, [r3, #4]
 8013816:	2200      	movs	r2, #0
 8013818:	715a      	strb	r2, [r3, #5]
 801381a:	2200      	movs	r2, #0
 801381c:	719a      	strb	r2, [r3, #6]
 801381e:	2200      	movs	r2, #0
 8013820:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013822:	f006 f9f5 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013826:	f006 f9db 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801382a:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	689b      	ldr	r3, [r3, #8]
}
 8013830:	4618      	mov	r0, r3
 8013832:	3710      	adds	r7, #16
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b084      	sub	sp, #16
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013840:	f006 fa24 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013844:	f006 f9c0 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013848:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2200      	movs	r2, #0
 801384e:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 8013852:	701a      	strb	r2, [r3, #0]
 8013854:	2200      	movs	r2, #0
 8013856:	705a      	strb	r2, [r3, #1]
 8013858:	2200      	movs	r2, #0
 801385a:	709a      	strb	r2, [r3, #2]
 801385c:	2200      	movs	r2, #0
 801385e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2200      	movs	r2, #0
 8013864:	711a      	strb	r2, [r3, #4]
 8013866:	2200      	movs	r2, #0
 8013868:	715a      	strb	r2, [r3, #5]
 801386a:	2200      	movs	r2, #0
 801386c:	719a      	strb	r2, [r3, #6]
 801386e:	2200      	movs	r2, #0
 8013870:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013872:	f006 f9cd 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013876:	f006 f9b3 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801387a:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	689b      	ldr	r3, [r3, #8]
}
 8013880:	4618      	mov	r0, r3
 8013882:	3710      	adds	r7, #16
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013892:	f006 f9fb 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013896:	f006 f997 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801389a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2200      	movs	r2, #0
 80138a0:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 80138a4:	701a      	strb	r2, [r3, #0]
 80138a6:	2200      	movs	r2, #0
 80138a8:	705a      	strb	r2, [r3, #1]
 80138aa:	2200      	movs	r2, #0
 80138ac:	709a      	strb	r2, [r3, #2]
 80138ae:	2200      	movs	r2, #0
 80138b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f042 0202 	orr.w	r2, r2, #2
 80138ba:	711a      	strb	r2, [r3, #4]
 80138bc:	2200      	movs	r2, #0
 80138be:	715a      	strb	r2, [r3, #5]
 80138c0:	2200      	movs	r2, #0
 80138c2:	719a      	strb	r2, [r3, #6]
 80138c4:	2200      	movs	r2, #0
 80138c6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 80138ce:	683a      	ldr	r2, [r7, #0]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80138d4:	f006 f99c 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80138d8:	f006 f982 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80138dc:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	bf14      	ite	ne
 80138e6:	2301      	movne	r3, #1
 80138e8:	2300      	moveq	r3, #0
 80138ea:	b2db      	uxtb	r3, r3
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3710      	adds	r7, #16
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80138fe:	f006 f9c5 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013902:	f006 f961 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013906:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2200      	movs	r2, #0
 801390c:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8013910:	701a      	strb	r2, [r3, #0]
 8013912:	2200      	movs	r2, #0
 8013914:	705a      	strb	r2, [r3, #1]
 8013916:	2200      	movs	r2, #0
 8013918:	709a      	strb	r2, [r3, #2]
 801391a:	2200      	movs	r2, #0
 801391c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2200      	movs	r2, #0
 8013922:	f042 0202 	orr.w	r2, r2, #2
 8013926:	711a      	strb	r2, [r3, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	715a      	strb	r2, [r3, #5]
 801392c:	2200      	movs	r2, #0
 801392e:	719a      	strb	r2, [r3, #6]
 8013930:	2200      	movs	r2, #0
 8013932:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 801393a:	683a      	ldr	r2, [r7, #0]
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8013940:	f006 f966 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013944:	f006 f94c 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013948:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	689b      	ldr	r3, [r3, #8]
 801394e:	b2db      	uxtb	r3, r3
}
 8013950:	4618      	mov	r0, r3
 8013952:	3710      	adds	r7, #16
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}

08013958 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	460b      	mov	r3, r1
 8013962:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013964:	f006 f992 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013968:	f006 f92e 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801396c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2200      	movs	r2, #0
 8013972:	f042 0208 	orr.w	r2, r2, #8
 8013976:	701a      	strb	r2, [r3, #0]
 8013978:	2200      	movs	r2, #0
 801397a:	705a      	strb	r2, [r3, #1]
 801397c:	2200      	movs	r2, #0
 801397e:	709a      	strb	r2, [r3, #2]
 8013980:	2200      	movs	r2, #0
 8013982:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	2200      	movs	r2, #0
 8013988:	f042 0201 	orr.w	r2, r2, #1
 801398c:	711a      	strb	r2, [r3, #4]
 801398e:	2200      	movs	r2, #0
 8013990:	715a      	strb	r2, [r3, #5]
 8013992:	2200      	movs	r2, #0
 8013994:	719a      	strb	r2, [r3, #6]
 8013996:	2200      	movs	r2, #0
 8013998:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 801399a:	78fa      	ldrb	r2, [r7, #3]
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80139a0:	f006 f936 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80139a4:	f006 f91c 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80139a8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	689b      	ldr	r3, [r3, #8]
 80139ae:	b2db      	uxtb	r3, r3
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3710      	adds	r7, #16
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	460b      	mov	r3, r1
 80139c2:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80139c4:	f006 f962 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80139c8:	f006 f8fe 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80139cc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2200      	movs	r2, #0
 80139d2:	f042 020f 	orr.w	r2, r2, #15
 80139d6:	701a      	strb	r2, [r3, #0]
 80139d8:	2200      	movs	r2, #0
 80139da:	705a      	strb	r2, [r3, #1]
 80139dc:	2200      	movs	r2, #0
 80139de:	709a      	strb	r2, [r3, #2]
 80139e0:	2200      	movs	r2, #0
 80139e2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2200      	movs	r2, #0
 80139e8:	f042 0201 	orr.w	r2, r2, #1
 80139ec:	711a      	strb	r2, [r3, #4]
 80139ee:	2200      	movs	r2, #0
 80139f0:	715a      	strb	r2, [r3, #5]
 80139f2:	2200      	movs	r2, #0
 80139f4:	719a      	strb	r2, [r3, #6]
 80139f6:	2200      	movs	r2, #0
 80139f8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80139fa:	887a      	ldrh	r2, [r7, #2]
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013a00:	f006 f906 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013a04:	f006 f8ec 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013a08:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	689b      	ldr	r3, [r3, #8]
 8013a0e:	b2db      	uxtb	r3, r3
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013a20:	f006 f934 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013a24:	f006 f8d0 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013a28:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f062 0246 	orn	r2, r2, #70	; 0x46
 8013a32:	701a      	strb	r2, [r3, #0]
 8013a34:	2200      	movs	r2, #0
 8013a36:	705a      	strb	r2, [r3, #1]
 8013a38:	2200      	movs	r2, #0
 8013a3a:	709a      	strb	r2, [r3, #2]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2200      	movs	r2, #0
 8013a44:	f042 0201 	orr.w	r2, r2, #1
 8013a48:	711a      	strb	r2, [r3, #4]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	715a      	strb	r2, [r3, #5]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	719a      	strb	r2, [r3, #6]
 8013a52:	2200      	movs	r2, #0
 8013a54:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013a5c:	f006 f8d8 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013a60:	f006 f8be 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013a64:	60f8      	str	r0, [r7, #12]
}
 8013a66:	bf00      	nop
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}

08013a6e <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b084      	sub	sp, #16
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013a76:	f006 f909 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013a7a:	f006 f8a5 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013a7e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	2200      	movs	r2, #0
 8013a84:	f062 0243 	orn	r2, r2, #67	; 0x43
 8013a88:	701a      	strb	r2, [r3, #0]
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	705a      	strb	r2, [r3, #1]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	709a      	strb	r2, [r3, #2]
 8013a92:	2200      	movs	r2, #0
 8013a94:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	f042 0201 	orr.w	r2, r2, #1
 8013a9e:	711a      	strb	r2, [r3, #4]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	715a      	strb	r2, [r3, #5]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	719a      	strb	r2, [r3, #6]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013ab2:	f006 f8ad 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013ab6:	f006 f893 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013aba:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	689b      	ldr	r3, [r3, #8]
 8013ac0:	b29b      	uxth	r3, r3
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b086      	sub	sp, #24
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	60b9      	str	r1, [r7, #8]
 8013ad4:	4613      	mov	r3, r2
 8013ad6:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8013ad8:	f006 f8d8 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013adc:	f006 f874 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013ae0:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8013aea:	701a      	strb	r2, [r3, #0]
 8013aec:	2200      	movs	r2, #0
 8013aee:	705a      	strb	r2, [r3, #1]
 8013af0:	2200      	movs	r2, #0
 8013af2:	709a      	strb	r2, [r3, #2]
 8013af4:	2200      	movs	r2, #0
 8013af6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	2200      	movs	r2, #0
 8013afc:	f042 0203 	orr.w	r2, r2, #3
 8013b00:	711a      	strb	r2, [r3, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	715a      	strb	r2, [r3, #5]
 8013b06:	2200      	movs	r2, #0
 8013b08:	719a      	strb	r2, [r3, #6]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013b0e:	68fa      	ldr	r2, [r7, #12]
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 8013b14:	68ba      	ldr	r2, [r7, #8]
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8013b1a:	88fa      	ldrh	r2, [r7, #6]
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8013b20:	f006 f876 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013b24:	f006 f85c 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013b28:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	689b      	ldr	r3, [r3, #8]
 8013b2e:	b2db      	uxtb	r3, r3
}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3718      	adds	r7, #24
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b086      	sub	sp, #24
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	607a      	str	r2, [r7, #4]
 8013b42:	461a      	mov	r2, r3
 8013b44:	460b      	mov	r3, r1
 8013b46:	817b      	strh	r3, [r7, #10]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8013b4c:	f006 f89e 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013b50:	f006 f83a 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013b54:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8013b5e:	701a      	strb	r2, [r3, #0]
 8013b60:	2200      	movs	r2, #0
 8013b62:	705a      	strb	r2, [r3, #1]
 8013b64:	2200      	movs	r2, #0
 8013b66:	709a      	strb	r2, [r3, #2]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	f042 0204 	orr.w	r2, r2, #4
 8013b74:	711a      	strb	r2, [r3, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	715a      	strb	r2, [r3, #5]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	719a      	strb	r2, [r3, #6]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013b82:	68fa      	ldr	r2, [r7, #12]
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8013b88:	897a      	ldrh	r2, [r7, #10]
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 8013b94:	893a      	ldrh	r2, [r7, #8]
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013b9a:	f006 f839 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013b9e:	f006 f81f 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013ba2:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	689b      	ldr	r3, [r3, #8]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3718      	adds	r7, #24
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8013bb0:	b5b0      	push	{r4, r5, r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8013bba:	f006 f81d 	bl	8019bf8 <THREAD_Get_NotificationPayloadBuffer>
 8013bbe:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	3b01      	subs	r3, #1
 8013bc6:	2b17      	cmp	r3, #23
 8013bc8:	f200 81c3 	bhi.w	8013f52 <OpenThread_CallBack_Processing+0x3a2>
 8013bcc:	a201      	add	r2, pc, #4	; (adr r2, 8013bd4 <OpenThread_CallBack_Processing+0x24>)
 8013bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bd2:	bf00      	nop
 8013bd4:	08013c35 	.word	0x08013c35
 8013bd8:	08013c51 	.word	0x08013c51
 8013bdc:	08013cb5 	.word	0x08013cb5
 8013be0:	08013cfd 	.word	0x08013cfd
 8013be4:	08013d09 	.word	0x08013d09
 8013be8:	08013d27 	.word	0x08013d27
 8013bec:	08013d45 	.word	0x08013d45
 8013bf0:	08013d63 	.word	0x08013d63
 8013bf4:	08013d81 	.word	0x08013d81
 8013bf8:	08013d9f 	.word	0x08013d9f
 8013bfc:	08013dc1 	.word	0x08013dc1
 8013c00:	08013ddf 	.word	0x08013ddf
 8013c04:	08013f53 	.word	0x08013f53
 8013c08:	08013e05 	.word	0x08013e05
 8013c0c:	08013e39 	.word	0x08013e39
 8013c10:	08013e61 	.word	0x08013e61
 8013c14:	08013e7f 	.word	0x08013e7f
 8013c18:	08013eed 	.word	0x08013eed
 8013c1c:	08013f15 	.word	0x08013f15
 8013c20:	08013f53 	.word	0x08013f53
 8013c24:	08013f33 	.word	0x08013f33
 8013c28:	08013f53 	.word	0x08013f53
 8013c2c:	08013f53 	.word	0x08013f53
 8013c30:	08013c8d 	.word	0x08013c8d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8013c34:	4b9b      	ldr	r3, [pc, #620]	; (8013ea4 <OpenThread_CallBack_Processing+0x2f4>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	f000 818d 	beq.w	8013f58 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8013c3e:	4b99      	ldr	r3, [pc, #612]	; (8013ea4 <OpenThread_CallBack_Processing+0x2f4>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	683a      	ldr	r2, [r7, #0]
 8013c44:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8013c46:	683a      	ldr	r2, [r7, #0]
 8013c48:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8013c4a:	4611      	mov	r1, r2
 8013c4c:	4798      	blx	r3
        }
        break;
 8013c4e:	e183      	b.n	8013f58 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	689b      	ldr	r3, [r3, #8]
 8013c54:	461a      	mov	r2, r3
 8013c56:	4b94      	ldr	r3, [pc, #592]	; (8013ea8 <OpenThread_CallBack_Processing+0x2f8>)
 8013c58:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 8013c5a:	4b93      	ldr	r3, [pc, #588]	; (8013ea8 <OpenThread_CallBack_Processing+0x2f8>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	685b      	ldr	r3, [r3, #4]
 8013c60:	4a92      	ldr	r2, [pc, #584]	; (8013eac <OpenThread_CallBack_Processing+0x2fc>)
 8013c62:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 8013c64:	4b91      	ldr	r3, [pc, #580]	; (8013eac <OpenThread_CallBack_Processing+0x2fc>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	f000 8177 	beq.w	8013f5c <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8013c6e:	4b8f      	ldr	r3, [pc, #572]	; (8013eac <OpenThread_CallBack_Processing+0x2fc>)
 8013c70:	681c      	ldr	r4, [r3, #0]
 8013c72:	4b8d      	ldr	r3, [pc, #564]	; (8013ea8 <OpenThread_CallBack_Processing+0x2f8>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8013c7c:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8013c82:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8013c88:	47a0      	blx	r4
        }
        break;
 8013c8a:	e167      	b.n	8013f5c <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 8013c8c:	4b88      	ldr	r3, [pc, #544]	; (8013eb0 <OpenThread_CallBack_Processing+0x300>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	f000 8165 	beq.w	8013f60 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8013c96:	4b86      	ldr	r3, [pc, #536]	; (8013eb0 <OpenThread_CallBack_Processing+0x300>)
 8013c98:	681c      	ldr	r4, [r3, #0]
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8013ca4:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8013caa:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8013cb0:	47a0      	blx	r4
        }
        break;
 8013cb2:	e155      	b.n	8013f60 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	689b      	ldr	r3, [r3, #8]
 8013cb8:	461a      	mov	r2, r3
 8013cba:	4b7e      	ldr	r3, [pc, #504]	; (8013eb4 <OpenThread_CallBack_Processing+0x304>)
 8013cbc:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 8013cbe:	4b7d      	ldr	r3, [pc, #500]	; (8013eb4 <OpenThread_CallBack_Processing+0x304>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	4a7c      	ldr	r2, [pc, #496]	; (8013eb8 <OpenThread_CallBack_Processing+0x308>)
 8013cc6:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 8013cc8:	4b7b      	ldr	r3, [pc, #492]	; (8013eb8 <OpenThread_CallBack_Processing+0x308>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f000 8149 	beq.w	8013f64 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8013cd2:	4b79      	ldr	r3, [pc, #484]	; (8013eb8 <OpenThread_CallBack_Processing+0x308>)
 8013cd4:	681c      	ldr	r4, [r3, #0]
 8013cd6:	4b77      	ldr	r3, [pc, #476]	; (8013eb4 <OpenThread_CallBack_Processing+0x304>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8013ce0:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8013ce6:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8013cec:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	462b      	mov	r3, r5
 8013cf8:	47a0      	blx	r4
        }
        break;
 8013cfa:	e133      	b.n	8013f64 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8013cfc:	2001      	movs	r0, #1
 8013cfe:	f7fe fcca 	bl	8012696 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8013d02:	f7f4 fc50 	bl	80085a6 <HAL_NVIC_SystemReset>
        break;
 8013d06:	e14c      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8013d08:	4b6c      	ldr	r3, [pc, #432]	; (8013ebc <OpenThread_CallBack_Processing+0x30c>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f000 812b 	beq.w	8013f68 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013d12:	4b6a      	ldr	r3, [pc, #424]	; (8013ebc <OpenThread_CallBack_Processing+0x30c>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	683a      	ldr	r2, [r7, #0]
 8013d18:	6892      	ldr	r2, [r2, #8]
 8013d1a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013d1c:	683a      	ldr	r2, [r7, #0]
 8013d1e:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013d20:	4611      	mov	r1, r2
 8013d22:	4798      	blx	r3
        }
        break;
 8013d24:	e120      	b.n	8013f68 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8013d26:	4b66      	ldr	r3, [pc, #408]	; (8013ec0 <OpenThread_CallBack_Processing+0x310>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	f000 811e 	beq.w	8013f6c <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8013d30:	4b63      	ldr	r3, [pc, #396]	; (8013ec0 <OpenThread_CallBack_Processing+0x310>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	683a      	ldr	r2, [r7, #0]
 8013d36:	6892      	ldr	r2, [r2, #8]
 8013d38:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 8013d3a:	683a      	ldr	r2, [r7, #0]
 8013d3c:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8013d3e:	2000      	movs	r0, #0
 8013d40:	4798      	blx	r3
        }
        break;
 8013d42:	e113      	b.n	8013f6c <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8013d44:	4b5f      	ldr	r3, [pc, #380]	; (8013ec4 <OpenThread_CallBack_Processing+0x314>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f000 8111 	beq.w	8013f70 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8013d4e:	4b5d      	ldr	r3, [pc, #372]	; (8013ec4 <OpenThread_CallBack_Processing+0x314>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	683a      	ldr	r2, [r7, #0]
 8013d54:	6892      	ldr	r2, [r2, #8]
 8013d56:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013d58:	683a      	ldr	r2, [r7, #0]
 8013d5a:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	4798      	blx	r3
        }
        break;
 8013d60:	e106      	b.n	8013f70 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8013d62:	4b59      	ldr	r3, [pc, #356]	; (8013ec8 <OpenThread_CallBack_Processing+0x318>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	f000 8104 	beq.w	8013f74 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8013d6c:	4b56      	ldr	r3, [pc, #344]	; (8013ec8 <OpenThread_CallBack_Processing+0x318>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	683a      	ldr	r2, [r7, #0]
 8013d72:	6892      	ldr	r2, [r2, #8]
 8013d74:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013d76:	683a      	ldr	r2, [r7, #0]
 8013d78:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8013d7a:	4611      	mov	r1, r2
 8013d7c:	4798      	blx	r3
        }
        break;
 8013d7e:	e0f9      	b.n	8013f74 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8013d80:	4b52      	ldr	r3, [pc, #328]	; (8013ecc <OpenThread_CallBack_Processing+0x31c>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	f000 80f7 	beq.w	8013f78 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8013d8a:	4b50      	ldr	r3, [pc, #320]	; (8013ecc <OpenThread_CallBack_Processing+0x31c>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	683a      	ldr	r2, [r7, #0]
 8013d90:	6892      	ldr	r2, [r2, #8]
 8013d92:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013d94:	683a      	ldr	r2, [r7, #0]
 8013d96:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8013d98:	4611      	mov	r1, r2
 8013d9a:	4798      	blx	r3
        }
        break;
 8013d9c:	e0ec      	b.n	8013f78 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8013d9e:	4b4c      	ldr	r3, [pc, #304]	; (8013ed0 <OpenThread_CallBack_Processing+0x320>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	f000 80ea 	beq.w	8013f7c <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013da8:	4b49      	ldr	r3, [pc, #292]	; (8013ed0 <OpenThread_CallBack_Processing+0x320>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	683a      	ldr	r2, [r7, #0]
 8013dae:	6892      	ldr	r2, [r2, #8]
 8013db0:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8013db2:	683a      	ldr	r2, [r7, #0]
 8013db4:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013db6:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 8013db8:	683a      	ldr	r2, [r7, #0]
 8013dba:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013dbc:	4798      	blx	r3
        }
        break;
 8013dbe:	e0dd      	b.n	8013f7c <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8013dc0:	4b44      	ldr	r3, [pc, #272]	; (8013ed4 <OpenThread_CallBack_Processing+0x324>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f000 80db 	beq.w	8013f80 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8013dca:	4b42      	ldr	r3, [pc, #264]	; (8013ed4 <OpenThread_CallBack_Processing+0x324>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	683a      	ldr	r2, [r7, #0]
 8013dd0:	6892      	ldr	r2, [r2, #8]
 8013dd2:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8013dd4:	683a      	ldr	r2, [r7, #0]
 8013dd6:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8013dd8:	4611      	mov	r1, r2
 8013dda:	4798      	blx	r3
        }
        break;
 8013ddc:	e0d0      	b.n	8013f80 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8013dde:	4b3e      	ldr	r3, [pc, #248]	; (8013ed8 <OpenThread_CallBack_Processing+0x328>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f000 80ce 	beq.w	8013f84 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013de8:	4b3b      	ldr	r3, [pc, #236]	; (8013ed8 <OpenThread_CallBack_Processing+0x328>)
 8013dea:	681c      	ldr	r4, [r3, #0]
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013df4:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013dfa:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013e00:	47a0      	blx	r4
        }
        break;
 8013e02:	e0bf      	b.n	8013f84 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8013e04:	4b35      	ldr	r3, [pc, #212]	; (8013edc <OpenThread_CallBack_Processing+0x32c>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f000 80bd 	beq.w	8013f88 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013e0e:	4b33      	ldr	r3, [pc, #204]	; (8013edc <OpenThread_CallBack_Processing+0x32c>)
 8013e10:	681c      	ldr	r4, [r3, #0]
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	689b      	ldr	r3, [r3, #8]
 8013e16:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013e1c:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013e22:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	9300      	str	r3, [sp, #0]
 8013e30:	4613      	mov	r3, r2
 8013e32:	462a      	mov	r2, r5
 8013e34:	47a0      	blx	r4
        }
        break;
 8013e36:	e0a7      	b.n	8013f88 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8013e38:	4b29      	ldr	r3, [pc, #164]	; (8013ee0 <OpenThread_CallBack_Processing+0x330>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f000 80a5 	beq.w	8013f8c <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013e42:	4b27      	ldr	r3, [pc, #156]	; (8013ee0 <OpenThread_CallBack_Processing+0x330>)
 8013e44:	681c      	ldr	r4, [r3, #0]
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013e50:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013e56:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013e5c:	47a0      	blx	r4
        }
        break;
 8013e5e:	e095      	b.n	8013f8c <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8013e60:	4b20      	ldr	r3, [pc, #128]	; (8013ee4 <OpenThread_CallBack_Processing+0x334>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	f000 8093 	beq.w	8013f90 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 8013e6a:	4b1e      	ldr	r3, [pc, #120]	; (8013ee4 <OpenThread_CallBack_Processing+0x334>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	683a      	ldr	r2, [r7, #0]
 8013e70:	6892      	ldr	r2, [r2, #8]
 8013e72:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8013e74:	683a      	ldr	r2, [r7, #0]
 8013e76:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 8013e78:	4611      	mov	r1, r2
 8013e7a:	4798      	blx	r3
        }
        break;
 8013e7c:	e088      	b.n	8013f90 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8013e7e:	4b1a      	ldr	r3, [pc, #104]	; (8013ee8 <OpenThread_CallBack_Processing+0x338>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	f000 8086 	beq.w	8013f94 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013e88:	4b17      	ldr	r3, [pc, #92]	; (8013ee8 <OpenThread_CallBack_Processing+0x338>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	683a      	ldr	r2, [r7, #0]
 8013e8e:	6892      	ldr	r2, [r2, #8]
 8013e90:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8013e92:	683a      	ldr	r2, [r7, #0]
 8013e94:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013e96:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8013e98:	683a      	ldr	r2, [r7, #0]
 8013e9a:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013e9c:	b2d2      	uxtb	r2, r2
 8013e9e:	4798      	blx	r3
        }
        break;
 8013ea0:	e078      	b.n	8013f94 <OpenThread_CallBack_Processing+0x3e4>
 8013ea2:	bf00      	nop
 8013ea4:	20000ce0 	.word	0x20000ce0
 8013ea8:	20028970 	.word	0x20028970
 8013eac:	20000d20 	.word	0x20000d20
 8013eb0:	20000d24 	.word	0x20000d24
 8013eb4:	2002896c 	.word	0x2002896c
 8013eb8:	20000d28 	.word	0x20000d28
 8013ebc:	20000ce8 	.word	0x20000ce8
 8013ec0:	20000ce4 	.word	0x20000ce4
 8013ec4:	20000cec 	.word	0x20000cec
 8013ec8:	20000cf0 	.word	0x20000cf0
 8013ecc:	20000cf4 	.word	0x20000cf4
 8013ed0:	20000cf8 	.word	0x20000cf8
 8013ed4:	20000cfc 	.word	0x20000cfc
 8013ed8:	20000d00 	.word	0x20000d00
 8013edc:	20000d04 	.word	0x20000d04
 8013ee0:	20000d08 	.word	0x20000d08
 8013ee4:	20000d0c 	.word	0x20000d0c
 8013ee8:	20000d10 	.word	0x20000d10
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8013eec:	4b30      	ldr	r3, [pc, #192]	; (8013fb0 <OpenThread_CallBack_Processing+0x400>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d051      	beq.n	8013f98 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013ef4:	4b2e      	ldr	r3, [pc, #184]	; (8013fb0 <OpenThread_CallBack_Processing+0x400>)
 8013ef6:	681c      	ldr	r4, [r3, #0]
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	689b      	ldr	r3, [r3, #8]
 8013efc:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013f02:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013f08:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013f0e:	b2db      	uxtb	r3, r3
 8013f10:	47a0      	blx	r4
        }
        break;
 8013f12:	e041      	b.n	8013f98 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8013f14:	4b27      	ldr	r3, [pc, #156]	; (8013fb4 <OpenThread_CallBack_Processing+0x404>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d03f      	beq.n	8013f9c <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013f1c:	4b25      	ldr	r3, [pc, #148]	; (8013fb4 <OpenThread_CallBack_Processing+0x404>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	683a      	ldr	r2, [r7, #0]
 8013f22:	6892      	ldr	r2, [r2, #8]
 8013f24:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8013f26:	683a      	ldr	r2, [r7, #0]
 8013f28:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013f2a:	b252      	sxtb	r2, r2
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	4798      	blx	r3
        }
        break;
 8013f30:	e034      	b.n	8013f9c <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 8013f32:	4b21      	ldr	r3, [pc, #132]	; (8013fb8 <OpenThread_CallBack_Processing+0x408>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d032      	beq.n	8013fa0 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013f3a:	4b1f      	ldr	r3, [pc, #124]	; (8013fb8 <OpenThread_CallBack_Processing+0x408>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	683a      	ldr	r2, [r7, #0]
 8013f40:	6892      	ldr	r2, [r2, #8]
 8013f42:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 8013f44:	683a      	ldr	r2, [r7, #0]
 8013f46:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013f48:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8013f4a:	683a      	ldr	r2, [r7, #0]
 8013f4c:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013f4e:	4798      	blx	r3
        }
        break;
 8013f50:	e026      	b.n	8013fa0 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 8013f52:	2301      	movs	r3, #1
 8013f54:	71fb      	strb	r3, [r7, #7]
        break;
 8013f56:	e024      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f58:	bf00      	nop
 8013f5a:	e022      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f5c:	bf00      	nop
 8013f5e:	e020      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f60:	bf00      	nop
 8013f62:	e01e      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f64:	bf00      	nop
 8013f66:	e01c      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f68:	bf00      	nop
 8013f6a:	e01a      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f6c:	bf00      	nop
 8013f6e:	e018      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f70:	bf00      	nop
 8013f72:	e016      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f74:	bf00      	nop
 8013f76:	e014      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f78:	bf00      	nop
 8013f7a:	e012      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f7c:	bf00      	nop
 8013f7e:	e010      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f80:	bf00      	nop
 8013f82:	e00e      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f84:	bf00      	nop
 8013f86:	e00c      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f88:	bf00      	nop
 8013f8a:	e00a      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f8c:	bf00      	nop
 8013f8e:	e008      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f90:	bf00      	nop
 8013f92:	e006      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f94:	bf00      	nop
 8013f96:	e004      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f98:	bf00      	nop
 8013f9a:	e002      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013f9c:	bf00      	nop
 8013f9e:	e000      	b.n	8013fa2 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8013fa0:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8013fa2:	f7fe fea3 	bl	8012cec <TL_THREAD_SendAck>
    return status;
 8013fa6:	79fb      	ldrb	r3, [r7, #7]

}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bdb0      	pop	{r4, r5, r7, pc}
 8013fb0:	20000d14 	.word	0x20000d14
 8013fb4:	20000d18 	.word	0x20000d18
 8013fb8:	20000d1c 	.word	0x20000d1c

08013fbc <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8013fc8:	f005 fe60 	bl	8019c8c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013fcc:	f005 fdfc 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8013fd0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8013fda:	701a      	strb	r2, [r3, #0]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	f042 0201 	orr.w	r2, r2, #1
 8013fe2:	705a      	strb	r2, [r3, #1]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	709a      	strb	r2, [r3, #2]
 8013fe8:	2200      	movs	r2, #0
 8013fea:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	f042 0201 	orr.w	r2, r2, #1
 8013ff4:	711a      	strb	r2, [r3, #4]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	715a      	strb	r2, [r3, #5]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	719a      	strb	r2, [r3, #6]
 8013ffe:	2200      	movs	r2, #0
 8014000:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8014002:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801400a:	f005 fe01 	bl	8019c10 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801400e:	f005 fde7 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014012:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	689b      	ldr	r3, [r3, #8]
 8014018:	b2db      	uxtb	r3, r3
}
 801401a:	4618      	mov	r0, r3
 801401c:	3710      	adds	r7, #16
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8014022:	b580      	push	{r7, lr}
 8014024:	b084      	sub	sp, #16
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
 801402a:	460b      	mov	r3, r1
 801402c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801402e:	f005 fe2d 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014032:	f005 fdc9 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8014036:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	2200      	movs	r2, #0
 801403c:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8014040:	701a      	strb	r2, [r3, #0]
 8014042:	2200      	movs	r2, #0
 8014044:	705a      	strb	r2, [r3, #1]
 8014046:	2200      	movs	r2, #0
 8014048:	709a      	strb	r2, [r3, #2]
 801404a:	2200      	movs	r2, #0
 801404c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2200      	movs	r2, #0
 8014052:	f042 0201 	orr.w	r2, r2, #1
 8014056:	711a      	strb	r2, [r3, #4]
 8014058:	2200      	movs	r2, #0
 801405a:	715a      	strb	r2, [r3, #5]
 801405c:	2200      	movs	r2, #0
 801405e:	719a      	strb	r2, [r3, #6]
 8014060:	2200      	movs	r2, #0
 8014062:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8014064:	78fa      	ldrb	r2, [r7, #3]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801406a:	f005 fdd1 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801406e:	f005 fdb7 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014072:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	689b      	ldr	r3, [r3, #8]
 8014078:	b2db      	uxtb	r3, r3
}
 801407a:	4618      	mov	r0, r3
 801407c:	3710      	adds	r7, #16
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 8014082:	b580      	push	{r7, lr}
 8014084:	b084      	sub	sp, #16
 8014086:	af00      	add	r7, sp, #0
 8014088:	6078      	str	r0, [r7, #4]
 801408a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801408c:	f005 fdfe 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014090:	f005 fd9a 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8014094:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2200      	movs	r2, #0
 801409a:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 801409e:	701a      	strb	r2, [r3, #0]
 80140a0:	2200      	movs	r2, #0
 80140a2:	705a      	strb	r2, [r3, #1]
 80140a4:	2200      	movs	r2, #0
 80140a6:	709a      	strb	r2, [r3, #2]
 80140a8:	2200      	movs	r2, #0
 80140aa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2200      	movs	r2, #0
 80140b0:	f042 0201 	orr.w	r2, r2, #1
 80140b4:	711a      	strb	r2, [r3, #4]
 80140b6:	2200      	movs	r2, #0
 80140b8:	715a      	strb	r2, [r3, #5]
 80140ba:	2200      	movs	r2, #0
 80140bc:	719a      	strb	r2, [r3, #6]
 80140be:	2200      	movs	r2, #0
 80140c0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	683a      	ldr	r2, [r7, #0]
 80140c6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80140c8:	f005 fda2 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80140cc:	f005 fd88 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80140d0:	60f8      	str	r0, [r7, #12]
}
 80140d2:	bf00      	nop
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b084      	sub	sp, #16
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80140e4:	f005 fdd2 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80140e8:	f005 fd6e 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80140ec:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2200      	movs	r2, #0
 80140f2:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80140f6:	701a      	strb	r2, [r3, #0]
 80140f8:	2200      	movs	r2, #0
 80140fa:	705a      	strb	r2, [r3, #1]
 80140fc:	2200      	movs	r2, #0
 80140fe:	709a      	strb	r2, [r3, #2]
 8014100:	2200      	movs	r2, #0
 8014102:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2200      	movs	r2, #0
 8014108:	f042 0201 	orr.w	r2, r2, #1
 801410c:	711a      	strb	r2, [r3, #4]
 801410e:	2200      	movs	r2, #0
 8014110:	715a      	strb	r2, [r3, #5]
 8014112:	2200      	movs	r2, #0
 8014114:	719a      	strb	r2, [r3, #6]
 8014116:	2200      	movs	r2, #0
 8014118:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 801411a:	683a      	ldr	r2, [r7, #0]
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8014120:	f005 fd76 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014124:	f005 fd5c 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014128:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	689b      	ldr	r3, [r3, #8]
 801412e:	b2db      	uxtb	r3, r3
}
 8014130:	4618      	mov	r0, r3
 8014132:	3710      	adds	r7, #16
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014142:	f005 fda3 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014146:	f005 fd3f 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 801414a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2200      	movs	r2, #0
 8014150:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8014154:	701a      	strb	r2, [r3, #0]
 8014156:	2200      	movs	r2, #0
 8014158:	705a      	strb	r2, [r3, #1]
 801415a:	2200      	movs	r2, #0
 801415c:	709a      	strb	r2, [r3, #2]
 801415e:	2200      	movs	r2, #0
 8014160:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2200      	movs	r2, #0
 8014166:	f042 0201 	orr.w	r2, r2, #1
 801416a:	711a      	strb	r2, [r3, #4]
 801416c:	2200      	movs	r2, #0
 801416e:	715a      	strb	r2, [r3, #5]
 8014170:	2200      	movs	r2, #0
 8014172:	719a      	strb	r2, [r3, #6]
 8014174:	2200      	movs	r2, #0
 8014176:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8014178:	683a      	ldr	r2, [r7, #0]
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801417e:	f005 fd47 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014182:	f005 fd2d 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014186:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	689b      	ldr	r3, [r3, #8]
 801418c:	b2db      	uxtb	r3, r3
}
 801418e:	4618      	mov	r0, r3
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8014196:	b580      	push	{r7, lr}
 8014198:	b084      	sub	sp, #16
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801419e:	f005 fd75 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80141a2:	f005 fd11 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80141a6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2200      	movs	r2, #0
 80141ac:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 80141b0:	701a      	strb	r2, [r3, #0]
 80141b2:	2200      	movs	r2, #0
 80141b4:	705a      	strb	r2, [r3, #1]
 80141b6:	2200      	movs	r2, #0
 80141b8:	709a      	strb	r2, [r3, #2]
 80141ba:	2200      	movs	r2, #0
 80141bc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2200      	movs	r2, #0
 80141c2:	711a      	strb	r2, [r3, #4]
 80141c4:	2200      	movs	r2, #0
 80141c6:	715a      	strb	r2, [r3, #5]
 80141c8:	2200      	movs	r2, #0
 80141ca:	719a      	strb	r2, [r3, #6]
 80141cc:	2200      	movs	r2, #0
 80141ce:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80141d0:	f005 fd1e 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80141d4:	f005 fd04 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80141d8:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	689b      	ldr	r3, [r3, #8]
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3710      	adds	r7, #16
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 80141e6:	b580      	push	{r7, lr}
 80141e8:	b084      	sub	sp, #16
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80141ee:	f005 fd4d 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80141f2:	f005 fce9 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80141f6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	2200      	movs	r2, #0
 80141fc:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 8014200:	701a      	strb	r2, [r3, #0]
 8014202:	2200      	movs	r2, #0
 8014204:	705a      	strb	r2, [r3, #1]
 8014206:	2200      	movs	r2, #0
 8014208:	709a      	strb	r2, [r3, #2]
 801420a:	2200      	movs	r2, #0
 801420c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	2200      	movs	r2, #0
 8014212:	711a      	strb	r2, [r3, #4]
 8014214:	2200      	movs	r2, #0
 8014216:	715a      	strb	r2, [r3, #5]
 8014218:	2200      	movs	r2, #0
 801421a:	719a      	strb	r2, [r3, #6]
 801421c:	2200      	movs	r2, #0
 801421e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8014220:	f005 fcf6 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014224:	f005 fcdc 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014228:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	689b      	ldr	r3, [r3, #8]
}
 801422e:	4618      	mov	r0, r3
 8014230:	3710      	adds	r7, #16
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}

08014236 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8014236:	b580      	push	{r7, lr}
 8014238:	b084      	sub	sp, #16
 801423a:	af00      	add	r7, sp, #0
 801423c:	6078      	str	r0, [r7, #4]
 801423e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014240:	f005 fd24 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014244:	f005 fcc0 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 8014248:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	2200      	movs	r2, #0
 801424e:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8014252:	701a      	strb	r2, [r3, #0]
 8014254:	2200      	movs	r2, #0
 8014256:	705a      	strb	r2, [r3, #1]
 8014258:	2200      	movs	r2, #0
 801425a:	709a      	strb	r2, [r3, #2]
 801425c:	2200      	movs	r2, #0
 801425e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	2200      	movs	r2, #0
 8014264:	f042 0201 	orr.w	r2, r2, #1
 8014268:	711a      	strb	r2, [r3, #4]
 801426a:	2200      	movs	r2, #0
 801426c:	715a      	strb	r2, [r3, #5]
 801426e:	2200      	movs	r2, #0
 8014270:	719a      	strb	r2, [r3, #6]
 8014272:	2200      	movs	r2, #0
 8014274:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8014276:	683a      	ldr	r2, [r7, #0]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801427c:	f005 fcc8 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014280:	f005 fcae 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014284:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	689b      	ldr	r3, [r3, #8]
 801428a:	b2db      	uxtb	r3, r3
}
 801428c:	4618      	mov	r0, r3
 801428e:	3710      	adds	r7, #16
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801429c:	f005 fcf6 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80142a0:	f005 fc92 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80142a4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	2200      	movs	r2, #0
 80142aa:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 80142ae:	701a      	strb	r2, [r3, #0]
 80142b0:	2200      	movs	r2, #0
 80142b2:	705a      	strb	r2, [r3, #1]
 80142b4:	2200      	movs	r2, #0
 80142b6:	709a      	strb	r2, [r3, #2]
 80142b8:	2200      	movs	r2, #0
 80142ba:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2200      	movs	r2, #0
 80142c0:	711a      	strb	r2, [r3, #4]
 80142c2:	2200      	movs	r2, #0
 80142c4:	715a      	strb	r2, [r3, #5]
 80142c6:	2200      	movs	r2, #0
 80142c8:	719a      	strb	r2, [r3, #6]
 80142ca:	2200      	movs	r2, #0
 80142cc:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80142ce:	f005 fc9f 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80142d2:	f005 fc85 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80142d6:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	689b      	ldr	r3, [r3, #8]
 80142dc:	b2db      	uxtb	r3, r3
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3710      	adds	r7, #16
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}

080142e6 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b084      	sub	sp, #16
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80142ee:	f005 fccd 	bl	8019c8c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80142f2:	f005 fc69 	bl	8019bc8 <THREAD_Get_OTCmdPayloadBuffer>
 80142f6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2200      	movs	r2, #0
 80142fc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014300:	701a      	strb	r2, [r3, #0]
 8014302:	2200      	movs	r2, #0
 8014304:	705a      	strb	r2, [r3, #1]
 8014306:	2200      	movs	r2, #0
 8014308:	709a      	strb	r2, [r3, #2]
 801430a:	2200      	movs	r2, #0
 801430c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	2200      	movs	r2, #0
 8014312:	711a      	strb	r2, [r3, #4]
 8014314:	2200      	movs	r2, #0
 8014316:	715a      	strb	r2, [r3, #5]
 8014318:	2200      	movs	r2, #0
 801431a:	719a      	strb	r2, [r3, #6]
 801431c:	2200      	movs	r2, #0
 801431e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8014320:	f005 fc76 	bl	8019c10 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014324:	f005 fc5c 	bl	8019be0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014328:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	689b      	ldr	r3, [r3, #8]
 801432e:	b29b      	uxth	r3, r3
}
 8014330:	4618      	mov	r0, r3
 8014332:	3710      	adds	r7, #16
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	687a      	ldr	r2, [r7, #4]
 8014344:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	687a      	ldr	r2, [r7, #4]
 801434a:	605a      	str	r2, [r3, #4]
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014358:	b480      	push	{r7}
 801435a:	b087      	sub	sp, #28
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014360:	f3ef 8310 	mrs	r3, PRIMASK
 8014364:	60fb      	str	r3, [r7, #12]
  return(result);
 8014366:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801436a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	429a      	cmp	r2, r3
 8014374:	d102      	bne.n	801437c <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8014376:	2301      	movs	r3, #1
 8014378:	75fb      	strb	r3, [r7, #23]
 801437a:	e001      	b.n	8014380 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 801437c:	2300      	movs	r3, #0
 801437e:	75fb      	strb	r3, [r7, #23]
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801438a:	7dfb      	ldrb	r3, [r7, #23]
}
 801438c:	4618      	mov	r0, r3
 801438e:	371c      	adds	r7, #28
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8014398:	b480      	push	{r7}
 801439a:	b087      	sub	sp, #28
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80143a2:	f3ef 8310 	mrs	r3, PRIMASK
 80143a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80143a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80143aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80143ac:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	683a      	ldr	r2, [r7, #0]
 80143c0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	683a      	ldr	r2, [r7, #0]
 80143c8:	605a      	str	r2, [r3, #4]
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80143d4:	bf00      	nop
 80143d6:	371c      	adds	r7, #28
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr

080143e0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80143e0:	b480      	push	{r7}
 80143e2:	b087      	sub	sp, #28
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80143ea:	f3ef 8310 	mrs	r3, PRIMASK
 80143ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80143f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80143f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80143f4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	687a      	ldr	r2, [r7, #4]
 80143fa:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	685a      	ldr	r2, [r3, #4]
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	683a      	ldr	r2, [r7, #0]
 8014410:	601a      	str	r2, [r3, #0]
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801441c:	bf00      	nop
 801441e:	371c      	adds	r7, #28
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr

08014428 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8014428:	b480      	push	{r7}
 801442a:	b087      	sub	sp, #28
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014430:	f3ef 8310 	mrs	r3, PRIMASK
 8014434:	60fb      	str	r3, [r7, #12]
  return(result);
 8014436:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801443a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	6812      	ldr	r2, [r2, #0]
 8014444:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	687a      	ldr	r2, [r7, #4]
 801444c:	6852      	ldr	r2, [r2, #4]
 801444e:	605a      	str	r2, [r3, #4]
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014454:	693b      	ldr	r3, [r7, #16]
 8014456:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801445a:	bf00      	nop
 801445c:	371c      	adds	r7, #28
 801445e:	46bd      	mov	sp, r7
 8014460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014464:	4770      	bx	lr

08014466 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b086      	sub	sp, #24
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
 801446e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014470:	f3ef 8310 	mrs	r3, PRIMASK
 8014474:	60fb      	str	r3, [r7, #12]
  return(result);
 8014476:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014478:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801447a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4618      	mov	r0, r3
 801448a:	f7ff ffcd 	bl	8014428 <LST_remove_node>
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014498:	bf00      	nop
 801449a:	3718      	adds	r7, #24
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80144a0:	b480      	push	{r7}
 80144a2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80144a4:	bf00      	nop
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr
	...

080144b0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80144b0:	b480      	push	{r7}
 80144b2:	b085      	sub	sp, #20
 80144b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144b6:	f3ef 8305 	mrs	r3, IPSR
 80144ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80144bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d10f      	bne.n	80144e2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80144c2:	f3ef 8310 	mrs	r3, PRIMASK
 80144c6:	607b      	str	r3, [r7, #4]
  return(result);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d105      	bne.n	80144da <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80144ce:	f3ef 8311 	mrs	r3, BASEPRI
 80144d2:	603b      	str	r3, [r7, #0]
  return(result);
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d007      	beq.n	80144ea <osKernelInitialize+0x3a>
 80144da:	4b0e      	ldr	r3, [pc, #56]	; (8014514 <osKernelInitialize+0x64>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b02      	cmp	r3, #2
 80144e0:	d103      	bne.n	80144ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80144e2:	f06f 0305 	mvn.w	r3, #5
 80144e6:	60fb      	str	r3, [r7, #12]
 80144e8:	e00c      	b.n	8014504 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80144ea:	4b0a      	ldr	r3, [pc, #40]	; (8014514 <osKernelInitialize+0x64>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d105      	bne.n	80144fe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80144f2:	4b08      	ldr	r3, [pc, #32]	; (8014514 <osKernelInitialize+0x64>)
 80144f4:	2201      	movs	r2, #1
 80144f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80144f8:	2300      	movs	r3, #0
 80144fa:	60fb      	str	r3, [r7, #12]
 80144fc:	e002      	b.n	8014504 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80144fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014502:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8014504:	68fb      	ldr	r3, [r7, #12]
}
 8014506:	4618      	mov	r0, r3
 8014508:	3714      	adds	r7, #20
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop
 8014514:	20000d2c 	.word	0x20000d2c

08014518 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801451e:	f3ef 8305 	mrs	r3, IPSR
 8014522:	60bb      	str	r3, [r7, #8]
  return(result);
 8014524:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014526:	2b00      	cmp	r3, #0
 8014528:	d10f      	bne.n	801454a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801452a:	f3ef 8310 	mrs	r3, PRIMASK
 801452e:	607b      	str	r3, [r7, #4]
  return(result);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d105      	bne.n	8014542 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014536:	f3ef 8311 	mrs	r3, BASEPRI
 801453a:	603b      	str	r3, [r7, #0]
  return(result);
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d007      	beq.n	8014552 <osKernelStart+0x3a>
 8014542:	4b0f      	ldr	r3, [pc, #60]	; (8014580 <osKernelStart+0x68>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2b02      	cmp	r3, #2
 8014548:	d103      	bne.n	8014552 <osKernelStart+0x3a>
    stat = osErrorISR;
 801454a:	f06f 0305 	mvn.w	r3, #5
 801454e:	60fb      	str	r3, [r7, #12]
 8014550:	e010      	b.n	8014574 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014552:	4b0b      	ldr	r3, [pc, #44]	; (8014580 <osKernelStart+0x68>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b01      	cmp	r3, #1
 8014558:	d109      	bne.n	801456e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801455a:	f7ff ffa1 	bl	80144a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801455e:	4b08      	ldr	r3, [pc, #32]	; (8014580 <osKernelStart+0x68>)
 8014560:	2202      	movs	r2, #2
 8014562:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014564:	f002 faf2 	bl	8016b4c <vTaskStartScheduler>
      stat = osOK;
 8014568:	2300      	movs	r3, #0
 801456a:	60fb      	str	r3, [r7, #12]
 801456c:	e002      	b.n	8014574 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801456e:	f04f 33ff 	mov.w	r3, #4294967295
 8014572:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8014574:	68fb      	ldr	r3, [r7, #12]
}
 8014576:	4618      	mov	r0, r3
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	20000d2c 	.word	0x20000d2c

08014584 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014584:	b580      	push	{r7, lr}
 8014586:	b090      	sub	sp, #64	; 0x40
 8014588:	af04      	add	r7, sp, #16
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014590:	2300      	movs	r3, #0
 8014592:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014594:	f3ef 8305 	mrs	r3, IPSR
 8014598:	61fb      	str	r3, [r7, #28]
  return(result);
 801459a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801459c:	2b00      	cmp	r3, #0
 801459e:	f040 8090 	bne.w	80146c2 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80145a2:	f3ef 8310 	mrs	r3, PRIMASK
 80145a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d105      	bne.n	80145ba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80145ae:	f3ef 8311 	mrs	r3, BASEPRI
 80145b2:	617b      	str	r3, [r7, #20]
  return(result);
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d003      	beq.n	80145c2 <osThreadNew+0x3e>
 80145ba:	4b44      	ldr	r3, [pc, #272]	; (80146cc <osThreadNew+0x148>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b02      	cmp	r3, #2
 80145c0:	d07f      	beq.n	80146c2 <osThreadNew+0x13e>
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d07c      	beq.n	80146c2 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80145c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145cc:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80145ce:	2318      	movs	r3, #24
 80145d0:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80145d2:	2300      	movs	r3, #0
 80145d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80145d6:	f04f 33ff 	mov.w	r3, #4294967295
 80145da:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d045      	beq.n	801466e <osThreadNew+0xea>
      if (attr->name != NULL) {
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d002      	beq.n	80145f0 <osThreadNew+0x6c>
        name = attr->name;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	699b      	ldr	r3, [r3, #24]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d002      	beq.n	80145fe <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	699b      	ldr	r3, [r3, #24]
 80145fc:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80145fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014600:	2b00      	cmp	r3, #0
 8014602:	d008      	beq.n	8014616 <osThreadNew+0x92>
 8014604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014606:	2b38      	cmp	r3, #56	; 0x38
 8014608:	d805      	bhi.n	8014616 <osThreadNew+0x92>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	685b      	ldr	r3, [r3, #4]
 801460e:	f003 0301 	and.w	r3, r3, #1
 8014612:	2b00      	cmp	r3, #0
 8014614:	d001      	beq.n	801461a <osThreadNew+0x96>
        return (NULL);
 8014616:	2300      	movs	r3, #0
 8014618:	e054      	b.n	80146c4 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	695b      	ldr	r3, [r3, #20]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d003      	beq.n	801462a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	695b      	ldr	r3, [r3, #20]
 8014626:	089b      	lsrs	r3, r3, #2
 8014628:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	689b      	ldr	r3, [r3, #8]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d00e      	beq.n	8014650 <osThreadNew+0xcc>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	68db      	ldr	r3, [r3, #12]
 8014636:	2b63      	cmp	r3, #99	; 0x63
 8014638:	d90a      	bls.n	8014650 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801463e:	2b00      	cmp	r3, #0
 8014640:	d006      	beq.n	8014650 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	695b      	ldr	r3, [r3, #20]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d002      	beq.n	8014650 <osThreadNew+0xcc>
        mem = 1;
 801464a:	2301      	movs	r3, #1
 801464c:	623b      	str	r3, [r7, #32]
 801464e:	e010      	b.n	8014672 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d10c      	bne.n	8014672 <osThreadNew+0xee>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d108      	bne.n	8014672 <osThreadNew+0xee>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	691b      	ldr	r3, [r3, #16]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d104      	bne.n	8014672 <osThreadNew+0xee>
          mem = 0;
 8014668:	2300      	movs	r3, #0
 801466a:	623b      	str	r3, [r7, #32]
 801466c:	e001      	b.n	8014672 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 801466e:	2300      	movs	r3, #0
 8014670:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8014672:	6a3b      	ldr	r3, [r7, #32]
 8014674:	2b01      	cmp	r3, #1
 8014676:	d110      	bne.n	801469a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014680:	9202      	str	r2, [sp, #8]
 8014682:	9301      	str	r3, [sp, #4]
 8014684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014686:	9300      	str	r3, [sp, #0]
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801468c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801468e:	68f8      	ldr	r0, [r7, #12]
 8014690:	f002 f884 	bl	801679c <xTaskCreateStatic>
 8014694:	4603      	mov	r3, r0
 8014696:	613b      	str	r3, [r7, #16]
 8014698:	e013      	b.n	80146c2 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 801469a:	6a3b      	ldr	r3, [r7, #32]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d110      	bne.n	80146c2 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80146a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a2:	b29a      	uxth	r2, r3
 80146a4:	f107 0310 	add.w	r3, r7, #16
 80146a8:	9301      	str	r3, [sp, #4]
 80146aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ac:	9300      	str	r3, [sp, #0]
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80146b2:	68f8      	ldr	r0, [r7, #12]
 80146b4:	f002 f8cc 	bl	8016850 <xTaskCreate>
 80146b8:	4603      	mov	r3, r0
 80146ba:	2b01      	cmp	r3, #1
 80146bc:	d001      	beq.n	80146c2 <osThreadNew+0x13e>
          hTask = NULL;
 80146be:	2300      	movs	r3, #0
 80146c0:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80146c2:	693b      	ldr	r3, [r7, #16]
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3730      	adds	r7, #48	; 0x30
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	20000d2c 	.word	0x20000d2c

080146d0 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b08a      	sub	sp, #40	; 0x28
 80146d4:	af02      	add	r7, sp, #8
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <osThreadFlagsSet+0x1a>
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	da03      	bge.n	80146f2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80146ea:	f06f 0303 	mvn.w	r3, #3
 80146ee:	60fb      	str	r3, [r7, #12]
 80146f0:	e046      	b.n	8014780 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80146f2:	f04f 33ff 	mov.w	r3, #4294967295
 80146f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146f8:	f3ef 8305 	mrs	r3, IPSR
 80146fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80146fe:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8014700:	2b00      	cmp	r3, #0
 8014702:	d10f      	bne.n	8014724 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014704:	f3ef 8310 	mrs	r3, PRIMASK
 8014708:	617b      	str	r3, [r7, #20]
  return(result);
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d105      	bne.n	801471c <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014710:	f3ef 8311 	mrs	r3, BASEPRI
 8014714:	613b      	str	r3, [r7, #16]
  return(result);
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d024      	beq.n	8014766 <osThreadFlagsSet+0x96>
 801471c:	4b1b      	ldr	r3, [pc, #108]	; (801478c <osThreadFlagsSet+0xbc>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b02      	cmp	r3, #2
 8014722:	d120      	bne.n	8014766 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8014724:	2300      	movs	r3, #0
 8014726:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8014728:	f107 0308 	add.w	r3, r7, #8
 801472c:	9300      	str	r3, [sp, #0]
 801472e:	2300      	movs	r3, #0
 8014730:	2201      	movs	r2, #1
 8014732:	6839      	ldr	r1, [r7, #0]
 8014734:	69f8      	ldr	r0, [r7, #28]
 8014736:	f003 f97b 	bl	8017a30 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 801473a:	f107 020c 	add.w	r2, r7, #12
 801473e:	2300      	movs	r3, #0
 8014740:	9300      	str	r3, [sp, #0]
 8014742:	4613      	mov	r3, r2
 8014744:	2200      	movs	r2, #0
 8014746:	2100      	movs	r1, #0
 8014748:	69f8      	ldr	r0, [r7, #28]
 801474a:	f003 f971 	bl	8017a30 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d015      	beq.n	8014780 <osThreadFlagsSet+0xb0>
 8014754:	4b0e      	ldr	r3, [pc, #56]	; (8014790 <osThreadFlagsSet+0xc0>)
 8014756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801475a:	601a      	str	r2, [r3, #0]
 801475c:	f3bf 8f4f 	dsb	sy
 8014760:	f3bf 8f6f 	isb	sy
 8014764:	e00c      	b.n	8014780 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8014766:	2300      	movs	r3, #0
 8014768:	2201      	movs	r2, #1
 801476a:	6839      	ldr	r1, [r7, #0]
 801476c:	69f8      	ldr	r0, [r7, #28]
 801476e:	f003 f8a9 	bl	80178c4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8014772:	f107 030c 	add.w	r3, r7, #12
 8014776:	2200      	movs	r2, #0
 8014778:	2100      	movs	r1, #0
 801477a:	69f8      	ldr	r0, [r7, #28]
 801477c:	f003 f8a2 	bl	80178c4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8014780:	68fb      	ldr	r3, [r7, #12]
}
 8014782:	4618      	mov	r0, r3
 8014784:	3720      	adds	r7, #32
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	20000d2c 	.word	0x20000d2c
 8014790:	e000ed04 	.word	0xe000ed04

08014794 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8014794:	b580      	push	{r7, lr}
 8014796:	b088      	sub	sp, #32
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801479c:	f3ef 8305 	mrs	r3, IPSR
 80147a0:	617b      	str	r3, [r7, #20]
  return(result);
 80147a2:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d10f      	bne.n	80147c8 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147a8:	f3ef 8310 	mrs	r3, PRIMASK
 80147ac:	613b      	str	r3, [r7, #16]
  return(result);
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d105      	bne.n	80147c0 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80147b4:	f3ef 8311 	mrs	r3, BASEPRI
 80147b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d007      	beq.n	80147d0 <osThreadFlagsClear+0x3c>
 80147c0:	4b1b      	ldr	r3, [pc, #108]	; (8014830 <osThreadFlagsClear+0x9c>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b02      	cmp	r3, #2
 80147c6:	d103      	bne.n	80147d0 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 80147c8:	f06f 0305 	mvn.w	r3, #5
 80147cc:	61fb      	str	r3, [r7, #28]
 80147ce:	e02a      	b.n	8014826 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	da03      	bge.n	80147de <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 80147d6:	f06f 0303 	mvn.w	r3, #3
 80147da:	61fb      	str	r3, [r7, #28]
 80147dc:	e023      	b.n	8014826 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80147de:	f002 fe81 	bl	80174e4 <xTaskGetCurrentTaskHandle>
 80147e2:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80147e4:	f107 0308 	add.w	r3, r7, #8
 80147e8:	2200      	movs	r2, #0
 80147ea:	2100      	movs	r1, #0
 80147ec:	69b8      	ldr	r0, [r7, #24]
 80147ee:	f003 f869 	bl	80178c4 <xTaskGenericNotify>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d113      	bne.n	8014820 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	43da      	mvns	r2, r3
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	4013      	ands	r3, r2
 8014804:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8014806:	68b9      	ldr	r1, [r7, #8]
 8014808:	2300      	movs	r3, #0
 801480a:	2203      	movs	r2, #3
 801480c:	69b8      	ldr	r0, [r7, #24]
 801480e:	f003 f859 	bl	80178c4 <xTaskGenericNotify>
 8014812:	4603      	mov	r3, r0
 8014814:	2b01      	cmp	r3, #1
 8014816:	d006      	beq.n	8014826 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 8014818:	f04f 33ff 	mov.w	r3, #4294967295
 801481c:	61fb      	str	r3, [r7, #28]
 801481e:	e002      	b.n	8014826 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8014820:	f04f 33ff 	mov.w	r3, #4294967295
 8014824:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8014826:	69fb      	ldr	r3, [r7, #28]
}
 8014828:	4618      	mov	r0, r3
 801482a:	3720      	adds	r7, #32
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	20000d2c 	.word	0x20000d2c

08014834 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8014834:	b580      	push	{r7, lr}
 8014836:	b08e      	sub	sp, #56	; 0x38
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014840:	f3ef 8305 	mrs	r3, IPSR
 8014844:	61fb      	str	r3, [r7, #28]
  return(result);
 8014846:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8014848:	2b00      	cmp	r3, #0
 801484a:	d10f      	bne.n	801486c <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801484c:	f3ef 8310 	mrs	r3, PRIMASK
 8014850:	61bb      	str	r3, [r7, #24]
  return(result);
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d105      	bne.n	8014864 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014858:	f3ef 8311 	mrs	r3, BASEPRI
 801485c:	617b      	str	r3, [r7, #20]
  return(result);
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d007      	beq.n	8014874 <osThreadFlagsWait+0x40>
 8014864:	4b3c      	ldr	r3, [pc, #240]	; (8014958 <osThreadFlagsWait+0x124>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	2b02      	cmp	r3, #2
 801486a:	d103      	bne.n	8014874 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 801486c:	f06f 0305 	mvn.w	r3, #5
 8014870:	637b      	str	r3, [r7, #52]	; 0x34
 8014872:	e06b      	b.n	801494c <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2b00      	cmp	r3, #0
 8014878:	da03      	bge.n	8014882 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 801487a:	f06f 0303 	mvn.w	r3, #3
 801487e:	637b      	str	r3, [r7, #52]	; 0x34
 8014880:	e064      	b.n	801494c <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	f003 0302 	and.w	r3, r3, #2
 8014888:	2b00      	cmp	r3, #0
 801488a:	d002      	beq.n	8014892 <osThreadFlagsWait+0x5e>
      clear = 0U;
 801488c:	2300      	movs	r3, #0
 801488e:	633b      	str	r3, [r7, #48]	; 0x30
 8014890:	e001      	b.n	8014896 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8014896:	2300      	movs	r3, #0
 8014898:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 801489e:	f002 fa9d 	bl	8016ddc <xTaskGetTickCount>
 80148a2:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80148a4:	f107 0210 	add.w	r2, r7, #16
 80148a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80148ac:	2000      	movs	r0, #0
 80148ae:	f002 ffaf 	bl	8017810 <xTaskNotifyWait>
 80148b2:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80148b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b6:	2b01      	cmp	r3, #1
 80148b8:	d137      	bne.n	801492a <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80148ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	4013      	ands	r3, r2
 80148c0:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148c6:	4313      	orrs	r3, r2
 80148c8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	f003 0301 	and.w	r3, r3, #1
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d00c      	beq.n	80148ee <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80148d4:	68fa      	ldr	r2, [r7, #12]
 80148d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148d8:	4013      	ands	r3, r2
 80148da:	68fa      	ldr	r2, [r7, #12]
 80148dc:	429a      	cmp	r2, r3
 80148de:	d032      	beq.n	8014946 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10f      	bne.n	8014906 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80148e6:	f06f 0302 	mvn.w	r3, #2
 80148ea:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80148ec:	e02e      	b.n	801494c <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80148ee:	68fa      	ldr	r2, [r7, #12]
 80148f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148f2:	4013      	ands	r3, r2
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d128      	bne.n	801494a <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d103      	bne.n	8014906 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80148fe:	f06f 0302 	mvn.w	r3, #2
 8014902:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8014904:	e022      	b.n	801494c <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8014906:	f002 fa69 	bl	8016ddc <xTaskGetTickCount>
 801490a:	4602      	mov	r2, r0
 801490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490e:	1ad3      	subs	r3, r2, r3
 8014910:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8014912:	6a3a      	ldr	r2, [r7, #32]
 8014914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014916:	429a      	cmp	r2, r3
 8014918:	d902      	bls.n	8014920 <osThreadFlagsWait+0xec>
          tout  = 0;
 801491a:	2300      	movs	r3, #0
 801491c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801491e:	e00e      	b.n	801493e <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8014920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014922:	6a3b      	ldr	r3, [r7, #32]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014928:	e009      	b.n	801493e <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d103      	bne.n	8014938 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8014930:	f06f 0302 	mvn.w	r3, #2
 8014934:	637b      	str	r3, [r7, #52]	; 0x34
 8014936:	e002      	b.n	801493e <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8014938:	f06f 0301 	mvn.w	r3, #1
 801493c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 801493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014940:	2b00      	cmp	r3, #0
 8014942:	d1af      	bne.n	80148a4 <osThreadFlagsWait+0x70>
 8014944:	e002      	b.n	801494c <osThreadFlagsWait+0x118>
            break;
 8014946:	bf00      	nop
 8014948:	e000      	b.n	801494c <osThreadFlagsWait+0x118>
            break;
 801494a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 801494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801494e:	4618      	mov	r0, r3
 8014950:	3738      	adds	r7, #56	; 0x38
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	20000d2c 	.word	0x20000d2c

0801495c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 801495c:	b580      	push	{r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014964:	f3ef 8305 	mrs	r3, IPSR
 8014968:	613b      	str	r3, [r7, #16]
  return(result);
 801496a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801496c:	2b00      	cmp	r3, #0
 801496e:	d10f      	bne.n	8014990 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014970:	f3ef 8310 	mrs	r3, PRIMASK
 8014974:	60fb      	str	r3, [r7, #12]
  return(result);
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d105      	bne.n	8014988 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801497c:	f3ef 8311 	mrs	r3, BASEPRI
 8014980:	60bb      	str	r3, [r7, #8]
  return(result);
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d007      	beq.n	8014998 <osDelay+0x3c>
 8014988:	4b0a      	ldr	r3, [pc, #40]	; (80149b4 <osDelay+0x58>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	2b02      	cmp	r3, #2
 801498e:	d103      	bne.n	8014998 <osDelay+0x3c>
    stat = osErrorISR;
 8014990:	f06f 0305 	mvn.w	r3, #5
 8014994:	617b      	str	r3, [r7, #20]
 8014996:	e007      	b.n	80149a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8014998:	2300      	movs	r3, #0
 801499a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d002      	beq.n	80149a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f002 f89e 	bl	8016ae4 <vTaskDelay>
    }
  }

  return (stat);
 80149a8:	697b      	ldr	r3, [r7, #20]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3718      	adds	r7, #24
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	20000d2c 	.word	0x20000d2c

080149b8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b084      	sub	sp, #16
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f003 fd67 	bl	8018494 <pvTimerGetTimerID>
 80149c6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d005      	beq.n	80149da <TimerCallback+0x22>
    callb->func (callb->arg);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	68fa      	ldr	r2, [r7, #12]
 80149d4:	6852      	ldr	r2, [r2, #4]
 80149d6:	4610      	mov	r0, r2
 80149d8:	4798      	blx	r3
  }
}
 80149da:	bf00      	nop
 80149dc:	3710      	adds	r7, #16
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
	...

080149e4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b08e      	sub	sp, #56	; 0x38
 80149e8:	af02      	add	r7, sp, #8
 80149ea:	60f8      	str	r0, [r7, #12]
 80149ec:	607a      	str	r2, [r7, #4]
 80149ee:	603b      	str	r3, [r7, #0]
 80149f0:	460b      	mov	r3, r1
 80149f2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80149f4:	2300      	movs	r3, #0
 80149f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80149f8:	f3ef 8305 	mrs	r3, IPSR
 80149fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80149fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d16a      	bne.n	8014ada <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a04:	f3ef 8310 	mrs	r3, PRIMASK
 8014a08:	617b      	str	r3, [r7, #20]
  return(result);
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d105      	bne.n	8014a1c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014a10:	f3ef 8311 	mrs	r3, BASEPRI
 8014a14:	613b      	str	r3, [r7, #16]
  return(result);
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d003      	beq.n	8014a24 <osTimerNew+0x40>
 8014a1c:	4b31      	ldr	r3, [pc, #196]	; (8014ae4 <osTimerNew+0x100>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d05a      	beq.n	8014ada <osTimerNew+0xf6>
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d057      	beq.n	8014ada <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8014a2a:	2008      	movs	r0, #8
 8014a2c:	f003 ff90 	bl	8018950 <pvPortMalloc>
 8014a30:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d050      	beq.n	8014ada <osTimerNew+0xf6>
      callb->func = func;
 8014a38:	69fb      	ldr	r3, [r7, #28]
 8014a3a:	68fa      	ldr	r2, [r7, #12]
 8014a3c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8014a3e:	69fb      	ldr	r3, [r7, #28]
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8014a44:	7afb      	ldrb	r3, [r7, #11]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d102      	bne.n	8014a50 <osTimerNew+0x6c>
        reload = pdFALSE;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8014a4e:	e001      	b.n	8014a54 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8014a50:	2301      	movs	r3, #1
 8014a52:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8014a54:	f04f 33ff 	mov.w	r3, #4294967295
 8014a58:	623b      	str	r3, [r7, #32]
      name = NULL;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d01c      	beq.n	8014a9e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d002      	beq.n	8014a72 <osTimerNew+0x8e>
          name = attr->name;
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	689b      	ldr	r3, [r3, #8]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d006      	beq.n	8014a88 <osTimerNew+0xa4>
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	68db      	ldr	r3, [r3, #12]
 8014a7e:	2b2b      	cmp	r3, #43	; 0x2b
 8014a80:	d902      	bls.n	8014a88 <osTimerNew+0xa4>
          mem = 1;
 8014a82:	2301      	movs	r3, #1
 8014a84:	623b      	str	r3, [r7, #32]
 8014a86:	e00c      	b.n	8014aa2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	689b      	ldr	r3, [r3, #8]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d108      	bne.n	8014aa2 <osTimerNew+0xbe>
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d104      	bne.n	8014aa2 <osTimerNew+0xbe>
            mem = 0;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	623b      	str	r3, [r7, #32]
 8014a9c:	e001      	b.n	8014aa2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8014aa2:	6a3b      	ldr	r3, [r7, #32]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d10c      	bne.n	8014ac2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	689b      	ldr	r3, [r3, #8]
 8014aac:	9301      	str	r3, [sp, #4]
 8014aae:	4b0e      	ldr	r3, [pc, #56]	; (8014ae8 <osTimerNew+0x104>)
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ab6:	2101      	movs	r1, #1
 8014ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014aba:	f003 f94e 	bl	8017d5a <xTimerCreateStatic>
 8014abe:	62b8      	str	r0, [r7, #40]	; 0x28
 8014ac0:	e00b      	b.n	8014ada <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d108      	bne.n	8014ada <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8014ac8:	4b07      	ldr	r3, [pc, #28]	; (8014ae8 <osTimerNew+0x104>)
 8014aca:	9300      	str	r3, [sp, #0]
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ad0:	2101      	movs	r1, #1
 8014ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ad4:	f003 f920 	bl	8017d18 <xTimerCreate>
 8014ad8:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8014ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3730      	adds	r7, #48	; 0x30
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	20000d2c 	.word	0x20000d2c
 8014ae8:	080149b9 	.word	0x080149b9

08014aec <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b08a      	sub	sp, #40	; 0x28
 8014af0:	af02      	add	r7, sp, #8
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014afa:	f3ef 8305 	mrs	r3, IPSR
 8014afe:	617b      	str	r3, [r7, #20]
  return(result);
 8014b00:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d10f      	bne.n	8014b26 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b06:	f3ef 8310 	mrs	r3, PRIMASK
 8014b0a:	613b      	str	r3, [r7, #16]
  return(result);
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d105      	bne.n	8014b1e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014b12:	f3ef 8311 	mrs	r3, BASEPRI
 8014b16:	60fb      	str	r3, [r7, #12]
  return(result);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d007      	beq.n	8014b2e <osTimerStart+0x42>
 8014b1e:	4b12      	ldr	r3, [pc, #72]	; (8014b68 <osTimerStart+0x7c>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	2b02      	cmp	r3, #2
 8014b24:	d103      	bne.n	8014b2e <osTimerStart+0x42>
    stat = osErrorISR;
 8014b26:	f06f 0305 	mvn.w	r3, #5
 8014b2a:	61fb      	str	r3, [r7, #28]
 8014b2c:	e017      	b.n	8014b5e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d103      	bne.n	8014b3c <osTimerStart+0x50>
    stat = osErrorParameter;
 8014b34:	f06f 0303 	mvn.w	r3, #3
 8014b38:	61fb      	str	r3, [r7, #28]
 8014b3a:	e010      	b.n	8014b5e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	2300      	movs	r3, #0
 8014b42:	683a      	ldr	r2, [r7, #0]
 8014b44:	2104      	movs	r1, #4
 8014b46:	69b8      	ldr	r0, [r7, #24]
 8014b48:	f003 f97e 	bl	8017e48 <xTimerGenericCommand>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	2b01      	cmp	r3, #1
 8014b50:	d102      	bne.n	8014b58 <osTimerStart+0x6c>
      stat = osOK;
 8014b52:	2300      	movs	r3, #0
 8014b54:	61fb      	str	r3, [r7, #28]
 8014b56:	e002      	b.n	8014b5e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8014b58:	f06f 0302 	mvn.w	r3, #2
 8014b5c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8014b5e:	69fb      	ldr	r3, [r7, #28]
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3720      	adds	r7, #32
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	20000d2c 	.word	0x20000d2c

08014b6c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b08a      	sub	sp, #40	; 0x28
 8014b70:	af02      	add	r7, sp, #8
 8014b72:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b78:	f3ef 8305 	mrs	r3, IPSR
 8014b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8014b7e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d10f      	bne.n	8014ba4 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b84:	f3ef 8310 	mrs	r3, PRIMASK
 8014b88:	613b      	str	r3, [r7, #16]
  return(result);
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d105      	bne.n	8014b9c <osTimerStop+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014b90:	f3ef 8311 	mrs	r3, BASEPRI
 8014b94:	60fb      	str	r3, [r7, #12]
  return(result);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d007      	beq.n	8014bac <osTimerStop+0x40>
 8014b9c:	4b17      	ldr	r3, [pc, #92]	; (8014bfc <osTimerStop+0x90>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b02      	cmp	r3, #2
 8014ba2:	d103      	bne.n	8014bac <osTimerStop+0x40>
    stat = osErrorISR;
 8014ba4:	f06f 0305 	mvn.w	r3, #5
 8014ba8:	61fb      	str	r3, [r7, #28]
 8014baa:	e021      	b.n	8014bf0 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8014bac:	69bb      	ldr	r3, [r7, #24]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d103      	bne.n	8014bba <osTimerStop+0x4e>
    stat = osErrorParameter;
 8014bb2:	f06f 0303 	mvn.w	r3, #3
 8014bb6:	61fb      	str	r3, [r7, #28]
 8014bb8:	e01a      	b.n	8014bf0 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8014bba:	69b8      	ldr	r0, [r7, #24]
 8014bbc:	f003 fc42 	bl	8018444 <xTimerIsTimerActive>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d103      	bne.n	8014bce <osTimerStop+0x62>
      stat = osErrorResource;
 8014bc6:	f06f 0302 	mvn.w	r3, #2
 8014bca:	61fb      	str	r3, [r7, #28]
 8014bcc:	e010      	b.n	8014bf0 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8014bce:	2300      	movs	r3, #0
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	2103      	movs	r1, #3
 8014bd8:	69b8      	ldr	r0, [r7, #24]
 8014bda:	f003 f935 	bl	8017e48 <xTimerGenericCommand>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b01      	cmp	r3, #1
 8014be2:	d102      	bne.n	8014bea <osTimerStop+0x7e>
        stat = osOK;
 8014be4:	2300      	movs	r3, #0
 8014be6:	61fb      	str	r3, [r7, #28]
 8014be8:	e002      	b.n	8014bf0 <osTimerStop+0x84>
      } else {
        stat = osError;
 8014bea:	f04f 33ff 	mov.w	r3, #4294967295
 8014bee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8014bf0:	69fb      	ldr	r3, [r7, #28]
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3720      	adds	r7, #32
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	20000d2c 	.word	0x20000d2c

08014c00 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b08a      	sub	sp, #40	; 0x28
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c0c:	f3ef 8305 	mrs	r3, IPSR
 8014c10:	613b      	str	r3, [r7, #16]
  return(result);
 8014c12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f040 8085 	bne.w	8014d24 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8014c1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d105      	bne.n	8014c32 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014c26:	f3ef 8311 	mrs	r3, BASEPRI
 8014c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d003      	beq.n	8014c3a <osMutexNew+0x3a>
 8014c32:	4b3f      	ldr	r3, [pc, #252]	; (8014d30 <osMutexNew+0x130>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	2b02      	cmp	r3, #2
 8014c38:	d074      	beq.n	8014d24 <osMutexNew+0x124>
    if (attr != NULL) {
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d003      	beq.n	8014c48 <osMutexNew+0x48>
      type = attr->attr_bits;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	623b      	str	r3, [r7, #32]
 8014c46:	e001      	b.n	8014c4c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8014c4c:	6a3b      	ldr	r3, [r7, #32]
 8014c4e:	f003 0301 	and.w	r3, r3, #1
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d002      	beq.n	8014c5c <osMutexNew+0x5c>
      rmtx = 1U;
 8014c56:	2301      	movs	r3, #1
 8014c58:	61fb      	str	r3, [r7, #28]
 8014c5a:	e001      	b.n	8014c60 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014c60:	6a3b      	ldr	r3, [r7, #32]
 8014c62:	f003 0308 	and.w	r3, r3, #8
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d15c      	bne.n	8014d24 <osMutexNew+0x124>
      mem = -1;
 8014c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c6e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d015      	beq.n	8014ca2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	689b      	ldr	r3, [r3, #8]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d006      	beq.n	8014c8c <osMutexNew+0x8c>
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	68db      	ldr	r3, [r3, #12]
 8014c82:	2b4f      	cmp	r3, #79	; 0x4f
 8014c84:	d902      	bls.n	8014c8c <osMutexNew+0x8c>
          mem = 1;
 8014c86:	2301      	movs	r3, #1
 8014c88:	61bb      	str	r3, [r7, #24]
 8014c8a:	e00c      	b.n	8014ca6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	689b      	ldr	r3, [r3, #8]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d108      	bne.n	8014ca6 <osMutexNew+0xa6>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	68db      	ldr	r3, [r3, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d104      	bne.n	8014ca6 <osMutexNew+0xa6>
            mem = 0;
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	61bb      	str	r3, [r7, #24]
 8014ca0:	e001      	b.n	8014ca6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d112      	bne.n	8014cd2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d007      	beq.n	8014cc2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	689b      	ldr	r3, [r3, #8]
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	2004      	movs	r0, #4
 8014cba:	f000 fe3c 	bl	8015936 <xQueueCreateMutexStatic>
 8014cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8014cc0:	e016      	b.n	8014cf0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	689b      	ldr	r3, [r3, #8]
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	2001      	movs	r0, #1
 8014cca:	f000 fe34 	bl	8015936 <xQueueCreateMutexStatic>
 8014cce:	6278      	str	r0, [r7, #36]	; 0x24
 8014cd0:	e00e      	b.n	8014cf0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d10b      	bne.n	8014cf0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d004      	beq.n	8014ce8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8014cde:	2004      	movs	r0, #4
 8014ce0:	f000 fe11 	bl	8015906 <xQueueCreateMutex>
 8014ce4:	6278      	str	r0, [r7, #36]	; 0x24
 8014ce6:	e003      	b.n	8014cf0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8014ce8:	2001      	movs	r0, #1
 8014cea:	f000 fe0c 	bl	8015906 <xQueueCreateMutex>
 8014cee:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8014cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d00c      	beq.n	8014d10 <osMutexNew+0x110>
        if (attr != NULL) {
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d003      	beq.n	8014d04 <osMutexNew+0x104>
          name = attr->name;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	617b      	str	r3, [r7, #20]
 8014d02:	e001      	b.n	8014d08 <osMutexNew+0x108>
        } else {
          name = NULL;
 8014d04:	2300      	movs	r3, #0
 8014d06:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8014d08:	6979      	ldr	r1, [r7, #20]
 8014d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d0c:	f001 fcc0 	bl	8016690 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8014d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d006      	beq.n	8014d24 <osMutexNew+0x124>
 8014d16:	69fb      	ldr	r3, [r7, #28]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d003      	beq.n	8014d24 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8014d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1e:	f043 0301 	orr.w	r3, r3, #1
 8014d22:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8014d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	3728      	adds	r7, #40	; 0x28
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	20000d2c 	.word	0x20000d2c

08014d34 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b088      	sub	sp, #32
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f023 0301 	bic.w	r3, r3, #1
 8014d44:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f003 0301 	and.w	r3, r3, #1
 8014d4c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d52:	f3ef 8305 	mrs	r3, IPSR
 8014d56:	613b      	str	r3, [r7, #16]
  return(result);
 8014d58:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d10f      	bne.n	8014d7e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8014d62:	60fb      	str	r3, [r7, #12]
  return(result);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d105      	bne.n	8014d76 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8014d6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d007      	beq.n	8014d86 <osMutexAcquire+0x52>
 8014d76:	4b1d      	ldr	r3, [pc, #116]	; (8014dec <osMutexAcquire+0xb8>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	2b02      	cmp	r3, #2
 8014d7c:	d103      	bne.n	8014d86 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8014d7e:	f06f 0305 	mvn.w	r3, #5
 8014d82:	61fb      	str	r3, [r7, #28]
 8014d84:	e02c      	b.n	8014de0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8014d86:	69bb      	ldr	r3, [r7, #24]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d103      	bne.n	8014d94 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8014d8c:	f06f 0303 	mvn.w	r3, #3
 8014d90:	61fb      	str	r3, [r7, #28]
 8014d92:	e025      	b.n	8014de0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d011      	beq.n	8014dbe <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	69b8      	ldr	r0, [r7, #24]
 8014d9e:	f000 fe18 	bl	80159d2 <xQueueTakeMutexRecursive>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b01      	cmp	r3, #1
 8014da6:	d01b      	beq.n	8014de0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d003      	beq.n	8014db6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8014dae:	f06f 0301 	mvn.w	r3, #1
 8014db2:	61fb      	str	r3, [r7, #28]
 8014db4:	e014      	b.n	8014de0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8014db6:	f06f 0302 	mvn.w	r3, #2
 8014dba:	61fb      	str	r3, [r7, #28]
 8014dbc:	e010      	b.n	8014de0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8014dbe:	6839      	ldr	r1, [r7, #0]
 8014dc0:	69b8      	ldr	r0, [r7, #24]
 8014dc2:	f001 f995 	bl	80160f0 <xQueueSemaphoreTake>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d009      	beq.n	8014de0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d003      	beq.n	8014dda <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8014dd2:	f06f 0301 	mvn.w	r3, #1
 8014dd6:	61fb      	str	r3, [r7, #28]
 8014dd8:	e002      	b.n	8014de0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8014dda:	f06f 0302 	mvn.w	r3, #2
 8014dde:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014de0:	69fb      	ldr	r3, [r7, #28]
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3720      	adds	r7, #32
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	20000d2c 	.word	0x20000d2c

08014df0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b088      	sub	sp, #32
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f023 0301 	bic.w	r3, r3, #1
 8014dfe:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f003 0301 	and.w	r3, r3, #1
 8014e06:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e0c:	f3ef 8305 	mrs	r3, IPSR
 8014e10:	613b      	str	r3, [r7, #16]
  return(result);
 8014e12:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d10f      	bne.n	8014e38 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e18:	f3ef 8310 	mrs	r3, PRIMASK
 8014e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d105      	bne.n	8014e30 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014e24:	f3ef 8311 	mrs	r3, BASEPRI
 8014e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d007      	beq.n	8014e40 <osMutexRelease+0x50>
 8014e30:	4b16      	ldr	r3, [pc, #88]	; (8014e8c <osMutexRelease+0x9c>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2b02      	cmp	r3, #2
 8014e36:	d103      	bne.n	8014e40 <osMutexRelease+0x50>
    stat = osErrorISR;
 8014e38:	f06f 0305 	mvn.w	r3, #5
 8014e3c:	61fb      	str	r3, [r7, #28]
 8014e3e:	e01f      	b.n	8014e80 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8014e40:	69bb      	ldr	r3, [r7, #24]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d103      	bne.n	8014e4e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8014e46:	f06f 0303 	mvn.w	r3, #3
 8014e4a:	61fb      	str	r3, [r7, #28]
 8014e4c:	e018      	b.n	8014e80 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d009      	beq.n	8014e68 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014e54:	69b8      	ldr	r0, [r7, #24]
 8014e56:	f000 fd89 	bl	801596c <xQueueGiveMutexRecursive>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d00f      	beq.n	8014e80 <osMutexRelease+0x90>
        stat = osErrorResource;
 8014e60:	f06f 0302 	mvn.w	r3, #2
 8014e64:	61fb      	str	r3, [r7, #28]
 8014e66:	e00b      	b.n	8014e80 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8014e68:	2300      	movs	r3, #0
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	2100      	movs	r1, #0
 8014e6e:	69b8      	ldr	r0, [r7, #24]
 8014e70:	f000 fe4a 	bl	8015b08 <xQueueGenericSend>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d002      	beq.n	8014e80 <osMutexRelease+0x90>
        stat = osErrorResource;
 8014e7a:	f06f 0302 	mvn.w	r3, #2
 8014e7e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8014e80:	69fb      	ldr	r3, [r7, #28]
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3720      	adds	r7, #32
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	20000d2c 	.word	0x20000d2c

08014e90 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b08c      	sub	sp, #48	; 0x30
 8014e94:	af02      	add	r7, sp, #8
 8014e96:	60f8      	str	r0, [r7, #12]
 8014e98:	60b9      	str	r1, [r7, #8]
 8014e9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ea0:	f3ef 8305 	mrs	r3, IPSR
 8014ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8014ea6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	f040 8087 	bne.w	8014fbc <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014eae:	f3ef 8310 	mrs	r3, PRIMASK
 8014eb2:	617b      	str	r3, [r7, #20]
  return(result);
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d105      	bne.n	8014ec6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014eba:	f3ef 8311 	mrs	r3, BASEPRI
 8014ebe:	613b      	str	r3, [r7, #16]
  return(result);
 8014ec0:	693b      	ldr	r3, [r7, #16]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d003      	beq.n	8014ece <osSemaphoreNew+0x3e>
 8014ec6:	4b40      	ldr	r3, [pc, #256]	; (8014fc8 <osSemaphoreNew+0x138>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b02      	cmp	r3, #2
 8014ecc:	d076      	beq.n	8014fbc <osSemaphoreNew+0x12c>
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d073      	beq.n	8014fbc <osSemaphoreNew+0x12c>
 8014ed4:	68ba      	ldr	r2, [r7, #8]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d86f      	bhi.n	8014fbc <osSemaphoreNew+0x12c>
    mem = -1;
 8014edc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d015      	beq.n	8014f14 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	689b      	ldr	r3, [r3, #8]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d006      	beq.n	8014efe <osSemaphoreNew+0x6e>
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	68db      	ldr	r3, [r3, #12]
 8014ef4:	2b4f      	cmp	r3, #79	; 0x4f
 8014ef6:	d902      	bls.n	8014efe <osSemaphoreNew+0x6e>
        mem = 1;
 8014ef8:	2301      	movs	r3, #1
 8014efa:	623b      	str	r3, [r7, #32]
 8014efc:	e00c      	b.n	8014f18 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	689b      	ldr	r3, [r3, #8]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d108      	bne.n	8014f18 <osSemaphoreNew+0x88>
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	68db      	ldr	r3, [r3, #12]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d104      	bne.n	8014f18 <osSemaphoreNew+0x88>
          mem = 0;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	623b      	str	r3, [r7, #32]
 8014f12:	e001      	b.n	8014f18 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8014f14:	2300      	movs	r3, #0
 8014f16:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8014f18:	6a3b      	ldr	r3, [r7, #32]
 8014f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f1e:	d04d      	beq.n	8014fbc <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2b01      	cmp	r3, #1
 8014f24:	d129      	bne.n	8014f7a <osSemaphoreNew+0xea>
        if (mem == 1) {
 8014f26:	6a3b      	ldr	r3, [r7, #32]
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d10b      	bne.n	8014f44 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	689a      	ldr	r2, [r3, #8]
 8014f30:	2303      	movs	r3, #3
 8014f32:	9300      	str	r3, [sp, #0]
 8014f34:	4613      	mov	r3, r2
 8014f36:	2200      	movs	r2, #0
 8014f38:	2100      	movs	r1, #0
 8014f3a:	2001      	movs	r0, #1
 8014f3c:	f000 fbf4 	bl	8015728 <xQueueGenericCreateStatic>
 8014f40:	6278      	str	r0, [r7, #36]	; 0x24
 8014f42:	e005      	b.n	8014f50 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8014f44:	2203      	movs	r2, #3
 8014f46:	2100      	movs	r1, #0
 8014f48:	2001      	movs	r0, #1
 8014f4a:	f000 fc60 	bl	801580e <xQueueGenericCreate>
 8014f4e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d022      	beq.n	8014f9c <osSemaphoreNew+0x10c>
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d01f      	beq.n	8014f9c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	2200      	movs	r2, #0
 8014f60:	2100      	movs	r1, #0
 8014f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f64:	f000 fdd0 	bl	8015b08 <xQueueGenericSend>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2b01      	cmp	r3, #1
 8014f6c:	d016      	beq.n	8014f9c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8014f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f70:	f001 fa43 	bl	80163fa <vQueueDelete>
            hSemaphore = NULL;
 8014f74:	2300      	movs	r3, #0
 8014f76:	627b      	str	r3, [r7, #36]	; 0x24
 8014f78:	e010      	b.n	8014f9c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8014f7a:	6a3b      	ldr	r3, [r7, #32]
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d108      	bne.n	8014f92 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	689b      	ldr	r3, [r3, #8]
 8014f84:	461a      	mov	r2, r3
 8014f86:	68b9      	ldr	r1, [r7, #8]
 8014f88:	68f8      	ldr	r0, [r7, #12]
 8014f8a:	f000 fd57 	bl	8015a3c <xQueueCreateCountingSemaphoreStatic>
 8014f8e:	6278      	str	r0, [r7, #36]	; 0x24
 8014f90:	e004      	b.n	8014f9c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014f92:	68b9      	ldr	r1, [r7, #8]
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f000 fd86 	bl	8015aa6 <xQueueCreateCountingSemaphore>
 8014f9a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d00c      	beq.n	8014fbc <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d003      	beq.n	8014fb0 <osSemaphoreNew+0x120>
          name = attr->name;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	61fb      	str	r3, [r7, #28]
 8014fae:	e001      	b.n	8014fb4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014fb4:	69f9      	ldr	r1, [r7, #28]
 8014fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fb8:	f001 fb6a 	bl	8016690 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3728      	adds	r7, #40	; 0x28
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	20000d2c 	.word	0x20000d2c

08014fcc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b088      	sub	sp, #32
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d103      	bne.n	8014fec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014fe4:	f06f 0303 	mvn.w	r3, #3
 8014fe8:	61fb      	str	r3, [r7, #28]
 8014fea:	e04b      	b.n	8015084 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014fec:	f3ef 8305 	mrs	r3, IPSR
 8014ff0:	617b      	str	r3, [r7, #20]
  return(result);
 8014ff2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d10f      	bne.n	8015018 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8014ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d105      	bne.n	8015010 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015004:	f3ef 8311 	mrs	r3, BASEPRI
 8015008:	60fb      	str	r3, [r7, #12]
  return(result);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d026      	beq.n	801505e <osSemaphoreAcquire+0x92>
 8015010:	4b1f      	ldr	r3, [pc, #124]	; (8015090 <osSemaphoreAcquire+0xc4>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b02      	cmp	r3, #2
 8015016:	d122      	bne.n	801505e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d003      	beq.n	8015026 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801501e:	f06f 0303 	mvn.w	r3, #3
 8015022:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8015024:	e02d      	b.n	8015082 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8015026:	2300      	movs	r3, #0
 8015028:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801502a:	f107 0308 	add.w	r3, r7, #8
 801502e:	461a      	mov	r2, r3
 8015030:	2100      	movs	r1, #0
 8015032:	69b8      	ldr	r0, [r7, #24]
 8015034:	f001 f964 	bl	8016300 <xQueueReceiveFromISR>
 8015038:	4603      	mov	r3, r0
 801503a:	2b01      	cmp	r3, #1
 801503c:	d003      	beq.n	8015046 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801503e:	f06f 0302 	mvn.w	r3, #2
 8015042:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8015044:	e01d      	b.n	8015082 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d01a      	beq.n	8015082 <osSemaphoreAcquire+0xb6>
 801504c:	4b11      	ldr	r3, [pc, #68]	; (8015094 <osSemaphoreAcquire+0xc8>)
 801504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015052:	601a      	str	r2, [r3, #0]
 8015054:	f3bf 8f4f 	dsb	sy
 8015058:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801505c:	e011      	b.n	8015082 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801505e:	6839      	ldr	r1, [r7, #0]
 8015060:	69b8      	ldr	r0, [r7, #24]
 8015062:	f001 f845 	bl	80160f0 <xQueueSemaphoreTake>
 8015066:	4603      	mov	r3, r0
 8015068:	2b01      	cmp	r3, #1
 801506a:	d00b      	beq.n	8015084 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d003      	beq.n	801507a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8015072:	f06f 0301 	mvn.w	r3, #1
 8015076:	61fb      	str	r3, [r7, #28]
 8015078:	e004      	b.n	8015084 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801507a:	f06f 0302 	mvn.w	r3, #2
 801507e:	61fb      	str	r3, [r7, #28]
 8015080:	e000      	b.n	8015084 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8015082:	bf00      	nop
      }
    }
  }

  return (stat);
 8015084:	69fb      	ldr	r3, [r7, #28]
}
 8015086:	4618      	mov	r0, r3
 8015088:	3720      	adds	r7, #32
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	20000d2c 	.word	0x20000d2c
 8015094:	e000ed04 	.word	0xe000ed04

08015098 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015098:	b580      	push	{r7, lr}
 801509a:	b088      	sub	sp, #32
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80150a4:	2300      	movs	r3, #0
 80150a6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d103      	bne.n	80150b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80150ae:	f06f 0303 	mvn.w	r3, #3
 80150b2:	61fb      	str	r3, [r7, #28]
 80150b4:	e03e      	b.n	8015134 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80150b6:	f3ef 8305 	mrs	r3, IPSR
 80150ba:	617b      	str	r3, [r7, #20]
  return(result);
 80150bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d10f      	bne.n	80150e2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150c2:	f3ef 8310 	mrs	r3, PRIMASK
 80150c6:	613b      	str	r3, [r7, #16]
  return(result);
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d105      	bne.n	80150da <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80150ce:	f3ef 8311 	mrs	r3, BASEPRI
 80150d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d01e      	beq.n	8015118 <osSemaphoreRelease+0x80>
 80150da:	4b19      	ldr	r3, [pc, #100]	; (8015140 <osSemaphoreRelease+0xa8>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b02      	cmp	r3, #2
 80150e0:	d11a      	bne.n	8015118 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80150e2:	2300      	movs	r3, #0
 80150e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80150e6:	f107 0308 	add.w	r3, r7, #8
 80150ea:	4619      	mov	r1, r3
 80150ec:	69b8      	ldr	r0, [r7, #24]
 80150ee:	f000 fe99 	bl	8015e24 <xQueueGiveFromISR>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d003      	beq.n	8015100 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80150f8:	f06f 0302 	mvn.w	r3, #2
 80150fc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80150fe:	e018      	b.n	8015132 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d015      	beq.n	8015132 <osSemaphoreRelease+0x9a>
 8015106:	4b0f      	ldr	r3, [pc, #60]	; (8015144 <osSemaphoreRelease+0xac>)
 8015108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801510c:	601a      	str	r2, [r3, #0]
 801510e:	f3bf 8f4f 	dsb	sy
 8015112:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015116:	e00c      	b.n	8015132 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015118:	2300      	movs	r3, #0
 801511a:	2200      	movs	r2, #0
 801511c:	2100      	movs	r1, #0
 801511e:	69b8      	ldr	r0, [r7, #24]
 8015120:	f000 fcf2 	bl	8015b08 <xQueueGenericSend>
 8015124:	4603      	mov	r3, r0
 8015126:	2b01      	cmp	r3, #1
 8015128:	d004      	beq.n	8015134 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801512a:	f06f 0302 	mvn.w	r3, #2
 801512e:	61fb      	str	r3, [r7, #28]
 8015130:	e000      	b.n	8015134 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015132:	bf00      	nop
    }
  }

  return (stat);
 8015134:	69fb      	ldr	r3, [r7, #28]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3720      	adds	r7, #32
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	20000d2c 	.word	0x20000d2c
 8015144:	e000ed04 	.word	0xe000ed04

08015148 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015148:	b580      	push	{r7, lr}
 801514a:	b08c      	sub	sp, #48	; 0x30
 801514c:	af02      	add	r7, sp, #8
 801514e:	60f8      	str	r0, [r7, #12]
 8015150:	60b9      	str	r1, [r7, #8]
 8015152:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015154:	2300      	movs	r3, #0
 8015156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015158:	f3ef 8305 	mrs	r3, IPSR
 801515c:	61bb      	str	r3, [r7, #24]
  return(result);
 801515e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015160:	2b00      	cmp	r3, #0
 8015162:	d170      	bne.n	8015246 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015164:	f3ef 8310 	mrs	r3, PRIMASK
 8015168:	617b      	str	r3, [r7, #20]
  return(result);
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d105      	bne.n	801517c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015170:	f3ef 8311 	mrs	r3, BASEPRI
 8015174:	613b      	str	r3, [r7, #16]
  return(result);
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d003      	beq.n	8015184 <osMessageQueueNew+0x3c>
 801517c:	4b34      	ldr	r3, [pc, #208]	; (8015250 <osMessageQueueNew+0x108>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	2b02      	cmp	r3, #2
 8015182:	d060      	beq.n	8015246 <osMessageQueueNew+0xfe>
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d05d      	beq.n	8015246 <osMessageQueueNew+0xfe>
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d05a      	beq.n	8015246 <osMessageQueueNew+0xfe>
    mem = -1;
 8015190:	f04f 33ff 	mov.w	r3, #4294967295
 8015194:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d029      	beq.n	80151f0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	689b      	ldr	r3, [r3, #8]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d012      	beq.n	80151ca <osMessageQueueNew+0x82>
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	68db      	ldr	r3, [r3, #12]
 80151a8:	2b4f      	cmp	r3, #79	; 0x4f
 80151aa:	d90e      	bls.n	80151ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d00a      	beq.n	80151ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	695a      	ldr	r2, [r3, #20]
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	68b9      	ldr	r1, [r7, #8]
 80151bc:	fb01 f303 	mul.w	r3, r1, r3
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d302      	bcc.n	80151ca <osMessageQueueNew+0x82>
        mem = 1;
 80151c4:	2301      	movs	r3, #1
 80151c6:	623b      	str	r3, [r7, #32]
 80151c8:	e014      	b.n	80151f4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	689b      	ldr	r3, [r3, #8]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d110      	bne.n	80151f4 <osMessageQueueNew+0xac>
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d10c      	bne.n	80151f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d108      	bne.n	80151f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	695b      	ldr	r3, [r3, #20]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d104      	bne.n	80151f4 <osMessageQueueNew+0xac>
          mem = 0;
 80151ea:	2300      	movs	r3, #0
 80151ec:	623b      	str	r3, [r7, #32]
 80151ee:	e001      	b.n	80151f4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80151f0:	2300      	movs	r3, #0
 80151f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80151f4:	6a3b      	ldr	r3, [r7, #32]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d10c      	bne.n	8015214 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	691a      	ldr	r2, [r3, #16]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6899      	ldr	r1, [r3, #8]
 8015202:	2300      	movs	r3, #0
 8015204:	9300      	str	r3, [sp, #0]
 8015206:	460b      	mov	r3, r1
 8015208:	68b9      	ldr	r1, [r7, #8]
 801520a:	68f8      	ldr	r0, [r7, #12]
 801520c:	f000 fa8c 	bl	8015728 <xQueueGenericCreateStatic>
 8015210:	6278      	str	r0, [r7, #36]	; 0x24
 8015212:	e008      	b.n	8015226 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8015214:	6a3b      	ldr	r3, [r7, #32]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d105      	bne.n	8015226 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801521a:	2200      	movs	r2, #0
 801521c:	68b9      	ldr	r1, [r7, #8]
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	f000 faf5 	bl	801580e <xQueueGenericCreate>
 8015224:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015228:	2b00      	cmp	r3, #0
 801522a:	d00c      	beq.n	8015246 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d003      	beq.n	801523a <osMessageQueueNew+0xf2>
        name = attr->name;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	61fb      	str	r3, [r7, #28]
 8015238:	e001      	b.n	801523e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801523a:	2300      	movs	r3, #0
 801523c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801523e:	69f9      	ldr	r1, [r7, #28]
 8015240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015242:	f001 fa25 	bl	8016690 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015248:	4618      	mov	r0, r3
 801524a:	3728      	adds	r7, #40	; 0x28
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}
 8015250:	20000d2c 	.word	0x20000d2c

08015254 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015254:	b580      	push	{r7, lr}
 8015256:	b08a      	sub	sp, #40	; 0x28
 8015258:	af00      	add	r7, sp, #0
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	60b9      	str	r1, [r7, #8]
 801525e:	603b      	str	r3, [r7, #0]
 8015260:	4613      	mov	r3, r2
 8015262:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015268:	2300      	movs	r3, #0
 801526a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801526c:	f3ef 8305 	mrs	r3, IPSR
 8015270:	61fb      	str	r3, [r7, #28]
  return(result);
 8015272:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8015274:	2b00      	cmp	r3, #0
 8015276:	d10f      	bne.n	8015298 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015278:	f3ef 8310 	mrs	r3, PRIMASK
 801527c:	61bb      	str	r3, [r7, #24]
  return(result);
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d105      	bne.n	8015290 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015284:	f3ef 8311 	mrs	r3, BASEPRI
 8015288:	617b      	str	r3, [r7, #20]
  return(result);
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d02c      	beq.n	80152ea <osMessageQueuePut+0x96>
 8015290:	4b28      	ldr	r3, [pc, #160]	; (8015334 <osMessageQueuePut+0xe0>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	2b02      	cmp	r3, #2
 8015296:	d128      	bne.n	80152ea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015298:	6a3b      	ldr	r3, [r7, #32]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d005      	beq.n	80152aa <osMessageQueuePut+0x56>
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d002      	beq.n	80152aa <osMessageQueuePut+0x56>
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d003      	beq.n	80152b2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80152aa:	f06f 0303 	mvn.w	r3, #3
 80152ae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80152b0:	e039      	b.n	8015326 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80152b2:	2300      	movs	r3, #0
 80152b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80152b6:	f107 0210 	add.w	r2, r7, #16
 80152ba:	2300      	movs	r3, #0
 80152bc:	68b9      	ldr	r1, [r7, #8]
 80152be:	6a38      	ldr	r0, [r7, #32]
 80152c0:	f000 fd1c 	bl	8015cfc <xQueueGenericSendFromISR>
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b01      	cmp	r3, #1
 80152c8:	d003      	beq.n	80152d2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80152ca:	f06f 0302 	mvn.w	r3, #2
 80152ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80152d0:	e029      	b.n	8015326 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d026      	beq.n	8015326 <osMessageQueuePut+0xd2>
 80152d8:	4b17      	ldr	r3, [pc, #92]	; (8015338 <osMessageQueuePut+0xe4>)
 80152da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152de:	601a      	str	r2, [r3, #0]
 80152e0:	f3bf 8f4f 	dsb	sy
 80152e4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80152e8:	e01d      	b.n	8015326 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80152ea:	6a3b      	ldr	r3, [r7, #32]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d002      	beq.n	80152f6 <osMessageQueuePut+0xa2>
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d103      	bne.n	80152fe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80152f6:	f06f 0303 	mvn.w	r3, #3
 80152fa:	627b      	str	r3, [r7, #36]	; 0x24
 80152fc:	e014      	b.n	8015328 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80152fe:	2300      	movs	r3, #0
 8015300:	683a      	ldr	r2, [r7, #0]
 8015302:	68b9      	ldr	r1, [r7, #8]
 8015304:	6a38      	ldr	r0, [r7, #32]
 8015306:	f000 fbff 	bl	8015b08 <xQueueGenericSend>
 801530a:	4603      	mov	r3, r0
 801530c:	2b01      	cmp	r3, #1
 801530e:	d00b      	beq.n	8015328 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d003      	beq.n	801531e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8015316:	f06f 0301 	mvn.w	r3, #1
 801531a:	627b      	str	r3, [r7, #36]	; 0x24
 801531c:	e004      	b.n	8015328 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801531e:	f06f 0302 	mvn.w	r3, #2
 8015322:	627b      	str	r3, [r7, #36]	; 0x24
 8015324:	e000      	b.n	8015328 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015326:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8015328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801532a:	4618      	mov	r0, r3
 801532c:	3728      	adds	r7, #40	; 0x28
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	20000d2c 	.word	0x20000d2c
 8015338:	e000ed04 	.word	0xe000ed04

0801533c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801533c:	b580      	push	{r7, lr}
 801533e:	b08a      	sub	sp, #40	; 0x28
 8015340:	af00      	add	r7, sp, #0
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
 8015348:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801534e:	2300      	movs	r3, #0
 8015350:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015352:	f3ef 8305 	mrs	r3, IPSR
 8015356:	61fb      	str	r3, [r7, #28]
  return(result);
 8015358:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801535a:	2b00      	cmp	r3, #0
 801535c:	d10f      	bne.n	801537e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801535e:	f3ef 8310 	mrs	r3, PRIMASK
 8015362:	61bb      	str	r3, [r7, #24]
  return(result);
 8015364:	69bb      	ldr	r3, [r7, #24]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d105      	bne.n	8015376 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801536a:	f3ef 8311 	mrs	r3, BASEPRI
 801536e:	617b      	str	r3, [r7, #20]
  return(result);
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d02c      	beq.n	80153d0 <osMessageQueueGet+0x94>
 8015376:	4b28      	ldr	r3, [pc, #160]	; (8015418 <osMessageQueueGet+0xdc>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	2b02      	cmp	r3, #2
 801537c:	d128      	bne.n	80153d0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801537e:	6a3b      	ldr	r3, [r7, #32]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d005      	beq.n	8015390 <osMessageQueueGet+0x54>
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d002      	beq.n	8015390 <osMessageQueueGet+0x54>
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d003      	beq.n	8015398 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8015390:	f06f 0303 	mvn.w	r3, #3
 8015394:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015396:	e038      	b.n	801540a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8015398:	2300      	movs	r3, #0
 801539a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801539c:	f107 0310 	add.w	r3, r7, #16
 80153a0:	461a      	mov	r2, r3
 80153a2:	68b9      	ldr	r1, [r7, #8]
 80153a4:	6a38      	ldr	r0, [r7, #32]
 80153a6:	f000 ffab 	bl	8016300 <xQueueReceiveFromISR>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b01      	cmp	r3, #1
 80153ae:	d003      	beq.n	80153b8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80153b0:	f06f 0302 	mvn.w	r3, #2
 80153b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80153b6:	e028      	b.n	801540a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d025      	beq.n	801540a <osMessageQueueGet+0xce>
 80153be:	4b17      	ldr	r3, [pc, #92]	; (801541c <osMessageQueueGet+0xe0>)
 80153c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153c4:	601a      	str	r2, [r3, #0]
 80153c6:	f3bf 8f4f 	dsb	sy
 80153ca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80153ce:	e01c      	b.n	801540a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80153d0:	6a3b      	ldr	r3, [r7, #32]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d002      	beq.n	80153dc <osMessageQueueGet+0xa0>
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d103      	bne.n	80153e4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80153dc:	f06f 0303 	mvn.w	r3, #3
 80153e0:	627b      	str	r3, [r7, #36]	; 0x24
 80153e2:	e013      	b.n	801540c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80153e4:	683a      	ldr	r2, [r7, #0]
 80153e6:	68b9      	ldr	r1, [r7, #8]
 80153e8:	6a38      	ldr	r0, [r7, #32]
 80153ea:	f000 fda5 	bl	8015f38 <xQueueReceive>
 80153ee:	4603      	mov	r3, r0
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d00b      	beq.n	801540c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d003      	beq.n	8015402 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80153fa:	f06f 0301 	mvn.w	r3, #1
 80153fe:	627b      	str	r3, [r7, #36]	; 0x24
 8015400:	e004      	b.n	801540c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8015402:	f06f 0302 	mvn.w	r3, #2
 8015406:	627b      	str	r3, [r7, #36]	; 0x24
 8015408:	e000      	b.n	801540c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801540a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801540e:	4618      	mov	r0, r3
 8015410:	3728      	adds	r7, #40	; 0x28
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	20000d2c 	.word	0x20000d2c
 801541c:	e000ed04 	.word	0xe000ed04

08015420 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8015420:	b580      	push	{r7, lr}
 8015422:	b088      	sub	sp, #32
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801542c:	f3ef 8305 	mrs	r3, IPSR
 8015430:	617b      	str	r3, [r7, #20]
  return(result);
 8015432:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015434:	2b00      	cmp	r3, #0
 8015436:	d10f      	bne.n	8015458 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015438:	f3ef 8310 	mrs	r3, PRIMASK
 801543c:	613b      	str	r3, [r7, #16]
  return(result);
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d105      	bne.n	8015450 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015444:	f3ef 8311 	mrs	r3, BASEPRI
 8015448:	60fb      	str	r3, [r7, #12]
  return(result);
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d007      	beq.n	8015460 <osMessageQueueReset+0x40>
 8015450:	4b0c      	ldr	r3, [pc, #48]	; (8015484 <osMessageQueueReset+0x64>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	2b02      	cmp	r3, #2
 8015456:	d103      	bne.n	8015460 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8015458:	f06f 0305 	mvn.w	r3, #5
 801545c:	61fb      	str	r3, [r7, #28]
 801545e:	e00c      	b.n	801547a <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8015460:	69bb      	ldr	r3, [r7, #24]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d103      	bne.n	801546e <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8015466:	f06f 0303 	mvn.w	r3, #3
 801546a:	61fb      	str	r3, [r7, #28]
 801546c:	e005      	b.n	801547a <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 801546e:	2300      	movs	r3, #0
 8015470:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8015472:	2100      	movs	r1, #0
 8015474:	69b8      	ldr	r0, [r7, #24]
 8015476:	f000 f8ef 	bl	8015658 <xQueueGenericReset>
  }

  return (stat);
 801547a:	69fb      	ldr	r3, [r7, #28]
}
 801547c:	4618      	mov	r0, r3
 801547e:	3720      	adds	r7, #32
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}
 8015484:	20000d2c 	.word	0x20000d2c

08015488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015488:	b480      	push	{r7}
 801548a:	b085      	sub	sp, #20
 801548c:	af00      	add	r7, sp, #0
 801548e:	60f8      	str	r0, [r7, #12]
 8015490:	60b9      	str	r1, [r7, #8]
 8015492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	4a07      	ldr	r2, [pc, #28]	; (80154b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8015498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	4a06      	ldr	r2, [pc, #24]	; (80154b8 <vApplicationGetIdleTaskMemory+0x30>)
 801549e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80154a6:	601a      	str	r2, [r3, #0]
}
 80154a8:	bf00      	nop
 80154aa:	3714      	adds	r7, #20
 80154ac:	46bd      	mov	sp, r7
 80154ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b2:	4770      	bx	lr
 80154b4:	20000d30 	.word	0x20000d30
 80154b8:	20000d94 	.word	0x20000d94

080154bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80154bc:	b480      	push	{r7}
 80154be:	b085      	sub	sp, #20
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	4a07      	ldr	r2, [pc, #28]	; (80154e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80154cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	4a06      	ldr	r2, [pc, #24]	; (80154ec <vApplicationGetTimerTaskMemory+0x30>)
 80154d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80154da:	601a      	str	r2, [r3, #0]
}
 80154dc:	bf00      	nop
 80154de:	3714      	adds	r7, #20
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr
 80154e8:	20001594 	.word	0x20001594
 80154ec:	200015f8 	.word	0x200015f8

080154f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f103 0208 	add.w	r2, r3, #8
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f04f 32ff 	mov.w	r2, #4294967295
 8015508:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f103 0208 	add.w	r2, r3, #8
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f103 0208 	add.w	r2, r3, #8
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2200      	movs	r2, #0
 8015522:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015524:	bf00      	nop
 8015526:	370c      	adds	r7, #12
 8015528:	46bd      	mov	sp, r7
 801552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552e:	4770      	bx	lr

08015530 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015530:	b480      	push	{r7}
 8015532:	b083      	sub	sp, #12
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2200      	movs	r2, #0
 801553c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801553e:	bf00      	nop
 8015540:	370c      	adds	r7, #12
 8015542:	46bd      	mov	sp, r7
 8015544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015548:	4770      	bx	lr

0801554a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801554a:	b480      	push	{r7}
 801554c:	b085      	sub	sp, #20
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
 8015552:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	68fa      	ldr	r2, [r7, #12]
 801555e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	689a      	ldr	r2, [r3, #8]
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	689b      	ldr	r3, [r3, #8]
 801556c:	683a      	ldr	r2, [r7, #0]
 801556e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	683a      	ldr	r2, [r7, #0]
 8015574:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	1c5a      	adds	r2, r3, #1
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	601a      	str	r2, [r3, #0]
}
 8015586:	bf00      	nop
 8015588:	3714      	adds	r7, #20
 801558a:	46bd      	mov	sp, r7
 801558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015590:	4770      	bx	lr

08015592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015592:	b480      	push	{r7}
 8015594:	b085      	sub	sp, #20
 8015596:	af00      	add	r7, sp, #0
 8015598:	6078      	str	r0, [r7, #4]
 801559a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155a8:	d103      	bne.n	80155b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	691b      	ldr	r3, [r3, #16]
 80155ae:	60fb      	str	r3, [r7, #12]
 80155b0:	e00c      	b.n	80155cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	3308      	adds	r3, #8
 80155b6:	60fb      	str	r3, [r7, #12]
 80155b8:	e002      	b.n	80155c0 <vListInsert+0x2e>
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	60fb      	str	r3, [r7, #12]
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	68ba      	ldr	r2, [r7, #8]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d2f6      	bcs.n	80155ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	685a      	ldr	r2, [r3, #4]
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	685b      	ldr	r3, [r3, #4]
 80155d8:	683a      	ldr	r2, [r7, #0]
 80155da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	68fa      	ldr	r2, [r7, #12]
 80155e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	683a      	ldr	r2, [r7, #0]
 80155e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	1c5a      	adds	r2, r3, #1
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	601a      	str	r2, [r3, #0]
}
 80155f8:	bf00      	nop
 80155fa:	3714      	adds	r7, #20
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr

08015604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015604:	b480      	push	{r7}
 8015606:	b085      	sub	sp, #20
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	691b      	ldr	r3, [r3, #16]
 8015610:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	6892      	ldr	r2, [r2, #8]
 801561a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	689b      	ldr	r3, [r3, #8]
 8015620:	687a      	ldr	r2, [r7, #4]
 8015622:	6852      	ldr	r2, [r2, #4]
 8015624:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	685b      	ldr	r3, [r3, #4]
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	429a      	cmp	r2, r3
 801562e:	d103      	bne.n	8015638 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	689a      	ldr	r2, [r3, #8]
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2200      	movs	r2, #0
 801563c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	1e5a      	subs	r2, r3, #1
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	681b      	ldr	r3, [r3, #0]
}
 801564c:	4618      	mov	r0, r3
 801564e:	3714      	adds	r7, #20
 8015650:	46bd      	mov	sp, r7
 8015652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015656:	4770      	bx	lr

08015658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
 8015660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d109      	bne.n	8015680 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015670:	f383 8811 	msr	BASEPRI, r3
 8015674:	f3bf 8f6f 	isb	sy
 8015678:	f3bf 8f4f 	dsb	sy
 801567c:	60bb      	str	r3, [r7, #8]
 801567e:	e7fe      	b.n	801567e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8015680:	f003 f84c 	bl	801871c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	681a      	ldr	r2, [r3, #0]
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801568c:	68f9      	ldr	r1, [r7, #12]
 801568e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015690:	fb01 f303 	mul.w	r3, r1, r3
 8015694:	441a      	add	r2, r3
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2200      	movs	r2, #0
 801569e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	681a      	ldr	r2, [r3, #0]
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156b0:	3b01      	subs	r3, #1
 80156b2:	68f9      	ldr	r1, [r7, #12]
 80156b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80156b6:	fb01 f303 	mul.w	r3, r1, r3
 80156ba:	441a      	add	r2, r3
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	22ff      	movs	r2, #255	; 0xff
 80156c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	22ff      	movs	r2, #255	; 0xff
 80156cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d114      	bne.n	8015700 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	691b      	ldr	r3, [r3, #16]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d01a      	beq.n	8015714 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	3310      	adds	r3, #16
 80156e2:	4618      	mov	r0, r3
 80156e4:	f001 fd20 	bl	8017128 <xTaskRemoveFromEventList>
 80156e8:	4603      	mov	r3, r0
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d012      	beq.n	8015714 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80156ee:	4b0d      	ldr	r3, [pc, #52]	; (8015724 <xQueueGenericReset+0xcc>)
 80156f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	f3bf 8f4f 	dsb	sy
 80156fa:	f3bf 8f6f 	isb	sy
 80156fe:	e009      	b.n	8015714 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	3310      	adds	r3, #16
 8015704:	4618      	mov	r0, r3
 8015706:	f7ff fef3 	bl	80154f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	3324      	adds	r3, #36	; 0x24
 801570e:	4618      	mov	r0, r3
 8015710:	f7ff feee 	bl	80154f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015714:	f003 f830 	bl	8018778 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015718:	2301      	movs	r3, #1
}
 801571a:	4618      	mov	r0, r3
 801571c:	3710      	adds	r7, #16
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}
 8015722:	bf00      	nop
 8015724:	e000ed04 	.word	0xe000ed04

08015728 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015728:	b580      	push	{r7, lr}
 801572a:	b08e      	sub	sp, #56	; 0x38
 801572c:	af02      	add	r7, sp, #8
 801572e:	60f8      	str	r0, [r7, #12]
 8015730:	60b9      	str	r1, [r7, #8]
 8015732:	607a      	str	r2, [r7, #4]
 8015734:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d109      	bne.n	8015750 <xQueueGenericCreateStatic+0x28>
 801573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015740:	f383 8811 	msr	BASEPRI, r3
 8015744:	f3bf 8f6f 	isb	sy
 8015748:	f3bf 8f4f 	dsb	sy
 801574c:	62bb      	str	r3, [r7, #40]	; 0x28
 801574e:	e7fe      	b.n	801574e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d109      	bne.n	801576a <xQueueGenericCreateStatic+0x42>
 8015756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575a:	f383 8811 	msr	BASEPRI, r3
 801575e:	f3bf 8f6f 	isb	sy
 8015762:	f3bf 8f4f 	dsb	sy
 8015766:	627b      	str	r3, [r7, #36]	; 0x24
 8015768:	e7fe      	b.n	8015768 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d002      	beq.n	8015776 <xQueueGenericCreateStatic+0x4e>
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d001      	beq.n	801577a <xQueueGenericCreateStatic+0x52>
 8015776:	2301      	movs	r3, #1
 8015778:	e000      	b.n	801577c <xQueueGenericCreateStatic+0x54>
 801577a:	2300      	movs	r3, #0
 801577c:	2b00      	cmp	r3, #0
 801577e:	d109      	bne.n	8015794 <xQueueGenericCreateStatic+0x6c>
 8015780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015784:	f383 8811 	msr	BASEPRI, r3
 8015788:	f3bf 8f6f 	isb	sy
 801578c:	f3bf 8f4f 	dsb	sy
 8015790:	623b      	str	r3, [r7, #32]
 8015792:	e7fe      	b.n	8015792 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d102      	bne.n	80157a0 <xQueueGenericCreateStatic+0x78>
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d101      	bne.n	80157a4 <xQueueGenericCreateStatic+0x7c>
 80157a0:	2301      	movs	r3, #1
 80157a2:	e000      	b.n	80157a6 <xQueueGenericCreateStatic+0x7e>
 80157a4:	2300      	movs	r3, #0
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d109      	bne.n	80157be <xQueueGenericCreateStatic+0x96>
 80157aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ae:	f383 8811 	msr	BASEPRI, r3
 80157b2:	f3bf 8f6f 	isb	sy
 80157b6:	f3bf 8f4f 	dsb	sy
 80157ba:	61fb      	str	r3, [r7, #28]
 80157bc:	e7fe      	b.n	80157bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80157be:	2350      	movs	r3, #80	; 0x50
 80157c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2b50      	cmp	r3, #80	; 0x50
 80157c6:	d009      	beq.n	80157dc <xQueueGenericCreateStatic+0xb4>
 80157c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157cc:	f383 8811 	msr	BASEPRI, r3
 80157d0:	f3bf 8f6f 	isb	sy
 80157d4:	f3bf 8f4f 	dsb	sy
 80157d8:	61bb      	str	r3, [r7, #24]
 80157da:	e7fe      	b.n	80157da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80157dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80157e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d00d      	beq.n	8015804 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80157e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ea:	2201      	movs	r2, #1
 80157ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80157f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80157f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f6:	9300      	str	r3, [sp, #0]
 80157f8:	4613      	mov	r3, r2
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	68b9      	ldr	r1, [r7, #8]
 80157fe:	68f8      	ldr	r0, [r7, #12]
 8015800:	f000 f844 	bl	801588c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015806:	4618      	mov	r0, r3
 8015808:	3730      	adds	r7, #48	; 0x30
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}

0801580e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801580e:	b580      	push	{r7, lr}
 8015810:	b08a      	sub	sp, #40	; 0x28
 8015812:	af02      	add	r7, sp, #8
 8015814:	60f8      	str	r0, [r7, #12]
 8015816:	60b9      	str	r1, [r7, #8]
 8015818:	4613      	mov	r3, r2
 801581a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d109      	bne.n	8015836 <xQueueGenericCreate+0x28>
 8015822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015826:	f383 8811 	msr	BASEPRI, r3
 801582a:	f3bf 8f6f 	isb	sy
 801582e:	f3bf 8f4f 	dsb	sy
 8015832:	613b      	str	r3, [r7, #16]
 8015834:	e7fe      	b.n	8015834 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d102      	bne.n	8015842 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801583c:	2300      	movs	r3, #0
 801583e:	61fb      	str	r3, [r7, #28]
 8015840:	e004      	b.n	801584c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	68ba      	ldr	r2, [r7, #8]
 8015846:	fb02 f303 	mul.w	r3, r2, r3
 801584a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	3350      	adds	r3, #80	; 0x50
 8015850:	4618      	mov	r0, r3
 8015852:	f003 f87d 	bl	8018950 <pvPortMalloc>
 8015856:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015858:	69bb      	ldr	r3, [r7, #24]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d011      	beq.n	8015882 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801585e:	69bb      	ldr	r3, [r7, #24]
 8015860:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	3350      	adds	r3, #80	; 0x50
 8015866:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015868:	69bb      	ldr	r3, [r7, #24]
 801586a:	2200      	movs	r2, #0
 801586c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015870:	79fa      	ldrb	r2, [r7, #7]
 8015872:	69bb      	ldr	r3, [r7, #24]
 8015874:	9300      	str	r3, [sp, #0]
 8015876:	4613      	mov	r3, r2
 8015878:	697a      	ldr	r2, [r7, #20]
 801587a:	68b9      	ldr	r1, [r7, #8]
 801587c:	68f8      	ldr	r0, [r7, #12]
 801587e:	f000 f805 	bl	801588c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015882:	69bb      	ldr	r3, [r7, #24]
	}
 8015884:	4618      	mov	r0, r3
 8015886:	3720      	adds	r7, #32
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}

0801588c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b084      	sub	sp, #16
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
 8015898:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d103      	bne.n	80158a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80158a0:	69bb      	ldr	r3, [r7, #24]
 80158a2:	69ba      	ldr	r2, [r7, #24]
 80158a4:	601a      	str	r2, [r3, #0]
 80158a6:	e002      	b.n	80158ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80158ae:	69bb      	ldr	r3, [r7, #24]
 80158b0:	68fa      	ldr	r2, [r7, #12]
 80158b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80158b4:	69bb      	ldr	r3, [r7, #24]
 80158b6:	68ba      	ldr	r2, [r7, #8]
 80158b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80158ba:	2101      	movs	r1, #1
 80158bc:	69b8      	ldr	r0, [r7, #24]
 80158be:	f7ff fecb 	bl	8015658 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	78fa      	ldrb	r2, [r7, #3]
 80158c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80158ca:	bf00      	nop
 80158cc:	3710      	adds	r7, #16
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}

080158d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80158d2:	b580      	push	{r7, lr}
 80158d4:	b082      	sub	sp, #8
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d00e      	beq.n	80158fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2200      	movs	r2, #0
 80158e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2200      	movs	r2, #0
 80158ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2200      	movs	r2, #0
 80158f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80158f2:	2300      	movs	r3, #0
 80158f4:	2200      	movs	r2, #0
 80158f6:	2100      	movs	r1, #0
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f000 f905 	bl	8015b08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80158fe:	bf00      	nop
 8015900:	3708      	adds	r7, #8
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}

08015906 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015906:	b580      	push	{r7, lr}
 8015908:	b086      	sub	sp, #24
 801590a:	af00      	add	r7, sp, #0
 801590c:	4603      	mov	r3, r0
 801590e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015910:	2301      	movs	r3, #1
 8015912:	617b      	str	r3, [r7, #20]
 8015914:	2300      	movs	r3, #0
 8015916:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015918:	79fb      	ldrb	r3, [r7, #7]
 801591a:	461a      	mov	r2, r3
 801591c:	6939      	ldr	r1, [r7, #16]
 801591e:	6978      	ldr	r0, [r7, #20]
 8015920:	f7ff ff75 	bl	801580e <xQueueGenericCreate>
 8015924:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f7ff ffd3 	bl	80158d2 <prvInitialiseMutex>

		return xNewQueue;
 801592c:	68fb      	ldr	r3, [r7, #12]
	}
 801592e:	4618      	mov	r0, r3
 8015930:	3718      	adds	r7, #24
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}

08015936 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015936:	b580      	push	{r7, lr}
 8015938:	b088      	sub	sp, #32
 801593a:	af02      	add	r7, sp, #8
 801593c:	4603      	mov	r3, r0
 801593e:	6039      	str	r1, [r7, #0]
 8015940:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015942:	2301      	movs	r3, #1
 8015944:	617b      	str	r3, [r7, #20]
 8015946:	2300      	movs	r3, #0
 8015948:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801594a:	79fb      	ldrb	r3, [r7, #7]
 801594c:	9300      	str	r3, [sp, #0]
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	2200      	movs	r2, #0
 8015952:	6939      	ldr	r1, [r7, #16]
 8015954:	6978      	ldr	r0, [r7, #20]
 8015956:	f7ff fee7 	bl	8015728 <xQueueGenericCreateStatic>
 801595a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f7ff ffb8 	bl	80158d2 <prvInitialiseMutex>

		return xNewQueue;
 8015962:	68fb      	ldr	r3, [r7, #12]
	}
 8015964:	4618      	mov	r0, r3
 8015966:	3718      	adds	r7, #24
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801596c:	b590      	push	{r4, r7, lr}
 801596e:	b087      	sub	sp, #28
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d109      	bne.n	8015992 <xQueueGiveMutexRecursive+0x26>
 801597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015982:	f383 8811 	msr	BASEPRI, r3
 8015986:	f3bf 8f6f 	isb	sy
 801598a:	f3bf 8f4f 	dsb	sy
 801598e:	60fb      	str	r3, [r7, #12]
 8015990:	e7fe      	b.n	8015990 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	689c      	ldr	r4, [r3, #8]
 8015996:	f001 fda5 	bl	80174e4 <xTaskGetCurrentTaskHandle>
 801599a:	4603      	mov	r3, r0
 801599c:	429c      	cmp	r4, r3
 801599e:	d111      	bne.n	80159c4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	68db      	ldr	r3, [r3, #12]
 80159a4:	1e5a      	subs	r2, r3, #1
 80159a6:	693b      	ldr	r3, [r7, #16]
 80159a8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	68db      	ldr	r3, [r3, #12]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d105      	bne.n	80159be <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80159b2:	2300      	movs	r3, #0
 80159b4:	2200      	movs	r2, #0
 80159b6:	2100      	movs	r1, #0
 80159b8:	6938      	ldr	r0, [r7, #16]
 80159ba:	f000 f8a5 	bl	8015b08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80159be:	2301      	movs	r3, #1
 80159c0:	617b      	str	r3, [r7, #20]
 80159c2:	e001      	b.n	80159c8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80159c4:	2300      	movs	r3, #0
 80159c6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80159c8:	697b      	ldr	r3, [r7, #20]
	}
 80159ca:	4618      	mov	r0, r3
 80159cc:	371c      	adds	r7, #28
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd90      	pop	{r4, r7, pc}

080159d2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80159d2:	b590      	push	{r4, r7, lr}
 80159d4:	b087      	sub	sp, #28
 80159d6:	af00      	add	r7, sp, #0
 80159d8:	6078      	str	r0, [r7, #4]
 80159da:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d109      	bne.n	80159fa <xQueueTakeMutexRecursive+0x28>
 80159e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ea:	f383 8811 	msr	BASEPRI, r3
 80159ee:	f3bf 8f6f 	isb	sy
 80159f2:	f3bf 8f4f 	dsb	sy
 80159f6:	60fb      	str	r3, [r7, #12]
 80159f8:	e7fe      	b.n	80159f8 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	689c      	ldr	r4, [r3, #8]
 80159fe:	f001 fd71 	bl	80174e4 <xTaskGetCurrentTaskHandle>
 8015a02:	4603      	mov	r3, r0
 8015a04:	429c      	cmp	r4, r3
 8015a06:	d107      	bne.n	8015a18 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	68db      	ldr	r3, [r3, #12]
 8015a0c:	1c5a      	adds	r2, r3, #1
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015a12:	2301      	movs	r3, #1
 8015a14:	617b      	str	r3, [r7, #20]
 8015a16:	e00c      	b.n	8015a32 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	6938      	ldr	r0, [r7, #16]
 8015a1c:	f000 fb68 	bl	80160f0 <xQueueSemaphoreTake>
 8015a20:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d004      	beq.n	8015a32 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	1c5a      	adds	r2, r3, #1
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8015a32:	697b      	ldr	r3, [r7, #20]
	}
 8015a34:	4618      	mov	r0, r3
 8015a36:	371c      	adds	r7, #28
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd90      	pop	{r4, r7, pc}

08015a3c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b08a      	sub	sp, #40	; 0x28
 8015a40:	af02      	add	r7, sp, #8
 8015a42:	60f8      	str	r0, [r7, #12]
 8015a44:	60b9      	str	r1, [r7, #8]
 8015a46:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d109      	bne.n	8015a62 <xQueueCreateCountingSemaphoreStatic+0x26>
 8015a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a52:	f383 8811 	msr	BASEPRI, r3
 8015a56:	f3bf 8f6f 	isb	sy
 8015a5a:	f3bf 8f4f 	dsb	sy
 8015a5e:	61bb      	str	r3, [r7, #24]
 8015a60:	e7fe      	b.n	8015a60 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015a62:	68ba      	ldr	r2, [r7, #8]
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d909      	bls.n	8015a7e <xQueueCreateCountingSemaphoreStatic+0x42>
 8015a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a6e:	f383 8811 	msr	BASEPRI, r3
 8015a72:	f3bf 8f6f 	isb	sy
 8015a76:	f3bf 8f4f 	dsb	sy
 8015a7a:	617b      	str	r3, [r7, #20]
 8015a7c:	e7fe      	b.n	8015a7c <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015a7e:	2302      	movs	r3, #2
 8015a80:	9300      	str	r3, [sp, #0]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2200      	movs	r2, #0
 8015a86:	2100      	movs	r1, #0
 8015a88:	68f8      	ldr	r0, [r7, #12]
 8015a8a:	f7ff fe4d 	bl	8015728 <xQueueGenericCreateStatic>
 8015a8e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015a90:	69fb      	ldr	r3, [r7, #28]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d002      	beq.n	8015a9c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015a9c:	69fb      	ldr	r3, [r7, #28]
	}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3720      	adds	r7, #32
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}

08015aa6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015aa6:	b580      	push	{r7, lr}
 8015aa8:	b086      	sub	sp, #24
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	6078      	str	r0, [r7, #4]
 8015aae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d109      	bne.n	8015aca <xQueueCreateCountingSemaphore+0x24>
 8015ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aba:	f383 8811 	msr	BASEPRI, r3
 8015abe:	f3bf 8f6f 	isb	sy
 8015ac2:	f3bf 8f4f 	dsb	sy
 8015ac6:	613b      	str	r3, [r7, #16]
 8015ac8:	e7fe      	b.n	8015ac8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015aca:	683a      	ldr	r2, [r7, #0]
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d909      	bls.n	8015ae6 <xQueueCreateCountingSemaphore+0x40>
 8015ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad6:	f383 8811 	msr	BASEPRI, r3
 8015ada:	f3bf 8f6f 	isb	sy
 8015ade:	f3bf 8f4f 	dsb	sy
 8015ae2:	60fb      	str	r3, [r7, #12]
 8015ae4:	e7fe      	b.n	8015ae4 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015ae6:	2202      	movs	r2, #2
 8015ae8:	2100      	movs	r1, #0
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f7ff fe8f 	bl	801580e <xQueueGenericCreate>
 8015af0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015af2:	697b      	ldr	r3, [r7, #20]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d002      	beq.n	8015afe <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	683a      	ldr	r2, [r7, #0]
 8015afc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015afe:	697b      	ldr	r3, [r7, #20]
	}
 8015b00:	4618      	mov	r0, r3
 8015b02:	3718      	adds	r7, #24
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b08e      	sub	sp, #56	; 0x38
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	60f8      	str	r0, [r7, #12]
 8015b10:	60b9      	str	r1, [r7, #8]
 8015b12:	607a      	str	r2, [r7, #4]
 8015b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015b16:	2300      	movs	r3, #0
 8015b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d109      	bne.n	8015b38 <xQueueGenericSend+0x30>
 8015b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b36:	e7fe      	b.n	8015b36 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d103      	bne.n	8015b46 <xQueueGenericSend+0x3e>
 8015b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d101      	bne.n	8015b4a <xQueueGenericSend+0x42>
 8015b46:	2301      	movs	r3, #1
 8015b48:	e000      	b.n	8015b4c <xQueueGenericSend+0x44>
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d109      	bne.n	8015b64 <xQueueGenericSend+0x5c>
 8015b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b54:	f383 8811 	msr	BASEPRI, r3
 8015b58:	f3bf 8f6f 	isb	sy
 8015b5c:	f3bf 8f4f 	dsb	sy
 8015b60:	627b      	str	r3, [r7, #36]	; 0x24
 8015b62:	e7fe      	b.n	8015b62 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b02      	cmp	r3, #2
 8015b68:	d103      	bne.n	8015b72 <xQueueGenericSend+0x6a>
 8015b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d101      	bne.n	8015b76 <xQueueGenericSend+0x6e>
 8015b72:	2301      	movs	r3, #1
 8015b74:	e000      	b.n	8015b78 <xQueueGenericSend+0x70>
 8015b76:	2300      	movs	r3, #0
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d109      	bne.n	8015b90 <xQueueGenericSend+0x88>
 8015b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b80:	f383 8811 	msr	BASEPRI, r3
 8015b84:	f3bf 8f6f 	isb	sy
 8015b88:	f3bf 8f4f 	dsb	sy
 8015b8c:	623b      	str	r3, [r7, #32]
 8015b8e:	e7fe      	b.n	8015b8e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b90:	f001 fcb8 	bl	8017504 <xTaskGetSchedulerState>
 8015b94:	4603      	mov	r3, r0
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d102      	bne.n	8015ba0 <xQueueGenericSend+0x98>
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d101      	bne.n	8015ba4 <xQueueGenericSend+0x9c>
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	e000      	b.n	8015ba6 <xQueueGenericSend+0x9e>
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d109      	bne.n	8015bbe <xQueueGenericSend+0xb6>
 8015baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bae:	f383 8811 	msr	BASEPRI, r3
 8015bb2:	f3bf 8f6f 	isb	sy
 8015bb6:	f3bf 8f4f 	dsb	sy
 8015bba:	61fb      	str	r3, [r7, #28]
 8015bbc:	e7fe      	b.n	8015bbc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015bbe:	f002 fdad 	bl	801871c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d302      	bcc.n	8015bd4 <xQueueGenericSend+0xcc>
 8015bce:	683b      	ldr	r3, [r7, #0]
 8015bd0:	2b02      	cmp	r3, #2
 8015bd2:	d129      	bne.n	8015c28 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015bd4:	683a      	ldr	r2, [r7, #0]
 8015bd6:	68b9      	ldr	r1, [r7, #8]
 8015bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bda:	f000 fc48 	bl	801646e <prvCopyDataToQueue>
 8015bde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d010      	beq.n	8015c0a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bea:	3324      	adds	r3, #36	; 0x24
 8015bec:	4618      	mov	r0, r3
 8015bee:	f001 fa9b 	bl	8017128 <xTaskRemoveFromEventList>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d013      	beq.n	8015c20 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015bf8:	4b3f      	ldr	r3, [pc, #252]	; (8015cf8 <xQueueGenericSend+0x1f0>)
 8015bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bfe:	601a      	str	r2, [r3, #0]
 8015c00:	f3bf 8f4f 	dsb	sy
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	e00a      	b.n	8015c20 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d007      	beq.n	8015c20 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015c10:	4b39      	ldr	r3, [pc, #228]	; (8015cf8 <xQueueGenericSend+0x1f0>)
 8015c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c16:	601a      	str	r2, [r3, #0]
 8015c18:	f3bf 8f4f 	dsb	sy
 8015c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015c20:	f002 fdaa 	bl	8018778 <vPortExitCritical>
				return pdPASS;
 8015c24:	2301      	movs	r3, #1
 8015c26:	e063      	b.n	8015cf0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d103      	bne.n	8015c36 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015c2e:	f002 fda3 	bl	8018778 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015c32:	2300      	movs	r3, #0
 8015c34:	e05c      	b.n	8015cf0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d106      	bne.n	8015c4a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015c3c:	f107 0314 	add.w	r3, r7, #20
 8015c40:	4618      	mov	r0, r3
 8015c42:	f001 fad5 	bl	80171f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c46:	2301      	movs	r3, #1
 8015c48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015c4a:	f002 fd95 	bl	8018778 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015c4e:	f000 ffe3 	bl	8016c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015c52:	f002 fd63 	bl	801871c <vPortEnterCritical>
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c5c:	b25b      	sxtb	r3, r3
 8015c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c62:	d103      	bne.n	8015c6c <xQueueGenericSend+0x164>
 8015c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c66:	2200      	movs	r2, #0
 8015c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c72:	b25b      	sxtb	r3, r3
 8015c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c78:	d103      	bne.n	8015c82 <xQueueGenericSend+0x17a>
 8015c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c82:	f002 fd79 	bl	8018778 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c86:	1d3a      	adds	r2, r7, #4
 8015c88:	f107 0314 	add.w	r3, r7, #20
 8015c8c:	4611      	mov	r1, r2
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f001 fac4 	bl	801721c <xTaskCheckForTimeOut>
 8015c94:	4603      	mov	r3, r0
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d124      	bne.n	8015ce4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c9c:	f000 fcdf 	bl	801665e <prvIsQueueFull>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d018      	beq.n	8015cd8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca8:	3310      	adds	r3, #16
 8015caa:	687a      	ldr	r2, [r7, #4]
 8015cac:	4611      	mov	r1, r2
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f001 f9ec 	bl	801708c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cb6:	f000 fc6a 	bl	801658e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015cba:	f000 fff3 	bl	8016ca4 <xTaskResumeAll>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	f47f af7c 	bne.w	8015bbe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8015cc6:	4b0c      	ldr	r3, [pc, #48]	; (8015cf8 <xQueueGenericSend+0x1f0>)
 8015cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ccc:	601a      	str	r2, [r3, #0]
 8015cce:	f3bf 8f4f 	dsb	sy
 8015cd2:	f3bf 8f6f 	isb	sy
 8015cd6:	e772      	b.n	8015bbe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cda:	f000 fc58 	bl	801658e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015cde:	f000 ffe1 	bl	8016ca4 <xTaskResumeAll>
 8015ce2:	e76c      	b.n	8015bbe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce6:	f000 fc52 	bl	801658e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015cea:	f000 ffdb 	bl	8016ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015cee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3738      	adds	r7, #56	; 0x38
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	e000ed04 	.word	0xe000ed04

08015cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b08e      	sub	sp, #56	; 0x38
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	607a      	str	r2, [r7, #4]
 8015d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d109      	bne.n	8015d28 <xQueueGenericSendFromISR+0x2c>
 8015d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d18:	f383 8811 	msr	BASEPRI, r3
 8015d1c:	f3bf 8f6f 	isb	sy
 8015d20:	f3bf 8f4f 	dsb	sy
 8015d24:	627b      	str	r3, [r7, #36]	; 0x24
 8015d26:	e7fe      	b.n	8015d26 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d28:	68bb      	ldr	r3, [r7, #8]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d103      	bne.n	8015d36 <xQueueGenericSendFromISR+0x3a>
 8015d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d101      	bne.n	8015d3a <xQueueGenericSendFromISR+0x3e>
 8015d36:	2301      	movs	r3, #1
 8015d38:	e000      	b.n	8015d3c <xQueueGenericSendFromISR+0x40>
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d109      	bne.n	8015d54 <xQueueGenericSendFromISR+0x58>
 8015d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d44:	f383 8811 	msr	BASEPRI, r3
 8015d48:	f3bf 8f6f 	isb	sy
 8015d4c:	f3bf 8f4f 	dsb	sy
 8015d50:	623b      	str	r3, [r7, #32]
 8015d52:	e7fe      	b.n	8015d52 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	2b02      	cmp	r3, #2
 8015d58:	d103      	bne.n	8015d62 <xQueueGenericSendFromISR+0x66>
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d5e:	2b01      	cmp	r3, #1
 8015d60:	d101      	bne.n	8015d66 <xQueueGenericSendFromISR+0x6a>
 8015d62:	2301      	movs	r3, #1
 8015d64:	e000      	b.n	8015d68 <xQueueGenericSendFromISR+0x6c>
 8015d66:	2300      	movs	r3, #0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d109      	bne.n	8015d80 <xQueueGenericSendFromISR+0x84>
 8015d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d70:	f383 8811 	msr	BASEPRI, r3
 8015d74:	f3bf 8f6f 	isb	sy
 8015d78:	f3bf 8f4f 	dsb	sy
 8015d7c:	61fb      	str	r3, [r7, #28]
 8015d7e:	e7fe      	b.n	8015d7e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d80:	f002 fda8 	bl	80188d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015d84:	f3ef 8211 	mrs	r2, BASEPRI
 8015d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d8c:	f383 8811 	msr	BASEPRI, r3
 8015d90:	f3bf 8f6f 	isb	sy
 8015d94:	f3bf 8f4f 	dsb	sy
 8015d98:	61ba      	str	r2, [r7, #24]
 8015d9a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015d9c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d302      	bcc.n	8015db2 <xQueueGenericSendFromISR+0xb6>
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	2b02      	cmp	r3, #2
 8015db0:	d12c      	bne.n	8015e0c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015dbc:	683a      	ldr	r2, [r7, #0]
 8015dbe:	68b9      	ldr	r1, [r7, #8]
 8015dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dc2:	f000 fb54 	bl	801646e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015dc6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dce:	d112      	bne.n	8015df6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d016      	beq.n	8015e06 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dda:	3324      	adds	r3, #36	; 0x24
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f001 f9a3 	bl	8017128 <xTaskRemoveFromEventList>
 8015de2:	4603      	mov	r3, r0
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00e      	beq.n	8015e06 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d00b      	beq.n	8015e06 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	2201      	movs	r2, #1
 8015df2:	601a      	str	r2, [r3, #0]
 8015df4:	e007      	b.n	8015e06 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015df6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015dfa:	3301      	adds	r3, #1
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	b25a      	sxtb	r2, r3
 8015e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015e06:	2301      	movs	r3, #1
 8015e08:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015e0a:	e001      	b.n	8015e10 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8015e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3738      	adds	r7, #56	; 0x38
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b08e      	sub	sp, #56	; 0x38
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d109      	bne.n	8015e4c <xQueueGiveFromISR+0x28>
	__asm volatile
 8015e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e3c:	f383 8811 	msr	BASEPRI, r3
 8015e40:	f3bf 8f6f 	isb	sy
 8015e44:	f3bf 8f4f 	dsb	sy
 8015e48:	623b      	str	r3, [r7, #32]
 8015e4a:	e7fe      	b.n	8015e4a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d009      	beq.n	8015e68 <xQueueGiveFromISR+0x44>
 8015e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e58:	f383 8811 	msr	BASEPRI, r3
 8015e5c:	f3bf 8f6f 	isb	sy
 8015e60:	f3bf 8f4f 	dsb	sy
 8015e64:	61fb      	str	r3, [r7, #28]
 8015e66:	e7fe      	b.n	8015e66 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d103      	bne.n	8015e78 <xQueueGiveFromISR+0x54>
 8015e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e72:	689b      	ldr	r3, [r3, #8]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d101      	bne.n	8015e7c <xQueueGiveFromISR+0x58>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e000      	b.n	8015e7e <xQueueGiveFromISR+0x5a>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d109      	bne.n	8015e96 <xQueueGiveFromISR+0x72>
 8015e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e86:	f383 8811 	msr	BASEPRI, r3
 8015e8a:	f3bf 8f6f 	isb	sy
 8015e8e:	f3bf 8f4f 	dsb	sy
 8015e92:	61bb      	str	r3, [r7, #24]
 8015e94:	e7fe      	b.n	8015e94 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e96:	f002 fd1d 	bl	80188d4 <vPortValidateInterruptPriority>
	__asm volatile
 8015e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8015e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ea2:	f383 8811 	msr	BASEPRI, r3
 8015ea6:	f3bf 8f6f 	isb	sy
 8015eaa:	f3bf 8f4f 	dsb	sy
 8015eae:	617a      	str	r2, [r7, #20]
 8015eb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015eb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d22b      	bcs.n	8015f1e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed2:	1c5a      	adds	r2, r3, #1
 8015ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ee0:	d112      	bne.n	8015f08 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d016      	beq.n	8015f18 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eec:	3324      	adds	r3, #36	; 0x24
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f001 f91a 	bl	8017128 <xTaskRemoveFromEventList>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d00e      	beq.n	8015f18 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d00b      	beq.n	8015f18 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	2201      	movs	r2, #1
 8015f04:	601a      	str	r2, [r3, #0]
 8015f06:	e007      	b.n	8015f18 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f0c:	3301      	adds	r3, #1
 8015f0e:	b2db      	uxtb	r3, r3
 8015f10:	b25a      	sxtb	r2, r3
 8015f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015f18:	2301      	movs	r3, #1
 8015f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8015f1c:	e001      	b.n	8015f22 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	637b      	str	r3, [r7, #52]	; 0x34
 8015f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3738      	adds	r7, #56	; 0x38
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}
	...

08015f38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b08c      	sub	sp, #48	; 0x30
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	60f8      	str	r0, [r7, #12]
 8015f40:	60b9      	str	r1, [r7, #8]
 8015f42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015f44:	2300      	movs	r3, #0
 8015f46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d109      	bne.n	8015f66 <xQueueReceive+0x2e>
	__asm volatile
 8015f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f56:	f383 8811 	msr	BASEPRI, r3
 8015f5a:	f3bf 8f6f 	isb	sy
 8015f5e:	f3bf 8f4f 	dsb	sy
 8015f62:	623b      	str	r3, [r7, #32]
 8015f64:	e7fe      	b.n	8015f64 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d103      	bne.n	8015f74 <xQueueReceive+0x3c>
 8015f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d101      	bne.n	8015f78 <xQueueReceive+0x40>
 8015f74:	2301      	movs	r3, #1
 8015f76:	e000      	b.n	8015f7a <xQueueReceive+0x42>
 8015f78:	2300      	movs	r3, #0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d109      	bne.n	8015f92 <xQueueReceive+0x5a>
 8015f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f82:	f383 8811 	msr	BASEPRI, r3
 8015f86:	f3bf 8f6f 	isb	sy
 8015f8a:	f3bf 8f4f 	dsb	sy
 8015f8e:	61fb      	str	r3, [r7, #28]
 8015f90:	e7fe      	b.n	8015f90 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f92:	f001 fab7 	bl	8017504 <xTaskGetSchedulerState>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d102      	bne.n	8015fa2 <xQueueReceive+0x6a>
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d101      	bne.n	8015fa6 <xQueueReceive+0x6e>
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	e000      	b.n	8015fa8 <xQueueReceive+0x70>
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d109      	bne.n	8015fc0 <xQueueReceive+0x88>
 8015fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb0:	f383 8811 	msr	BASEPRI, r3
 8015fb4:	f3bf 8f6f 	isb	sy
 8015fb8:	f3bf 8f4f 	dsb	sy
 8015fbc:	61bb      	str	r3, [r7, #24]
 8015fbe:	e7fe      	b.n	8015fbe <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015fc0:	f002 fbac 	bl	801871c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fc8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d01f      	beq.n	8016010 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015fd0:	68b9      	ldr	r1, [r7, #8]
 8015fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fd4:	f000 fab5 	bl	8016542 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fda:	1e5a      	subs	r2, r3, #1
 8015fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fde:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe2:	691b      	ldr	r3, [r3, #16]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d00f      	beq.n	8016008 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fea:	3310      	adds	r3, #16
 8015fec:	4618      	mov	r0, r3
 8015fee:	f001 f89b 	bl	8017128 <xTaskRemoveFromEventList>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d007      	beq.n	8016008 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015ff8:	4b3c      	ldr	r3, [pc, #240]	; (80160ec <xQueueReceive+0x1b4>)
 8015ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ffe:	601a      	str	r2, [r3, #0]
 8016000:	f3bf 8f4f 	dsb	sy
 8016004:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016008:	f002 fbb6 	bl	8018778 <vPortExitCritical>
				return pdPASS;
 801600c:	2301      	movs	r3, #1
 801600e:	e069      	b.n	80160e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d103      	bne.n	801601e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016016:	f002 fbaf 	bl	8018778 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801601a:	2300      	movs	r3, #0
 801601c:	e062      	b.n	80160e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016020:	2b00      	cmp	r3, #0
 8016022:	d106      	bne.n	8016032 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016024:	f107 0310 	add.w	r3, r7, #16
 8016028:	4618      	mov	r0, r3
 801602a:	f001 f8e1 	bl	80171f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801602e:	2301      	movs	r3, #1
 8016030:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016032:	f002 fba1 	bl	8018778 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016036:	f000 fdef 	bl	8016c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801603a:	f002 fb6f 	bl	801871c <vPortEnterCritical>
 801603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016044:	b25b      	sxtb	r3, r3
 8016046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801604a:	d103      	bne.n	8016054 <xQueueReceive+0x11c>
 801604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604e:	2200      	movs	r2, #0
 8016050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801605a:	b25b      	sxtb	r3, r3
 801605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016060:	d103      	bne.n	801606a <xQueueReceive+0x132>
 8016062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016064:	2200      	movs	r2, #0
 8016066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801606a:	f002 fb85 	bl	8018778 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801606e:	1d3a      	adds	r2, r7, #4
 8016070:	f107 0310 	add.w	r3, r7, #16
 8016074:	4611      	mov	r1, r2
 8016076:	4618      	mov	r0, r3
 8016078:	f001 f8d0 	bl	801721c <xTaskCheckForTimeOut>
 801607c:	4603      	mov	r3, r0
 801607e:	2b00      	cmp	r3, #0
 8016080:	d123      	bne.n	80160ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016084:	f000 fad5 	bl	8016632 <prvIsQueueEmpty>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	d017      	beq.n	80160be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016090:	3324      	adds	r3, #36	; 0x24
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	4611      	mov	r1, r2
 8016096:	4618      	mov	r0, r3
 8016098:	f000 fff8 	bl	801708c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801609c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801609e:	f000 fa76 	bl	801658e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80160a2:	f000 fdff 	bl	8016ca4 <xTaskResumeAll>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d189      	bne.n	8015fc0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80160ac:	4b0f      	ldr	r3, [pc, #60]	; (80160ec <xQueueReceive+0x1b4>)
 80160ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160b2:	601a      	str	r2, [r3, #0]
 80160b4:	f3bf 8f4f 	dsb	sy
 80160b8:	f3bf 8f6f 	isb	sy
 80160bc:	e780      	b.n	8015fc0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80160be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160c0:	f000 fa65 	bl	801658e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80160c4:	f000 fdee 	bl	8016ca4 <xTaskResumeAll>
 80160c8:	e77a      	b.n	8015fc0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80160ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160cc:	f000 fa5f 	bl	801658e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80160d0:	f000 fde8 	bl	8016ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160d6:	f000 faac 	bl	8016632 <prvIsQueueEmpty>
 80160da:	4603      	mov	r3, r0
 80160dc:	2b00      	cmp	r3, #0
 80160de:	f43f af6f 	beq.w	8015fc0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80160e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80160e4:	4618      	mov	r0, r3
 80160e6:	3730      	adds	r7, #48	; 0x30
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	e000ed04 	.word	0xe000ed04

080160f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b08e      	sub	sp, #56	; 0x38
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80160fa:	2300      	movs	r3, #0
 80160fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016102:	2300      	movs	r3, #0
 8016104:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016108:	2b00      	cmp	r3, #0
 801610a:	d109      	bne.n	8016120 <xQueueSemaphoreTake+0x30>
 801610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016110:	f383 8811 	msr	BASEPRI, r3
 8016114:	f3bf 8f6f 	isb	sy
 8016118:	f3bf 8f4f 	dsb	sy
 801611c:	623b      	str	r3, [r7, #32]
 801611e:	e7fe      	b.n	801611e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016124:	2b00      	cmp	r3, #0
 8016126:	d009      	beq.n	801613c <xQueueSemaphoreTake+0x4c>
 8016128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801612c:	f383 8811 	msr	BASEPRI, r3
 8016130:	f3bf 8f6f 	isb	sy
 8016134:	f3bf 8f4f 	dsb	sy
 8016138:	61fb      	str	r3, [r7, #28]
 801613a:	e7fe      	b.n	801613a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801613c:	f001 f9e2 	bl	8017504 <xTaskGetSchedulerState>
 8016140:	4603      	mov	r3, r0
 8016142:	2b00      	cmp	r3, #0
 8016144:	d102      	bne.n	801614c <xQueueSemaphoreTake+0x5c>
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d101      	bne.n	8016150 <xQueueSemaphoreTake+0x60>
 801614c:	2301      	movs	r3, #1
 801614e:	e000      	b.n	8016152 <xQueueSemaphoreTake+0x62>
 8016150:	2300      	movs	r3, #0
 8016152:	2b00      	cmp	r3, #0
 8016154:	d109      	bne.n	801616a <xQueueSemaphoreTake+0x7a>
 8016156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801615a:	f383 8811 	msr	BASEPRI, r3
 801615e:	f3bf 8f6f 	isb	sy
 8016162:	f3bf 8f4f 	dsb	sy
 8016166:	61bb      	str	r3, [r7, #24]
 8016168:	e7fe      	b.n	8016168 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801616a:	f002 fad7 	bl	801871c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016172:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016176:	2b00      	cmp	r3, #0
 8016178:	d024      	beq.n	80161c4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801617c:	1e5a      	subs	r2, r3, #1
 801617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016180:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d104      	bne.n	8016194 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801618a:	f001 fb2d 	bl	80177e8 <pvTaskIncrementMutexHeldCount>
 801618e:	4602      	mov	r2, r0
 8016190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016192:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016196:	691b      	ldr	r3, [r3, #16]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d00f      	beq.n	80161bc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619e:	3310      	adds	r3, #16
 80161a0:	4618      	mov	r0, r3
 80161a2:	f000 ffc1 	bl	8017128 <xTaskRemoveFromEventList>
 80161a6:	4603      	mov	r3, r0
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d007      	beq.n	80161bc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80161ac:	4b53      	ldr	r3, [pc, #332]	; (80162fc <xQueueSemaphoreTake+0x20c>)
 80161ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161b2:	601a      	str	r2, [r3, #0]
 80161b4:	f3bf 8f4f 	dsb	sy
 80161b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80161bc:	f002 fadc 	bl	8018778 <vPortExitCritical>
				return pdPASS;
 80161c0:	2301      	movs	r3, #1
 80161c2:	e096      	b.n	80162f2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d110      	bne.n	80161ec <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80161ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d009      	beq.n	80161e4 <xQueueSemaphoreTake+0xf4>
 80161d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d4:	f383 8811 	msr	BASEPRI, r3
 80161d8:	f3bf 8f6f 	isb	sy
 80161dc:	f3bf 8f4f 	dsb	sy
 80161e0:	617b      	str	r3, [r7, #20]
 80161e2:	e7fe      	b.n	80161e2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80161e4:	f002 fac8 	bl	8018778 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80161e8:	2300      	movs	r3, #0
 80161ea:	e082      	b.n	80162f2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80161ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d106      	bne.n	8016200 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80161f2:	f107 030c 	add.w	r3, r7, #12
 80161f6:	4618      	mov	r0, r3
 80161f8:	f000 fffa 	bl	80171f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80161fc:	2301      	movs	r3, #1
 80161fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016200:	f002 faba 	bl	8018778 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016204:	f000 fd08 	bl	8016c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016208:	f002 fa88 	bl	801871c <vPortEnterCritical>
 801620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016212:	b25b      	sxtb	r3, r3
 8016214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016218:	d103      	bne.n	8016222 <xQueueSemaphoreTake+0x132>
 801621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621c:	2200      	movs	r2, #0
 801621e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016228:	b25b      	sxtb	r3, r3
 801622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801622e:	d103      	bne.n	8016238 <xQueueSemaphoreTake+0x148>
 8016230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016232:	2200      	movs	r2, #0
 8016234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016238:	f002 fa9e 	bl	8018778 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801623c:	463a      	mov	r2, r7
 801623e:	f107 030c 	add.w	r3, r7, #12
 8016242:	4611      	mov	r1, r2
 8016244:	4618      	mov	r0, r3
 8016246:	f000 ffe9 	bl	801721c <xTaskCheckForTimeOut>
 801624a:	4603      	mov	r3, r0
 801624c:	2b00      	cmp	r3, #0
 801624e:	d132      	bne.n	80162b6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016252:	f000 f9ee 	bl	8016632 <prvIsQueueEmpty>
 8016256:	4603      	mov	r3, r0
 8016258:	2b00      	cmp	r3, #0
 801625a:	d026      	beq.n	80162aa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d109      	bne.n	8016278 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8016264:	f002 fa5a 	bl	801871c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626a:	689b      	ldr	r3, [r3, #8]
 801626c:	4618      	mov	r0, r3
 801626e:	f001 f967 	bl	8017540 <xTaskPriorityInherit>
 8016272:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016274:	f002 fa80 	bl	8018778 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627a:	3324      	adds	r3, #36	; 0x24
 801627c:	683a      	ldr	r2, [r7, #0]
 801627e:	4611      	mov	r1, r2
 8016280:	4618      	mov	r0, r3
 8016282:	f000 ff03 	bl	801708c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016288:	f000 f981 	bl	801658e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801628c:	f000 fd0a 	bl	8016ca4 <xTaskResumeAll>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	f47f af69 	bne.w	801616a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8016298:	4b18      	ldr	r3, [pc, #96]	; (80162fc <xQueueSemaphoreTake+0x20c>)
 801629a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801629e:	601a      	str	r2, [r3, #0]
 80162a0:	f3bf 8f4f 	dsb	sy
 80162a4:	f3bf 8f6f 	isb	sy
 80162a8:	e75f      	b.n	801616a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80162aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162ac:	f000 f96f 	bl	801658e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80162b0:	f000 fcf8 	bl	8016ca4 <xTaskResumeAll>
 80162b4:	e759      	b.n	801616a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80162b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162b8:	f000 f969 	bl	801658e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80162bc:	f000 fcf2 	bl	8016ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80162c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162c2:	f000 f9b6 	bl	8016632 <prvIsQueueEmpty>
 80162c6:	4603      	mov	r3, r0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	f43f af4e 	beq.w	801616a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80162ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d00d      	beq.n	80162f0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80162d4:	f002 fa22 	bl	801871c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80162d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162da:	f000 f8b0 	bl	801643e <prvGetDisinheritPriorityAfterTimeout>
 80162de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80162e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e2:	689b      	ldr	r3, [r3, #8]
 80162e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162e6:	4618      	mov	r0, r3
 80162e8:	f001 f9fe 	bl	80176e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80162ec:	f002 fa44 	bl	8018778 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80162f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3738      	adds	r7, #56	; 0x38
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}
 80162fa:	bf00      	nop
 80162fc:	e000ed04 	.word	0xe000ed04

08016300 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b08e      	sub	sp, #56	; 0x38
 8016304:	af00      	add	r7, sp, #0
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016312:	2b00      	cmp	r3, #0
 8016314:	d109      	bne.n	801632a <xQueueReceiveFromISR+0x2a>
 8016316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801631a:	f383 8811 	msr	BASEPRI, r3
 801631e:	f3bf 8f6f 	isb	sy
 8016322:	f3bf 8f4f 	dsb	sy
 8016326:	623b      	str	r3, [r7, #32]
 8016328:	e7fe      	b.n	8016328 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d103      	bne.n	8016338 <xQueueReceiveFromISR+0x38>
 8016330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016334:	2b00      	cmp	r3, #0
 8016336:	d101      	bne.n	801633c <xQueueReceiveFromISR+0x3c>
 8016338:	2301      	movs	r3, #1
 801633a:	e000      	b.n	801633e <xQueueReceiveFromISR+0x3e>
 801633c:	2300      	movs	r3, #0
 801633e:	2b00      	cmp	r3, #0
 8016340:	d109      	bne.n	8016356 <xQueueReceiveFromISR+0x56>
 8016342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016346:	f383 8811 	msr	BASEPRI, r3
 801634a:	f3bf 8f6f 	isb	sy
 801634e:	f3bf 8f4f 	dsb	sy
 8016352:	61fb      	str	r3, [r7, #28]
 8016354:	e7fe      	b.n	8016354 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016356:	f002 fabd 	bl	80188d4 <vPortValidateInterruptPriority>
	__asm volatile
 801635a:	f3ef 8211 	mrs	r2, BASEPRI
 801635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016362:	f383 8811 	msr	BASEPRI, r3
 8016366:	f3bf 8f6f 	isb	sy
 801636a:	f3bf 8f4f 	dsb	sy
 801636e:	61ba      	str	r2, [r7, #24]
 8016370:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016372:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801637a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637e:	2b00      	cmp	r3, #0
 8016380:	d02f      	beq.n	80163e2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801638c:	68b9      	ldr	r1, [r7, #8]
 801638e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016390:	f000 f8d7 	bl	8016542 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016396:	1e5a      	subs	r2, r3, #1
 8016398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801639c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80163a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163a4:	d112      	bne.n	80163cc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a8:	691b      	ldr	r3, [r3, #16]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d016      	beq.n	80163dc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b0:	3310      	adds	r3, #16
 80163b2:	4618      	mov	r0, r3
 80163b4:	f000 feb8 	bl	8017128 <xTaskRemoveFromEventList>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00e      	beq.n	80163dc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d00b      	beq.n	80163dc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2201      	movs	r2, #1
 80163c8:	601a      	str	r2, [r3, #0]
 80163ca:	e007      	b.n	80163dc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80163cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163d0:	3301      	adds	r3, #1
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	b25a      	sxtb	r2, r3
 80163d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80163dc:	2301      	movs	r3, #1
 80163de:	637b      	str	r3, [r7, #52]	; 0x34
 80163e0:	e001      	b.n	80163e6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80163e2:	2300      	movs	r3, #0
 80163e4:	637b      	str	r3, [r7, #52]	; 0x34
 80163e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80163f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3738      	adds	r7, #56	; 0x38
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}

080163fa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80163fa:	b580      	push	{r7, lr}
 80163fc:	b084      	sub	sp, #16
 80163fe:	af00      	add	r7, sp, #0
 8016400:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d109      	bne.n	8016420 <vQueueDelete+0x26>
	__asm volatile
 801640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016410:	f383 8811 	msr	BASEPRI, r3
 8016414:	f3bf 8f6f 	isb	sy
 8016418:	f3bf 8f4f 	dsb	sy
 801641c:	60bb      	str	r3, [r7, #8]
 801641e:	e7fe      	b.n	801641e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016420:	68f8      	ldr	r0, [r7, #12]
 8016422:	f000 f95d 	bl	80166e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801642c:	2b00      	cmp	r3, #0
 801642e:	d102      	bne.n	8016436 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8016430:	68f8      	ldr	r0, [r7, #12]
 8016432:	f002 fb53 	bl	8018adc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016436:	bf00      	nop
 8016438:	3710      	adds	r7, #16
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}

0801643e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801643e:	b480      	push	{r7}
 8016440:	b085      	sub	sp, #20
 8016442:	af00      	add	r7, sp, #0
 8016444:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801644a:	2b00      	cmp	r3, #0
 801644c:	d006      	beq.n	801645c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016458:	60fb      	str	r3, [r7, #12]
 801645a:	e001      	b.n	8016460 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801645c:	2300      	movs	r3, #0
 801645e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016460:	68fb      	ldr	r3, [r7, #12]
	}
 8016462:	4618      	mov	r0, r3
 8016464:	3714      	adds	r7, #20
 8016466:	46bd      	mov	sp, r7
 8016468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646c:	4770      	bx	lr

0801646e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801646e:	b580      	push	{r7, lr}
 8016470:	b086      	sub	sp, #24
 8016472:	af00      	add	r7, sp, #0
 8016474:	60f8      	str	r0, [r7, #12]
 8016476:	60b9      	str	r1, [r7, #8]
 8016478:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801647a:	2300      	movs	r3, #0
 801647c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016482:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016488:	2b00      	cmp	r3, #0
 801648a:	d10d      	bne.n	80164a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d14d      	bne.n	8016530 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	689b      	ldr	r3, [r3, #8]
 8016498:	4618      	mov	r0, r3
 801649a:	f001 f8b9 	bl	8017610 <xTaskPriorityDisinherit>
 801649e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2200      	movs	r2, #0
 80164a4:	609a      	str	r2, [r3, #8]
 80164a6:	e043      	b.n	8016530 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d119      	bne.n	80164e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	6858      	ldr	r0, [r3, #4]
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164b6:	461a      	mov	r2, r3
 80164b8:	68b9      	ldr	r1, [r7, #8]
 80164ba:	f004 fffd 	bl	801b4b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	685a      	ldr	r2, [r3, #4]
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164c6:	441a      	add	r2, r3
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	685a      	ldr	r2, [r3, #4]
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	689b      	ldr	r3, [r3, #8]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d32b      	bcc.n	8016530 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	605a      	str	r2, [r3, #4]
 80164e0:	e026      	b.n	8016530 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	68d8      	ldr	r0, [r3, #12]
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164ea:	461a      	mov	r2, r3
 80164ec:	68b9      	ldr	r1, [r7, #8]
 80164ee:	f004 ffe3 	bl	801b4b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	68da      	ldr	r2, [r3, #12]
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164fa:	425b      	negs	r3, r3
 80164fc:	441a      	add	r2, r3
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	68da      	ldr	r2, [r3, #12]
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	429a      	cmp	r2, r3
 801650c:	d207      	bcs.n	801651e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	689a      	ldr	r2, [r3, #8]
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016516:	425b      	negs	r3, r3
 8016518:	441a      	add	r2, r3
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2b02      	cmp	r3, #2
 8016522:	d105      	bne.n	8016530 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016524:	693b      	ldr	r3, [r7, #16]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d002      	beq.n	8016530 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	3b01      	subs	r3, #1
 801652e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	1c5a      	adds	r2, r3, #1
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016538:	697b      	ldr	r3, [r7, #20]
}
 801653a:	4618      	mov	r0, r3
 801653c:	3718      	adds	r7, #24
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}

08016542 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016542:	b580      	push	{r7, lr}
 8016544:	b082      	sub	sp, #8
 8016546:	af00      	add	r7, sp, #0
 8016548:	6078      	str	r0, [r7, #4]
 801654a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016550:	2b00      	cmp	r3, #0
 8016552:	d018      	beq.n	8016586 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	68da      	ldr	r2, [r3, #12]
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801655c:	441a      	add	r2, r3
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	68da      	ldr	r2, [r3, #12]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	689b      	ldr	r3, [r3, #8]
 801656a:	429a      	cmp	r2, r3
 801656c:	d303      	bcc.n	8016576 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681a      	ldr	r2, [r3, #0]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	68d9      	ldr	r1, [r3, #12]
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801657e:	461a      	mov	r2, r3
 8016580:	6838      	ldr	r0, [r7, #0]
 8016582:	f004 ff99 	bl	801b4b8 <memcpy>
	}
}
 8016586:	bf00      	nop
 8016588:	3708      	adds	r7, #8
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801658e:	b580      	push	{r7, lr}
 8016590:	b084      	sub	sp, #16
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016596:	f002 f8c1 	bl	801871c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80165a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80165a2:	e011      	b.n	80165c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d012      	beq.n	80165d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	3324      	adds	r3, #36	; 0x24
 80165b0:	4618      	mov	r0, r3
 80165b2:	f000 fdb9 	bl	8017128 <xTaskRemoveFromEventList>
 80165b6:	4603      	mov	r3, r0
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d001      	beq.n	80165c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80165bc:	f000 fe8e 	bl	80172dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80165c0:	7bfb      	ldrb	r3, [r7, #15]
 80165c2:	3b01      	subs	r3, #1
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80165c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	dce9      	bgt.n	80165a4 <prvUnlockQueue+0x16>
 80165d0:	e000      	b.n	80165d4 <prvUnlockQueue+0x46>
					break;
 80165d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	22ff      	movs	r2, #255	; 0xff
 80165d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80165dc:	f002 f8cc 	bl	8018778 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80165e0:	f002 f89c 	bl	801871c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80165ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80165ec:	e011      	b.n	8016612 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	691b      	ldr	r3, [r3, #16]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d012      	beq.n	801661c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	3310      	adds	r3, #16
 80165fa:	4618      	mov	r0, r3
 80165fc:	f000 fd94 	bl	8017128 <xTaskRemoveFromEventList>
 8016600:	4603      	mov	r3, r0
 8016602:	2b00      	cmp	r3, #0
 8016604:	d001      	beq.n	801660a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016606:	f000 fe69 	bl	80172dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801660a:	7bbb      	ldrb	r3, [r7, #14]
 801660c:	3b01      	subs	r3, #1
 801660e:	b2db      	uxtb	r3, r3
 8016610:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016616:	2b00      	cmp	r3, #0
 8016618:	dce9      	bgt.n	80165ee <prvUnlockQueue+0x60>
 801661a:	e000      	b.n	801661e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801661c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	22ff      	movs	r2, #255	; 0xff
 8016622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016626:	f002 f8a7 	bl	8018778 <vPortExitCritical>
}
 801662a:	bf00      	nop
 801662c:	3710      	adds	r7, #16
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}

08016632 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016632:	b580      	push	{r7, lr}
 8016634:	b084      	sub	sp, #16
 8016636:	af00      	add	r7, sp, #0
 8016638:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801663a:	f002 f86f 	bl	801871c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016642:	2b00      	cmp	r3, #0
 8016644:	d102      	bne.n	801664c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016646:	2301      	movs	r3, #1
 8016648:	60fb      	str	r3, [r7, #12]
 801664a:	e001      	b.n	8016650 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801664c:	2300      	movs	r3, #0
 801664e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016650:	f002 f892 	bl	8018778 <vPortExitCritical>

	return xReturn;
 8016654:	68fb      	ldr	r3, [r7, #12]
}
 8016656:	4618      	mov	r0, r3
 8016658:	3710      	adds	r7, #16
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}

0801665e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801665e:	b580      	push	{r7, lr}
 8016660:	b084      	sub	sp, #16
 8016662:	af00      	add	r7, sp, #0
 8016664:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016666:	f002 f859 	bl	801871c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016672:	429a      	cmp	r2, r3
 8016674:	d102      	bne.n	801667c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016676:	2301      	movs	r3, #1
 8016678:	60fb      	str	r3, [r7, #12]
 801667a:	e001      	b.n	8016680 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801667c:	2300      	movs	r3, #0
 801667e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016680:	f002 f87a 	bl	8018778 <vPortExitCritical>

	return xReturn;
 8016684:	68fb      	ldr	r3, [r7, #12]
}
 8016686:	4618      	mov	r0, r3
 8016688:	3710      	adds	r7, #16
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
	...

08016690 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016690:	b480      	push	{r7}
 8016692:	b085      	sub	sp, #20
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
 8016698:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801669a:	2300      	movs	r3, #0
 801669c:	60fb      	str	r3, [r7, #12]
 801669e:	e014      	b.n	80166ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80166a0:	4a0e      	ldr	r2, [pc, #56]	; (80166dc <vQueueAddToRegistry+0x4c>)
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10b      	bne.n	80166c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80166ac:	490b      	ldr	r1, [pc, #44]	; (80166dc <vQueueAddToRegistry+0x4c>)
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	683a      	ldr	r2, [r7, #0]
 80166b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80166b6:	4a09      	ldr	r2, [pc, #36]	; (80166dc <vQueueAddToRegistry+0x4c>)
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	00db      	lsls	r3, r3, #3
 80166bc:	4413      	add	r3, r2
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80166c2:	e005      	b.n	80166d0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	3301      	adds	r3, #1
 80166c8:	60fb      	str	r3, [r7, #12]
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	2b0b      	cmp	r3, #11
 80166ce:	d9e7      	bls.n	80166a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80166d0:	bf00      	nop
 80166d2:	3714      	adds	r7, #20
 80166d4:	46bd      	mov	sp, r7
 80166d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166da:	4770      	bx	lr
 80166dc:	20028974 	.word	0x20028974

080166e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80166e0:	b480      	push	{r7}
 80166e2:	b085      	sub	sp, #20
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80166e8:	2300      	movs	r3, #0
 80166ea:	60fb      	str	r3, [r7, #12]
 80166ec:	e016      	b.n	801671c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80166ee:	4a10      	ldr	r2, [pc, #64]	; (8016730 <vQueueUnregisterQueue+0x50>)
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	00db      	lsls	r3, r3, #3
 80166f4:	4413      	add	r3, r2
 80166f6:	685b      	ldr	r3, [r3, #4]
 80166f8:	687a      	ldr	r2, [r7, #4]
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d10b      	bne.n	8016716 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80166fe:	4a0c      	ldr	r2, [pc, #48]	; (8016730 <vQueueUnregisterQueue+0x50>)
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	2100      	movs	r1, #0
 8016704:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016708:	4a09      	ldr	r2, [pc, #36]	; (8016730 <vQueueUnregisterQueue+0x50>)
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	00db      	lsls	r3, r3, #3
 801670e:	4413      	add	r3, r2
 8016710:	2200      	movs	r2, #0
 8016712:	605a      	str	r2, [r3, #4]
				break;
 8016714:	e005      	b.n	8016722 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	3301      	adds	r3, #1
 801671a:	60fb      	str	r3, [r7, #12]
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	2b0b      	cmp	r3, #11
 8016720:	d9e5      	bls.n	80166ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016722:	bf00      	nop
 8016724:	3714      	adds	r7, #20
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr
 801672e:	bf00      	nop
 8016730:	20028974 	.word	0x20028974

08016734 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016734:	b580      	push	{r7, lr}
 8016736:	b086      	sub	sp, #24
 8016738:	af00      	add	r7, sp, #0
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016744:	f001 ffea 	bl	801871c <vPortEnterCritical>
 8016748:	697b      	ldr	r3, [r7, #20]
 801674a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801674e:	b25b      	sxtb	r3, r3
 8016750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016754:	d103      	bne.n	801675e <vQueueWaitForMessageRestricted+0x2a>
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	2200      	movs	r2, #0
 801675a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016764:	b25b      	sxtb	r3, r3
 8016766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801676a:	d103      	bne.n	8016774 <vQueueWaitForMessageRestricted+0x40>
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	2200      	movs	r2, #0
 8016770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016774:	f002 f800 	bl	8018778 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016778:	697b      	ldr	r3, [r7, #20]
 801677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801677c:	2b00      	cmp	r3, #0
 801677e:	d106      	bne.n	801678e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	3324      	adds	r3, #36	; 0x24
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	68b9      	ldr	r1, [r7, #8]
 8016788:	4618      	mov	r0, r3
 801678a:	f000 fca3 	bl	80170d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801678e:	6978      	ldr	r0, [r7, #20]
 8016790:	f7ff fefd 	bl	801658e <prvUnlockQueue>
	}
 8016794:	bf00      	nop
 8016796:	3718      	adds	r7, #24
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}

0801679c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801679c:	b580      	push	{r7, lr}
 801679e:	b08e      	sub	sp, #56	; 0x38
 80167a0:	af04      	add	r7, sp, #16
 80167a2:	60f8      	str	r0, [r7, #12]
 80167a4:	60b9      	str	r1, [r7, #8]
 80167a6:	607a      	str	r2, [r7, #4]
 80167a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80167aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d109      	bne.n	80167c4 <xTaskCreateStatic+0x28>
 80167b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167b4:	f383 8811 	msr	BASEPRI, r3
 80167b8:	f3bf 8f6f 	isb	sy
 80167bc:	f3bf 8f4f 	dsb	sy
 80167c0:	623b      	str	r3, [r7, #32]
 80167c2:	e7fe      	b.n	80167c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d109      	bne.n	80167de <xTaskCreateStatic+0x42>
 80167ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ce:	f383 8811 	msr	BASEPRI, r3
 80167d2:	f3bf 8f6f 	isb	sy
 80167d6:	f3bf 8f4f 	dsb	sy
 80167da:	61fb      	str	r3, [r7, #28]
 80167dc:	e7fe      	b.n	80167dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80167de:	2364      	movs	r3, #100	; 0x64
 80167e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	2b64      	cmp	r3, #100	; 0x64
 80167e6:	d009      	beq.n	80167fc <xTaskCreateStatic+0x60>
 80167e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ec:	f383 8811 	msr	BASEPRI, r3
 80167f0:	f3bf 8f6f 	isb	sy
 80167f4:	f3bf 8f4f 	dsb	sy
 80167f8:	61bb      	str	r3, [r7, #24]
 80167fa:	e7fe      	b.n	80167fa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80167fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80167fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016800:	2b00      	cmp	r3, #0
 8016802:	d01e      	beq.n	8016842 <xTaskCreateStatic+0xa6>
 8016804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016806:	2b00      	cmp	r3, #0
 8016808:	d01b      	beq.n	8016842 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016812:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016816:	2202      	movs	r2, #2
 8016818:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801681c:	2300      	movs	r3, #0
 801681e:	9303      	str	r3, [sp, #12]
 8016820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016822:	9302      	str	r3, [sp, #8]
 8016824:	f107 0314 	add.w	r3, r7, #20
 8016828:	9301      	str	r3, [sp, #4]
 801682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801682c:	9300      	str	r3, [sp, #0]
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	687a      	ldr	r2, [r7, #4]
 8016832:	68b9      	ldr	r1, [r7, #8]
 8016834:	68f8      	ldr	r0, [r7, #12]
 8016836:	f000 f850 	bl	80168da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801683a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801683c:	f000 f8e2 	bl	8016a04 <prvAddNewTaskToReadyList>
 8016840:	e001      	b.n	8016846 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8016842:	2300      	movs	r3, #0
 8016844:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016846:	697b      	ldr	r3, [r7, #20]
	}
 8016848:	4618      	mov	r0, r3
 801684a:	3728      	adds	r7, #40	; 0x28
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}

08016850 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08c      	sub	sp, #48	; 0x30
 8016854:	af04      	add	r7, sp, #16
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	603b      	str	r3, [r7, #0]
 801685c:	4613      	mov	r3, r2
 801685e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016860:	88fb      	ldrh	r3, [r7, #6]
 8016862:	009b      	lsls	r3, r3, #2
 8016864:	4618      	mov	r0, r3
 8016866:	f002 f873 	bl	8018950 <pvPortMalloc>
 801686a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d00e      	beq.n	8016890 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016872:	2064      	movs	r0, #100	; 0x64
 8016874:	f002 f86c 	bl	8018950 <pvPortMalloc>
 8016878:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801687a:	69fb      	ldr	r3, [r7, #28]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d003      	beq.n	8016888 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016880:	69fb      	ldr	r3, [r7, #28]
 8016882:	697a      	ldr	r2, [r7, #20]
 8016884:	631a      	str	r2, [r3, #48]	; 0x30
 8016886:	e005      	b.n	8016894 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016888:	6978      	ldr	r0, [r7, #20]
 801688a:	f002 f927 	bl	8018adc <vPortFree>
 801688e:	e001      	b.n	8016894 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016890:	2300      	movs	r3, #0
 8016892:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016894:	69fb      	ldr	r3, [r7, #28]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d017      	beq.n	80168ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801689a:	69fb      	ldr	r3, [r7, #28]
 801689c:	2200      	movs	r2, #0
 801689e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80168a2:	88fa      	ldrh	r2, [r7, #6]
 80168a4:	2300      	movs	r3, #0
 80168a6:	9303      	str	r3, [sp, #12]
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	9302      	str	r3, [sp, #8]
 80168ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ae:	9301      	str	r3, [sp, #4]
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	9300      	str	r3, [sp, #0]
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	68b9      	ldr	r1, [r7, #8]
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	f000 f80e 	bl	80168da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80168be:	69f8      	ldr	r0, [r7, #28]
 80168c0:	f000 f8a0 	bl	8016a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80168c4:	2301      	movs	r3, #1
 80168c6:	61bb      	str	r3, [r7, #24]
 80168c8:	e002      	b.n	80168d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80168ca:	f04f 33ff 	mov.w	r3, #4294967295
 80168ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80168d0:	69bb      	ldr	r3, [r7, #24]
	}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3720      	adds	r7, #32
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}

080168da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80168da:	b580      	push	{r7, lr}
 80168dc:	b088      	sub	sp, #32
 80168de:	af00      	add	r7, sp, #0
 80168e0:	60f8      	str	r0, [r7, #12]
 80168e2:	60b9      	str	r1, [r7, #8]
 80168e4:	607a      	str	r2, [r7, #4]
 80168e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80168e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	009b      	lsls	r3, r3, #2
 80168f0:	461a      	mov	r2, r3
 80168f2:	21a5      	movs	r1, #165	; 0xa5
 80168f4:	f004 fdeb 	bl	801b4ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80168f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016902:	3b01      	subs	r3, #1
 8016904:	009b      	lsls	r3, r3, #2
 8016906:	4413      	add	r3, r2
 8016908:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801690a:	69bb      	ldr	r3, [r7, #24]
 801690c:	f023 0307 	bic.w	r3, r3, #7
 8016910:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016912:	69bb      	ldr	r3, [r7, #24]
 8016914:	f003 0307 	and.w	r3, r3, #7
 8016918:	2b00      	cmp	r3, #0
 801691a:	d009      	beq.n	8016930 <prvInitialiseNewTask+0x56>
 801691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016920:	f383 8811 	msr	BASEPRI, r3
 8016924:	f3bf 8f6f 	isb	sy
 8016928:	f3bf 8f4f 	dsb	sy
 801692c:	617b      	str	r3, [r7, #20]
 801692e:	e7fe      	b.n	801692e <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8016930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016932:	69ba      	ldr	r2, [r7, #24]
 8016934:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d01f      	beq.n	801697c <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801693c:	2300      	movs	r3, #0
 801693e:	61fb      	str	r3, [r7, #28]
 8016940:	e012      	b.n	8016968 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016942:	68ba      	ldr	r2, [r7, #8]
 8016944:	69fb      	ldr	r3, [r7, #28]
 8016946:	4413      	add	r3, r2
 8016948:	7819      	ldrb	r1, [r3, #0]
 801694a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	4413      	add	r3, r2
 8016950:	3334      	adds	r3, #52	; 0x34
 8016952:	460a      	mov	r2, r1
 8016954:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016956:	68ba      	ldr	r2, [r7, #8]
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	4413      	add	r3, r2
 801695c:	781b      	ldrb	r3, [r3, #0]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d006      	beq.n	8016970 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016962:	69fb      	ldr	r3, [r7, #28]
 8016964:	3301      	adds	r3, #1
 8016966:	61fb      	str	r3, [r7, #28]
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	2b0f      	cmp	r3, #15
 801696c:	d9e9      	bls.n	8016942 <prvInitialiseNewTask+0x68>
 801696e:	e000      	b.n	8016972 <prvInitialiseNewTask+0x98>
			{
				break;
 8016970:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016974:	2200      	movs	r2, #0
 8016976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801697a:	e003      	b.n	8016984 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801697e:	2200      	movs	r2, #0
 8016980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016986:	2b37      	cmp	r3, #55	; 0x37
 8016988:	d901      	bls.n	801698e <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801698a:	2337      	movs	r3, #55	; 0x37
 801698c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016992:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016998:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699c:	2200      	movs	r2, #0
 801699e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80169a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a2:	3304      	adds	r3, #4
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7fe fdc3 	bl	8015530 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80169aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ac:	3318      	adds	r3, #24
 80169ae:	4618      	mov	r0, r3
 80169b0:	f7fe fdbe 	bl	8015530 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80169b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80169c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80169c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80169ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169cc:	2200      	movs	r2, #0
 80169ce:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80169d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169d2:	2200      	movs	r2, #0
 80169d4:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80169d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169d8:	2200      	movs	r2, #0
 80169da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80169de:	683a      	ldr	r2, [r7, #0]
 80169e0:	68f9      	ldr	r1, [r7, #12]
 80169e2:	69b8      	ldr	r0, [r7, #24]
 80169e4:	f001 fd76 	bl	80184d4 <pxPortInitialiseStack>
 80169e8:	4602      	mov	r2, r0
 80169ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80169ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d002      	beq.n	80169fa <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80169f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80169fa:	bf00      	nop
 80169fc:	3720      	adds	r7, #32
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
	...

08016a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016a0c:	f001 fe86 	bl	801871c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016a10:	4b2d      	ldr	r3, [pc, #180]	; (8016ac8 <prvAddNewTaskToReadyList+0xc4>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	3301      	adds	r3, #1
 8016a16:	4a2c      	ldr	r2, [pc, #176]	; (8016ac8 <prvAddNewTaskToReadyList+0xc4>)
 8016a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016a1a:	4b2c      	ldr	r3, [pc, #176]	; (8016acc <prvAddNewTaskToReadyList+0xc8>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d109      	bne.n	8016a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016a22:	4a2a      	ldr	r2, [pc, #168]	; (8016acc <prvAddNewTaskToReadyList+0xc8>)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016a28:	4b27      	ldr	r3, [pc, #156]	; (8016ac8 <prvAddNewTaskToReadyList+0xc4>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	d110      	bne.n	8016a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016a30:	f000 fc9e 	bl	8017370 <prvInitialiseTaskLists>
 8016a34:	e00d      	b.n	8016a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016a36:	4b26      	ldr	r3, [pc, #152]	; (8016ad0 <prvAddNewTaskToReadyList+0xcc>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d109      	bne.n	8016a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016a3e:	4b23      	ldr	r3, [pc, #140]	; (8016acc <prvAddNewTaskToReadyList+0xc8>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d802      	bhi.n	8016a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016a4c:	4a1f      	ldr	r2, [pc, #124]	; (8016acc <prvAddNewTaskToReadyList+0xc8>)
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016a52:	4b20      	ldr	r3, [pc, #128]	; (8016ad4 <prvAddNewTaskToReadyList+0xd0>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	3301      	adds	r3, #1
 8016a58:	4a1e      	ldr	r2, [pc, #120]	; (8016ad4 <prvAddNewTaskToReadyList+0xd0>)
 8016a5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016a5c:	4b1d      	ldr	r3, [pc, #116]	; (8016ad4 <prvAddNewTaskToReadyList+0xd0>)
 8016a5e:	681a      	ldr	r2, [r3, #0]
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a68:	4b1b      	ldr	r3, [pc, #108]	; (8016ad8 <prvAddNewTaskToReadyList+0xd4>)
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d903      	bls.n	8016a78 <prvAddNewTaskToReadyList+0x74>
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a74:	4a18      	ldr	r2, [pc, #96]	; (8016ad8 <prvAddNewTaskToReadyList+0xd4>)
 8016a76:	6013      	str	r3, [r2, #0]
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	009b      	lsls	r3, r3, #2
 8016a80:	4413      	add	r3, r2
 8016a82:	009b      	lsls	r3, r3, #2
 8016a84:	4a15      	ldr	r2, [pc, #84]	; (8016adc <prvAddNewTaskToReadyList+0xd8>)
 8016a86:	441a      	add	r2, r3
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	3304      	adds	r3, #4
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	4610      	mov	r0, r2
 8016a90:	f7fe fd5b 	bl	801554a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016a94:	f001 fe70 	bl	8018778 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016a98:	4b0d      	ldr	r3, [pc, #52]	; (8016ad0 <prvAddNewTaskToReadyList+0xcc>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d00e      	beq.n	8016abe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016aa0:	4b0a      	ldr	r3, [pc, #40]	; (8016acc <prvAddNewTaskToReadyList+0xc8>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d207      	bcs.n	8016abe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016aae:	4b0c      	ldr	r3, [pc, #48]	; (8016ae0 <prvAddNewTaskToReadyList+0xdc>)
 8016ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ab4:	601a      	str	r2, [r3, #0]
 8016ab6:	f3bf 8f4f 	dsb	sy
 8016aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016abe:	bf00      	nop
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	20002acc 	.word	0x20002acc
 8016acc:	200025f8 	.word	0x200025f8
 8016ad0:	20002ad8 	.word	0x20002ad8
 8016ad4:	20002ae8 	.word	0x20002ae8
 8016ad8:	20002ad4 	.word	0x20002ad4
 8016adc:	200025fc 	.word	0x200025fc
 8016ae0:	e000ed04 	.word	0xe000ed04

08016ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016aec:	2300      	movs	r3, #0
 8016aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d016      	beq.n	8016b24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016af6:	4b13      	ldr	r3, [pc, #76]	; (8016b44 <vTaskDelay+0x60>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d009      	beq.n	8016b12 <vTaskDelay+0x2e>
 8016afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b02:	f383 8811 	msr	BASEPRI, r3
 8016b06:	f3bf 8f6f 	isb	sy
 8016b0a:	f3bf 8f4f 	dsb	sy
 8016b0e:	60bb      	str	r3, [r7, #8]
 8016b10:	e7fe      	b.n	8016b10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8016b12:	f000 f881 	bl	8016c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016b16:	2100      	movs	r1, #0
 8016b18:	6878      	ldr	r0, [r7, #4]
 8016b1a:	f001 f861 	bl	8017be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016b1e:	f000 f8c1 	bl	8016ca4 <xTaskResumeAll>
 8016b22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d107      	bne.n	8016b3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8016b2a:	4b07      	ldr	r3, [pc, #28]	; (8016b48 <vTaskDelay+0x64>)
 8016b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b30:	601a      	str	r2, [r3, #0]
 8016b32:	f3bf 8f4f 	dsb	sy
 8016b36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016b3a:	bf00      	nop
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	20002af4 	.word	0x20002af4
 8016b48:	e000ed04 	.word	0xe000ed04

08016b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b08a      	sub	sp, #40	; 0x28
 8016b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016b52:	2300      	movs	r3, #0
 8016b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016b56:	2300      	movs	r3, #0
 8016b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016b5a:	463a      	mov	r2, r7
 8016b5c:	1d39      	adds	r1, r7, #4
 8016b5e:	f107 0308 	add.w	r3, r7, #8
 8016b62:	4618      	mov	r0, r3
 8016b64:	f7fe fc90 	bl	8015488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016b68:	6839      	ldr	r1, [r7, #0]
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	68ba      	ldr	r2, [r7, #8]
 8016b6e:	9202      	str	r2, [sp, #8]
 8016b70:	9301      	str	r3, [sp, #4]
 8016b72:	2300      	movs	r3, #0
 8016b74:	9300      	str	r3, [sp, #0]
 8016b76:	2300      	movs	r3, #0
 8016b78:	460a      	mov	r2, r1
 8016b7a:	4921      	ldr	r1, [pc, #132]	; (8016c00 <vTaskStartScheduler+0xb4>)
 8016b7c:	4821      	ldr	r0, [pc, #132]	; (8016c04 <vTaskStartScheduler+0xb8>)
 8016b7e:	f7ff fe0d 	bl	801679c <xTaskCreateStatic>
 8016b82:	4602      	mov	r2, r0
 8016b84:	4b20      	ldr	r3, [pc, #128]	; (8016c08 <vTaskStartScheduler+0xbc>)
 8016b86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016b88:	4b1f      	ldr	r3, [pc, #124]	; (8016c08 <vTaskStartScheduler+0xbc>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d002      	beq.n	8016b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016b90:	2301      	movs	r3, #1
 8016b92:	617b      	str	r3, [r7, #20]
 8016b94:	e001      	b.n	8016b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016b96:	2300      	movs	r3, #0
 8016b98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016b9a:	697b      	ldr	r3, [r7, #20]
 8016b9c:	2b01      	cmp	r3, #1
 8016b9e:	d102      	bne.n	8016ba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016ba0:	f001 f872 	bl	8017c88 <xTimerCreateTimerTask>
 8016ba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d117      	bne.n	8016bdc <vTaskStartScheduler+0x90>
 8016bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb0:	f383 8811 	msr	BASEPRI, r3
 8016bb4:	f3bf 8f6f 	isb	sy
 8016bb8:	f3bf 8f4f 	dsb	sy
 8016bbc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016bbe:	4b13      	ldr	r3, [pc, #76]	; (8016c0c <vTaskStartScheduler+0xc0>)
 8016bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8016bc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016bc6:	4b12      	ldr	r3, [pc, #72]	; (8016c10 <vTaskStartScheduler+0xc4>)
 8016bc8:	2201      	movs	r2, #1
 8016bca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016bcc:	4b11      	ldr	r3, [pc, #68]	; (8016c14 <vTaskStartScheduler+0xc8>)
 8016bce:	2200      	movs	r2, #0
 8016bd0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8016bd2:	f7ea fbb0 	bl	8001336 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016bd6:	f001 fd03 	bl	80185e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016bda:	e00d      	b.n	8016bf8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016be2:	d109      	bne.n	8016bf8 <vTaskStartScheduler+0xac>
 8016be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be8:	f383 8811 	msr	BASEPRI, r3
 8016bec:	f3bf 8f6f 	isb	sy
 8016bf0:	f3bf 8f4f 	dsb	sy
 8016bf4:	60fb      	str	r3, [r7, #12]
 8016bf6:	e7fe      	b.n	8016bf6 <vTaskStartScheduler+0xaa>
}
 8016bf8:	bf00      	nop
 8016bfa:	3718      	adds	r7, #24
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}
 8016c00:	0801c898 	.word	0x0801c898
 8016c04:	080172f5 	.word	0x080172f5
 8016c08:	20002af0 	.word	0x20002af0
 8016c0c:	20002aec 	.word	0x20002aec
 8016c10:	20002ad8 	.word	0x20002ad8
 8016c14:	20002ad0 	.word	0x20002ad0

08016c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016c18:	b480      	push	{r7}
 8016c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016c1c:	4b04      	ldr	r3, [pc, #16]	; (8016c30 <vTaskSuspendAll+0x18>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	3301      	adds	r3, #1
 8016c22:	4a03      	ldr	r2, [pc, #12]	; (8016c30 <vTaskSuspendAll+0x18>)
 8016c24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016c26:	bf00      	nop
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2e:	4770      	bx	lr
 8016c30:	20002af4 	.word	0x20002af4

08016c34 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8016c34:	b480      	push	{r7}
 8016c36:	b083      	sub	sp, #12
 8016c38:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8016c3e:	4b14      	ldr	r3, [pc, #80]	; (8016c90 <prvGetExpectedIdleTime+0x5c>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d001      	beq.n	8016c4a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8016c46:	2301      	movs	r3, #1
 8016c48:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8016c4a:	4b12      	ldr	r3, [pc, #72]	; (8016c94 <prvGetExpectedIdleTime+0x60>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d002      	beq.n	8016c5a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8016c54:	2300      	movs	r3, #0
 8016c56:	607b      	str	r3, [r7, #4]
 8016c58:	e012      	b.n	8016c80 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8016c5a:	4b0f      	ldr	r3, [pc, #60]	; (8016c98 <prvGetExpectedIdleTime+0x64>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d902      	bls.n	8016c68 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8016c62:	2300      	movs	r3, #0
 8016c64:	607b      	str	r3, [r7, #4]
 8016c66:	e00b      	b.n	8016c80 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d002      	beq.n	8016c74 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	607b      	str	r3, [r7, #4]
 8016c72:	e005      	b.n	8016c80 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8016c74:	4b09      	ldr	r3, [pc, #36]	; (8016c9c <prvGetExpectedIdleTime+0x68>)
 8016c76:	681a      	ldr	r2, [r3, #0]
 8016c78:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <prvGetExpectedIdleTime+0x6c>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	1ad3      	subs	r3, r2, r3
 8016c7e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8016c80:	687b      	ldr	r3, [r7, #4]
	}
 8016c82:	4618      	mov	r0, r3
 8016c84:	370c      	adds	r7, #12
 8016c86:	46bd      	mov	sp, r7
 8016c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop
 8016c90:	20002ad4 	.word	0x20002ad4
 8016c94:	200025f8 	.word	0x200025f8
 8016c98:	200025fc 	.word	0x200025fc
 8016c9c:	20002aec 	.word	0x20002aec
 8016ca0:	20002ad0 	.word	0x20002ad0

08016ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b084      	sub	sp, #16
 8016ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016caa:	2300      	movs	r3, #0
 8016cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016cb2:	4b41      	ldr	r3, [pc, #260]	; (8016db8 <xTaskResumeAll+0x114>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d109      	bne.n	8016cce <xTaskResumeAll+0x2a>
 8016cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cbe:	f383 8811 	msr	BASEPRI, r3
 8016cc2:	f3bf 8f6f 	isb	sy
 8016cc6:	f3bf 8f4f 	dsb	sy
 8016cca:	603b      	str	r3, [r7, #0]
 8016ccc:	e7fe      	b.n	8016ccc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016cce:	f001 fd25 	bl	801871c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016cd2:	4b39      	ldr	r3, [pc, #228]	; (8016db8 <xTaskResumeAll+0x114>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	3b01      	subs	r3, #1
 8016cd8:	4a37      	ldr	r2, [pc, #220]	; (8016db8 <xTaskResumeAll+0x114>)
 8016cda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016cdc:	4b36      	ldr	r3, [pc, #216]	; (8016db8 <xTaskResumeAll+0x114>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d162      	bne.n	8016daa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016ce4:	4b35      	ldr	r3, [pc, #212]	; (8016dbc <xTaskResumeAll+0x118>)
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d05e      	beq.n	8016daa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016cec:	e02f      	b.n	8016d4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016cee:	4b34      	ldr	r3, [pc, #208]	; (8016dc0 <xTaskResumeAll+0x11c>)
 8016cf0:	68db      	ldr	r3, [r3, #12]
 8016cf2:	68db      	ldr	r3, [r3, #12]
 8016cf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	3318      	adds	r3, #24
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7fe fc82 	bl	8015604 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	3304      	adds	r3, #4
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7fe fc7d 	bl	8015604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d0e:	4b2d      	ldr	r3, [pc, #180]	; (8016dc4 <xTaskResumeAll+0x120>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d903      	bls.n	8016d1e <xTaskResumeAll+0x7a>
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d1a:	4a2a      	ldr	r2, [pc, #168]	; (8016dc4 <xTaskResumeAll+0x120>)
 8016d1c:	6013      	str	r3, [r2, #0]
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d22:	4613      	mov	r3, r2
 8016d24:	009b      	lsls	r3, r3, #2
 8016d26:	4413      	add	r3, r2
 8016d28:	009b      	lsls	r3, r3, #2
 8016d2a:	4a27      	ldr	r2, [pc, #156]	; (8016dc8 <xTaskResumeAll+0x124>)
 8016d2c:	441a      	add	r2, r3
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	3304      	adds	r3, #4
 8016d32:	4619      	mov	r1, r3
 8016d34:	4610      	mov	r0, r2
 8016d36:	f7fe fc08 	bl	801554a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d3e:	4b23      	ldr	r3, [pc, #140]	; (8016dcc <xTaskResumeAll+0x128>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d302      	bcc.n	8016d4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8016d48:	4b21      	ldr	r3, [pc, #132]	; (8016dd0 <xTaskResumeAll+0x12c>)
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016d4e:	4b1c      	ldr	r3, [pc, #112]	; (8016dc0 <xTaskResumeAll+0x11c>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d1cb      	bne.n	8016cee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016d5c:	f000 fba2 	bl	80174a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016d60:	4b1c      	ldr	r3, [pc, #112]	; (8016dd4 <xTaskResumeAll+0x130>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d010      	beq.n	8016d8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016d6c:	f000 f846 	bl	8016dfc <xTaskIncrementTick>
 8016d70:	4603      	mov	r3, r0
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d002      	beq.n	8016d7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8016d76:	4b16      	ldr	r3, [pc, #88]	; (8016dd0 <xTaskResumeAll+0x12c>)
 8016d78:	2201      	movs	r2, #1
 8016d7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	3b01      	subs	r3, #1
 8016d80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d1f1      	bne.n	8016d6c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8016d88:	4b12      	ldr	r3, [pc, #72]	; (8016dd4 <xTaskResumeAll+0x130>)
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016d8e:	4b10      	ldr	r3, [pc, #64]	; (8016dd0 <xTaskResumeAll+0x12c>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d009      	beq.n	8016daa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016d96:	2301      	movs	r3, #1
 8016d98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016d9a:	4b0f      	ldr	r3, [pc, #60]	; (8016dd8 <xTaskResumeAll+0x134>)
 8016d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016da0:	601a      	str	r2, [r3, #0]
 8016da2:	f3bf 8f4f 	dsb	sy
 8016da6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016daa:	f001 fce5 	bl	8018778 <vPortExitCritical>

	return xAlreadyYielded;
 8016dae:	68bb      	ldr	r3, [r7, #8]
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3710      	adds	r7, #16
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}
 8016db8:	20002af4 	.word	0x20002af4
 8016dbc:	20002acc 	.word	0x20002acc
 8016dc0:	20002a8c 	.word	0x20002a8c
 8016dc4:	20002ad4 	.word	0x20002ad4
 8016dc8:	200025fc 	.word	0x200025fc
 8016dcc:	200025f8 	.word	0x200025f8
 8016dd0:	20002ae0 	.word	0x20002ae0
 8016dd4:	20002adc 	.word	0x20002adc
 8016dd8:	e000ed04 	.word	0xe000ed04

08016ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b083      	sub	sp, #12
 8016de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016de2:	4b05      	ldr	r3, [pc, #20]	; (8016df8 <xTaskGetTickCount+0x1c>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016de8:	687b      	ldr	r3, [r7, #4]
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	370c      	adds	r7, #12
 8016dee:	46bd      	mov	sp, r7
 8016df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df4:	4770      	bx	lr
 8016df6:	bf00      	nop
 8016df8:	20002ad0 	.word	0x20002ad0

08016dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b086      	sub	sp, #24
 8016e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016e02:	2300      	movs	r3, #0
 8016e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e06:	4b52      	ldr	r3, [pc, #328]	; (8016f50 <xTaskIncrementTick+0x154>)
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	f040 808e 	bne.w	8016f2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016e10:	4b50      	ldr	r3, [pc, #320]	; (8016f54 <xTaskIncrementTick+0x158>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	3301      	adds	r3, #1
 8016e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016e18:	4a4e      	ldr	r2, [pc, #312]	; (8016f54 <xTaskIncrementTick+0x158>)
 8016e1a:	693b      	ldr	r3, [r7, #16]
 8016e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d11f      	bne.n	8016e64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8016e24:	4b4c      	ldr	r3, [pc, #304]	; (8016f58 <xTaskIncrementTick+0x15c>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d009      	beq.n	8016e42 <xTaskIncrementTick+0x46>
 8016e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e32:	f383 8811 	msr	BASEPRI, r3
 8016e36:	f3bf 8f6f 	isb	sy
 8016e3a:	f3bf 8f4f 	dsb	sy
 8016e3e:	603b      	str	r3, [r7, #0]
 8016e40:	e7fe      	b.n	8016e40 <xTaskIncrementTick+0x44>
 8016e42:	4b45      	ldr	r3, [pc, #276]	; (8016f58 <xTaskIncrementTick+0x15c>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	60fb      	str	r3, [r7, #12]
 8016e48:	4b44      	ldr	r3, [pc, #272]	; (8016f5c <xTaskIncrementTick+0x160>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	4a42      	ldr	r2, [pc, #264]	; (8016f58 <xTaskIncrementTick+0x15c>)
 8016e4e:	6013      	str	r3, [r2, #0]
 8016e50:	4a42      	ldr	r2, [pc, #264]	; (8016f5c <xTaskIncrementTick+0x160>)
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	6013      	str	r3, [r2, #0]
 8016e56:	4b42      	ldr	r3, [pc, #264]	; (8016f60 <xTaskIncrementTick+0x164>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	4a40      	ldr	r2, [pc, #256]	; (8016f60 <xTaskIncrementTick+0x164>)
 8016e5e:	6013      	str	r3, [r2, #0]
 8016e60:	f000 fb20 	bl	80174a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016e64:	4b3f      	ldr	r3, [pc, #252]	; (8016f64 <xTaskIncrementTick+0x168>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	693a      	ldr	r2, [r7, #16]
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	d349      	bcc.n	8016f02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016e6e:	4b3a      	ldr	r3, [pc, #232]	; (8016f58 <xTaskIncrementTick+0x15c>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d104      	bne.n	8016e82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e78:	4b3a      	ldr	r3, [pc, #232]	; (8016f64 <xTaskIncrementTick+0x168>)
 8016e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e7e:	601a      	str	r2, [r3, #0]
					break;
 8016e80:	e03f      	b.n	8016f02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e82:	4b35      	ldr	r3, [pc, #212]	; (8016f58 <xTaskIncrementTick+0x15c>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	68db      	ldr	r3, [r3, #12]
 8016e88:	68db      	ldr	r3, [r3, #12]
 8016e8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016e92:	693a      	ldr	r2, [r7, #16]
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	429a      	cmp	r2, r3
 8016e98:	d203      	bcs.n	8016ea2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016e9a:	4a32      	ldr	r2, [pc, #200]	; (8016f64 <xTaskIncrementTick+0x168>)
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016ea0:	e02f      	b.n	8016f02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	3304      	adds	r3, #4
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7fe fbac 	bl	8015604 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d004      	beq.n	8016ebe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	3318      	adds	r3, #24
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fe fba3 	bl	8015604 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ec2:	4b29      	ldr	r3, [pc, #164]	; (8016f68 <xTaskIncrementTick+0x16c>)
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	d903      	bls.n	8016ed2 <xTaskIncrementTick+0xd6>
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ece:	4a26      	ldr	r2, [pc, #152]	; (8016f68 <xTaskIncrementTick+0x16c>)
 8016ed0:	6013      	str	r3, [r2, #0]
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	009b      	lsls	r3, r3, #2
 8016eda:	4413      	add	r3, r2
 8016edc:	009b      	lsls	r3, r3, #2
 8016ede:	4a23      	ldr	r2, [pc, #140]	; (8016f6c <xTaskIncrementTick+0x170>)
 8016ee0:	441a      	add	r2, r3
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	3304      	adds	r3, #4
 8016ee6:	4619      	mov	r1, r3
 8016ee8:	4610      	mov	r0, r2
 8016eea:	f7fe fb2e 	bl	801554a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ef2:	4b1f      	ldr	r3, [pc, #124]	; (8016f70 <xTaskIncrementTick+0x174>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	d3b8      	bcc.n	8016e6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8016efc:	2301      	movs	r3, #1
 8016efe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016f00:	e7b5      	b.n	8016e6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016f02:	4b1b      	ldr	r3, [pc, #108]	; (8016f70 <xTaskIncrementTick+0x174>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f08:	4918      	ldr	r1, [pc, #96]	; (8016f6c <xTaskIncrementTick+0x170>)
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	009b      	lsls	r3, r3, #2
 8016f0e:	4413      	add	r3, r2
 8016f10:	009b      	lsls	r3, r3, #2
 8016f12:	440b      	add	r3, r1
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b01      	cmp	r3, #1
 8016f18:	d901      	bls.n	8016f1e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8016f1e:	4b15      	ldr	r3, [pc, #84]	; (8016f74 <xTaskIncrementTick+0x178>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d109      	bne.n	8016f3a <xTaskIncrementTick+0x13e>
			{
				vApplicationTickHook();
 8016f26:	f7ea fa14 	bl	8001352 <vApplicationTickHook>
 8016f2a:	e006      	b.n	8016f3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016f2c:	4b11      	ldr	r3, [pc, #68]	; (8016f74 <xTaskIncrementTick+0x178>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	3301      	adds	r3, #1
 8016f32:	4a10      	ldr	r2, [pc, #64]	; (8016f74 <xTaskIncrementTick+0x178>)
 8016f34:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8016f36:	f7ea fa0c 	bl	8001352 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016f3a:	4b0f      	ldr	r3, [pc, #60]	; (8016f78 <xTaskIncrementTick+0x17c>)
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d001      	beq.n	8016f46 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8016f42:	2301      	movs	r3, #1
 8016f44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016f46:	697b      	ldr	r3, [r7, #20]
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	3718      	adds	r7, #24
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	20002af4 	.word	0x20002af4
 8016f54:	20002ad0 	.word	0x20002ad0
 8016f58:	20002a84 	.word	0x20002a84
 8016f5c:	20002a88 	.word	0x20002a88
 8016f60:	20002ae4 	.word	0x20002ae4
 8016f64:	20002aec 	.word	0x20002aec
 8016f68:	20002ad4 	.word	0x20002ad4
 8016f6c:	200025fc 	.word	0x200025fc
 8016f70:	200025f8 	.word	0x200025f8
 8016f74:	20002adc 	.word	0x20002adc
 8016f78:	20002ae0 	.word	0x20002ae0

08016f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016f82:	4b3b      	ldr	r3, [pc, #236]	; (8017070 <vTaskSwitchContext+0xf4>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d003      	beq.n	8016f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016f8a:	4b3a      	ldr	r3, [pc, #232]	; (8017074 <vTaskSwitchContext+0xf8>)
 8016f8c:	2201      	movs	r2, #1
 8016f8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016f90:	e06a      	b.n	8017068 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8016f92:	4b38      	ldr	r3, [pc, #224]	; (8017074 <vTaskSwitchContext+0xf8>)
 8016f94:	2200      	movs	r2, #0
 8016f96:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8016f98:	f7ea f9d4 	bl	8001344 <getRunTimeCounterValue>
 8016f9c:	4602      	mov	r2, r0
 8016f9e:	4b36      	ldr	r3, [pc, #216]	; (8017078 <vTaskSwitchContext+0xfc>)
 8016fa0:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8016fa2:	4b35      	ldr	r3, [pc, #212]	; (8017078 <vTaskSwitchContext+0xfc>)
 8016fa4:	681a      	ldr	r2, [r3, #0]
 8016fa6:	4b35      	ldr	r3, [pc, #212]	; (801707c <vTaskSwitchContext+0x100>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d909      	bls.n	8016fc2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8016fae:	4b34      	ldr	r3, [pc, #208]	; (8017080 <vTaskSwitchContext+0x104>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016fb4:	4a30      	ldr	r2, [pc, #192]	; (8017078 <vTaskSwitchContext+0xfc>)
 8016fb6:	6810      	ldr	r0, [r2, #0]
 8016fb8:	4a30      	ldr	r2, [pc, #192]	; (801707c <vTaskSwitchContext+0x100>)
 8016fba:	6812      	ldr	r2, [r2, #0]
 8016fbc:	1a82      	subs	r2, r0, r2
 8016fbe:	440a      	add	r2, r1
 8016fc0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8016fc2:	4b2d      	ldr	r3, [pc, #180]	; (8017078 <vTaskSwitchContext+0xfc>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	4a2d      	ldr	r2, [pc, #180]	; (801707c <vTaskSwitchContext+0x100>)
 8016fc8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016fca:	4b2d      	ldr	r3, [pc, #180]	; (8017080 <vTaskSwitchContext+0x104>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	4b2b      	ldr	r3, [pc, #172]	; (8017080 <vTaskSwitchContext+0x104>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fd6:	429a      	cmp	r2, r3
 8016fd8:	d808      	bhi.n	8016fec <vTaskSwitchContext+0x70>
 8016fda:	4b29      	ldr	r3, [pc, #164]	; (8017080 <vTaskSwitchContext+0x104>)
 8016fdc:	681a      	ldr	r2, [r3, #0]
 8016fde:	4b28      	ldr	r3, [pc, #160]	; (8017080 <vTaskSwitchContext+0x104>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	3334      	adds	r3, #52	; 0x34
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	4610      	mov	r0, r2
 8016fe8:	f7ea f9ba 	bl	8001360 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fec:	4b25      	ldr	r3, [pc, #148]	; (8017084 <vTaskSwitchContext+0x108>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	60fb      	str	r3, [r7, #12]
 8016ff2:	e00f      	b.n	8017014 <vTaskSwitchContext+0x98>
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d109      	bne.n	801700e <vTaskSwitchContext+0x92>
 8016ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffe:	f383 8811 	msr	BASEPRI, r3
 8017002:	f3bf 8f6f 	isb	sy
 8017006:	f3bf 8f4f 	dsb	sy
 801700a:	607b      	str	r3, [r7, #4]
 801700c:	e7fe      	b.n	801700c <vTaskSwitchContext+0x90>
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	3b01      	subs	r3, #1
 8017012:	60fb      	str	r3, [r7, #12]
 8017014:	491c      	ldr	r1, [pc, #112]	; (8017088 <vTaskSwitchContext+0x10c>)
 8017016:	68fa      	ldr	r2, [r7, #12]
 8017018:	4613      	mov	r3, r2
 801701a:	009b      	lsls	r3, r3, #2
 801701c:	4413      	add	r3, r2
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	440b      	add	r3, r1
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d0e5      	beq.n	8016ff4 <vTaskSwitchContext+0x78>
 8017028:	68fa      	ldr	r2, [r7, #12]
 801702a:	4613      	mov	r3, r2
 801702c:	009b      	lsls	r3, r3, #2
 801702e:	4413      	add	r3, r2
 8017030:	009b      	lsls	r3, r3, #2
 8017032:	4a15      	ldr	r2, [pc, #84]	; (8017088 <vTaskSwitchContext+0x10c>)
 8017034:	4413      	add	r3, r2
 8017036:	60bb      	str	r3, [r7, #8]
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	685a      	ldr	r2, [r3, #4]
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	605a      	str	r2, [r3, #4]
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	685a      	ldr	r2, [r3, #4]
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	3308      	adds	r3, #8
 801704a:	429a      	cmp	r2, r3
 801704c:	d104      	bne.n	8017058 <vTaskSwitchContext+0xdc>
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	685a      	ldr	r2, [r3, #4]
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	605a      	str	r2, [r3, #4]
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	68db      	ldr	r3, [r3, #12]
 801705e:	4a08      	ldr	r2, [pc, #32]	; (8017080 <vTaskSwitchContext+0x104>)
 8017060:	6013      	str	r3, [r2, #0]
 8017062:	4a08      	ldr	r2, [pc, #32]	; (8017084 <vTaskSwitchContext+0x108>)
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	6013      	str	r3, [r2, #0]
}
 8017068:	bf00      	nop
 801706a:	3710      	adds	r7, #16
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}
 8017070:	20002af4 	.word	0x20002af4
 8017074:	20002ae0 	.word	0x20002ae0
 8017078:	20002afc 	.word	0x20002afc
 801707c:	20002af8 	.word	0x20002af8
 8017080:	200025f8 	.word	0x200025f8
 8017084:	20002ad4 	.word	0x20002ad4
 8017088:	200025fc 	.word	0x200025fc

0801708c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b084      	sub	sp, #16
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
 8017094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d109      	bne.n	80170b0 <vTaskPlaceOnEventList+0x24>
 801709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a0:	f383 8811 	msr	BASEPRI, r3
 80170a4:	f3bf 8f6f 	isb	sy
 80170a8:	f3bf 8f4f 	dsb	sy
 80170ac:	60fb      	str	r3, [r7, #12]
 80170ae:	e7fe      	b.n	80170ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80170b0:	4b07      	ldr	r3, [pc, #28]	; (80170d0 <vTaskPlaceOnEventList+0x44>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	3318      	adds	r3, #24
 80170b6:	4619      	mov	r1, r3
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f7fe fa6a 	bl	8015592 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80170be:	2101      	movs	r1, #1
 80170c0:	6838      	ldr	r0, [r7, #0]
 80170c2:	f000 fd8d 	bl	8017be0 <prvAddCurrentTaskToDelayedList>
}
 80170c6:	bf00      	nop
 80170c8:	3710      	adds	r7, #16
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	200025f8 	.word	0x200025f8

080170d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b086      	sub	sp, #24
 80170d8:	af00      	add	r7, sp, #0
 80170da:	60f8      	str	r0, [r7, #12]
 80170dc:	60b9      	str	r1, [r7, #8]
 80170de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d109      	bne.n	80170fa <vTaskPlaceOnEventListRestricted+0x26>
 80170e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ea:	f383 8811 	msr	BASEPRI, r3
 80170ee:	f3bf 8f6f 	isb	sy
 80170f2:	f3bf 8f4f 	dsb	sy
 80170f6:	617b      	str	r3, [r7, #20]
 80170f8:	e7fe      	b.n	80170f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80170fa:	4b0a      	ldr	r3, [pc, #40]	; (8017124 <vTaskPlaceOnEventListRestricted+0x50>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	3318      	adds	r3, #24
 8017100:	4619      	mov	r1, r3
 8017102:	68f8      	ldr	r0, [r7, #12]
 8017104:	f7fe fa21 	bl	801554a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d002      	beq.n	8017114 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801710e:	f04f 33ff 	mov.w	r3, #4294967295
 8017112:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017114:	6879      	ldr	r1, [r7, #4]
 8017116:	68b8      	ldr	r0, [r7, #8]
 8017118:	f000 fd62 	bl	8017be0 <prvAddCurrentTaskToDelayedList>
	}
 801711c:	bf00      	nop
 801711e:	3718      	adds	r7, #24
 8017120:	46bd      	mov	sp, r7
 8017122:	bd80      	pop	{r7, pc}
 8017124:	200025f8 	.word	0x200025f8

08017128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b086      	sub	sp, #24
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	68db      	ldr	r3, [r3, #12]
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d109      	bne.n	8017152 <xTaskRemoveFromEventList+0x2a>
 801713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017142:	f383 8811 	msr	BASEPRI, r3
 8017146:	f3bf 8f6f 	isb	sy
 801714a:	f3bf 8f4f 	dsb	sy
 801714e:	60fb      	str	r3, [r7, #12]
 8017150:	e7fe      	b.n	8017150 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017152:	693b      	ldr	r3, [r7, #16]
 8017154:	3318      	adds	r3, #24
 8017156:	4618      	mov	r0, r3
 8017158:	f7fe fa54 	bl	8015604 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801715c:	4b1e      	ldr	r3, [pc, #120]	; (80171d8 <xTaskRemoveFromEventList+0xb0>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d11f      	bne.n	80171a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	3304      	adds	r3, #4
 8017168:	4618      	mov	r0, r3
 801716a:	f7fe fa4b 	bl	8015604 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017172:	4b1a      	ldr	r3, [pc, #104]	; (80171dc <xTaskRemoveFromEventList+0xb4>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	429a      	cmp	r2, r3
 8017178:	d903      	bls.n	8017182 <xTaskRemoveFromEventList+0x5a>
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801717e:	4a17      	ldr	r2, [pc, #92]	; (80171dc <xTaskRemoveFromEventList+0xb4>)
 8017180:	6013      	str	r3, [r2, #0]
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017186:	4613      	mov	r3, r2
 8017188:	009b      	lsls	r3, r3, #2
 801718a:	4413      	add	r3, r2
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	4a14      	ldr	r2, [pc, #80]	; (80171e0 <xTaskRemoveFromEventList+0xb8>)
 8017190:	441a      	add	r2, r3
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	3304      	adds	r3, #4
 8017196:	4619      	mov	r1, r3
 8017198:	4610      	mov	r0, r2
 801719a:	f7fe f9d6 	bl	801554a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 801719e:	f000 f981 	bl	80174a4 <prvResetNextTaskUnblockTime>
 80171a2:	e005      	b.n	80171b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	3318      	adds	r3, #24
 80171a8:	4619      	mov	r1, r3
 80171aa:	480e      	ldr	r0, [pc, #56]	; (80171e4 <xTaskRemoveFromEventList+0xbc>)
 80171ac:	f7fe f9cd 	bl	801554a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171b4:	4b0c      	ldr	r3, [pc, #48]	; (80171e8 <xTaskRemoveFromEventList+0xc0>)
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d905      	bls.n	80171ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80171be:	2301      	movs	r3, #1
 80171c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80171c2:	4b0a      	ldr	r3, [pc, #40]	; (80171ec <xTaskRemoveFromEventList+0xc4>)
 80171c4:	2201      	movs	r2, #1
 80171c6:	601a      	str	r2, [r3, #0]
 80171c8:	e001      	b.n	80171ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80171ca:	2300      	movs	r3, #0
 80171cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80171ce:	697b      	ldr	r3, [r7, #20]
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	3718      	adds	r7, #24
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	20002af4 	.word	0x20002af4
 80171dc:	20002ad4 	.word	0x20002ad4
 80171e0:	200025fc 	.word	0x200025fc
 80171e4:	20002a8c 	.word	0x20002a8c
 80171e8:	200025f8 	.word	0x200025f8
 80171ec:	20002ae0 	.word	0x20002ae0

080171f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80171f0:	b480      	push	{r7}
 80171f2:	b083      	sub	sp, #12
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80171f8:	4b06      	ldr	r3, [pc, #24]	; (8017214 <vTaskInternalSetTimeOutState+0x24>)
 80171fa:	681a      	ldr	r2, [r3, #0]
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017200:	4b05      	ldr	r3, [pc, #20]	; (8017218 <vTaskInternalSetTimeOutState+0x28>)
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	605a      	str	r2, [r3, #4]
}
 8017208:	bf00      	nop
 801720a:	370c      	adds	r7, #12
 801720c:	46bd      	mov	sp, r7
 801720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017212:	4770      	bx	lr
 8017214:	20002ae4 	.word	0x20002ae4
 8017218:	20002ad0 	.word	0x20002ad0

0801721c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b088      	sub	sp, #32
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d109      	bne.n	8017240 <xTaskCheckForTimeOut+0x24>
 801722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017230:	f383 8811 	msr	BASEPRI, r3
 8017234:	f3bf 8f6f 	isb	sy
 8017238:	f3bf 8f4f 	dsb	sy
 801723c:	613b      	str	r3, [r7, #16]
 801723e:	e7fe      	b.n	801723e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d109      	bne.n	801725a <xTaskCheckForTimeOut+0x3e>
 8017246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801724a:	f383 8811 	msr	BASEPRI, r3
 801724e:	f3bf 8f6f 	isb	sy
 8017252:	f3bf 8f4f 	dsb	sy
 8017256:	60fb      	str	r3, [r7, #12]
 8017258:	e7fe      	b.n	8017258 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801725a:	f001 fa5f 	bl	801871c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801725e:	4b1d      	ldr	r3, [pc, #116]	; (80172d4 <xTaskCheckForTimeOut+0xb8>)
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	69ba      	ldr	r2, [r7, #24]
 801726a:	1ad3      	subs	r3, r2, r3
 801726c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017276:	d102      	bne.n	801727e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017278:	2300      	movs	r3, #0
 801727a:	61fb      	str	r3, [r7, #28]
 801727c:	e023      	b.n	80172c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	681a      	ldr	r2, [r3, #0]
 8017282:	4b15      	ldr	r3, [pc, #84]	; (80172d8 <xTaskCheckForTimeOut+0xbc>)
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	429a      	cmp	r2, r3
 8017288:	d007      	beq.n	801729a <xTaskCheckForTimeOut+0x7e>
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	69ba      	ldr	r2, [r7, #24]
 8017290:	429a      	cmp	r2, r3
 8017292:	d302      	bcc.n	801729a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017294:	2301      	movs	r3, #1
 8017296:	61fb      	str	r3, [r7, #28]
 8017298:	e015      	b.n	80172c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801729a:	683b      	ldr	r3, [r7, #0]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	697a      	ldr	r2, [r7, #20]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d20b      	bcs.n	80172bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	681a      	ldr	r2, [r3, #0]
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	1ad2      	subs	r2, r2, r3
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80172b0:	6878      	ldr	r0, [r7, #4]
 80172b2:	f7ff ff9d 	bl	80171f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80172b6:	2300      	movs	r3, #0
 80172b8:	61fb      	str	r3, [r7, #28]
 80172ba:	e004      	b.n	80172c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80172bc:	683b      	ldr	r3, [r7, #0]
 80172be:	2200      	movs	r2, #0
 80172c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80172c2:	2301      	movs	r3, #1
 80172c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80172c6:	f001 fa57 	bl	8018778 <vPortExitCritical>

	return xReturn;
 80172ca:	69fb      	ldr	r3, [r7, #28]
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	3720      	adds	r7, #32
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	20002ad0 	.word	0x20002ad0
 80172d8:	20002ae4 	.word	0x20002ae4

080172dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80172dc:	b480      	push	{r7}
 80172de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80172e0:	4b03      	ldr	r3, [pc, #12]	; (80172f0 <vTaskMissedYield+0x14>)
 80172e2:	2201      	movs	r2, #1
 80172e4:	601a      	str	r2, [r3, #0]
}
 80172e6:	bf00      	nop
 80172e8:	46bd      	mov	sp, r7
 80172ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ee:	4770      	bx	lr
 80172f0:	20002ae0 	.word	0x20002ae0

080172f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80172fc:	f000 f878 	bl	80173f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017300:	4b17      	ldr	r3, [pc, #92]	; (8017360 <prvIdleTask+0x6c>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	2b01      	cmp	r3, #1
 8017306:	d907      	bls.n	8017318 <prvIdleTask+0x24>
			{
				taskYIELD();
 8017308:	4b16      	ldr	r3, [pc, #88]	; (8017364 <prvIdleTask+0x70>)
 801730a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801730e:	601a      	str	r2, [r3, #0]
 8017310:	f3bf 8f4f 	dsb	sy
 8017314:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8017318:	f7ff fc8c 	bl	8016c34 <prvGetExpectedIdleTime>
 801731c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	2b01      	cmp	r3, #1
 8017322:	d9eb      	bls.n	80172fc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8017324:	f7ff fc78 	bl	8016c18 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8017328:	4b0f      	ldr	r3, [pc, #60]	; (8017368 <prvIdleTask+0x74>)
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	4b0f      	ldr	r3, [pc, #60]	; (801736c <prvIdleTask+0x78>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	429a      	cmp	r2, r3
 8017332:	d209      	bcs.n	8017348 <prvIdleTask+0x54>
 8017334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017338:	f383 8811 	msr	BASEPRI, r3
 801733c:	f3bf 8f6f 	isb	sy
 8017340:	f3bf 8f4f 	dsb	sy
 8017344:	60bb      	str	r3, [r7, #8]
 8017346:	e7fe      	b.n	8017346 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8017348:	f7ff fc74 	bl	8016c34 <prvGetExpectedIdleTime>
 801734c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	2b01      	cmp	r3, #1
 8017352:	d902      	bls.n	801735a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8017354:	68f8      	ldr	r0, [r7, #12]
 8017356:	f7eb f933 	bl	80025c0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801735a:	f7ff fca3 	bl	8016ca4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801735e:	e7cd      	b.n	80172fc <prvIdleTask+0x8>
 8017360:	200025fc 	.word	0x200025fc
 8017364:	e000ed04 	.word	0xe000ed04
 8017368:	20002aec 	.word	0x20002aec
 801736c:	20002ad0 	.word	0x20002ad0

08017370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017376:	2300      	movs	r3, #0
 8017378:	607b      	str	r3, [r7, #4]
 801737a:	e00c      	b.n	8017396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801737c:	687a      	ldr	r2, [r7, #4]
 801737e:	4613      	mov	r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	4413      	add	r3, r2
 8017384:	009b      	lsls	r3, r3, #2
 8017386:	4a12      	ldr	r2, [pc, #72]	; (80173d0 <prvInitialiseTaskLists+0x60>)
 8017388:	4413      	add	r3, r2
 801738a:	4618      	mov	r0, r3
 801738c:	f7fe f8b0 	bl	80154f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	3301      	adds	r3, #1
 8017394:	607b      	str	r3, [r7, #4]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	2b37      	cmp	r3, #55	; 0x37
 801739a:	d9ef      	bls.n	801737c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801739c:	480d      	ldr	r0, [pc, #52]	; (80173d4 <prvInitialiseTaskLists+0x64>)
 801739e:	f7fe f8a7 	bl	80154f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80173a2:	480d      	ldr	r0, [pc, #52]	; (80173d8 <prvInitialiseTaskLists+0x68>)
 80173a4:	f7fe f8a4 	bl	80154f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80173a8:	480c      	ldr	r0, [pc, #48]	; (80173dc <prvInitialiseTaskLists+0x6c>)
 80173aa:	f7fe f8a1 	bl	80154f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80173ae:	480c      	ldr	r0, [pc, #48]	; (80173e0 <prvInitialiseTaskLists+0x70>)
 80173b0:	f7fe f89e 	bl	80154f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80173b4:	480b      	ldr	r0, [pc, #44]	; (80173e4 <prvInitialiseTaskLists+0x74>)
 80173b6:	f7fe f89b 	bl	80154f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80173ba:	4b0b      	ldr	r3, [pc, #44]	; (80173e8 <prvInitialiseTaskLists+0x78>)
 80173bc:	4a05      	ldr	r2, [pc, #20]	; (80173d4 <prvInitialiseTaskLists+0x64>)
 80173be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80173c0:	4b0a      	ldr	r3, [pc, #40]	; (80173ec <prvInitialiseTaskLists+0x7c>)
 80173c2:	4a05      	ldr	r2, [pc, #20]	; (80173d8 <prvInitialiseTaskLists+0x68>)
 80173c4:	601a      	str	r2, [r3, #0]
}
 80173c6:	bf00      	nop
 80173c8:	3708      	adds	r7, #8
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	200025fc 	.word	0x200025fc
 80173d4:	20002a5c 	.word	0x20002a5c
 80173d8:	20002a70 	.word	0x20002a70
 80173dc:	20002a8c 	.word	0x20002a8c
 80173e0:	20002aa0 	.word	0x20002aa0
 80173e4:	20002ab8 	.word	0x20002ab8
 80173e8:	20002a84 	.word	0x20002a84
 80173ec:	20002a88 	.word	0x20002a88

080173f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80173f6:	e019      	b.n	801742c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80173f8:	f001 f990 	bl	801871c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80173fc:	4b0f      	ldr	r3, [pc, #60]	; (801743c <prvCheckTasksWaitingTermination+0x4c>)
 80173fe:	68db      	ldr	r3, [r3, #12]
 8017400:	68db      	ldr	r3, [r3, #12]
 8017402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	3304      	adds	r3, #4
 8017408:	4618      	mov	r0, r3
 801740a:	f7fe f8fb 	bl	8015604 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801740e:	4b0c      	ldr	r3, [pc, #48]	; (8017440 <prvCheckTasksWaitingTermination+0x50>)
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	3b01      	subs	r3, #1
 8017414:	4a0a      	ldr	r2, [pc, #40]	; (8017440 <prvCheckTasksWaitingTermination+0x50>)
 8017416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017418:	4b0a      	ldr	r3, [pc, #40]	; (8017444 <prvCheckTasksWaitingTermination+0x54>)
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	3b01      	subs	r3, #1
 801741e:	4a09      	ldr	r2, [pc, #36]	; (8017444 <prvCheckTasksWaitingTermination+0x54>)
 8017420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017422:	f001 f9a9 	bl	8018778 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f000 f80e 	bl	8017448 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801742c:	4b05      	ldr	r3, [pc, #20]	; (8017444 <prvCheckTasksWaitingTermination+0x54>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d1e1      	bne.n	80173f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017434:	bf00      	nop
 8017436:	3708      	adds	r7, #8
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}
 801743c:	20002aa0 	.word	0x20002aa0
 8017440:	20002acc 	.word	0x20002acc
 8017444:	20002ab4 	.word	0x20002ab4

08017448 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017448:	b580      	push	{r7, lr}
 801744a:	b084      	sub	sp, #16
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8017456:	2b00      	cmp	r3, #0
 8017458:	d108      	bne.n	801746c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801745e:	4618      	mov	r0, r3
 8017460:	f001 fb3c 	bl	8018adc <vPortFree>
				vPortFree( pxTCB );
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f001 fb39 	bl	8018adc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801746a:	e017      	b.n	801749c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8017472:	2b01      	cmp	r3, #1
 8017474:	d103      	bne.n	801747e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f001 fb30 	bl	8018adc <vPortFree>
	}
 801747c:	e00e      	b.n	801749c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8017484:	2b02      	cmp	r3, #2
 8017486:	d009      	beq.n	801749c <prvDeleteTCB+0x54>
 8017488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748c:	f383 8811 	msr	BASEPRI, r3
 8017490:	f3bf 8f6f 	isb	sy
 8017494:	f3bf 8f4f 	dsb	sy
 8017498:	60fb      	str	r3, [r7, #12]
 801749a:	e7fe      	b.n	801749a <prvDeleteTCB+0x52>
	}
 801749c:	bf00      	nop
 801749e:	3710      	adds	r7, #16
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}

080174a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80174a4:	b480      	push	{r7}
 80174a6:	b083      	sub	sp, #12
 80174a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80174aa:	4b0c      	ldr	r3, [pc, #48]	; (80174dc <prvResetNextTaskUnblockTime+0x38>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d104      	bne.n	80174be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80174b4:	4b0a      	ldr	r3, [pc, #40]	; (80174e0 <prvResetNextTaskUnblockTime+0x3c>)
 80174b6:	f04f 32ff 	mov.w	r2, #4294967295
 80174ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80174bc:	e008      	b.n	80174d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174be:	4b07      	ldr	r3, [pc, #28]	; (80174dc <prvResetNextTaskUnblockTime+0x38>)
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	68db      	ldr	r3, [r3, #12]
 80174c4:	68db      	ldr	r3, [r3, #12]
 80174c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	4a04      	ldr	r2, [pc, #16]	; (80174e0 <prvResetNextTaskUnblockTime+0x3c>)
 80174ce:	6013      	str	r3, [r2, #0]
}
 80174d0:	bf00      	nop
 80174d2:	370c      	adds	r7, #12
 80174d4:	46bd      	mov	sp, r7
 80174d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174da:	4770      	bx	lr
 80174dc:	20002a84 	.word	0x20002a84
 80174e0:	20002aec 	.word	0x20002aec

080174e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80174ea:	4b05      	ldr	r3, [pc, #20]	; (8017500 <xTaskGetCurrentTaskHandle+0x1c>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 80174f0:	687b      	ldr	r3, [r7, #4]
	}
 80174f2:	4618      	mov	r0, r3
 80174f4:	370c      	adds	r7, #12
 80174f6:	46bd      	mov	sp, r7
 80174f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fc:	4770      	bx	lr
 80174fe:	bf00      	nop
 8017500:	200025f8 	.word	0x200025f8

08017504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017504:	b480      	push	{r7}
 8017506:	b083      	sub	sp, #12
 8017508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801750a:	4b0b      	ldr	r3, [pc, #44]	; (8017538 <xTaskGetSchedulerState+0x34>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d102      	bne.n	8017518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017512:	2301      	movs	r3, #1
 8017514:	607b      	str	r3, [r7, #4]
 8017516:	e008      	b.n	801752a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017518:	4b08      	ldr	r3, [pc, #32]	; (801753c <xTaskGetSchedulerState+0x38>)
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d102      	bne.n	8017526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017520:	2302      	movs	r3, #2
 8017522:	607b      	str	r3, [r7, #4]
 8017524:	e001      	b.n	801752a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017526:	2300      	movs	r3, #0
 8017528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801752a:	687b      	ldr	r3, [r7, #4]
	}
 801752c:	4618      	mov	r0, r3
 801752e:	370c      	adds	r7, #12
 8017530:	46bd      	mov	sp, r7
 8017532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017536:	4770      	bx	lr
 8017538:	20002ad8 	.word	0x20002ad8
 801753c:	20002af4 	.word	0x20002af4

08017540 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017540:	b580      	push	{r7, lr}
 8017542:	b084      	sub	sp, #16
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801754c:	2300      	movs	r3, #0
 801754e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d051      	beq.n	80175fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017556:	68bb      	ldr	r3, [r7, #8]
 8017558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801755a:	4b2a      	ldr	r3, [pc, #168]	; (8017604 <xTaskPriorityInherit+0xc4>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017560:	429a      	cmp	r2, r3
 8017562:	d241      	bcs.n	80175e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	699b      	ldr	r3, [r3, #24]
 8017568:	2b00      	cmp	r3, #0
 801756a:	db06      	blt.n	801757a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801756c:	4b25      	ldr	r3, [pc, #148]	; (8017604 <xTaskPriorityInherit+0xc4>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	6959      	ldr	r1, [r3, #20]
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017582:	4613      	mov	r3, r2
 8017584:	009b      	lsls	r3, r3, #2
 8017586:	4413      	add	r3, r2
 8017588:	009b      	lsls	r3, r3, #2
 801758a:	4a1f      	ldr	r2, [pc, #124]	; (8017608 <xTaskPriorityInherit+0xc8>)
 801758c:	4413      	add	r3, r2
 801758e:	4299      	cmp	r1, r3
 8017590:	d122      	bne.n	80175d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	3304      	adds	r3, #4
 8017596:	4618      	mov	r0, r3
 8017598:	f7fe f834 	bl	8015604 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801759c:	4b19      	ldr	r3, [pc, #100]	; (8017604 <xTaskPriorityInherit+0xc4>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175aa:	4b18      	ldr	r3, [pc, #96]	; (801760c <xTaskPriorityInherit+0xcc>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d903      	bls.n	80175ba <xTaskPriorityInherit+0x7a>
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b6:	4a15      	ldr	r2, [pc, #84]	; (801760c <xTaskPriorityInherit+0xcc>)
 80175b8:	6013      	str	r3, [r2, #0]
 80175ba:	68bb      	ldr	r3, [r7, #8]
 80175bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175be:	4613      	mov	r3, r2
 80175c0:	009b      	lsls	r3, r3, #2
 80175c2:	4413      	add	r3, r2
 80175c4:	009b      	lsls	r3, r3, #2
 80175c6:	4a10      	ldr	r2, [pc, #64]	; (8017608 <xTaskPriorityInherit+0xc8>)
 80175c8:	441a      	add	r2, r3
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	3304      	adds	r3, #4
 80175ce:	4619      	mov	r1, r3
 80175d0:	4610      	mov	r0, r2
 80175d2:	f7fd ffba 	bl	801554a <vListInsertEnd>
 80175d6:	e004      	b.n	80175e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80175d8:	4b0a      	ldr	r3, [pc, #40]	; (8017604 <xTaskPriorityInherit+0xc4>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80175e2:	2301      	movs	r3, #1
 80175e4:	60fb      	str	r3, [r7, #12]
 80175e6:	e008      	b.n	80175fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80175ec:	4b05      	ldr	r3, [pc, #20]	; (8017604 <xTaskPriorityInherit+0xc4>)
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175f2:	429a      	cmp	r2, r3
 80175f4:	d201      	bcs.n	80175fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80175f6:	2301      	movs	r3, #1
 80175f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80175fa:	68fb      	ldr	r3, [r7, #12]
	}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3710      	adds	r7, #16
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	200025f8 	.word	0x200025f8
 8017608:	200025fc 	.word	0x200025fc
 801760c:	20002ad4 	.word	0x20002ad4

08017610 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017610:	b580      	push	{r7, lr}
 8017612:	b086      	sub	sp, #24
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801761c:	2300      	movs	r3, #0
 801761e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d054      	beq.n	80176d0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017626:	4b2d      	ldr	r3, [pc, #180]	; (80176dc <xTaskPriorityDisinherit+0xcc>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	693a      	ldr	r2, [r7, #16]
 801762c:	429a      	cmp	r2, r3
 801762e:	d009      	beq.n	8017644 <xTaskPriorityDisinherit+0x34>
 8017630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017634:	f383 8811 	msr	BASEPRI, r3
 8017638:	f3bf 8f6f 	isb	sy
 801763c:	f3bf 8f4f 	dsb	sy
 8017640:	60fb      	str	r3, [r7, #12]
 8017642:	e7fe      	b.n	8017642 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017648:	2b00      	cmp	r3, #0
 801764a:	d109      	bne.n	8017660 <xTaskPriorityDisinherit+0x50>
 801764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017650:	f383 8811 	msr	BASEPRI, r3
 8017654:	f3bf 8f6f 	isb	sy
 8017658:	f3bf 8f4f 	dsb	sy
 801765c:	60bb      	str	r3, [r7, #8]
 801765e:	e7fe      	b.n	801765e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017664:	1e5a      	subs	r2, r3, #1
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801766a:	693b      	ldr	r3, [r7, #16]
 801766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017672:	429a      	cmp	r2, r3
 8017674:	d02c      	beq.n	80176d0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017676:	693b      	ldr	r3, [r7, #16]
 8017678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801767a:	2b00      	cmp	r3, #0
 801767c:	d128      	bne.n	80176d0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	3304      	adds	r3, #4
 8017682:	4618      	mov	r0, r3
 8017684:	f7fd ffbe 	bl	8015604 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017690:	693b      	ldr	r3, [r7, #16]
 8017692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801769c:	693b      	ldr	r3, [r7, #16]
 801769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176a0:	4b0f      	ldr	r3, [pc, #60]	; (80176e0 <xTaskPriorityDisinherit+0xd0>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d903      	bls.n	80176b0 <xTaskPriorityDisinherit+0xa0>
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ac:	4a0c      	ldr	r2, [pc, #48]	; (80176e0 <xTaskPriorityDisinherit+0xd0>)
 80176ae:	6013      	str	r3, [r2, #0]
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176b4:	4613      	mov	r3, r2
 80176b6:	009b      	lsls	r3, r3, #2
 80176b8:	4413      	add	r3, r2
 80176ba:	009b      	lsls	r3, r3, #2
 80176bc:	4a09      	ldr	r2, [pc, #36]	; (80176e4 <xTaskPriorityDisinherit+0xd4>)
 80176be:	441a      	add	r2, r3
 80176c0:	693b      	ldr	r3, [r7, #16]
 80176c2:	3304      	adds	r3, #4
 80176c4:	4619      	mov	r1, r3
 80176c6:	4610      	mov	r0, r2
 80176c8:	f7fd ff3f 	bl	801554a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80176cc:	2301      	movs	r3, #1
 80176ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80176d0:	697b      	ldr	r3, [r7, #20]
	}
 80176d2:	4618      	mov	r0, r3
 80176d4:	3718      	adds	r7, #24
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}
 80176da:	bf00      	nop
 80176dc:	200025f8 	.word	0x200025f8
 80176e0:	20002ad4 	.word	0x20002ad4
 80176e4:	200025fc 	.word	0x200025fc

080176e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b088      	sub	sp, #32
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80176f6:	2301      	movs	r3, #1
 80176f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d068      	beq.n	80177d2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017700:	69bb      	ldr	r3, [r7, #24]
 8017702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017704:	2b00      	cmp	r3, #0
 8017706:	d109      	bne.n	801771c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8017708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801770c:	f383 8811 	msr	BASEPRI, r3
 8017710:	f3bf 8f6f 	isb	sy
 8017714:	f3bf 8f4f 	dsb	sy
 8017718:	60fb      	str	r3, [r7, #12]
 801771a:	e7fe      	b.n	801771a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801771c:	69bb      	ldr	r3, [r7, #24]
 801771e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017720:	683a      	ldr	r2, [r7, #0]
 8017722:	429a      	cmp	r2, r3
 8017724:	d902      	bls.n	801772c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	61fb      	str	r3, [r7, #28]
 801772a:	e002      	b.n	8017732 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801772c:	69bb      	ldr	r3, [r7, #24]
 801772e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017730:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017732:	69bb      	ldr	r3, [r7, #24]
 8017734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017736:	69fa      	ldr	r2, [r7, #28]
 8017738:	429a      	cmp	r2, r3
 801773a:	d04a      	beq.n	80177d2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801773c:	69bb      	ldr	r3, [r7, #24]
 801773e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017740:	697a      	ldr	r2, [r7, #20]
 8017742:	429a      	cmp	r2, r3
 8017744:	d145      	bne.n	80177d2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017746:	4b25      	ldr	r3, [pc, #148]	; (80177dc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	69ba      	ldr	r2, [r7, #24]
 801774c:	429a      	cmp	r2, r3
 801774e:	d109      	bne.n	8017764 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8017750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017754:	f383 8811 	msr	BASEPRI, r3
 8017758:	f3bf 8f6f 	isb	sy
 801775c:	f3bf 8f4f 	dsb	sy
 8017760:	60bb      	str	r3, [r7, #8]
 8017762:	e7fe      	b.n	8017762 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017768:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801776a:	69bb      	ldr	r3, [r7, #24]
 801776c:	69fa      	ldr	r2, [r7, #28]
 801776e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017770:	69bb      	ldr	r3, [r7, #24]
 8017772:	699b      	ldr	r3, [r3, #24]
 8017774:	2b00      	cmp	r3, #0
 8017776:	db04      	blt.n	8017782 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017778:	69fb      	ldr	r3, [r7, #28]
 801777a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801777e:	69bb      	ldr	r3, [r7, #24]
 8017780:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	6959      	ldr	r1, [r3, #20]
 8017786:	693a      	ldr	r2, [r7, #16]
 8017788:	4613      	mov	r3, r2
 801778a:	009b      	lsls	r3, r3, #2
 801778c:	4413      	add	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	4a13      	ldr	r2, [pc, #76]	; (80177e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017792:	4413      	add	r3, r2
 8017794:	4299      	cmp	r1, r3
 8017796:	d11c      	bne.n	80177d2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017798:	69bb      	ldr	r3, [r7, #24]
 801779a:	3304      	adds	r3, #4
 801779c:	4618      	mov	r0, r3
 801779e:	f7fd ff31 	bl	8015604 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80177a2:	69bb      	ldr	r3, [r7, #24]
 80177a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177a6:	4b0f      	ldr	r3, [pc, #60]	; (80177e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	429a      	cmp	r2, r3
 80177ac:	d903      	bls.n	80177b6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80177ae:	69bb      	ldr	r3, [r7, #24]
 80177b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b2:	4a0c      	ldr	r2, [pc, #48]	; (80177e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80177b4:	6013      	str	r3, [r2, #0]
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177ba:	4613      	mov	r3, r2
 80177bc:	009b      	lsls	r3, r3, #2
 80177be:	4413      	add	r3, r2
 80177c0:	009b      	lsls	r3, r3, #2
 80177c2:	4a07      	ldr	r2, [pc, #28]	; (80177e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80177c4:	441a      	add	r2, r3
 80177c6:	69bb      	ldr	r3, [r7, #24]
 80177c8:	3304      	adds	r3, #4
 80177ca:	4619      	mov	r1, r3
 80177cc:	4610      	mov	r0, r2
 80177ce:	f7fd febc 	bl	801554a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80177d2:	bf00      	nop
 80177d4:	3720      	adds	r7, #32
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	200025f8 	.word	0x200025f8
 80177e0:	200025fc 	.word	0x200025fc
 80177e4:	20002ad4 	.word	0x20002ad4

080177e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80177e8:	b480      	push	{r7}
 80177ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80177ec:	4b07      	ldr	r3, [pc, #28]	; (801780c <pvTaskIncrementMutexHeldCount+0x24>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d004      	beq.n	80177fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80177f4:	4b05      	ldr	r3, [pc, #20]	; (801780c <pvTaskIncrementMutexHeldCount+0x24>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80177fa:	3201      	adds	r2, #1
 80177fc:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80177fe:	4b03      	ldr	r3, [pc, #12]	; (801780c <pvTaskIncrementMutexHeldCount+0x24>)
 8017800:	681b      	ldr	r3, [r3, #0]
	}
 8017802:	4618      	mov	r0, r3
 8017804:	46bd      	mov	sp, r7
 8017806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780a:	4770      	bx	lr
 801780c:	200025f8 	.word	0x200025f8

08017810 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8017810:	b580      	push	{r7, lr}
 8017812:	b086      	sub	sp, #24
 8017814:	af00      	add	r7, sp, #0
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	60b9      	str	r1, [r7, #8]
 801781a:	607a      	str	r2, [r7, #4]
 801781c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801781e:	f000 ff7d 	bl	801871c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017822:	4b26      	ldr	r3, [pc, #152]	; (80178bc <xTaskNotifyWait+0xac>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801782a:	b2db      	uxtb	r3, r3
 801782c:	2b02      	cmp	r3, #2
 801782e:	d01a      	beq.n	8017866 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8017830:	4b22      	ldr	r3, [pc, #136]	; (80178bc <xTaskNotifyWait+0xac>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	43d2      	mvns	r2, r2
 801783a:	400a      	ands	r2, r1
 801783c:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801783e:	4b1f      	ldr	r3, [pc, #124]	; (80178bc <xTaskNotifyWait+0xac>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	2201      	movs	r2, #1
 8017844:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d00b      	beq.n	8017866 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801784e:	2101      	movs	r1, #1
 8017850:	6838      	ldr	r0, [r7, #0]
 8017852:	f000 f9c5 	bl	8017be0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017856:	4b1a      	ldr	r3, [pc, #104]	; (80178c0 <xTaskNotifyWait+0xb0>)
 8017858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801785c:	601a      	str	r2, [r3, #0]
 801785e:	f3bf 8f4f 	dsb	sy
 8017862:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017866:	f000 ff87 	bl	8018778 <vPortExitCritical>

		taskENTER_CRITICAL();
 801786a:	f000 ff57 	bl	801871c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d004      	beq.n	801787e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8017874:	4b11      	ldr	r3, [pc, #68]	; (80178bc <xTaskNotifyWait+0xac>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801787e:	4b0f      	ldr	r3, [pc, #60]	; (80178bc <xTaskNotifyWait+0xac>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8017886:	b2db      	uxtb	r3, r3
 8017888:	2b02      	cmp	r3, #2
 801788a:	d002      	beq.n	8017892 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801788c:	2300      	movs	r3, #0
 801788e:	617b      	str	r3, [r7, #20]
 8017890:	e008      	b.n	80178a4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8017892:	4b0a      	ldr	r3, [pc, #40]	; (80178bc <xTaskNotifyWait+0xac>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017898:	68ba      	ldr	r2, [r7, #8]
 801789a:	43d2      	mvns	r2, r2
 801789c:	400a      	ands	r2, r1
 801789e:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 80178a0:	2301      	movs	r3, #1
 80178a2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80178a4:	4b05      	ldr	r3, [pc, #20]	; (80178bc <xTaskNotifyWait+0xac>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	2200      	movs	r2, #0
 80178aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 80178ae:	f000 ff63 	bl	8018778 <vPortExitCritical>

		return xReturn;
 80178b2:	697b      	ldr	r3, [r7, #20]
	}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3718      	adds	r7, #24
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	200025f8 	.word	0x200025f8
 80178c0:	e000ed04 	.word	0xe000ed04

080178c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b08a      	sub	sp, #40	; 0x28
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	603b      	str	r3, [r7, #0]
 80178d0:	4613      	mov	r3, r2
 80178d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80178d4:	2301      	movs	r3, #1
 80178d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d109      	bne.n	80178f2 <xTaskGenericNotify+0x2e>
 80178de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178e2:	f383 8811 	msr	BASEPRI, r3
 80178e6:	f3bf 8f6f 	isb	sy
 80178ea:	f3bf 8f4f 	dsb	sy
 80178ee:	61bb      	str	r3, [r7, #24]
 80178f0:	e7fe      	b.n	80178f0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80178f6:	f000 ff11 	bl	801871c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d003      	beq.n	8017908 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017900:	6a3b      	ldr	r3, [r7, #32]
 8017902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017908:	6a3b      	ldr	r3, [r7, #32]
 801790a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801790e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017910:	6a3b      	ldr	r3, [r7, #32]
 8017912:	2202      	movs	r2, #2
 8017914:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8017918:	79fb      	ldrb	r3, [r7, #7]
 801791a:	2b04      	cmp	r3, #4
 801791c:	d827      	bhi.n	801796e <xTaskGenericNotify+0xaa>
 801791e:	a201      	add	r2, pc, #4	; (adr r2, 8017924 <xTaskGenericNotify+0x60>)
 8017920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017924:	0801798d 	.word	0x0801798d
 8017928:	08017939 	.word	0x08017939
 801792c:	08017947 	.word	0x08017947
 8017930:	08017953 	.word	0x08017953
 8017934:	0801795b 	.word	0x0801795b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017938:	6a3b      	ldr	r3, [r7, #32]
 801793a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801793c:	68bb      	ldr	r3, [r7, #8]
 801793e:	431a      	orrs	r2, r3
 8017940:	6a3b      	ldr	r3, [r7, #32]
 8017942:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8017944:	e025      	b.n	8017992 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017946:	6a3b      	ldr	r3, [r7, #32]
 8017948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801794a:	1c5a      	adds	r2, r3, #1
 801794c:	6a3b      	ldr	r3, [r7, #32]
 801794e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8017950:	e01f      	b.n	8017992 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017952:	6a3b      	ldr	r3, [r7, #32]
 8017954:	68ba      	ldr	r2, [r7, #8]
 8017956:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8017958:	e01b      	b.n	8017992 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801795a:	7ffb      	ldrb	r3, [r7, #31]
 801795c:	2b02      	cmp	r3, #2
 801795e:	d003      	beq.n	8017968 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017960:	6a3b      	ldr	r3, [r7, #32]
 8017962:	68ba      	ldr	r2, [r7, #8]
 8017964:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017966:	e014      	b.n	8017992 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8017968:	2300      	movs	r3, #0
 801796a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801796c:	e011      	b.n	8017992 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801796e:	6a3b      	ldr	r3, [r7, #32]
 8017970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017976:	d00b      	beq.n	8017990 <xTaskGenericNotify+0xcc>
 8017978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801797c:	f383 8811 	msr	BASEPRI, r3
 8017980:	f3bf 8f6f 	isb	sy
 8017984:	f3bf 8f4f 	dsb	sy
 8017988:	617b      	str	r3, [r7, #20]
 801798a:	e7fe      	b.n	801798a <xTaskGenericNotify+0xc6>
					break;
 801798c:	bf00      	nop
 801798e:	e000      	b.n	8017992 <xTaskGenericNotify+0xce>

					break;
 8017990:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017992:	7ffb      	ldrb	r3, [r7, #31]
 8017994:	2b01      	cmp	r3, #1
 8017996:	d13b      	bne.n	8017a10 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017998:	6a3b      	ldr	r3, [r7, #32]
 801799a:	3304      	adds	r3, #4
 801799c:	4618      	mov	r0, r3
 801799e:	f7fd fe31 	bl	8015604 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80179a2:	6a3b      	ldr	r3, [r7, #32]
 80179a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a6:	4b1e      	ldr	r3, [pc, #120]	; (8017a20 <xTaskGenericNotify+0x15c>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	429a      	cmp	r2, r3
 80179ac:	d903      	bls.n	80179b6 <xTaskGenericNotify+0xf2>
 80179ae:	6a3b      	ldr	r3, [r7, #32]
 80179b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179b2:	4a1b      	ldr	r2, [pc, #108]	; (8017a20 <xTaskGenericNotify+0x15c>)
 80179b4:	6013      	str	r3, [r2, #0]
 80179b6:	6a3b      	ldr	r3, [r7, #32]
 80179b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ba:	4613      	mov	r3, r2
 80179bc:	009b      	lsls	r3, r3, #2
 80179be:	4413      	add	r3, r2
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	4a18      	ldr	r2, [pc, #96]	; (8017a24 <xTaskGenericNotify+0x160>)
 80179c4:	441a      	add	r2, r3
 80179c6:	6a3b      	ldr	r3, [r7, #32]
 80179c8:	3304      	adds	r3, #4
 80179ca:	4619      	mov	r1, r3
 80179cc:	4610      	mov	r0, r2
 80179ce:	f7fd fdbc 	bl	801554a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80179d2:	6a3b      	ldr	r3, [r7, #32]
 80179d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d009      	beq.n	80179ee <xTaskGenericNotify+0x12a>
 80179da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179de:	f383 8811 	msr	BASEPRI, r3
 80179e2:	f3bf 8f6f 	isb	sy
 80179e6:	f3bf 8f4f 	dsb	sy
 80179ea:	613b      	str	r3, [r7, #16]
 80179ec:	e7fe      	b.n	80179ec <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80179ee:	f7ff fd59 	bl	80174a4 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80179f2:	6a3b      	ldr	r3, [r7, #32]
 80179f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f6:	4b0c      	ldr	r3, [pc, #48]	; (8017a28 <xTaskGenericNotify+0x164>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d907      	bls.n	8017a10 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8017a00:	4b0a      	ldr	r3, [pc, #40]	; (8017a2c <xTaskGenericNotify+0x168>)
 8017a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a06:	601a      	str	r2, [r3, #0]
 8017a08:	f3bf 8f4f 	dsb	sy
 8017a0c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017a10:	f000 feb2 	bl	8018778 <vPortExitCritical>

		return xReturn;
 8017a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3728      	adds	r7, #40	; 0x28
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	20002ad4 	.word	0x20002ad4
 8017a24:	200025fc 	.word	0x200025fc
 8017a28:	200025f8 	.word	0x200025f8
 8017a2c:	e000ed04 	.word	0xe000ed04

08017a30 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b08e      	sub	sp, #56	; 0x38
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	60f8      	str	r0, [r7, #12]
 8017a38:	60b9      	str	r1, [r7, #8]
 8017a3a:	603b      	str	r3, [r7, #0]
 8017a3c:	4613      	mov	r3, r2
 8017a3e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8017a40:	2301      	movs	r3, #1
 8017a42:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d109      	bne.n	8017a5e <xTaskGenericNotifyFromISR+0x2e>
 8017a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4e:	f383 8811 	msr	BASEPRI, r3
 8017a52:	f3bf 8f6f 	isb	sy
 8017a56:	f3bf 8f4f 	dsb	sy
 8017a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8017a5c:	e7fe      	b.n	8017a5c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017a5e:	f000 ff39 	bl	80188d4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8017a66:	f3ef 8211 	mrs	r2, BASEPRI
 8017a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a6e:	f383 8811 	msr	BASEPRI, r3
 8017a72:	f3bf 8f6f 	isb	sy
 8017a76:	f3bf 8f4f 	dsb	sy
 8017a7a:	623a      	str	r2, [r7, #32]
 8017a7c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8017a7e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017a80:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8017a82:	683b      	ldr	r3, [r7, #0]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d003      	beq.n	8017a90 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017a8c:	683b      	ldr	r3, [r7, #0]
 8017a8e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a92:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8017a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a9c:	2202      	movs	r2, #2
 8017a9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8017aa2:	79fb      	ldrb	r3, [r7, #7]
 8017aa4:	2b04      	cmp	r3, #4
 8017aa6:	d829      	bhi.n	8017afc <xTaskGenericNotifyFromISR+0xcc>
 8017aa8:	a201      	add	r2, pc, #4	; (adr r2, 8017ab0 <xTaskGenericNotifyFromISR+0x80>)
 8017aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aae:	bf00      	nop
 8017ab0:	08017b1b 	.word	0x08017b1b
 8017ab4:	08017ac5 	.word	0x08017ac5
 8017ab8:	08017ad3 	.word	0x08017ad3
 8017abc:	08017adf 	.word	0x08017adf
 8017ac0:	08017ae7 	.word	0x08017ae7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017ac8:	68bb      	ldr	r3, [r7, #8]
 8017aca:	431a      	orrs	r2, r3
 8017acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ace:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8017ad0:	e026      	b.n	8017b20 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ad6:	1c5a      	adds	r2, r3, #1
 8017ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ada:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8017adc:	e020      	b.n	8017b20 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae0:	68ba      	ldr	r2, [r7, #8]
 8017ae2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8017ae4:	e01c      	b.n	8017b20 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017aea:	2b02      	cmp	r3, #2
 8017aec:	d003      	beq.n	8017af6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af0:	68ba      	ldr	r2, [r7, #8]
 8017af2:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017af4:	e014      	b.n	8017b20 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8017af6:	2300      	movs	r3, #0
 8017af8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8017afa:	e011      	b.n	8017b20 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b04:	d00b      	beq.n	8017b1e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8017b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	61bb      	str	r3, [r7, #24]
 8017b18:	e7fe      	b.n	8017b18 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8017b1a:	bf00      	nop
 8017b1c:	e000      	b.n	8017b20 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8017b1e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017b20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d145      	bne.n	8017bb4 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d009      	beq.n	8017b44 <xTaskGenericNotifyFromISR+0x114>
 8017b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b34:	f383 8811 	msr	BASEPRI, r3
 8017b38:	f3bf 8f6f 	isb	sy
 8017b3c:	f3bf 8f4f 	dsb	sy
 8017b40:	617b      	str	r3, [r7, #20]
 8017b42:	e7fe      	b.n	8017b42 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b44:	4b20      	ldr	r3, [pc, #128]	; (8017bc8 <xTaskGenericNotifyFromISR+0x198>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d11d      	bne.n	8017b88 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b4e:	3304      	adds	r3, #4
 8017b50:	4618      	mov	r0, r3
 8017b52:	f7fd fd57 	bl	8015604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b5a:	4b1c      	ldr	r3, [pc, #112]	; (8017bcc <xTaskGenericNotifyFromISR+0x19c>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	d903      	bls.n	8017b6a <xTaskGenericNotifyFromISR+0x13a>
 8017b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b66:	4a19      	ldr	r2, [pc, #100]	; (8017bcc <xTaskGenericNotifyFromISR+0x19c>)
 8017b68:	6013      	str	r3, [r2, #0]
 8017b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b6e:	4613      	mov	r3, r2
 8017b70:	009b      	lsls	r3, r3, #2
 8017b72:	4413      	add	r3, r2
 8017b74:	009b      	lsls	r3, r3, #2
 8017b76:	4a16      	ldr	r2, [pc, #88]	; (8017bd0 <xTaskGenericNotifyFromISR+0x1a0>)
 8017b78:	441a      	add	r2, r3
 8017b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7c:	3304      	adds	r3, #4
 8017b7e:	4619      	mov	r1, r3
 8017b80:	4610      	mov	r0, r2
 8017b82:	f7fd fce2 	bl	801554a <vListInsertEnd>
 8017b86:	e005      	b.n	8017b94 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b8a:	3318      	adds	r3, #24
 8017b8c:	4619      	mov	r1, r3
 8017b8e:	4811      	ldr	r0, [pc, #68]	; (8017bd4 <xTaskGenericNotifyFromISR+0x1a4>)
 8017b90:	f7fd fcdb 	bl	801554a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b98:	4b0f      	ldr	r3, [pc, #60]	; (8017bd8 <xTaskGenericNotifyFromISR+0x1a8>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	d908      	bls.n	8017bb4 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d002      	beq.n	8017bae <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017baa:	2201      	movs	r2, #1
 8017bac:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017bae:	4b0b      	ldr	r3, [pc, #44]	; (8017bdc <xTaskGenericNotifyFromISR+0x1ac>)
 8017bb0:	2201      	movs	r2, #1
 8017bb2:	601a      	str	r2, [r3, #0]
 8017bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017bb8:	693b      	ldr	r3, [r7, #16]
 8017bba:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8017bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3738      	adds	r7, #56	; 0x38
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	20002af4 	.word	0x20002af4
 8017bcc:	20002ad4 	.word	0x20002ad4
 8017bd0:	200025fc 	.word	0x200025fc
 8017bd4:	20002a8c 	.word	0x20002a8c
 8017bd8:	200025f8 	.word	0x200025f8
 8017bdc:	20002ae0 	.word	0x20002ae0

08017be0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
 8017be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017bea:	4b21      	ldr	r3, [pc, #132]	; (8017c70 <prvAddCurrentTaskToDelayedList+0x90>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017bf0:	4b20      	ldr	r3, [pc, #128]	; (8017c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	3304      	adds	r3, #4
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7fd fd04 	bl	8015604 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c02:	d10a      	bne.n	8017c1a <prvAddCurrentTaskToDelayedList+0x3a>
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d007      	beq.n	8017c1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c0a:	4b1a      	ldr	r3, [pc, #104]	; (8017c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	3304      	adds	r3, #4
 8017c10:	4619      	mov	r1, r3
 8017c12:	4819      	ldr	r0, [pc, #100]	; (8017c78 <prvAddCurrentTaskToDelayedList+0x98>)
 8017c14:	f7fd fc99 	bl	801554a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017c18:	e026      	b.n	8017c68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017c1a:	68fa      	ldr	r2, [r7, #12]
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	4413      	add	r3, r2
 8017c20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017c22:	4b14      	ldr	r3, [pc, #80]	; (8017c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	68ba      	ldr	r2, [r7, #8]
 8017c28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017c2a:	68ba      	ldr	r2, [r7, #8]
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	d209      	bcs.n	8017c46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c32:	4b12      	ldr	r3, [pc, #72]	; (8017c7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8017c34:	681a      	ldr	r2, [r3, #0]
 8017c36:	4b0f      	ldr	r3, [pc, #60]	; (8017c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	3304      	adds	r3, #4
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	4610      	mov	r0, r2
 8017c40:	f7fd fca7 	bl	8015592 <vListInsert>
}
 8017c44:	e010      	b.n	8017c68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c46:	4b0e      	ldr	r3, [pc, #56]	; (8017c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	4b0a      	ldr	r3, [pc, #40]	; (8017c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	3304      	adds	r3, #4
 8017c50:	4619      	mov	r1, r3
 8017c52:	4610      	mov	r0, r2
 8017c54:	f7fd fc9d 	bl	8015592 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017c58:	4b0a      	ldr	r3, [pc, #40]	; (8017c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	68ba      	ldr	r2, [r7, #8]
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d202      	bcs.n	8017c68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017c62:	4a08      	ldr	r2, [pc, #32]	; (8017c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	6013      	str	r3, [r2, #0]
}
 8017c68:	bf00      	nop
 8017c6a:	3710      	adds	r7, #16
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	20002ad0 	.word	0x20002ad0
 8017c74:	200025f8 	.word	0x200025f8
 8017c78:	20002ab8 	.word	0x20002ab8
 8017c7c:	20002a88 	.word	0x20002a88
 8017c80:	20002a84 	.word	0x20002a84
 8017c84:	20002aec 	.word	0x20002aec

08017c88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b08a      	sub	sp, #40	; 0x28
 8017c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017c92:	f000 fb97 	bl	80183c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017c96:	4b1c      	ldr	r3, [pc, #112]	; (8017d08 <xTimerCreateTimerTask+0x80>)
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d021      	beq.n	8017ce2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017ca6:	1d3a      	adds	r2, r7, #4
 8017ca8:	f107 0108 	add.w	r1, r7, #8
 8017cac:	f107 030c 	add.w	r3, r7, #12
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f7fd fc03 	bl	80154bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017cb6:	6879      	ldr	r1, [r7, #4]
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	68fa      	ldr	r2, [r7, #12]
 8017cbc:	9202      	str	r2, [sp, #8]
 8017cbe:	9301      	str	r3, [sp, #4]
 8017cc0:	2302      	movs	r3, #2
 8017cc2:	9300      	str	r3, [sp, #0]
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	460a      	mov	r2, r1
 8017cc8:	4910      	ldr	r1, [pc, #64]	; (8017d0c <xTimerCreateTimerTask+0x84>)
 8017cca:	4811      	ldr	r0, [pc, #68]	; (8017d10 <xTimerCreateTimerTask+0x88>)
 8017ccc:	f7fe fd66 	bl	801679c <xTaskCreateStatic>
 8017cd0:	4602      	mov	r2, r0
 8017cd2:	4b10      	ldr	r3, [pc, #64]	; (8017d14 <xTimerCreateTimerTask+0x8c>)
 8017cd4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017cd6:	4b0f      	ldr	r3, [pc, #60]	; (8017d14 <xTimerCreateTimerTask+0x8c>)
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d001      	beq.n	8017ce2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017cde:	2301      	movs	r3, #1
 8017ce0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d109      	bne.n	8017cfc <xTimerCreateTimerTask+0x74>
	__asm volatile
 8017ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cec:	f383 8811 	msr	BASEPRI, r3
 8017cf0:	f3bf 8f6f 	isb	sy
 8017cf4:	f3bf 8f4f 	dsb	sy
 8017cf8:	613b      	str	r3, [r7, #16]
 8017cfa:	e7fe      	b.n	8017cfa <xTimerCreateTimerTask+0x72>
	return xReturn;
 8017cfc:	697b      	ldr	r3, [r7, #20]
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	3718      	adds	r7, #24
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}
 8017d06:	bf00      	nop
 8017d08:	20002b30 	.word	0x20002b30
 8017d0c:	0801c8a0 	.word	0x0801c8a0
 8017d10:	08017f79 	.word	0x08017f79
 8017d14:	20002b34 	.word	0x20002b34

08017d18 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b088      	sub	sp, #32
 8017d1c:	af02      	add	r7, sp, #8
 8017d1e:	60f8      	str	r0, [r7, #12]
 8017d20:	60b9      	str	r1, [r7, #8]
 8017d22:	607a      	str	r2, [r7, #4]
 8017d24:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8017d26:	202c      	movs	r0, #44	; 0x2c
 8017d28:	f000 fe12 	bl	8018950 <pvPortMalloc>
 8017d2c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8017d2e:	697b      	ldr	r3, [r7, #20]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d00d      	beq.n	8017d50 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8017d34:	697b      	ldr	r3, [r7, #20]
 8017d36:	2200      	movs	r2, #0
 8017d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	9301      	str	r3, [sp, #4]
 8017d40:	6a3b      	ldr	r3, [r7, #32]
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	683b      	ldr	r3, [r7, #0]
 8017d46:	687a      	ldr	r2, [r7, #4]
 8017d48:	68b9      	ldr	r1, [r7, #8]
 8017d4a:	68f8      	ldr	r0, [r7, #12]
 8017d4c:	f000 f841 	bl	8017dd2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8017d50:	697b      	ldr	r3, [r7, #20]
	}
 8017d52:	4618      	mov	r0, r3
 8017d54:	3718      	adds	r7, #24
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd80      	pop	{r7, pc}

08017d5a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8017d5a:	b580      	push	{r7, lr}
 8017d5c:	b08a      	sub	sp, #40	; 0x28
 8017d5e:	af02      	add	r7, sp, #8
 8017d60:	60f8      	str	r0, [r7, #12]
 8017d62:	60b9      	str	r1, [r7, #8]
 8017d64:	607a      	str	r2, [r7, #4]
 8017d66:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8017d68:	232c      	movs	r3, #44	; 0x2c
 8017d6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8017d6c:	693b      	ldr	r3, [r7, #16]
 8017d6e:	2b2c      	cmp	r3, #44	; 0x2c
 8017d70:	d009      	beq.n	8017d86 <xTimerCreateStatic+0x2c>
 8017d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d76:	f383 8811 	msr	BASEPRI, r3
 8017d7a:	f3bf 8f6f 	isb	sy
 8017d7e:	f3bf 8f4f 	dsb	sy
 8017d82:	61bb      	str	r3, [r7, #24]
 8017d84:	e7fe      	b.n	8017d84 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017d86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8017d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d109      	bne.n	8017da2 <xTimerCreateStatic+0x48>
 8017d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d92:	f383 8811 	msr	BASEPRI, r3
 8017d96:	f3bf 8f6f 	isb	sy
 8017d9a:	f3bf 8f4f 	dsb	sy
 8017d9e:	617b      	str	r3, [r7, #20]
 8017da0:	e7fe      	b.n	8017da0 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8017da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8017da6:	69fb      	ldr	r3, [r7, #28]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d00d      	beq.n	8017dc8 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8017dac:	69fb      	ldr	r3, [r7, #28]
 8017dae:	2202      	movs	r2, #2
 8017db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8017db4:	69fb      	ldr	r3, [r7, #28]
 8017db6:	9301      	str	r3, [sp, #4]
 8017db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dba:	9300      	str	r3, [sp, #0]
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	687a      	ldr	r2, [r7, #4]
 8017dc0:	68b9      	ldr	r1, [r7, #8]
 8017dc2:	68f8      	ldr	r0, [r7, #12]
 8017dc4:	f000 f805 	bl	8017dd2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8017dc8:	69fb      	ldr	r3, [r7, #28]
	}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	3720      	adds	r7, #32
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}

08017dd2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8017dd2:	b580      	push	{r7, lr}
 8017dd4:	b086      	sub	sp, #24
 8017dd6:	af00      	add	r7, sp, #0
 8017dd8:	60f8      	str	r0, [r7, #12]
 8017dda:	60b9      	str	r1, [r7, #8]
 8017ddc:	607a      	str	r2, [r7, #4]
 8017dde:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8017de0:	68bb      	ldr	r3, [r7, #8]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d109      	bne.n	8017dfa <prvInitialiseNewTimer+0x28>
 8017de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dea:	f383 8811 	msr	BASEPRI, r3
 8017dee:	f3bf 8f6f 	isb	sy
 8017df2:	f3bf 8f4f 	dsb	sy
 8017df6:	617b      	str	r3, [r7, #20]
 8017df8:	e7fe      	b.n	8017df8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8017dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d01e      	beq.n	8017e3e <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8017e00:	f000 fae0 	bl	80183c4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8017e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e06:	68fa      	ldr	r2, [r7, #12]
 8017e08:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8017e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0c:	68ba      	ldr	r2, [r7, #8]
 8017e0e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8017e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e12:	683a      	ldr	r2, [r7, #0]
 8017e14:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8017e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e18:	6a3a      	ldr	r2, [r7, #32]
 8017e1a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8017e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1e:	3304      	adds	r3, #4
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7fd fb85 	bl	8015530 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d008      	beq.n	8017e3e <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8017e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e32:	f043 0304 	orr.w	r3, r3, #4
 8017e36:	b2da      	uxtb	r2, r3
 8017e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8017e3e:	bf00      	nop
 8017e40:	3718      	adds	r7, #24
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}
	...

08017e48 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b08a      	sub	sp, #40	; 0x28
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
 8017e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017e56:	2300      	movs	r3, #0
 8017e58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d109      	bne.n	8017e74 <xTimerGenericCommand+0x2c>
 8017e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e64:	f383 8811 	msr	BASEPRI, r3
 8017e68:	f3bf 8f6f 	isb	sy
 8017e6c:	f3bf 8f4f 	dsb	sy
 8017e70:	623b      	str	r3, [r7, #32]
 8017e72:	e7fe      	b.n	8017e72 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017e74:	4b19      	ldr	r3, [pc, #100]	; (8017edc <xTimerGenericCommand+0x94>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d02a      	beq.n	8017ed2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017e88:	68bb      	ldr	r3, [r7, #8]
 8017e8a:	2b05      	cmp	r3, #5
 8017e8c:	dc18      	bgt.n	8017ec0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017e8e:	f7ff fb39 	bl	8017504 <xTaskGetSchedulerState>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b02      	cmp	r3, #2
 8017e96:	d109      	bne.n	8017eac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017e98:	4b10      	ldr	r3, [pc, #64]	; (8017edc <xTimerGenericCommand+0x94>)
 8017e9a:	6818      	ldr	r0, [r3, #0]
 8017e9c:	f107 0110 	add.w	r1, r7, #16
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ea4:	f7fd fe30 	bl	8015b08 <xQueueGenericSend>
 8017ea8:	6278      	str	r0, [r7, #36]	; 0x24
 8017eaa:	e012      	b.n	8017ed2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017eac:	4b0b      	ldr	r3, [pc, #44]	; (8017edc <xTimerGenericCommand+0x94>)
 8017eae:	6818      	ldr	r0, [r3, #0]
 8017eb0:	f107 0110 	add.w	r1, r7, #16
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	f7fd fe26 	bl	8015b08 <xQueueGenericSend>
 8017ebc:	6278      	str	r0, [r7, #36]	; 0x24
 8017ebe:	e008      	b.n	8017ed2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017ec0:	4b06      	ldr	r3, [pc, #24]	; (8017edc <xTimerGenericCommand+0x94>)
 8017ec2:	6818      	ldr	r0, [r3, #0]
 8017ec4:	f107 0110 	add.w	r1, r7, #16
 8017ec8:	2300      	movs	r3, #0
 8017eca:	683a      	ldr	r2, [r7, #0]
 8017ecc:	f7fd ff16 	bl	8015cfc <xQueueGenericSendFromISR>
 8017ed0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	3728      	adds	r7, #40	; 0x28
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	bd80      	pop	{r7, pc}
 8017edc:	20002b30 	.word	0x20002b30

08017ee0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b088      	sub	sp, #32
 8017ee4:	af02      	add	r7, sp, #8
 8017ee6:	6078      	str	r0, [r7, #4]
 8017ee8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017eea:	4b22      	ldr	r3, [pc, #136]	; (8017f74 <prvProcessExpiredTimer+0x94>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	68db      	ldr	r3, [r3, #12]
 8017ef0:	68db      	ldr	r3, [r3, #12]
 8017ef2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	3304      	adds	r3, #4
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7fd fb83 	bl	8015604 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f04:	f003 0304 	and.w	r3, r3, #4
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d021      	beq.n	8017f50 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	699a      	ldr	r2, [r3, #24]
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	18d1      	adds	r1, r2, r3
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	683a      	ldr	r2, [r7, #0]
 8017f18:	6978      	ldr	r0, [r7, #20]
 8017f1a:	f000 f8d1 	bl	80180c0 <prvInsertTimerInActiveList>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d01e      	beq.n	8017f62 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017f24:	2300      	movs	r3, #0
 8017f26:	9300      	str	r3, [sp, #0]
 8017f28:	2300      	movs	r3, #0
 8017f2a:	687a      	ldr	r2, [r7, #4]
 8017f2c:	2100      	movs	r1, #0
 8017f2e:	6978      	ldr	r0, [r7, #20]
 8017f30:	f7ff ff8a 	bl	8017e48 <xTimerGenericCommand>
 8017f34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017f36:	693b      	ldr	r3, [r7, #16]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d112      	bne.n	8017f62 <prvProcessExpiredTimer+0x82>
 8017f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f40:	f383 8811 	msr	BASEPRI, r3
 8017f44:	f3bf 8f6f 	isb	sy
 8017f48:	f3bf 8f4f 	dsb	sy
 8017f4c:	60fb      	str	r3, [r7, #12]
 8017f4e:	e7fe      	b.n	8017f4e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017f50:	697b      	ldr	r3, [r7, #20]
 8017f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f56:	f023 0301 	bic.w	r3, r3, #1
 8017f5a:	b2da      	uxtb	r2, r3
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	6a1b      	ldr	r3, [r3, #32]
 8017f66:	6978      	ldr	r0, [r7, #20]
 8017f68:	4798      	blx	r3
}
 8017f6a:	bf00      	nop
 8017f6c:	3718      	adds	r7, #24
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	bf00      	nop
 8017f74:	20002b28 	.word	0x20002b28

08017f78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017f80:	f107 0308 	add.w	r3, r7, #8
 8017f84:	4618      	mov	r0, r3
 8017f86:	f000 f857 	bl	8018038 <prvGetNextExpireTime>
 8017f8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	4619      	mov	r1, r3
 8017f90:	68f8      	ldr	r0, [r7, #12]
 8017f92:	f000 f803 	bl	8017f9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017f96:	f000 f8d5 	bl	8018144 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017f9a:	e7f1      	b.n	8017f80 <prvTimerTask+0x8>

08017f9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b084      	sub	sp, #16
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017fa6:	f7fe fe37 	bl	8016c18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017faa:	f107 0308 	add.w	r3, r7, #8
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f000 f866 	bl	8018080 <prvSampleTimeNow>
 8017fb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d130      	bne.n	801801e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d10a      	bne.n	8017fd8 <prvProcessTimerOrBlockTask+0x3c>
 8017fc2:	687a      	ldr	r2, [r7, #4]
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d806      	bhi.n	8017fd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017fca:	f7fe fe6b 	bl	8016ca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017fce:	68f9      	ldr	r1, [r7, #12]
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f7ff ff85 	bl	8017ee0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017fd6:	e024      	b.n	8018022 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017fd8:	683b      	ldr	r3, [r7, #0]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d008      	beq.n	8017ff0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017fde:	4b13      	ldr	r3, [pc, #76]	; (801802c <prvProcessTimerOrBlockTask+0x90>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d101      	bne.n	8017fec <prvProcessTimerOrBlockTask+0x50>
 8017fe8:	2301      	movs	r3, #1
 8017fea:	e000      	b.n	8017fee <prvProcessTimerOrBlockTask+0x52>
 8017fec:	2300      	movs	r3, #0
 8017fee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017ff0:	4b0f      	ldr	r3, [pc, #60]	; (8018030 <prvProcessTimerOrBlockTask+0x94>)
 8017ff2:	6818      	ldr	r0, [r3, #0]
 8017ff4:	687a      	ldr	r2, [r7, #4]
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	1ad3      	subs	r3, r2, r3
 8017ffa:	683a      	ldr	r2, [r7, #0]
 8017ffc:	4619      	mov	r1, r3
 8017ffe:	f7fe fb99 	bl	8016734 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018002:	f7fe fe4f 	bl	8016ca4 <xTaskResumeAll>
 8018006:	4603      	mov	r3, r0
 8018008:	2b00      	cmp	r3, #0
 801800a:	d10a      	bne.n	8018022 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801800c:	4b09      	ldr	r3, [pc, #36]	; (8018034 <prvProcessTimerOrBlockTask+0x98>)
 801800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018012:	601a      	str	r2, [r3, #0]
 8018014:	f3bf 8f4f 	dsb	sy
 8018018:	f3bf 8f6f 	isb	sy
}
 801801c:	e001      	b.n	8018022 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801801e:	f7fe fe41 	bl	8016ca4 <xTaskResumeAll>
}
 8018022:	bf00      	nop
 8018024:	3710      	adds	r7, #16
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	20002b2c 	.word	0x20002b2c
 8018030:	20002b30 	.word	0x20002b30
 8018034:	e000ed04 	.word	0xe000ed04

08018038 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018038:	b480      	push	{r7}
 801803a:	b085      	sub	sp, #20
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018040:	4b0e      	ldr	r3, [pc, #56]	; (801807c <prvGetNextExpireTime+0x44>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d101      	bne.n	801804e <prvGetNextExpireTime+0x16>
 801804a:	2201      	movs	r2, #1
 801804c:	e000      	b.n	8018050 <prvGetNextExpireTime+0x18>
 801804e:	2200      	movs	r2, #0
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d105      	bne.n	8018068 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801805c:	4b07      	ldr	r3, [pc, #28]	; (801807c <prvGetNextExpireTime+0x44>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	68db      	ldr	r3, [r3, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	60fb      	str	r3, [r7, #12]
 8018066:	e001      	b.n	801806c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018068:	2300      	movs	r3, #0
 801806a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801806c:	68fb      	ldr	r3, [r7, #12]
}
 801806e:	4618      	mov	r0, r3
 8018070:	3714      	adds	r7, #20
 8018072:	46bd      	mov	sp, r7
 8018074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018078:	4770      	bx	lr
 801807a:	bf00      	nop
 801807c:	20002b28 	.word	0x20002b28

08018080 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b084      	sub	sp, #16
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018088:	f7fe fea8 	bl	8016ddc <xTaskGetTickCount>
 801808c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801808e:	4b0b      	ldr	r3, [pc, #44]	; (80180bc <prvSampleTimeNow+0x3c>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	68fa      	ldr	r2, [r7, #12]
 8018094:	429a      	cmp	r2, r3
 8018096:	d205      	bcs.n	80180a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018098:	f000 f930 	bl	80182fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2201      	movs	r2, #1
 80180a0:	601a      	str	r2, [r3, #0]
 80180a2:	e002      	b.n	80180aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	2200      	movs	r2, #0
 80180a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80180aa:	4a04      	ldr	r2, [pc, #16]	; (80180bc <prvSampleTimeNow+0x3c>)
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80180b0:	68fb      	ldr	r3, [r7, #12]
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3710      	adds	r7, #16
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}
 80180ba:	bf00      	nop
 80180bc:	20002b38 	.word	0x20002b38

080180c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b086      	sub	sp, #24
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	60f8      	str	r0, [r7, #12]
 80180c8:	60b9      	str	r1, [r7, #8]
 80180ca:	607a      	str	r2, [r7, #4]
 80180cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80180ce:	2300      	movs	r3, #0
 80180d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	68ba      	ldr	r2, [r7, #8]
 80180d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	68fa      	ldr	r2, [r7, #12]
 80180dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80180de:	68ba      	ldr	r2, [r7, #8]
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	429a      	cmp	r2, r3
 80180e4:	d812      	bhi.n	801810c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80180e6:	687a      	ldr	r2, [r7, #4]
 80180e8:	683b      	ldr	r3, [r7, #0]
 80180ea:	1ad2      	subs	r2, r2, r3
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	699b      	ldr	r3, [r3, #24]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d302      	bcc.n	80180fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80180f4:	2301      	movs	r3, #1
 80180f6:	617b      	str	r3, [r7, #20]
 80180f8:	e01b      	b.n	8018132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80180fa:	4b10      	ldr	r3, [pc, #64]	; (801813c <prvInsertTimerInActiveList+0x7c>)
 80180fc:	681a      	ldr	r2, [r3, #0]
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	3304      	adds	r3, #4
 8018102:	4619      	mov	r1, r3
 8018104:	4610      	mov	r0, r2
 8018106:	f7fd fa44 	bl	8015592 <vListInsert>
 801810a:	e012      	b.n	8018132 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801810c:	687a      	ldr	r2, [r7, #4]
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	429a      	cmp	r2, r3
 8018112:	d206      	bcs.n	8018122 <prvInsertTimerInActiveList+0x62>
 8018114:	68ba      	ldr	r2, [r7, #8]
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	429a      	cmp	r2, r3
 801811a:	d302      	bcc.n	8018122 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801811c:	2301      	movs	r3, #1
 801811e:	617b      	str	r3, [r7, #20]
 8018120:	e007      	b.n	8018132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018122:	4b07      	ldr	r3, [pc, #28]	; (8018140 <prvInsertTimerInActiveList+0x80>)
 8018124:	681a      	ldr	r2, [r3, #0]
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	3304      	adds	r3, #4
 801812a:	4619      	mov	r1, r3
 801812c:	4610      	mov	r0, r2
 801812e:	f7fd fa30 	bl	8015592 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018132:	697b      	ldr	r3, [r7, #20]
}
 8018134:	4618      	mov	r0, r3
 8018136:	3718      	adds	r7, #24
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}
 801813c:	20002b2c 	.word	0x20002b2c
 8018140:	20002b28 	.word	0x20002b28

08018144 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b08e      	sub	sp, #56	; 0x38
 8018148:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801814a:	e0c6      	b.n	80182da <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	2b00      	cmp	r3, #0
 8018150:	da17      	bge.n	8018182 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018152:	1d3b      	adds	r3, r7, #4
 8018154:	3304      	adds	r3, #4
 8018156:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815a:	2b00      	cmp	r3, #0
 801815c:	d109      	bne.n	8018172 <prvProcessReceivedCommands+0x2e>
 801815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018162:	f383 8811 	msr	BASEPRI, r3
 8018166:	f3bf 8f6f 	isb	sy
 801816a:	f3bf 8f4f 	dsb	sy
 801816e:	61fb      	str	r3, [r7, #28]
 8018170:	e7fe      	b.n	8018170 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018178:	6850      	ldr	r0, [r2, #4]
 801817a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801817c:	6892      	ldr	r2, [r2, #8]
 801817e:	4611      	mov	r1, r2
 8018180:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	2b00      	cmp	r3, #0
 8018186:	f2c0 80a7 	blt.w	80182d8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018190:	695b      	ldr	r3, [r3, #20]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d004      	beq.n	80181a0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018198:	3304      	adds	r3, #4
 801819a:	4618      	mov	r0, r3
 801819c:	f7fd fa32 	bl	8015604 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80181a0:	463b      	mov	r3, r7
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7ff ff6c 	bl	8018080 <prvSampleTimeNow>
 80181a8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2b09      	cmp	r3, #9
 80181ae:	f200 8094 	bhi.w	80182da <prvProcessReceivedCommands+0x196>
 80181b2:	a201      	add	r2, pc, #4	; (adr r2, 80181b8 <prvProcessReceivedCommands+0x74>)
 80181b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181b8:	080181e1 	.word	0x080181e1
 80181bc:	080181e1 	.word	0x080181e1
 80181c0:	080181e1 	.word	0x080181e1
 80181c4:	08018253 	.word	0x08018253
 80181c8:	08018267 	.word	0x08018267
 80181cc:	080182af 	.word	0x080182af
 80181d0:	080181e1 	.word	0x080181e1
 80181d4:	080181e1 	.word	0x080181e1
 80181d8:	08018253 	.word	0x08018253
 80181dc:	08018267 	.word	0x08018267
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80181e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181e6:	f043 0301 	orr.w	r3, r3, #1
 80181ea:	b2da      	uxtb	r2, r3
 80181ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80181f2:	68ba      	ldr	r2, [r7, #8]
 80181f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f6:	699b      	ldr	r3, [r3, #24]
 80181f8:	18d1      	adds	r1, r2, r3
 80181fa:	68bb      	ldr	r3, [r7, #8]
 80181fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018200:	f7ff ff5e 	bl	80180c0 <prvInsertTimerInActiveList>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	d067      	beq.n	80182da <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801820c:	6a1b      	ldr	r3, [r3, #32]
 801820e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018210:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018218:	f003 0304 	and.w	r3, r3, #4
 801821c:	2b00      	cmp	r3, #0
 801821e:	d05c      	beq.n	80182da <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018220:	68ba      	ldr	r2, [r7, #8]
 8018222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018224:	699b      	ldr	r3, [r3, #24]
 8018226:	441a      	add	r2, r3
 8018228:	2300      	movs	r3, #0
 801822a:	9300      	str	r3, [sp, #0]
 801822c:	2300      	movs	r3, #0
 801822e:	2100      	movs	r1, #0
 8018230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018232:	f7ff fe09 	bl	8017e48 <xTimerGenericCommand>
 8018236:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018238:	6a3b      	ldr	r3, [r7, #32]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d14d      	bne.n	80182da <prvProcessReceivedCommands+0x196>
 801823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018242:	f383 8811 	msr	BASEPRI, r3
 8018246:	f3bf 8f6f 	isb	sy
 801824a:	f3bf 8f4f 	dsb	sy
 801824e:	61bb      	str	r3, [r7, #24]
 8018250:	e7fe      	b.n	8018250 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018258:	f023 0301 	bic.w	r3, r3, #1
 801825c:	b2da      	uxtb	r2, r3
 801825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018264:	e039      	b.n	80182da <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801826c:	f043 0301 	orr.w	r3, r3, #1
 8018270:	b2da      	uxtb	r2, r3
 8018272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018278:	68ba      	ldr	r2, [r7, #8]
 801827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801827c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018280:	699b      	ldr	r3, [r3, #24]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d109      	bne.n	801829a <prvProcessReceivedCommands+0x156>
 8018286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801828a:	f383 8811 	msr	BASEPRI, r3
 801828e:	f3bf 8f6f 	isb	sy
 8018292:	f3bf 8f4f 	dsb	sy
 8018296:	617b      	str	r3, [r7, #20]
 8018298:	e7fe      	b.n	8018298 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801829c:	699a      	ldr	r2, [r3, #24]
 801829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a0:	18d1      	adds	r1, r2, r3
 80182a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182a8:	f7ff ff0a 	bl	80180c0 <prvInsertTimerInActiveList>
					break;
 80182ac:	e015      	b.n	80182da <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80182ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80182b4:	f003 0302 	and.w	r3, r3, #2
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d103      	bne.n	80182c4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80182bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182be:	f000 fc0d 	bl	8018adc <vPortFree>
 80182c2:	e00a      	b.n	80182da <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80182c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80182ca:	f023 0301 	bic.w	r3, r3, #1
 80182ce:	b2da      	uxtb	r2, r3
 80182d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80182d6:	e000      	b.n	80182da <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80182d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80182da:	4b07      	ldr	r3, [pc, #28]	; (80182f8 <prvProcessReceivedCommands+0x1b4>)
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	1d39      	adds	r1, r7, #4
 80182e0:	2200      	movs	r2, #0
 80182e2:	4618      	mov	r0, r3
 80182e4:	f7fd fe28 	bl	8015f38 <xQueueReceive>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	f47f af2e 	bne.w	801814c <prvProcessReceivedCommands+0x8>
	}
}
 80182f0:	bf00      	nop
 80182f2:	3730      	adds	r7, #48	; 0x30
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}
 80182f8:	20002b30 	.word	0x20002b30

080182fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b088      	sub	sp, #32
 8018300:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018302:	e047      	b.n	8018394 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018304:	4b2d      	ldr	r3, [pc, #180]	; (80183bc <prvSwitchTimerLists+0xc0>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	68db      	ldr	r3, [r3, #12]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801830e:	4b2b      	ldr	r3, [pc, #172]	; (80183bc <prvSwitchTimerLists+0xc0>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	68db      	ldr	r3, [r3, #12]
 8018314:	68db      	ldr	r3, [r3, #12]
 8018316:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	3304      	adds	r3, #4
 801831c:	4618      	mov	r0, r3
 801831e:	f7fd f971 	bl	8015604 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	6a1b      	ldr	r3, [r3, #32]
 8018326:	68f8      	ldr	r0, [r7, #12]
 8018328:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018330:	f003 0304 	and.w	r3, r3, #4
 8018334:	2b00      	cmp	r3, #0
 8018336:	d02d      	beq.n	8018394 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	699b      	ldr	r3, [r3, #24]
 801833c:	693a      	ldr	r2, [r7, #16]
 801833e:	4413      	add	r3, r2
 8018340:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018342:	68ba      	ldr	r2, [r7, #8]
 8018344:	693b      	ldr	r3, [r7, #16]
 8018346:	429a      	cmp	r2, r3
 8018348:	d90e      	bls.n	8018368 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	68ba      	ldr	r2, [r7, #8]
 801834e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	68fa      	ldr	r2, [r7, #12]
 8018354:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018356:	4b19      	ldr	r3, [pc, #100]	; (80183bc <prvSwitchTimerLists+0xc0>)
 8018358:	681a      	ldr	r2, [r3, #0]
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	3304      	adds	r3, #4
 801835e:	4619      	mov	r1, r3
 8018360:	4610      	mov	r0, r2
 8018362:	f7fd f916 	bl	8015592 <vListInsert>
 8018366:	e015      	b.n	8018394 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018368:	2300      	movs	r3, #0
 801836a:	9300      	str	r3, [sp, #0]
 801836c:	2300      	movs	r3, #0
 801836e:	693a      	ldr	r2, [r7, #16]
 8018370:	2100      	movs	r1, #0
 8018372:	68f8      	ldr	r0, [r7, #12]
 8018374:	f7ff fd68 	bl	8017e48 <xTimerGenericCommand>
 8018378:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d109      	bne.n	8018394 <prvSwitchTimerLists+0x98>
 8018380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018384:	f383 8811 	msr	BASEPRI, r3
 8018388:	f3bf 8f6f 	isb	sy
 801838c:	f3bf 8f4f 	dsb	sy
 8018390:	603b      	str	r3, [r7, #0]
 8018392:	e7fe      	b.n	8018392 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018394:	4b09      	ldr	r3, [pc, #36]	; (80183bc <prvSwitchTimerLists+0xc0>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d1b2      	bne.n	8018304 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801839e:	4b07      	ldr	r3, [pc, #28]	; (80183bc <prvSwitchTimerLists+0xc0>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80183a4:	4b06      	ldr	r3, [pc, #24]	; (80183c0 <prvSwitchTimerLists+0xc4>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4a04      	ldr	r2, [pc, #16]	; (80183bc <prvSwitchTimerLists+0xc0>)
 80183aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80183ac:	4a04      	ldr	r2, [pc, #16]	; (80183c0 <prvSwitchTimerLists+0xc4>)
 80183ae:	697b      	ldr	r3, [r7, #20]
 80183b0:	6013      	str	r3, [r2, #0]
}
 80183b2:	bf00      	nop
 80183b4:	3718      	adds	r7, #24
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
 80183ba:	bf00      	nop
 80183bc:	20002b28 	.word	0x20002b28
 80183c0:	20002b2c 	.word	0x20002b2c

080183c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80183ca:	f000 f9a7 	bl	801871c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80183ce:	4b15      	ldr	r3, [pc, #84]	; (8018424 <prvCheckForValidListAndQueue+0x60>)
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d120      	bne.n	8018418 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80183d6:	4814      	ldr	r0, [pc, #80]	; (8018428 <prvCheckForValidListAndQueue+0x64>)
 80183d8:	f7fd f88a 	bl	80154f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80183dc:	4813      	ldr	r0, [pc, #76]	; (801842c <prvCheckForValidListAndQueue+0x68>)
 80183de:	f7fd f887 	bl	80154f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80183e2:	4b13      	ldr	r3, [pc, #76]	; (8018430 <prvCheckForValidListAndQueue+0x6c>)
 80183e4:	4a10      	ldr	r2, [pc, #64]	; (8018428 <prvCheckForValidListAndQueue+0x64>)
 80183e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80183e8:	4b12      	ldr	r3, [pc, #72]	; (8018434 <prvCheckForValidListAndQueue+0x70>)
 80183ea:	4a10      	ldr	r2, [pc, #64]	; (801842c <prvCheckForValidListAndQueue+0x68>)
 80183ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80183ee:	2300      	movs	r3, #0
 80183f0:	9300      	str	r3, [sp, #0]
 80183f2:	4b11      	ldr	r3, [pc, #68]	; (8018438 <prvCheckForValidListAndQueue+0x74>)
 80183f4:	4a11      	ldr	r2, [pc, #68]	; (801843c <prvCheckForValidListAndQueue+0x78>)
 80183f6:	2110      	movs	r1, #16
 80183f8:	200a      	movs	r0, #10
 80183fa:	f7fd f995 	bl	8015728 <xQueueGenericCreateStatic>
 80183fe:	4602      	mov	r2, r0
 8018400:	4b08      	ldr	r3, [pc, #32]	; (8018424 <prvCheckForValidListAndQueue+0x60>)
 8018402:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018404:	4b07      	ldr	r3, [pc, #28]	; (8018424 <prvCheckForValidListAndQueue+0x60>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d005      	beq.n	8018418 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801840c:	4b05      	ldr	r3, [pc, #20]	; (8018424 <prvCheckForValidListAndQueue+0x60>)
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	490b      	ldr	r1, [pc, #44]	; (8018440 <prvCheckForValidListAndQueue+0x7c>)
 8018412:	4618      	mov	r0, r3
 8018414:	f7fe f93c 	bl	8016690 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018418:	f000 f9ae 	bl	8018778 <vPortExitCritical>
}
 801841c:	bf00      	nop
 801841e:	46bd      	mov	sp, r7
 8018420:	bd80      	pop	{r7, pc}
 8018422:	bf00      	nop
 8018424:	20002b30 	.word	0x20002b30
 8018428:	20002b00 	.word	0x20002b00
 801842c:	20002b14 	.word	0x20002b14
 8018430:	20002b28 	.word	0x20002b28
 8018434:	20002b2c 	.word	0x20002b2c
 8018438:	20002bdc 	.word	0x20002bdc
 801843c:	20002b3c 	.word	0x20002b3c
 8018440:	0801c8a8 	.word	0x0801c8a8

08018444 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b086      	sub	sp, #24
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d109      	bne.n	801846a <xTimerIsTimerActive+0x26>
 8018456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801845a:	f383 8811 	msr	BASEPRI, r3
 801845e:	f3bf 8f6f 	isb	sy
 8018462:	f3bf 8f4f 	dsb	sy
 8018466:	60fb      	str	r3, [r7, #12]
 8018468:	e7fe      	b.n	8018468 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 801846a:	f000 f957 	bl	801871c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 801846e:	693b      	ldr	r3, [r7, #16]
 8018470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018474:	f003 0301 	and.w	r3, r3, #1
 8018478:	2b00      	cmp	r3, #0
 801847a:	d102      	bne.n	8018482 <xTimerIsTimerActive+0x3e>
		{
			xReturn = pdFALSE;
 801847c:	2300      	movs	r3, #0
 801847e:	617b      	str	r3, [r7, #20]
 8018480:	e001      	b.n	8018486 <xTimerIsTimerActive+0x42>
		}
		else
		{
			xReturn = pdTRUE;
 8018482:	2301      	movs	r3, #1
 8018484:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8018486:	f000 f977 	bl	8018778 <vPortExitCritical>

	return xReturn;
 801848a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 801848c:	4618      	mov	r0, r3
 801848e:	3718      	adds	r7, #24
 8018490:	46bd      	mov	sp, r7
 8018492:	bd80      	pop	{r7, pc}

08018494 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b086      	sub	sp, #24
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d109      	bne.n	80184ba <pvTimerGetTimerID+0x26>
 80184a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184aa:	f383 8811 	msr	BASEPRI, r3
 80184ae:	f3bf 8f6f 	isb	sy
 80184b2:	f3bf 8f4f 	dsb	sy
 80184b6:	60fb      	str	r3, [r7, #12]
 80184b8:	e7fe      	b.n	80184b8 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 80184ba:	f000 f92f 	bl	801871c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	69db      	ldr	r3, [r3, #28]
 80184c2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80184c4:	f000 f958 	bl	8018778 <vPortExitCritical>

	return pvReturn;
 80184c8:	693b      	ldr	r3, [r7, #16]
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3718      	adds	r7, #24
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}
	...

080184d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80184d4:	b480      	push	{r7}
 80184d6:	b085      	sub	sp, #20
 80184d8:	af00      	add	r7, sp, #0
 80184da:	60f8      	str	r0, [r7, #12]
 80184dc:	60b9      	str	r1, [r7, #8]
 80184de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	3b04      	subs	r3, #4
 80184e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80184ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	3b04      	subs	r3, #4
 80184f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	f023 0201 	bic.w	r2, r3, #1
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	3b04      	subs	r3, #4
 8018502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018504:	4a0c      	ldr	r2, [pc, #48]	; (8018538 <pxPortInitialiseStack+0x64>)
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	3b14      	subs	r3, #20
 801850e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018510:	687a      	ldr	r2, [r7, #4]
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	3b04      	subs	r3, #4
 801851a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	f06f 0202 	mvn.w	r2, #2
 8018522:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	3b20      	subs	r3, #32
 8018528:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801852a:	68fb      	ldr	r3, [r7, #12]
}
 801852c:	4618      	mov	r0, r3
 801852e:	3714      	adds	r7, #20
 8018530:	46bd      	mov	sp, r7
 8018532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018536:	4770      	bx	lr
 8018538:	0801853d 	.word	0x0801853d

0801853c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801853c:	b480      	push	{r7}
 801853e:	b085      	sub	sp, #20
 8018540:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018542:	2300      	movs	r3, #0
 8018544:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018546:	4b11      	ldr	r3, [pc, #68]	; (801858c <prvTaskExitError+0x50>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801854e:	d009      	beq.n	8018564 <prvTaskExitError+0x28>
 8018550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018554:	f383 8811 	msr	BASEPRI, r3
 8018558:	f3bf 8f6f 	isb	sy
 801855c:	f3bf 8f4f 	dsb	sy
 8018560:	60fb      	str	r3, [r7, #12]
 8018562:	e7fe      	b.n	8018562 <prvTaskExitError+0x26>
 8018564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018568:	f383 8811 	msr	BASEPRI, r3
 801856c:	f3bf 8f6f 	isb	sy
 8018570:	f3bf 8f4f 	dsb	sy
 8018574:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018576:	bf00      	nop
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d0fc      	beq.n	8018578 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801857e:	bf00      	nop
 8018580:	3714      	adds	r7, #20
 8018582:	46bd      	mov	sp, r7
 8018584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018588:	4770      	bx	lr
 801858a:	bf00      	nop
 801858c:	20000194 	.word	0x20000194

08018590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018590:	4b07      	ldr	r3, [pc, #28]	; (80185b0 <pxCurrentTCBConst2>)
 8018592:	6819      	ldr	r1, [r3, #0]
 8018594:	6808      	ldr	r0, [r1, #0]
 8018596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801859a:	f380 8809 	msr	PSP, r0
 801859e:	f3bf 8f6f 	isb	sy
 80185a2:	f04f 0000 	mov.w	r0, #0
 80185a6:	f380 8811 	msr	BASEPRI, r0
 80185aa:	4770      	bx	lr
 80185ac:	f3af 8000 	nop.w

080185b0 <pxCurrentTCBConst2>:
 80185b0:	200025f8 	.word	0x200025f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80185b4:	bf00      	nop
 80185b6:	bf00      	nop

080185b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80185b8:	4808      	ldr	r0, [pc, #32]	; (80185dc <prvPortStartFirstTask+0x24>)
 80185ba:	6800      	ldr	r0, [r0, #0]
 80185bc:	6800      	ldr	r0, [r0, #0]
 80185be:	f380 8808 	msr	MSP, r0
 80185c2:	f04f 0000 	mov.w	r0, #0
 80185c6:	f380 8814 	msr	CONTROL, r0
 80185ca:	b662      	cpsie	i
 80185cc:	b661      	cpsie	f
 80185ce:	f3bf 8f4f 	dsb	sy
 80185d2:	f3bf 8f6f 	isb	sy
 80185d6:	df00      	svc	0
 80185d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80185da:	bf00      	nop
 80185dc:	e000ed08 	.word	0xe000ed08

080185e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b086      	sub	sp, #24
 80185e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80185e6:	4b44      	ldr	r3, [pc, #272]	; (80186f8 <xPortStartScheduler+0x118>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	4a44      	ldr	r2, [pc, #272]	; (80186fc <xPortStartScheduler+0x11c>)
 80185ec:	4293      	cmp	r3, r2
 80185ee:	d109      	bne.n	8018604 <xPortStartScheduler+0x24>
 80185f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185f4:	f383 8811 	msr	BASEPRI, r3
 80185f8:	f3bf 8f6f 	isb	sy
 80185fc:	f3bf 8f4f 	dsb	sy
 8018600:	613b      	str	r3, [r7, #16]
 8018602:	e7fe      	b.n	8018602 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018604:	4b3c      	ldr	r3, [pc, #240]	; (80186f8 <xPortStartScheduler+0x118>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	4a3d      	ldr	r2, [pc, #244]	; (8018700 <xPortStartScheduler+0x120>)
 801860a:	4293      	cmp	r3, r2
 801860c:	d109      	bne.n	8018622 <xPortStartScheduler+0x42>
 801860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018612:	f383 8811 	msr	BASEPRI, r3
 8018616:	f3bf 8f6f 	isb	sy
 801861a:	f3bf 8f4f 	dsb	sy
 801861e:	60fb      	str	r3, [r7, #12]
 8018620:	e7fe      	b.n	8018620 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018622:	4b38      	ldr	r3, [pc, #224]	; (8018704 <xPortStartScheduler+0x124>)
 8018624:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018626:	697b      	ldr	r3, [r7, #20]
 8018628:	781b      	ldrb	r3, [r3, #0]
 801862a:	b2db      	uxtb	r3, r3
 801862c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	22ff      	movs	r2, #255	; 0xff
 8018632:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	b2db      	uxtb	r3, r3
 801863a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801863c:	78fb      	ldrb	r3, [r7, #3]
 801863e:	b2db      	uxtb	r3, r3
 8018640:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018644:	b2da      	uxtb	r2, r3
 8018646:	4b30      	ldr	r3, [pc, #192]	; (8018708 <xPortStartScheduler+0x128>)
 8018648:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801864a:	4b30      	ldr	r3, [pc, #192]	; (801870c <xPortStartScheduler+0x12c>)
 801864c:	2207      	movs	r2, #7
 801864e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018650:	e009      	b.n	8018666 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8018652:	4b2e      	ldr	r3, [pc, #184]	; (801870c <xPortStartScheduler+0x12c>)
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	3b01      	subs	r3, #1
 8018658:	4a2c      	ldr	r2, [pc, #176]	; (801870c <xPortStartScheduler+0x12c>)
 801865a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801865c:	78fb      	ldrb	r3, [r7, #3]
 801865e:	b2db      	uxtb	r3, r3
 8018660:	005b      	lsls	r3, r3, #1
 8018662:	b2db      	uxtb	r3, r3
 8018664:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018666:	78fb      	ldrb	r3, [r7, #3]
 8018668:	b2db      	uxtb	r3, r3
 801866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801866e:	2b80      	cmp	r3, #128	; 0x80
 8018670:	d0ef      	beq.n	8018652 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018672:	4b26      	ldr	r3, [pc, #152]	; (801870c <xPortStartScheduler+0x12c>)
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	f1c3 0307 	rsb	r3, r3, #7
 801867a:	2b04      	cmp	r3, #4
 801867c:	d009      	beq.n	8018692 <xPortStartScheduler+0xb2>
 801867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018682:	f383 8811 	msr	BASEPRI, r3
 8018686:	f3bf 8f6f 	isb	sy
 801868a:	f3bf 8f4f 	dsb	sy
 801868e:	60bb      	str	r3, [r7, #8]
 8018690:	e7fe      	b.n	8018690 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018692:	4b1e      	ldr	r3, [pc, #120]	; (801870c <xPortStartScheduler+0x12c>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	021b      	lsls	r3, r3, #8
 8018698:	4a1c      	ldr	r2, [pc, #112]	; (801870c <xPortStartScheduler+0x12c>)
 801869a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801869c:	4b1b      	ldr	r3, [pc, #108]	; (801870c <xPortStartScheduler+0x12c>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80186a4:	4a19      	ldr	r2, [pc, #100]	; (801870c <xPortStartScheduler+0x12c>)
 80186a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	b2da      	uxtb	r2, r3
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80186b0:	4b17      	ldr	r3, [pc, #92]	; (8018710 <xPortStartScheduler+0x130>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4a16      	ldr	r2, [pc, #88]	; (8018710 <xPortStartScheduler+0x130>)
 80186b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80186ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80186bc:	4b14      	ldr	r3, [pc, #80]	; (8018710 <xPortStartScheduler+0x130>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	4a13      	ldr	r2, [pc, #76]	; (8018710 <xPortStartScheduler+0x130>)
 80186c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80186c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80186c8:	f000 f8d6 	bl	8018878 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80186cc:	4b11      	ldr	r3, [pc, #68]	; (8018714 <xPortStartScheduler+0x134>)
 80186ce:	2200      	movs	r2, #0
 80186d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80186d2:	f000 f8f5 	bl	80188c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80186d6:	4b10      	ldr	r3, [pc, #64]	; (8018718 <xPortStartScheduler+0x138>)
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	4a0f      	ldr	r2, [pc, #60]	; (8018718 <xPortStartScheduler+0x138>)
 80186dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80186e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80186e2:	f7ff ff69 	bl	80185b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80186e6:	f7fe fc49 	bl	8016f7c <vTaskSwitchContext>
	prvTaskExitError();
 80186ea:	f7ff ff27 	bl	801853c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80186ee:	2300      	movs	r3, #0
}
 80186f0:	4618      	mov	r0, r3
 80186f2:	3718      	adds	r7, #24
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}
 80186f8:	e000ed00 	.word	0xe000ed00
 80186fc:	410fc271 	.word	0x410fc271
 8018700:	410fc270 	.word	0x410fc270
 8018704:	e000e400 	.word	0xe000e400
 8018708:	20002c2c 	.word	0x20002c2c
 801870c:	20002c30 	.word	0x20002c30
 8018710:	e000ed20 	.word	0xe000ed20
 8018714:	20000194 	.word	0x20000194
 8018718:	e000ef34 	.word	0xe000ef34

0801871c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801871c:	b480      	push	{r7}
 801871e:	b083      	sub	sp, #12
 8018720:	af00      	add	r7, sp, #0
 8018722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018726:	f383 8811 	msr	BASEPRI, r3
 801872a:	f3bf 8f6f 	isb	sy
 801872e:	f3bf 8f4f 	dsb	sy
 8018732:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018734:	4b0e      	ldr	r3, [pc, #56]	; (8018770 <vPortEnterCritical+0x54>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	3301      	adds	r3, #1
 801873a:	4a0d      	ldr	r2, [pc, #52]	; (8018770 <vPortEnterCritical+0x54>)
 801873c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801873e:	4b0c      	ldr	r3, [pc, #48]	; (8018770 <vPortEnterCritical+0x54>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	2b01      	cmp	r3, #1
 8018744:	d10e      	bne.n	8018764 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018746:	4b0b      	ldr	r3, [pc, #44]	; (8018774 <vPortEnterCritical+0x58>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	b2db      	uxtb	r3, r3
 801874c:	2b00      	cmp	r3, #0
 801874e:	d009      	beq.n	8018764 <vPortEnterCritical+0x48>
 8018750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018754:	f383 8811 	msr	BASEPRI, r3
 8018758:	f3bf 8f6f 	isb	sy
 801875c:	f3bf 8f4f 	dsb	sy
 8018760:	603b      	str	r3, [r7, #0]
 8018762:	e7fe      	b.n	8018762 <vPortEnterCritical+0x46>
	}
}
 8018764:	bf00      	nop
 8018766:	370c      	adds	r7, #12
 8018768:	46bd      	mov	sp, r7
 801876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801876e:	4770      	bx	lr
 8018770:	20000194 	.word	0x20000194
 8018774:	e000ed04 	.word	0xe000ed04

08018778 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018778:	b480      	push	{r7}
 801877a:	b083      	sub	sp, #12
 801877c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801877e:	4b11      	ldr	r3, [pc, #68]	; (80187c4 <vPortExitCritical+0x4c>)
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d109      	bne.n	801879a <vPortExitCritical+0x22>
 8018786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801878a:	f383 8811 	msr	BASEPRI, r3
 801878e:	f3bf 8f6f 	isb	sy
 8018792:	f3bf 8f4f 	dsb	sy
 8018796:	607b      	str	r3, [r7, #4]
 8018798:	e7fe      	b.n	8018798 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801879a:	4b0a      	ldr	r3, [pc, #40]	; (80187c4 <vPortExitCritical+0x4c>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	3b01      	subs	r3, #1
 80187a0:	4a08      	ldr	r2, [pc, #32]	; (80187c4 <vPortExitCritical+0x4c>)
 80187a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80187a4:	4b07      	ldr	r3, [pc, #28]	; (80187c4 <vPortExitCritical+0x4c>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d104      	bne.n	80187b6 <vPortExitCritical+0x3e>
 80187ac:	2300      	movs	r3, #0
 80187ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80187b0:	683b      	ldr	r3, [r7, #0]
 80187b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80187b6:	bf00      	nop
 80187b8:	370c      	adds	r7, #12
 80187ba:	46bd      	mov	sp, r7
 80187bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c0:	4770      	bx	lr
 80187c2:	bf00      	nop
 80187c4:	20000194 	.word	0x20000194
	...

080187d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80187d0:	f3ef 8009 	mrs	r0, PSP
 80187d4:	f3bf 8f6f 	isb	sy
 80187d8:	4b15      	ldr	r3, [pc, #84]	; (8018830 <pxCurrentTCBConst>)
 80187da:	681a      	ldr	r2, [r3, #0]
 80187dc:	f01e 0f10 	tst.w	lr, #16
 80187e0:	bf08      	it	eq
 80187e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80187e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187ea:	6010      	str	r0, [r2, #0]
 80187ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80187f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80187f4:	f380 8811 	msr	BASEPRI, r0
 80187f8:	f3bf 8f4f 	dsb	sy
 80187fc:	f3bf 8f6f 	isb	sy
 8018800:	f7fe fbbc 	bl	8016f7c <vTaskSwitchContext>
 8018804:	f04f 0000 	mov.w	r0, #0
 8018808:	f380 8811 	msr	BASEPRI, r0
 801880c:	bc09      	pop	{r0, r3}
 801880e:	6819      	ldr	r1, [r3, #0]
 8018810:	6808      	ldr	r0, [r1, #0]
 8018812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018816:	f01e 0f10 	tst.w	lr, #16
 801881a:	bf08      	it	eq
 801881c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018820:	f380 8809 	msr	PSP, r0
 8018824:	f3bf 8f6f 	isb	sy
 8018828:	4770      	bx	lr
 801882a:	bf00      	nop
 801882c:	f3af 8000 	nop.w

08018830 <pxCurrentTCBConst>:
 8018830:	200025f8 	.word	0x200025f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018834:	bf00      	nop
 8018836:	bf00      	nop

08018838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
	__asm volatile
 801883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018842:	f383 8811 	msr	BASEPRI, r3
 8018846:	f3bf 8f6f 	isb	sy
 801884a:	f3bf 8f4f 	dsb	sy
 801884e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018850:	f7fe fad4 	bl	8016dfc <xTaskIncrementTick>
 8018854:	4603      	mov	r3, r0
 8018856:	2b00      	cmp	r3, #0
 8018858:	d003      	beq.n	8018862 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801885a:	4b06      	ldr	r3, [pc, #24]	; (8018874 <SysTick_Handler+0x3c>)
 801885c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018860:	601a      	str	r2, [r3, #0]
 8018862:	2300      	movs	r3, #0
 8018864:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801886c:	bf00      	nop
 801886e:	3708      	adds	r7, #8
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}
 8018874:	e000ed04 	.word	0xe000ed04

08018878 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018878:	b480      	push	{r7}
 801887a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801887c:	4b0b      	ldr	r3, [pc, #44]	; (80188ac <vPortSetupTimerInterrupt+0x34>)
 801887e:	2200      	movs	r2, #0
 8018880:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018882:	4b0b      	ldr	r3, [pc, #44]	; (80188b0 <vPortSetupTimerInterrupt+0x38>)
 8018884:	2200      	movs	r2, #0
 8018886:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018888:	4b0a      	ldr	r3, [pc, #40]	; (80188b4 <vPortSetupTimerInterrupt+0x3c>)
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	4a0a      	ldr	r2, [pc, #40]	; (80188b8 <vPortSetupTimerInterrupt+0x40>)
 801888e:	fba2 2303 	umull	r2, r3, r2, r3
 8018892:	099b      	lsrs	r3, r3, #6
 8018894:	4a09      	ldr	r2, [pc, #36]	; (80188bc <vPortSetupTimerInterrupt+0x44>)
 8018896:	3b01      	subs	r3, #1
 8018898:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801889a:	4b04      	ldr	r3, [pc, #16]	; (80188ac <vPortSetupTimerInterrupt+0x34>)
 801889c:	2207      	movs	r2, #7
 801889e:	601a      	str	r2, [r3, #0]
}
 80188a0:	bf00      	nop
 80188a2:	46bd      	mov	sp, r7
 80188a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a8:	4770      	bx	lr
 80188aa:	bf00      	nop
 80188ac:	e000e010 	.word	0xe000e010
 80188b0:	e000e018 	.word	0xe000e018
 80188b4:	20000078 	.word	0x20000078
 80188b8:	10624dd3 	.word	0x10624dd3
 80188bc:	e000e014 	.word	0xe000e014

080188c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80188c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80188d0 <vPortEnableVFP+0x10>
 80188c4:	6801      	ldr	r1, [r0, #0]
 80188c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80188ca:	6001      	str	r1, [r0, #0]
 80188cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80188ce:	bf00      	nop
 80188d0:	e000ed88 	.word	0xe000ed88

080188d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80188d4:	b480      	push	{r7}
 80188d6:	b085      	sub	sp, #20
 80188d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80188da:	f3ef 8305 	mrs	r3, IPSR
 80188de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	2b0f      	cmp	r3, #15
 80188e4:	d913      	bls.n	801890e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80188e6:	4a16      	ldr	r2, [pc, #88]	; (8018940 <vPortValidateInterruptPriority+0x6c>)
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	4413      	add	r3, r2
 80188ec:	781b      	ldrb	r3, [r3, #0]
 80188ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80188f0:	4b14      	ldr	r3, [pc, #80]	; (8018944 <vPortValidateInterruptPriority+0x70>)
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	7afa      	ldrb	r2, [r7, #11]
 80188f6:	429a      	cmp	r2, r3
 80188f8:	d209      	bcs.n	801890e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80188fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188fe:	f383 8811 	msr	BASEPRI, r3
 8018902:	f3bf 8f6f 	isb	sy
 8018906:	f3bf 8f4f 	dsb	sy
 801890a:	607b      	str	r3, [r7, #4]
 801890c:	e7fe      	b.n	801890c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801890e:	4b0e      	ldr	r3, [pc, #56]	; (8018948 <vPortValidateInterruptPriority+0x74>)
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018916:	4b0d      	ldr	r3, [pc, #52]	; (801894c <vPortValidateInterruptPriority+0x78>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	429a      	cmp	r2, r3
 801891c:	d909      	bls.n	8018932 <vPortValidateInterruptPriority+0x5e>
 801891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018922:	f383 8811 	msr	BASEPRI, r3
 8018926:	f3bf 8f6f 	isb	sy
 801892a:	f3bf 8f4f 	dsb	sy
 801892e:	603b      	str	r3, [r7, #0]
 8018930:	e7fe      	b.n	8018930 <vPortValidateInterruptPriority+0x5c>
	}
 8018932:	bf00      	nop
 8018934:	3714      	adds	r7, #20
 8018936:	46bd      	mov	sp, r7
 8018938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893c:	4770      	bx	lr
 801893e:	bf00      	nop
 8018940:	e000e3f0 	.word	0xe000e3f0
 8018944:	20002c2c 	.word	0x20002c2c
 8018948:	e000ed0c 	.word	0xe000ed0c
 801894c:	20002c30 	.word	0x20002c30

08018950 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b08a      	sub	sp, #40	; 0x28
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018958:	2300      	movs	r3, #0
 801895a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801895c:	f7fe f95c 	bl	8016c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018960:	4b59      	ldr	r3, [pc, #356]	; (8018ac8 <pvPortMalloc+0x178>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d101      	bne.n	801896c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018968:	f000 f910 	bl	8018b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801896c:	4b57      	ldr	r3, [pc, #348]	; (8018acc <pvPortMalloc+0x17c>)
 801896e:	681a      	ldr	r2, [r3, #0]
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	4013      	ands	r3, r2
 8018974:	2b00      	cmp	r3, #0
 8018976:	f040 808c 	bne.w	8018a92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d01c      	beq.n	80189ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8018980:	2208      	movs	r2, #8
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	4413      	add	r3, r2
 8018986:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f003 0307 	and.w	r3, r3, #7
 801898e:	2b00      	cmp	r3, #0
 8018990:	d013      	beq.n	80189ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	f023 0307 	bic.w	r3, r3, #7
 8018998:	3308      	adds	r3, #8
 801899a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f003 0307 	and.w	r3, r3, #7
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d009      	beq.n	80189ba <pvPortMalloc+0x6a>
 80189a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189aa:	f383 8811 	msr	BASEPRI, r3
 80189ae:	f3bf 8f6f 	isb	sy
 80189b2:	f3bf 8f4f 	dsb	sy
 80189b6:	617b      	str	r3, [r7, #20]
 80189b8:	e7fe      	b.n	80189b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d068      	beq.n	8018a92 <pvPortMalloc+0x142>
 80189c0:	4b43      	ldr	r3, [pc, #268]	; (8018ad0 <pvPortMalloc+0x180>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	687a      	ldr	r2, [r7, #4]
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d863      	bhi.n	8018a92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80189ca:	4b42      	ldr	r3, [pc, #264]	; (8018ad4 <pvPortMalloc+0x184>)
 80189cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80189ce:	4b41      	ldr	r3, [pc, #260]	; (8018ad4 <pvPortMalloc+0x184>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80189d4:	e004      	b.n	80189e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80189d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80189da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80189e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	687a      	ldr	r2, [r7, #4]
 80189e6:	429a      	cmp	r2, r3
 80189e8:	d903      	bls.n	80189f2 <pvPortMalloc+0xa2>
 80189ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d1f1      	bne.n	80189d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80189f2:	4b35      	ldr	r3, [pc, #212]	; (8018ac8 <pvPortMalloc+0x178>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189f8:	429a      	cmp	r2, r3
 80189fa:	d04a      	beq.n	8018a92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80189fc:	6a3b      	ldr	r3, [r7, #32]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	2208      	movs	r2, #8
 8018a02:	4413      	add	r3, r2
 8018a04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a08:	681a      	ldr	r2, [r3, #0]
 8018a0a:	6a3b      	ldr	r3, [r7, #32]
 8018a0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a10:	685a      	ldr	r2, [r3, #4]
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	1ad2      	subs	r2, r2, r3
 8018a16:	2308      	movs	r3, #8
 8018a18:	005b      	lsls	r3, r3, #1
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	d91e      	bls.n	8018a5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	4413      	add	r3, r2
 8018a24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018a26:	69bb      	ldr	r3, [r7, #24]
 8018a28:	f003 0307 	and.w	r3, r3, #7
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d009      	beq.n	8018a44 <pvPortMalloc+0xf4>
 8018a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a34:	f383 8811 	msr	BASEPRI, r3
 8018a38:	f3bf 8f6f 	isb	sy
 8018a3c:	f3bf 8f4f 	dsb	sy
 8018a40:	613b      	str	r3, [r7, #16]
 8018a42:	e7fe      	b.n	8018a42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a46:	685a      	ldr	r2, [r3, #4]
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	1ad2      	subs	r2, r2, r3
 8018a4c:	69bb      	ldr	r3, [r7, #24]
 8018a4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a52:	687a      	ldr	r2, [r7, #4]
 8018a54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018a56:	69b8      	ldr	r0, [r7, #24]
 8018a58:	f000 f8fc 	bl	8018c54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018a5c:	4b1c      	ldr	r3, [pc, #112]	; (8018ad0 <pvPortMalloc+0x180>)
 8018a5e:	681a      	ldr	r2, [r3, #0]
 8018a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a62:	685b      	ldr	r3, [r3, #4]
 8018a64:	1ad3      	subs	r3, r2, r3
 8018a66:	4a1a      	ldr	r2, [pc, #104]	; (8018ad0 <pvPortMalloc+0x180>)
 8018a68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018a6a:	4b19      	ldr	r3, [pc, #100]	; (8018ad0 <pvPortMalloc+0x180>)
 8018a6c:	681a      	ldr	r2, [r3, #0]
 8018a6e:	4b1a      	ldr	r3, [pc, #104]	; (8018ad8 <pvPortMalloc+0x188>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	429a      	cmp	r2, r3
 8018a74:	d203      	bcs.n	8018a7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018a76:	4b16      	ldr	r3, [pc, #88]	; (8018ad0 <pvPortMalloc+0x180>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	4a17      	ldr	r2, [pc, #92]	; (8018ad8 <pvPortMalloc+0x188>)
 8018a7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a80:	685a      	ldr	r2, [r3, #4]
 8018a82:	4b12      	ldr	r3, [pc, #72]	; (8018acc <pvPortMalloc+0x17c>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	431a      	orrs	r2, r3
 8018a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a8e:	2200      	movs	r2, #0
 8018a90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018a92:	f7fe f907 	bl	8016ca4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018a96:	69fb      	ldr	r3, [r7, #28]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d101      	bne.n	8018aa0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8018a9c:	f7e8 fc74 	bl	8001388 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018aa0:	69fb      	ldr	r3, [r7, #28]
 8018aa2:	f003 0307 	and.w	r3, r3, #7
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d009      	beq.n	8018abe <pvPortMalloc+0x16e>
 8018aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aae:	f383 8811 	msr	BASEPRI, r3
 8018ab2:	f3bf 8f6f 	isb	sy
 8018ab6:	f3bf 8f4f 	dsb	sy
 8018aba:	60fb      	str	r3, [r7, #12]
 8018abc:	e7fe      	b.n	8018abc <pvPortMalloc+0x16c>
	return pvReturn;
 8018abe:	69fb      	ldr	r3, [r7, #28]
}
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	3728      	adds	r7, #40	; 0x28
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}
 8018ac8:	2002762c 	.word	0x2002762c
 8018acc:	20027638 	.word	0x20027638
 8018ad0:	20027630 	.word	0x20027630
 8018ad4:	20027624 	.word	0x20027624
 8018ad8:	20027634 	.word	0x20027634

08018adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b086      	sub	sp, #24
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d046      	beq.n	8018b7c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018aee:	2308      	movs	r3, #8
 8018af0:	425b      	negs	r3, r3
 8018af2:	697a      	ldr	r2, [r7, #20]
 8018af4:	4413      	add	r3, r2
 8018af6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018af8:	697b      	ldr	r3, [r7, #20]
 8018afa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018afc:	693b      	ldr	r3, [r7, #16]
 8018afe:	685a      	ldr	r2, [r3, #4]
 8018b00:	4b20      	ldr	r3, [pc, #128]	; (8018b84 <vPortFree+0xa8>)
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	4013      	ands	r3, r2
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d109      	bne.n	8018b1e <vPortFree+0x42>
 8018b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b0e:	f383 8811 	msr	BASEPRI, r3
 8018b12:	f3bf 8f6f 	isb	sy
 8018b16:	f3bf 8f4f 	dsb	sy
 8018b1a:	60fb      	str	r3, [r7, #12]
 8018b1c:	e7fe      	b.n	8018b1c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018b1e:	693b      	ldr	r3, [r7, #16]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d009      	beq.n	8018b3a <vPortFree+0x5e>
 8018b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b2a:	f383 8811 	msr	BASEPRI, r3
 8018b2e:	f3bf 8f6f 	isb	sy
 8018b32:	f3bf 8f4f 	dsb	sy
 8018b36:	60bb      	str	r3, [r7, #8]
 8018b38:	e7fe      	b.n	8018b38 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018b3a:	693b      	ldr	r3, [r7, #16]
 8018b3c:	685a      	ldr	r2, [r3, #4]
 8018b3e:	4b11      	ldr	r3, [pc, #68]	; (8018b84 <vPortFree+0xa8>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	4013      	ands	r3, r2
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d019      	beq.n	8018b7c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018b48:	693b      	ldr	r3, [r7, #16]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d115      	bne.n	8018b7c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018b50:	693b      	ldr	r3, [r7, #16]
 8018b52:	685a      	ldr	r2, [r3, #4]
 8018b54:	4b0b      	ldr	r3, [pc, #44]	; (8018b84 <vPortFree+0xa8>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	43db      	mvns	r3, r3
 8018b5a:	401a      	ands	r2, r3
 8018b5c:	693b      	ldr	r3, [r7, #16]
 8018b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018b60:	f7fe f85a 	bl	8016c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018b64:	693b      	ldr	r3, [r7, #16]
 8018b66:	685a      	ldr	r2, [r3, #4]
 8018b68:	4b07      	ldr	r3, [pc, #28]	; (8018b88 <vPortFree+0xac>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	4413      	add	r3, r2
 8018b6e:	4a06      	ldr	r2, [pc, #24]	; (8018b88 <vPortFree+0xac>)
 8018b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018b72:	6938      	ldr	r0, [r7, #16]
 8018b74:	f000 f86e 	bl	8018c54 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018b78:	f7fe f894 	bl	8016ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018b7c:	bf00      	nop
 8018b7e:	3718      	adds	r7, #24
 8018b80:	46bd      	mov	sp, r7
 8018b82:	bd80      	pop	{r7, pc}
 8018b84:	20027638 	.word	0x20027638
 8018b88:	20027630 	.word	0x20027630

08018b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018b8c:	b480      	push	{r7}
 8018b8e:	b085      	sub	sp, #20
 8018b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018b92:	4b29      	ldr	r3, [pc, #164]	; (8018c38 <prvHeapInit+0xac>)
 8018b94:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018b96:	4b29      	ldr	r3, [pc, #164]	; (8018c3c <prvHeapInit+0xb0>)
 8018b98:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	f003 0307 	and.w	r3, r3, #7
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d00c      	beq.n	8018bbe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	3307      	adds	r3, #7
 8018ba8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	f023 0307 	bic.w	r3, r3, #7
 8018bb0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018bb2:	68ba      	ldr	r2, [r7, #8]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	1ad3      	subs	r3, r2, r3
 8018bb8:	4a20      	ldr	r2, [pc, #128]	; (8018c3c <prvHeapInit+0xb0>)
 8018bba:	4413      	add	r3, r2
 8018bbc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018bc2:	4a1f      	ldr	r2, [pc, #124]	; (8018c40 <prvHeapInit+0xb4>)
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018bc8:	4b1d      	ldr	r3, [pc, #116]	; (8018c40 <prvHeapInit+0xb4>)
 8018bca:	2200      	movs	r2, #0
 8018bcc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	68ba      	ldr	r2, [r7, #8]
 8018bd2:	4413      	add	r3, r2
 8018bd4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018bd6:	2208      	movs	r2, #8
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	1a9b      	subs	r3, r3, r2
 8018bdc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	f023 0307 	bic.w	r3, r3, #7
 8018be4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	4a16      	ldr	r2, [pc, #88]	; (8018c44 <prvHeapInit+0xb8>)
 8018bea:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018bec:	4b15      	ldr	r3, [pc, #84]	; (8018c44 <prvHeapInit+0xb8>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018bf4:	4b13      	ldr	r3, [pc, #76]	; (8018c44 <prvHeapInit+0xb8>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	68fa      	ldr	r2, [r7, #12]
 8018c04:	1ad2      	subs	r2, r2, r3
 8018c06:	683b      	ldr	r3, [r7, #0]
 8018c08:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018c0a:	4b0e      	ldr	r3, [pc, #56]	; (8018c44 <prvHeapInit+0xb8>)
 8018c0c:	681a      	ldr	r2, [r3, #0]
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	685b      	ldr	r3, [r3, #4]
 8018c16:	4a0c      	ldr	r2, [pc, #48]	; (8018c48 <prvHeapInit+0xbc>)
 8018c18:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018c1a:	683b      	ldr	r3, [r7, #0]
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	4a0b      	ldr	r2, [pc, #44]	; (8018c4c <prvHeapInit+0xc0>)
 8018c20:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018c22:	4b0b      	ldr	r3, [pc, #44]	; (8018c50 <prvHeapInit+0xc4>)
 8018c24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018c28:	601a      	str	r2, [r3, #0]
}
 8018c2a:	bf00      	nop
 8018c2c:	3714      	adds	r7, #20
 8018c2e:	46bd      	mov	sp, r7
 8018c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c34:	4770      	bx	lr
 8018c36:	bf00      	nop
 8018c38:	000249f0 	.word	0x000249f0
 8018c3c:	20002c34 	.word	0x20002c34
 8018c40:	20027624 	.word	0x20027624
 8018c44:	2002762c 	.word	0x2002762c
 8018c48:	20027634 	.word	0x20027634
 8018c4c:	20027630 	.word	0x20027630
 8018c50:	20027638 	.word	0x20027638

08018c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018c54:	b480      	push	{r7}
 8018c56:	b085      	sub	sp, #20
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018c5c:	4b28      	ldr	r3, [pc, #160]	; (8018d00 <prvInsertBlockIntoFreeList+0xac>)
 8018c5e:	60fb      	str	r3, [r7, #12]
 8018c60:	e002      	b.n	8018c68 <prvInsertBlockIntoFreeList+0x14>
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	60fb      	str	r3, [r7, #12]
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	d8f7      	bhi.n	8018c62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	685b      	ldr	r3, [r3, #4]
 8018c7a:	68ba      	ldr	r2, [r7, #8]
 8018c7c:	4413      	add	r3, r2
 8018c7e:	687a      	ldr	r2, [r7, #4]
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d108      	bne.n	8018c96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	685a      	ldr	r2, [r3, #4]
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	685b      	ldr	r3, [r3, #4]
 8018c8c:	441a      	add	r2, r3
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	68ba      	ldr	r2, [r7, #8]
 8018ca0:	441a      	add	r2, r3
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d118      	bne.n	8018cdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	681a      	ldr	r2, [r3, #0]
 8018cae:	4b15      	ldr	r3, [pc, #84]	; (8018d04 <prvInsertBlockIntoFreeList+0xb0>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	429a      	cmp	r2, r3
 8018cb4:	d00d      	beq.n	8018cd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	685a      	ldr	r2, [r3, #4]
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	685b      	ldr	r3, [r3, #4]
 8018cc0:	441a      	add	r2, r3
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	681a      	ldr	r2, [r3, #0]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	601a      	str	r2, [r3, #0]
 8018cd0:	e008      	b.n	8018ce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018cd2:	4b0c      	ldr	r3, [pc, #48]	; (8018d04 <prvInsertBlockIntoFreeList+0xb0>)
 8018cd4:	681a      	ldr	r2, [r3, #0]
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	601a      	str	r2, [r3, #0]
 8018cda:	e003      	b.n	8018ce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	681a      	ldr	r2, [r3, #0]
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018ce4:	68fa      	ldr	r2, [r7, #12]
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	d002      	beq.n	8018cf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	687a      	ldr	r2, [r7, #4]
 8018cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018cf2:	bf00      	nop
 8018cf4:	3714      	adds	r7, #20
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfc:	4770      	bx	lr
 8018cfe:	bf00      	nop
 8018d00:	20027624 	.word	0x20027624
 8018d04:	2002762c 	.word	0x2002762c

08018d08 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8018d0e:	f000 fa1d 	bl	801914c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8018d12:	480e      	ldr	r0, [pc, #56]	; (8018d4c <APP_THREAD_Init+0x44>)
 8018d14:	f000 ff48 	bl	8019ba8 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8018d18:	2101      	movs	r1, #1
 8018d1a:	2002      	movs	r0, #2
 8018d1c:	f002 f8ae 	bl	801ae7c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8018d20:	f001 f83a 	bl	8019d98 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8018d24:	f001 f826 	bl	8019d74 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8018d28:	f7f9 fca2 	bl	8012670 <SHCI_C2_THREAD_Init>
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8018d30:	4a07      	ldr	r2, [pc, #28]	; (8018d50 <APP_THREAD_Init+0x48>)
 8018d32:	2100      	movs	r1, #0
 8018d34:	4807      	ldr	r0, [pc, #28]	; (8018d54 <APP_THREAD_Init+0x4c>)
 8018d36:	f7fb fc25 	bl	8014584 <osThreadNew>
 8018d3a:	4602      	mov	r2, r0
 8018d3c:	4b06      	ldr	r3, [pc, #24]	; (8018d58 <APP_THREAD_Init+0x50>)
 8018d3e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8018d40:	f000 f892 	bl	8018e68 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8018d44:	bf00      	nop
 8018d46:	3708      	adds	r7, #8
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	bd80      	pop	{r7, pc}
 8018d4c:	20030940 	.word	0x20030940
 8018d50:	0801cfb4 	.word	0x0801cfb4
 8018d54:	08019209 	.word	0x08019209
 8018d58:	20027750 	.word	0x20027750

08018d5c <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2b1a      	cmp	r3, #26
 8018d6a:	d861      	bhi.n	8018e30 <APP_THREAD_Error+0xd4>
 8018d6c:	a201      	add	r2, pc, #4	; (adr r2, 8018d74 <APP_THREAD_Error+0x18>)
 8018d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d72:	bf00      	nop
 8018d74:	08018de1 	.word	0x08018de1
 8018d78:	08018deb 	.word	0x08018deb
 8018d7c:	08018df5 	.word	0x08018df5
 8018d80:	08018dff 	.word	0x08018dff
 8018d84:	08018e09 	.word	0x08018e09
 8018d88:	08018e13 	.word	0x08018e13
 8018d8c:	08018e1d 	.word	0x08018e1d
 8018d90:	08018e31 	.word	0x08018e31
 8018d94:	08018e31 	.word	0x08018e31
 8018d98:	08018e31 	.word	0x08018e31
 8018d9c:	08018e31 	.word	0x08018e31
 8018da0:	08018e31 	.word	0x08018e31
 8018da4:	08018e31 	.word	0x08018e31
 8018da8:	08018e31 	.word	0x08018e31
 8018dac:	08018e31 	.word	0x08018e31
 8018db0:	08018e31 	.word	0x08018e31
 8018db4:	08018e31 	.word	0x08018e31
 8018db8:	08018e31 	.word	0x08018e31
 8018dbc:	08018e31 	.word	0x08018e31
 8018dc0:	08018e31 	.word	0x08018e31
 8018dc4:	08018e31 	.word	0x08018e31
 8018dc8:	08018e31 	.word	0x08018e31
 8018dcc:	08018e31 	.word	0x08018e31
 8018dd0:	08018e31 	.word	0x08018e31
 8018dd4:	08018e31 	.word	0x08018e31
 8018dd8:	08018e31 	.word	0x08018e31
 8018ddc:	08018e27 	.word	0x08018e27
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8018de0:	6839      	ldr	r1, [r7, #0]
 8018de2:	4818      	ldr	r0, [pc, #96]	; (8018e44 <APP_THREAD_Error+0xe8>)
 8018de4:	f000 f9a6 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018de8:	e027      	b.n	8018e3a <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8018dea:	6839      	ldr	r1, [r7, #0]
 8018dec:	4816      	ldr	r0, [pc, #88]	; (8018e48 <APP_THREAD_Error+0xec>)
 8018dee:	f000 f9a1 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018df2:	e022      	b.n	8018e3a <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8018df4:	6839      	ldr	r1, [r7, #0]
 8018df6:	4815      	ldr	r0, [pc, #84]	; (8018e4c <APP_THREAD_Error+0xf0>)
 8018df8:	f000 f99c 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018dfc:	e01d      	b.n	8018e3a <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8018dfe:	6839      	ldr	r1, [r7, #0]
 8018e00:	4813      	ldr	r0, [pc, #76]	; (8018e50 <APP_THREAD_Error+0xf4>)
 8018e02:	f000 f997 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018e06:	e018      	b.n	8018e3a <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8018e08:	6839      	ldr	r1, [r7, #0]
 8018e0a:	4812      	ldr	r0, [pc, #72]	; (8018e54 <APP_THREAD_Error+0xf8>)
 8018e0c:	f000 f992 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018e10:	e013      	b.n	8018e3a <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8018e12:	6839      	ldr	r1, [r7, #0]
 8018e14:	4810      	ldr	r0, [pc, #64]	; (8018e58 <APP_THREAD_Error+0xfc>)
 8018e16:	f000 f98d 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018e1a:	e00e      	b.n	8018e3a <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8018e1c:	6839      	ldr	r1, [r7, #0]
 8018e1e:	480f      	ldr	r0, [pc, #60]	; (8018e5c <APP_THREAD_Error+0x100>)
 8018e20:	f000 f988 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018e24:	e009      	b.n	8018e3a <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8018e26:	6839      	ldr	r1, [r7, #0]
 8018e28:	480d      	ldr	r0, [pc, #52]	; (8018e60 <APP_THREAD_Error+0x104>)
 8018e2a:	f000 f983 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018e2e:	e004      	b.n	8018e3a <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8018e30:	2100      	movs	r1, #0
 8018e32:	480c      	ldr	r0, [pc, #48]	; (8018e64 <APP_THREAD_Error+0x108>)
 8018e34:	f000 f97e 	bl	8019134 <APP_THREAD_TraceError>
    break;
 8018e38:	bf00      	nop
  }
}
 8018e3a:	bf00      	nop
 8018e3c:	3708      	adds	r7, #8
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}
 8018e42:	bf00      	nop
 8018e44:	0801c944 	.word	0x0801c944
 8018e48:	0801c968 	.word	0x0801c968
 8018e4c:	0801c98c 	.word	0x0801c98c
 8018e50:	0801c9ac 	.word	0x0801c9ac
 8018e54:	0801c9cc 	.word	0x0801c9cc
 8018e58:	0801c9ec 	.word	0x0801c9ec
 8018e5c:	0801ca08 	.word	0x0801ca08
 8018e60:	0801ca34 	.word	0x0801ca34
 8018e64:	0801ca58 	.word	0x0801ca58

08018e68 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8018e68:	b590      	push	{r4, r7, lr}
 8018e6a:	b083      	sub	sp, #12
 8018e6c:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8018e6e:	2000      	movs	r0, #0
 8018e70:	f7fa fc34 	bl	80136dc <otInstanceErasePersistentInfo>
 8018e74:	4603      	mov	r3, r0
 8018e76:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018e78:	79fb      	ldrb	r3, [r7, #7]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d004      	beq.n	8018e88 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8018e7e:	79fb      	ldrb	r3, [r7, #7]
 8018e80:	4619      	mov	r1, r3
 8018e82:	2006      	movs	r0, #6
 8018e84:	f7ff ff6a 	bl	8018d5c <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8018e88:	2000      	movs	r0, #0
 8018e8a:	f7fa fbcb 	bl	8013624 <otInstanceFinalize>
  otInstanceInitSingle();
 8018e8e:	f7fa fba2 	bl	80135d6 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8018e92:	2200      	movs	r2, #0
 8018e94:	4979      	ldr	r1, [pc, #484]	; (801907c <APP_THREAD_DeviceConfig+0x214>)
 8018e96:	2000      	movs	r0, #0
 8018e98:	f7fa fbea 	bl	8013670 <otSetStateChangedCallback>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018ea0:	79fb      	ldrb	r3, [r7, #7]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d004      	beq.n	8018eb0 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8018ea6:	79fb      	ldrb	r3, [r7, #7]
 8018ea8:	4619      	mov	r1, r3
 8018eaa:	2001      	movs	r0, #1
 8018eac:	f7ff ff56 	bl	8018d5c <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8018eb0:	2117      	movs	r1, #23
 8018eb2:	2000      	movs	r0, #0
 8018eb4:	f7fa fd50 	bl	8013958 <otLinkSetChannel>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018ebc:	79fb      	ldrb	r3, [r7, #7]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d004      	beq.n	8018ecc <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8018ec2:	79fb      	ldrb	r3, [r7, #7]
 8018ec4:	4619      	mov	r1, r3
 8018ec6:	2002      	movs	r0, #2
 8018ec8:	f7ff ff48 	bl	8018d5c <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8018ecc:	f241 2134 	movw	r1, #4660	; 0x1234
 8018ed0:	2000      	movs	r0, #0
 8018ed2:	f7fa fd71 	bl	80139b8 <otLinkSetPanId>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018eda:	79fb      	ldrb	r3, [r7, #7]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d004      	beq.n	8018eea <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8018ee0:	79fb      	ldrb	r3, [r7, #7]
 8018ee2:	4619      	mov	r1, r3
 8018ee4:	2003      	movs	r0, #3
 8018ee6:	f7ff ff39 	bl	8018d5c <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8018eea:	2101      	movs	r1, #1
 8018eec:	2000      	movs	r0, #0
 8018eee:	f7fa fc1e 	bl	801372e <otIp6SetEnabled>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018ef6:	79fb      	ldrb	r3, [r7, #7]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d004      	beq.n	8018f06 <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8018efc:	79fb      	ldrb	r3, [r7, #7]
 8018efe:	4619      	mov	r1, r3
 8018f00:	2004      	movs	r0, #4
 8018f02:	f7ff ff2b 	bl	8018d5c <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8018f06:	2101      	movs	r1, #1
 8018f08:	2000      	movs	r0, #0
 8018f0a:	f7fb f88a 	bl	8014022 <otThreadSetEnabled>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018f12:	79fb      	ldrb	r3, [r7, #7]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d004      	beq.n	8018f22 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8018f18:	79fb      	ldrb	r3, [r7, #7]
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	2005      	movs	r0, #5
 8018f1e:	f7ff ff1d 	bl	8018d5c <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 8018f22:	2100      	movs	r1, #0
 8018f24:	2000      	movs	r0, #0
 8018f26:	f7fb f87c 	bl	8014022 <otThreadSetEnabled>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018f2e:	79fb      	ldrb	r3, [r7, #7]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d004      	beq.n	8018f3e <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8018f34:	79fb      	ldrb	r3, [r7, #7]
 8018f36:	4619      	mov	r1, r3
 8018f38:	2005      	movs	r0, #5
 8018f3a:	f7ff ff0f 	bl	8018d5c <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8018f3e:	2100      	movs	r1, #0
 8018f40:	2000      	movs	r0, #0
 8018f42:	f7fa fbf4 	bl	801372e <otIp6SetEnabled>
 8018f46:	4603      	mov	r3, r0
 8018f48:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018f4a:	79fb      	ldrb	r3, [r7, #7]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d004      	beq.n	8018f5a <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8018f50:	79fb      	ldrb	r3, [r7, #7]
 8018f52:	4619      	mov	r1, r3
 8018f54:	2004      	movs	r0, #4
 8018f56:	f7ff ff01 	bl	8018d5c <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8018f5a:	2106      	movs	r1, #6
 8018f5c:	2000      	movs	r0, #0
 8018f5e:	f7fb f82d 	bl	8013fbc <otPlatRadioSetTransmitPower>
 8018f62:	4603      	mov	r3, r0
 8018f64:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018f66:	79fb      	ldrb	r3, [r7, #7]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d004      	beq.n	8018f76 <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8018f6c:	79fb      	ldrb	r3, [r7, #7]
 8018f6e:	4619      	mov	r1, r3
 8018f70:	2002      	movs	r0, #2
 8018f72:	f7ff fef3 	bl	8018d5c <APP_THREAD_Error>
	}

	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8018f76:	2103      	movs	r1, #3
 8018f78:	2000      	movs	r0, #0
 8018f7a:	f7fb f882 	bl	8014082 <otThreadSetChildTimeout>
//	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 8018f7e:	4940      	ldr	r1, [pc, #256]	; (8019080 <APP_THREAD_DeviceConfig+0x218>)
 8018f80:	2000      	movs	r0, #0
 8018f82:	f7fb f8d9 	bl	8014138 <otThreadSetMasterKey>
 8018f86:	4603      	mov	r3, r0
 8018f88:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018f8a:	79fb      	ldrb	r3, [r7, #7]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d004      	beq.n	8018f9a <APP_THREAD_DeviceConfig+0x132>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8018f90:	79fb      	ldrb	r3, [r7, #7]
 8018f92:	4619      	mov	r1, r3
 8018f94:	2002      	movs	r0, #2
 8018f96:	f7ff fee1 	bl	8018d5c <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 8018f9a:	493a      	ldr	r1, [pc, #232]	; (8019084 <APP_THREAD_DeviceConfig+0x21c>)
 8018f9c:	2000      	movs	r0, #0
 8018f9e:	f7fb f94a 	bl	8014236 <otThreadSetNetworkName>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018fa6:	79fb      	ldrb	r3, [r7, #7]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d004      	beq.n	8018fb6 <APP_THREAD_DeviceConfig+0x14e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8018fac:	79fb      	ldrb	r3, [r7, #7]
 8018fae:	4619      	mov	r1, r3
 8018fb0:	2002      	movs	r0, #2
 8018fb2:	f7ff fed3 	bl	8018d5c <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 8018fb6:	4934      	ldr	r1, [pc, #208]	; (8019088 <APP_THREAD_DeviceConfig+0x220>)
 8018fb8:	2000      	movs	r0, #0
 8018fba:	f7fb f88e 	bl	80140da <otThreadSetExtendedPanId>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018fc2:	79fb      	ldrb	r3, [r7, #7]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d004      	beq.n	8018fd2 <APP_THREAD_DeviceConfig+0x16a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8018fc8:	79fb      	ldrb	r3, [r7, #7]
 8018fca:	4619      	mov	r1, r3
 8018fcc:	2002      	movs	r0, #2
 8018fce:	f7ff fec5 	bl	8018d5c <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8018fd2:	2101      	movs	r1, #1
 8018fd4:	2000      	movs	r0, #0
 8018fd6:	f7fa fbaa 	bl	801372e <otIp6SetEnabled>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018fde:	79fb      	ldrb	r3, [r7, #7]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d004      	beq.n	8018fee <APP_THREAD_DeviceConfig+0x186>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8018fe4:	79fb      	ldrb	r3, [r7, #7]
 8018fe6:	4619      	mov	r1, r3
 8018fe8:	2004      	movs	r0, #4
 8018fea:	f7ff feb7 	bl	8018d5c <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 8018fee:	2101      	movs	r1, #1
 8018ff0:	2000      	movs	r0, #0
 8018ff2:	f7fb f816 	bl	8014022 <otThreadSetEnabled>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018ffa:	79fb      	ldrb	r3, [r7, #7]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d004      	beq.n	801900a <APP_THREAD_DeviceConfig+0x1a2>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8019000:	79fb      	ldrb	r3, [r7, #7]
 8019002:	4619      	mov	r1, r3
 8019004:	2005      	movs	r0, #5
 8019006:	f7ff fea9 	bl	8018d5c <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 801900a:	f241 6133 	movw	r1, #5683	; 0x1633
 801900e:	2000      	movs	r0, #0
 8019010:	f7fa fa4f 	bl	80134b2 <otCoapStart>
 8019014:	4603      	mov	r3, r0
 8019016:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8019018:	491c      	ldr	r1, [pc, #112]	; (801908c <APP_THREAD_DeviceConfig+0x224>)
 801901a:	2000      	movs	r0, #0
 801901c:	f7fa fa79 	bl	8013512 <otCoapAddResource>
 8019020:	4603      	mov	r3, r0
 8019022:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8019024:	491a      	ldr	r1, [pc, #104]	; (8019090 <APP_THREAD_DeviceConfig+0x228>)
 8019026:	2000      	movs	r0, #0
 8019028:	f7fa fa73 	bl	8013512 <otCoapAddResource>
 801902c:	4603      	mov	r3, r0
 801902e:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8019030:	4918      	ldr	r1, [pc, #96]	; (8019094 <APP_THREAD_DeviceConfig+0x22c>)
 8019032:	2000      	movs	r0, #0
 8019034:	f7fa fa6d 	bl	8013512 <otCoapAddResource>
 8019038:	4603      	mov	r3, r0
 801903a:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 801903c:	4916      	ldr	r1, [pc, #88]	; (8019098 <APP_THREAD_DeviceConfig+0x230>)
 801903e:	2000      	movs	r0, #0
 8019040:	f7fa fa67 	bl	8013512 <otCoapAddResource>
 8019044:	4603      	mov	r3, r0
 8019046:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8019048:	4914      	ldr	r1, [pc, #80]	; (801909c <APP_THREAD_DeviceConfig+0x234>)
 801904a:	2000      	movs	r0, #0
 801904c:	f7fa fa61 	bl	8013512 <otCoapAddResource>
 8019050:	4603      	mov	r3, r0
 8019052:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8019054:	4912      	ldr	r1, [pc, #72]	; (80190a0 <APP_THREAD_DeviceConfig+0x238>)
 8019056:	4813      	ldr	r0, [pc, #76]	; (80190a4 <APP_THREAD_DeviceConfig+0x23c>)
 8019058:	f7fa fc4c 	bl	80138f4 <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 801905c:	4a12      	ldr	r2, [pc, #72]	; (80190a8 <APP_THREAD_DeviceConfig+0x240>)
 801905e:	4b10      	ldr	r3, [pc, #64]	; (80190a0 <APP_THREAD_DeviceConfig+0x238>)
 8019060:	4614      	mov	r4, r2
 8019062:	6818      	ldr	r0, [r3, #0]
 8019064:	6859      	ldr	r1, [r3, #4]
 8019066:	689a      	ldr	r2, [r3, #8]
 8019068:	68db      	ldr	r3, [r3, #12]
 801906a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 801906c:	480f      	ldr	r0, [pc, #60]	; (80190ac <APP_THREAD_DeviceConfig+0x244>)
 801906e:	f000 f8e5 	bl	801923c <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 8019072:	bf00      	nop
 8019074:	370c      	adds	r7, #12
 8019076:	46bd      	mov	sp, r7
 8019078:	bd90      	pop	{r4, r7, pc}
 801907a:	bf00      	nop
 801907c:	080190b1 	.word	0x080190b1
 8019080:	0801d02c 	.word	0x0801d02c
 8019084:	0801d044 	.word	0x0801d044
 8019088:	0801d03c 	.word	0x0801d03c
 801908c:	20000198 	.word	0x20000198
 8019090:	200001a8 	.word	0x200001a8
 8019094:	200001b8 	.word	0x200001b8
 8019098:	200001c8 	.word	0x200001c8
 801909c:	200001d8 	.word	0x200001d8
 80190a0:	200289fc 	.word	0x200289fc
 80190a4:	0801ca68 	.word	0x0801ca68
 80190a8:	20027820 	.word	0x20027820
 80190ac:	20000200 	.word	0x20000200

080190b0 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 80190b0:	b590      	push	{r4, r7, lr}
 80190b2:	b083      	sub	sp, #12
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
 80190b8:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	f003 0304 	and.w	r3, r3, #4
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d02f      	beq.n	8019124 <APP_THREAD_StateNotif+0x74>
  {
    switch (otThreadGetDeviceRole(NULL))
 80190c4:	2000      	movs	r0, #0
 80190c6:	f7fb f8e5 	bl	8014294 <otThreadGetDeviceRole>
 80190ca:	4603      	mov	r3, r0
 80190cc:	2b04      	cmp	r3, #4
 80190ce:	d826      	bhi.n	801911e <APP_THREAD_StateNotif+0x6e>
 80190d0:	a201      	add	r2, pc, #4	; (adr r2, 80190d8 <APP_THREAD_StateNotif+0x28>)
 80190d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190d6:	bf00      	nop
 80190d8:	080190ed 	.word	0x080190ed
 80190dc:	080190fd 	.word	0x080190fd
 80190e0:	0801910d 	.word	0x0801910d
 80190e4:	08019113 	.word	0x08019113
 80190e8:	08019119 	.word	0x08019119
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 80190ec:	4a10      	ldr	r2, [pc, #64]	; (8019130 <APP_THREAD_StateNotif+0x80>)
 80190ee:	f04f 0300 	mov.w	r3, #0
 80190f2:	f04f 0400 	mov.w	r4, #0
 80190f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 80190fa:	e014      	b.n	8019126 <APP_THREAD_StateNotif+0x76>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 80190fc:	4a0c      	ldr	r2, [pc, #48]	; (8019130 <APP_THREAD_StateNotif+0x80>)
 80190fe:	f04f 0300 	mov.w	r3, #0
 8019102:	f04f 0400 	mov.w	r4, #0
 8019106:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 801910a:	e00c      	b.n	8019126 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 801910c:	f000 f920 	bl	8019350 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8019110:	e009      	b.n	8019126 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8019112:	f000 f91d 	bl	8019350 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8019116:	e006      	b.n	8019126 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8019118:	f000 f91a 	bl	8019350 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 801911c:	e003      	b.n	8019126 <APP_THREAD_StateNotif+0x76>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 801911e:	f000 f917 	bl	8019350 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 8019122:	e000      	b.n	8019126 <APP_THREAD_StateNotif+0x76>
    }
  }
 8019124:	bf00      	nop
}
 8019126:	bf00      	nop
 8019128:	370c      	adds	r7, #12
 801912a:	46bd      	mov	sp, r7
 801912c:	bd90      	pop	{r4, r7, pc}
 801912e:	bf00      	nop
 8019130:	20027820 	.word	0x20027820

08019134 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8019134:	b480      	push	{r7}
 8019136:	b083      	sub	sp, #12
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
 801913c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801913e:	bf00      	nop
 8019140:	370c      	adds	r7, #12
 8019142:	46bd      	mov	sp, r7
 8019144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019148:	4770      	bx	lr
	...

0801914c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b088      	sub	sp, #32
 8019150:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8019152:	1d3b      	adds	r3, r7, #4
 8019154:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8019156:	6978      	ldr	r0, [r7, #20]
 8019158:	f7f9 fab6 	bl	80126c8 <SHCI_GetWirelessFwInfo>
 801915c:	4603      	mov	r3, r0
 801915e:	2b00      	cmp	r3, #0
 8019160:	d004      	beq.n	801916c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8019162:	2101      	movs	r1, #1
 8019164:	201a      	movs	r0, #26
 8019166:	f7ff fdf9 	bl	8018d5c <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801916a:	e03d      	b.n	80191e8 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 801916c:	4a20      	ldr	r2, [pc, #128]	; (80191f0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801916e:	2101      	movs	r1, #1
 8019170:	2000      	movs	r0, #0
 8019172:	f7ec fd45 	bl	8005c00 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8019176:	4a1f      	ldr	r2, [pc, #124]	; (80191f4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8019178:	2101      	movs	r1, #1
 801917a:	2000      	movs	r0, #0
 801917c:	f7ec fd40 	bl	8005c00 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	781b      	ldrb	r3, [r3, #0]
 8019184:	4619      	mov	r1, r3
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	785b      	ldrb	r3, [r3, #1]
 801918a:	461a      	mov	r2, r3
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	789b      	ldrb	r3, [r3, #2]
 8019190:	9301      	str	r3, [sp, #4]
 8019192:	9200      	str	r2, [sp, #0]
 8019194:	460b      	mov	r3, r1
 8019196:	4a18      	ldr	r2, [pc, #96]	; (80191f8 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8019198:	2101      	movs	r1, #1
 801919a:	2000      	movs	r0, #0
 801919c:	f7ec fd30 	bl	8005c00 <logApplication>
    switch(p_wireless_info->StackType)
 80191a0:	697b      	ldr	r3, [r7, #20]
 80191a2:	7a5b      	ldrb	r3, [r3, #9]
 80191a4:	2b11      	cmp	r3, #17
 80191a6:	d009      	beq.n	80191bc <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80191a8:	2b50      	cmp	r3, #80	; 0x50
 80191aa:	d00d      	beq.n	80191c8 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80191ac:	2b10      	cmp	r3, #16
 80191ae:	d111      	bne.n	80191d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 80191b0:	4a12      	ldr	r2, [pc, #72]	; (80191fc <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80191b2:	2101      	movs	r1, #1
 80191b4:	2000      	movs	r0, #0
 80191b6:	f7ec fd23 	bl	8005c00 <logApplication>
      break;
 80191ba:	e010      	b.n	80191de <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80191bc:	4a10      	ldr	r2, [pc, #64]	; (8019200 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80191be:	2101      	movs	r1, #1
 80191c0:	2000      	movs	r0, #0
 80191c2:	f7ec fd1d 	bl	8005c00 <logApplication>
      break;
 80191c6:	e00a      	b.n	80191de <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80191c8:	4a0e      	ldr	r2, [pc, #56]	; (8019204 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80191ca:	2101      	movs	r1, #1
 80191cc:	2000      	movs	r0, #0
 80191ce:	f7ec fd17 	bl	8005c00 <logApplication>
      break;
 80191d2:	e004      	b.n	80191de <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80191d4:	2101      	movs	r1, #1
 80191d6:	201a      	movs	r0, #26
 80191d8:	f7ff fdc0 	bl	8018d5c <APP_THREAD_Error>
      break;
 80191dc:	bf00      	nop
    APP_DBG("**********************************************************");
 80191de:	4a04      	ldr	r2, [pc, #16]	; (80191f0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80191e0:	2101      	movs	r1, #1
 80191e2:	2000      	movs	r0, #0
 80191e4:	f7ec fd0c 	bl	8005c00 <logApplication>
}
 80191e8:	bf00      	nop
 80191ea:	3718      	adds	r7, #24
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bd80      	pop	{r7, pc}
 80191f0:	0801ca70 	.word	0x0801ca70
 80191f4:	0801caac 	.word	0x0801caac
 80191f8:	0801cac8 	.word	0x0801cac8
 80191fc:	0801cae0 	.word	0x0801cae0
 8019200:	0801caf8 	.word	0x0801caf8
 8019204:	0801cb10 	.word	0x0801cb10

08019208 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b082      	sub	sp, #8
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8019210:	f04f 32ff 	mov.w	r2, #4294967295
 8019214:	2101      	movs	r1, #1
 8019216:	2001      	movs	r0, #1
 8019218:	f7fb fb0c 	bl	8014834 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 801921c:	f000 fdee 	bl	8019dfc <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8019220:	e7f6      	b.n	8019210 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08019222 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8019222:	b580      	push	{r7, lr}
 8019224:	b082      	sub	sp, #8
 8019226:	af00      	add	r7, sp, #0
 8019228:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801922a:	f04f 32ff 	mov.w	r2, #4294967295
 801922e:	2101      	movs	r1, #1
 8019230:	2001      	movs	r0, #1
 8019232:	f7fb faff 	bl	8014834 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8019236:	f000 fd63 	bl	8019d00 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801923a:	e7f6      	b.n	801922a <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0801923c <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 801923c:	b480      	push	{r7}
 801923e:	b085      	sub	sp, #20
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 8019244:	2300      	movs	r3, #0
 8019246:	73fb      	strb	r3, [r7, #15]
 8019248:	e00c      	b.n	8019264 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 801924a:	7bfa      	ldrb	r2, [r7, #15]
 801924c:	4b0a      	ldr	r3, [pc, #40]	; (8019278 <stm32UID+0x3c>)
 801924e:	4413      	add	r3, r2
 8019250:	4619      	mov	r1, r3
 8019252:	7bfb      	ldrb	r3, [r7, #15]
 8019254:	687a      	ldr	r2, [r7, #4]
 8019256:	4413      	add	r3, r2
 8019258:	780a      	ldrb	r2, [r1, #0]
 801925a:	b2d2      	uxtb	r2, r2
 801925c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 801925e:	7bfb      	ldrb	r3, [r7, #15]
 8019260:	3301      	adds	r3, #1
 8019262:	73fb      	strb	r3, [r7, #15]
 8019264:	7bfb      	ldrb	r3, [r7, #15]
 8019266:	2b0b      	cmp	r3, #11
 8019268:	d9ef      	bls.n	801924a <stm32UID+0xe>
    }
  }
 801926a:	bf00      	nop
 801926c:	3714      	adds	r7, #20
 801926e:	46bd      	mov	sp, r7
 8019270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019274:	4770      	bx	lr
 8019276:	bf00      	nop
 8019278:	1fff7590 	.word	0x1fff7590

0801927c <APP_THREAD_Init_Dyn_1>:
 * @brief Main entry point for the Thread Application
 * @param  none
 * @retval None
 */
void APP_THREAD_Init_Dyn_1( void )
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b082      	sub	sp, #8
 8019280:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8019282:	f7ff ff63 	bl	801914c <APP_THREAD_CheckWirelessFirmwareInfo>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8019286:	480d      	ldr	r0, [pc, #52]	; (80192bc <APP_THREAD_Init_Dyn_1+0x40>)
 8019288:	f000 fc8e 	bl	8019ba8 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 801928c:	2101      	movs	r1, #1
 801928e:	2002      	movs	r0, #2
 8019290:	f001 fdf4 	bl	801ae7c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8019294:	f000 fd80 	bl	8019d98 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8019298:	f000 fd6c 	bl	8019d74 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 801929c:	f7f9 f9e8 	bl	8012670 <SHCI_C2_THREAD_Init>
 80192a0:	4603      	mov	r3, r0
 80192a2:	71fb      	strb	r3, [r7, #7]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  // TODO: added this call and remove the lines after since (I think) they are unnecessary
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80192a4:	4a06      	ldr	r2, [pc, #24]	; (80192c0 <APP_THREAD_Init_Dyn_1+0x44>)
 80192a6:	2100      	movs	r1, #0
 80192a8:	4806      	ldr	r0, [pc, #24]	; (80192c4 <APP_THREAD_Init_Dyn_1+0x48>)
 80192aa:	f7fb f96b 	bl	8014584 <osThreadNew>
 80192ae:	4602      	mov	r2, r0
 80192b0:	4b05      	ldr	r3, [pc, #20]	; (80192c8 <APP_THREAD_Init_Dyn_1+0x4c>)
 80192b2:	601a      	str	r2, [r3, #0]
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
//
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_SEND_MSG, UTIL_SEQ_RFU,APP_THREAD_SendCoapMsg);
//  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_SET_THREAD_MODE, UTIL_SEQ_RFU,APP_THREAD_SetSleepyEndDeviceMode);
}
 80192b4:	bf00      	nop
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	20030940 	.word	0x20030940
 80192c0:	0801cfb4 	.word	0x0801cfb4
 80192c4:	08019209 	.word	0x08019209
 80192c8:	20027750 	.word	0x20027750

080192cc <APP_THREAD_Init_Dyn_2>:

void APP_THREAD_Init_Dyn_2(void) {
 80192cc:	b580      	push	{r7, lr}
 80192ce:	af00      	add	r7, sp, #0
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 80192d0:	f7ff fdca 	bl	8018e68 <APP_THREAD_DeviceConfig>
  /**
   * Create timer to handle COAP request sending
   */
//  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &sedCoapTimerID, hw_ts_Repeated, APP_THREAD_CoapTimingElapsed);
  /* Allow the 800_15_4 IP to enter in low power mode */
}
 80192d4:	bf00      	nop
 80192d6:	bd80      	pop	{r7, pc}

080192d8 <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80192d8:	b480      	push	{r7}
 80192da:	b085      	sub	sp, #20
 80192dc:	af00      	add	r7, sp, #0
 80192de:	60f8      	str	r0, [r7, #12]
 80192e0:	60b9      	str	r1, [r7, #8]
 80192e2:	607a      	str	r2, [r7, #4]
 80192e4:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 80192e6:	bf00      	nop
 80192e8:	3714      	adds	r7, #20
 80192ea:	46bd      	mov	sp, r7
 80192ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f0:	4770      	bx	lr
	...

080192f4 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80192f4:	b5b0      	push	{r4, r5, r7, lr}
 80192f6:	b084      	sub	sp, #16
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	607a      	str	r2, [r7, #4]
 8019300:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8019302:	68b8      	ldr	r0, [r7, #8]
 8019304:	f7fa fbb3 	bl	8013a6e <otMessageGetOffset>
 8019308:	4603      	mov	r3, r0
 801930a:	4619      	mov	r1, r3
 801930c:	2318      	movs	r3, #24
 801930e:	4a0e      	ldr	r2, [pc, #56]	; (8019348 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8019310:	68b8      	ldr	r0, [r7, #8]
 8019312:	f7fa fc11 	bl	8013b38 <otMessageRead>
 8019316:	4603      	mov	r3, r0
 8019318:	2b18      	cmp	r3, #24
 801931a:	d110      	bne.n	801933e <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 801931c:	4a0b      	ldr	r2, [pc, #44]	; (801934c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 801931e:	4b0a      	ldr	r3, [pc, #40]	; (8019348 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8019320:	4614      	mov	r4, r2
 8019322:	461d      	mov	r5, r3
 8019324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019328:	e895 0003 	ldmia.w	r5, {r0, r1}
 801932c:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8019330:	4b06      	ldr	r3, [pc, #24]	; (801934c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8019332:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8019336:	4618      	mov	r0, r3
 8019338:	4621      	mov	r1, r4
 801933a:	f000 f995 	bl	8019668 <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 801933e:	bf00      	nop
 8019340:	3710      	adds	r7, #16
 8019342:	46bd      	mov	sp, r7
 8019344:	bdb0      	pop	{r4, r5, r7, pc}
 8019346:	bf00      	nop
 8019348:	20027838 	.word	0x20027838
 801934c:	20027820 	.word	0x20027820

08019350 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 8019350:	b580      	push	{r7, lr}
 8019352:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 8019354:	4906      	ldr	r1, [pc, #24]	; (8019370 <APP_THREAD_UpdateBorderRouter+0x20>)
 8019356:	4807      	ldr	r0, [pc, #28]	; (8019374 <APP_THREAD_UpdateBorderRouter+0x24>)
 8019358:	f7fa fa96 	bl	8013888 <otIp6IsAddressEqual>
 801935c:	4603      	mov	r3, r0
 801935e:	2b00      	cmp	r3, #0
 8019360:	d003      	beq.n	801936a <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 8019362:	f000 f809 	bl	8019378 <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 8019366:	f000 f81d 	bl	80193a4 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 801936a:	bf00      	nop
 801936c:	bd80      	pop	{r7, pc}
 801936e:	bf00      	nop
 8019370:	20027820 	.word	0x20027820
 8019374:	200289fc 	.word	0x200289fc

08019378 <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 8019378:	b580      	push	{r7, lr}
 801937a:	b084      	sub	sp, #16
 801937c:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, (char *) borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 801937e:	2301      	movs	r3, #1
 8019380:	9302      	str	r3, [sp, #8]
 8019382:	2301      	movs	r3, #1
 8019384:	9301      	str	r3, [sp, #4]
 8019386:	2300      	movs	r3, #0
 8019388:	9300      	str	r3, [sp, #0]
 801938a:	4b04      	ldr	r3, [pc, #16]	; (801939c <APP_THREAD_SyncWithBorderRouter+0x24>)
 801938c:	4a04      	ldr	r2, [pc, #16]	; (80193a0 <APP_THREAD_SyncWithBorderRouter+0x28>)
 801938e:	2100      	movs	r1, #0
 8019390:	2000      	movs	r0, #0
 8019392:	f000 faf5 	bl	8019980 <APP_THREAD_SendCoapMsgForBorderSync>
}
 8019396:	bf00      	nop
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}
 801939c:	0801cffc 	.word	0x0801cffc
 80193a0:	200289fc 	.word	0x200289fc

080193a4 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 80193a4:	b580      	push	{r7, lr}
 80193a6:	b084      	sub	sp, #16
 80193a8:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, (char *) nodeInfoResource, NO_ACK,
 80193aa:	2301      	movs	r3, #1
 80193ac:	9302      	str	r3, [sp, #8]
 80193ae:	2303      	movs	r3, #3
 80193b0:	9301      	str	r3, [sp, #4]
 80193b2:	2300      	movs	r3, #0
 80193b4:	9300      	str	r3, [sp, #0]
 80193b6:	4b04      	ldr	r3, [pc, #16]	; (80193c8 <APP_THREAD_SendMyInfo+0x24>)
 80193b8:	4a04      	ldr	r2, [pc, #16]	; (80193cc <APP_THREAD_SendMyInfo+0x28>)
 80193ba:	2122      	movs	r1, #34	; 0x22
 80193bc:	4804      	ldr	r0, [pc, #16]	; (80193d0 <APP_THREAD_SendMyInfo+0x2c>)
 80193be:	f000 f9bd 	bl	801973c <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 80193c2:	bf00      	nop
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}
 80193c8:	0801d01c 	.word	0x0801d01c
 80193cc:	20027820 	.word	0x20027820
 80193d0:	200001e8 	.word	0x200001e8

080193d4 <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b088      	sub	sp, #32
 80193d8:	af04      	add	r7, sp, #16
 80193da:	60f8      	str	r0, [r7, #12]
 80193dc:	460b      	mov	r3, r1
 80193de:	607a      	str	r2, [r7, #4]
 80193e0:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 80193e2:	7afb      	ldrb	r3, [r7, #11]
 80193e4:	b299      	uxth	r1, r3
 80193e6:	2301      	movs	r3, #1
 80193e8:	9302      	str	r3, [sp, #8]
 80193ea:	2303      	movs	r3, #3
 80193ec:	9301      	str	r3, [sp, #4]
 80193ee:	2300      	movs	r3, #0
 80193f0:	9300      	str	r3, [sp, #0]
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	4a03      	ldr	r2, [pc, #12]	; (8019404 <APP_THREAD_SendBorderMessage+0x30>)
 80193f6:	68f8      	ldr	r0, [r7, #12]
 80193f8:	f000 f9a0 	bl	801973c <APP_THREAD_SendCoapMsg>
}
 80193fc:	bf00      	nop
 80193fe:	3710      	adds	r7, #16
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}
 8019404:	20027820 	.word	0x20027820

08019408 <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 8019408:	b580      	push	{r7, lr}
 801940a:	b086      	sub	sp, #24
 801940c:	af04      	add	r7, sp, #16
 801940e:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, (char *) borderPacket, NO_ACK,
 8019410:	2301      	movs	r3, #1
 8019412:	9302      	str	r3, [sp, #8]
 8019414:	2303      	movs	r3, #3
 8019416:	9301      	str	r3, [sp, #4]
 8019418:	2300      	movs	r3, #0
 801941a:	9300      	str	r3, [sp, #0]
 801941c:	4b04      	ldr	r3, [pc, #16]	; (8019430 <APP_THREAD_SendBorderPacket+0x28>)
 801941e:	4a05      	ldr	r2, [pc, #20]	; (8019434 <APP_THREAD_SendBorderPacket+0x2c>)
 8019420:	21cc      	movs	r1, #204	; 0xcc
 8019422:	6878      	ldr	r0, [r7, #4]
 8019424:	f000 f98a 	bl	801973c <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 8019428:	bf00      	nop
 801942a:	3708      	adds	r7, #8
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}
 8019430:	0801d00c 	.word	0x0801d00c
 8019434:	20027820 	.word	0x20027820

08019438 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		otMessageInfo *pMessageInfo) {
 8019438:	b580      	push	{r7, lr}
 801943a:	b084      	sub	sp, #16
 801943c:	af00      	add	r7, sp, #0
 801943e:	60f8      	str	r0, [r7, #12]
 8019440:	60b9      	str	r1, [r7, #8]
 8019442:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8019444:	68f8      	ldr	r0, [r7, #12]
 8019446:	f7f9 ff15 	bl	8013274 <otCoapHeaderGetCode>
 801944a:	4603      	mov	r3, r0
 801944c:	2b01      	cmp	r3, #1
 801944e:	d106      	bne.n	801945e <APP_THREAD_CoapLightsSimpleRequestHandler+0x26>
//			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage), pHeader, pMessageInfo);
			APP_THREAD_SendDataResponse(&lightsSimpleMessage, sizeof(lightsSimpleMessage), pHeader, pMessageInfo);
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	68fa      	ldr	r2, [r7, #12]
 8019454:	2104      	movs	r1, #4
 8019456:	4822      	ldr	r0, [pc, #136]	; (80194e0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 8019458:	f000 fb48 	bl	8019aec <APP_THREAD_SendDataResponse>
			break;
 801945c:	e03c      	b.n	80194d8 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 801945e:	68b8      	ldr	r0, [r7, #8]
 8019460:	f7fa fb05 	bl	8013a6e <otMessageGetOffset>
 8019464:	4603      	mov	r3, r0
 8019466:	4619      	mov	r1, r3
 8019468:	2304      	movs	r3, #4
 801946a:	4a1d      	ldr	r2, [pc, #116]	; (80194e0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 801946c:	68b8      	ldr	r0, [r7, #8]
 801946e:	f7fa fb63 	bl	8013b38 <otMessageRead>
 8019472:	4603      	mov	r3, r0
 8019474:	2b04      	cmp	r3, #4
 8019476:	d112      	bne.n	801949e <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8019478:	68f8      	ldr	r0, [r7, #12]
 801947a:	f7f9 fefb 	bl	8013274 <otCoapHeaderGetCode>
 801947e:	4603      	mov	r3, r0
 8019480:	2b03      	cmp	r3, #3
 8019482:	d005      	beq.n	8019490 <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8019484:	68f8      	ldr	r0, [r7, #12]
 8019486:	f7f9 fef5 	bl	8013274 <otCoapHeaderGetCode>
 801948a:	4603      	mov	r3, r0
 801948c:	2b02      	cmp	r3, #2
 801948e:	d106      	bne.n	801949e <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8019490:	4b14      	ldr	r3, [pc, #80]	; (80194e4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8019492:	6818      	ldr	r0, [r3, #0]
 8019494:	2300      	movs	r3, #0
 8019496:	2200      	movs	r2, #0
 8019498:	4911      	ldr	r1, [pc, #68]	; (80194e0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 801949a:	f7fb fedb 	bl	8015254 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 801949e:	4a12      	ldr	r2, [pc, #72]	; (80194e8 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 80194a4:	4a11      	ldr	r2, [pc, #68]	; (80194ec <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 80194a6:	68bb      	ldr	r3, [r7, #8]
 80194a8:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80194aa:	68f8      	ldr	r0, [r7, #12]
 80194ac:	f7f9 feb4 	bl	8013218 <otCoapHeaderGetType>
 80194b0:	4603      	mov	r3, r0
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d106      	bne.n	80194c4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x8c>
//			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	68fa      	ldr	r2, [r7, #12]
 80194ba:	2100      	movs	r1, #0
 80194bc:	2000      	movs	r0, #0
 80194be:	f000 fb15 	bl	8019aec <APP_THREAD_SendDataResponse>
			break;
 80194c2:	e009      	b.n	80194d8 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 80194c4:	68b8      	ldr	r0, [r7, #8]
 80194c6:	f7fa fad2 	bl	8013a6e <otMessageGetOffset>
 80194ca:	4603      	mov	r3, r0
 80194cc:	4619      	mov	r1, r3
 80194ce:	2301      	movs	r3, #1
 80194d0:	4a07      	ldr	r2, [pc, #28]	; (80194f0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 80194d2:	68b8      	ldr	r0, [r7, #8]
 80194d4:	f7fa fb30 	bl	8013b38 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 80194d8:	bf00      	nop
 80194da:	3710      	adds	r7, #16
 80194dc:	46bd      	mov	sp, r7
 80194de:	bd80      	pop	{r7, pc}
 80194e0:	200280a0 	.word	0x200280a0
 80194e4:	20027c58 	.word	0x20027c58
 80194e8:	200289d4 	.word	0x200289d4
 80194ec:	20028a10 	.word	0x20028a10
 80194f0:	20027819 	.word	0x20027819

080194f4 <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b084      	sub	sp, #16
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	60f8      	str	r0, [r7, #12]
 80194fc:	60b9      	str	r1, [r7, #8]
 80194fe:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8019500:	68f8      	ldr	r0, [r7, #12]
 8019502:	f7f9 feb7 	bl	8013274 <otCoapHeaderGetCode>
 8019506:	4603      	mov	r3, r0
 8019508:	2b01      	cmp	r3, #1
 801950a:	d106      	bne.n	801951a <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	68fa      	ldr	r2, [r7, #12]
 8019510:	2106      	movs	r1, #6
 8019512:	481a      	ldr	r0, [pc, #104]	; (801957c <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8019514:	f000 faea 	bl	8019aec <APP_THREAD_SendDataResponse>
			break;
 8019518:	e02c      	b.n	8019574 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 801951a:	68b8      	ldr	r0, [r7, #8]
 801951c:	f7fa faa7 	bl	8013a6e <otMessageGetOffset>
 8019520:	4603      	mov	r3, r0
 8019522:	4619      	mov	r1, r3
 8019524:	2306      	movs	r3, #6
 8019526:	4a15      	ldr	r2, [pc, #84]	; (801957c <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8019528:	68b8      	ldr	r0, [r7, #8]
 801952a:	f7fa fb05 	bl	8013b38 <otMessageRead>
 801952e:	4603      	mov	r3, r0
 8019530:	2b06      	cmp	r3, #6
 8019532:	d112      	bne.n	801955a <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8019534:	68f8      	ldr	r0, [r7, #12]
 8019536:	f7f9 fe9d 	bl	8013274 <otCoapHeaderGetCode>
 801953a:	4603      	mov	r3, r0
 801953c:	2b03      	cmp	r3, #3
 801953e:	d005      	beq.n	801954c <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8019540:	68f8      	ldr	r0, [r7, #12]
 8019542:	f7f9 fe97 	bl	8013274 <otCoapHeaderGetCode>
 8019546:	4603      	mov	r3, r0
 8019548:	2b02      	cmp	r3, #2
 801954a:	d106      	bne.n	801955a <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 801954c:	4b0c      	ldr	r3, [pc, #48]	; (8019580 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 801954e:	6818      	ldr	r0, [r3, #0]
 8019550:	2300      	movs	r3, #0
 8019552:	2200      	movs	r2, #0
 8019554:	4909      	ldr	r1, [pc, #36]	; (801957c <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8019556:	f7fb fe7d 	bl	8015254 <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801955a:	68f8      	ldr	r0, [r7, #12]
 801955c:	f7f9 fe5c 	bl	8013218 <otCoapHeaderGetType>
 8019560:	4603      	mov	r3, r0
 8019562:	2b00      	cmp	r3, #0
 8019564:	d106      	bne.n	8019574 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	68fa      	ldr	r2, [r7, #12]
 801956a:	2100      	movs	r1, #0
 801956c:	2000      	movs	r0, #0
 801956e:	f000 fabd 	bl	8019aec <APP_THREAD_SendDataResponse>
			break;
 8019572:	bf00      	nop
		}

	} while (false);
}
 8019574:	bf00      	nop
 8019576:	3710      	adds	r7, #16
 8019578:	46bd      	mov	sp, r7
 801957a:	bd80      	pop	{r7, pc}
 801957c:	200289dc 	.word	0x200289dc
 8019580:	20028088 	.word	0x20028088

08019584 <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8019584:	b5b0      	push	{r4, r5, r7, lr}
 8019586:	b084      	sub	sp, #16
 8019588:	af00      	add	r7, sp, #0
 801958a:	60f8      	str	r0, [r7, #12]
 801958c:	60b9      	str	r1, [r7, #8]
 801958e:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8019590:	68b8      	ldr	r0, [r7, #8]
 8019592:	f7fa fa6c 	bl	8013a6e <otMessageGetOffset>
 8019596:	4603      	mov	r3, r0
 8019598:	4619      	mov	r1, r3
 801959a:	2318      	movs	r3, #24
 801959c:	4a1f      	ldr	r2, [pc, #124]	; (801961c <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 801959e:	68b8      	ldr	r0, [r7, #8]
 80195a0:	f7fa faca 	bl	8013b38 <otMessageRead>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b18      	cmp	r3, #24
 80195a8:	d11c      	bne.n	80195e4 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80195aa:	68f8      	ldr	r0, [r7, #12]
 80195ac:	f7f9 fe62 	bl	8013274 <otCoapHeaderGetCode>
 80195b0:	4603      	mov	r3, r0
 80195b2:	2b03      	cmp	r3, #3
 80195b4:	d005      	beq.n	80195c2 <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 80195b6:	68f8      	ldr	r0, [r7, #12]
 80195b8:	f7f9 fe5c 	bl	8013274 <otCoapHeaderGetCode>
 80195bc:	4603      	mov	r3, r0
 80195be:	2b02      	cmp	r3, #2
 80195c0:	d110      	bne.n	80195e4 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 80195c2:	4a17      	ldr	r2, [pc, #92]	; (8019620 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80195c4:	4b15      	ldr	r3, [pc, #84]	; (801961c <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 80195c6:	4614      	mov	r4, r2
 80195c8:	461d      	mov	r5, r3
 80195ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80195d2:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 80195d6:	4b12      	ldr	r3, [pc, #72]	; (8019620 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80195d8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80195dc:	4618      	mov	r0, r3
 80195de:	4621      	mov	r1, r4
 80195e0:	f000 f842 	bl	8019668 <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 80195e4:	4a0f      	ldr	r2, [pc, #60]	; (8019624 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80195ea:	68f8      	ldr	r0, [r7, #12]
 80195ec:	f7f9 fe42 	bl	8013274 <otCoapHeaderGetCode>
 80195f0:	4603      	mov	r3, r0
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d00c      	beq.n	8019610 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80195f6:	68f8      	ldr	r0, [r7, #12]
 80195f8:	f7f9 fe0e 	bl	8013218 <otCoapHeaderGetType>
 80195fc:	4603      	mov	r3, r0
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d107      	bne.n	8019612 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	68fa      	ldr	r2, [r7, #12]
 8019606:	2100      	movs	r1, #0
 8019608:	2000      	movs	r0, #0
 801960a:	f000 fa6f 	bl	8019aec <APP_THREAD_SendDataResponse>
			break;
 801960e:	e000      	b.n	8019612 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 8019610:	bf00      	nop
		}

	} while (false);
}
 8019612:	bf00      	nop
 8019614:	3710      	adds	r7, #16
 8019616:	46bd      	mov	sp, r7
 8019618:	bdb0      	pop	{r4, r5, r7, pc}
 801961a:	bf00      	nop
 801961c:	20027838 	.word	0x20027838
 8019620:	20027820 	.word	0x20027820
 8019624:	20028a10 	.word	0x20028a10

08019628 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8019628:	b580      	push	{r7, lr}
 801962a:	b084      	sub	sp, #16
 801962c:	af00      	add	r7, sp, #0
 801962e:	60f8      	str	r0, [r7, #12]
 8019630:	60b9      	str	r1, [r7, #8]
 8019632:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8019634:	68f8      	ldr	r0, [r7, #12]
 8019636:	f7f9 fe1d 	bl	8013274 <otCoapHeaderGetCode>
 801963a:	4603      	mov	r3, r0
 801963c:	2b01      	cmp	r3, #1
 801963e:	d103      	bne.n	8019648 <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8019640:	f7ff feb0 	bl	80193a4 <APP_THREAD_SendMyInfo>

			break;
 8019644:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 8019646:	e00b      	b.n	8019660 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8019648:	68f8      	ldr	r0, [r7, #12]
 801964a:	f7f9 fde5 	bl	8013218 <otCoapHeaderGetType>
 801964e:	4603      	mov	r3, r0
 8019650:	2b00      	cmp	r3, #0
 8019652:	d105      	bne.n	8019660 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	68fa      	ldr	r2, [r7, #12]
 8019658:	2100      	movs	r1, #0
 801965a:	2000      	movs	r0, #0
 801965c:	f000 fa46 	bl	8019aec <APP_THREAD_SendDataResponse>
}
 8019660:	bf00      	nop
 8019662:	3710      	adds	r7, #16
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}

08019668 <updateRTC>:

void updateRTC(time_t now) {
 8019668:	b580      	push	{r7, lr}
 801966a:	b088      	sub	sp, #32
 801966c:	af00      	add	r7, sp, #0
 801966e:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8019672:	683b      	ldr	r3, [r7, #0]
 8019674:	f107 0208 	add.w	r2, r7, #8
 8019678:	f107 010c 	add.w	r1, r7, #12
 801967c:	4618      	mov	r0, r3
 801967e:	f7eb fe77 	bl	8005370 <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8019682:	f107 030c 	add.w	r3, r7, #12
 8019686:	2200      	movs	r2, #0
 8019688:	4619      	mov	r1, r3
 801968a:	480a      	ldr	r0, [pc, #40]	; (80196b4 <updateRTC+0x4c>)
 801968c:	f7f4 fb37 	bl	800dcfe <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8019690:	f107 0308 	add.w	r3, r7, #8
 8019694:	2200      	movs	r2, #0
 8019696:	4619      	mov	r1, r3
 8019698:	4806      	ldr	r0, [pc, #24]	; (80196b4 <updateRTC+0x4c>)
 801969a:	f7f4 fc50 	bl	800df3e <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 801969e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80196a2:	2100      	movs	r1, #0
 80196a4:	4803      	ldr	r0, [pc, #12]	; (80196b4 <updateRTC+0x4c>)
 80196a6:	f7f4 fdd1 	bl	800e24c <HAL_RTCEx_BKUPWrite>
}
 80196aa:	bf00      	nop
 80196ac:	3720      	adds	r7, #32
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd80      	pop	{r7, pc}
 80196b2:	bf00      	nop
 80196b4:	200287e8 	.word	0x200287e8

080196b8 <APP_THREAD_CoapLightsComplexRequestHandler>:

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		otMessageInfo *pMessageInfo) {
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b084      	sub	sp, #16
 80196bc:	af00      	add	r7, sp, #0
 80196be:	60f8      	str	r0, [r7, #12]
 80196c0:	60b9      	str	r1, [r7, #8]
 80196c2:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 80196c4:	68b8      	ldr	r0, [r7, #8]
 80196c6:	f7fa f9d2 	bl	8013a6e <otMessageGetOffset>
 80196ca:	4603      	mov	r3, r0
 80196cc:	4619      	mov	r1, r3
 80196ce:	2312      	movs	r3, #18
 80196d0:	4a16      	ldr	r2, [pc, #88]	; (801972c <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 80196d2:	68b8      	ldr	r0, [r7, #8]
 80196d4:	f7fa fa30 	bl	8013b38 <otMessageRead>
 80196d8:	4603      	mov	r3, r0
 80196da:	2b12      	cmp	r3, #18
 80196dc:	d102      	bne.n	80196e4 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 80196de:	4813      	ldr	r0, [pc, #76]	; (801972c <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 80196e0:	f7ea fd44 	bl	800416c <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 80196e4:	4a12      	ldr	r2, [pc, #72]	; (8019730 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 80196ea:	4a12      	ldr	r2, [pc, #72]	; (8019734 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 80196f0:	68f8      	ldr	r0, [r7, #12]
 80196f2:	f7f9 fd91 	bl	8013218 <otCoapHeaderGetType>
 80196f6:	4603      	mov	r3, r0
 80196f8:	2b10      	cmp	r3, #16
 80196fa:	d110      	bne.n	801971e <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 80196fc:	68f8      	ldr	r0, [r7, #12]
 80196fe:	f7f9 fdb9 	bl	8013274 <otCoapHeaderGetCode>
 8019702:	4603      	mov	r3, r0
 8019704:	2b03      	cmp	r3, #3
 8019706:	d10c      	bne.n	8019722 <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8019708:	68b8      	ldr	r0, [r7, #8]
 801970a:	f7fa f9b0 	bl	8013a6e <otMessageGetOffset>
 801970e:	4603      	mov	r3, r0
 8019710:	4619      	mov	r1, r3
 8019712:	2301      	movs	r3, #1
 8019714:	4a08      	ldr	r2, [pc, #32]	; (8019738 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8019716:	68b8      	ldr	r0, [r7, #8]
 8019718:	f7fa fa0e 	bl	8013b38 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 801971c:	e002      	b.n	8019724 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 801971e:	bf00      	nop
 8019720:	e000      	b.n	8019724 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8019722:	bf00      	nop
}
 8019724:	bf00      	nop
 8019726:	3710      	adds	r7, #16
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	200289e8 	.word	0x200289e8
 8019730:	200289d4 	.word	0x200289d4
 8019734:	20028a10 	.word	0x20028a10
 8019738:	20027819 	.word	0x20027819

0801973c <APP_THREAD_SendCoapMsg>:
}


static char empty_message[10] = "";
void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 801973c:	b590      	push	{r4, r7, lr}
 801973e:	b087      	sub	sp, #28
 8019740:	af02      	add	r7, sp, #8
 8019742:	60f8      	str	r0, [r7, #12]
 8019744:	607a      	str	r2, [r7, #4]
 8019746:	603b      	str	r3, [r7, #0]
 8019748:	460b      	mov	r3, r1
 801974a:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 801974c:	2000      	movs	r0, #0
 801974e:	f7fa fdca 	bl	80142e6 <otThreadGetRloc16>
 8019752:	4603      	mov	r3, r0
 8019754:	461a      	mov	r2, r3
 8019756:	4b7e      	ldr	r3, [pc, #504]	; (8019950 <APP_THREAD_SendCoapMsg+0x214>)
 8019758:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = (otNetifAddress *OTCALL) otIp6GetUnicastAddresses(NULL);
 801975a:	2000      	movs	r0, #0
 801975c:	f7fa f844 	bl	80137e8 <otIp6GetUnicastAddresses>
 8019760:	4602      	mov	r2, r0
 8019762:	4b7c      	ldr	r3, [pc, #496]	; (8019954 <APP_THREAD_SendCoapMsg+0x218>)
 8019764:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8019766:	2000      	movs	r0, #0
 8019768:	f7fa f811 	bl	801378e <otIp6IsEnabled>
 801976c:	4603      	mov	r3, r0
 801976e:	461a      	mov	r2, r3
 8019770:	4b79      	ldr	r3, [pc, #484]	; (8019958 <APP_THREAD_SendCoapMsg+0x21c>)
 8019772:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = (otNetifMulticastAddress *) otIp6GetMulticastAddresses(NULL);
 8019774:	2000      	movs	r0, #0
 8019776:	f7fa f85f 	bl	8013838 <otIp6GetMulticastAddresses>
 801977a:	4602      	mov	r2, r0
 801977c:	4b77      	ldr	r3, [pc, #476]	; (801995c <APP_THREAD_SendCoapMsg+0x220>)
 801977e:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  (otIp6Address *OTCALL) otThreadGetMeshLocalEid(NULL);
 8019780:	2000      	movs	r0, #0
 8019782:	f7fa fd08 	bl	8014196 <otThreadGetMeshLocalEid>
 8019786:	4602      	mov	r2, r0
 8019788:	4b75      	ldr	r3, [pc, #468]	; (8019960 <APP_THREAD_SendCoapMsg+0x224>)
 801978a:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = (otIp6Address *) otThreadGetLinkLocalIp6Address(NULL);
 801978c:	2000      	movs	r0, #0
 801978e:	f7fa fd2a 	bl	80141e6 <otThreadGetLinkLocalIp6Address>
 8019792:	4602      	mov	r2, r0
 8019794:	4b73      	ldr	r3, [pc, #460]	; (8019964 <APP_THREAD_SendCoapMsg+0x228>)
 8019796:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8019798:	222c      	movs	r2, #44	; 0x2c
 801979a:	2100      	movs	r1, #0
 801979c:	4872      	ldr	r0, [pc, #456]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 801979e:	f001 fe96 	bl	801b4ce <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 80197a2:	897b      	ldrh	r3, [r7, #10]
 80197a4:	2b64      	cmp	r3, #100	; 0x64
 80197a6:	d914      	bls.n	80197d2 <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 80197a8:	4b6f      	ldr	r3, [pc, #444]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 80197aa:	4a70      	ldr	r2, [pc, #448]	; (801996c <APP_THREAD_SendCoapMsg+0x230>)
 80197ac:	f103 0410 	add.w	r4, r3, #16
 80197b0:	4613      	mov	r3, r2
 80197b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80197b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 80197b8:	2000      	movs	r0, #0
 80197ba:	f7fa fcec 	bl	8014196 <otThreadGetMeshLocalEid>
 80197be:	4602      	mov	r2, r0
 80197c0:	4b69      	ldr	r3, [pc, #420]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 80197c2:	461c      	mov	r4, r3
 80197c4:	4613      	mov	r3, r2
 80197c6:	6818      	ldr	r0, [r3, #0]
 80197c8:	6859      	ldr	r1, [r3, #4]
 80197ca:	689a      	ldr	r2, [r3, #8]
 80197cc:	68db      	ldr	r3, [r3, #12]
 80197ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197d0:	e015      	b.n	80197fe <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 80197d2:	4b65      	ldr	r3, [pc, #404]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 80197d4:	4a66      	ldr	r2, [pc, #408]	; (8019970 <APP_THREAD_SendCoapMsg+0x234>)
 80197d6:	f103 0410 	add.w	r4, r3, #16
 80197da:	4613      	mov	r3, r2
 80197dc:	6818      	ldr	r0, [r3, #0]
 80197de:	6859      	ldr	r1, [r3, #4]
 80197e0:	689a      	ldr	r2, [r3, #8]
 80197e2:	68db      	ldr	r3, [r3, #12]
 80197e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 80197e6:	2000      	movs	r0, #0
 80197e8:	f7fa fcd5 	bl	8014196 <otThreadGetMeshLocalEid>
 80197ec:	4602      	mov	r2, r0
 80197ee:	4b5e      	ldr	r3, [pc, #376]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 80197f0:	461c      	mov	r4, r3
 80197f2:	4613      	mov	r3, r2
 80197f4:	6818      	ldr	r0, [r3, #0]
 80197f6:	6859      	ldr	r1, [r3, #4]
 80197f8:	689a      	ldr	r2, [r3, #8]
 80197fa:	68db      	ldr	r3, [r3, #12]
 80197fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 80197fe:	4b5a      	ldr	r3, [pc, #360]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 8019800:	2201      	movs	r2, #1
 8019802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8019806:	4b58      	ldr	r3, [pc, #352]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 8019808:	f241 6233 	movw	r2, #5683	; 0x1633
 801980c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801980e:	4b56      	ldr	r3, [pc, #344]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 8019810:	2240      	movs	r2, #64	; 0x40
 8019812:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8019816:	f897 3020 	ldrb.w	r3, [r7, #32]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d009      	beq.n	8019832 <APP_THREAD_SendCoapMsg+0xf6>
 801981e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019822:	2b03      	cmp	r3, #3
 8019824:	d105      	bne.n	8019832 <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8019826:	2203      	movs	r2, #3
 8019828:	2100      	movs	r1, #0
 801982a:	4852      	ldr	r0, [pc, #328]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 801982c:	f7f9 fb98 	bl	8012f60 <otCoapHeaderInit>
 8019830:	e04a      	b.n	80198c8 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8019832:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d009      	beq.n	801984e <APP_THREAD_SendCoapMsg+0x112>
 801983a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801983e:	2b01      	cmp	r3, #1
 8019840:	d105      	bne.n	801984e <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8019842:	2201      	movs	r2, #1
 8019844:	2100      	movs	r1, #0
 8019846:	484b      	ldr	r0, [pc, #300]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 8019848:	f7f9 fb8a 	bl	8012f60 <otCoapHeaderInit>
 801984c:	e03c      	b.n	80198c8 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 801984e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d009      	beq.n	801986a <APP_THREAD_SendCoapMsg+0x12e>
 8019856:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801985a:	2b02      	cmp	r3, #2
 801985c:	d105      	bne.n	801986a <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 801985e:	2202      	movs	r2, #2
 8019860:	2100      	movs	r1, #0
 8019862:	4844      	ldr	r0, [pc, #272]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 8019864:	f7f9 fb7c 	bl	8012f60 <otCoapHeaderInit>
 8019868:	e02e      	b.n	80198c8 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 801986a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d109      	bne.n	8019886 <APP_THREAD_SendCoapMsg+0x14a>
 8019872:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019876:	2b03      	cmp	r3, #3
 8019878:	d105      	bne.n	8019886 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801987a:	2203      	movs	r2, #3
 801987c:	2110      	movs	r1, #16
 801987e:	483d      	ldr	r0, [pc, #244]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 8019880:	f7f9 fb6e 	bl	8012f60 <otCoapHeaderInit>
 8019884:	e020      	b.n	80198c8 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8019886:	f897 3020 	ldrb.w	r3, [r7, #32]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d109      	bne.n	80198a2 <APP_THREAD_SendCoapMsg+0x166>
 801988e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019892:	2b01      	cmp	r3, #1
 8019894:	d105      	bne.n	80198a2 <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8019896:	2201      	movs	r2, #1
 8019898:	2110      	movs	r1, #16
 801989a:	4836      	ldr	r0, [pc, #216]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 801989c:	f7f9 fb60 	bl	8012f60 <otCoapHeaderInit>
 80198a0:	e012      	b.n	80198c8 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 80198a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d109      	bne.n	80198be <APP_THREAD_SendCoapMsg+0x182>
 80198aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80198ae:	2b02      	cmp	r3, #2
 80198b0:	d105      	bne.n	80198be <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 80198b2:	2202      	movs	r2, #2
 80198b4:	2110      	movs	r1, #16
 80198b6:	482f      	ldr	r0, [pc, #188]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 80198b8:	f7f9 fb52 	bl	8012f60 <otCoapHeaderInit>
 80198bc:	e004      	b.n	80198c8 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 80198be:	2102      	movs	r1, #2
 80198c0:	482c      	ldr	r0, [pc, #176]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 80198c2:	f7f9 fbb6 	bl	8013032 <otCoapHeaderGenerateToken>
 80198c6:	e040      	b.n	801994a <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 80198c8:	6839      	ldr	r1, [r7, #0]
 80198ca:	482a      	ldr	r0, [pc, #168]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 80198cc:	f7f9 fc14 	bl	80130f8 <otCoapHeaderAppendUriPathOptions>
 80198d0:	4603      	mov	r3, r0
 80198d2:	461a      	mov	r2, r3
 80198d4:	4b28      	ldr	r3, [pc, #160]	; (8019978 <APP_THREAD_SendCoapMsg+0x23c>)
 80198d6:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80198d8:	212a      	movs	r1, #42	; 0x2a
 80198da:	4826      	ldr	r0, [pc, #152]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 80198dc:	f7f9 fbd9 	bl	8013092 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 80198e0:	897b      	ldrh	r3, [r7, #10]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d002      	beq.n	80198ec <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 80198e6:	4823      	ldr	r0, [pc, #140]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 80198e8:	f7f9 fc38 	bl	801315c <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80198ec:	4921      	ldr	r1, [pc, #132]	; (8019974 <APP_THREAD_SendCoapMsg+0x238>)
 80198ee:	2000      	movs	r0, #0
 80198f0:	f7f9 fd77 	bl	80133e2 <otCoapNewMessage>
 80198f4:	4602      	mov	r2, r0
 80198f6:	4b21      	ldr	r3, [pc, #132]	; (801997c <APP_THREAD_SendCoapMsg+0x240>)
 80198f8:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 80198fa:	897b      	ldrh	r3, [r7, #10]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d00a      	beq.n	8019916 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8019900:	4b1e      	ldr	r3, [pc, #120]	; (801997c <APP_THREAD_SendCoapMsg+0x240>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	897a      	ldrh	r2, [r7, #10]
 8019906:	68f9      	ldr	r1, [r7, #12]
 8019908:	4618      	mov	r0, r3
 801990a:	f7fa f8de 	bl	8013aca <otMessageAppend>
 801990e:	4603      	mov	r3, r0
 8019910:	461a      	mov	r2, r3
 8019912:	4b19      	ldr	r3, [pc, #100]	; (8019978 <APP_THREAD_SendCoapMsg+0x23c>)
 8019914:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8019916:	4b19      	ldr	r3, [pc, #100]	; (801997c <APP_THREAD_SendCoapMsg+0x240>)
 8019918:	6819      	ldr	r1, [r3, #0]
 801991a:	2300      	movs	r3, #0
 801991c:	9300      	str	r3, [sp, #0]
 801991e:	2300      	movs	r3, #0
 8019920:	4a11      	ldr	r2, [pc, #68]	; (8019968 <APP_THREAD_SendCoapMsg+0x22c>)
 8019922:	2000      	movs	r0, #0
 8019924:	f7f9 fd8b 	bl	801343e <otCoapSendRequest>
 8019928:	4603      	mov	r3, r0
 801992a:	461a      	mov	r2, r3
 801992c:	4b12      	ldr	r3, [pc, #72]	; (8019978 <APP_THREAD_SendCoapMsg+0x23c>)
 801992e:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8019930:	4b11      	ldr	r3, [pc, #68]	; (8019978 <APP_THREAD_SendCoapMsg+0x23c>)
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d008      	beq.n	801994a <APP_THREAD_SendCoapMsg+0x20e>
 8019938:	4b10      	ldr	r3, [pc, #64]	; (801997c <APP_THREAD_SendCoapMsg+0x240>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d004      	beq.n	801994a <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 8019940:	4b0e      	ldr	r3, [pc, #56]	; (801997c <APP_THREAD_SendCoapMsg+0x240>)
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	4618      	mov	r0, r3
 8019946:	f7fa f867 	bl	8013a18 <otMessageFree>
		}

	} while (false);
}
 801994a:	3714      	adds	r7, #20
 801994c:	46bd      	mov	sp, r7
 801994e:	bd90      	pop	{r4, r7, pc}
 8019950:	20028a22 	.word	0x20028a22
 8019954:	20028a24 	.word	0x20028a24
 8019958:	20028a0c 	.word	0x20028a0c
 801995c:	200289d8 	.word	0x200289d8
 8019960:	20028a1c 	.word	0x20028a1c
 8019964:	200289e4 	.word	0x200289e4
 8019968:	20027758 	.word	0x20027758
 801996c:	20027820 	.word	0x20027820
 8019970:	200289fc 	.word	0x200289fc
 8019974:	20027784 	.word	0x20027784
 8019978:	20027818 	.word	0x20027818
 801997c:	20027814 	.word	0x20027814

08019980 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8019980:	b590      	push	{r4, r7, lr}
 8019982:	b087      	sub	sp, #28
 8019984:	af02      	add	r7, sp, #8
 8019986:	60f8      	str	r0, [r7, #12]
 8019988:	607a      	str	r2, [r7, #4]
 801998a:	603b      	str	r3, [r7, #0]
 801998c:	460b      	mov	r3, r1
 801998e:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8019990:	222c      	movs	r2, #44	; 0x2c
 8019992:	2100      	movs	r1, #0
 8019994:	484e      	ldr	r0, [pc, #312]	; (8019ad0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8019996:	f001 fd9a 	bl	801b4ce <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 801999a:	4b4d      	ldr	r3, [pc, #308]	; (8019ad0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 801999c:	4a4d      	ldr	r2, [pc, #308]	; (8019ad4 <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 801999e:	f103 0410 	add.w	r4, r3, #16
 80199a2:	4613      	mov	r3, r2
 80199a4:	6818      	ldr	r0, [r3, #0]
 80199a6:	6859      	ldr	r1, [r3, #4]
 80199a8:	689a      	ldr	r2, [r3, #8]
 80199aa:	68db      	ldr	r3, [r3, #12]
 80199ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 80199ae:	4b48      	ldr	r3, [pc, #288]	; (8019ad0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80199b0:	2201      	movs	r2, #1
 80199b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80199b6:	4b46      	ldr	r3, [pc, #280]	; (8019ad0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80199b8:	f241 6233 	movw	r2, #5683	; 0x1633
 80199bc:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 80199be:	4b44      	ldr	r3, [pc, #272]	; (8019ad0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80199c0:	2240      	movs	r2, #64	; 0x40
 80199c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80199c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d009      	beq.n	80199e2 <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 80199ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80199d2:	2b03      	cmp	r3, #3
 80199d4:	d105      	bne.n	80199e2 <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80199d6:	2203      	movs	r2, #3
 80199d8:	2100      	movs	r1, #0
 80199da:	483f      	ldr	r0, [pc, #252]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80199dc:	f7f9 fac0 	bl	8012f60 <otCoapHeaderInit>
 80199e0:	e04a      	b.n	8019a78 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 80199e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d009      	beq.n	80199fe <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 80199ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80199ee:	2b01      	cmp	r3, #1
 80199f0:	d105      	bne.n	80199fe <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 80199f2:	2201      	movs	r2, #1
 80199f4:	2100      	movs	r1, #0
 80199f6:	4838      	ldr	r0, [pc, #224]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80199f8:	f7f9 fab2 	bl	8012f60 <otCoapHeaderInit>
 80199fc:	e03c      	b.n	8019a78 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80199fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d009      	beq.n	8019a1a <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8019a06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a0a:	2b02      	cmp	r3, #2
 8019a0c:	d105      	bne.n	8019a1a <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8019a0e:	2202      	movs	r2, #2
 8019a10:	2100      	movs	r1, #0
 8019a12:	4831      	ldr	r0, [pc, #196]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8019a14:	f7f9 faa4 	bl	8012f60 <otCoapHeaderInit>
 8019a18:	e02e      	b.n	8019a78 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8019a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d109      	bne.n	8019a36 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8019a22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a26:	2b03      	cmp	r3, #3
 8019a28:	d105      	bne.n	8019a36 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8019a2a:	2203      	movs	r2, #3
 8019a2c:	2110      	movs	r1, #16
 8019a2e:	482a      	ldr	r0, [pc, #168]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8019a30:	f7f9 fa96 	bl	8012f60 <otCoapHeaderInit>
 8019a34:	e020      	b.n	8019a78 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8019a36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d109      	bne.n	8019a52 <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8019a3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a42:	2b01      	cmp	r3, #1
 8019a44:	d105      	bne.n	8019a52 <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8019a46:	2201      	movs	r2, #1
 8019a48:	2110      	movs	r1, #16
 8019a4a:	4823      	ldr	r0, [pc, #140]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8019a4c:	f7f9 fa88 	bl	8012f60 <otCoapHeaderInit>
 8019a50:	e012      	b.n	8019a78 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8019a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d109      	bne.n	8019a6e <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8019a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a5e:	2b02      	cmp	r3, #2
 8019a60:	d105      	bne.n	8019a6e <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8019a62:	2202      	movs	r2, #2
 8019a64:	2110      	movs	r1, #16
 8019a66:	481c      	ldr	r0, [pc, #112]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8019a68:	f7f9 fa7a 	bl	8012f60 <otCoapHeaderInit>
 8019a6c:	e004      	b.n	8019a78 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8019a6e:	2102      	movs	r1, #2
 8019a70:	4819      	ldr	r0, [pc, #100]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8019a72:	f7f9 fade 	bl	8013032 <otCoapHeaderGenerateToken>
 8019a76:	e028      	b.n	8019aca <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8019a78:	6839      	ldr	r1, [r7, #0]
 8019a7a:	4817      	ldr	r0, [pc, #92]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8019a7c:	f7f9 fb3c 	bl	80130f8 <otCoapHeaderAppendUriPathOptions>
 8019a80:	4603      	mov	r3, r0
 8019a82:	461a      	mov	r2, r3
 8019a84:	4b15      	ldr	r3, [pc, #84]	; (8019adc <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8019a86:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8019a88:	4913      	ldr	r1, [pc, #76]	; (8019ad8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8019a8a:	2000      	movs	r0, #0
 8019a8c:	f7f9 fca9 	bl	80133e2 <otCoapNewMessage>
 8019a90:	4602      	mov	r2, r0
 8019a92:	4b13      	ldr	r3, [pc, #76]	; (8019ae0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8019a94:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8019a96:	4b12      	ldr	r3, [pc, #72]	; (8019ae0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8019a98:	6819      	ldr	r1, [r3, #0]
 8019a9a:	4b12      	ldr	r3, [pc, #72]	; (8019ae4 <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8019a9c:	9300      	str	r3, [sp, #0]
 8019a9e:	4b12      	ldr	r3, [pc, #72]	; (8019ae8 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8019aa0:	4a0b      	ldr	r2, [pc, #44]	; (8019ad0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8019aa2:	2000      	movs	r0, #0
 8019aa4:	f7f9 fccb 	bl	801343e <otCoapSendRequest>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	461a      	mov	r2, r3
 8019aac:	4b0b      	ldr	r3, [pc, #44]	; (8019adc <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8019aae:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8019ab0:	4b0a      	ldr	r3, [pc, #40]	; (8019adc <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d008      	beq.n	8019aca <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 8019ab8:	4b09      	ldr	r3, [pc, #36]	; (8019ae0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d004      	beq.n	8019aca <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 8019ac0:	4b07      	ldr	r3, [pc, #28]	; (8019ae0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7f9 ffa7 	bl	8013a18 <otMessageFree>
		}

	} while (false);

}
 8019aca:	3714      	adds	r7, #20
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd90      	pop	{r4, r7, pc}
 8019ad0:	20027758 	.word	0x20027758
 8019ad4:	200289fc 	.word	0x200289fc
 8019ad8:	20027784 	.word	0x20027784
 8019adc:	20027818 	.word	0x20027818
 8019ae0:	20027814 	.word	0x20027814
 8019ae4:	080192f5 	.word	0x080192f5
 8019ae8:	080192d9 	.word	0x080192d9

08019aec <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 8019aec:	b590      	push	{r4, r7, lr}
 8019aee:	b087      	sub	sp, #28
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	60f8      	str	r0, [r7, #12]
 8019af4:	607a      	str	r2, [r7, #4]
 8019af6:	603b      	str	r3, [r7, #0]
 8019af8:	460b      	mov	r3, r1
 8019afa:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8019afc:	2300      	movs	r3, #0
 8019afe:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8019b00:	2244      	movs	r2, #68	; 0x44
 8019b02:	2120      	movs	r1, #32
 8019b04:	4826      	ldr	r0, [pc, #152]	; (8019ba0 <APP_THREAD_SendDataResponse+0xb4>)
 8019b06:	f7f9 fa2b 	bl	8012f60 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8019b0a:	6878      	ldr	r0, [r7, #4]
 8019b0c:	f7f9 fbe0 	bl	80132d0 <otCoapHeaderGetMessageId>
 8019b10:	4603      	mov	r3, r0
 8019b12:	4619      	mov	r1, r3
 8019b14:	4822      	ldr	r0, [pc, #136]	; (8019ba0 <APP_THREAD_SendDataResponse+0xb4>)
 8019b16:	f7f9 fb4f 	bl	80131b8 <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f7f9 fc34 	bl	8013388 <otCoapHeaderGetToken>
 8019b20:	4604      	mov	r4, r0
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f7f9 fc02 	bl	801332c <otCoapHeaderGetTokenLength>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	461a      	mov	r2, r3
 8019b2c:	4621      	mov	r1, r4
 8019b2e:	481c      	ldr	r0, [pc, #112]	; (8019ba0 <APP_THREAD_SendDataResponse+0xb4>)
 8019b30:	f7f9 fa4b 	bl	8012fca <otCoapHeaderSetToken>

	if (msgSize > 0){
 8019b34:	897b      	ldrh	r3, [r7, #10]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d006      	beq.n	8019b48 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8019b3a:	212a      	movs	r1, #42	; 0x2a
 8019b3c:	4818      	ldr	r0, [pc, #96]	; (8019ba0 <APP_THREAD_SendDataResponse+0xb4>)
 8019b3e:	f7f9 faa8 	bl	8013092 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8019b42:	4817      	ldr	r0, [pc, #92]	; (8019ba0 <APP_THREAD_SendDataResponse+0xb4>)
 8019b44:	f7f9 fb0a 	bl	801315c <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8019b48:	4915      	ldr	r1, [pc, #84]	; (8019ba0 <APP_THREAD_SendDataResponse+0xb4>)
 8019b4a:	2000      	movs	r0, #0
 8019b4c:	f7f9 fc49 	bl	80133e2 <otCoapNewMessage>
 8019b50:	4602      	mov	r2, r0
 8019b52:	4b14      	ldr	r3, [pc, #80]	; (8019ba4 <APP_THREAD_SendDataResponse+0xb8>)
 8019b54:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8019b56:	897b      	ldrh	r3, [r7, #10]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d008      	beq.n	8019b6e <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8019b5c:	4b11      	ldr	r3, [pc, #68]	; (8019ba4 <APP_THREAD_SendDataResponse+0xb8>)
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	897a      	ldrh	r2, [r7, #10]
 8019b62:	68f9      	ldr	r1, [r7, #12]
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7f9 ffb0 	bl	8013aca <otMessageAppend>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8019b6e:	4b0d      	ldr	r3, [pc, #52]	; (8019ba4 <APP_THREAD_SendDataResponse+0xb8>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	683a      	ldr	r2, [r7, #0]
 8019b74:	4619      	mov	r1, r3
 8019b76:	2000      	movs	r0, #0
 8019b78:	f7f9 fcfa 	bl	8013570 <otCoapSendResponse>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8019b80:	7dfb      	ldrb	r3, [r7, #23]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d008      	beq.n	8019b98 <APP_THREAD_SendDataResponse+0xac>
 8019b86:	4b07      	ldr	r3, [pc, #28]	; (8019ba4 <APP_THREAD_SendDataResponse+0xb8>)
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d004      	beq.n	8019b98 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8019b8e:	4b05      	ldr	r3, [pc, #20]	; (8019ba4 <APP_THREAD_SendDataResponse+0xb8>)
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7f9 ff40 	bl	8013a18 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8019b98:	bf00      	nop
 8019b9a:	371c      	adds	r7, #28
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	bd90      	pop	{r4, r7, pc}
 8019ba0:	20027784 	.word	0x20027784
 8019ba4:	20027814 	.word	0x20027814

08019ba8 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8019ba8:	b480      	push	{r7}
 8019baa:	b083      	sub	sp, #12
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8019bb0:	4a04      	ldr	r2, [pc, #16]	; (8019bc4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	6013      	str	r3, [r2, #0]
}
 8019bb6:	bf00      	nop
 8019bb8:	370c      	adds	r7, #12
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc0:	4770      	bx	lr
 8019bc2:	bf00      	nop
 8019bc4:	20027740 	.word	0x20027740

08019bc8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8019bc8:	b480      	push	{r7}
 8019bca:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8019bcc:	4b03      	ldr	r3, [pc, #12]	; (8019bdc <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	330c      	adds	r3, #12
}
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bda:	4770      	bx	lr
 8019bdc:	20027740 	.word	0x20027740

08019be0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8019be0:	b480      	push	{r7}
 8019be2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8019be4:	4b03      	ldr	r3, [pc, #12]	; (8019bf4 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	330b      	adds	r3, #11
}
 8019bea:	4618      	mov	r0, r3
 8019bec:	46bd      	mov	sp, r7
 8019bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf2:	4770      	bx	lr
 8019bf4:	20027740 	.word	0x20027740

08019bf8 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8019bf8:	b480      	push	{r7}
 8019bfa:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8019bfc:	4b03      	ldr	r3, [pc, #12]	; (8019c0c <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	330b      	adds	r3, #11
}
 8019c02:	4618      	mov	r0, r3
 8019c04:	46bd      	mov	sp, r7
 8019c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0a:	4770      	bx	lr
 8019c0c:	20027744 	.word	0x20027744

08019c10 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b082      	sub	sp, #8
 8019c14:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8019c16:	4b0f      	ldr	r3, [pc, #60]	; (8019c54 <Ot_Cmd_Transfer+0x44>)
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019c20:	725a      	strb	r2, [r3, #9]
 8019c22:	2200      	movs	r2, #0
 8019c24:	f042 0202 	orr.w	r2, r2, #2
 8019c28:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8019c2a:	4b0a      	ldr	r3, [pc, #40]	; (8019c54 <Ot_Cmd_Transfer+0x44>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	330c      	adds	r3, #12
 8019c30:	685b      	ldr	r3, [r3, #4]
 8019c32:	3302      	adds	r3, #2
 8019c34:	009b      	lsls	r3, r3, #2
 8019c36:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8019c38:	4b06      	ldr	r3, [pc, #24]	; (8019c54 <Ot_Cmd_Transfer+0x44>)
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	687a      	ldr	r2, [r7, #4]
 8019c3e:	b2d2      	uxtb	r2, r2
 8019c40:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8019c42:	f7f9 f837 	bl	8012cb4 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8019c46:	f000 f829 	bl	8019c9c <Wait_Getting_Ack_From_M0>
}
 8019c4a:	bf00      	nop
 8019c4c:	3708      	adds	r7, #8
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}
 8019c52:	bf00      	nop
 8019c54:	20027740 	.word	0x20027740

08019c58 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b082      	sub	sp, #8
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8019c60:	f000 f82e 	bl	8019cc0 <Receive_Ack_From_M0>
}
 8019c64:	bf00      	nop
 8019c66:	3708      	adds	r7, #8
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}

08019c6c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b082      	sub	sp, #8
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8019c74:	4a04      	ldr	r2, [pc, #16]	; (8019c88 <TL_THREAD_NotReceived+0x1c>)
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8019c7a:	f000 f82d 	bl	8019cd8 <Receive_Notification_From_M0>
}
 8019c7e:	bf00      	nop
 8019c80:	3708      	adds	r7, #8
 8019c82:	46bd      	mov	sp, r7
 8019c84:	bd80      	pop	{r7, pc}
 8019c86:	bf00      	nop
 8019c88:	20027744 	.word	0x20027744

08019c8c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	af00      	add	r7, sp, #0

}
 8019c90:	bf00      	nop
 8019c92:	46bd      	mov	sp, r7
 8019c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c98:	4770      	bx	lr
	...

08019c9c <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8019c9c:	b480      	push	{r7}
 8019c9e:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8019ca0:	bf00      	nop
 8019ca2:	4b06      	ldr	r3, [pc, #24]	; (8019cbc <Wait_Getting_Ack_From_M0+0x20>)
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d0fb      	beq.n	8019ca2 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8019caa:	4b04      	ldr	r3, [pc, #16]	; (8019cbc <Wait_Getting_Ack_From_M0+0x20>)
 8019cac:	2200      	movs	r2, #0
 8019cae:	601a      	str	r2, [r3, #0]
}
 8019cb0:	bf00      	nop
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb8:	4770      	bx	lr
 8019cba:	bf00      	nop
 8019cbc:	2002774c 	.word	0x2002774c

08019cc0 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8019cc0:	b480      	push	{r7}
 8019cc2:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8019cc4:	4b03      	ldr	r3, [pc, #12]	; (8019cd4 <Receive_Ack_From_M0+0x14>)
 8019cc6:	2201      	movs	r2, #1
 8019cc8:	601a      	str	r2, [r3, #0]
}
 8019cca:	bf00      	nop
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd2:	4770      	bx	lr
 8019cd4:	2002774c 	.word	0x2002774c

08019cd8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8019cdc:	4b06      	ldr	r3, [pc, #24]	; (8019cf8 <Receive_Notification_From_M0+0x20>)
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	3301      	adds	r3, #1
 8019ce2:	4a05      	ldr	r2, [pc, #20]	; (8019cf8 <Receive_Notification_From_M0+0x20>)
 8019ce4:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8019ce6:	4b05      	ldr	r3, [pc, #20]	; (8019cfc <Receive_Notification_From_M0+0x24>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	2101      	movs	r1, #1
 8019cec:	4618      	mov	r0, r3
 8019cee:	f7fa fcef 	bl	80146d0 <osThreadFlagsSet>
}
 8019cf2:	bf00      	nop
 8019cf4:	bd80      	pop	{r7, pc}
 8019cf6:	bf00      	nop
 8019cf8:	20027748 	.word	0x20027748
 8019cfc:	20027750 	.word	0x20027750

08019d00 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8019d04:	22ff      	movs	r2, #255	; 0xff
 8019d06:	2100      	movs	r1, #0
 8019d08:	4812      	ldr	r0, [pc, #72]	; (8019d54 <Send_CLI_To_M0+0x54>)
 8019d0a:	f001 fbe0 	bl	801b4ce <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8019d0e:	4b12      	ldr	r3, [pc, #72]	; (8019d58 <Send_CLI_To_M0+0x58>)
 8019d10:	881b      	ldrh	r3, [r3, #0]
 8019d12:	b29b      	uxth	r3, r3
 8019d14:	461a      	mov	r2, r3
 8019d16:	4911      	ldr	r1, [pc, #68]	; (8019d5c <Send_CLI_To_M0+0x5c>)
 8019d18:	480e      	ldr	r0, [pc, #56]	; (8019d54 <Send_CLI_To_M0+0x54>)
 8019d1a:	f001 fbcd 	bl	801b4b8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8019d1e:	4b0e      	ldr	r3, [pc, #56]	; (8019d58 <Send_CLI_To_M0+0x58>)
 8019d20:	881b      	ldrh	r3, [r3, #0]
 8019d22:	b29b      	uxth	r3, r3
 8019d24:	b2da      	uxtb	r2, r3
 8019d26:	4b0e      	ldr	r3, [pc, #56]	; (8019d60 <Send_CLI_To_M0+0x60>)
 8019d28:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8019d2a:	4b0d      	ldr	r3, [pc, #52]	; (8019d60 <Send_CLI_To_M0+0x60>)
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	725a      	strb	r2, [r3, #9]
 8019d30:	2200      	movs	r2, #0
 8019d32:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8019d34:	4b0b      	ldr	r3, [pc, #44]	; (8019d64 <Send_CLI_To_M0+0x64>)
 8019d36:	2200      	movs	r2, #0
 8019d38:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8019d3a:	4b07      	ldr	r3, [pc, #28]	; (8019d58 <Send_CLI_To_M0+0x58>)
 8019d3c:	2200      	movs	r2, #0
 8019d3e:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8019d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019d44:	2100      	movs	r1, #0
 8019d46:	4805      	ldr	r0, [pc, #20]	; (8019d5c <Send_CLI_To_M0+0x5c>)
 8019d48:	f001 fbc1 	bl	801b4ce <memset>

  TL_CLI_SendCmd();
 8019d4c:	f7f8 ffc0 	bl	8012cd0 <TL_CLI_SendCmd>
}
 8019d50:	bf00      	nop
 8019d52:	bd80      	pop	{r7, pc}
 8019d54:	20030b64 	.word	0x20030b64
 8019d58:	2002773c 	.word	0x2002773c
 8019d5c:	2002763c 	.word	0x2002763c
 8019d60:	20030b58 	.word	0x20030b58
 8019d64:	2002773e 	.word	0x2002773e

08019d68 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8019d6c:	f7f8 ffcc 	bl	8012d08 <TL_THREAD_CliSendAck>
}
 8019d70:	bf00      	nop
 8019d72:	bd80      	pop	{r7, pc}

08019d74 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8019d78:	4a04      	ldr	r2, [pc, #16]	; (8019d8c <APP_THREAD_Init_UART_CLI+0x18>)
 8019d7a:	2100      	movs	r1, #0
 8019d7c:	4804      	ldr	r0, [pc, #16]	; (8019d90 <APP_THREAD_Init_UART_CLI+0x1c>)
 8019d7e:	f7fa fc01 	bl	8014584 <osThreadNew>
 8019d82:	4602      	mov	r2, r0
 8019d84:	4b03      	ldr	r3, [pc, #12]	; (8019d94 <APP_THREAD_Init_UART_CLI+0x20>)
 8019d86:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8019d88:	bf00      	nop
 8019d8a:	bd80      	pop	{r7, pc}
 8019d8c:	0801cfd8 	.word	0x0801cfd8
 8019d90:	08019223 	.word	0x08019223
 8019d94:	20027754 	.word	0x20027754

08019d98 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8019d9c:	4b06      	ldr	r3, [pc, #24]	; (8019db8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8019d9e:	4a07      	ldr	r2, [pc, #28]	; (8019dbc <APP_THREAD_TL_THREAD_INIT+0x24>)
 8019da0:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8019da2:	4b05      	ldr	r3, [pc, #20]	; (8019db8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8019da4:	4a06      	ldr	r2, [pc, #24]	; (8019dc0 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8019da6:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8019da8:	4b03      	ldr	r3, [pc, #12]	; (8019db8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8019daa:	4a06      	ldr	r2, [pc, #24]	; (8019dc4 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8019dac:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8019dae:	4802      	ldr	r0, [pc, #8]	; (8019db8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8019db0:	f7f8 ff64 	bl	8012c7c <TL_THREAD_Init>
}
 8019db4:	bf00      	nop
 8019db6:	bd80      	pop	{r7, pc}
 8019db8:	200300d4 	.word	0x200300d4
 8019dbc:	20030940 	.word	0x20030940
 8019dc0:	20030a4c 	.word	0x20030a4c
 8019dc4:	20030b58 	.word	0x20030b58

08019dc8 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b084      	sub	sp, #16
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	7adb      	ldrb	r3, [r3, #11]
 8019dd8:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	330c      	adds	r3, #12
 8019dde:	4906      	ldr	r1, [pc, #24]	; (8019df8 <TL_THREAD_CliNotReceived+0x30>)
 8019de0:	4618      	mov	r0, r3
 8019de2:	f7e6 f9cd 	bl	8000180 <strcmp>
 8019de6:	4603      	mov	r3, r0
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d101      	bne.n	8019df0 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8019dec:	f7ff ffbc 	bl	8019d68 <Send_CLI_Ack_For_OT>
  }
}
 8019df0:	bf00      	nop
 8019df2:	3710      	adds	r7, #16
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}
 8019df8:	0801cb3c 	.word	0x0801cb3c

08019dfc <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8019e00:	4b09      	ldr	r3, [pc, #36]	; (8019e28 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d00d      	beq.n	8019e24 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8019e08:	4b07      	ldr	r3, [pc, #28]	; (8019e28 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2b01      	cmp	r3, #1
 8019e0e:	d904      	bls.n	8019e1a <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8019e10:	2100      	movs	r1, #0
 8019e12:	2000      	movs	r0, #0
 8019e14:	f7fe ffa2 	bl	8018d5c <APP_THREAD_Error>
 8019e18:	e001      	b.n	8019e1e <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8019e1a:	f7f9 fec9 	bl	8013bb0 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8019e1e:	4b02      	ldr	r3, [pc, #8]	; (8019e28 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8019e20:	2200      	movs	r2, #0
 8019e22:	601a      	str	r2, [r3, #0]
  }
}
 8019e24:	bf00      	nop
 8019e26:	bd80      	pop	{r7, pc}
 8019e28:	20027748 	.word	0x20027748

08019e2c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8019e2c:	b480      	push	{r7}
 8019e2e:	b083      	sub	sp, #12
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8019e34:	4b06      	ldr	r3, [pc, #24]	; (8019e50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019e36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8019e3a:	4905      	ldr	r1, [pc, #20]	; (8019e50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	4313      	orrs	r3, r2
 8019e40:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8019e44:	bf00      	nop
 8019e46:	370c      	adds	r7, #12
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4e:	4770      	bx	lr
 8019e50:	58000800 	.word	0x58000800

08019e54 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8019e54:	b480      	push	{r7}
 8019e56:	b083      	sub	sp, #12
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8019e5c:	4b05      	ldr	r3, [pc, #20]	; (8019e74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8019e5e:	6a1a      	ldr	r2, [r3, #32]
 8019e60:	4904      	ldr	r1, [pc, #16]	; (8019e74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	4313      	orrs	r3, r2
 8019e66:	620b      	str	r3, [r1, #32]
}
 8019e68:	bf00      	nop
 8019e6a:	370c      	adds	r7, #12
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e72:	4770      	bx	lr
 8019e74:	58000800 	.word	0x58000800

08019e78 <LL_PWR_EnableBootC2>:
{
 8019e78:	b480      	push	{r7}
 8019e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8019e7c:	4b05      	ldr	r3, [pc, #20]	; (8019e94 <LL_PWR_EnableBootC2+0x1c>)
 8019e7e:	68db      	ldr	r3, [r3, #12]
 8019e80:	4a04      	ldr	r2, [pc, #16]	; (8019e94 <LL_PWR_EnableBootC2+0x1c>)
 8019e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019e86:	60d3      	str	r3, [r2, #12]
}
 8019e88:	bf00      	nop
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e90:	4770      	bx	lr
 8019e92:	bf00      	nop
 8019e94:	58000400 	.word	0x58000400

08019e98 <LL_AHB3_GRP1_EnableClock>:
{
 8019e98:	b480      	push	{r7}
 8019e9a:	b085      	sub	sp, #20
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8019ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	4313      	orrs	r3, r2
 8019eae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8019eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	4013      	ands	r3, r2
 8019eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019ebc:	68fb      	ldr	r3, [r7, #12]
}
 8019ebe:	bf00      	nop
 8019ec0:	3714      	adds	r7, #20
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec8:	4770      	bx	lr

08019eca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8019eca:	b480      	push	{r7}
 8019ecc:	b085      	sub	sp, #20
 8019ece:	af00      	add	r7, sp, #0
 8019ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8019ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019ed6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8019eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	4313      	orrs	r3, r2
 8019ee2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8019ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019eea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	4013      	ands	r3, r2
 8019ef2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019ef4:	68fb      	ldr	r3, [r7, #12]
}
 8019ef6:	bf00      	nop
 8019ef8:	3714      	adds	r7, #20
 8019efa:	46bd      	mov	sp, r7
 8019efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f00:	4770      	bx	lr

08019f02 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8019f02:	b480      	push	{r7}
 8019f04:	b083      	sub	sp, #12
 8019f06:	af00      	add	r7, sp, #0
 8019f08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	601a      	str	r2, [r3, #0]
}
 8019f16:	bf00      	nop
 8019f18:	370c      	adds	r7, #12
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f20:	4770      	bx	lr

08019f22 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8019f22:	b480      	push	{r7}
 8019f24:	b083      	sub	sp, #12
 8019f26:	af00      	add	r7, sp, #0
 8019f28:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f043 0201 	orr.w	r2, r3, #1
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	601a      	str	r2, [r3, #0]
}
 8019f36:	bf00      	nop
 8019f38:	370c      	adds	r7, #12
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f40:	4770      	bx	lr

08019f42 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019f42:	b480      	push	{r7}
 8019f44:	b083      	sub	sp, #12
 8019f46:	af00      	add	r7, sp, #0
 8019f48:	6078      	str	r0, [r7, #4]
 8019f4a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	685a      	ldr	r2, [r3, #4]
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	041b      	lsls	r3, r3, #16
 8019f54:	43db      	mvns	r3, r3
 8019f56:	401a      	ands	r2, r3
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	605a      	str	r2, [r3, #4]
}
 8019f5c:	bf00      	nop
 8019f5e:	370c      	adds	r7, #12
 8019f60:	46bd      	mov	sp, r7
 8019f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f66:	4770      	bx	lr

08019f68 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b083      	sub	sp, #12
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	685a      	ldr	r2, [r3, #4]
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	041b      	lsls	r3, r3, #16
 8019f7a:	431a      	orrs	r2, r3
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	605a      	str	r2, [r3, #4]
}
 8019f80:	bf00      	nop
 8019f82:	370c      	adds	r7, #12
 8019f84:	46bd      	mov	sp, r7
 8019f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8a:	4770      	bx	lr

08019f8c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019f8c:	b480      	push	{r7}
 8019f8e:	b083      	sub	sp, #12
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	685a      	ldr	r2, [r3, #4]
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	43db      	mvns	r3, r3
 8019f9e:	401a      	ands	r2, r3
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	605a      	str	r2, [r3, #4]
}
 8019fa4:	bf00      	nop
 8019fa6:	370c      	adds	r7, #12
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fae:	4770      	bx	lr

08019fb0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019fb0:	b480      	push	{r7}
 8019fb2:	b083      	sub	sp, #12
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
 8019fb8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	685a      	ldr	r2, [r3, #4]
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	431a      	orrs	r2, r3
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	605a      	str	r2, [r3, #4]
}
 8019fc6:	bf00      	nop
 8019fc8:	370c      	adds	r7, #12
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd0:	4770      	bx	lr

08019fd2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019fd2:	b480      	push	{r7}
 8019fd4:	b083      	sub	sp, #12
 8019fd6:	af00      	add	r7, sp, #0
 8019fd8:	6078      	str	r0, [r7, #4]
 8019fda:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	683a      	ldr	r2, [r7, #0]
 8019fe0:	609a      	str	r2, [r3, #8]
}
 8019fe2:	bf00      	nop
 8019fe4:	370c      	adds	r7, #12
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fec:	4770      	bx	lr

08019fee <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019fee:	b480      	push	{r7}
 8019ff0:	b083      	sub	sp, #12
 8019ff2:	af00      	add	r7, sp, #0
 8019ff4:	6078      	str	r0, [r7, #4]
 8019ff6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8019ff8:	683b      	ldr	r3, [r7, #0]
 8019ffa:	041a      	lsls	r2, r3, #16
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	609a      	str	r2, [r3, #8]
}
 801a000:	bf00      	nop
 801a002:	370c      	adds	r7, #12
 801a004:	46bd      	mov	sp, r7
 801a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00a:	4770      	bx	lr

0801a00c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801a00c:	b480      	push	{r7}
 801a00e:	b083      	sub	sp, #12
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
 801a014:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	68da      	ldr	r2, [r3, #12]
 801a01a:	683b      	ldr	r3, [r7, #0]
 801a01c:	4013      	ands	r3, r2
 801a01e:	683a      	ldr	r2, [r7, #0]
 801a020:	429a      	cmp	r2, r3
 801a022:	d101      	bne.n	801a028 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801a024:	2301      	movs	r3, #1
 801a026:	e000      	b.n	801a02a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801a028:	2300      	movs	r3, #0
}
 801a02a:	4618      	mov	r0, r3
 801a02c:	370c      	adds	r7, #12
 801a02e:	46bd      	mov	sp, r7
 801a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a034:	4770      	bx	lr

0801a036 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801a036:	b480      	push	{r7}
 801a038:	b083      	sub	sp, #12
 801a03a:	af00      	add	r7, sp, #0
 801a03c:	6078      	str	r0, [r7, #4]
 801a03e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	69da      	ldr	r2, [r3, #28]
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	4013      	ands	r3, r2
 801a048:	683a      	ldr	r2, [r7, #0]
 801a04a:	429a      	cmp	r2, r3
 801a04c:	d101      	bne.n	801a052 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801a04e:	2301      	movs	r3, #1
 801a050:	e000      	b.n	801a054 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801a052:	2300      	movs	r3, #0
}
 801a054:	4618      	mov	r0, r3
 801a056:	370c      	adds	r7, #12
 801a058:	46bd      	mov	sp, r7
 801a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a05e:	4770      	bx	lr

0801a060 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801a060:	b580      	push	{r7, lr}
 801a062:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 801a064:	2102      	movs	r1, #2
 801a066:	482a      	ldr	r0, [pc, #168]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a068:	f7ff ffe5 	bl	801a036 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a06c:	4603      	mov	r3, r0
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d009      	beq.n	801a086 <HW_IPCC_Rx_Handler+0x26>
 801a072:	4b27      	ldr	r3, [pc, #156]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	43db      	mvns	r3, r3
 801a078:	f003 0302 	and.w	r3, r3, #2
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d002      	beq.n	801a086 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 801a080:	f000 f90a 	bl	801a298 <HW_IPCC_SYS_EvtHandler>
 801a084:	e041      	b.n	801a10a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 801a086:	2104      	movs	r1, #4
 801a088:	4821      	ldr	r0, [pc, #132]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a08a:	f7ff ffd4 	bl	801a036 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a08e:	4603      	mov	r3, r0
 801a090:	2b00      	cmp	r3, #0
 801a092:	d009      	beq.n	801a0a8 <HW_IPCC_Rx_Handler+0x48>
 801a094:	4b1e      	ldr	r3, [pc, #120]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a096:	685b      	ldr	r3, [r3, #4]
 801a098:	43db      	mvns	r3, r3
 801a09a:	f003 0304 	and.w	r3, r3, #4
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d002      	beq.n	801a0a8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 801a0a2:	f000 f953 	bl	801a34c <HW_IPCC_THREAD_NotEvtHandler>
 801a0a6:	e030      	b.n	801a10a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 801a0a8:	2110      	movs	r1, #16
 801a0aa:	4819      	ldr	r0, [pc, #100]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a0ac:	f7ff ffc3 	bl	801a036 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d009      	beq.n	801a0ca <HW_IPCC_Rx_Handler+0x6a>
 801a0b6:	4b16      	ldr	r3, [pc, #88]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a0b8:	685b      	ldr	r3, [r3, #4]
 801a0ba:	43db      	mvns	r3, r3
 801a0bc:	f003 0310 	and.w	r3, r3, #16
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d002      	beq.n	801a0ca <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 801a0c4:	f000 f94e 	bl	801a364 <HW_IPCC_THREAD_CliNotEvtHandler>
 801a0c8:	e01f      	b.n	801a10a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 801a0ca:	2101      	movs	r1, #1
 801a0cc:	4810      	ldr	r0, [pc, #64]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a0ce:	f7ff ffb2 	bl	801a036 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d008      	beq.n	801a0ea <HW_IPCC_Rx_Handler+0x8a>
 801a0d8:	4b0d      	ldr	r3, [pc, #52]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a0da:	685b      	ldr	r3, [r3, #4]
 801a0dc:	f003 0301 	and.w	r3, r3, #1
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d102      	bne.n	801a0ea <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 801a0e4:	f000 f89c 	bl	801a220 <HW_IPCC_BLE_EvtHandler>
 801a0e8:	e00f      	b.n	801a10a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801a0ea:	2108      	movs	r1, #8
 801a0ec:	4808      	ldr	r0, [pc, #32]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a0ee:	f7ff ffa2 	bl	801a036 <LL_C2_IPCC_IsActiveFlag_CHx>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d009      	beq.n	801a10c <HW_IPCC_Rx_Handler+0xac>
 801a0f8:	4b05      	ldr	r3, [pc, #20]	; (801a110 <HW_IPCC_Rx_Handler+0xb0>)
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	43db      	mvns	r3, r3
 801a0fe:	f003 0308 	and.w	r3, r3, #8
 801a102:	2b00      	cmp	r3, #0
 801a104:	d002      	beq.n	801a10c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 801a106:	f000 f979 	bl	801a3fc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801a10a:	bf00      	nop
 801a10c:	bf00      	nop
}
 801a10e:	bd80      	pop	{r7, pc}
 801a110:	58000c00 	.word	0x58000c00

0801a114 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 801a114:	b580      	push	{r7, lr}
 801a116:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801a118:	2102      	movs	r1, #2
 801a11a:	482b      	ldr	r0, [pc, #172]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a11c:	f7ff ff76 	bl	801a00c <LL_C1_IPCC_IsActiveFlag_CHx>
 801a120:	4603      	mov	r3, r0
 801a122:	2b00      	cmp	r3, #0
 801a124:	d109      	bne.n	801a13a <HW_IPCC_Tx_Handler+0x26>
 801a126:	4b28      	ldr	r3, [pc, #160]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a128:	685b      	ldr	r3, [r3, #4]
 801a12a:	43db      	mvns	r3, r3
 801a12c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a130:	2b00      	cmp	r3, #0
 801a132:	d002      	beq.n	801a13a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801a134:	f000 f8a4 	bl	801a280 <HW_IPCC_SYS_CmdEvtHandler>
 801a138:	e042      	b.n	801a1c0 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 801a13a:	2104      	movs	r1, #4
 801a13c:	4822      	ldr	r0, [pc, #136]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a13e:	f7ff ff65 	bl	801a00c <LL_C1_IPCC_IsActiveFlag_CHx>
 801a142:	4603      	mov	r3, r0
 801a144:	2b00      	cmp	r3, #0
 801a146:	d109      	bne.n	801a15c <HW_IPCC_Tx_Handler+0x48>
 801a148:	4b1f      	ldr	r3, [pc, #124]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a14a:	685b      	ldr	r3, [r3, #4]
 801a14c:	43db      	mvns	r3, r3
 801a14e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a152:	2b00      	cmp	r3, #0
 801a154:	d002      	beq.n	801a15c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 801a156:	f000 f8ed 	bl	801a334 <HW_IPCC_OT_CmdEvtHandler>
 801a15a:	e031      	b.n	801a1c0 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801a15c:	2102      	movs	r1, #2
 801a15e:	481a      	ldr	r0, [pc, #104]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a160:	f7ff ff54 	bl	801a00c <LL_C1_IPCC_IsActiveFlag_CHx>
 801a164:	4603      	mov	r3, r0
 801a166:	2b00      	cmp	r3, #0
 801a168:	d109      	bne.n	801a17e <HW_IPCC_Tx_Handler+0x6a>
 801a16a:	4b17      	ldr	r3, [pc, #92]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	43db      	mvns	r3, r3
 801a170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a174:	2b00      	cmp	r3, #0
 801a176:	d002      	beq.n	801a17e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801a178:	f000 f882 	bl	801a280 <HW_IPCC_SYS_CmdEvtHandler>
 801a17c:	e020      	b.n	801a1c0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801a17e:	2108      	movs	r1, #8
 801a180:	4811      	ldr	r0, [pc, #68]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a182:	f7ff ff43 	bl	801a00c <LL_C1_IPCC_IsActiveFlag_CHx>
 801a186:	4603      	mov	r3, r0
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d109      	bne.n	801a1a0 <HW_IPCC_Tx_Handler+0x8c>
 801a18c:	4b0e      	ldr	r3, [pc, #56]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a18e:	685b      	ldr	r3, [r3, #4]
 801a190:	43db      	mvns	r3, r3
 801a192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a196:	2b00      	cmp	r3, #0
 801a198:	d002      	beq.n	801a1a0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 801a19a:	f000 f911 	bl	801a3c0 <HW_IPCC_MM_FreeBufHandler>
 801a19e:	e00f      	b.n	801a1c0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801a1a0:	2120      	movs	r1, #32
 801a1a2:	4809      	ldr	r0, [pc, #36]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a1a4:	f7ff ff32 	bl	801a00c <LL_C1_IPCC_IsActiveFlag_CHx>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d109      	bne.n	801a1c2 <HW_IPCC_Tx_Handler+0xae>
 801a1ae:	4b06      	ldr	r3, [pc, #24]	; (801a1c8 <HW_IPCC_Tx_Handler+0xb4>)
 801a1b0:	685b      	ldr	r3, [r3, #4]
 801a1b2:	43db      	mvns	r3, r3
 801a1b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d002      	beq.n	801a1c2 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801a1bc:	f000 f83c 	bl	801a238 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801a1c0:	bf00      	nop
 801a1c2:	bf00      	nop
}
 801a1c4:	bd80      	pop	{r7, pc}
 801a1c6:	bf00      	nop
 801a1c8:	58000c00 	.word	0x58000c00

0801a1cc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 801a1d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801a1d4:	f7ff fe79 	bl	8019eca <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801a1d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a1dc:	f7ff fe26 	bl	8019e2c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801a1e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a1e4:	f7ff fe36 	bl	8019e54 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801a1e8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801a1ea:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801a1ec:	f7ff fe44 	bl	8019e78 <LL_PWR_EnableBootC2>

  return;
 801a1f0:	bf00      	nop
}
 801a1f2:	bd80      	pop	{r7, pc}

0801a1f4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801a1f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801a1fc:	f7ff fe4c 	bl	8019e98 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 801a200:	4806      	ldr	r0, [pc, #24]	; (801a21c <HW_IPCC_Init+0x28>)
 801a202:	f7ff fe8e 	bl	8019f22 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801a206:	4805      	ldr	r0, [pc, #20]	; (801a21c <HW_IPCC_Init+0x28>)
 801a208:	f7ff fe7b 	bl	8019f02 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801a20c:	202c      	movs	r0, #44	; 0x2c
 801a20e:	f7ee f9ae 	bl	800856e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801a212:	202d      	movs	r0, #45	; 0x2d
 801a214:	f7ee f9ab 	bl	800856e <HAL_NVIC_EnableIRQ>

  return;
 801a218:	bf00      	nop
}
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	58000c00 	.word	0x58000c00

0801a220 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 801a220:	b580      	push	{r7, lr}
 801a222:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801a224:	f7f8 fc72 	bl	8012b0c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801a228:	2101      	movs	r1, #1
 801a22a:	4802      	ldr	r0, [pc, #8]	; (801a234 <HW_IPCC_BLE_EvtHandler+0x14>)
 801a22c:	f7ff fed1 	bl	8019fd2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801a230:	bf00      	nop
}
 801a232:	bd80      	pop	{r7, pc}
 801a234:	58000c00 	.word	0x58000c00

0801a238 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801a23c:	2120      	movs	r1, #32
 801a23e:	4803      	ldr	r0, [pc, #12]	; (801a24c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801a240:	f7ff fe92 	bl	8019f68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801a244:	f7f8 fc92 	bl	8012b6c <HW_IPCC_BLE_AclDataAckNot>

  return;
 801a248:	bf00      	nop
}
 801a24a:	bd80      	pop	{r7, pc}
 801a24c:	58000c00 	.word	0x58000c00

0801a250 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801a250:	b580      	push	{r7, lr}
 801a252:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801a254:	2102      	movs	r1, #2
 801a256:	4802      	ldr	r0, [pc, #8]	; (801a260 <HW_IPCC_SYS_Init+0x10>)
 801a258:	f7ff fe98 	bl	8019f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a25c:	bf00      	nop
}
 801a25e:	bd80      	pop	{r7, pc}
 801a260:	58000c00 	.word	0x58000c00

0801a264 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801a264:	b580      	push	{r7, lr}
 801a266:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801a268:	2102      	movs	r1, #2
 801a26a:	4804      	ldr	r0, [pc, #16]	; (801a27c <HW_IPCC_SYS_SendCmd+0x18>)
 801a26c:	f7ff febf 	bl	8019fee <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801a270:	2102      	movs	r1, #2
 801a272:	4802      	ldr	r0, [pc, #8]	; (801a27c <HW_IPCC_SYS_SendCmd+0x18>)
 801a274:	f7ff fe65 	bl	8019f42 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801a278:	bf00      	nop
}
 801a27a:	bd80      	pop	{r7, pc}
 801a27c:	58000c00 	.word	0x58000c00

0801a280 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801a280:	b580      	push	{r7, lr}
 801a282:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801a284:	2102      	movs	r1, #2
 801a286:	4803      	ldr	r0, [pc, #12]	; (801a294 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 801a288:	f7ff fe6e 	bl	8019f68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801a28c:	f7f8 fcbe 	bl	8012c0c <HW_IPCC_SYS_CmdEvtNot>

  return;
 801a290:	bf00      	nop
}
 801a292:	bd80      	pop	{r7, pc}
 801a294:	58000c00 	.word	0x58000c00

0801a298 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801a29c:	f7f8 fccc 	bl	8012c38 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801a2a0:	2102      	movs	r1, #2
 801a2a2:	4802      	ldr	r0, [pc, #8]	; (801a2ac <HW_IPCC_SYS_EvtHandler+0x14>)
 801a2a4:	f7ff fe95 	bl	8019fd2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801a2a8:	bf00      	nop
}
 801a2aa:	bd80      	pop	{r7, pc}
 801a2ac:	58000c00 	.word	0x58000c00

0801a2b0 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801a2b4:	2104      	movs	r1, #4
 801a2b6:	4804      	ldr	r0, [pc, #16]	; (801a2c8 <HW_IPCC_THREAD_Init+0x18>)
 801a2b8:	f7ff fe68 	bl	8019f8c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801a2bc:	2110      	movs	r1, #16
 801a2be:	4802      	ldr	r0, [pc, #8]	; (801a2c8 <HW_IPCC_THREAD_Init+0x18>)
 801a2c0:	f7ff fe64 	bl	8019f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a2c4:	bf00      	nop
}
 801a2c6:	bd80      	pop	{r7, pc}
 801a2c8:	58000c00 	.word	0x58000c00

0801a2cc <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801a2d0:	2104      	movs	r1, #4
 801a2d2:	4804      	ldr	r0, [pc, #16]	; (801a2e4 <HW_IPCC_OT_SendCmd+0x18>)
 801a2d4:	f7ff fe8b 	bl	8019fee <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801a2d8:	2104      	movs	r1, #4
 801a2da:	4802      	ldr	r0, [pc, #8]	; (801a2e4 <HW_IPCC_OT_SendCmd+0x18>)
 801a2dc:	f7ff fe31 	bl	8019f42 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801a2e0:	bf00      	nop
}
 801a2e2:	bd80      	pop	{r7, pc}
 801a2e4:	58000c00 	.word	0x58000c00

0801a2e8 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 801a2ec:	2110      	movs	r1, #16
 801a2ee:	4802      	ldr	r0, [pc, #8]	; (801a2f8 <HW_IPCC_CLI_SendCmd+0x10>)
 801a2f0:	f7ff fe7d 	bl	8019fee <LL_C1_IPCC_SetFlag_CHx>

  return;
 801a2f4:	bf00      	nop
}
 801a2f6:	bd80      	pop	{r7, pc}
 801a2f8:	58000c00 	.word	0x58000c00

0801a2fc <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801a300:	2104      	movs	r1, #4
 801a302:	4804      	ldr	r0, [pc, #16]	; (801a314 <HW_IPCC_THREAD_SendAck+0x18>)
 801a304:	f7ff fe65 	bl	8019fd2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801a308:	2104      	movs	r1, #4
 801a30a:	4802      	ldr	r0, [pc, #8]	; (801a314 <HW_IPCC_THREAD_SendAck+0x18>)
 801a30c:	f7ff fe3e 	bl	8019f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a310:	bf00      	nop
}
 801a312:	bd80      	pop	{r7, pc}
 801a314:	58000c00 	.word	0x58000c00

0801a318 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801a31c:	2110      	movs	r1, #16
 801a31e:	4804      	ldr	r0, [pc, #16]	; (801a330 <HW_IPCC_THREAD_CliSendAck+0x18>)
 801a320:	f7ff fe57 	bl	8019fd2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801a324:	2110      	movs	r1, #16
 801a326:	4802      	ldr	r0, [pc, #8]	; (801a330 <HW_IPCC_THREAD_CliSendAck+0x18>)
 801a328:	f7ff fe30 	bl	8019f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a32c:	bf00      	nop
}
 801a32e:	bd80      	pop	{r7, pc}
 801a330:	58000c00 	.word	0x58000c00

0801a334 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 801a334:	b580      	push	{r7, lr}
 801a336:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801a338:	2104      	movs	r1, #4
 801a33a:	4803      	ldr	r0, [pc, #12]	; (801a348 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 801a33c:	f7ff fe14 	bl	8019f68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 801a340:	f7f8 fcf0 	bl	8012d24 <HW_IPCC_OT_CmdEvtNot>

  return;
 801a344:	bf00      	nop
}
 801a346:	bd80      	pop	{r7, pc}
 801a348:	58000c00 	.word	0x58000c00

0801a34c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801a350:	2104      	movs	r1, #4
 801a352:	4803      	ldr	r0, [pc, #12]	; (801a360 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 801a354:	f7ff fe2c 	bl	8019fb0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 801a358:	f7f8 fcf0 	bl	8012d3c <HW_IPCC_THREAD_EvtNot>

  return;
 801a35c:	bf00      	nop
}
 801a35e:	bd80      	pop	{r7, pc}
 801a360:	58000c00 	.word	0x58000c00

0801a364 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 801a364:	b580      	push	{r7, lr}
 801a366:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801a368:	2110      	movs	r1, #16
 801a36a:	4803      	ldr	r0, [pc, #12]	; (801a378 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 801a36c:	f7ff fe20 	bl	8019fb0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 801a370:	f7f8 fcf0 	bl	8012d54 <HW_IPCC_THREAD_CliEvtNot>

  return;
 801a374:	bf00      	nop
}
 801a376:	bd80      	pop	{r7, pc}
 801a378:	58000c00 	.word	0x58000c00

0801a37c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b082      	sub	sp, #8
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801a384:	2108      	movs	r1, #8
 801a386:	480c      	ldr	r0, [pc, #48]	; (801a3b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801a388:	f7ff fe40 	bl	801a00c <LL_C1_IPCC_IsActiveFlag_CHx>
 801a38c:	4603      	mov	r3, r0
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d007      	beq.n	801a3a2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801a392:	4a0a      	ldr	r2, [pc, #40]	; (801a3bc <HW_IPCC_MM_SendFreeBuf+0x40>)
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a398:	2108      	movs	r1, #8
 801a39a:	4807      	ldr	r0, [pc, #28]	; (801a3b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801a39c:	f7ff fdd1 	bl	8019f42 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801a3a0:	e006      	b.n	801a3b0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a3a6:	2108      	movs	r1, #8
 801a3a8:	4803      	ldr	r0, [pc, #12]	; (801a3b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801a3aa:	f7ff fe20 	bl	8019fee <LL_C1_IPCC_SetFlag_CHx>
  return;
 801a3ae:	bf00      	nop
}
 801a3b0:	3708      	adds	r7, #8
 801a3b2:	46bd      	mov	sp, r7
 801a3b4:	bd80      	pop	{r7, pc}
 801a3b6:	bf00      	nop
 801a3b8:	58000c00 	.word	0x58000c00
 801a3bc:	20027850 	.word	0x20027850

0801a3c0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a3c4:	2108      	movs	r1, #8
 801a3c6:	4806      	ldr	r0, [pc, #24]	; (801a3e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801a3c8:	f7ff fdce 	bl	8019f68 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801a3cc:	4b05      	ldr	r3, [pc, #20]	; (801a3e4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801a3d2:	2108      	movs	r1, #8
 801a3d4:	4802      	ldr	r0, [pc, #8]	; (801a3e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801a3d6:	f7ff fe0a 	bl	8019fee <LL_C1_IPCC_SetFlag_CHx>

  return;
 801a3da:	bf00      	nop
}
 801a3dc:	bd80      	pop	{r7, pc}
 801a3de:	bf00      	nop
 801a3e0:	58000c00 	.word	0x58000c00
 801a3e4:	20027850 	.word	0x20027850

0801a3e8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 801a3ec:	2108      	movs	r1, #8
 801a3ee:	4802      	ldr	r0, [pc, #8]	; (801a3f8 <HW_IPCC_TRACES_Init+0x10>)
 801a3f0:	f7ff fdcc 	bl	8019f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801a3f4:	bf00      	nop
}
 801a3f6:	bd80      	pop	{r7, pc}
 801a3f8:	58000c00 	.word	0x58000c00

0801a3fc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801a400:	f7f8 fd3a 	bl	8012e78 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801a404:	2108      	movs	r1, #8
 801a406:	4802      	ldr	r0, [pc, #8]	; (801a410 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801a408:	f7ff fde3 	bl	8019fd2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801a40c:	bf00      	nop
}
 801a40e:	bd80      	pop	{r7, pc}
 801a410:	58000c00 	.word	0x58000c00

0801a414 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801a418:	2200      	movs	r2, #0
 801a41a:	4912      	ldr	r1, [pc, #72]	; (801a464 <MX_USB_Device_Init+0x50>)
 801a41c:	4812      	ldr	r0, [pc, #72]	; (801a468 <MX_USB_Device_Init+0x54>)
 801a41e:	f7f6 fff9 	bl	8011414 <USBD_Init>
 801a422:	4603      	mov	r3, r0
 801a424:	2b00      	cmp	r3, #0
 801a426:	d001      	beq.n	801a42c <MX_USB_Device_Init+0x18>
    Error_Handler();
 801a428:	f7ea f852 	bl	80044d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801a42c:	490f      	ldr	r1, [pc, #60]	; (801a46c <MX_USB_Device_Init+0x58>)
 801a42e:	480e      	ldr	r0, [pc, #56]	; (801a468 <MX_USB_Device_Init+0x54>)
 801a430:	f7f7 f820 	bl	8011474 <USBD_RegisterClass>
 801a434:	4603      	mov	r3, r0
 801a436:	2b00      	cmp	r3, #0
 801a438:	d001      	beq.n	801a43e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801a43a:	f7ea f849 	bl	80044d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801a43e:	490c      	ldr	r1, [pc, #48]	; (801a470 <MX_USB_Device_Init+0x5c>)
 801a440:	4809      	ldr	r0, [pc, #36]	; (801a468 <MX_USB_Device_Init+0x54>)
 801a442:	f7f6 ff71 	bl	8011328 <USBD_CDC_RegisterInterface>
 801a446:	4603      	mov	r3, r0
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d001      	beq.n	801a450 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801a44c:	f7ea f840 	bl	80044d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801a450:	4805      	ldr	r0, [pc, #20]	; (801a468 <MX_USB_Device_Init+0x54>)
 801a452:	f7f7 f836 	bl	80114c2 <USBD_Start>
 801a456:	4603      	mov	r3, r0
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d001      	beq.n	801a460 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801a45c:	f7ea f838 	bl	80044d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801a460:	bf00      	nop
 801a462:	bd80      	pop	{r7, pc}
 801a464:	20000220 	.word	0x20000220
 801a468:	20028a28 	.word	0x20028a28
 801a46c:	20000090 	.word	0x20000090
 801a470:	2000020c 	.word	0x2000020c

0801a474 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a474:	b580      	push	{r7, lr}
 801a476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a478:	2200      	movs	r2, #0
 801a47a:	4905      	ldr	r1, [pc, #20]	; (801a490 <CDC_Init_FS+0x1c>)
 801a47c:	4805      	ldr	r0, [pc, #20]	; (801a494 <CDC_Init_FS+0x20>)
 801a47e:	f7f6 ff68 	bl	8011352 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a482:	4905      	ldr	r1, [pc, #20]	; (801a498 <CDC_Init_FS+0x24>)
 801a484:	4803      	ldr	r0, [pc, #12]	; (801a494 <CDC_Init_FS+0x20>)
 801a486:	f7f6 ff82 	bl	801138e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a48a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a48c:	4618      	mov	r0, r3
 801a48e:	bd80      	pop	{r7, pc}
 801a490:	200294f8 	.word	0x200294f8
 801a494:	20028a28 	.word	0x20028a28
 801a498:	20028cf8 	.word	0x20028cf8

0801a49c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a49c:	b480      	push	{r7}
 801a49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a4a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	46bd      	mov	sp, r7
 801a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4aa:	4770      	bx	lr

0801a4ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a4ac:	b480      	push	{r7}
 801a4ae:	b083      	sub	sp, #12
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	6039      	str	r1, [r7, #0]
 801a4b6:	71fb      	strb	r3, [r7, #7]
 801a4b8:	4613      	mov	r3, r2
 801a4ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a4bc:	79fb      	ldrb	r3, [r7, #7]
 801a4be:	2b23      	cmp	r3, #35	; 0x23
 801a4c0:	d84a      	bhi.n	801a558 <CDC_Control_FS+0xac>
 801a4c2:	a201      	add	r2, pc, #4	; (adr r2, 801a4c8 <CDC_Control_FS+0x1c>)
 801a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4c8:	0801a559 	.word	0x0801a559
 801a4cc:	0801a559 	.word	0x0801a559
 801a4d0:	0801a559 	.word	0x0801a559
 801a4d4:	0801a559 	.word	0x0801a559
 801a4d8:	0801a559 	.word	0x0801a559
 801a4dc:	0801a559 	.word	0x0801a559
 801a4e0:	0801a559 	.word	0x0801a559
 801a4e4:	0801a559 	.word	0x0801a559
 801a4e8:	0801a559 	.word	0x0801a559
 801a4ec:	0801a559 	.word	0x0801a559
 801a4f0:	0801a559 	.word	0x0801a559
 801a4f4:	0801a559 	.word	0x0801a559
 801a4f8:	0801a559 	.word	0x0801a559
 801a4fc:	0801a559 	.word	0x0801a559
 801a500:	0801a559 	.word	0x0801a559
 801a504:	0801a559 	.word	0x0801a559
 801a508:	0801a559 	.word	0x0801a559
 801a50c:	0801a559 	.word	0x0801a559
 801a510:	0801a559 	.word	0x0801a559
 801a514:	0801a559 	.word	0x0801a559
 801a518:	0801a559 	.word	0x0801a559
 801a51c:	0801a559 	.word	0x0801a559
 801a520:	0801a559 	.word	0x0801a559
 801a524:	0801a559 	.word	0x0801a559
 801a528:	0801a559 	.word	0x0801a559
 801a52c:	0801a559 	.word	0x0801a559
 801a530:	0801a559 	.word	0x0801a559
 801a534:	0801a559 	.word	0x0801a559
 801a538:	0801a559 	.word	0x0801a559
 801a53c:	0801a559 	.word	0x0801a559
 801a540:	0801a559 	.word	0x0801a559
 801a544:	0801a559 	.word	0x0801a559
 801a548:	0801a559 	.word	0x0801a559
 801a54c:	0801a559 	.word	0x0801a559
 801a550:	0801a559 	.word	0x0801a559
 801a554:	0801a559 	.word	0x0801a559
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a558:	bf00      	nop
  }

  return (USBD_OK);
 801a55a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	370c      	adds	r7, #12
 801a560:	46bd      	mov	sp, r7
 801a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a566:	4770      	bx	lr

0801a568 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b082      	sub	sp, #8
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
 801a570:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a572:	6879      	ldr	r1, [r7, #4]
 801a574:	4805      	ldr	r0, [pc, #20]	; (801a58c <CDC_Receive_FS+0x24>)
 801a576:	f7f6 ff0a 	bl	801138e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a57a:	4804      	ldr	r0, [pc, #16]	; (801a58c <CDC_Receive_FS+0x24>)
 801a57c:	f7f6 ff20 	bl	80113c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a580:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a582:	4618      	mov	r0, r3
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	20028a28 	.word	0x20028a28

0801a590 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a590:	b480      	push	{r7}
 801a592:	b087      	sub	sp, #28
 801a594:	af00      	add	r7, sp, #0
 801a596:	60f8      	str	r0, [r7, #12]
 801a598:	60b9      	str	r1, [r7, #8]
 801a59a:	4613      	mov	r3, r2
 801a59c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a59e:	2300      	movs	r3, #0
 801a5a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801a5a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	371c      	adds	r7, #28
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b0:	4770      	bx	lr
	...

0801a5b4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5b4:	b480      	push	{r7}
 801a5b6:	b083      	sub	sp, #12
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	6039      	str	r1, [r7, #0]
 801a5be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801a5c0:	683b      	ldr	r3, [r7, #0]
 801a5c2:	2212      	movs	r2, #18
 801a5c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801a5c6:	4b03      	ldr	r3, [pc, #12]	; (801a5d4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	370c      	adds	r7, #12
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d2:	4770      	bx	lr
 801a5d4:	20000240 	.word	0x20000240

0801a5d8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5d8:	b480      	push	{r7}
 801a5da:	b083      	sub	sp, #12
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	4603      	mov	r3, r0
 801a5e0:	6039      	str	r1, [r7, #0]
 801a5e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	2204      	movs	r2, #4
 801a5e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a5ea:	4b03      	ldr	r3, [pc, #12]	; (801a5f8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	370c      	adds	r7, #12
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f6:	4770      	bx	lr
 801a5f8:	20000254 	.word	0x20000254

0801a5fc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b082      	sub	sp, #8
 801a600:	af00      	add	r7, sp, #0
 801a602:	4603      	mov	r3, r0
 801a604:	6039      	str	r1, [r7, #0]
 801a606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a608:	79fb      	ldrb	r3, [r7, #7]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d105      	bne.n	801a61a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801a60e:	683a      	ldr	r2, [r7, #0]
 801a610:	4907      	ldr	r1, [pc, #28]	; (801a630 <USBD_CDC_ProductStrDescriptor+0x34>)
 801a612:	4808      	ldr	r0, [pc, #32]	; (801a634 <USBD_CDC_ProductStrDescriptor+0x38>)
 801a614:	f7f7 ff4c 	bl	80124b0 <USBD_GetString>
 801a618:	e004      	b.n	801a624 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801a61a:	683a      	ldr	r2, [r7, #0]
 801a61c:	4904      	ldr	r1, [pc, #16]	; (801a630 <USBD_CDC_ProductStrDescriptor+0x34>)
 801a61e:	4805      	ldr	r0, [pc, #20]	; (801a634 <USBD_CDC_ProductStrDescriptor+0x38>)
 801a620:	f7f7 ff46 	bl	80124b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a624:	4b02      	ldr	r3, [pc, #8]	; (801a630 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801a626:	4618      	mov	r0, r3
 801a628:	3708      	adds	r7, #8
 801a62a:	46bd      	mov	sp, r7
 801a62c:	bd80      	pop	{r7, pc}
 801a62e:	bf00      	nop
 801a630:	20029cf8 	.word	0x20029cf8
 801a634:	0801cb40 	.word	0x0801cb40

0801a638 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a638:	b580      	push	{r7, lr}
 801a63a:	b082      	sub	sp, #8
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	4603      	mov	r3, r0
 801a640:	6039      	str	r1, [r7, #0]
 801a642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a644:	683a      	ldr	r2, [r7, #0]
 801a646:	4904      	ldr	r1, [pc, #16]	; (801a658 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801a648:	4804      	ldr	r0, [pc, #16]	; (801a65c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801a64a:	f7f7 ff31 	bl	80124b0 <USBD_GetString>
  return USBD_StrDesc;
 801a64e:	4b02      	ldr	r3, [pc, #8]	; (801a658 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801a650:	4618      	mov	r0, r3
 801a652:	3708      	adds	r7, #8
 801a654:	46bd      	mov	sp, r7
 801a656:	bd80      	pop	{r7, pc}
 801a658:	20029cf8 	.word	0x20029cf8
 801a65c:	0801cb58 	.word	0x0801cb58

0801a660 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b082      	sub	sp, #8
 801a664:	af00      	add	r7, sp, #0
 801a666:	4603      	mov	r3, r0
 801a668:	6039      	str	r1, [r7, #0]
 801a66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a66c:	683b      	ldr	r3, [r7, #0]
 801a66e:	221a      	movs	r2, #26
 801a670:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a672:	f000 f843 	bl	801a6fc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a676:	4b02      	ldr	r3, [pc, #8]	; (801a680 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801a678:	4618      	mov	r0, r3
 801a67a:	3708      	adds	r7, #8
 801a67c:	46bd      	mov	sp, r7
 801a67e:	bd80      	pop	{r7, pc}
 801a680:	20000258 	.word	0x20000258

0801a684 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a684:	b580      	push	{r7, lr}
 801a686:	b082      	sub	sp, #8
 801a688:	af00      	add	r7, sp, #0
 801a68a:	4603      	mov	r3, r0
 801a68c:	6039      	str	r1, [r7, #0]
 801a68e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a690:	79fb      	ldrb	r3, [r7, #7]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d105      	bne.n	801a6a2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801a696:	683a      	ldr	r2, [r7, #0]
 801a698:	4907      	ldr	r1, [pc, #28]	; (801a6b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801a69a:	4808      	ldr	r0, [pc, #32]	; (801a6bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 801a69c:	f7f7 ff08 	bl	80124b0 <USBD_GetString>
 801a6a0:	e004      	b.n	801a6ac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801a6a2:	683a      	ldr	r2, [r7, #0]
 801a6a4:	4904      	ldr	r1, [pc, #16]	; (801a6b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801a6a6:	4805      	ldr	r0, [pc, #20]	; (801a6bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 801a6a8:	f7f7 ff02 	bl	80124b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a6ac:	4b02      	ldr	r3, [pc, #8]	; (801a6b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	3708      	adds	r7, #8
 801a6b2:	46bd      	mov	sp, r7
 801a6b4:	bd80      	pop	{r7, pc}
 801a6b6:	bf00      	nop
 801a6b8:	20029cf8 	.word	0x20029cf8
 801a6bc:	0801cb6c 	.word	0x0801cb6c

0801a6c0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b082      	sub	sp, #8
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	6039      	str	r1, [r7, #0]
 801a6ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a6cc:	79fb      	ldrb	r3, [r7, #7]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d105      	bne.n	801a6de <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801a6d2:	683a      	ldr	r2, [r7, #0]
 801a6d4:	4907      	ldr	r1, [pc, #28]	; (801a6f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801a6d6:	4808      	ldr	r0, [pc, #32]	; (801a6f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801a6d8:	f7f7 feea 	bl	80124b0 <USBD_GetString>
 801a6dc:	e004      	b.n	801a6e8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801a6de:	683a      	ldr	r2, [r7, #0]
 801a6e0:	4904      	ldr	r1, [pc, #16]	; (801a6f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801a6e2:	4805      	ldr	r0, [pc, #20]	; (801a6f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801a6e4:	f7f7 fee4 	bl	80124b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a6e8:	4b02      	ldr	r3, [pc, #8]	; (801a6f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3708      	adds	r7, #8
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
 801a6f2:	bf00      	nop
 801a6f4:	20029cf8 	.word	0x20029cf8
 801a6f8:	0801cb78 	.word	0x0801cb78

0801a6fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b084      	sub	sp, #16
 801a700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a702:	4b0f      	ldr	r3, [pc, #60]	; (801a740 <Get_SerialNum+0x44>)
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a708:	4b0e      	ldr	r3, [pc, #56]	; (801a744 <Get_SerialNum+0x48>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a70e:	4b0e      	ldr	r3, [pc, #56]	; (801a748 <Get_SerialNum+0x4c>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a714:	68fa      	ldr	r2, [r7, #12]
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	4413      	add	r3, r2
 801a71a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d009      	beq.n	801a736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a722:	2208      	movs	r2, #8
 801a724:	4909      	ldr	r1, [pc, #36]	; (801a74c <Get_SerialNum+0x50>)
 801a726:	68f8      	ldr	r0, [r7, #12]
 801a728:	f000 f814 	bl	801a754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a72c:	2204      	movs	r2, #4
 801a72e:	4908      	ldr	r1, [pc, #32]	; (801a750 <Get_SerialNum+0x54>)
 801a730:	68b8      	ldr	r0, [r7, #8]
 801a732:	f000 f80f 	bl	801a754 <IntToUnicode>
  }
}
 801a736:	bf00      	nop
 801a738:	3710      	adds	r7, #16
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}
 801a73e:	bf00      	nop
 801a740:	1fff7590 	.word	0x1fff7590
 801a744:	1fff7594 	.word	0x1fff7594
 801a748:	1fff7598 	.word	0x1fff7598
 801a74c:	2000025a 	.word	0x2000025a
 801a750:	2000026a 	.word	0x2000026a

0801a754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a754:	b480      	push	{r7}
 801a756:	b087      	sub	sp, #28
 801a758:	af00      	add	r7, sp, #0
 801a75a:	60f8      	str	r0, [r7, #12]
 801a75c:	60b9      	str	r1, [r7, #8]
 801a75e:	4613      	mov	r3, r2
 801a760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a762:	2300      	movs	r3, #0
 801a764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a766:	2300      	movs	r3, #0
 801a768:	75fb      	strb	r3, [r7, #23]
 801a76a:	e027      	b.n	801a7bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	0f1b      	lsrs	r3, r3, #28
 801a770:	2b09      	cmp	r3, #9
 801a772:	d80b      	bhi.n	801a78c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	0f1b      	lsrs	r3, r3, #28
 801a778:	b2da      	uxtb	r2, r3
 801a77a:	7dfb      	ldrb	r3, [r7, #23]
 801a77c:	005b      	lsls	r3, r3, #1
 801a77e:	4619      	mov	r1, r3
 801a780:	68bb      	ldr	r3, [r7, #8]
 801a782:	440b      	add	r3, r1
 801a784:	3230      	adds	r2, #48	; 0x30
 801a786:	b2d2      	uxtb	r2, r2
 801a788:	701a      	strb	r2, [r3, #0]
 801a78a:	e00a      	b.n	801a7a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	0f1b      	lsrs	r3, r3, #28
 801a790:	b2da      	uxtb	r2, r3
 801a792:	7dfb      	ldrb	r3, [r7, #23]
 801a794:	005b      	lsls	r3, r3, #1
 801a796:	4619      	mov	r1, r3
 801a798:	68bb      	ldr	r3, [r7, #8]
 801a79a:	440b      	add	r3, r1
 801a79c:	3237      	adds	r2, #55	; 0x37
 801a79e:	b2d2      	uxtb	r2, r2
 801a7a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	011b      	lsls	r3, r3, #4
 801a7a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a7a8:	7dfb      	ldrb	r3, [r7, #23]
 801a7aa:	005b      	lsls	r3, r3, #1
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	68ba      	ldr	r2, [r7, #8]
 801a7b0:	4413      	add	r3, r2
 801a7b2:	2200      	movs	r2, #0
 801a7b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a7b6:	7dfb      	ldrb	r3, [r7, #23]
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	75fb      	strb	r3, [r7, #23]
 801a7bc:	7dfa      	ldrb	r2, [r7, #23]
 801a7be:	79fb      	ldrb	r3, [r7, #7]
 801a7c0:	429a      	cmp	r2, r3
 801a7c2:	d3d3      	bcc.n	801a76c <IntToUnicode+0x18>
  }
}
 801a7c4:	bf00      	nop
 801a7c6:	371c      	adds	r7, #28
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ce:	4770      	bx	lr

0801a7d0 <LL_AHB2_GRP1_EnableClock>:
{
 801a7d0:	b480      	push	{r7}
 801a7d2:	b085      	sub	sp, #20
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801a7d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a7dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a7de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	4313      	orrs	r3, r2
 801a7e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801a7e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a7ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	4013      	ands	r3, r2
 801a7f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
}
 801a7f6:	bf00      	nop
 801a7f8:	3714      	adds	r7, #20
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a800:	4770      	bx	lr

0801a802 <LL_APB1_GRP1_EnableClock>:
{
 801a802:	b480      	push	{r7}
 801a804:	b085      	sub	sp, #20
 801a806:	af00      	add	r7, sp, #0
 801a808:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801a80a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a80e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	4313      	orrs	r3, r2
 801a818:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801a81a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a81e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	4013      	ands	r3, r2
 801a824:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801a826:	68fb      	ldr	r3, [r7, #12]
}
 801a828:	bf00      	nop
 801a82a:	3714      	adds	r7, #20
 801a82c:	46bd      	mov	sp, r7
 801a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a832:	4770      	bx	lr

0801a834 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 801a834:	b580      	push	{r7, lr}
 801a836:	b088      	sub	sp, #32
 801a838:	af00      	add	r7, sp, #0
 801a83a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a83c:	f107 030c 	add.w	r3, r7, #12
 801a840:	2200      	movs	r2, #0
 801a842:	601a      	str	r2, [r3, #0]
 801a844:	605a      	str	r2, [r3, #4]
 801a846:	609a      	str	r2, [r3, #8]
 801a848:	60da      	str	r2, [r3, #12]
 801a84a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	4a13      	ldr	r2, [pc, #76]	; (801a8a0 <HAL_PCD_MspInit+0x6c>)
 801a852:	4293      	cmp	r3, r2
 801a854:	d120      	bne.n	801a898 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a856:	2001      	movs	r0, #1
 801a858:	f7ff ffba 	bl	801a7d0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a85c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a860:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a862:	2302      	movs	r3, #2
 801a864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a866:	2300      	movs	r3, #0
 801a868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a86a:	2300      	movs	r3, #0
 801a86c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801a86e:	230a      	movs	r3, #10
 801a870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a872:	f107 030c 	add.w	r3, r7, #12
 801a876:	4619      	mov	r1, r3
 801a878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a87c:	f7ee f9f4 	bl	8008c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801a880:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801a884:	f7ff ffbd 	bl	801a802 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801a888:	2200      	movs	r2, #0
 801a88a:	2105      	movs	r1, #5
 801a88c:	2014      	movs	r0, #20
 801a88e:	f7ed fe54 	bl	800853a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801a892:	2014      	movs	r0, #20
 801a894:	f7ed fe6b 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801a898:	bf00      	nop
 801a89a:	3720      	adds	r7, #32
 801a89c:	46bd      	mov	sp, r7
 801a89e:	bd80      	pop	{r7, pc}
 801a8a0:	40006800 	.word	0x40006800

0801a8a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b082      	sub	sp, #8
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801a8b8:	4619      	mov	r1, r3
 801a8ba:	4610      	mov	r0, r2
 801a8bc:	f7f6 fe67 	bl	801158e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801a8c0:	bf00      	nop
 801a8c2:	3708      	adds	r7, #8
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}

0801a8c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b082      	sub	sp, #8
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801a8da:	78fb      	ldrb	r3, [r7, #3]
 801a8dc:	687a      	ldr	r2, [r7, #4]
 801a8de:	015b      	lsls	r3, r3, #5
 801a8e0:	4413      	add	r3, r2
 801a8e2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801a8e6:	681a      	ldr	r2, [r3, #0]
 801a8e8:	78fb      	ldrb	r3, [r7, #3]
 801a8ea:	4619      	mov	r1, r3
 801a8ec:	f7f6 fea2 	bl	8011634 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801a8f0:	bf00      	nop
 801a8f2:	3708      	adds	r7, #8
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	bd80      	pop	{r7, pc}

0801a8f8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b082      	sub	sp, #8
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
 801a900:	460b      	mov	r3, r1
 801a902:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801a90a:	78fb      	ldrb	r3, [r7, #3]
 801a90c:	687a      	ldr	r2, [r7, #4]
 801a90e:	015b      	lsls	r3, r3, #5
 801a910:	4413      	add	r3, r2
 801a912:	333c      	adds	r3, #60	; 0x3c
 801a914:	681a      	ldr	r2, [r3, #0]
 801a916:	78fb      	ldrb	r3, [r7, #3]
 801a918:	4619      	mov	r1, r3
 801a91a:	f7f6 feee 	bl	80116fa <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801a91e:	bf00      	nop
 801a920:	3708      	adds	r7, #8
 801a922:	46bd      	mov	sp, r7
 801a924:	bd80      	pop	{r7, pc}

0801a926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a926:	b580      	push	{r7, lr}
 801a928:	b082      	sub	sp, #8
 801a92a:	af00      	add	r7, sp, #0
 801a92c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801a934:	4618      	mov	r0, r3
 801a936:	f7f7 f802 	bl	801193e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801a93a:	bf00      	nop
 801a93c:	3708      	adds	r7, #8
 801a93e:	46bd      	mov	sp, r7
 801a940:	bd80      	pop	{r7, pc}

0801a942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a942:	b580      	push	{r7, lr}
 801a944:	b084      	sub	sp, #16
 801a946:	af00      	add	r7, sp, #0
 801a948:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a94a:	2301      	movs	r3, #1
 801a94c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	689b      	ldr	r3, [r3, #8]
 801a952:	2b02      	cmp	r3, #2
 801a954:	d001      	beq.n	801a95a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801a956:	f7e9 fdbb 	bl	80044d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801a960:	7bfa      	ldrb	r2, [r7, #15]
 801a962:	4611      	mov	r1, r2
 801a964:	4618      	mov	r0, r3
 801a966:	f7f6 ffac 	bl	80118c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801a970:	4618      	mov	r0, r3
 801a972:	f7f6 ff58 	bl	8011826 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801a976:	bf00      	nop
 801a978:	3710      	adds	r7, #16
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}
	...

0801a980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a980:	b580      	push	{r7, lr}
 801a982:	b082      	sub	sp, #8
 801a984:	af00      	add	r7, sp, #0
 801a986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801a98e:	4618      	mov	r0, r3
 801a990:	f7f6 ffa7 	bl	80118e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	699b      	ldr	r3, [r3, #24]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d005      	beq.n	801a9a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a99c:	4b04      	ldr	r3, [pc, #16]	; (801a9b0 <HAL_PCD_SuspendCallback+0x30>)
 801a99e:	691b      	ldr	r3, [r3, #16]
 801a9a0:	4a03      	ldr	r2, [pc, #12]	; (801a9b0 <HAL_PCD_SuspendCallback+0x30>)
 801a9a2:	f043 0306 	orr.w	r3, r3, #6
 801a9a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801a9a8:	bf00      	nop
 801a9aa:	3708      	adds	r7, #8
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}
 801a9b0:	e000ed00 	.word	0xe000ed00

0801a9b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b082      	sub	sp, #8
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	699b      	ldr	r3, [r3, #24]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d007      	beq.n	801a9d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a9c4:	4b08      	ldr	r3, [pc, #32]	; (801a9e8 <HAL_PCD_ResumeCallback+0x34>)
 801a9c6:	691b      	ldr	r3, [r3, #16]
 801a9c8:	4a07      	ldr	r2, [pc, #28]	; (801a9e8 <HAL_PCD_ResumeCallback+0x34>)
 801a9ca:	f023 0306 	bic.w	r3, r3, #6
 801a9ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801a9d0:	f000 fa10 	bl	801adf4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801a9da:	4618      	mov	r0, r3
 801a9dc:	f7f6 ff97 	bl	801190e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801a9e0:	bf00      	nop
 801a9e2:	3708      	adds	r7, #8
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bd80      	pop	{r7, pc}
 801a9e8:	e000ed00 	.word	0xe000ed00

0801a9ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a9ec:	b580      	push	{r7, lr}
 801a9ee:	b082      	sub	sp, #8
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801a9f4:	4a2c      	ldr	r2, [pc, #176]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	4a2a      	ldr	r2, [pc, #168]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 801aa04:	f7f1 fade 	bl	800bfc4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801aa08:	4b27      	ldr	r3, [pc, #156]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa0a:	4a28      	ldr	r2, [pc, #160]	; (801aaac <USBD_LL_Init+0xc0>)
 801aa0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801aa0e:	4b26      	ldr	r3, [pc, #152]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa10:	2208      	movs	r2, #8
 801aa12:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801aa14:	4b24      	ldr	r3, [pc, #144]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa16:	2202      	movs	r2, #2
 801aa18:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801aa1a:	4b23      	ldr	r3, [pc, #140]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa1c:	2202      	movs	r2, #2
 801aa1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801aa20:	4b21      	ldr	r3, [pc, #132]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa22:	2200      	movs	r2, #0
 801aa24:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801aa26:	4b20      	ldr	r3, [pc, #128]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa28:	2200      	movs	r2, #0
 801aa2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801aa2c:	4b1e      	ldr	r3, [pc, #120]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa2e:	2200      	movs	r2, #0
 801aa30:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801aa32:	4b1d      	ldr	r3, [pc, #116]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa34:	2200      	movs	r2, #0
 801aa36:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801aa38:	481b      	ldr	r0, [pc, #108]	; (801aaa8 <USBD_LL_Init+0xbc>)
 801aa3a:	f7f0 fb4a 	bl	800b0d2 <HAL_PCD_Init>
 801aa3e:	4603      	mov	r3, r0
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d001      	beq.n	801aa48 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801aa44:	f7e9 fd44 	bl	80044d0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801aa4e:	2318      	movs	r3, #24
 801aa50:	2200      	movs	r2, #0
 801aa52:	2100      	movs	r1, #0
 801aa54:	f7f1 fa31 	bl	800beba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801aa5e:	2358      	movs	r3, #88	; 0x58
 801aa60:	2200      	movs	r2, #0
 801aa62:	2180      	movs	r1, #128	; 0x80
 801aa64:	f7f1 fa29 	bl	800beba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801aa6e:	23c0      	movs	r3, #192	; 0xc0
 801aa70:	2200      	movs	r2, #0
 801aa72:	2181      	movs	r1, #129	; 0x81
 801aa74:	f7f1 fa21 	bl	800beba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801aa7e:	f44f 7388 	mov.w	r3, #272	; 0x110
 801aa82:	2200      	movs	r2, #0
 801aa84:	2101      	movs	r1, #1
 801aa86:	f7f1 fa18 	bl	800beba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801aa90:	f44f 7380 	mov.w	r3, #256	; 0x100
 801aa94:	2200      	movs	r2, #0
 801aa96:	2182      	movs	r1, #130	; 0x82
 801aa98:	f7f1 fa0f 	bl	800beba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801aa9c:	2300      	movs	r3, #0
}
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	3708      	adds	r7, #8
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	bd80      	pop	{r7, pc}
 801aaa6:	bf00      	nop
 801aaa8:	20029ef8 	.word	0x20029ef8
 801aaac:	40006800 	.word	0x40006800

0801aab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b084      	sub	sp, #16
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aab8:	2300      	movs	r3, #0
 801aaba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aabc:	2300      	movs	r3, #0
 801aabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801aac6:	4618      	mov	r0, r3
 801aac8:	f7f0 fbbe 	bl	800b248 <HAL_PCD_Start>
 801aacc:	4603      	mov	r3, r0
 801aace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aad0:	7bfb      	ldrb	r3, [r7, #15]
 801aad2:	4618      	mov	r0, r3
 801aad4:	f000 f994 	bl	801ae00 <USBD_Get_USB_Status>
 801aad8:	4603      	mov	r3, r0
 801aada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aadc:	7bbb      	ldrb	r3, [r7, #14]
}
 801aade:	4618      	mov	r0, r3
 801aae0:	3710      	adds	r7, #16
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}

0801aae6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801aae6:	b580      	push	{r7, lr}
 801aae8:	b084      	sub	sp, #16
 801aaea:	af00      	add	r7, sp, #0
 801aaec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aaee:	2300      	movs	r3, #0
 801aaf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaf2:	2300      	movs	r3, #0
 801aaf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801aafc:	4618      	mov	r0, r3
 801aafe:	f7f0 fbc5 	bl	800b28c <HAL_PCD_Stop>
 801ab02:	4603      	mov	r3, r0
 801ab04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab06:	7bfb      	ldrb	r3, [r7, #15]
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f000 f979 	bl	801ae00 <USBD_Get_USB_Status>
 801ab0e:	4603      	mov	r3, r0
 801ab10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab12:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab14:	4618      	mov	r0, r3
 801ab16:	3710      	adds	r7, #16
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	bd80      	pop	{r7, pc}

0801ab1c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	b084      	sub	sp, #16
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	6078      	str	r0, [r7, #4]
 801ab24:	4608      	mov	r0, r1
 801ab26:	4611      	mov	r1, r2
 801ab28:	461a      	mov	r2, r3
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	70fb      	strb	r3, [r7, #3]
 801ab2e:	460b      	mov	r3, r1
 801ab30:	70bb      	strb	r3, [r7, #2]
 801ab32:	4613      	mov	r3, r2
 801ab34:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab36:	2300      	movs	r3, #0
 801ab38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ab44:	78bb      	ldrb	r3, [r7, #2]
 801ab46:	883a      	ldrh	r2, [r7, #0]
 801ab48:	78f9      	ldrb	r1, [r7, #3]
 801ab4a:	f7f0 fd34 	bl	800b5b6 <HAL_PCD_EP_Open>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab52:	7bfb      	ldrb	r3, [r7, #15]
 801ab54:	4618      	mov	r0, r3
 801ab56:	f000 f953 	bl	801ae00 <USBD_Get_USB_Status>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab5e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab60:	4618      	mov	r0, r3
 801ab62:	3710      	adds	r7, #16
 801ab64:	46bd      	mov	sp, r7
 801ab66:	bd80      	pop	{r7, pc}

0801ab68 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b084      	sub	sp, #16
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
 801ab70:	460b      	mov	r3, r1
 801ab72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab74:	2300      	movs	r3, #0
 801ab76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab78:	2300      	movs	r3, #0
 801ab7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ab82:	78fa      	ldrb	r2, [r7, #3]
 801ab84:	4611      	mov	r1, r2
 801ab86:	4618      	mov	r0, r3
 801ab88:	f7f0 fd75 	bl	800b676 <HAL_PCD_EP_Close>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab90:	7bfb      	ldrb	r3, [r7, #15]
 801ab92:	4618      	mov	r0, r3
 801ab94:	f000 f934 	bl	801ae00 <USBD_Get_USB_Status>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab9c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	3710      	adds	r7, #16
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}

0801aba6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aba6:	b580      	push	{r7, lr}
 801aba8:	b084      	sub	sp, #16
 801abaa:	af00      	add	r7, sp, #0
 801abac:	6078      	str	r0, [r7, #4]
 801abae:	460b      	mov	r3, r1
 801abb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abb2:	2300      	movs	r3, #0
 801abb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abb6:	2300      	movs	r3, #0
 801abb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801abc0:	78fa      	ldrb	r2, [r7, #3]
 801abc2:	4611      	mov	r1, r2
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7f0 fe20 	bl	800b80a <HAL_PCD_EP_SetStall>
 801abca:	4603      	mov	r3, r0
 801abcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abce:	7bfb      	ldrb	r3, [r7, #15]
 801abd0:	4618      	mov	r0, r3
 801abd2:	f000 f915 	bl	801ae00 <USBD_Get_USB_Status>
 801abd6:	4603      	mov	r3, r0
 801abd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abda:	7bbb      	ldrb	r3, [r7, #14]
}
 801abdc:	4618      	mov	r0, r3
 801abde:	3710      	adds	r7, #16
 801abe0:	46bd      	mov	sp, r7
 801abe2:	bd80      	pop	{r7, pc}

0801abe4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b084      	sub	sp, #16
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
 801abec:	460b      	mov	r3, r1
 801abee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abf0:	2300      	movs	r3, #0
 801abf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abf4:	2300      	movs	r3, #0
 801abf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801abfe:	78fa      	ldrb	r2, [r7, #3]
 801ac00:	4611      	mov	r1, r2
 801ac02:	4618      	mov	r0, r3
 801ac04:	f7f0 fe5b 	bl	800b8be <HAL_PCD_EP_ClrStall>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac0c:	7bfb      	ldrb	r3, [r7, #15]
 801ac0e:	4618      	mov	r0, r3
 801ac10:	f000 f8f6 	bl	801ae00 <USBD_Get_USB_Status>
 801ac14:	4603      	mov	r3, r0
 801ac16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac18:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	3710      	adds	r7, #16
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bd80      	pop	{r7, pc}

0801ac22 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac22:	b480      	push	{r7}
 801ac24:	b085      	sub	sp, #20
 801ac26:	af00      	add	r7, sp, #0
 801ac28:	6078      	str	r0, [r7, #4]
 801ac2a:	460b      	mov	r3, r1
 801ac2c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ac34:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ac36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	da08      	bge.n	801ac50 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ac3e:	78fb      	ldrb	r3, [r7, #3]
 801ac40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ac44:	68fa      	ldr	r2, [r7, #12]
 801ac46:	015b      	lsls	r3, r3, #5
 801ac48:	4413      	add	r3, r2
 801ac4a:	332a      	adds	r3, #42	; 0x2a
 801ac4c:	781b      	ldrb	r3, [r3, #0]
 801ac4e:	e008      	b.n	801ac62 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ac50:	78fb      	ldrb	r3, [r7, #3]
 801ac52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ac56:	68fa      	ldr	r2, [r7, #12]
 801ac58:	015b      	lsls	r3, r3, #5
 801ac5a:	4413      	add	r3, r2
 801ac5c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 801ac60:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	3714      	adds	r7, #20
 801ac66:	46bd      	mov	sp, r7
 801ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac6c:	4770      	bx	lr

0801ac6e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ac6e:	b580      	push	{r7, lr}
 801ac70:	b084      	sub	sp, #16
 801ac72:	af00      	add	r7, sp, #0
 801ac74:	6078      	str	r0, [r7, #4]
 801ac76:	460b      	mov	r3, r1
 801ac78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac7e:	2300      	movs	r3, #0
 801ac80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ac88:	78fa      	ldrb	r2, [r7, #3]
 801ac8a:	4611      	mov	r1, r2
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	f7f0 fc6d 	bl	800b56c <HAL_PCD_SetAddress>
 801ac92:	4603      	mov	r3, r0
 801ac94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac96:	7bfb      	ldrb	r3, [r7, #15]
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f000 f8b1 	bl	801ae00 <USBD_Get_USB_Status>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aca2:	7bbb      	ldrb	r3, [r7, #14]
}
 801aca4:	4618      	mov	r0, r3
 801aca6:	3710      	adds	r7, #16
 801aca8:	46bd      	mov	sp, r7
 801acaa:	bd80      	pop	{r7, pc}

0801acac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801acac:	b580      	push	{r7, lr}
 801acae:	b086      	sub	sp, #24
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	60f8      	str	r0, [r7, #12]
 801acb4:	607a      	str	r2, [r7, #4]
 801acb6:	603b      	str	r3, [r7, #0]
 801acb8:	460b      	mov	r3, r1
 801acba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acbc:	2300      	movs	r3, #0
 801acbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801acc0:	2300      	movs	r3, #0
 801acc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801acca:	7af9      	ldrb	r1, [r7, #11]
 801accc:	683b      	ldr	r3, [r7, #0]
 801acce:	687a      	ldr	r2, [r7, #4]
 801acd0:	f7f0 fd62 	bl	800b798 <HAL_PCD_EP_Transmit>
 801acd4:	4603      	mov	r3, r0
 801acd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801acd8:	7dfb      	ldrb	r3, [r7, #23]
 801acda:	4618      	mov	r0, r3
 801acdc:	f000 f890 	bl	801ae00 <USBD_Get_USB_Status>
 801ace0:	4603      	mov	r3, r0
 801ace2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ace4:	7dbb      	ldrb	r3, [r7, #22]
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	3718      	adds	r7, #24
 801acea:	46bd      	mov	sp, r7
 801acec:	bd80      	pop	{r7, pc}

0801acee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801acee:	b580      	push	{r7, lr}
 801acf0:	b086      	sub	sp, #24
 801acf2:	af00      	add	r7, sp, #0
 801acf4:	60f8      	str	r0, [r7, #12]
 801acf6:	607a      	str	r2, [r7, #4]
 801acf8:	603b      	str	r3, [r7, #0]
 801acfa:	460b      	mov	r3, r1
 801acfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acfe:	2300      	movs	r3, #0
 801ad00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad02:	2300      	movs	r3, #0
 801ad04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ad0c:	7af9      	ldrb	r1, [r7, #11]
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	687a      	ldr	r2, [r7, #4]
 801ad12:	f7f0 fcf2 	bl	800b6fa <HAL_PCD_EP_Receive>
 801ad16:	4603      	mov	r3, r0
 801ad18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad1a:	7dfb      	ldrb	r3, [r7, #23]
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f000 f86f 	bl	801ae00 <USBD_Get_USB_Status>
 801ad22:	4603      	mov	r3, r0
 801ad24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ad26:	7dbb      	ldrb	r3, [r7, #22]
}
 801ad28:	4618      	mov	r0, r3
 801ad2a:	3718      	adds	r7, #24
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	bd80      	pop	{r7, pc}

0801ad30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b082      	sub	sp, #8
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	6078      	str	r0, [r7, #4]
 801ad38:	460b      	mov	r3, r1
 801ad3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ad42:	78fa      	ldrb	r2, [r7, #3]
 801ad44:	4611      	mov	r1, r2
 801ad46:	4618      	mov	r0, r3
 801ad48:	f7f0 fd11 	bl	800b76e <HAL_PCD_EP_GetRxCount>
 801ad4c:	4603      	mov	r3, r0
}
 801ad4e:	4618      	mov	r0, r3
 801ad50:	3708      	adds	r7, #8
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}
	...

0801ad58 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
 801ad60:	460b      	mov	r3, r1
 801ad62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801ad64:	78fb      	ldrb	r3, [r7, #3]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d002      	beq.n	801ad70 <HAL_PCDEx_LPM_Callback+0x18>
 801ad6a:	2b01      	cmp	r3, #1
 801ad6c:	d013      	beq.n	801ad96 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801ad6e:	e023      	b.n	801adb8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	699b      	ldr	r3, [r3, #24]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d007      	beq.n	801ad88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801ad78:	f000 f83c 	bl	801adf4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ad7c:	4b10      	ldr	r3, [pc, #64]	; (801adc0 <HAL_PCDEx_LPM_Callback+0x68>)
 801ad7e:	691b      	ldr	r3, [r3, #16]
 801ad80:	4a0f      	ldr	r2, [pc, #60]	; (801adc0 <HAL_PCDEx_LPM_Callback+0x68>)
 801ad82:	f023 0306 	bic.w	r3, r3, #6
 801ad86:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7f6 fdbd 	bl	801190e <USBD_LL_Resume>
    break;
 801ad94:	e010      	b.n	801adb8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f7f6 fda0 	bl	80118e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	699b      	ldr	r3, [r3, #24]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d005      	beq.n	801adb6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801adaa:	4b05      	ldr	r3, [pc, #20]	; (801adc0 <HAL_PCDEx_LPM_Callback+0x68>)
 801adac:	691b      	ldr	r3, [r3, #16]
 801adae:	4a04      	ldr	r2, [pc, #16]	; (801adc0 <HAL_PCDEx_LPM_Callback+0x68>)
 801adb0:	f043 0306 	orr.w	r3, r3, #6
 801adb4:	6113      	str	r3, [r2, #16]
    break;
 801adb6:	bf00      	nop
}
 801adb8:	bf00      	nop
 801adba:	3708      	adds	r7, #8
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bd80      	pop	{r7, pc}
 801adc0:	e000ed00 	.word	0xe000ed00

0801adc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801adc4:	b480      	push	{r7}
 801adc6:	b083      	sub	sp, #12
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801adcc:	4b03      	ldr	r3, [pc, #12]	; (801addc <USBD_static_malloc+0x18>)
}
 801adce:	4618      	mov	r0, r3
 801add0:	370c      	adds	r7, #12
 801add2:	46bd      	mov	sp, r7
 801add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add8:	4770      	bx	lr
 801adda:	bf00      	nop
 801addc:	20027854 	.word	0x20027854

0801ade0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ade0:	b480      	push	{r7}
 801ade2:	b083      	sub	sp, #12
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]

}
 801ade8:	bf00      	nop
 801adea:	370c      	adds	r7, #12
 801adec:	46bd      	mov	sp, r7
 801adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf2:	4770      	bx	lr

0801adf4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801adf4:	b580      	push	{r7, lr}
 801adf6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801adf8:	f7e9 fab2 	bl	8004360 <SystemClock_Config>
}
 801adfc:	bf00      	nop
 801adfe:	bd80      	pop	{r7, pc}

0801ae00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae00:	b480      	push	{r7}
 801ae02:	b085      	sub	sp, #20
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	4603      	mov	r3, r0
 801ae08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae0e:	79fb      	ldrb	r3, [r7, #7]
 801ae10:	2b03      	cmp	r3, #3
 801ae12:	d817      	bhi.n	801ae44 <USBD_Get_USB_Status+0x44>
 801ae14:	a201      	add	r2, pc, #4	; (adr r2, 801ae1c <USBD_Get_USB_Status+0x1c>)
 801ae16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae1a:	bf00      	nop
 801ae1c:	0801ae2d 	.word	0x0801ae2d
 801ae20:	0801ae33 	.word	0x0801ae33
 801ae24:	0801ae39 	.word	0x0801ae39
 801ae28:	0801ae3f 	.word	0x0801ae3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	73fb      	strb	r3, [r7, #15]
    break;
 801ae30:	e00b      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ae32:	2303      	movs	r3, #3
 801ae34:	73fb      	strb	r3, [r7, #15]
    break;
 801ae36:	e008      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ae38:	2301      	movs	r3, #1
 801ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 801ae3c:	e005      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ae3e:	2303      	movs	r3, #3
 801ae40:	73fb      	strb	r3, [r7, #15]
    break;
 801ae42:	e002      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ae44:	2303      	movs	r3, #3
 801ae46:	73fb      	strb	r3, [r7, #15]
    break;
 801ae48:	bf00      	nop
  }
  return usb_status;
 801ae4a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	3714      	adds	r7, #20
 801ae50:	46bd      	mov	sp, r7
 801ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae56:	4770      	bx	lr

0801ae58 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ae58:	b480      	push	{r7}
 801ae5a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ae5c:	4b05      	ldr	r3, [pc, #20]	; (801ae74 <UTIL_LPM_Init+0x1c>)
 801ae5e:	2200      	movs	r2, #0
 801ae60:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ae62:	4b05      	ldr	r3, [pc, #20]	; (801ae78 <UTIL_LPM_Init+0x20>)
 801ae64:	2200      	movs	r2, #0
 801ae66:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ae68:	bf00      	nop
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae70:	4770      	bx	lr
 801ae72:	bf00      	nop
 801ae74:	20027a74 	.word	0x20027a74
 801ae78:	20027a78 	.word	0x20027a78

0801ae7c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ae7c:	b480      	push	{r7}
 801ae7e:	b087      	sub	sp, #28
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
 801ae84:	460b      	mov	r3, r1
 801ae86:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae88:	f3ef 8310 	mrs	r3, PRIMASK
 801ae8c:	613b      	str	r3, [r7, #16]
  return(result);
 801ae8e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ae90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae92:	b672      	cpsid	i
  
  switch(state)
 801ae94:	78fb      	ldrb	r3, [r7, #3]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d009      	beq.n	801aeae <UTIL_LPM_SetOffMode+0x32>
 801ae9a:	2b01      	cmp	r3, #1
 801ae9c:	d000      	beq.n	801aea0 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 801ae9e:	e00e      	b.n	801aebe <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 801aea0:	4b0c      	ldr	r3, [pc, #48]	; (801aed4 <UTIL_LPM_SetOffMode+0x58>)
 801aea2:	681a      	ldr	r2, [r3, #0]
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	4313      	orrs	r3, r2
 801aea8:	4a0a      	ldr	r2, [pc, #40]	; (801aed4 <UTIL_LPM_SetOffMode+0x58>)
 801aeaa:	6013      	str	r3, [r2, #0]
      break;
 801aeac:	e007      	b.n	801aebe <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	43da      	mvns	r2, r3
 801aeb2:	4b08      	ldr	r3, [pc, #32]	; (801aed4 <UTIL_LPM_SetOffMode+0x58>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	4013      	ands	r3, r2
 801aeb8:	4a06      	ldr	r2, [pc, #24]	; (801aed4 <UTIL_LPM_SetOffMode+0x58>)
 801aeba:	6013      	str	r3, [r2, #0]
      break;
 801aebc:	bf00      	nop
 801aebe:	697b      	ldr	r3, [r7, #20]
 801aec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801aec8:	bf00      	nop
 801aeca:	371c      	adds	r7, #28
 801aecc:	46bd      	mov	sp, r7
 801aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed2:	4770      	bx	lr
 801aed4:	20027a78 	.word	0x20027a78

0801aed8 <arm_power_f32>:
 801aed8:	b430      	push	{r4, r5}
 801aeda:	088d      	lsrs	r5, r1, #2
 801aedc:	eddf 5a20 	vldr	s11, [pc, #128]	; 801af60 <arm_power_f32+0x88>
 801aee0:	d020      	beq.n	801af24 <arm_power_f32+0x4c>
 801aee2:	f100 0310 	add.w	r3, r0, #16
 801aee6:	462c      	mov	r4, r5
 801aee8:	ed53 6a04 	vldr	s13, [r3, #-16]
 801aeec:	ed13 7a03 	vldr	s14, [r3, #-12]
 801aef0:	ed53 7a02 	vldr	s15, [r3, #-8]
 801aef4:	ed13 6a01 	vldr	s12, [r3, #-4]
 801aef8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801aefc:	ee27 7a07 	vmul.f32	s14, s14, s14
 801af00:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801af04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801af08:	ee37 7a26 	vadd.f32	s14, s14, s13
 801af0c:	ee26 6a06 	vmul.f32	s12, s12, s12
 801af10:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af14:	3c01      	subs	r4, #1
 801af16:	f103 0310 	add.w	r3, r3, #16
 801af1a:	ee76 5a27 	vadd.f32	s11, s12, s15
 801af1e:	d1e3      	bne.n	801aee8 <arm_power_f32+0x10>
 801af20:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801af24:	f011 0103 	ands.w	r1, r1, #3
 801af28:	d015      	beq.n	801af56 <arm_power_f32+0x7e>
 801af2a:	edd0 7a00 	vldr	s15, [r0]
 801af2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801af32:	3901      	subs	r1, #1
 801af34:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801af38:	d00d      	beq.n	801af56 <arm_power_f32+0x7e>
 801af3a:	edd0 7a01 	vldr	s15, [r0, #4]
 801af3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801af42:	2901      	cmp	r1, #1
 801af44:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801af48:	d005      	beq.n	801af56 <arm_power_f32+0x7e>
 801af4a:	edd0 7a02 	vldr	s15, [r0, #8]
 801af4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801af52:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801af56:	edc2 5a00 	vstr	s11, [r2]
 801af5a:	bc30      	pop	{r4, r5}
 801af5c:	4770      	bx	lr
 801af5e:	bf00      	nop
 801af60:	00000000 	.word	0x00000000

0801af64 <arm_mat_mult_f32>:
 801af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af68:	8845      	ldrh	r5, [r0, #2]
 801af6a:	880b      	ldrh	r3, [r1, #0]
 801af6c:	8806      	ldrh	r6, [r0, #0]
 801af6e:	6847      	ldr	r7, [r0, #4]
 801af70:	6854      	ldr	r4, [r2, #4]
 801af72:	6848      	ldr	r0, [r1, #4]
 801af74:	b08b      	sub	sp, #44	; 0x2c
 801af76:	42ab      	cmp	r3, r5
 801af78:	9109      	str	r1, [sp, #36]	; 0x24
 801af7a:	9604      	str	r6, [sp, #16]
 801af7c:	8849      	ldrh	r1, [r1, #2]
 801af7e:	f040 808a 	bne.w	801b096 <arm_mat_mult_f32+0x132>
 801af82:	8815      	ldrh	r5, [r2, #0]
 801af84:	42b5      	cmp	r5, r6
 801af86:	f040 8086 	bne.w	801b096 <arm_mat_mult_f32+0x132>
 801af8a:	8852      	ldrh	r2, [r2, #2]
 801af8c:	428a      	cmp	r2, r1
 801af8e:	f040 8082 	bne.w	801b096 <arm_mat_mult_f32+0x132>
 801af92:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801af96:	1d01      	adds	r1, r0, #4
 801af98:	0116      	lsls	r6, r2, #4
 801af9a:	9108      	str	r1, [sp, #32]
 801af9c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 801afa0:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801afa4:	9101      	str	r1, [sp, #4]
 801afa6:	fb06 f108 	mul.w	r1, r6, r8
 801afaa:	0095      	lsls	r5, r2, #2
 801afac:	9103      	str	r1, [sp, #12]
 801afae:	00d2      	lsls	r2, r2, #3
 801afb0:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801afb4:	f003 0903 	and.w	r9, r3, #3
 801afb8:	009b      	lsls	r3, r3, #2
 801afba:	f107 0b10 	add.w	fp, r7, #16
 801afbe:	eb04 0a05 	add.w	sl, r4, r5
 801afc2:	9107      	str	r1, [sp, #28]
 801afc4:	9202      	str	r2, [sp, #8]
 801afc6:	9306      	str	r3, [sp, #24]
 801afc8:	f1ab 0310 	sub.w	r3, fp, #16
 801afcc:	9305      	str	r3, [sp, #20]
 801afce:	9b07      	ldr	r3, [sp, #28]
 801afd0:	f8dd e020 	ldr.w	lr, [sp, #32]
 801afd4:	eb03 0c0a 	add.w	ip, r3, sl
 801afd8:	eddf 7a31 	vldr	s15, [pc, #196]	; 801b0a0 <arm_mat_mult_f32+0x13c>
 801afdc:	f1b8 0f00 	cmp.w	r8, #0
 801afe0:	d053      	beq.n	801b08a <arm_mat_mult_f32+0x126>
 801afe2:	9b02      	ldr	r3, [sp, #8]
 801afe4:	4644      	mov	r4, r8
 801afe6:	18c1      	adds	r1, r0, r3
 801afe8:	4602      	mov	r2, r0
 801afea:	465b      	mov	r3, fp
 801afec:	ed92 6a00 	vldr	s12, [r2]
 801aff0:	ed13 7a04 	vldr	s14, [r3, #-16]
 801aff4:	ed53 4a03 	vldr	s9, [r3, #-12]
 801aff8:	ed53 6a02 	vldr	s13, [r3, #-8]
 801affc:	ed91 5a00 	vldr	s10, [r1]
 801b000:	ed53 5a01 	vldr	s11, [r3, #-4]
 801b004:	1957      	adds	r7, r2, r5
 801b006:	ee27 7a06 	vmul.f32	s14, s14, s12
 801b00a:	ed97 6a00 	vldr	s12, [r7]
 801b00e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b012:	ee26 6a24 	vmul.f32	s12, s12, s9
 801b016:	194f      	adds	r7, r1, r5
 801b018:	ee36 6a27 	vadd.f32	s12, s12, s15
 801b01c:	ee26 7a85 	vmul.f32	s14, s13, s10
 801b020:	edd7 7a00 	vldr	s15, [r7]
 801b024:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b028:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b02c:	3c01      	subs	r4, #1
 801b02e:	4432      	add	r2, r6
 801b030:	4431      	add	r1, r6
 801b032:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b036:	f103 0310 	add.w	r3, r3, #16
 801b03a:	d1d7      	bne.n	801afec <arm_mat_mult_f32+0x88>
 801b03c:	9b03      	ldr	r3, [sp, #12]
 801b03e:	9a01      	ldr	r2, [sp, #4]
 801b040:	4418      	add	r0, r3
 801b042:	f1b9 0f00 	cmp.w	r9, #0
 801b046:	d00b      	beq.n	801b060 <arm_mat_mult_f32+0xfc>
 801b048:	464b      	mov	r3, r9
 801b04a:	edd0 6a00 	vldr	s13, [r0]
 801b04e:	ecb2 7a01 	vldmia	r2!, {s14}
 801b052:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b056:	3b01      	subs	r3, #1
 801b058:	4428      	add	r0, r5
 801b05a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b05e:	d1f4      	bne.n	801b04a <arm_mat_mult_f32+0xe6>
 801b060:	ecec 7a01 	vstmia	ip!, {s15}
 801b064:	45d4      	cmp	ip, sl
 801b066:	4670      	mov	r0, lr
 801b068:	f10e 0e04 	add.w	lr, lr, #4
 801b06c:	d1b4      	bne.n	801afd8 <arm_mat_mult_f32+0x74>
 801b06e:	9a01      	ldr	r2, [sp, #4]
 801b070:	9b06      	ldr	r3, [sp, #24]
 801b072:	4611      	mov	r1, r2
 801b074:	4419      	add	r1, r3
 801b076:	449b      	add	fp, r3
 801b078:	9b04      	ldr	r3, [sp, #16]
 801b07a:	9101      	str	r1, [sp, #4]
 801b07c:	3b01      	subs	r3, #1
 801b07e:	44aa      	add	sl, r5
 801b080:	9304      	str	r3, [sp, #16]
 801b082:	d004      	beq.n	801b08e <arm_mat_mult_f32+0x12a>
 801b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b086:	6858      	ldr	r0, [r3, #4]
 801b088:	e79e      	b.n	801afc8 <arm_mat_mult_f32+0x64>
 801b08a:	9a05      	ldr	r2, [sp, #20]
 801b08c:	e7d9      	b.n	801b042 <arm_mat_mult_f32+0xde>
 801b08e:	4618      	mov	r0, r3
 801b090:	b00b      	add	sp, #44	; 0x2c
 801b092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b096:	f06f 0002 	mvn.w	r0, #2
 801b09a:	b00b      	add	sp, #44	; 0x2c
 801b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0a0:	00000000 	.word	0x00000000

0801b0a4 <arm_sin_f32>:
 801b0a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b124 <arm_sin_f32+0x80>
 801b0a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b0ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b0b8:	d504      	bpl.n	801b0c4 <arm_sin_f32+0x20>
 801b0ba:	ee17 3a90 	vmov	r3, s15
 801b0be:	3b01      	subs	r3, #1
 801b0c0:	ee07 3a90 	vmov	s15, r3
 801b0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0c8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801b128 <arm_sin_f32+0x84>
 801b0cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b0d0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b0d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b0d8:	ee17 3a90 	vmov	r3, s15
 801b0dc:	b29b      	uxth	r3, r3
 801b0de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0e2:	d21a      	bcs.n	801b11a <arm_sin_f32+0x76>
 801b0e4:	ee07 3a90 	vmov	s15, r3
 801b0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b0ec:	1c59      	adds	r1, r3, #1
 801b0ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b0f2:	4a0e      	ldr	r2, [pc, #56]	; (801b12c <arm_sin_f32+0x88>)
 801b0f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b0f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b0fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801b100:	ed93 7a00 	vldr	s14, [r3]
 801b104:	edd2 6a00 	vldr	s13, [r2]
 801b108:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b10c:	ee20 0a26 	vmul.f32	s0, s0, s13
 801b110:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b114:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b118:	4770      	bx	lr
 801b11a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b11e:	2101      	movs	r1, #1
 801b120:	2300      	movs	r3, #0
 801b122:	e7e6      	b.n	801b0f2 <arm_sin_f32+0x4e>
 801b124:	3e22f983 	.word	0x3e22f983
 801b128:	44000000 	.word	0x44000000
 801b12c:	0801d058 	.word	0x0801d058

0801b130 <arm_cos_f32>:
 801b130:	eddf 7a21 	vldr	s15, [pc, #132]	; 801b1b8 <arm_cos_f32+0x88>
 801b134:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b138:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801b13c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b140:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b148:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b14c:	d504      	bpl.n	801b158 <arm_cos_f32+0x28>
 801b14e:	ee17 3a90 	vmov	r3, s15
 801b152:	3b01      	subs	r3, #1
 801b154:	ee07 3a90 	vmov	s15, r3
 801b158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b15c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801b1bc <arm_cos_f32+0x8c>
 801b160:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b164:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b168:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b16c:	ee17 3a90 	vmov	r3, s15
 801b170:	b29b      	uxth	r3, r3
 801b172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b176:	d21a      	bcs.n	801b1ae <arm_cos_f32+0x7e>
 801b178:	ee07 3a90 	vmov	s15, r3
 801b17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b180:	1c59      	adds	r1, r3, #1
 801b182:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b186:	4a0e      	ldr	r2, [pc, #56]	; (801b1c0 <arm_cos_f32+0x90>)
 801b188:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b18c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b190:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801b194:	ed93 7a00 	vldr	s14, [r3]
 801b198:	edd2 6a00 	vldr	s13, [r2]
 801b19c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b1a0:	ee20 0a26 	vmul.f32	s0, s0, s13
 801b1a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b1a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b1ac:	4770      	bx	lr
 801b1ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b1b2:	2101      	movs	r1, #1
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	e7e6      	b.n	801b186 <arm_cos_f32+0x56>
 801b1b8:	3e22f983 	.word	0x3e22f983
 801b1bc:	44000000 	.word	0x44000000
 801b1c0:	0801d058 	.word	0x0801d058

0801b1c4 <arm_sub_f32>:
 801b1c4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801b1c8:	b4f0      	push	{r4, r5, r6, r7}
 801b1ca:	d033      	beq.n	801b234 <arm_sub_f32+0x70>
 801b1cc:	f100 0610 	add.w	r6, r0, #16
 801b1d0:	f101 0510 	add.w	r5, r1, #16
 801b1d4:	f102 0410 	add.w	r4, r2, #16
 801b1d8:	4667      	mov	r7, ip
 801b1da:	ed15 7a04 	vldr	s14, [r5, #-16]
 801b1de:	ed56 7a04 	vldr	s15, [r6, #-16]
 801b1e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1e6:	3f01      	subs	r7, #1
 801b1e8:	ed44 7a04 	vstr	s15, [r4, #-16]
 801b1ec:	ed15 7a03 	vldr	s14, [r5, #-12]
 801b1f0:	ed56 7a03 	vldr	s15, [r6, #-12]
 801b1f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1f8:	f106 0610 	add.w	r6, r6, #16
 801b1fc:	ed44 7a03 	vstr	s15, [r4, #-12]
 801b200:	ed15 7a02 	vldr	s14, [r5, #-8]
 801b204:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801b208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b20c:	f105 0510 	add.w	r5, r5, #16
 801b210:	ed44 7a02 	vstr	s15, [r4, #-8]
 801b214:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801b218:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801b21c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b220:	f104 0410 	add.w	r4, r4, #16
 801b224:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801b228:	d1d7      	bne.n	801b1da <arm_sub_f32+0x16>
 801b22a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801b22e:	4420      	add	r0, r4
 801b230:	4421      	add	r1, r4
 801b232:	4422      	add	r2, r4
 801b234:	f013 0303 	ands.w	r3, r3, #3
 801b238:	d01b      	beq.n	801b272 <arm_sub_f32+0xae>
 801b23a:	edd0 7a00 	vldr	s15, [r0]
 801b23e:	ed91 7a00 	vldr	s14, [r1]
 801b242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b246:	3b01      	subs	r3, #1
 801b248:	edc2 7a00 	vstr	s15, [r2]
 801b24c:	d011      	beq.n	801b272 <arm_sub_f32+0xae>
 801b24e:	edd0 7a01 	vldr	s15, [r0, #4]
 801b252:	ed91 7a01 	vldr	s14, [r1, #4]
 801b256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b25a:	2b01      	cmp	r3, #1
 801b25c:	edc2 7a01 	vstr	s15, [r2, #4]
 801b260:	d007      	beq.n	801b272 <arm_sub_f32+0xae>
 801b262:	edd0 7a02 	vldr	s15, [r0, #8]
 801b266:	ed91 7a02 	vldr	s14, [r1, #8]
 801b26a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b26e:	edc2 7a02 	vstr	s15, [r2, #8]
 801b272:	bcf0      	pop	{r4, r5, r6, r7}
 801b274:	4770      	bx	lr
 801b276:	bf00      	nop

0801b278 <arm_scale_f32>:
 801b278:	b470      	push	{r4, r5, r6}
 801b27a:	0896      	lsrs	r6, r2, #2
 801b27c:	d025      	beq.n	801b2ca <arm_scale_f32+0x52>
 801b27e:	f100 0410 	add.w	r4, r0, #16
 801b282:	f101 0310 	add.w	r3, r1, #16
 801b286:	4635      	mov	r5, r6
 801b288:	ed54 7a04 	vldr	s15, [r4, #-16]
 801b28c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b290:	3d01      	subs	r5, #1
 801b292:	ed43 7a04 	vstr	s15, [r3, #-16]
 801b296:	ed54 7a03 	vldr	s15, [r4, #-12]
 801b29a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b29e:	f104 0410 	add.w	r4, r4, #16
 801b2a2:	ed43 7a03 	vstr	s15, [r3, #-12]
 801b2a6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801b2aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b2ae:	f103 0310 	add.w	r3, r3, #16
 801b2b2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801b2b6:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801b2ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b2be:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801b2c2:	d1e1      	bne.n	801b288 <arm_scale_f32+0x10>
 801b2c4:	0136      	lsls	r6, r6, #4
 801b2c6:	4430      	add	r0, r6
 801b2c8:	4431      	add	r1, r6
 801b2ca:	f012 0203 	ands.w	r2, r2, #3
 801b2ce:	d015      	beq.n	801b2fc <arm_scale_f32+0x84>
 801b2d0:	edd0 7a00 	vldr	s15, [r0]
 801b2d4:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b2d8:	3a01      	subs	r2, #1
 801b2da:	edc1 7a00 	vstr	s15, [r1]
 801b2de:	d00d      	beq.n	801b2fc <arm_scale_f32+0x84>
 801b2e0:	edd0 7a01 	vldr	s15, [r0, #4]
 801b2e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b2e8:	2a01      	cmp	r2, #1
 801b2ea:	edc1 7a01 	vstr	s15, [r1, #4]
 801b2ee:	d005      	beq.n	801b2fc <arm_scale_f32+0x84>
 801b2f0:	edd0 7a02 	vldr	s15, [r0, #8]
 801b2f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b2f8:	ed81 0a02 	vstr	s0, [r1, #8]
 801b2fc:	bc70      	pop	{r4, r5, r6}
 801b2fe:	4770      	bx	lr

0801b300 <arm_dot_prod_f32>:
 801b300:	b4f0      	push	{r4, r5, r6, r7}
 801b302:	0897      	lsrs	r7, r2, #2
 801b304:	eddf 5a29 	vldr	s11, [pc, #164]	; 801b3ac <arm_dot_prod_f32+0xac>
 801b308:	d02d      	beq.n	801b366 <arm_dot_prod_f32+0x66>
 801b30a:	f100 0510 	add.w	r5, r0, #16
 801b30e:	f101 0410 	add.w	r4, r1, #16
 801b312:	463e      	mov	r6, r7
 801b314:	ed55 6a04 	vldr	s13, [r5, #-16]
 801b318:	ed54 3a04 	vldr	s7, [r4, #-16]
 801b31c:	ed15 7a03 	vldr	s14, [r5, #-12]
 801b320:	ed14 4a03 	vldr	s8, [r4, #-12]
 801b324:	ed55 7a02 	vldr	s15, [r5, #-8]
 801b328:	ed54 4a02 	vldr	s9, [r4, #-8]
 801b32c:	ed15 6a01 	vldr	s12, [r5, #-4]
 801b330:	ed14 5a01 	vldr	s10, [r4, #-4]
 801b334:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801b338:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b33c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b340:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801b344:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b348:	ee66 6a05 	vmul.f32	s13, s12, s10
 801b34c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b350:	3e01      	subs	r6, #1
 801b352:	f105 0510 	add.w	r5, r5, #16
 801b356:	ee76 5aa7 	vadd.f32	s11, s13, s15
 801b35a:	f104 0410 	add.w	r4, r4, #16
 801b35e:	d1d9      	bne.n	801b314 <arm_dot_prod_f32+0x14>
 801b360:	013f      	lsls	r7, r7, #4
 801b362:	4438      	add	r0, r7
 801b364:	4439      	add	r1, r7
 801b366:	f012 0203 	ands.w	r2, r2, #3
 801b36a:	d01b      	beq.n	801b3a4 <arm_dot_prod_f32+0xa4>
 801b36c:	edd1 7a00 	vldr	s15, [r1]
 801b370:	ed90 7a00 	vldr	s14, [r0]
 801b374:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b378:	3a01      	subs	r2, #1
 801b37a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801b37e:	d011      	beq.n	801b3a4 <arm_dot_prod_f32+0xa4>
 801b380:	edd1 7a01 	vldr	s15, [r1, #4]
 801b384:	ed90 7a01 	vldr	s14, [r0, #4]
 801b388:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b38c:	2a01      	cmp	r2, #1
 801b38e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801b392:	d007      	beq.n	801b3a4 <arm_dot_prod_f32+0xa4>
 801b394:	edd0 7a02 	vldr	s15, [r0, #8]
 801b398:	ed91 7a02 	vldr	s14, [r1, #8]
 801b39c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b3a0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801b3a4:	edc3 5a00 	vstr	s11, [r3]
 801b3a8:	bcf0      	pop	{r4, r5, r6, r7}
 801b3aa:	4770      	bx	lr
 801b3ac:	00000000 	.word	0x00000000

0801b3b0 <arm_add_f32>:
 801b3b0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801b3b4:	b4f0      	push	{r4, r5, r6, r7}
 801b3b6:	d033      	beq.n	801b420 <arm_add_f32+0x70>
 801b3b8:	f100 0610 	add.w	r6, r0, #16
 801b3bc:	f101 0510 	add.w	r5, r1, #16
 801b3c0:	f102 0410 	add.w	r4, r2, #16
 801b3c4:	4667      	mov	r7, ip
 801b3c6:	ed15 7a04 	vldr	s14, [r5, #-16]
 801b3ca:	ed56 7a04 	vldr	s15, [r6, #-16]
 801b3ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b3d2:	3f01      	subs	r7, #1
 801b3d4:	ed44 7a04 	vstr	s15, [r4, #-16]
 801b3d8:	ed15 7a03 	vldr	s14, [r5, #-12]
 801b3dc:	ed56 7a03 	vldr	s15, [r6, #-12]
 801b3e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b3e4:	f106 0610 	add.w	r6, r6, #16
 801b3e8:	ed44 7a03 	vstr	s15, [r4, #-12]
 801b3ec:	ed15 7a02 	vldr	s14, [r5, #-8]
 801b3f0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801b3f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b3f8:	f105 0510 	add.w	r5, r5, #16
 801b3fc:	ed44 7a02 	vstr	s15, [r4, #-8]
 801b400:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801b404:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801b408:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b40c:	f104 0410 	add.w	r4, r4, #16
 801b410:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801b414:	d1d7      	bne.n	801b3c6 <arm_add_f32+0x16>
 801b416:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801b41a:	4420      	add	r0, r4
 801b41c:	4421      	add	r1, r4
 801b41e:	4422      	add	r2, r4
 801b420:	f013 0303 	ands.w	r3, r3, #3
 801b424:	d01b      	beq.n	801b45e <arm_add_f32+0xae>
 801b426:	edd1 7a00 	vldr	s15, [r1]
 801b42a:	ed90 7a00 	vldr	s14, [r0]
 801b42e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b432:	3b01      	subs	r3, #1
 801b434:	edc2 7a00 	vstr	s15, [r2]
 801b438:	d011      	beq.n	801b45e <arm_add_f32+0xae>
 801b43a:	edd0 7a01 	vldr	s15, [r0, #4]
 801b43e:	ed91 7a01 	vldr	s14, [r1, #4]
 801b442:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b446:	2b01      	cmp	r3, #1
 801b448:	edc2 7a01 	vstr	s15, [r2, #4]
 801b44c:	d007      	beq.n	801b45e <arm_add_f32+0xae>
 801b44e:	edd0 7a02 	vldr	s15, [r0, #8]
 801b452:	ed91 7a02 	vldr	s14, [r1, #8]
 801b456:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b45a:	edc2 7a02 	vstr	s15, [r2, #8]
 801b45e:	bcf0      	pop	{r4, r5, r6, r7}
 801b460:	4770      	bx	lr
 801b462:	bf00      	nop

0801b464 <__errno>:
 801b464:	4b01      	ldr	r3, [pc, #4]	; (801b46c <__errno+0x8>)
 801b466:	6818      	ldr	r0, [r3, #0]
 801b468:	4770      	bx	lr
 801b46a:	bf00      	nop
 801b46c:	20000274 	.word	0x20000274

0801b470 <__libc_init_array>:
 801b470:	b570      	push	{r4, r5, r6, lr}
 801b472:	4e0d      	ldr	r6, [pc, #52]	; (801b4a8 <__libc_init_array+0x38>)
 801b474:	4c0d      	ldr	r4, [pc, #52]	; (801b4ac <__libc_init_array+0x3c>)
 801b476:	1ba4      	subs	r4, r4, r6
 801b478:	10a4      	asrs	r4, r4, #2
 801b47a:	2500      	movs	r5, #0
 801b47c:	42a5      	cmp	r5, r4
 801b47e:	d109      	bne.n	801b494 <__libc_init_array+0x24>
 801b480:	4e0b      	ldr	r6, [pc, #44]	; (801b4b0 <__libc_init_array+0x40>)
 801b482:	4c0c      	ldr	r4, [pc, #48]	; (801b4b4 <__libc_init_array+0x44>)
 801b484:	f001 f8d2 	bl	801c62c <_init>
 801b488:	1ba4      	subs	r4, r4, r6
 801b48a:	10a4      	asrs	r4, r4, #2
 801b48c:	2500      	movs	r5, #0
 801b48e:	42a5      	cmp	r5, r4
 801b490:	d105      	bne.n	801b49e <__libc_init_array+0x2e>
 801b492:	bd70      	pop	{r4, r5, r6, pc}
 801b494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b498:	4798      	blx	r3
 801b49a:	3501      	adds	r5, #1
 801b49c:	e7ee      	b.n	801b47c <__libc_init_array+0xc>
 801b49e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b4a2:	4798      	blx	r3
 801b4a4:	3501      	adds	r5, #1
 801b4a6:	e7f2      	b.n	801b48e <__libc_init_array+0x1e>
 801b4a8:	0801d910 	.word	0x0801d910
 801b4ac:	0801d910 	.word	0x0801d910
 801b4b0:	0801d910 	.word	0x0801d910
 801b4b4:	0801d914 	.word	0x0801d914

0801b4b8 <memcpy>:
 801b4b8:	b510      	push	{r4, lr}
 801b4ba:	1e43      	subs	r3, r0, #1
 801b4bc:	440a      	add	r2, r1
 801b4be:	4291      	cmp	r1, r2
 801b4c0:	d100      	bne.n	801b4c4 <memcpy+0xc>
 801b4c2:	bd10      	pop	{r4, pc}
 801b4c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b4c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b4cc:	e7f7      	b.n	801b4be <memcpy+0x6>

0801b4ce <memset>:
 801b4ce:	4402      	add	r2, r0
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	4293      	cmp	r3, r2
 801b4d4:	d100      	bne.n	801b4d8 <memset+0xa>
 801b4d6:	4770      	bx	lr
 801b4d8:	f803 1b01 	strb.w	r1, [r3], #1
 801b4dc:	e7f9      	b.n	801b4d2 <memset+0x4>
	...

0801b4e0 <pow>:
 801b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4e4:	ed2d 8b04 	vpush	{d8-d9}
 801b4e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b7bc <pow+0x2dc>
 801b4ec:	b08d      	sub	sp, #52	; 0x34
 801b4ee:	ec57 6b10 	vmov	r6, r7, d0
 801b4f2:	ec55 4b11 	vmov	r4, r5, d1
 801b4f6:	f000 f9b3 	bl	801b860 <__ieee754_pow>
 801b4fa:	f999 3000 	ldrsb.w	r3, [r9]
 801b4fe:	9300      	str	r3, [sp, #0]
 801b500:	3301      	adds	r3, #1
 801b502:	eeb0 8a40 	vmov.f32	s16, s0
 801b506:	eef0 8a60 	vmov.f32	s17, s1
 801b50a:	46c8      	mov	r8, r9
 801b50c:	d05f      	beq.n	801b5ce <pow+0xee>
 801b50e:	4622      	mov	r2, r4
 801b510:	462b      	mov	r3, r5
 801b512:	4620      	mov	r0, r4
 801b514:	4629      	mov	r1, r5
 801b516:	f7e5 fa93 	bl	8000a40 <__aeabi_dcmpun>
 801b51a:	4683      	mov	fp, r0
 801b51c:	2800      	cmp	r0, #0
 801b51e:	d156      	bne.n	801b5ce <pow+0xee>
 801b520:	4632      	mov	r2, r6
 801b522:	463b      	mov	r3, r7
 801b524:	4630      	mov	r0, r6
 801b526:	4639      	mov	r1, r7
 801b528:	f7e5 fa8a 	bl	8000a40 <__aeabi_dcmpun>
 801b52c:	9001      	str	r0, [sp, #4]
 801b52e:	b1e8      	cbz	r0, 801b56c <pow+0x8c>
 801b530:	2200      	movs	r2, #0
 801b532:	2300      	movs	r3, #0
 801b534:	4620      	mov	r0, r4
 801b536:	4629      	mov	r1, r5
 801b538:	f7e5 fa50 	bl	80009dc <__aeabi_dcmpeq>
 801b53c:	2800      	cmp	r0, #0
 801b53e:	d046      	beq.n	801b5ce <pow+0xee>
 801b540:	2301      	movs	r3, #1
 801b542:	9302      	str	r3, [sp, #8]
 801b544:	4b96      	ldr	r3, [pc, #600]	; (801b7a0 <pow+0x2c0>)
 801b546:	9303      	str	r3, [sp, #12]
 801b548:	4b96      	ldr	r3, [pc, #600]	; (801b7a4 <pow+0x2c4>)
 801b54a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b54e:	2200      	movs	r2, #0
 801b550:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b554:	9b00      	ldr	r3, [sp, #0]
 801b556:	2b02      	cmp	r3, #2
 801b558:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b55c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b560:	d033      	beq.n	801b5ca <pow+0xea>
 801b562:	a802      	add	r0, sp, #8
 801b564:	f000 ff4e 	bl	801c404 <matherr>
 801b568:	bb48      	cbnz	r0, 801b5be <pow+0xde>
 801b56a:	e05d      	b.n	801b628 <pow+0x148>
 801b56c:	f04f 0a00 	mov.w	sl, #0
 801b570:	f04f 0b00 	mov.w	fp, #0
 801b574:	4652      	mov	r2, sl
 801b576:	465b      	mov	r3, fp
 801b578:	4630      	mov	r0, r6
 801b57a:	4639      	mov	r1, r7
 801b57c:	f7e5 fa2e 	bl	80009dc <__aeabi_dcmpeq>
 801b580:	ec4b ab19 	vmov	d9, sl, fp
 801b584:	2800      	cmp	r0, #0
 801b586:	d054      	beq.n	801b632 <pow+0x152>
 801b588:	4652      	mov	r2, sl
 801b58a:	465b      	mov	r3, fp
 801b58c:	4620      	mov	r0, r4
 801b58e:	4629      	mov	r1, r5
 801b590:	f7e5 fa24 	bl	80009dc <__aeabi_dcmpeq>
 801b594:	4680      	mov	r8, r0
 801b596:	b318      	cbz	r0, 801b5e0 <pow+0x100>
 801b598:	2301      	movs	r3, #1
 801b59a:	9302      	str	r3, [sp, #8]
 801b59c:	4b80      	ldr	r3, [pc, #512]	; (801b7a0 <pow+0x2c0>)
 801b59e:	9303      	str	r3, [sp, #12]
 801b5a0:	9b01      	ldr	r3, [sp, #4]
 801b5a2:	930a      	str	r3, [sp, #40]	; 0x28
 801b5a4:	9b00      	ldr	r3, [sp, #0]
 801b5a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b5aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b5ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d0d5      	beq.n	801b562 <pow+0x82>
 801b5b6:	4b7b      	ldr	r3, [pc, #492]	; (801b7a4 <pow+0x2c4>)
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5c0:	b11b      	cbz	r3, 801b5ca <pow+0xea>
 801b5c2:	f7ff ff4f 	bl	801b464 <__errno>
 801b5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5c8:	6003      	str	r3, [r0, #0]
 801b5ca:	ed9d 8b08 	vldr	d8, [sp, #32]
 801b5ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b5d2:	eef0 0a68 	vmov.f32	s1, s17
 801b5d6:	b00d      	add	sp, #52	; 0x34
 801b5d8:	ecbd 8b04 	vpop	{d8-d9}
 801b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5e0:	ec45 4b10 	vmov	d0, r4, r5
 801b5e4:	f000 ff06 	bl	801c3f4 <finite>
 801b5e8:	2800      	cmp	r0, #0
 801b5ea:	d0f0      	beq.n	801b5ce <pow+0xee>
 801b5ec:	4652      	mov	r2, sl
 801b5ee:	465b      	mov	r3, fp
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	4629      	mov	r1, r5
 801b5f4:	f7e5 f9fc 	bl	80009f0 <__aeabi_dcmplt>
 801b5f8:	2800      	cmp	r0, #0
 801b5fa:	d0e8      	beq.n	801b5ce <pow+0xee>
 801b5fc:	2301      	movs	r3, #1
 801b5fe:	9302      	str	r3, [sp, #8]
 801b600:	4b67      	ldr	r3, [pc, #412]	; (801b7a0 <pow+0x2c0>)
 801b602:	9303      	str	r3, [sp, #12]
 801b604:	f999 3000 	ldrsb.w	r3, [r9]
 801b608:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b60c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b610:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b614:	b913      	cbnz	r3, 801b61c <pow+0x13c>
 801b616:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b61a:	e7a2      	b.n	801b562 <pow+0x82>
 801b61c:	4962      	ldr	r1, [pc, #392]	; (801b7a8 <pow+0x2c8>)
 801b61e:	2000      	movs	r0, #0
 801b620:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b624:	2b02      	cmp	r3, #2
 801b626:	d19c      	bne.n	801b562 <pow+0x82>
 801b628:	f7ff ff1c 	bl	801b464 <__errno>
 801b62c:	2321      	movs	r3, #33	; 0x21
 801b62e:	6003      	str	r3, [r0, #0]
 801b630:	e7c5      	b.n	801b5be <pow+0xde>
 801b632:	eeb0 0a48 	vmov.f32	s0, s16
 801b636:	eef0 0a68 	vmov.f32	s1, s17
 801b63a:	f000 fedb 	bl	801c3f4 <finite>
 801b63e:	9000      	str	r0, [sp, #0]
 801b640:	2800      	cmp	r0, #0
 801b642:	f040 8081 	bne.w	801b748 <pow+0x268>
 801b646:	ec47 6b10 	vmov	d0, r6, r7
 801b64a:	f000 fed3 	bl	801c3f4 <finite>
 801b64e:	2800      	cmp	r0, #0
 801b650:	d07a      	beq.n	801b748 <pow+0x268>
 801b652:	ec45 4b10 	vmov	d0, r4, r5
 801b656:	f000 fecd 	bl	801c3f4 <finite>
 801b65a:	2800      	cmp	r0, #0
 801b65c:	d074      	beq.n	801b748 <pow+0x268>
 801b65e:	ec53 2b18 	vmov	r2, r3, d8
 801b662:	ee18 0a10 	vmov	r0, s16
 801b666:	4619      	mov	r1, r3
 801b668:	f7e5 f9ea 	bl	8000a40 <__aeabi_dcmpun>
 801b66c:	f999 9000 	ldrsb.w	r9, [r9]
 801b670:	4b4b      	ldr	r3, [pc, #300]	; (801b7a0 <pow+0x2c0>)
 801b672:	b1b0      	cbz	r0, 801b6a2 <pow+0x1c2>
 801b674:	2201      	movs	r2, #1
 801b676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b67a:	9b00      	ldr	r3, [sp, #0]
 801b67c:	930a      	str	r3, [sp, #40]	; 0x28
 801b67e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b682:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b686:	f1b9 0f00 	cmp.w	r9, #0
 801b68a:	d0c4      	beq.n	801b616 <pow+0x136>
 801b68c:	4652      	mov	r2, sl
 801b68e:	465b      	mov	r3, fp
 801b690:	4650      	mov	r0, sl
 801b692:	4659      	mov	r1, fp
 801b694:	f7e5 f864 	bl	8000760 <__aeabi_ddiv>
 801b698:	f1b9 0f02 	cmp.w	r9, #2
 801b69c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b6a0:	e7c1      	b.n	801b626 <pow+0x146>
 801b6a2:	2203      	movs	r2, #3
 801b6a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b6a8:	900a      	str	r0, [sp, #40]	; 0x28
 801b6aa:	4629      	mov	r1, r5
 801b6ac:	4620      	mov	r0, r4
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	4b3e      	ldr	r3, [pc, #248]	; (801b7ac <pow+0x2cc>)
 801b6b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b6b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b6ba:	f7e4 ff27 	bl	800050c <__aeabi_dmul>
 801b6be:	4604      	mov	r4, r0
 801b6c0:	460d      	mov	r5, r1
 801b6c2:	f1b9 0f00 	cmp.w	r9, #0
 801b6c6:	d124      	bne.n	801b712 <pow+0x232>
 801b6c8:	4b39      	ldr	r3, [pc, #228]	; (801b7b0 <pow+0x2d0>)
 801b6ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b6ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b6d2:	4630      	mov	r0, r6
 801b6d4:	4652      	mov	r2, sl
 801b6d6:	465b      	mov	r3, fp
 801b6d8:	4639      	mov	r1, r7
 801b6da:	f7e5 f989 	bl	80009f0 <__aeabi_dcmplt>
 801b6de:	2800      	cmp	r0, #0
 801b6e0:	d056      	beq.n	801b790 <pow+0x2b0>
 801b6e2:	ec45 4b10 	vmov	d0, r4, r5
 801b6e6:	f000 fe97 	bl	801c418 <rint>
 801b6ea:	4622      	mov	r2, r4
 801b6ec:	462b      	mov	r3, r5
 801b6ee:	ec51 0b10 	vmov	r0, r1, d0
 801b6f2:	f7e5 f973 	bl	80009dc <__aeabi_dcmpeq>
 801b6f6:	b920      	cbnz	r0, 801b702 <pow+0x222>
 801b6f8:	4b2e      	ldr	r3, [pc, #184]	; (801b7b4 <pow+0x2d4>)
 801b6fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b6fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b702:	f998 3000 	ldrsb.w	r3, [r8]
 801b706:	2b02      	cmp	r3, #2
 801b708:	d142      	bne.n	801b790 <pow+0x2b0>
 801b70a:	f7ff feab 	bl	801b464 <__errno>
 801b70e:	2322      	movs	r3, #34	; 0x22
 801b710:	e78d      	b.n	801b62e <pow+0x14e>
 801b712:	4b29      	ldr	r3, [pc, #164]	; (801b7b8 <pow+0x2d8>)
 801b714:	2200      	movs	r2, #0
 801b716:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b71a:	4630      	mov	r0, r6
 801b71c:	4652      	mov	r2, sl
 801b71e:	465b      	mov	r3, fp
 801b720:	4639      	mov	r1, r7
 801b722:	f7e5 f965 	bl	80009f0 <__aeabi_dcmplt>
 801b726:	2800      	cmp	r0, #0
 801b728:	d0eb      	beq.n	801b702 <pow+0x222>
 801b72a:	ec45 4b10 	vmov	d0, r4, r5
 801b72e:	f000 fe73 	bl	801c418 <rint>
 801b732:	4622      	mov	r2, r4
 801b734:	462b      	mov	r3, r5
 801b736:	ec51 0b10 	vmov	r0, r1, d0
 801b73a:	f7e5 f94f 	bl	80009dc <__aeabi_dcmpeq>
 801b73e:	2800      	cmp	r0, #0
 801b740:	d1df      	bne.n	801b702 <pow+0x222>
 801b742:	2200      	movs	r2, #0
 801b744:	4b18      	ldr	r3, [pc, #96]	; (801b7a8 <pow+0x2c8>)
 801b746:	e7da      	b.n	801b6fe <pow+0x21e>
 801b748:	2200      	movs	r2, #0
 801b74a:	2300      	movs	r3, #0
 801b74c:	ec51 0b18 	vmov	r0, r1, d8
 801b750:	f7e5 f944 	bl	80009dc <__aeabi_dcmpeq>
 801b754:	2800      	cmp	r0, #0
 801b756:	f43f af3a 	beq.w	801b5ce <pow+0xee>
 801b75a:	ec47 6b10 	vmov	d0, r6, r7
 801b75e:	f000 fe49 	bl	801c3f4 <finite>
 801b762:	2800      	cmp	r0, #0
 801b764:	f43f af33 	beq.w	801b5ce <pow+0xee>
 801b768:	ec45 4b10 	vmov	d0, r4, r5
 801b76c:	f000 fe42 	bl	801c3f4 <finite>
 801b770:	2800      	cmp	r0, #0
 801b772:	f43f af2c 	beq.w	801b5ce <pow+0xee>
 801b776:	2304      	movs	r3, #4
 801b778:	9302      	str	r3, [sp, #8]
 801b77a:	4b09      	ldr	r3, [pc, #36]	; (801b7a0 <pow+0x2c0>)
 801b77c:	9303      	str	r3, [sp, #12]
 801b77e:	2300      	movs	r3, #0
 801b780:	930a      	str	r3, [sp, #40]	; 0x28
 801b782:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b786:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b78a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b78e:	e7b8      	b.n	801b702 <pow+0x222>
 801b790:	a802      	add	r0, sp, #8
 801b792:	f000 fe37 	bl	801c404 <matherr>
 801b796:	2800      	cmp	r0, #0
 801b798:	f47f af11 	bne.w	801b5be <pow+0xde>
 801b79c:	e7b5      	b.n	801b70a <pow+0x22a>
 801b79e:	bf00      	nop
 801b7a0:	0801d8bc 	.word	0x0801d8bc
 801b7a4:	3ff00000 	.word	0x3ff00000
 801b7a8:	fff00000 	.word	0xfff00000
 801b7ac:	3fe00000 	.word	0x3fe00000
 801b7b0:	47efffff 	.word	0x47efffff
 801b7b4:	c7efffff 	.word	0xc7efffff
 801b7b8:	7ff00000 	.word	0x7ff00000
 801b7bc:	200002d8 	.word	0x200002d8

0801b7c0 <sqrtf>:
 801b7c0:	b510      	push	{r4, lr}
 801b7c2:	ed2d 8b02 	vpush	{d8}
 801b7c6:	b08a      	sub	sp, #40	; 0x28
 801b7c8:	eeb0 8a40 	vmov.f32	s16, s0
 801b7cc:	f000 fe06 	bl	801c3dc <__ieee754_sqrtf>
 801b7d0:	4b21      	ldr	r3, [pc, #132]	; (801b858 <sqrtf+0x98>)
 801b7d2:	f993 4000 	ldrsb.w	r4, [r3]
 801b7d6:	1c63      	adds	r3, r4, #1
 801b7d8:	d02c      	beq.n	801b834 <sqrtf+0x74>
 801b7da:	eeb4 8a48 	vcmp.f32	s16, s16
 801b7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e2:	d627      	bvs.n	801b834 <sqrtf+0x74>
 801b7e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ec:	d522      	bpl.n	801b834 <sqrtf+0x74>
 801b7ee:	2301      	movs	r3, #1
 801b7f0:	9300      	str	r3, [sp, #0]
 801b7f2:	4b1a      	ldr	r3, [pc, #104]	; (801b85c <sqrtf+0x9c>)
 801b7f4:	9301      	str	r3, [sp, #4]
 801b7f6:	ee18 0a10 	vmov	r0, s16
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	9308      	str	r3, [sp, #32]
 801b7fe:	f7e4 fe2d 	bl	800045c <__aeabi_f2d>
 801b802:	2200      	movs	r2, #0
 801b804:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b80c:	2300      	movs	r3, #0
 801b80e:	b9ac      	cbnz	r4, 801b83c <sqrtf+0x7c>
 801b810:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b814:	4668      	mov	r0, sp
 801b816:	f000 fdf5 	bl	801c404 <matherr>
 801b81a:	b1b8      	cbz	r0, 801b84c <sqrtf+0x8c>
 801b81c:	9b08      	ldr	r3, [sp, #32]
 801b81e:	b11b      	cbz	r3, 801b828 <sqrtf+0x68>
 801b820:	f7ff fe20 	bl	801b464 <__errno>
 801b824:	9b08      	ldr	r3, [sp, #32]
 801b826:	6003      	str	r3, [r0, #0]
 801b828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b82c:	f7e5 f91e 	bl	8000a6c <__aeabi_d2f>
 801b830:	ee00 0a10 	vmov	s0, r0
 801b834:	b00a      	add	sp, #40	; 0x28
 801b836:	ecbd 8b02 	vpop	{d8}
 801b83a:	bd10      	pop	{r4, pc}
 801b83c:	4610      	mov	r0, r2
 801b83e:	4619      	mov	r1, r3
 801b840:	f7e4 ff8e 	bl	8000760 <__aeabi_ddiv>
 801b844:	2c02      	cmp	r4, #2
 801b846:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b84a:	d1e3      	bne.n	801b814 <sqrtf+0x54>
 801b84c:	f7ff fe0a 	bl	801b464 <__errno>
 801b850:	2321      	movs	r3, #33	; 0x21
 801b852:	6003      	str	r3, [r0, #0]
 801b854:	e7e2      	b.n	801b81c <sqrtf+0x5c>
 801b856:	bf00      	nop
 801b858:	200002d8 	.word	0x200002d8
 801b85c:	0801d8c0 	.word	0x0801d8c0

0801b860 <__ieee754_pow>:
 801b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b864:	b091      	sub	sp, #68	; 0x44
 801b866:	ed8d 1b00 	vstr	d1, [sp]
 801b86a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b86e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b872:	ea58 0302 	orrs.w	r3, r8, r2
 801b876:	ec57 6b10 	vmov	r6, r7, d0
 801b87a:	f000 84be 	beq.w	801c1fa <__ieee754_pow+0x99a>
 801b87e:	4b7a      	ldr	r3, [pc, #488]	; (801ba68 <__ieee754_pow+0x208>)
 801b880:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b884:	429c      	cmp	r4, r3
 801b886:	463d      	mov	r5, r7
 801b888:	ee10 aa10 	vmov	sl, s0
 801b88c:	dc09      	bgt.n	801b8a2 <__ieee754_pow+0x42>
 801b88e:	d103      	bne.n	801b898 <__ieee754_pow+0x38>
 801b890:	b93e      	cbnz	r6, 801b8a2 <__ieee754_pow+0x42>
 801b892:	45a0      	cmp	r8, r4
 801b894:	dc0d      	bgt.n	801b8b2 <__ieee754_pow+0x52>
 801b896:	e001      	b.n	801b89c <__ieee754_pow+0x3c>
 801b898:	4598      	cmp	r8, r3
 801b89a:	dc02      	bgt.n	801b8a2 <__ieee754_pow+0x42>
 801b89c:	4598      	cmp	r8, r3
 801b89e:	d10e      	bne.n	801b8be <__ieee754_pow+0x5e>
 801b8a0:	b16a      	cbz	r2, 801b8be <__ieee754_pow+0x5e>
 801b8a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b8a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b8aa:	ea54 030a 	orrs.w	r3, r4, sl
 801b8ae:	f000 84a4 	beq.w	801c1fa <__ieee754_pow+0x99a>
 801b8b2:	486e      	ldr	r0, [pc, #440]	; (801ba6c <__ieee754_pow+0x20c>)
 801b8b4:	b011      	add	sp, #68	; 0x44
 801b8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ba:	f000 bda5 	b.w	801c408 <nan>
 801b8be:	2d00      	cmp	r5, #0
 801b8c0:	da53      	bge.n	801b96a <__ieee754_pow+0x10a>
 801b8c2:	4b6b      	ldr	r3, [pc, #428]	; (801ba70 <__ieee754_pow+0x210>)
 801b8c4:	4598      	cmp	r8, r3
 801b8c6:	dc4d      	bgt.n	801b964 <__ieee754_pow+0x104>
 801b8c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b8cc:	4598      	cmp	r8, r3
 801b8ce:	dd4c      	ble.n	801b96a <__ieee754_pow+0x10a>
 801b8d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b8d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b8d8:	2b14      	cmp	r3, #20
 801b8da:	dd26      	ble.n	801b92a <__ieee754_pow+0xca>
 801b8dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b8e0:	fa22 f103 	lsr.w	r1, r2, r3
 801b8e4:	fa01 f303 	lsl.w	r3, r1, r3
 801b8e8:	4293      	cmp	r3, r2
 801b8ea:	d13e      	bne.n	801b96a <__ieee754_pow+0x10a>
 801b8ec:	f001 0101 	and.w	r1, r1, #1
 801b8f0:	f1c1 0b02 	rsb	fp, r1, #2
 801b8f4:	2a00      	cmp	r2, #0
 801b8f6:	d15b      	bne.n	801b9b0 <__ieee754_pow+0x150>
 801b8f8:	4b5b      	ldr	r3, [pc, #364]	; (801ba68 <__ieee754_pow+0x208>)
 801b8fa:	4598      	cmp	r8, r3
 801b8fc:	d124      	bne.n	801b948 <__ieee754_pow+0xe8>
 801b8fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b902:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b906:	ea53 030a 	orrs.w	r3, r3, sl
 801b90a:	f000 8476 	beq.w	801c1fa <__ieee754_pow+0x99a>
 801b90e:	4b59      	ldr	r3, [pc, #356]	; (801ba74 <__ieee754_pow+0x214>)
 801b910:	429c      	cmp	r4, r3
 801b912:	dd2d      	ble.n	801b970 <__ieee754_pow+0x110>
 801b914:	f1b9 0f00 	cmp.w	r9, #0
 801b918:	f280 8473 	bge.w	801c202 <__ieee754_pow+0x9a2>
 801b91c:	2000      	movs	r0, #0
 801b91e:	2100      	movs	r1, #0
 801b920:	ec41 0b10 	vmov	d0, r0, r1
 801b924:	b011      	add	sp, #68	; 0x44
 801b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b92a:	2a00      	cmp	r2, #0
 801b92c:	d13e      	bne.n	801b9ac <__ieee754_pow+0x14c>
 801b92e:	f1c3 0314 	rsb	r3, r3, #20
 801b932:	fa48 f103 	asr.w	r1, r8, r3
 801b936:	fa01 f303 	lsl.w	r3, r1, r3
 801b93a:	4543      	cmp	r3, r8
 801b93c:	f040 8469 	bne.w	801c212 <__ieee754_pow+0x9b2>
 801b940:	f001 0101 	and.w	r1, r1, #1
 801b944:	f1c1 0b02 	rsb	fp, r1, #2
 801b948:	4b4b      	ldr	r3, [pc, #300]	; (801ba78 <__ieee754_pow+0x218>)
 801b94a:	4598      	cmp	r8, r3
 801b94c:	d118      	bne.n	801b980 <__ieee754_pow+0x120>
 801b94e:	f1b9 0f00 	cmp.w	r9, #0
 801b952:	f280 845a 	bge.w	801c20a <__ieee754_pow+0x9aa>
 801b956:	4948      	ldr	r1, [pc, #288]	; (801ba78 <__ieee754_pow+0x218>)
 801b958:	4632      	mov	r2, r6
 801b95a:	463b      	mov	r3, r7
 801b95c:	2000      	movs	r0, #0
 801b95e:	f7e4 feff 	bl	8000760 <__aeabi_ddiv>
 801b962:	e7dd      	b.n	801b920 <__ieee754_pow+0xc0>
 801b964:	f04f 0b02 	mov.w	fp, #2
 801b968:	e7c4      	b.n	801b8f4 <__ieee754_pow+0x94>
 801b96a:	f04f 0b00 	mov.w	fp, #0
 801b96e:	e7c1      	b.n	801b8f4 <__ieee754_pow+0x94>
 801b970:	f1b9 0f00 	cmp.w	r9, #0
 801b974:	dad2      	bge.n	801b91c <__ieee754_pow+0xbc>
 801b976:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b97a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b97e:	e7cf      	b.n	801b920 <__ieee754_pow+0xc0>
 801b980:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b984:	d106      	bne.n	801b994 <__ieee754_pow+0x134>
 801b986:	4632      	mov	r2, r6
 801b988:	463b      	mov	r3, r7
 801b98a:	4610      	mov	r0, r2
 801b98c:	4619      	mov	r1, r3
 801b98e:	f7e4 fdbd 	bl	800050c <__aeabi_dmul>
 801b992:	e7c5      	b.n	801b920 <__ieee754_pow+0xc0>
 801b994:	4b39      	ldr	r3, [pc, #228]	; (801ba7c <__ieee754_pow+0x21c>)
 801b996:	4599      	cmp	r9, r3
 801b998:	d10a      	bne.n	801b9b0 <__ieee754_pow+0x150>
 801b99a:	2d00      	cmp	r5, #0
 801b99c:	db08      	blt.n	801b9b0 <__ieee754_pow+0x150>
 801b99e:	ec47 6b10 	vmov	d0, r6, r7
 801b9a2:	b011      	add	sp, #68	; 0x44
 801b9a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9a8:	f000 bc68 	b.w	801c27c <__ieee754_sqrt>
 801b9ac:	f04f 0b00 	mov.w	fp, #0
 801b9b0:	ec47 6b10 	vmov	d0, r6, r7
 801b9b4:	f000 fd15 	bl	801c3e2 <fabs>
 801b9b8:	ec51 0b10 	vmov	r0, r1, d0
 801b9bc:	f1ba 0f00 	cmp.w	sl, #0
 801b9c0:	d127      	bne.n	801ba12 <__ieee754_pow+0x1b2>
 801b9c2:	b124      	cbz	r4, 801b9ce <__ieee754_pow+0x16e>
 801b9c4:	4b2c      	ldr	r3, [pc, #176]	; (801ba78 <__ieee754_pow+0x218>)
 801b9c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b9ca:	429a      	cmp	r2, r3
 801b9cc:	d121      	bne.n	801ba12 <__ieee754_pow+0x1b2>
 801b9ce:	f1b9 0f00 	cmp.w	r9, #0
 801b9d2:	da05      	bge.n	801b9e0 <__ieee754_pow+0x180>
 801b9d4:	4602      	mov	r2, r0
 801b9d6:	460b      	mov	r3, r1
 801b9d8:	2000      	movs	r0, #0
 801b9da:	4927      	ldr	r1, [pc, #156]	; (801ba78 <__ieee754_pow+0x218>)
 801b9dc:	f7e4 fec0 	bl	8000760 <__aeabi_ddiv>
 801b9e0:	2d00      	cmp	r5, #0
 801b9e2:	da9d      	bge.n	801b920 <__ieee754_pow+0xc0>
 801b9e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b9e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b9ec:	ea54 030b 	orrs.w	r3, r4, fp
 801b9f0:	d108      	bne.n	801ba04 <__ieee754_pow+0x1a4>
 801b9f2:	4602      	mov	r2, r0
 801b9f4:	460b      	mov	r3, r1
 801b9f6:	4610      	mov	r0, r2
 801b9f8:	4619      	mov	r1, r3
 801b9fa:	f7e4 fbcf 	bl	800019c <__aeabi_dsub>
 801b9fe:	4602      	mov	r2, r0
 801ba00:	460b      	mov	r3, r1
 801ba02:	e7ac      	b.n	801b95e <__ieee754_pow+0xfe>
 801ba04:	f1bb 0f01 	cmp.w	fp, #1
 801ba08:	d18a      	bne.n	801b920 <__ieee754_pow+0xc0>
 801ba0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ba0e:	4619      	mov	r1, r3
 801ba10:	e786      	b.n	801b920 <__ieee754_pow+0xc0>
 801ba12:	0fed      	lsrs	r5, r5, #31
 801ba14:	1e6b      	subs	r3, r5, #1
 801ba16:	930d      	str	r3, [sp, #52]	; 0x34
 801ba18:	ea5b 0303 	orrs.w	r3, fp, r3
 801ba1c:	d102      	bne.n	801ba24 <__ieee754_pow+0x1c4>
 801ba1e:	4632      	mov	r2, r6
 801ba20:	463b      	mov	r3, r7
 801ba22:	e7e8      	b.n	801b9f6 <__ieee754_pow+0x196>
 801ba24:	4b16      	ldr	r3, [pc, #88]	; (801ba80 <__ieee754_pow+0x220>)
 801ba26:	4598      	cmp	r8, r3
 801ba28:	f340 80fe 	ble.w	801bc28 <__ieee754_pow+0x3c8>
 801ba2c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ba30:	4598      	cmp	r8, r3
 801ba32:	dd0a      	ble.n	801ba4a <__ieee754_pow+0x1ea>
 801ba34:	4b0f      	ldr	r3, [pc, #60]	; (801ba74 <__ieee754_pow+0x214>)
 801ba36:	429c      	cmp	r4, r3
 801ba38:	dc0d      	bgt.n	801ba56 <__ieee754_pow+0x1f6>
 801ba3a:	f1b9 0f00 	cmp.w	r9, #0
 801ba3e:	f6bf af6d 	bge.w	801b91c <__ieee754_pow+0xbc>
 801ba42:	a307      	add	r3, pc, #28	; (adr r3, 801ba60 <__ieee754_pow+0x200>)
 801ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba48:	e79f      	b.n	801b98a <__ieee754_pow+0x12a>
 801ba4a:	4b0e      	ldr	r3, [pc, #56]	; (801ba84 <__ieee754_pow+0x224>)
 801ba4c:	429c      	cmp	r4, r3
 801ba4e:	ddf4      	ble.n	801ba3a <__ieee754_pow+0x1da>
 801ba50:	4b09      	ldr	r3, [pc, #36]	; (801ba78 <__ieee754_pow+0x218>)
 801ba52:	429c      	cmp	r4, r3
 801ba54:	dd18      	ble.n	801ba88 <__ieee754_pow+0x228>
 801ba56:	f1b9 0f00 	cmp.w	r9, #0
 801ba5a:	dcf2      	bgt.n	801ba42 <__ieee754_pow+0x1e2>
 801ba5c:	e75e      	b.n	801b91c <__ieee754_pow+0xbc>
 801ba5e:	bf00      	nop
 801ba60:	8800759c 	.word	0x8800759c
 801ba64:	7e37e43c 	.word	0x7e37e43c
 801ba68:	7ff00000 	.word	0x7ff00000
 801ba6c:	0801d8c5 	.word	0x0801d8c5
 801ba70:	433fffff 	.word	0x433fffff
 801ba74:	3fefffff 	.word	0x3fefffff
 801ba78:	3ff00000 	.word	0x3ff00000
 801ba7c:	3fe00000 	.word	0x3fe00000
 801ba80:	41e00000 	.word	0x41e00000
 801ba84:	3feffffe 	.word	0x3feffffe
 801ba88:	2200      	movs	r2, #0
 801ba8a:	4b63      	ldr	r3, [pc, #396]	; (801bc18 <__ieee754_pow+0x3b8>)
 801ba8c:	f7e4 fb86 	bl	800019c <__aeabi_dsub>
 801ba90:	a355      	add	r3, pc, #340	; (adr r3, 801bbe8 <__ieee754_pow+0x388>)
 801ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba96:	4604      	mov	r4, r0
 801ba98:	460d      	mov	r5, r1
 801ba9a:	f7e4 fd37 	bl	800050c <__aeabi_dmul>
 801ba9e:	a354      	add	r3, pc, #336	; (adr r3, 801bbf0 <__ieee754_pow+0x390>)
 801baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa4:	4606      	mov	r6, r0
 801baa6:	460f      	mov	r7, r1
 801baa8:	4620      	mov	r0, r4
 801baaa:	4629      	mov	r1, r5
 801baac:	f7e4 fd2e 	bl	800050c <__aeabi_dmul>
 801bab0:	2200      	movs	r2, #0
 801bab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bab6:	4b59      	ldr	r3, [pc, #356]	; (801bc1c <__ieee754_pow+0x3bc>)
 801bab8:	4620      	mov	r0, r4
 801baba:	4629      	mov	r1, r5
 801babc:	f7e4 fd26 	bl	800050c <__aeabi_dmul>
 801bac0:	4602      	mov	r2, r0
 801bac2:	460b      	mov	r3, r1
 801bac4:	a14c      	add	r1, pc, #304	; (adr r1, 801bbf8 <__ieee754_pow+0x398>)
 801bac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801baca:	f7e4 fb67 	bl	800019c <__aeabi_dsub>
 801bace:	4622      	mov	r2, r4
 801bad0:	462b      	mov	r3, r5
 801bad2:	f7e4 fd1b 	bl	800050c <__aeabi_dmul>
 801bad6:	4602      	mov	r2, r0
 801bad8:	460b      	mov	r3, r1
 801bada:	2000      	movs	r0, #0
 801badc:	4950      	ldr	r1, [pc, #320]	; (801bc20 <__ieee754_pow+0x3c0>)
 801bade:	f7e4 fb5d 	bl	800019c <__aeabi_dsub>
 801bae2:	4622      	mov	r2, r4
 801bae4:	462b      	mov	r3, r5
 801bae6:	4680      	mov	r8, r0
 801bae8:	4689      	mov	r9, r1
 801baea:	4620      	mov	r0, r4
 801baec:	4629      	mov	r1, r5
 801baee:	f7e4 fd0d 	bl	800050c <__aeabi_dmul>
 801baf2:	4602      	mov	r2, r0
 801baf4:	460b      	mov	r3, r1
 801baf6:	4640      	mov	r0, r8
 801baf8:	4649      	mov	r1, r9
 801bafa:	f7e4 fd07 	bl	800050c <__aeabi_dmul>
 801bafe:	a340      	add	r3, pc, #256	; (adr r3, 801bc00 <__ieee754_pow+0x3a0>)
 801bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb04:	f7e4 fd02 	bl	800050c <__aeabi_dmul>
 801bb08:	4602      	mov	r2, r0
 801bb0a:	460b      	mov	r3, r1
 801bb0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb10:	f7e4 fb44 	bl	800019c <__aeabi_dsub>
 801bb14:	4602      	mov	r2, r0
 801bb16:	460b      	mov	r3, r1
 801bb18:	4604      	mov	r4, r0
 801bb1a:	460d      	mov	r5, r1
 801bb1c:	4630      	mov	r0, r6
 801bb1e:	4639      	mov	r1, r7
 801bb20:	f7e4 fb3e 	bl	80001a0 <__adddf3>
 801bb24:	2000      	movs	r0, #0
 801bb26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb2a:	4632      	mov	r2, r6
 801bb2c:	463b      	mov	r3, r7
 801bb2e:	f7e4 fb35 	bl	800019c <__aeabi_dsub>
 801bb32:	4602      	mov	r2, r0
 801bb34:	460b      	mov	r3, r1
 801bb36:	4620      	mov	r0, r4
 801bb38:	4629      	mov	r1, r5
 801bb3a:	f7e4 fb2f 	bl	800019c <__aeabi_dsub>
 801bb3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb40:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bb44:	4313      	orrs	r3, r2
 801bb46:	4606      	mov	r6, r0
 801bb48:	460f      	mov	r7, r1
 801bb4a:	f040 81eb 	bne.w	801bf24 <__ieee754_pow+0x6c4>
 801bb4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801bc08 <__ieee754_pow+0x3a8>
 801bb52:	e9dd 4500 	ldrd	r4, r5, [sp]
 801bb56:	2400      	movs	r4, #0
 801bb58:	4622      	mov	r2, r4
 801bb5a:	462b      	mov	r3, r5
 801bb5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bb60:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb64:	f7e4 fb1a 	bl	800019c <__aeabi_dsub>
 801bb68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb6c:	f7e4 fcce 	bl	800050c <__aeabi_dmul>
 801bb70:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb74:	4680      	mov	r8, r0
 801bb76:	4689      	mov	r9, r1
 801bb78:	4630      	mov	r0, r6
 801bb7a:	4639      	mov	r1, r7
 801bb7c:	f7e4 fcc6 	bl	800050c <__aeabi_dmul>
 801bb80:	4602      	mov	r2, r0
 801bb82:	460b      	mov	r3, r1
 801bb84:	4640      	mov	r0, r8
 801bb86:	4649      	mov	r1, r9
 801bb88:	f7e4 fb0a 	bl	80001a0 <__adddf3>
 801bb8c:	4622      	mov	r2, r4
 801bb8e:	462b      	mov	r3, r5
 801bb90:	4680      	mov	r8, r0
 801bb92:	4689      	mov	r9, r1
 801bb94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb98:	f7e4 fcb8 	bl	800050c <__aeabi_dmul>
 801bb9c:	460b      	mov	r3, r1
 801bb9e:	4604      	mov	r4, r0
 801bba0:	460d      	mov	r5, r1
 801bba2:	4602      	mov	r2, r0
 801bba4:	4649      	mov	r1, r9
 801bba6:	4640      	mov	r0, r8
 801bba8:	e9cd 4500 	strd	r4, r5, [sp]
 801bbac:	f7e4 faf8 	bl	80001a0 <__adddf3>
 801bbb0:	4b1c      	ldr	r3, [pc, #112]	; (801bc24 <__ieee754_pow+0x3c4>)
 801bbb2:	4299      	cmp	r1, r3
 801bbb4:	4606      	mov	r6, r0
 801bbb6:	460f      	mov	r7, r1
 801bbb8:	468b      	mov	fp, r1
 801bbba:	f340 82f7 	ble.w	801c1ac <__ieee754_pow+0x94c>
 801bbbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801bbc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801bbc6:	4303      	orrs	r3, r0
 801bbc8:	f000 81ea 	beq.w	801bfa0 <__ieee754_pow+0x740>
 801bbcc:	a310      	add	r3, pc, #64	; (adr r3, 801bc10 <__ieee754_pow+0x3b0>)
 801bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bbd6:	f7e4 fc99 	bl	800050c <__aeabi_dmul>
 801bbda:	a30d      	add	r3, pc, #52	; (adr r3, 801bc10 <__ieee754_pow+0x3b0>)
 801bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbe0:	e6d5      	b.n	801b98e <__ieee754_pow+0x12e>
 801bbe2:	bf00      	nop
 801bbe4:	f3af 8000 	nop.w
 801bbe8:	60000000 	.word	0x60000000
 801bbec:	3ff71547 	.word	0x3ff71547
 801bbf0:	f85ddf44 	.word	0xf85ddf44
 801bbf4:	3e54ae0b 	.word	0x3e54ae0b
 801bbf8:	55555555 	.word	0x55555555
 801bbfc:	3fd55555 	.word	0x3fd55555
 801bc00:	652b82fe 	.word	0x652b82fe
 801bc04:	3ff71547 	.word	0x3ff71547
 801bc08:	00000000 	.word	0x00000000
 801bc0c:	bff00000 	.word	0xbff00000
 801bc10:	8800759c 	.word	0x8800759c
 801bc14:	7e37e43c 	.word	0x7e37e43c
 801bc18:	3ff00000 	.word	0x3ff00000
 801bc1c:	3fd00000 	.word	0x3fd00000
 801bc20:	3fe00000 	.word	0x3fe00000
 801bc24:	408fffff 	.word	0x408fffff
 801bc28:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801bc2c:	f04f 0200 	mov.w	r2, #0
 801bc30:	da05      	bge.n	801bc3e <__ieee754_pow+0x3de>
 801bc32:	4bd3      	ldr	r3, [pc, #844]	; (801bf80 <__ieee754_pow+0x720>)
 801bc34:	f7e4 fc6a 	bl	800050c <__aeabi_dmul>
 801bc38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801bc3c:	460c      	mov	r4, r1
 801bc3e:	1523      	asrs	r3, r4, #20
 801bc40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bc44:	4413      	add	r3, r2
 801bc46:	9309      	str	r3, [sp, #36]	; 0x24
 801bc48:	4bce      	ldr	r3, [pc, #824]	; (801bf84 <__ieee754_pow+0x724>)
 801bc4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801bc4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801bc52:	429c      	cmp	r4, r3
 801bc54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bc58:	dd08      	ble.n	801bc6c <__ieee754_pow+0x40c>
 801bc5a:	4bcb      	ldr	r3, [pc, #812]	; (801bf88 <__ieee754_pow+0x728>)
 801bc5c:	429c      	cmp	r4, r3
 801bc5e:	f340 815e 	ble.w	801bf1e <__ieee754_pow+0x6be>
 801bc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc64:	3301      	adds	r3, #1
 801bc66:	9309      	str	r3, [sp, #36]	; 0x24
 801bc68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801bc6c:	f04f 0a00 	mov.w	sl, #0
 801bc70:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bc74:	930c      	str	r3, [sp, #48]	; 0x30
 801bc76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc78:	4bc4      	ldr	r3, [pc, #784]	; (801bf8c <__ieee754_pow+0x72c>)
 801bc7a:	4413      	add	r3, r2
 801bc7c:	ed93 7b00 	vldr	d7, [r3]
 801bc80:	4629      	mov	r1, r5
 801bc82:	ec53 2b17 	vmov	r2, r3, d7
 801bc86:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bc8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bc8e:	f7e4 fa85 	bl	800019c <__aeabi_dsub>
 801bc92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bc96:	4606      	mov	r6, r0
 801bc98:	460f      	mov	r7, r1
 801bc9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bc9e:	f7e4 fa7f 	bl	80001a0 <__adddf3>
 801bca2:	4602      	mov	r2, r0
 801bca4:	460b      	mov	r3, r1
 801bca6:	2000      	movs	r0, #0
 801bca8:	49b9      	ldr	r1, [pc, #740]	; (801bf90 <__ieee754_pow+0x730>)
 801bcaa:	f7e4 fd59 	bl	8000760 <__aeabi_ddiv>
 801bcae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801bcb2:	4602      	mov	r2, r0
 801bcb4:	460b      	mov	r3, r1
 801bcb6:	4630      	mov	r0, r6
 801bcb8:	4639      	mov	r1, r7
 801bcba:	f7e4 fc27 	bl	800050c <__aeabi_dmul>
 801bcbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bcc2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bcc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bcca:	2300      	movs	r3, #0
 801bccc:	9302      	str	r3, [sp, #8]
 801bcce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801bcd2:	106d      	asrs	r5, r5, #1
 801bcd4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801bcd8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801bcdc:	2200      	movs	r2, #0
 801bcde:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bce2:	4640      	mov	r0, r8
 801bce4:	4649      	mov	r1, r9
 801bce6:	4614      	mov	r4, r2
 801bce8:	461d      	mov	r5, r3
 801bcea:	f7e4 fc0f 	bl	800050c <__aeabi_dmul>
 801bcee:	4602      	mov	r2, r0
 801bcf0:	460b      	mov	r3, r1
 801bcf2:	4630      	mov	r0, r6
 801bcf4:	4639      	mov	r1, r7
 801bcf6:	f7e4 fa51 	bl	800019c <__aeabi_dsub>
 801bcfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bcfe:	4606      	mov	r6, r0
 801bd00:	460f      	mov	r7, r1
 801bd02:	4620      	mov	r0, r4
 801bd04:	4629      	mov	r1, r5
 801bd06:	f7e4 fa49 	bl	800019c <__aeabi_dsub>
 801bd0a:	4602      	mov	r2, r0
 801bd0c:	460b      	mov	r3, r1
 801bd0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bd12:	f7e4 fa43 	bl	800019c <__aeabi_dsub>
 801bd16:	4642      	mov	r2, r8
 801bd18:	464b      	mov	r3, r9
 801bd1a:	f7e4 fbf7 	bl	800050c <__aeabi_dmul>
 801bd1e:	4602      	mov	r2, r0
 801bd20:	460b      	mov	r3, r1
 801bd22:	4630      	mov	r0, r6
 801bd24:	4639      	mov	r1, r7
 801bd26:	f7e4 fa39 	bl	800019c <__aeabi_dsub>
 801bd2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bd2e:	f7e4 fbed 	bl	800050c <__aeabi_dmul>
 801bd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bd36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bd3a:	4610      	mov	r0, r2
 801bd3c:	4619      	mov	r1, r3
 801bd3e:	f7e4 fbe5 	bl	800050c <__aeabi_dmul>
 801bd42:	a37b      	add	r3, pc, #492	; (adr r3, 801bf30 <__ieee754_pow+0x6d0>)
 801bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd48:	4604      	mov	r4, r0
 801bd4a:	460d      	mov	r5, r1
 801bd4c:	f7e4 fbde 	bl	800050c <__aeabi_dmul>
 801bd50:	a379      	add	r3, pc, #484	; (adr r3, 801bf38 <__ieee754_pow+0x6d8>)
 801bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd56:	f7e4 fa23 	bl	80001a0 <__adddf3>
 801bd5a:	4622      	mov	r2, r4
 801bd5c:	462b      	mov	r3, r5
 801bd5e:	f7e4 fbd5 	bl	800050c <__aeabi_dmul>
 801bd62:	a377      	add	r3, pc, #476	; (adr r3, 801bf40 <__ieee754_pow+0x6e0>)
 801bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd68:	f7e4 fa1a 	bl	80001a0 <__adddf3>
 801bd6c:	4622      	mov	r2, r4
 801bd6e:	462b      	mov	r3, r5
 801bd70:	f7e4 fbcc 	bl	800050c <__aeabi_dmul>
 801bd74:	a374      	add	r3, pc, #464	; (adr r3, 801bf48 <__ieee754_pow+0x6e8>)
 801bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd7a:	f7e4 fa11 	bl	80001a0 <__adddf3>
 801bd7e:	4622      	mov	r2, r4
 801bd80:	462b      	mov	r3, r5
 801bd82:	f7e4 fbc3 	bl	800050c <__aeabi_dmul>
 801bd86:	a372      	add	r3, pc, #456	; (adr r3, 801bf50 <__ieee754_pow+0x6f0>)
 801bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8c:	f7e4 fa08 	bl	80001a0 <__adddf3>
 801bd90:	4622      	mov	r2, r4
 801bd92:	462b      	mov	r3, r5
 801bd94:	f7e4 fbba 	bl	800050c <__aeabi_dmul>
 801bd98:	a36f      	add	r3, pc, #444	; (adr r3, 801bf58 <__ieee754_pow+0x6f8>)
 801bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd9e:	f7e4 f9ff 	bl	80001a0 <__adddf3>
 801bda2:	4622      	mov	r2, r4
 801bda4:	4606      	mov	r6, r0
 801bda6:	460f      	mov	r7, r1
 801bda8:	462b      	mov	r3, r5
 801bdaa:	4620      	mov	r0, r4
 801bdac:	4629      	mov	r1, r5
 801bdae:	f7e4 fbad 	bl	800050c <__aeabi_dmul>
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	4630      	mov	r0, r6
 801bdb8:	4639      	mov	r1, r7
 801bdba:	f7e4 fba7 	bl	800050c <__aeabi_dmul>
 801bdbe:	4642      	mov	r2, r8
 801bdc0:	4604      	mov	r4, r0
 801bdc2:	460d      	mov	r5, r1
 801bdc4:	464b      	mov	r3, r9
 801bdc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bdca:	f7e4 f9e9 	bl	80001a0 <__adddf3>
 801bdce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bdd2:	f7e4 fb9b 	bl	800050c <__aeabi_dmul>
 801bdd6:	4622      	mov	r2, r4
 801bdd8:	462b      	mov	r3, r5
 801bdda:	f7e4 f9e1 	bl	80001a0 <__adddf3>
 801bdde:	4642      	mov	r2, r8
 801bde0:	4606      	mov	r6, r0
 801bde2:	460f      	mov	r7, r1
 801bde4:	464b      	mov	r3, r9
 801bde6:	4640      	mov	r0, r8
 801bde8:	4649      	mov	r1, r9
 801bdea:	f7e4 fb8f 	bl	800050c <__aeabi_dmul>
 801bdee:	2200      	movs	r2, #0
 801bdf0:	4b68      	ldr	r3, [pc, #416]	; (801bf94 <__ieee754_pow+0x734>)
 801bdf2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bdf6:	f7e4 f9d3 	bl	80001a0 <__adddf3>
 801bdfa:	4632      	mov	r2, r6
 801bdfc:	463b      	mov	r3, r7
 801bdfe:	f7e4 f9cf 	bl	80001a0 <__adddf3>
 801be02:	9802      	ldr	r0, [sp, #8]
 801be04:	460d      	mov	r5, r1
 801be06:	4604      	mov	r4, r0
 801be08:	4602      	mov	r2, r0
 801be0a:	460b      	mov	r3, r1
 801be0c:	4640      	mov	r0, r8
 801be0e:	4649      	mov	r1, r9
 801be10:	f7e4 fb7c 	bl	800050c <__aeabi_dmul>
 801be14:	2200      	movs	r2, #0
 801be16:	4680      	mov	r8, r0
 801be18:	4689      	mov	r9, r1
 801be1a:	4b5e      	ldr	r3, [pc, #376]	; (801bf94 <__ieee754_pow+0x734>)
 801be1c:	4620      	mov	r0, r4
 801be1e:	4629      	mov	r1, r5
 801be20:	f7e4 f9bc 	bl	800019c <__aeabi_dsub>
 801be24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be28:	f7e4 f9b8 	bl	800019c <__aeabi_dsub>
 801be2c:	4602      	mov	r2, r0
 801be2e:	460b      	mov	r3, r1
 801be30:	4630      	mov	r0, r6
 801be32:	4639      	mov	r1, r7
 801be34:	f7e4 f9b2 	bl	800019c <__aeabi_dsub>
 801be38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be3c:	f7e4 fb66 	bl	800050c <__aeabi_dmul>
 801be40:	4622      	mov	r2, r4
 801be42:	4606      	mov	r6, r0
 801be44:	460f      	mov	r7, r1
 801be46:	462b      	mov	r3, r5
 801be48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801be4c:	f7e4 fb5e 	bl	800050c <__aeabi_dmul>
 801be50:	4602      	mov	r2, r0
 801be52:	460b      	mov	r3, r1
 801be54:	4630      	mov	r0, r6
 801be56:	4639      	mov	r1, r7
 801be58:	f7e4 f9a2 	bl	80001a0 <__adddf3>
 801be5c:	4606      	mov	r6, r0
 801be5e:	460f      	mov	r7, r1
 801be60:	4602      	mov	r2, r0
 801be62:	460b      	mov	r3, r1
 801be64:	4640      	mov	r0, r8
 801be66:	4649      	mov	r1, r9
 801be68:	f7e4 f99a 	bl	80001a0 <__adddf3>
 801be6c:	9802      	ldr	r0, [sp, #8]
 801be6e:	a33c      	add	r3, pc, #240	; (adr r3, 801bf60 <__ieee754_pow+0x700>)
 801be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be74:	4604      	mov	r4, r0
 801be76:	460d      	mov	r5, r1
 801be78:	f7e4 fb48 	bl	800050c <__aeabi_dmul>
 801be7c:	4642      	mov	r2, r8
 801be7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801be82:	464b      	mov	r3, r9
 801be84:	4620      	mov	r0, r4
 801be86:	4629      	mov	r1, r5
 801be88:	f7e4 f988 	bl	800019c <__aeabi_dsub>
 801be8c:	4602      	mov	r2, r0
 801be8e:	460b      	mov	r3, r1
 801be90:	4630      	mov	r0, r6
 801be92:	4639      	mov	r1, r7
 801be94:	f7e4 f982 	bl	800019c <__aeabi_dsub>
 801be98:	a333      	add	r3, pc, #204	; (adr r3, 801bf68 <__ieee754_pow+0x708>)
 801be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be9e:	f7e4 fb35 	bl	800050c <__aeabi_dmul>
 801bea2:	a333      	add	r3, pc, #204	; (adr r3, 801bf70 <__ieee754_pow+0x710>)
 801bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bea8:	4606      	mov	r6, r0
 801beaa:	460f      	mov	r7, r1
 801beac:	4620      	mov	r0, r4
 801beae:	4629      	mov	r1, r5
 801beb0:	f7e4 fb2c 	bl	800050c <__aeabi_dmul>
 801beb4:	4602      	mov	r2, r0
 801beb6:	460b      	mov	r3, r1
 801beb8:	4630      	mov	r0, r6
 801beba:	4639      	mov	r1, r7
 801bebc:	f7e4 f970 	bl	80001a0 <__adddf3>
 801bec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bec2:	4b35      	ldr	r3, [pc, #212]	; (801bf98 <__ieee754_pow+0x738>)
 801bec4:	4413      	add	r3, r2
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f7e4 f969 	bl	80001a0 <__adddf3>
 801bece:	4604      	mov	r4, r0
 801bed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bed2:	460d      	mov	r5, r1
 801bed4:	f7e4 fab0 	bl	8000438 <__aeabi_i2d>
 801bed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801beda:	4b30      	ldr	r3, [pc, #192]	; (801bf9c <__ieee754_pow+0x73c>)
 801bedc:	4413      	add	r3, r2
 801bede:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bee2:	4606      	mov	r6, r0
 801bee4:	460f      	mov	r7, r1
 801bee6:	4622      	mov	r2, r4
 801bee8:	462b      	mov	r3, r5
 801beea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801beee:	f7e4 f957 	bl	80001a0 <__adddf3>
 801bef2:	4642      	mov	r2, r8
 801bef4:	464b      	mov	r3, r9
 801bef6:	f7e4 f953 	bl	80001a0 <__adddf3>
 801befa:	4632      	mov	r2, r6
 801befc:	463b      	mov	r3, r7
 801befe:	f7e4 f94f 	bl	80001a0 <__adddf3>
 801bf02:	9802      	ldr	r0, [sp, #8]
 801bf04:	4632      	mov	r2, r6
 801bf06:	463b      	mov	r3, r7
 801bf08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bf0c:	f7e4 f946 	bl	800019c <__aeabi_dsub>
 801bf10:	4642      	mov	r2, r8
 801bf12:	464b      	mov	r3, r9
 801bf14:	f7e4 f942 	bl	800019c <__aeabi_dsub>
 801bf18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bf1c:	e607      	b.n	801bb2e <__ieee754_pow+0x2ce>
 801bf1e:	f04f 0a01 	mov.w	sl, #1
 801bf22:	e6a5      	b.n	801bc70 <__ieee754_pow+0x410>
 801bf24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bf78 <__ieee754_pow+0x718>
 801bf28:	e613      	b.n	801bb52 <__ieee754_pow+0x2f2>
 801bf2a:	bf00      	nop
 801bf2c:	f3af 8000 	nop.w
 801bf30:	4a454eef 	.word	0x4a454eef
 801bf34:	3fca7e28 	.word	0x3fca7e28
 801bf38:	93c9db65 	.word	0x93c9db65
 801bf3c:	3fcd864a 	.word	0x3fcd864a
 801bf40:	a91d4101 	.word	0xa91d4101
 801bf44:	3fd17460 	.word	0x3fd17460
 801bf48:	518f264d 	.word	0x518f264d
 801bf4c:	3fd55555 	.word	0x3fd55555
 801bf50:	db6fabff 	.word	0xdb6fabff
 801bf54:	3fdb6db6 	.word	0x3fdb6db6
 801bf58:	33333303 	.word	0x33333303
 801bf5c:	3fe33333 	.word	0x3fe33333
 801bf60:	e0000000 	.word	0xe0000000
 801bf64:	3feec709 	.word	0x3feec709
 801bf68:	dc3a03fd 	.word	0xdc3a03fd
 801bf6c:	3feec709 	.word	0x3feec709
 801bf70:	145b01f5 	.word	0x145b01f5
 801bf74:	be3e2fe0 	.word	0xbe3e2fe0
 801bf78:	00000000 	.word	0x00000000
 801bf7c:	3ff00000 	.word	0x3ff00000
 801bf80:	43400000 	.word	0x43400000
 801bf84:	0003988e 	.word	0x0003988e
 801bf88:	000bb679 	.word	0x000bb679
 801bf8c:	0801d8c8 	.word	0x0801d8c8
 801bf90:	3ff00000 	.word	0x3ff00000
 801bf94:	40080000 	.word	0x40080000
 801bf98:	0801d8e8 	.word	0x0801d8e8
 801bf9c:	0801d8d8 	.word	0x0801d8d8
 801bfa0:	a3b4      	add	r3, pc, #720	; (adr r3, 801c274 <__ieee754_pow+0xa14>)
 801bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfa6:	4640      	mov	r0, r8
 801bfa8:	4649      	mov	r1, r9
 801bfaa:	f7e4 f8f9 	bl	80001a0 <__adddf3>
 801bfae:	4622      	mov	r2, r4
 801bfb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bfb4:	462b      	mov	r3, r5
 801bfb6:	4630      	mov	r0, r6
 801bfb8:	4639      	mov	r1, r7
 801bfba:	f7e4 f8ef 	bl	800019c <__aeabi_dsub>
 801bfbe:	4602      	mov	r2, r0
 801bfc0:	460b      	mov	r3, r1
 801bfc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bfc6:	f7e4 fd31 	bl	8000a2c <__aeabi_dcmpgt>
 801bfca:	2800      	cmp	r0, #0
 801bfcc:	f47f adfe 	bne.w	801bbcc <__ieee754_pow+0x36c>
 801bfd0:	4aa3      	ldr	r2, [pc, #652]	; (801c260 <__ieee754_pow+0xa00>)
 801bfd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bfd6:	4293      	cmp	r3, r2
 801bfd8:	f340 810a 	ble.w	801c1f0 <__ieee754_pow+0x990>
 801bfdc:	151b      	asrs	r3, r3, #20
 801bfde:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bfe2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bfe6:	fa4a f303 	asr.w	r3, sl, r3
 801bfea:	445b      	add	r3, fp
 801bfec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801bff0:	4e9c      	ldr	r6, [pc, #624]	; (801c264 <__ieee754_pow+0xa04>)
 801bff2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801bff6:	4116      	asrs	r6, r2
 801bff8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801bffc:	2000      	movs	r0, #0
 801bffe:	ea23 0106 	bic.w	r1, r3, r6
 801c002:	f1c2 0214 	rsb	r2, r2, #20
 801c006:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c00a:	fa4a fa02 	asr.w	sl, sl, r2
 801c00e:	f1bb 0f00 	cmp.w	fp, #0
 801c012:	4602      	mov	r2, r0
 801c014:	460b      	mov	r3, r1
 801c016:	4620      	mov	r0, r4
 801c018:	4629      	mov	r1, r5
 801c01a:	bfb8      	it	lt
 801c01c:	f1ca 0a00 	rsblt	sl, sl, #0
 801c020:	f7e4 f8bc 	bl	800019c <__aeabi_dsub>
 801c024:	e9cd 0100 	strd	r0, r1, [sp]
 801c028:	4642      	mov	r2, r8
 801c02a:	464b      	mov	r3, r9
 801c02c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c030:	f7e4 f8b6 	bl	80001a0 <__adddf3>
 801c034:	2000      	movs	r0, #0
 801c036:	a378      	add	r3, pc, #480	; (adr r3, 801c218 <__ieee754_pow+0x9b8>)
 801c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c03c:	4604      	mov	r4, r0
 801c03e:	460d      	mov	r5, r1
 801c040:	f7e4 fa64 	bl	800050c <__aeabi_dmul>
 801c044:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c048:	4606      	mov	r6, r0
 801c04a:	460f      	mov	r7, r1
 801c04c:	4620      	mov	r0, r4
 801c04e:	4629      	mov	r1, r5
 801c050:	f7e4 f8a4 	bl	800019c <__aeabi_dsub>
 801c054:	4602      	mov	r2, r0
 801c056:	460b      	mov	r3, r1
 801c058:	4640      	mov	r0, r8
 801c05a:	4649      	mov	r1, r9
 801c05c:	f7e4 f89e 	bl	800019c <__aeabi_dsub>
 801c060:	a36f      	add	r3, pc, #444	; (adr r3, 801c220 <__ieee754_pow+0x9c0>)
 801c062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c066:	f7e4 fa51 	bl	800050c <__aeabi_dmul>
 801c06a:	a36f      	add	r3, pc, #444	; (adr r3, 801c228 <__ieee754_pow+0x9c8>)
 801c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c070:	4680      	mov	r8, r0
 801c072:	4689      	mov	r9, r1
 801c074:	4620      	mov	r0, r4
 801c076:	4629      	mov	r1, r5
 801c078:	f7e4 fa48 	bl	800050c <__aeabi_dmul>
 801c07c:	4602      	mov	r2, r0
 801c07e:	460b      	mov	r3, r1
 801c080:	4640      	mov	r0, r8
 801c082:	4649      	mov	r1, r9
 801c084:	f7e4 f88c 	bl	80001a0 <__adddf3>
 801c088:	4604      	mov	r4, r0
 801c08a:	460d      	mov	r5, r1
 801c08c:	4602      	mov	r2, r0
 801c08e:	460b      	mov	r3, r1
 801c090:	4630      	mov	r0, r6
 801c092:	4639      	mov	r1, r7
 801c094:	f7e4 f884 	bl	80001a0 <__adddf3>
 801c098:	4632      	mov	r2, r6
 801c09a:	463b      	mov	r3, r7
 801c09c:	4680      	mov	r8, r0
 801c09e:	4689      	mov	r9, r1
 801c0a0:	f7e4 f87c 	bl	800019c <__aeabi_dsub>
 801c0a4:	4602      	mov	r2, r0
 801c0a6:	460b      	mov	r3, r1
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	4629      	mov	r1, r5
 801c0ac:	f7e4 f876 	bl	800019c <__aeabi_dsub>
 801c0b0:	4642      	mov	r2, r8
 801c0b2:	4606      	mov	r6, r0
 801c0b4:	460f      	mov	r7, r1
 801c0b6:	464b      	mov	r3, r9
 801c0b8:	4640      	mov	r0, r8
 801c0ba:	4649      	mov	r1, r9
 801c0bc:	f7e4 fa26 	bl	800050c <__aeabi_dmul>
 801c0c0:	a35b      	add	r3, pc, #364	; (adr r3, 801c230 <__ieee754_pow+0x9d0>)
 801c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0c6:	4604      	mov	r4, r0
 801c0c8:	460d      	mov	r5, r1
 801c0ca:	f7e4 fa1f 	bl	800050c <__aeabi_dmul>
 801c0ce:	a35a      	add	r3, pc, #360	; (adr r3, 801c238 <__ieee754_pow+0x9d8>)
 801c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d4:	f7e4 f862 	bl	800019c <__aeabi_dsub>
 801c0d8:	4622      	mov	r2, r4
 801c0da:	462b      	mov	r3, r5
 801c0dc:	f7e4 fa16 	bl	800050c <__aeabi_dmul>
 801c0e0:	a357      	add	r3, pc, #348	; (adr r3, 801c240 <__ieee754_pow+0x9e0>)
 801c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e6:	f7e4 f85b 	bl	80001a0 <__adddf3>
 801c0ea:	4622      	mov	r2, r4
 801c0ec:	462b      	mov	r3, r5
 801c0ee:	f7e4 fa0d 	bl	800050c <__aeabi_dmul>
 801c0f2:	a355      	add	r3, pc, #340	; (adr r3, 801c248 <__ieee754_pow+0x9e8>)
 801c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f8:	f7e4 f850 	bl	800019c <__aeabi_dsub>
 801c0fc:	4622      	mov	r2, r4
 801c0fe:	462b      	mov	r3, r5
 801c100:	f7e4 fa04 	bl	800050c <__aeabi_dmul>
 801c104:	a352      	add	r3, pc, #328	; (adr r3, 801c250 <__ieee754_pow+0x9f0>)
 801c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c10a:	f7e4 f849 	bl	80001a0 <__adddf3>
 801c10e:	4622      	mov	r2, r4
 801c110:	462b      	mov	r3, r5
 801c112:	f7e4 f9fb 	bl	800050c <__aeabi_dmul>
 801c116:	4602      	mov	r2, r0
 801c118:	460b      	mov	r3, r1
 801c11a:	4640      	mov	r0, r8
 801c11c:	4649      	mov	r1, r9
 801c11e:	f7e4 f83d 	bl	800019c <__aeabi_dsub>
 801c122:	4604      	mov	r4, r0
 801c124:	460d      	mov	r5, r1
 801c126:	4602      	mov	r2, r0
 801c128:	460b      	mov	r3, r1
 801c12a:	4640      	mov	r0, r8
 801c12c:	4649      	mov	r1, r9
 801c12e:	f7e4 f9ed 	bl	800050c <__aeabi_dmul>
 801c132:	2200      	movs	r2, #0
 801c134:	e9cd 0100 	strd	r0, r1, [sp]
 801c138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c13c:	4620      	mov	r0, r4
 801c13e:	4629      	mov	r1, r5
 801c140:	f7e4 f82c 	bl	800019c <__aeabi_dsub>
 801c144:	4602      	mov	r2, r0
 801c146:	460b      	mov	r3, r1
 801c148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c14c:	f7e4 fb08 	bl	8000760 <__aeabi_ddiv>
 801c150:	4632      	mov	r2, r6
 801c152:	4604      	mov	r4, r0
 801c154:	460d      	mov	r5, r1
 801c156:	463b      	mov	r3, r7
 801c158:	4640      	mov	r0, r8
 801c15a:	4649      	mov	r1, r9
 801c15c:	f7e4 f9d6 	bl	800050c <__aeabi_dmul>
 801c160:	4632      	mov	r2, r6
 801c162:	463b      	mov	r3, r7
 801c164:	f7e4 f81c 	bl	80001a0 <__adddf3>
 801c168:	4602      	mov	r2, r0
 801c16a:	460b      	mov	r3, r1
 801c16c:	4620      	mov	r0, r4
 801c16e:	4629      	mov	r1, r5
 801c170:	f7e4 f814 	bl	800019c <__aeabi_dsub>
 801c174:	4642      	mov	r2, r8
 801c176:	464b      	mov	r3, r9
 801c178:	f7e4 f810 	bl	800019c <__aeabi_dsub>
 801c17c:	4602      	mov	r2, r0
 801c17e:	460b      	mov	r3, r1
 801c180:	2000      	movs	r0, #0
 801c182:	4939      	ldr	r1, [pc, #228]	; (801c268 <__ieee754_pow+0xa08>)
 801c184:	f7e4 f80a 	bl	800019c <__aeabi_dsub>
 801c188:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801c18c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c190:	4602      	mov	r2, r0
 801c192:	460b      	mov	r3, r1
 801c194:	da2f      	bge.n	801c1f6 <__ieee754_pow+0x996>
 801c196:	4650      	mov	r0, sl
 801c198:	ec43 2b10 	vmov	d0, r2, r3
 801c19c:	f000 f9c0 	bl	801c520 <scalbn>
 801c1a0:	ec51 0b10 	vmov	r0, r1, d0
 801c1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c1a8:	f7ff bbf1 	b.w	801b98e <__ieee754_pow+0x12e>
 801c1ac:	4b2f      	ldr	r3, [pc, #188]	; (801c26c <__ieee754_pow+0xa0c>)
 801c1ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c1b2:	429e      	cmp	r6, r3
 801c1b4:	f77f af0c 	ble.w	801bfd0 <__ieee754_pow+0x770>
 801c1b8:	4b2d      	ldr	r3, [pc, #180]	; (801c270 <__ieee754_pow+0xa10>)
 801c1ba:	440b      	add	r3, r1
 801c1bc:	4303      	orrs	r3, r0
 801c1be:	d00b      	beq.n	801c1d8 <__ieee754_pow+0x978>
 801c1c0:	a325      	add	r3, pc, #148	; (adr r3, 801c258 <__ieee754_pow+0x9f8>)
 801c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1ca:	f7e4 f99f 	bl	800050c <__aeabi_dmul>
 801c1ce:	a322      	add	r3, pc, #136	; (adr r3, 801c258 <__ieee754_pow+0x9f8>)
 801c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1d4:	f7ff bbdb 	b.w	801b98e <__ieee754_pow+0x12e>
 801c1d8:	4622      	mov	r2, r4
 801c1da:	462b      	mov	r3, r5
 801c1dc:	f7e3 ffde 	bl	800019c <__aeabi_dsub>
 801c1e0:	4642      	mov	r2, r8
 801c1e2:	464b      	mov	r3, r9
 801c1e4:	f7e4 fc18 	bl	8000a18 <__aeabi_dcmpge>
 801c1e8:	2800      	cmp	r0, #0
 801c1ea:	f43f aef1 	beq.w	801bfd0 <__ieee754_pow+0x770>
 801c1ee:	e7e7      	b.n	801c1c0 <__ieee754_pow+0x960>
 801c1f0:	f04f 0a00 	mov.w	sl, #0
 801c1f4:	e718      	b.n	801c028 <__ieee754_pow+0x7c8>
 801c1f6:	4621      	mov	r1, r4
 801c1f8:	e7d4      	b.n	801c1a4 <__ieee754_pow+0x944>
 801c1fa:	2000      	movs	r0, #0
 801c1fc:	491a      	ldr	r1, [pc, #104]	; (801c268 <__ieee754_pow+0xa08>)
 801c1fe:	f7ff bb8f 	b.w	801b920 <__ieee754_pow+0xc0>
 801c202:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c206:	f7ff bb8b 	b.w	801b920 <__ieee754_pow+0xc0>
 801c20a:	4630      	mov	r0, r6
 801c20c:	4639      	mov	r1, r7
 801c20e:	f7ff bb87 	b.w	801b920 <__ieee754_pow+0xc0>
 801c212:	4693      	mov	fp, r2
 801c214:	f7ff bb98 	b.w	801b948 <__ieee754_pow+0xe8>
 801c218:	00000000 	.word	0x00000000
 801c21c:	3fe62e43 	.word	0x3fe62e43
 801c220:	fefa39ef 	.word	0xfefa39ef
 801c224:	3fe62e42 	.word	0x3fe62e42
 801c228:	0ca86c39 	.word	0x0ca86c39
 801c22c:	be205c61 	.word	0xbe205c61
 801c230:	72bea4d0 	.word	0x72bea4d0
 801c234:	3e663769 	.word	0x3e663769
 801c238:	c5d26bf1 	.word	0xc5d26bf1
 801c23c:	3ebbbd41 	.word	0x3ebbbd41
 801c240:	af25de2c 	.word	0xaf25de2c
 801c244:	3f11566a 	.word	0x3f11566a
 801c248:	16bebd93 	.word	0x16bebd93
 801c24c:	3f66c16c 	.word	0x3f66c16c
 801c250:	5555553e 	.word	0x5555553e
 801c254:	3fc55555 	.word	0x3fc55555
 801c258:	c2f8f359 	.word	0xc2f8f359
 801c25c:	01a56e1f 	.word	0x01a56e1f
 801c260:	3fe00000 	.word	0x3fe00000
 801c264:	000fffff 	.word	0x000fffff
 801c268:	3ff00000 	.word	0x3ff00000
 801c26c:	4090cbff 	.word	0x4090cbff
 801c270:	3f6f3400 	.word	0x3f6f3400
 801c274:	652b82fe 	.word	0x652b82fe
 801c278:	3c971547 	.word	0x3c971547

0801c27c <__ieee754_sqrt>:
 801c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c280:	4955      	ldr	r1, [pc, #340]	; (801c3d8 <__ieee754_sqrt+0x15c>)
 801c282:	ec55 4b10 	vmov	r4, r5, d0
 801c286:	43a9      	bics	r1, r5
 801c288:	462b      	mov	r3, r5
 801c28a:	462a      	mov	r2, r5
 801c28c:	d112      	bne.n	801c2b4 <__ieee754_sqrt+0x38>
 801c28e:	ee10 2a10 	vmov	r2, s0
 801c292:	ee10 0a10 	vmov	r0, s0
 801c296:	4629      	mov	r1, r5
 801c298:	f7e4 f938 	bl	800050c <__aeabi_dmul>
 801c29c:	4602      	mov	r2, r0
 801c29e:	460b      	mov	r3, r1
 801c2a0:	4620      	mov	r0, r4
 801c2a2:	4629      	mov	r1, r5
 801c2a4:	f7e3 ff7c 	bl	80001a0 <__adddf3>
 801c2a8:	4604      	mov	r4, r0
 801c2aa:	460d      	mov	r5, r1
 801c2ac:	ec45 4b10 	vmov	d0, r4, r5
 801c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2b4:	2d00      	cmp	r5, #0
 801c2b6:	ee10 0a10 	vmov	r0, s0
 801c2ba:	4621      	mov	r1, r4
 801c2bc:	dc0f      	bgt.n	801c2de <__ieee754_sqrt+0x62>
 801c2be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c2c2:	4330      	orrs	r0, r6
 801c2c4:	d0f2      	beq.n	801c2ac <__ieee754_sqrt+0x30>
 801c2c6:	b155      	cbz	r5, 801c2de <__ieee754_sqrt+0x62>
 801c2c8:	ee10 2a10 	vmov	r2, s0
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	4629      	mov	r1, r5
 801c2d0:	f7e3 ff64 	bl	800019c <__aeabi_dsub>
 801c2d4:	4602      	mov	r2, r0
 801c2d6:	460b      	mov	r3, r1
 801c2d8:	f7e4 fa42 	bl	8000760 <__aeabi_ddiv>
 801c2dc:	e7e4      	b.n	801c2a8 <__ieee754_sqrt+0x2c>
 801c2de:	151b      	asrs	r3, r3, #20
 801c2e0:	d073      	beq.n	801c3ca <__ieee754_sqrt+0x14e>
 801c2e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c2e6:	07dd      	lsls	r5, r3, #31
 801c2e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c2ec:	bf48      	it	mi
 801c2ee:	0fc8      	lsrmi	r0, r1, #31
 801c2f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c2f4:	bf44      	itt	mi
 801c2f6:	0049      	lslmi	r1, r1, #1
 801c2f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c2fc:	2500      	movs	r5, #0
 801c2fe:	1058      	asrs	r0, r3, #1
 801c300:	0fcb      	lsrs	r3, r1, #31
 801c302:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c306:	0049      	lsls	r1, r1, #1
 801c308:	2316      	movs	r3, #22
 801c30a:	462c      	mov	r4, r5
 801c30c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c310:	19a7      	adds	r7, r4, r6
 801c312:	4297      	cmp	r7, r2
 801c314:	bfde      	ittt	le
 801c316:	19bc      	addle	r4, r7, r6
 801c318:	1bd2      	suble	r2, r2, r7
 801c31a:	19ad      	addle	r5, r5, r6
 801c31c:	0fcf      	lsrs	r7, r1, #31
 801c31e:	3b01      	subs	r3, #1
 801c320:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c324:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c328:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c32c:	d1f0      	bne.n	801c310 <__ieee754_sqrt+0x94>
 801c32e:	f04f 0c20 	mov.w	ip, #32
 801c332:	469e      	mov	lr, r3
 801c334:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c338:	42a2      	cmp	r2, r4
 801c33a:	eb06 070e 	add.w	r7, r6, lr
 801c33e:	dc02      	bgt.n	801c346 <__ieee754_sqrt+0xca>
 801c340:	d112      	bne.n	801c368 <__ieee754_sqrt+0xec>
 801c342:	428f      	cmp	r7, r1
 801c344:	d810      	bhi.n	801c368 <__ieee754_sqrt+0xec>
 801c346:	2f00      	cmp	r7, #0
 801c348:	eb07 0e06 	add.w	lr, r7, r6
 801c34c:	da42      	bge.n	801c3d4 <__ieee754_sqrt+0x158>
 801c34e:	f1be 0f00 	cmp.w	lr, #0
 801c352:	db3f      	blt.n	801c3d4 <__ieee754_sqrt+0x158>
 801c354:	f104 0801 	add.w	r8, r4, #1
 801c358:	1b12      	subs	r2, r2, r4
 801c35a:	428f      	cmp	r7, r1
 801c35c:	bf88      	it	hi
 801c35e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c362:	1bc9      	subs	r1, r1, r7
 801c364:	4433      	add	r3, r6
 801c366:	4644      	mov	r4, r8
 801c368:	0052      	lsls	r2, r2, #1
 801c36a:	f1bc 0c01 	subs.w	ip, ip, #1
 801c36e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c372:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c376:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c37a:	d1dd      	bne.n	801c338 <__ieee754_sqrt+0xbc>
 801c37c:	430a      	orrs	r2, r1
 801c37e:	d006      	beq.n	801c38e <__ieee754_sqrt+0x112>
 801c380:	1c5c      	adds	r4, r3, #1
 801c382:	bf13      	iteet	ne
 801c384:	3301      	addne	r3, #1
 801c386:	3501      	addeq	r5, #1
 801c388:	4663      	moveq	r3, ip
 801c38a:	f023 0301 	bicne.w	r3, r3, #1
 801c38e:	106a      	asrs	r2, r5, #1
 801c390:	085b      	lsrs	r3, r3, #1
 801c392:	07e9      	lsls	r1, r5, #31
 801c394:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c398:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c39c:	bf48      	it	mi
 801c39e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c3a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c3a6:	461c      	mov	r4, r3
 801c3a8:	e780      	b.n	801c2ac <__ieee754_sqrt+0x30>
 801c3aa:	0aca      	lsrs	r2, r1, #11
 801c3ac:	3815      	subs	r0, #21
 801c3ae:	0549      	lsls	r1, r1, #21
 801c3b0:	2a00      	cmp	r2, #0
 801c3b2:	d0fa      	beq.n	801c3aa <__ieee754_sqrt+0x12e>
 801c3b4:	02d6      	lsls	r6, r2, #11
 801c3b6:	d50a      	bpl.n	801c3ce <__ieee754_sqrt+0x152>
 801c3b8:	f1c3 0420 	rsb	r4, r3, #32
 801c3bc:	fa21 f404 	lsr.w	r4, r1, r4
 801c3c0:	1e5d      	subs	r5, r3, #1
 801c3c2:	4099      	lsls	r1, r3
 801c3c4:	4322      	orrs	r2, r4
 801c3c6:	1b43      	subs	r3, r0, r5
 801c3c8:	e78b      	b.n	801c2e2 <__ieee754_sqrt+0x66>
 801c3ca:	4618      	mov	r0, r3
 801c3cc:	e7f0      	b.n	801c3b0 <__ieee754_sqrt+0x134>
 801c3ce:	0052      	lsls	r2, r2, #1
 801c3d0:	3301      	adds	r3, #1
 801c3d2:	e7ef      	b.n	801c3b4 <__ieee754_sqrt+0x138>
 801c3d4:	46a0      	mov	r8, r4
 801c3d6:	e7bf      	b.n	801c358 <__ieee754_sqrt+0xdc>
 801c3d8:	7ff00000 	.word	0x7ff00000

0801c3dc <__ieee754_sqrtf>:
 801c3dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c3e0:	4770      	bx	lr

0801c3e2 <fabs>:
 801c3e2:	ec51 0b10 	vmov	r0, r1, d0
 801c3e6:	ee10 2a10 	vmov	r2, s0
 801c3ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c3ee:	ec43 2b10 	vmov	d0, r2, r3
 801c3f2:	4770      	bx	lr

0801c3f4 <finite>:
 801c3f4:	ee10 3a90 	vmov	r3, s1
 801c3f8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801c3fc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c400:	0fc0      	lsrs	r0, r0, #31
 801c402:	4770      	bx	lr

0801c404 <matherr>:
 801c404:	2000      	movs	r0, #0
 801c406:	4770      	bx	lr

0801c408 <nan>:
 801c408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c410 <nan+0x8>
 801c40c:	4770      	bx	lr
 801c40e:	bf00      	nop
 801c410:	00000000 	.word	0x00000000
 801c414:	7ff80000 	.word	0x7ff80000

0801c418 <rint>:
 801c418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c41a:	ec51 0b10 	vmov	r0, r1, d0
 801c41e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c422:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c426:	2e13      	cmp	r6, #19
 801c428:	460b      	mov	r3, r1
 801c42a:	ee10 4a10 	vmov	r4, s0
 801c42e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c432:	dc56      	bgt.n	801c4e2 <rint+0xca>
 801c434:	2e00      	cmp	r6, #0
 801c436:	da2b      	bge.n	801c490 <rint+0x78>
 801c438:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c43c:	4302      	orrs	r2, r0
 801c43e:	d023      	beq.n	801c488 <rint+0x70>
 801c440:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c444:	4302      	orrs	r2, r0
 801c446:	4254      	negs	r4, r2
 801c448:	4314      	orrs	r4, r2
 801c44a:	0c4b      	lsrs	r3, r1, #17
 801c44c:	0b24      	lsrs	r4, r4, #12
 801c44e:	045b      	lsls	r3, r3, #17
 801c450:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c454:	ea44 0103 	orr.w	r1, r4, r3
 801c458:	460b      	mov	r3, r1
 801c45a:	492f      	ldr	r1, [pc, #188]	; (801c518 <rint+0x100>)
 801c45c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801c460:	e9d1 6700 	ldrd	r6, r7, [r1]
 801c464:	4602      	mov	r2, r0
 801c466:	4639      	mov	r1, r7
 801c468:	4630      	mov	r0, r6
 801c46a:	f7e3 fe99 	bl	80001a0 <__adddf3>
 801c46e:	e9cd 0100 	strd	r0, r1, [sp]
 801c472:	463b      	mov	r3, r7
 801c474:	4632      	mov	r2, r6
 801c476:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c47a:	f7e3 fe8f 	bl	800019c <__aeabi_dsub>
 801c47e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c482:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c486:	4639      	mov	r1, r7
 801c488:	ec41 0b10 	vmov	d0, r0, r1
 801c48c:	b003      	add	sp, #12
 801c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c490:	4a22      	ldr	r2, [pc, #136]	; (801c51c <rint+0x104>)
 801c492:	4132      	asrs	r2, r6
 801c494:	ea01 0702 	and.w	r7, r1, r2
 801c498:	4307      	orrs	r7, r0
 801c49a:	d0f5      	beq.n	801c488 <rint+0x70>
 801c49c:	0852      	lsrs	r2, r2, #1
 801c49e:	4011      	ands	r1, r2
 801c4a0:	430c      	orrs	r4, r1
 801c4a2:	d00b      	beq.n	801c4bc <rint+0xa4>
 801c4a4:	ea23 0202 	bic.w	r2, r3, r2
 801c4a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c4ac:	2e13      	cmp	r6, #19
 801c4ae:	fa43 f306 	asr.w	r3, r3, r6
 801c4b2:	bf0c      	ite	eq
 801c4b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c4b8:	2400      	movne	r4, #0
 801c4ba:	4313      	orrs	r3, r2
 801c4bc:	4916      	ldr	r1, [pc, #88]	; (801c518 <rint+0x100>)
 801c4be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c4c2:	4622      	mov	r2, r4
 801c4c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	4629      	mov	r1, r5
 801c4cc:	f7e3 fe68 	bl	80001a0 <__adddf3>
 801c4d0:	e9cd 0100 	strd	r0, r1, [sp]
 801c4d4:	4622      	mov	r2, r4
 801c4d6:	462b      	mov	r3, r5
 801c4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c4dc:	f7e3 fe5e 	bl	800019c <__aeabi_dsub>
 801c4e0:	e7d2      	b.n	801c488 <rint+0x70>
 801c4e2:	2e33      	cmp	r6, #51	; 0x33
 801c4e4:	dd07      	ble.n	801c4f6 <rint+0xde>
 801c4e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c4ea:	d1cd      	bne.n	801c488 <rint+0x70>
 801c4ec:	ee10 2a10 	vmov	r2, s0
 801c4f0:	f7e3 fe56 	bl	80001a0 <__adddf3>
 801c4f4:	e7c8      	b.n	801c488 <rint+0x70>
 801c4f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801c4fa:	f04f 32ff 	mov.w	r2, #4294967295
 801c4fe:	40f2      	lsrs	r2, r6
 801c500:	4210      	tst	r0, r2
 801c502:	d0c1      	beq.n	801c488 <rint+0x70>
 801c504:	0852      	lsrs	r2, r2, #1
 801c506:	4210      	tst	r0, r2
 801c508:	bf1f      	itttt	ne
 801c50a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c50e:	ea20 0202 	bicne.w	r2, r0, r2
 801c512:	4134      	asrne	r4, r6
 801c514:	4314      	orrne	r4, r2
 801c516:	e7d1      	b.n	801c4bc <rint+0xa4>
 801c518:	0801d8f8 	.word	0x0801d8f8
 801c51c:	000fffff 	.word	0x000fffff

0801c520 <scalbn>:
 801c520:	b570      	push	{r4, r5, r6, lr}
 801c522:	ec55 4b10 	vmov	r4, r5, d0
 801c526:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c52a:	4606      	mov	r6, r0
 801c52c:	462b      	mov	r3, r5
 801c52e:	b9aa      	cbnz	r2, 801c55c <scalbn+0x3c>
 801c530:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c534:	4323      	orrs	r3, r4
 801c536:	d03b      	beq.n	801c5b0 <scalbn+0x90>
 801c538:	4b31      	ldr	r3, [pc, #196]	; (801c600 <scalbn+0xe0>)
 801c53a:	4629      	mov	r1, r5
 801c53c:	2200      	movs	r2, #0
 801c53e:	ee10 0a10 	vmov	r0, s0
 801c542:	f7e3 ffe3 	bl	800050c <__aeabi_dmul>
 801c546:	4b2f      	ldr	r3, [pc, #188]	; (801c604 <scalbn+0xe4>)
 801c548:	429e      	cmp	r6, r3
 801c54a:	4604      	mov	r4, r0
 801c54c:	460d      	mov	r5, r1
 801c54e:	da12      	bge.n	801c576 <scalbn+0x56>
 801c550:	a327      	add	r3, pc, #156	; (adr r3, 801c5f0 <scalbn+0xd0>)
 801c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c556:	f7e3 ffd9 	bl	800050c <__aeabi_dmul>
 801c55a:	e009      	b.n	801c570 <scalbn+0x50>
 801c55c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c560:	428a      	cmp	r2, r1
 801c562:	d10c      	bne.n	801c57e <scalbn+0x5e>
 801c564:	ee10 2a10 	vmov	r2, s0
 801c568:	4620      	mov	r0, r4
 801c56a:	4629      	mov	r1, r5
 801c56c:	f7e3 fe18 	bl	80001a0 <__adddf3>
 801c570:	4604      	mov	r4, r0
 801c572:	460d      	mov	r5, r1
 801c574:	e01c      	b.n	801c5b0 <scalbn+0x90>
 801c576:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c57a:	460b      	mov	r3, r1
 801c57c:	3a36      	subs	r2, #54	; 0x36
 801c57e:	4432      	add	r2, r6
 801c580:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c584:	428a      	cmp	r2, r1
 801c586:	dd0b      	ble.n	801c5a0 <scalbn+0x80>
 801c588:	ec45 4b11 	vmov	d1, r4, r5
 801c58c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801c5f8 <scalbn+0xd8>
 801c590:	f000 f83c 	bl	801c60c <copysign>
 801c594:	a318      	add	r3, pc, #96	; (adr r3, 801c5f8 <scalbn+0xd8>)
 801c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c59a:	ec51 0b10 	vmov	r0, r1, d0
 801c59e:	e7da      	b.n	801c556 <scalbn+0x36>
 801c5a0:	2a00      	cmp	r2, #0
 801c5a2:	dd08      	ble.n	801c5b6 <scalbn+0x96>
 801c5a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c5a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c5ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c5b0:	ec45 4b10 	vmov	d0, r4, r5
 801c5b4:	bd70      	pop	{r4, r5, r6, pc}
 801c5b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c5ba:	da0d      	bge.n	801c5d8 <scalbn+0xb8>
 801c5bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c5c0:	429e      	cmp	r6, r3
 801c5c2:	ec45 4b11 	vmov	d1, r4, r5
 801c5c6:	dce1      	bgt.n	801c58c <scalbn+0x6c>
 801c5c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801c5f0 <scalbn+0xd0>
 801c5cc:	f000 f81e 	bl	801c60c <copysign>
 801c5d0:	a307      	add	r3, pc, #28	; (adr r3, 801c5f0 <scalbn+0xd0>)
 801c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5d6:	e7e0      	b.n	801c59a <scalbn+0x7a>
 801c5d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c5dc:	3236      	adds	r2, #54	; 0x36
 801c5de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c5e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	4629      	mov	r1, r5
 801c5ea:	2200      	movs	r2, #0
 801c5ec:	4b06      	ldr	r3, [pc, #24]	; (801c608 <scalbn+0xe8>)
 801c5ee:	e7b2      	b.n	801c556 <scalbn+0x36>
 801c5f0:	c2f8f359 	.word	0xc2f8f359
 801c5f4:	01a56e1f 	.word	0x01a56e1f
 801c5f8:	8800759c 	.word	0x8800759c
 801c5fc:	7e37e43c 	.word	0x7e37e43c
 801c600:	43500000 	.word	0x43500000
 801c604:	ffff3cb0 	.word	0xffff3cb0
 801c608:	3c900000 	.word	0x3c900000

0801c60c <copysign>:
 801c60c:	ec51 0b10 	vmov	r0, r1, d0
 801c610:	ee11 0a90 	vmov	r0, s3
 801c614:	ee10 2a10 	vmov	r2, s0
 801c618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801c61c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801c620:	ea41 0300 	orr.w	r3, r1, r0
 801c624:	ec43 2b10 	vmov	d0, r2, r3
 801c628:	4770      	bx	lr
	...

0801c62c <_init>:
 801c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c62e:	bf00      	nop
 801c630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c632:	bc08      	pop	{r3}
 801c634:	469e      	mov	lr, r3
 801c636:	4770      	bx	lr

0801c638 <_fini>:
 801c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c63a:	bf00      	nop
 801c63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c63e:	bc08      	pop	{r3}
 801c640:	469e      	mov	lr, r3
 801c642:	4770      	bx	lr
