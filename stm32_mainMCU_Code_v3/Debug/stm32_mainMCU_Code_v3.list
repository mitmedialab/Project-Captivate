
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000004  080054e8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000750  20000014  080054f8  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000764  080054f8  00020764  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       00000094  20030024  20030024  00030000  2**2
                  ALLOC
 12 MB_MEM2       00000020  200300b8  200300b8  00030000  2**2
                  ALLOC
 13 .debug_info   00037d1a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005d78  00000000  00000000  00057d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019b8a  00000000  00000000  0005dad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001f98  00000000  00000000  00077660  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002290  00000000  00000000  000795f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00015905  00000000  00000000  0007b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000e0c3  00000000  00000000  0009118d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0009f250  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005470  00000000  00000000  0009f2cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	080053e0 	.word	0x080053e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	080053e0 	.word	0x080053e0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295
 80001a8:	f000 b972 	b.w	8000490 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 f806 	bl	80001c4 <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__udivmoddi4>:
 80001c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c8:	9e08      	ldr	r6, [sp, #32]
 80001ca:	4604      	mov	r4, r0
 80001cc:	4688      	mov	r8, r1
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d14b      	bne.n	800026a <__udivmoddi4+0xa6>
 80001d2:	428a      	cmp	r2, r1
 80001d4:	4615      	mov	r5, r2
 80001d6:	d967      	bls.n	80002a8 <__udivmoddi4+0xe4>
 80001d8:	fab2 f282 	clz	r2, r2
 80001dc:	b14a      	cbz	r2, 80001f2 <__udivmoddi4+0x2e>
 80001de:	f1c2 0720 	rsb	r7, r2, #32
 80001e2:	fa01 f302 	lsl.w	r3, r1, r2
 80001e6:	fa20 f707 	lsr.w	r7, r0, r7
 80001ea:	4095      	lsls	r5, r2
 80001ec:	ea47 0803 	orr.w	r8, r7, r3
 80001f0:	4094      	lsls	r4, r2
 80001f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	fbb8 f7fe 	udiv	r7, r8, lr
 80001fc:	fa1f fc85 	uxth.w	ip, r5
 8000200:	fb0e 8817 	mls	r8, lr, r7, r8
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	fb07 f10c 	mul.w	r1, r7, ip
 800020c:	4299      	cmp	r1, r3
 800020e:	d909      	bls.n	8000224 <__udivmoddi4+0x60>
 8000210:	18eb      	adds	r3, r5, r3
 8000212:	f107 30ff 	add.w	r0, r7, #4294967295
 8000216:	f080 811b 	bcs.w	8000450 <__udivmoddi4+0x28c>
 800021a:	4299      	cmp	r1, r3
 800021c:	f240 8118 	bls.w	8000450 <__udivmoddi4+0x28c>
 8000220:	3f02      	subs	r7, #2
 8000222:	442b      	add	r3, r5
 8000224:	1a5b      	subs	r3, r3, r1
 8000226:	b2a4      	uxth	r4, r4
 8000228:	fbb3 f0fe 	udiv	r0, r3, lr
 800022c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000234:	fb00 fc0c 	mul.w	ip, r0, ip
 8000238:	45a4      	cmp	ip, r4
 800023a:	d909      	bls.n	8000250 <__udivmoddi4+0x8c>
 800023c:	192c      	adds	r4, r5, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8107 	bcs.w	8000454 <__udivmoddi4+0x290>
 8000246:	45a4      	cmp	ip, r4
 8000248:	f240 8104 	bls.w	8000454 <__udivmoddi4+0x290>
 800024c:	3802      	subs	r0, #2
 800024e:	442c      	add	r4, r5
 8000250:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000254:	eba4 040c 	sub.w	r4, r4, ip
 8000258:	2700      	movs	r7, #0
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa0>
 800025c:	40d4      	lsrs	r4, r2
 800025e:	2300      	movs	r3, #0
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	428b      	cmp	r3, r1
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0xbe>
 800026e:	2e00      	cmp	r6, #0
 8000270:	f000 80eb 	beq.w	800044a <__udivmoddi4+0x286>
 8000274:	2700      	movs	r7, #0
 8000276:	e9c6 0100 	strd	r0, r1, [r6]
 800027a:	4638      	mov	r0, r7
 800027c:	4639      	mov	r1, r7
 800027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000282:	fab3 f783 	clz	r7, r3
 8000286:	2f00      	cmp	r7, #0
 8000288:	d147      	bne.n	800031a <__udivmoddi4+0x156>
 800028a:	428b      	cmp	r3, r1
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd0>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fa 	bhi.w	8000488 <__udivmoddi4+0x2c4>
 8000294:	1a84      	subs	r4, r0, r2
 8000296:	eb61 0303 	sbc.w	r3, r1, r3
 800029a:	2001      	movs	r0, #1
 800029c:	4698      	mov	r8, r3
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d0e0      	beq.n	8000264 <__udivmoddi4+0xa0>
 80002a2:	e9c6 4800 	strd	r4, r8, [r6]
 80002a6:	e7dd      	b.n	8000264 <__udivmoddi4+0xa0>
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xe8>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	f040 808f 	bne.w	80003d4 <__udivmoddi4+0x210>
 80002b6:	1b49      	subs	r1, r1, r5
 80002b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002bc:	fa1f f885 	uxth.w	r8, r5
 80002c0:	2701      	movs	r7, #1
 80002c2:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fb0e 111c 	mls	r1, lr, ip, r1
 80002cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d0:	fb08 f10c 	mul.w	r1, r8, ip
 80002d4:	4299      	cmp	r1, r3
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x124>
 80002d8:	18eb      	adds	r3, r5, r3
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x122>
 80002e0:	4299      	cmp	r1, r3
 80002e2:	f200 80cd 	bhi.w	8000480 <__udivmoddi4+0x2bc>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1a59      	subs	r1, r3, r1
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x14c>
 8000300:	192c      	adds	r4, r5, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x14a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80b6 	bhi.w	800047a <__udivmoddi4+0x2b6>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e79f      	b.n	800025a <__udivmoddi4+0x96>
 800031a:	f1c7 0c20 	rsb	ip, r7, #32
 800031e:	40bb      	lsls	r3, r7
 8000320:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000324:	ea4e 0e03 	orr.w	lr, lr, r3
 8000328:	fa01 f407 	lsl.w	r4, r1, r7
 800032c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000330:	fa21 f30c 	lsr.w	r3, r1, ip
 8000334:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000338:	4325      	orrs	r5, r4
 800033a:	fbb3 f9f8 	udiv	r9, r3, r8
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	fb08 3319 	mls	r3, r8, r9, r3
 8000344:	fa1f fa8e 	uxth.w	sl, lr
 8000348:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800034c:	fb09 f40a 	mul.w	r4, r9, sl
 8000350:	429c      	cmp	r4, r3
 8000352:	fa02 f207 	lsl.w	r2, r2, r7
 8000356:	fa00 f107 	lsl.w	r1, r0, r7
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b0>
 800035c:	eb1e 0303 	adds.w	r3, lr, r3
 8000360:	f109 30ff 	add.w	r0, r9, #4294967295
 8000364:	f080 8087 	bcs.w	8000476 <__udivmoddi4+0x2b2>
 8000368:	429c      	cmp	r4, r3
 800036a:	f240 8084 	bls.w	8000476 <__udivmoddi4+0x2b2>
 800036e:	f1a9 0902 	sub.w	r9, r9, #2
 8000372:	4473      	add	r3, lr
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	b2ad      	uxth	r5, r5
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000384:	fb00 fa0a 	mul.w	sl, r0, sl
 8000388:	45a2      	cmp	sl, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1da>
 800038c:	eb1e 0404 	adds.w	r4, lr, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	d26b      	bcs.n	800046e <__udivmoddi4+0x2aa>
 8000396:	45a2      	cmp	sl, r4
 8000398:	d969      	bls.n	800046e <__udivmoddi4+0x2aa>
 800039a:	3802      	subs	r0, #2
 800039c:	4474      	add	r4, lr
 800039e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003a2:	fba0 8902 	umull	r8, r9, r0, r2
 80003a6:	eba4 040a 	sub.w	r4, r4, sl
 80003aa:	454c      	cmp	r4, r9
 80003ac:	46c2      	mov	sl, r8
 80003ae:	464b      	mov	r3, r9
 80003b0:	d354      	bcc.n	800045c <__udivmoddi4+0x298>
 80003b2:	d051      	beq.n	8000458 <__udivmoddi4+0x294>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2c8>
 80003b8:	ebb1 050a 	subs.w	r5, r1, sl
 80003bc:	eb64 0403 	sbc.w	r4, r4, r3
 80003c0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c4:	40fd      	lsrs	r5, r7
 80003c6:	40fc      	lsrs	r4, r7
 80003c8:	ea4c 0505 	orr.w	r5, ip, r5
 80003cc:	e9c6 5400 	strd	r5, r4, [r6]
 80003d0:	2700      	movs	r7, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa0>
 80003d4:	f1c2 0320 	rsb	r3, r2, #32
 80003d8:	fa20 f703 	lsr.w	r7, r0, r3
 80003dc:	4095      	lsls	r5, r2
 80003de:	fa01 f002 	lsl.w	r0, r1, r2
 80003e2:	fa21 f303 	lsr.w	r3, r1, r3
 80003e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003ea:	4338      	orrs	r0, r7
 80003ec:	0c01      	lsrs	r1, r0, #16
 80003ee:	fbb3 f7fe 	udiv	r7, r3, lr
 80003f2:	fa1f f885 	uxth.w	r8, r5
 80003f6:	fb0e 3317 	mls	r3, lr, r7, r3
 80003fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fe:	fb07 f308 	mul.w	r3, r7, r8
 8000402:	428b      	cmp	r3, r1
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x256>
 800040a:	1869      	adds	r1, r5, r1
 800040c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000410:	d22f      	bcs.n	8000472 <__udivmoddi4+0x2ae>
 8000412:	428b      	cmp	r3, r1
 8000414:	d92d      	bls.n	8000472 <__udivmoddi4+0x2ae>
 8000416:	3f02      	subs	r7, #2
 8000418:	4429      	add	r1, r5
 800041a:	1acb      	subs	r3, r1, r3
 800041c:	b281      	uxth	r1, r0
 800041e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000422:	fb0e 3310 	mls	r3, lr, r0, r3
 8000426:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042a:	fb00 f308 	mul.w	r3, r0, r8
 800042e:	428b      	cmp	r3, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x27e>
 8000432:	1869      	adds	r1, r5, r1
 8000434:	f100 3cff 	add.w	ip, r0, #4294967295
 8000438:	d217      	bcs.n	800046a <__udivmoddi4+0x2a6>
 800043a:	428b      	cmp	r3, r1
 800043c:	d915      	bls.n	800046a <__udivmoddi4+0x2a6>
 800043e:	3802      	subs	r0, #2
 8000440:	4429      	add	r1, r5
 8000442:	1ac9      	subs	r1, r1, r3
 8000444:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000448:	e73b      	b.n	80002c2 <__udivmoddi4+0xfe>
 800044a:	4637      	mov	r7, r6
 800044c:	4630      	mov	r0, r6
 800044e:	e709      	b.n	8000264 <__udivmoddi4+0xa0>
 8000450:	4607      	mov	r7, r0
 8000452:	e6e7      	b.n	8000224 <__udivmoddi4+0x60>
 8000454:	4618      	mov	r0, r3
 8000456:	e6fb      	b.n	8000250 <__udivmoddi4+0x8c>
 8000458:	4541      	cmp	r1, r8
 800045a:	d2ab      	bcs.n	80003b4 <__udivmoddi4+0x1f0>
 800045c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000460:	eb69 020e 	sbc.w	r2, r9, lr
 8000464:	3801      	subs	r0, #1
 8000466:	4613      	mov	r3, r2
 8000468:	e7a4      	b.n	80003b4 <__udivmoddi4+0x1f0>
 800046a:	4660      	mov	r0, ip
 800046c:	e7e9      	b.n	8000442 <__udivmoddi4+0x27e>
 800046e:	4618      	mov	r0, r3
 8000470:	e795      	b.n	800039e <__udivmoddi4+0x1da>
 8000472:	4667      	mov	r7, ip
 8000474:	e7d1      	b.n	800041a <__udivmoddi4+0x256>
 8000476:	4681      	mov	r9, r0
 8000478:	e77c      	b.n	8000374 <__udivmoddi4+0x1b0>
 800047a:	3802      	subs	r0, #2
 800047c:	442c      	add	r4, r5
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0x14c>
 8000480:	f1ac 0c02 	sub.w	ip, ip, #2
 8000484:	442b      	add	r3, r5
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x124>
 8000488:	4638      	mov	r0, r7
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xda>
 800048c:	4637      	mov	r7, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa0>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000494:	b500      	push	{lr}
 8000496:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000498:	2300      	movs	r3, #0
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	9302      	str	r3, [sp, #8]
 80004a0:	9303      	str	r3, [sp, #12]
 80004a2:	9304      	str	r3, [sp, #16]
 80004a4:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80004a6:	481a      	ldr	r0, [pc, #104]	; (8000510 <MX_ADC1_Init+0x7c>)
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <MX_ADC1_Init+0x80>)
 80004aa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80004ac:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80004b0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80004b2:	2210      	movs	r2, #16
 80004b4:	6082      	str	r2, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b8:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ba:	2204      	movs	r2, #4
 80004bc:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004be:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004c0:	2201      	movs	r2, #1
 80004c2:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004c4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ca:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004ce:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d8:	f000 fcca 	bl	8000e70 <HAL_ADC_Init>
 80004dc:	b990      	cbnz	r0, 8000504 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_ADC1_Init+0x84>)
 80004e0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e2:	2306      	movs	r3, #6
 80004e4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80004e6:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004e8:	237f      	movs	r3, #127	; 0x7f
 80004ea:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ec:	2304      	movs	r3, #4
 80004ee:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f4:	4669      	mov	r1, sp
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <MX_ADC1_Init+0x7c>)
 80004f8:	f000 fdac 	bl	8001054 <HAL_ADC_ConfigChannel>
 80004fc:	b928      	cbnz	r0, 800050a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
  }

}
 80004fe:	b007      	add	sp, #28
 8000500:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000504:	f000 fa06 	bl	8000914 <Error_Handler>
 8000508:	e7e9      	b.n	80004de <MX_ADC1_Init+0x4a>
    Error_Handler();
 800050a:	f000 fa03 	bl	8000914 <Error_Handler>
}
 800050e:	e7f6      	b.n	80004fe <MX_ADC1_Init+0x6a>
 8000510:	20000518 	.word	0x20000518
 8000514:	50040000 	.word	0x50040000
 8000518:	14f00020 	.word	0x14f00020

0800051c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800051c:	b510      	push	{r4, lr}
 800051e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2300      	movs	r3, #0
 8000522:	9303      	str	r3, [sp, #12]
 8000524:	9304      	str	r3, [sp, #16]
 8000526:	9305      	str	r3, [sp, #20]
 8000528:	9306      	str	r3, [sp, #24]
 800052a:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800052c:	6802      	ldr	r2, [r0, #0]
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <HAL_ADC_MspInit+0x8c>)
 8000530:	429a      	cmp	r2, r3
 8000532:	d001      	beq.n	8000538 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000534:	b008      	add	sp, #32
 8000536:	bd10      	pop	{r4, pc}
 8000538:	4604      	mov	r4, r0
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800053a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000544:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000548:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800054c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800054e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000552:	f042 0201 	orr.w	r2, r2, #1
 8000556:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000560:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000562:	2301      	movs	r3, #1
 8000564:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000566:	2303      	movs	r3, #3
 8000568:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	a903      	add	r1, sp, #12
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 f8e6 	bl	8001740 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <HAL_ADC_MspInit+0x90>)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 8000578:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800057a:	2305      	movs	r3, #5
 800057c:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800057e:	2300      	movs	r3, #0
 8000580:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000582:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000588:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800058a:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800058c:	2220      	movs	r2, #32
 800058e:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000590:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000592:	f001 f805 	bl	80015a0 <HAL_DMA_Init>
 8000596:	b918      	cbnz	r0, 80005a0 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_ADC_MspInit+0x90>)
 800059a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800059c:	629c      	str	r4, [r3, #40]	; 0x28
}
 800059e:	e7c9      	b.n	8000534 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80005a0:	f000 f9b8 	bl	8000914 <Error_Handler>
 80005a4:	e7f8      	b.n	8000598 <HAL_ADC_MspInit+0x7c>
 80005a6:	bf00      	nop
 80005a8:	50040000 	.word	0x50040000
 80005ac:	2000057c 	.word	0x2000057c
 80005b0:	40020008 	.word	0x40020008

080005b4 <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80005b4:	b508      	push	{r3, lr}
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80005b6:	f004 fd69 	bl	800508c <TL_MM_EvtDone>
}
 80005ba:	bd08      	pop	{r3, pc}

080005bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80005bc:	b500      	push	{lr}
 80005be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005c6:	f042 0204 	orr.w	r2, r2, #4
 80005ca:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005ce:	f002 0204 	and.w	r2, r2, #4
 80005d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80005d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005d8:	f042 0201 	orr.w	r2, r2, #1
 80005dc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80005e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2105      	movs	r1, #5
 80005ec:	200b      	movs	r0, #11
 80005ee:	f000 ff57 	bl	80014a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f2:	200b      	movs	r0, #11
 80005f4:	f000 ff88 	bl	8001508 <HAL_NVIC_EnableIRQ>

}
 80005f8:	b003      	add	sp, #12
 80005fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000600 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2400      	movs	r4, #0
 8000606:	9407      	str	r4, [sp, #28]
 8000608:	9408      	str	r4, [sp, #32]
 800060a:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 800060c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000612:	f042 0204 	orr.w	r2, r2, #4
 8000616:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800061a:	f002 0204 	and.w	r2, r2, #4
 800061e:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000620:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000628:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800062a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800062c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000630:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000632:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000636:	f042 0202 	orr.w	r2, r2, #2
 800063a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800063c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800063e:	f002 0202 	and.w	r2, r2, #2
 8000642:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000644:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000648:	f042 0201 	orr.w	r2, r2, #1
 800064c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800064e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000650:	f002 0201 	and.w	r2, r2, #1
 8000654:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000656:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000658:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800065a:	f042 0210 	orr.w	r2, r2, #16
 800065e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000668:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800066a:	2308      	movs	r3, #8
 800066c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2503      	movs	r5, #3
 8000670:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000672:	a905      	add	r1, sp, #20
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <MX_GPIO_Init+0xc8>)
 8000676:	f001 f863 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 800067a:	f240 3333 	movw	r3, #819	; 0x333
 800067e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	4e11      	ldr	r6, [pc, #68]	; (80006cc <MX_GPIO_Init+0xcc>)
 8000686:	a905      	add	r1, sp, #20
 8000688:	4630      	mov	r0, r6
 800068a:	f001 f859 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800068e:	f649 13fe 	movw	r3, #39422	; 0x99fe
 8000692:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	a905      	add	r1, sp, #20
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f001 f84f 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 80006a2:	2304      	movs	r3, #4
 80006a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_GPIO_Init+0xd0>)
 80006a8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 80006ac:	a905      	add	r1, sp, #20
 80006ae:	4630      	mov	r0, r6
 80006b0:	f001 f846 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006b4:	2310      	movs	r3, #16
 80006b6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006bc:	a905      	add	r1, sp, #20
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_GPIO_Init+0xd4>)
 80006c0:	f001 f83e 	bl	8001740 <HAL_GPIO_Init>

}
 80006c4:	b00a      	add	sp, #40	; 0x28
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	48001c00 	.word	0x48001c00
 80006cc:	48000400 	.word	0x48000400
 80006d0:	10110000 	.word	0x10110000
 80006d4:	48001000 	.word	0x48001000

080006d8 <HW_UART_Transmit_IT>:
    return;
}

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
    switch (hw_uart_id)
 80006d8:	b100      	cbz	r0, 80006dc <HW_UART_Transmit_IT+0x4>
 80006da:	4770      	bx	lr
{
 80006dc:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_TX_IT(huart1, USART1);
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <HW_UART_Transmit_IT+0x18>)
 80006e0:	6003      	str	r3, [r0, #0]
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <HW_UART_Transmit_IT+0x1c>)
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HW_UART_Transmit_IT+0x20>)
 80006e6:	6003      	str	r3, [r0, #0]
 80006e8:	f003 f92c 	bl	8003944 <HAL_UART_Transmit_IT>
        default:
            break;
    }

    return;
}
 80006ec:	bd08      	pop	{r3, pc}
 80006ee:	bf00      	nop
 80006f0:	200005e0 	.word	0x200005e0
 80006f4:	200006d4 	.word	0x200006d4
 80006f8:	40013800 	.word	0x40013800

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <MX_I2C1_Init+0x4c>)
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x54>)
 8000706:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	2201      	movs	r2, #1
 800070e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000716:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000718:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071a:	f001 f9e2 	bl	8001ae2 <HAL_I2C_Init>
 800071e:	b950      	cbnz	r0, 8000736 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x4c>)
 8000724:	f001 fafc 	bl	8001d20 <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	b940      	cbnz	r0, 800073c <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_I2C1_Init+0x4c>)
 800072e:	f001 fb25 	bl	8001d7c <HAL_I2CEx_ConfigDigitalFilter>
 8000732:	b930      	cbnz	r0, 8000742 <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8000734:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000736:	f000 f8ed 	bl	8000914 <Error_Handler>
 800073a:	e7f1      	b.n	8000720 <MX_I2C1_Init+0x24>
    Error_Handler();
 800073c:	f000 f8ea 	bl	8000914 <Error_Handler>
 8000740:	e7f3      	b.n	800072a <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000742:	f000 f8e7 	bl	8000914 <Error_Handler>
}
 8000746:	e7f5      	b.n	8000734 <MX_I2C1_Init+0x38>
 8000748:	200005e4 	.word	0x200005e4
 800074c:	40005400 	.word	0x40005400
 8000750:	00e27cae 	.word	0x00e27cae

08000754 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000754:	b510      	push	{r4, lr}
 8000756:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	2300      	movs	r3, #0
 800075a:	9303      	str	r3, [sp, #12]
 800075c:	9304      	str	r3, [sp, #16]
 800075e:	9305      	str	r3, [sp, #20]
 8000760:	9306      	str	r3, [sp, #24]
 8000762:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000764:	6802      	ldr	r2, [r0, #0]
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <HAL_I2C_MspInit+0x60>)
 8000768:	429a      	cmp	r2, r3
 800076a:	d001      	beq.n	8000770 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076c:	b008      	add	sp, #32
 800076e:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000770:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8000774:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800077c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000784:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000786:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800078a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078c:	2312      	movs	r3, #18
 800078e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000790:	2304      	movs	r3, #4
 8000792:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	a903      	add	r1, sp, #12
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 ffd1 	bl	8001740 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800079e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007ae:	9b01      	ldr	r3, [sp, #4]
}
 80007b0:	e7dc      	b.n	800076c <HAL_I2C_MspInit+0x18>
 80007b2:	bf00      	nop
 80007b4:	40005400 	.word	0x40005400

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007bc:	2248      	movs	r2, #72	; 0x48
 80007be:	2100      	movs	r1, #0
 80007c0:	a81c      	add	r0, sp, #112	; 0x70
 80007c2:	f004 fe05 	bl	80053d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c6:	2400      	movs	r4, #0
 80007c8:	9415      	str	r4, [sp, #84]	; 0x54
 80007ca:	9416      	str	r4, [sp, #88]	; 0x58
 80007cc:	9417      	str	r4, [sp, #92]	; 0x5c
 80007ce:	9418      	str	r4, [sp, #96]	; 0x60
 80007d0:	9419      	str	r4, [sp, #100]	; 0x64
 80007d2:	941a      	str	r4, [sp, #104]	; 0x68
 80007d4:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d6:	2250      	movs	r2, #80	; 0x50
 80007d8:	4621      	mov	r1, r4
 80007da:	a801      	add	r0, sp, #4
 80007dc:	f004 fdf8 	bl	80053d0 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80007e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007ea:	f042 0210 	orr.w	r2, r2, #16
 80007ee:	60da      	str	r2, [r3, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007f0:	68da      	ldr	r2, [r3, #12]
 80007f2:	f042 0203 	orr.w	r2, r2, #3
 80007f6:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80007f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007fc:	f022 0218 	bic.w	r2, r2, #24
 8000800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	4a25      	ldr	r2, [pc, #148]	; (800089c <SystemClock_Config+0xe4>)
 8000806:	6813      	ldr	r3, [r2, #0]
 8000808:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800080c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	6813      	ldr	r3, [r2, #0]
 8000814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800081c:	230f      	movs	r3, #15
 800081e:	931c      	str	r3, [sp, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000826:	2701      	movs	r7, #1
 8000828:	971e      	str	r7, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	f44f 7680 	mov.w	r6, #256	; 0x100
 800082e:	961f      	str	r6, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000834:	2305      	movs	r3, #5
 8000836:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000838:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	a81c      	add	r0, sp, #112	; 0x70
 800083c:	f001 fb5e 	bl	8001efc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000840:	236f      	movs	r3, #111	; 0x6f
 8000842:	9315      	str	r3, [sp, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000844:	2502      	movs	r5, #2
 8000846:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084a:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800084e:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000850:	941b      	str	r4, [sp, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000852:	4639      	mov	r1, r7
 8000854:	a815      	add	r0, sp, #84	; 0x54
 8000856:	f001 fedb 	bl	8002610 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800085a:	f643 4305 	movw	r3, #15365	; 0x3c05
 800085e:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8000860:	2306      	movs	r3, #6
 8000862:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000868:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800086a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800086e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000870:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000874:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800087a:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800087c:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800087e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000882:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000884:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000886:	9611      	str	r6, [sp, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8000888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800088c:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800088e:	9513      	str	r5, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000890:	9414      	str	r4, [sp, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000892:	a801      	add	r0, sp, #4
 8000894:	f002 f977 	bl	8002b86 <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000898:	b02f      	add	sp, #188	; 0xbc
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	58000400 	.word	0x58000400

080008a0 <main>:
{
 80008a0:	b500      	push	{lr}
 80008a2:	b083      	sub	sp, #12
  HAL_Init();
 80008a4:	f000 faa2 	bl	8000dec <HAL_Init>
  SystemClock_Config();
 80008a8:	f7ff ff86 	bl	80007b8 <SystemClock_Config>
  MX_GPIO_Init();
 80008ac:	f7ff fea8 	bl	8000600 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b0:	f7ff fe84 	bl	80005bc <MX_DMA_Init>
  MX_ADC1_Init();
 80008b4:	f7ff fdee 	bl	8000494 <MX_ADC1_Init>
  MX_RTC_Init();
 80008b8:	f000 f82e 	bl	8000918 <MX_RTC_Init>
  MX_TIM2_Init();
 80008bc:	f000 f99c 	bl	8000bf8 <MX_TIM2_Init>
  MX_RF_Init();
 80008c0:	f000 f829 	bl	8000916 <MX_RF_Init>
  MX_USART1_UART_Init();
 80008c4:	f000 f9f2 	bl	8000cac <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008c8:	f7ff ff18 	bl	80006fc <MX_I2C1_Init>
 80008cc:	e002      	b.n	80008d4 <main+0x34>
	    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <main+0x54>)
 80008d0:	f001 fa24 	bl	8001d1c <HAL_I2C_GetError>
	  while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS << 1, (uint8_t *)aRxBuffer, sizeof(aRxBuffer), 10000) != HAL_OK)
 80008d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2314      	movs	r3, #20
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <main+0x58>)
 80008de:	21f0      	movs	r1, #240	; 0xf0
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <main+0x54>)
 80008e2:	f001 f95d 	bl	8001ba0 <HAL_I2C_Master_Receive>
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d1f1      	bne.n	80008ce <main+0x2e>
	  HAL_Delay(1000);
 80008ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ee:	f000 faab 	bl	8000e48 <HAL_Delay>
	  while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS << 1, (uint8_t *)aRxBuffer, sizeof(aRxBuffer), 10000) != HAL_OK)
 80008f2:	e7ef      	b.n	80008d4 <main+0x34>
 80008f4:	200005e4 	.word	0x200005e4
 80008f8:	20000030 	.word	0x20000030

080008fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008fe:	6802      	ldr	r2, [r0, #0]
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000902:	429a      	cmp	r2, r3
 8000904:	d000      	beq.n	8000908 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000906:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000908:	f000 fa86 	bl	8000e18 <HAL_IncTick>
}
 800090c:	e7fb      	b.n	8000906 <HAL_TIM_PeriodElapsedCallback+0xa>
 800090e:	bf00      	nop
 8000910:	40012c00 	.word	0x40012c00

08000914 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000914:	4770      	bx	lr

08000916 <MX_RF_Init>:

/* RF init function */
void MX_RF_Init(void)
{

}
 8000916:	4770      	bx	lr

08000918 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000918:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_RTC_Init+0x24>)
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_RTC_Init+0x28>)
 800091e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000920:	2300      	movs	r3, #0
 8000922:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000924:	230f      	movs	r3, #15
 8000926:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000928:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800092c:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800092e:	f002 faeb 	bl	8002f08 <HAL_RTC_Init>
 8000932:	b900      	cbnz	r0, 8000936 <MX_RTC_Init+0x1e>
  {
    Error_Handler();
  }

}
 8000934:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000936:	f7ff ffed 	bl	8000914 <Error_Handler>
}
 800093a:	e7fb      	b.n	8000934 <MX_RTC_Init+0x1c>
 800093c:	20000630 	.word	0x20000630
 8000940:	40002800 	.word	0x40002800

08000944 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8000944:	6802      	ldr	r2, [r0, #0]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_RTC_MspInit+0x1c>)
 8000948:	429a      	cmp	r2, r3
 800094a:	d000      	beq.n	800094e <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800094c:	4770      	bx	lr
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800094e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000952:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800095e:	e7f5      	b.n	800094c <HAL_RTC_MspInit+0x8>
 8000960:	40002800 	.word	0x40002800

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b500      	push	{lr}
 8000966:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800096e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000972:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800097a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800097c:	9b01      	ldr	r3, [sp, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fd8b 	bl	80014a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	202c      	movs	r0, #44	; 0x2c
 8000990:	f000 fd86 	bl	80014a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	210f      	movs	r1, #15
 8000998:	202d      	movs	r0, #45	; 0x2d
 800099a:	f000 fd81 	bl	80014a0 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 800099e:	b003      	add	sp, #12
 80009a0:	f85d fb04 	ldr.w	pc, [sp], #4

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b500      	push	{lr}
 80009a6:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80009a8:	2200      	movs	r2, #0
 80009aa:	4601      	mov	r1, r0
 80009ac:	2019      	movs	r0, #25
 80009ae:	f000 fd77 	bl	80014a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80009b2:	2019      	movs	r0, #25
 80009b4:	f000 fda8 	bl	8001508 <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009c2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ca:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009cc:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ce:	a902      	add	r1, sp, #8
 80009d0:	a803      	add	r0, sp, #12
 80009d2:	f001 ffdd 	bl	8002990 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009d6:	f001 ffc9 	bl	800296c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_InitTick+0x6c>)
 80009dc:	fba3 2300 	umull	r2, r3, r3, r0
 80009e0:	0c9b      	lsrs	r3, r3, #18
 80009e2:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <HAL_InitTick+0x70>)
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <HAL_InitTick+0x74>)
 80009e8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80009ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ee:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009f0:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009f8:	f002 fd46 	bl	8003488 <HAL_TIM_Base_Init>
 80009fc:	b118      	cbz	r0, 8000a06 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009fe:	2001      	movs	r0, #1
}
 8000a00:	b00b      	add	sp, #44	; 0x2c
 8000a02:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <HAL_InitTick+0x70>)
 8000a08:	f002 fc1e 	bl	8003248 <HAL_TIM_Base_Start_IT>
 8000a0c:	e7f8      	b.n	8000a00 <HAL_InitTick+0x5c>
 8000a0e:	bf00      	nop
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	20000654 	.word	0x20000654
 8000a18:	40012c00 	.word	0x40012c00

08000a1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a1c:	4770      	bx	lr

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler>

08000a26 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	4770      	bx	lr

08000a28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a2a:	4802      	ldr	r0, [pc, #8]	; (8000a34 <DMA1_Channel1_IRQHandler+0xc>)
 8000a2c:	f000 fe26 	bl	800167c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a30:	bd08      	pop	{r3, pc}
 8000a32:	bf00      	nop
 8000a34:	2000057c 	.word	0x2000057c

08000a38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a3a:	4802      	ldr	r0, [pc, #8]	; (8000a44 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000a3c:	f002 fc1f 	bl	800327e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a40:	bd08      	pop	{r3, pc}
 8000a42:	bf00      	nop
 8000a44:	20000654 	.word	0x20000654

08000a48 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8000a48:	b508      	push	{r3, lr}
  HW_IPCC_Tx_Handler();
 8000a4a:	f004 fbe3 	bl	8005214 <HW_IPCC_Tx_Handler>

  return;
}
 8000a4e:	bd08      	pop	{r3, pc}

08000a50 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8000a50:	b508      	push	{r3, lr}
  HW_IPCC_Rx_Handler();
 8000a52:	f004 fc53 	bl	80052fc <HW_IPCC_Rx_Handler>
  return;
}
 8000a56:	bd08      	pop	{r3, pc}

08000a58 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <SystemInit+0x5c>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000a5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a62:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	f042 0201 	orr.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a76:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a7a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8000a82:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8000a86:	4002      	ands	r2, r0
 8000a88:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a8a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000a8e:	f022 0205 	bic.w	r2, r2, #5
 8000a92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a96:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000a9a:	f022 0201 	bic.w	r2, r2, #1
 8000a9e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x60>)
 8000aa4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000aa6:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000aae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ab0:	6199      	str	r1, [r3, #24]
}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	22041000 	.word	0x22041000

08000abc <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ac6:	4929      	ldr	r1, [pc, #164]	; (8000b6c <SystemCoreClockUpdate+0xb0>)
 8000ac8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000acc:	6893      	ldr	r3, [r2, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	2b0c      	cmp	r3, #12
 8000ad4:	d846      	bhi.n	8000b64 <SystemCoreClockUpdate+0xa8>
 8000ad6:	e8df f003 	tbb	[pc, r3]
 8000ada:	4507      	.short	0x4507
 8000adc:	45174545 	.word	0x45174545
 8000ae0:	451b4545 	.word	0x451b4545
 8000ae4:	4545      	.short	0x4545
 8000ae6:	1f          	.byte	0x1f
 8000ae7:	00          	.byte	0x00
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <SystemCoreClockUpdate+0xb4>)
 8000aea:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <SystemCoreClockUpdate+0xb8>)
 8000af8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <SystemCoreClockUpdate+0xb4>)
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b04:	6013      	str	r3, [r2, #0]

}
 8000b06:	4770      	bx	lr
        SystemCoreClock = HSI_VALUE;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <SystemCoreClockUpdate+0xb4>)
 8000b0a:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <SystemCoreClockUpdate+0xbc>)
 8000b0c:	601a      	str	r2, [r3, #0]
      break;
 8000b0e:	e7ed      	b.n	8000aec <SystemCoreClockUpdate+0x30>
      SystemCoreClock = HSE_VALUE;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <SystemCoreClockUpdate+0xb4>)
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <SystemCoreClockUpdate+0xc0>)
 8000b14:	601a      	str	r2, [r3, #0]
      break;
 8000b16:	e7e9      	b.n	8000aec <SystemCoreClockUpdate+0x30>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8000b28:	3301      	adds	r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000b2a:	2a02      	cmp	r2, #2
 8000b2c:	d012      	beq.n	8000b54 <SystemCoreClockUpdate+0x98>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000b2e:	2a03      	cmp	r2, #3
 8000b30:	d014      	beq.n	8000b5c <SystemCoreClockUpdate+0xa0>
        pllvco = (msirange / pllm);
 8000b32:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	68ca      	ldr	r2, [r1, #12]
 8000b3c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000b40:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000b44:	68ca      	ldr	r2, [r1, #12]
 8000b46:	0f52      	lsrs	r2, r2, #29
 8000b48:	3201      	adds	r2, #1
      SystemCoreClock = pllvco/pllr;
 8000b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <SystemCoreClockUpdate+0xb4>)
 8000b50:	6013      	str	r3, [r2, #0]
      break;
 8000b52:	e7cb      	b.n	8000aec <SystemCoreClockUpdate+0x30>
        pllvco = (HSI_VALUE / pllm);
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <SystemCoreClockUpdate+0xbc>)
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	e7ec      	b.n	8000b36 <SystemCoreClockUpdate+0x7a>
        pllvco = (HSE_VALUE / pllm);
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <SystemCoreClockUpdate+0xc0>)
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	e7e8      	b.n	8000b36 <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <SystemCoreClockUpdate+0xb4>)
 8000b66:	6019      	str	r1, [r3, #0]
      break;
 8000b68:	e7c0      	b.n	8000aec <SystemCoreClockUpdate+0x30>
 8000b6a:	bf00      	nop
 8000b6c:	08005494 	.word	0x08005494
 8000b70:	20000004 	.word	0x20000004
 8000b74:	08005434 	.word	0x08005434
 8000b78:	00f42400 	.word	0x00f42400
 8000b7c:	01e84800 	.word	0x01e84800

08000b80 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000b80:	6803      	ldr	r3, [r0, #0]
 8000b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b86:	d000      	beq.n	8000b8a <HAL_TIM_Base_MspInit+0xa>
 8000b88:	4770      	bx	lr
{
 8000b8a:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b92:	f042 0201 	orr.w	r2, r2, #1
 8000b96:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ba0:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ba2:	b002      	add	sp, #8
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ba8:	b500      	push	{lr}
 8000baa:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2300      	movs	r3, #0
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	9303      	str	r3, [sp, #12]
 8000bb4:	9304      	str	r3, [sp, #16]
 8000bb6:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8000bb8:	6803      	ldr	r3, [r0, #0]
 8000bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bbe:	d002      	beq.n	8000bc6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bc0:	b007      	add	sp, #28
 8000bc2:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bcc:	f042 0202 	orr.w	r2, r2, #2
 8000bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000bda:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be4:	2301      	movs	r3, #1
 8000be6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	a901      	add	r1, sp, #4
 8000bea:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <HAL_TIM_MspPostInit+0x4c>)
 8000bec:	f000 fda8 	bl	8001740 <HAL_GPIO_Init>
}
 8000bf0:	e7e6      	b.n	8000bc0 <HAL_TIM_MspPostInit+0x18>
 8000bf2:	bf00      	nop
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <MX_TIM2_Init>:
{
 8000bf8:	b500      	push	{lr}
 8000bfa:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8000c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c02:	930c      	str	r3, [sp, #48]	; 0x30
 8000c04:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	9307      	str	r3, [sp, #28]
 8000c08:	9308      	str	r3, [sp, #32]
 8000c0a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	9303      	str	r3, [sp, #12]
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	9305      	str	r3, [sp, #20]
 8000c18:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8000c1a:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c20:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 639;
 8000c22:	f240 227f 	movw	r2, #639	; 0x27f
 8000c26:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 9;
 8000c2a:	2209      	movs	r2, #9
 8000c2c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c32:	f002 fc29 	bl	8003488 <HAL_TIM_Base_Init>
 8000c36:	bb40      	cbnz	r0, 8000c8a <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	a90e      	add	r1, sp, #56	; 0x38
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c44:	f002 fd34 	bl	80036b0 <HAL_TIM_ConfigClockSource>
 8000c48:	bb10      	cbnz	r0, 8000c90 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c4c:	f002 fc35 	bl	80034ba <HAL_TIM_PWM_Init>
 8000c50:	bb08      	cbnz	r0, 8000c96 <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c52:	2320      	movs	r3, #32
 8000c54:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5a:	a907      	add	r1, sp, #28
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c5e:	f002 fd95 	bl	800378c <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	b9d8      	cbnz	r0, 8000c9c <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c64:	2360      	movs	r3, #96	; 0x60
 8000c66:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 7;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c72:	2204      	movs	r2, #4
 8000c74:	4669      	mov	r1, sp
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c78:	f002 fc74 	bl	8003564 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	b988      	cbnz	r0, 8000ca2 <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c80:	f7ff ff92 	bl	8000ba8 <HAL_TIM_MspPostInit>
}
 8000c84:	b00f      	add	sp, #60	; 0x3c
 8000c86:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c8a:	f7ff fe43 	bl	8000914 <Error_Handler>
 8000c8e:	e7d3      	b.n	8000c38 <MX_TIM2_Init+0x40>
    Error_Handler();
 8000c90:	f7ff fe40 	bl	8000914 <Error_Handler>
 8000c94:	e7d9      	b.n	8000c4a <MX_TIM2_Init+0x52>
    Error_Handler();
 8000c96:	f7ff fe3d 	bl	8000914 <Error_Handler>
 8000c9a:	e7da      	b.n	8000c52 <MX_TIM2_Init+0x5a>
    Error_Handler();
 8000c9c:	f7ff fe3a 	bl	8000914 <Error_Handler>
 8000ca0:	e7e0      	b.n	8000c64 <MX_TIM2_Init+0x6c>
    Error_Handler();
 8000ca2:	f7ff fe37 	bl	8000914 <Error_Handler>
 8000ca6:	e7ea      	b.n	8000c7e <MX_TIM2_Init+0x86>
 8000ca8:	20000694 	.word	0x20000694

08000cac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cac:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8000cae:	4818      	ldr	r0, [pc, #96]	; (8000d10 <MX_USART1_UART_Init+0x64>)
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_USART1_UART_Init+0x68>)
 8000cb2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000cb4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cb8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cbe:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000cc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ccc:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd0:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd4:	f003 fd27 	bl	8004726 <HAL_UART_Init>
 8000cd8:	b970      	cbnz	r0, 8000cf8 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_USART1_UART_Init+0x64>)
 8000cde:	f003 fdae 	bl	800483e <HAL_UARTEx_SetTxFifoThreshold>
 8000ce2:	b960      	cbnz	r0, 8000cfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480a      	ldr	r0, [pc, #40]	; (8000d10 <MX_USART1_UART_Init+0x64>)
 8000ce8:	f003 fdce 	bl	8004888 <HAL_UARTEx_SetRxFifoThreshold>
 8000cec:	b950      	cbnz	r0, 8000d04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <MX_USART1_UART_Init+0x64>)
 8000cf0:	f003 fd86 	bl	8004800 <HAL_UARTEx_DisableFifoMode>
 8000cf4:	b948      	cbnz	r0, 8000d0a <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }

}
 8000cf6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cf8:	f7ff fe0c 	bl	8000914 <Error_Handler>
 8000cfc:	e7ed      	b.n	8000cda <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 8000cfe:	f7ff fe09 	bl	8000914 <Error_Handler>
 8000d02:	e7ef      	b.n	8000ce4 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8000d04:	f7ff fe06 	bl	8000914 <Error_Handler>
 8000d08:	e7f1      	b.n	8000cee <MX_USART1_UART_Init+0x42>
    Error_Handler();
 8000d0a:	f7ff fe03 	bl	8000914 <Error_Handler>
}
 8000d0e:	e7f2      	b.n	8000cf6 <MX_USART1_UART_Init+0x4a>
 8000d10:	200006d4 	.word	0x200006d4
 8000d14:	40013800 	.word	0x40013800

08000d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d18:	b500      	push	{lr}
 8000d1a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	9304      	str	r3, [sp, #16]
 8000d22:	9305      	str	r3, [sp, #20]
 8000d24:	9306      	str	r3, [sp, #24]
 8000d26:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8000d28:	6802      	ldr	r2, [r0, #0]
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_UART_MspInit+0x5c>)
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d002      	beq.n	8000d36 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d30:	b009      	add	sp, #36	; 0x24
 8000d32:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d40:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d48:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000d4a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d4e:	f042 0202 	orr.w	r2, r2, #2
 8000d52:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000d5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d5e:	23c0      	movs	r3, #192	; 0xc0
 8000d60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d66:	2307      	movs	r3, #7
 8000d68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	a903      	add	r1, sp, #12
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <HAL_UART_MspInit+0x60>)
 8000d6e:	f000 fce7 	bl	8001740 <HAL_GPIO_Init>
}
 8000d72:	e7dd      	b.n	8000d30 <HAL_UART_MspInit+0x18>
 8000d74:	40013800 	.word	0x40013800
 8000d78:	48000400 	.word	0x48000400

08000d7c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d7c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d80:	3304      	adds	r3, #4

08000d82 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d82:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d84:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d86:	d3f9      	bcc.n	8000d7c <CopyDataInit>
  bx lr
 8000d88:	4770      	bx	lr

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d8a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d8c:	3004      	adds	r0, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d8e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
  bx lr
 8000d92:	4770      	bx	lr

08000d94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000d96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LoopForever+0x8>)
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <LoopForever+0xc>)
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LoopForever+0x10>)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f7ff ffef 	bl	8000d82 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <LoopForever+0x14>)
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <LoopForever+0x18>)
 8000da8:	2300      	movs	r3, #0
 8000daa:	f7ff fff0 	bl	8000d8e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopForever+0x1c>)
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <LoopForever+0x20>)
 8000db2:	2300      	movs	r3, #0
 8000db4:	f7ff ffeb 	bl	8000d8e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000db8:	f7ff fe4e 	bl	8000a58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dbc:	f004 fae4 	bl	8005388 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000dc0:	f7ff fd6e 	bl	80008a0 <main>

08000dc4 <LoopForever>:

LoopForever:
  b LoopForever
 8000dc4:	e7fe      	b.n	8000dc4 <LoopForever>
 8000dc6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000dc8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000dcc:	20000004 	.word	0x20000004
 8000dd0:	20000014 	.word	0x20000014
 8000dd4:	080054e8 	.word	0x080054e8
  INIT_BSS _sbss, _ebss
 8000dd8:	20000014 	.word	0x20000014
 8000ddc:	20000764 	.word	0x20000764
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000de0:	200300b8 	.word	0x200300b8
 8000de4:	200300d8 	.word	0x200300d8

08000de8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b510      	push	{r4, lr}
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_Init+0x28>)
 8000df0:	6813      	ldr	r3, [r2, #0]
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 fb3f 	bl	800147c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fdd0 	bl	80009a4 <HAL_InitTick>
 8000e04:	b110      	cbz	r0, 8000e0c <HAL_Init+0x20>
  {
    status = HAL_ERROR;
 8000e06:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8000e08:	4620      	mov	r0, r4
 8000e0a:	bd10      	pop	{r4, pc}
 8000e0c:	4604      	mov	r4, r0
    HAL_MspInit();
 8000e0e:	f7ff fda9 	bl	8000964 <HAL_MspInit>
 8000e12:	e7f9      	b.n	8000e08 <HAL_Init+0x1c>
 8000e14:	58004000 	.word	0x58004000

08000e18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <HAL_IncTick+0x10>)
 8000e1a:	6813      	ldr	r3, [r2, #0]
 8000e1c:	4903      	ldr	r1, [pc, #12]	; (8000e2c <HAL_IncTick+0x14>)
 8000e1e:	6809      	ldr	r1, [r1, #0]
 8000e20:	440b      	add	r3, r1
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000760 	.word	0x20000760
 8000e2c:	20000008 	.word	0x20000008

08000e30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e30:	4b01      	ldr	r3, [pc, #4]	; (8000e38 <HAL_GetTick+0x8>)
 8000e32:	6818      	ldr	r0, [r3, #0]
}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000760 	.word	0x20000760

08000e3c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8000e3c:	4b01      	ldr	r3, [pc, #4]	; (8000e44 <HAL_GetTickPrio+0x8>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000000c 	.word	0x2000000c

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_GetTick>
 8000e50:	4605      	mov	r5, r0
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000e52:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e56:	d002      	beq.n	8000e5e <HAL_Delay+0x16>
    {
      wait += (uint32_t)(uwTickFreq);
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <HAL_Delay+0x24>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	441c      	add	r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	f7ff ffe7 	bl	8000e30 <HAL_GetTick>
 8000e62:	1b40      	subs	r0, r0, r5
 8000e64:	42a0      	cmp	r0, r4
 8000e66:	d3fa      	bcc.n	8000e5e <HAL_Delay+0x16>
    {
    }
  }
 8000e68:	bd38      	pop	{r3, r4, r5, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80de 	beq.w	800103a <HAL_ADC_Init+0x1ca>
 8000e7e:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e80:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000e82:	b303      	cbz	r3, 8000ec6 <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e84:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000e8c:	d005      	beq.n	8000e9a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8000e94:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000e98:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e9a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e9c:	6893      	ldr	r3, [r2, #8]
 8000e9e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ea2:	d11d      	bne.n	8000ee0 <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8000ea4:	6893      	ldr	r3, [r2, #8]
 8000ea6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000eaa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000eb4:	4b62      	ldr	r3, [pc, #392]	; (8001040 <HAL_ADC_Init+0x1d0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	099b      	lsrs	r3, r3, #6
 8000eba:	4a62      	ldr	r2, [pc, #392]	; (8001044 <HAL_ADC_Init+0x1d4>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	099b      	lsrs	r3, r3, #6
 8000ec2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000ec4:	e009      	b.n	8000eda <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 8000ec6:	f7ff fb29 	bl	800051c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000ece:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000ed2:	e7d7      	b.n	8000e84 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8000ed4:	9b01      	ldr	r3, [sp, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000eda:	9b01      	ldr	r3, [sp, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f9      	bne.n	8000ed4 <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ee0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000ee8:	d178      	bne.n	8000fdc <HAL_ADC_Init+0x16c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000eec:	f042 0210 	orr.w	r2, r2, #16
 8000ef0:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000ef4:	f042 0201 	orr.w	r2, r2, #1
 8000ef8:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000efa:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	f012 0f04 	tst.w	r2, #4
 8000f02:	d06d      	beq.n	8000fe0 <HAL_ADC_Init+0x170>
 8000f04:	2101      	movs	r1, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f06:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f08:	f012 0f10 	tst.w	r2, #16
 8000f0c:	f040 808e 	bne.w	800102c <HAL_ADC_Init+0x1bc>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f10:	2900      	cmp	r1, #0
 8000f12:	f040 808b 	bne.w	800102c <HAL_ADC_Init+0x1bc>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f16:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f18:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000f1c:	f042 0202 	orr.w	r2, r2, #2
 8000f20:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f013 0f01 	tst.w	r3, #1
 8000f28:	d10b      	bne.n	8000f42 <HAL_ADC_Init+0xd2>
 8000f2a:	4b47      	ldr	r3, [pc, #284]	; (8001048 <HAL_ADC_Init+0x1d8>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f013 0f01 	tst.w	r3, #1
 8000f32:	d106      	bne.n	8000f42 <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f34:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f36:	4945      	ldr	r1, [pc, #276]	; (800104c <HAL_ADC_Init+0x1dc>)
 8000f38:	688a      	ldr	r2, [r1, #8]
 8000f3a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f42:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8000f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f46:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8000f4a:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8000f4c:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8000f4e:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8000f50:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f52:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5a:	2a01      	cmp	r2, #1
 8000f5c:	d042      	beq.n	8000fe4 <HAL_ADC_Init+0x174>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f60:	b122      	cbz	r2, 8000f6c <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f62:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000f66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f68:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f6a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f6c:	6821      	ldr	r1, [r4, #0]
 8000f6e:	68cd      	ldr	r5, [r1, #12]
 8000f70:	4a37      	ldr	r2, [pc, #220]	; (8001050 <HAL_ADC_Init+0x1e0>)
 8000f72:	402a      	ands	r2, r5
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f78:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	f012 0f04 	tst.w	r2, #4
 8000f80:	d035      	beq.n	8000fee <HAL_ADC_Init+0x17e>
 8000f82:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	f012 0f08 	tst.w	r2, #8
 8000f8a:	d032      	beq.n	8000ff2 <HAL_ADC_Init+0x182>
 8000f8c:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f8e:	b9b1      	cbnz	r1, 8000fbe <HAL_ADC_Init+0x14e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f90:	b9aa      	cbnz	r2, 8000fbe <HAL_ADC_Init+0x14e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f92:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f94:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8000f98:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f9a:	ea42 3181 	orr.w	r1, r2, r1, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fa4:	f022 0202 	bic.w	r2, r2, #2
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d020      	beq.n	8000ff6 <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	6913      	ldr	r3, [r2, #16]
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fbe:	6923      	ldr	r3, [r4, #16]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d02a      	beq.n	800101a <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fc4:	6822      	ldr	r2, [r4, #0]
 8000fc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fc8:	f023 030f 	bic.w	r3, r3, #15
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000fce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fd0:	f023 0303 	bic.w	r3, r3, #3
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6563      	str	r3, [r4, #84]	; 0x54
 8000fda:	e02c      	b.n	8001036 <HAL_ADC_Init+0x1c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fdc:	2000      	movs	r0, #0
 8000fde:	e78d      	b.n	8000efc <HAL_ADC_Init+0x8c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	e790      	b.n	8000f06 <HAL_ADC_Init+0x96>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fe4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000fec:	e7b7      	b.n	8000f5e <HAL_ADC_Init+0xee>
 8000fee:	2100      	movs	r1, #0
 8000ff0:	e7c8      	b.n	8000f84 <HAL_ADC_Init+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	e7cb      	b.n	8000f8e <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ff6:	6821      	ldr	r1, [r4, #0]
 8000ff8:	690b      	ldr	r3, [r1, #16]
 8000ffa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ffe:	f023 0304 	bic.w	r3, r3, #4
 8001002:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001004:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001006:	432a      	orrs	r2, r5
 8001008:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800100a:	432a      	orrs	r2, r5
 800100c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800100e:	432a      	orrs	r2, r5
 8001010:	4313      	orrs	r3, r2
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	610b      	str	r3, [r1, #16]
 8001018:	e7d1      	b.n	8000fbe <HAL_ADC_Init+0x14e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800101a:	6821      	ldr	r1, [r4, #0]
 800101c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800101e:	f023 030f 	bic.w	r3, r3, #15
 8001022:	69e2      	ldr	r2, [r4, #28]
 8001024:	3a01      	subs	r2, #1
 8001026:	4313      	orrs	r3, r2
 8001028:	630b      	str	r3, [r1, #48]	; 0x30
 800102a:	e7d0      	b.n	8000fce <HAL_ADC_Init+0x15e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001034:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001036:	b003      	add	sp, #12
 8001038:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	e7fb      	b.n	8001036 <HAL_ADC_Init+0x1c6>
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	053e2d63 	.word	0x053e2d63
 8001048:	50040000 	.word	0x50040000
 800104c:	50040300 	.word	0x50040300
 8001050:	fff0c007 	.word	0xfff0c007

08001054 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001054:	b4f0      	push	{r4, r5, r6, r7}
 8001056:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8001060:	2a01      	cmp	r2, #1
 8001062:	f000 8204 	beq.w	800146e <HAL_ADC_ConfigChannel+0x41a>
 8001066:	4603      	mov	r3, r0
 8001068:	2201      	movs	r2, #1
 800106a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800106e:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001070:	68b0      	ldr	r0, [r6, #8]
 8001072:	f010 0f04 	tst.w	r0, #4
 8001076:	d00a      	beq.n	800108e <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001080:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001088:	b002      	add	sp, #8
 800108a:	bcf0      	pop	{r4, r5, r6, r7}
 800108c:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800108e:	684d      	ldr	r5, [r1, #4]
 8001090:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001092:	3630      	adds	r6, #48	; 0x30
 8001094:	0a2a      	lsrs	r2, r5, #8
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 800109c:	58b0      	ldr	r0, [r6, r2]
 800109e:	f005 051f 	and.w	r5, r5, #31
 80010a2:	271f      	movs	r7, #31
 80010a4:	40af      	lsls	r7, r5
 80010a6:	ea20 0007 	bic.w	r0, r0, r7
 80010aa:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80010ae:	40ac      	lsls	r4, r5
 80010b0:	4320      	orrs	r0, r4
 80010b2:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010b4:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010b6:	6890      	ldr	r0, [r2, #8]
 80010b8:	f010 0f04 	tst.w	r0, #4
 80010bc:	d06a      	beq.n	8001194 <HAL_ADC_ConfigChannel+0x140>
 80010be:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010c0:	6894      	ldr	r4, [r2, #8]
 80010c2:	f014 0f08 	tst.w	r4, #8
 80010c6:	d067      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x144>
 80010c8:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010ca:	bb50      	cbnz	r0, 8001122 <HAL_ADC_ConfigChannel+0xce>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010cc:	bb4c      	cbnz	r4, 8001122 <HAL_ADC_ConfigChannel+0xce>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010ce:	680e      	ldr	r6, [r1, #0]
 80010d0:	688d      	ldr	r5, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010d2:	3214      	adds	r2, #20
 80010d4:	0e70      	lsrs	r0, r6, #25
 80010d6:	0080      	lsls	r0, r0, #2
 80010d8:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80010dc:	5814      	ldr	r4, [r2, r0]
 80010de:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80010e2:	2707      	movs	r7, #7
 80010e4:	40b7      	lsls	r7, r6
 80010e6:	ea24 0407 	bic.w	r4, r4, r7
 80010ea:	40b5      	lsls	r5, r6
 80010ec:	432c      	orrs	r4, r5
 80010ee:	5014      	str	r4, [r2, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010f0:	694c      	ldr	r4, [r1, #20]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	68c2      	ldr	r2, [r0, #12]
 80010f6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80010fa:	0052      	lsls	r2, r2, #1
 80010fc:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001100:	690d      	ldr	r5, [r1, #16]
 8001102:	2d04      	cmp	r5, #4
 8001104:	d04a      	beq.n	800119c <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001106:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001108:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800110a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800110e:	4cb6      	ldr	r4, [pc, #728]	; (80013e8 <HAL_ADC_ConfigChannel+0x394>)
 8001110:	403c      	ands	r4, r7
 8001112:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001116:	4332      	orrs	r2, r6
 8001118:	4314      	orrs	r4, r2
 800111a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800111e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001122:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001124:	6882      	ldr	r2, [r0, #8]
 8001126:	f012 0f01 	tst.w	r2, #1
 800112a:	f040 819a 	bne.w	8001462 <HAL_ADC_ConfigChannel+0x40e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800112e:	680a      	ldr	r2, [r1, #0]
 8001130:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001132:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001136:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800113a:	ea24 0406 	bic.w	r4, r4, r6
 800113e:	f005 0618 	and.w	r6, r5, #24
 8001142:	4daa      	ldr	r5, [pc, #680]	; (80013ec <HAL_ADC_ConfigChannel+0x398>)
 8001144:	40f5      	lsrs	r5, r6
 8001146:	402a      	ands	r2, r5
 8001148:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800114c:	4322      	orrs	r2, r4
 800114e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001152:	68c8      	ldr	r0, [r1, #12]
 8001154:	4aa6      	ldr	r2, [pc, #664]	; (80013f0 <HAL_ADC_ConfigChannel+0x39c>)
 8001156:	4290      	cmp	r0, r2
 8001158:	d07b      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x1fe>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800115a:	680a      	ldr	r2, [r1, #0]
 800115c:	49a5      	ldr	r1, [pc, #660]	; (80013f4 <HAL_ADC_ConfigChannel+0x3a0>)
 800115e:	420a      	tst	r2, r1
 8001160:	f000 8181 	beq.w	8001466 <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001164:	49a4      	ldr	r1, [pc, #656]	; (80013f8 <HAL_ADC_ConfigChannel+0x3a4>)
 8001166:	6889      	ldr	r1, [r1, #8]
 8001168:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800116c:	48a3      	ldr	r0, [pc, #652]	; (80013fc <HAL_ADC_ConfigChannel+0x3a8>)
 800116e:	6880      	ldr	r0, [r0, #8]
 8001170:	f010 0f01 	tst.w	r0, #1
 8001174:	f040 810b 	bne.w	800138e <HAL_ADC_ConfigChannel+0x33a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001178:	48a1      	ldr	r0, [pc, #644]	; (8001400 <HAL_ADC_ConfigChannel+0x3ac>)
 800117a:	4282      	cmp	r2, r0
 800117c:	f000 810d 	beq.w	800139a <HAL_ADC_ConfigChannel+0x346>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001180:	48a0      	ldr	r0, [pc, #640]	; (8001404 <HAL_ADC_ConfigChannel+0x3b0>)
 8001182:	4282      	cmp	r2, r0
 8001184:	f000 8146 	beq.w	8001414 <HAL_ADC_ConfigChannel+0x3c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001188:	489f      	ldr	r0, [pc, #636]	; (8001408 <HAL_ADC_ConfigChannel+0x3b4>)
 800118a:	4282      	cmp	r2, r0
 800118c:	f000 8156 	beq.w	800143c <HAL_ADC_ConfigChannel+0x3e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001190:	2000      	movs	r0, #0
 8001192:	e776      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001194:	2000      	movs	r0, #0
 8001196:	e793      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001198:	2400      	movs	r4, #0
 800119a:	e796      	b.n	80010ca <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800119c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800119e:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011a0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80011a4:	680a      	ldr	r2, [r1, #0]
 80011a6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80011aa:	bb7d      	cbnz	r5, 800120c <HAL_ADC_ConfigChannel+0x1b8>
 80011ac:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80011b0:	4294      	cmp	r4, r2
 80011b2:	d030      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x1c2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011b4:	681c      	ldr	r4, [r3, #0]
 80011b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80011ba:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80011be:	680a      	ldr	r2, [r1, #0]
 80011c0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80011c4:	bb65      	cbnz	r5, 8001220 <HAL_ADC_ConfigChannel+0x1cc>
 80011c6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80011ca:	4290      	cmp	r0, r2
 80011cc:	d02d      	beq.n	800122a <HAL_ADC_ConfigChannel+0x1d6>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80011d2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80011d4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80011d8:	680a      	ldr	r2, [r1, #0]
 80011da:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80011de:	bb4d      	cbnz	r5, 8001234 <HAL_ADC_ConfigChannel+0x1e0>
 80011e0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d02a      	beq.n	800123e <HAL_ADC_ConfigChannel+0x1ea>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011e8:	681c      	ldr	r4, [r3, #0]
 80011ea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80011ec:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80011ee:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80011f2:	680a      	ldr	r2, [r1, #0]
 80011f4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80011f8:	bb35      	cbnz	r5, 8001248 <HAL_ADC_ConfigChannel+0x1f4>
 80011fa:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80011fe:	4290      	cmp	r0, r2
 8001200:	d18f      	bne.n	8001122 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(*preg,
 8001202:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001204:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001208:	66e2      	str	r2, [r4, #108]	; 0x6c
 800120a:	e78a      	b.n	8001122 <HAL_ADC_ConfigChannel+0xce>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120c:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001210:	fab2 f282 	clz	r2, r2
 8001214:	e7cc      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x15c>
 8001216:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001218:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800121c:	6602      	str	r2, [r0, #96]	; 0x60
 800121e:	e7c9      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x160>
 8001220:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001224:	fab2 f282 	clz	r2, r2
 8001228:	e7cf      	b.n	80011ca <HAL_ADC_ConfigChannel+0x176>
 800122a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800122c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001230:	6662      	str	r2, [r4, #100]	; 0x64
 8001232:	e7cc      	b.n	80011ce <HAL_ADC_ConfigChannel+0x17a>
 8001234:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	e7d2      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x190>
 800123e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001240:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001244:	66a2      	str	r2, [r4, #104]	; 0x68
 8001246:	e7cf      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x194>
 8001248:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800124c:	fab2 f282 	clz	r2, r2
 8001250:	e7d5      	b.n	80011fe <HAL_ADC_ConfigChannel+0x1aa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001252:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001254:	680a      	ldr	r2, [r1, #0]
 8001256:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800125a:	bb96      	cbnz	r6, 80012c2 <HAL_ADC_ConfigChannel+0x26e>
 800125c:	0e90      	lsrs	r0, r2, #26
 800125e:	3001      	adds	r0, #1
 8001260:	f000 001f 	and.w	r0, r0, #31
 8001264:	2809      	cmp	r0, #9
 8001266:	bf8c      	ite	hi
 8001268:	2000      	movhi	r0, #0
 800126a:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800126c:	2800      	cmp	r0, #0
 800126e:	d052      	beq.n	8001316 <HAL_ADC_ConfigChannel+0x2c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001270:	bb9e      	cbnz	r6, 80012da <HAL_ADC_ConfigChannel+0x286>
 8001272:	0e94      	lsrs	r4, r2, #26
 8001274:	3401      	adds	r4, #1
 8001276:	06a4      	lsls	r4, r4, #26
 8001278:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800127c:	bbb6      	cbnz	r6, 80012ec <HAL_ADC_ConfigChannel+0x298>
 800127e:	0e90      	lsrs	r0, r2, #26
 8001280:	3001      	adds	r0, #1
 8001282:	f000 071f 	and.w	r7, r0, #31
 8001286:	2001      	movs	r0, #1
 8001288:	40b8      	lsls	r0, r7
 800128a:	4304      	orrs	r4, r0
 800128c:	bbc6      	cbnz	r6, 8001300 <HAL_ADC_ConfigChannel+0x2ac>
 800128e:	0e92      	lsrs	r2, r2, #26
 8001290:	3201      	adds	r2, #1
 8001292:	f002 021f 	and.w	r2, r2, #31
 8001296:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800129a:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800129c:	4322      	orrs	r2, r4
 800129e:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012a0:	3514      	adds	r5, #20
 80012a2:	0e50      	lsrs	r0, r2, #25
 80012a4:	0080      	lsls	r0, r0, #2
 80012a6:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80012aa:	582e      	ldr	r6, [r5, r0]
 80012ac:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80012b0:	2707      	movs	r7, #7
 80012b2:	4097      	lsls	r7, r2
 80012b4:	ea26 0607 	bic.w	r6, r6, r7
 80012b8:	fa04 f202 	lsl.w	r2, r4, r2
 80012bc:	4332      	orrs	r2, r6
 80012be:	502a      	str	r2, [r5, r0]
 80012c0:	e74b      	b.n	800115a <HAL_ADC_ConfigChannel+0x106>
 80012c2:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012c6:	fab0 f080 	clz	r0, r0
 80012ca:	3001      	adds	r0, #1
 80012cc:	f000 001f 	and.w	r0, r0, #31
 80012d0:	2809      	cmp	r0, #9
 80012d2:	bf8c      	ite	hi
 80012d4:	2000      	movhi	r0, #0
 80012d6:	2001      	movls	r0, #1
 80012d8:	e7c8      	b.n	800126c <HAL_ADC_ConfigChannel+0x218>
 80012da:	fa92 f4a2 	rbit	r4, r2
 80012de:	fab4 f484 	clz	r4, r4
 80012e2:	3401      	adds	r4, #1
 80012e4:	06a4      	lsls	r4, r4, #26
 80012e6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80012ea:	e7c7      	b.n	800127c <HAL_ADC_ConfigChannel+0x228>
 80012ec:	fa92 f0a2 	rbit	r0, r2
 80012f0:	fab0 f080 	clz	r0, r0
 80012f4:	3001      	adds	r0, #1
 80012f6:	f000 071f 	and.w	r7, r0, #31
 80012fa:	2001      	movs	r0, #1
 80012fc:	40b8      	lsls	r0, r7
 80012fe:	e7c4      	b.n	800128a <HAL_ADC_ConfigChannel+0x236>
 8001300:	fa92 f2a2 	rbit	r2, r2
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	3201      	adds	r2, #1
 800130a:	f002 021f 	and.w	r2, r2, #31
 800130e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001312:	0512      	lsls	r2, r2, #20
 8001314:	e7c2      	b.n	800129c <HAL_ADC_ConfigChannel+0x248>
 8001316:	b9ce      	cbnz	r6, 800134c <HAL_ADC_ConfigChannel+0x2f8>
 8001318:	0e94      	lsrs	r4, r2, #26
 800131a:	3401      	adds	r4, #1
 800131c:	06a4      	lsls	r4, r4, #26
 800131e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001322:	b9e6      	cbnz	r6, 800135e <HAL_ADC_ConfigChannel+0x30a>
 8001324:	0e90      	lsrs	r0, r2, #26
 8001326:	3001      	adds	r0, #1
 8001328:	f000 071f 	and.w	r7, r0, #31
 800132c:	2001      	movs	r0, #1
 800132e:	40b8      	lsls	r0, r7
 8001330:	4304      	orrs	r4, r0
 8001332:	b9f6      	cbnz	r6, 8001372 <HAL_ADC_ConfigChannel+0x31e>
 8001334:	0e90      	lsrs	r0, r2, #26
 8001336:	3001      	adds	r0, #1
 8001338:	f000 001f 	and.w	r0, r0, #31
 800133c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001340:	3a1e      	subs	r2, #30
 8001342:	0512      	lsls	r2, r2, #20
 8001344:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001348:	4322      	orrs	r2, r4
 800134a:	e7a8      	b.n	800129e <HAL_ADC_ConfigChannel+0x24a>
 800134c:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001350:	fab4 f484 	clz	r4, r4
 8001354:	3401      	adds	r4, #1
 8001356:	06a4      	lsls	r4, r4, #26
 8001358:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800135c:	e7e1      	b.n	8001322 <HAL_ADC_ConfigChannel+0x2ce>
 800135e:	fa92 f0a2 	rbit	r0, r2
 8001362:	fab0 f080 	clz	r0, r0
 8001366:	3001      	adds	r0, #1
 8001368:	f000 071f 	and.w	r7, r0, #31
 800136c:	2001      	movs	r0, #1
 800136e:	40b8      	lsls	r0, r7
 8001370:	e7de      	b.n	8001330 <HAL_ADC_ConfigChannel+0x2dc>
 8001372:	fa92 f0a2 	rbit	r0, r2
 8001376:	fab0 f080 	clz	r0, r0
 800137a:	3001      	adds	r0, #1
 800137c:	f000 001f 	and.w	r0, r0, #31
 8001380:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001384:	3a1e      	subs	r2, #30
 8001386:	0512      	lsls	r2, r2, #20
 8001388:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800138c:	e7dc      	b.n	8001348 <HAL_ADC_ConfigChannel+0x2f4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8001396:	2001      	movs	r0, #1
 8001398:	e673      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800139a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800139e:	f47f aeef 	bne.w	8001180 <HAL_ADC_ConfigChannel+0x12c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	4a15      	ldr	r2, [pc, #84]	; (80013fc <HAL_ADC_ConfigChannel+0x3a8>)
 80013a6:	4291      	cmp	r1, r2
 80013a8:	d001      	beq.n	80013ae <HAL_ADC_ConfigChannel+0x35a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013aa:	2000      	movs	r0, #0
 80013ac:	e669      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80013ae:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <HAL_ADC_ConfigChannel+0x3a4>)
 80013b4:	6881      	ldr	r1, [r0, #8]
 80013b6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80013ba:	430a      	orrs	r2, r1
 80013bc:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_ADC_ConfigChannel+0x3b8>)
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	0992      	lsrs	r2, r2, #6
 80013c4:	4912      	ldr	r1, [pc, #72]	; (8001410 <HAL_ADC_ConfigChannel+0x3bc>)
 80013c6:	fba1 1202 	umull	r1, r2, r1, r2
 80013ca:	0992      	lsrs	r2, r2, #6
 80013cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013d0:	0091      	lsls	r1, r2, #2
 80013d2:	9101      	str	r1, [sp, #4]
              while(wait_loop_index != 0UL)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_ConfigChannel+0x388>
                wait_loop_index--;
 80013d6:	9a01      	ldr	r2, [sp, #4]
 80013d8:	3a01      	subs	r2, #1
 80013da:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80013dc:	9a01      	ldr	r2, [sp, #4]
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x382>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e2:	2000      	movs	r0, #0
 80013e4:	e64d      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
 80013e6:	bf00      	nop
 80013e8:	03fff000 	.word	0x03fff000
 80013ec:	0007ffff 	.word	0x0007ffff
 80013f0:	407f0000 	.word	0x407f0000
 80013f4:	80080000 	.word	0x80080000
 80013f8:	50040300 	.word	0x50040300
 80013fc:	50040000 	.word	0x50040000
 8001400:	c7520000 	.word	0xc7520000
 8001404:	cb840000 	.word	0xcb840000
 8001408:	80000001 	.word	0x80000001
 800140c:	20000004 	.word	0x20000004
 8001410:	053e2d63 	.word	0x053e2d63
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001414:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8001418:	f47f aeb6 	bne.w	8001188 <HAL_ADC_ConfigChannel+0x134>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <HAL_ADC_ConfigChannel+0x420>)
 8001420:	4291      	cmp	r1, r2
 8001422:	d001      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x3d4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001424:	2000      	movs	r0, #0
 8001426:	e62c      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001428:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <HAL_ADC_ConfigChannel+0x424>)
 800142e:	6881      	ldr	r1, [r0, #8]
 8001430:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001434:	430a      	orrs	r2, r1
 8001436:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001438:	2000      	movs	r0, #0
 800143a:	e622      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800143c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8001440:	d113      	bne.n	800146a <HAL_ADC_ConfigChannel+0x416>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_ADC_ConfigChannel+0x420>)
 8001446:	4291      	cmp	r1, r2
 8001448:	d001      	beq.n	800144e <HAL_ADC_ConfigChannel+0x3fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144a:	2000      	movs	r0, #0
 800144c:	e619      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800144e:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_ADC_ConfigChannel+0x424>)
 8001454:	6881      	ldr	r1, [r0, #8]
 8001456:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800145a:	430a      	orrs	r2, r1
 800145c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145e:	2000      	movs	r0, #0
 8001460:	e60f      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
 8001462:	2000      	movs	r0, #0
 8001464:	e60d      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
 8001466:	2000      	movs	r0, #0
 8001468:	e60b      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
 800146a:	2000      	movs	r0, #0
 800146c:	e609      	b.n	8001082 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800146e:	2002      	movs	r0, #2
 8001470:	e60a      	b.n	8001088 <HAL_ADC_ConfigChannel+0x34>
 8001472:	bf00      	nop
 8001474:	50040000 	.word	0x50040000
 8001478:	50040300 	.word	0x50040300

0800147c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800147e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001480:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	0200      	lsls	r0, r0, #8
 800148a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001490:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001494:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001498:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_NVIC_SetPriority+0x60>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014aa:	f1c3 0407 	rsb	r4, r3, #7
 80014ae:	2c04      	cmp	r4, #4
 80014b0:	bf28      	it	cs
 80014b2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b4:	1d1d      	adds	r5, r3, #4
 80014b6:	2d06      	cmp	r5, #6
 80014b8:	d918      	bls.n	80014ec <HAL_NVIC_SetPriority+0x4c>
 80014ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 35ff 	mov.w	r5, #4294967295
 80014c0:	fa05 f404 	lsl.w	r4, r5, r4
 80014c4:	ea21 0104 	bic.w	r1, r1, r4
 80014c8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ca:	fa05 f303 	lsl.w	r3, r5, r3
 80014ce:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80014d4:	2800      	cmp	r0, #0
 80014d6:	db0b      	blt.n	80014f0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	0109      	lsls	r1, r1, #4
 80014da:	b2c9      	uxtb	r1, r1
 80014dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80014e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80014e4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014e8:	bc30      	pop	{r4, r5}
 80014ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ec:	2300      	movs	r3, #0
 80014ee:	e7e5      	b.n	80014bc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	f000 000f 	and.w	r0, r0, #15
 80014f4:	0109      	lsls	r1, r1, #4
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <HAL_NVIC_SetPriority+0x64>)
 80014fa:	5419      	strb	r1, [r3, r0]
 80014fc:	e7f4      	b.n	80014e8 <HAL_NVIC_SetPriority+0x48>
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	e000ed14 	.word	0xe000ed14

08001508 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001508:	2800      	cmp	r0, #0
 800150a:	db07      	blt.n	800151c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150c:	f000 021f 	and.w	r2, r0, #31
 8001510:	0940      	lsrs	r0, r0, #5
 8001512:	2301      	movs	r3, #1
 8001514:	4093      	lsls	r3, r2
 8001516:	4a02      	ldr	r2, [pc, #8]	; (8001520 <HAL_NVIC_EnableIRQ+0x18>)
 8001518:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001524:	6803      	ldr	r3, [r0, #0]
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d914      	bls.n	8001556 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800152c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800152e:	f022 0103 	bic.w	r1, r2, #3
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8001534:	440a      	add	r2, r1
 8001536:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3b08      	subs	r3, #8
 800153c:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	091b      	lsrs	r3, r3, #4
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001546:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001548:	f003 031c 	and.w	r3, r3, #28
 800154c:	2201      	movs	r2, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001554:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001556:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001558:	f022 0203 	bic.w	r2, r2, #3
 800155c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001560:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8001564:	6482      	str	r2, [r0, #72]	; 0x48
 8001566:	e7e7      	b.n	8001538 <DMA_CalcDMAMUXChannelBaseAndMask+0x14>
 8001568:	40020407 	.word	0x40020407
 800156c:	4002081c 	.word	0x4002081c
 8001570:	cccccccd 	.word	0xcccccccd
 8001574:	40020880 	.word	0x40020880

08001578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001578:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800157c:	441a      	add	r2, r3
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001584:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001586:	3b01      	subs	r3, #1
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	1000823f 	.word	0x1000823f
 800159c:	40020940 	.word	0x40020940

080015a0 <HAL_DMA_Init>:
  if (hdma == NULL)
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d05c      	beq.n	800165e <HAL_DMA_Init+0xbe>
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015a8:	6802      	ldr	r2, [r0, #0]
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_DMA_Init+0xc4>)
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d83e      	bhi.n	800162e <HAL_DMA_Init+0x8e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_DMA_Init+0xc8>)
 80015b2:	4413      	add	r3, r2
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <HAL_DMA_Init+0xcc>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_DMA_Init+0xd0>)
 80015c2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80015ca:	6821      	ldr	r1, [r4, #0]
 80015cc:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015ce:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80015d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80015d6:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80015da:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015dc:	6920      	ldr	r0, [r4, #16]
 80015de:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e0:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e2:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e4:	69a0      	ldr	r0, [r4, #24]
 80015e6:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e8:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ea:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ec:	6a20      	ldr	r0, [r4, #32]
 80015ee:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80015f0:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80015f2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff ff95 	bl	8001524 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015fa:	68a3      	ldr	r3, [r4, #8]
 80015fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001600:	d020      	beq.n	8001644 <HAL_DMA_Init+0xa4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001602:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001604:	7922      	ldrb	r2, [r4, #4]
 8001606:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001608:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800160a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800160c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	3b01      	subs	r3, #1
 8001612:	2b03      	cmp	r3, #3
 8001614:	d919      	bls.n	800164a <HAL_DMA_Init+0xaa>
    hdma->DMAmuxRequestGen = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800161a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800161c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161e:	2000      	movs	r0, #0
 8001620:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001622:	2301      	movs	r3, #1
 8001624:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8001628:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800162c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_DMA_Init+0xd4>)
 8001630:	4413      	add	r3, r2
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_DMA_Init+0xcc>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_DMA_Init+0xd8>)
 8001640:	6403      	str	r3, [r0, #64]	; 0x40
 8001642:	e7bf      	b.n	80015c4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001644:	2300      	movs	r3, #0
 8001646:	6063      	str	r3, [r4, #4]
 8001648:	e7db      	b.n	8001602 <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff ff94 	bl	8001578 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001650:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001658:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	e7df      	b.n	800161e <HAL_DMA_Init+0x7e>
    return HAL_ERROR;
 800165e:	2001      	movs	r0, #1
}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40020407 	.word	0x40020407
 8001668:	bffdfff8 	.word	0xbffdfff8
 800166c:	cccccccd 	.word	0xcccccccd
 8001670:	40020000 	.word	0x40020000
 8001674:	bffdfbf8 	.word	0xbffdfbf8
 8001678:	40020400 	.word	0x40020400

0800167c <HAL_DMA_IRQHandler>:
{
 800167c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800167e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001680:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001682:	6804      	ldr	r4, [r0, #0]
 8001684:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001686:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001688:	f003 031c 	and.w	r3, r3, #28
 800168c:	2204      	movs	r2, #4
 800168e:	409a      	lsls	r2, r3
 8001690:	420a      	tst	r2, r1
 8001692:	d015      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x44>
 8001694:	f015 0f04 	tst.w	r5, #4
 8001698:	d012      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	f013 0f20 	tst.w	r3, #32
 80016a0:	d103      	bne.n	80016aa <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80016aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016ac:	f003 021c 	and.w	r2, r3, #28
 80016b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016b2:	2304      	movs	r3, #4
 80016b4:	4093      	lsls	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80016b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80016ba:	b103      	cbz	r3, 80016be <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80016bc:	4798      	blx	r3
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016c0:	2202      	movs	r2, #2
 80016c2:	409a      	lsls	r2, r3
 80016c4:	420a      	tst	r2, r1
 80016c6:	d01c      	beq.n	8001702 <HAL_DMA_IRQHandler+0x86>
 80016c8:	f015 0f02 	tst.w	r5, #2
 80016cc:	d019      	beq.n	8001702 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	f013 0f20 	tst.w	r3, #32
 80016d4:	d106      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f023 030a 	bic.w	r3, r3, #10
 80016dc:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80016de:	2301      	movs	r3, #1
 80016e0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80016e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016e6:	f003 021c 	and.w	r2, r3, #28
 80016ea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016ec:	2302      	movs	r3, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80016f2:	2300      	movs	r3, #0
 80016f4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80016f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0df      	beq.n	80016be <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80016fe:	4798      	blx	r3
 8001700:	e7dd      	b.n	80016be <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001702:	2208      	movs	r2, #8
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	420b      	tst	r3, r1
 800170a:	d0d8      	beq.n	80016be <HAL_DMA_IRQHandler+0x42>
 800170c:	f015 0f08 	tst.w	r5, #8
 8001710:	d0d5      	beq.n	80016be <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	f023 030e 	bic.w	r3, r3, #14
 8001718:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800171a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800171c:	f003 031c 	and.w	r3, r3, #28
 8001720:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001722:	2201      	movs	r2, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800172a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800172c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001730:	2300      	movs	r3, #0
 8001732:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001736:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0c0      	beq.n	80016be <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800173c:	4798      	blx	r3
  return;
 800173e:	e7be      	b.n	80016be <HAL_DMA_IRQHandler+0x42>

08001740 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8001742:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001744:	e03a      	b.n	80017bc <HAL_GPIO_Init+0x7c>
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001746:	2404      	movs	r4, #4
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0xc>
 800174a:	2400      	movs	r4, #0
 800174c:	40b4      	lsls	r4, r6
 800174e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001750:	3502      	adds	r5, #2
 8001752:	4e58      	ldr	r6, [pc, #352]	; (80018b4 <HAL_GPIO_Init+0x174>)
 8001754:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001758:	4c57      	ldr	r4, [pc, #348]	; (80018b8 <HAL_GPIO_Init+0x178>)
 800175a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800175e:	43d4      	mvns	r4, r2
 8001760:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001764:	684f      	ldr	r7, [r1, #4]
 8001766:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800176a:	d001      	beq.n	8001770 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800176c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001770:	4d51      	ldr	r5, [pc, #324]	; (80018b8 <HAL_GPIO_Init+0x178>)
 8001772:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 8001776:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800177a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177e:	684f      	ldr	r7, [r1, #4]
 8001780:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001784:	d001      	beq.n	800178a <HAL_GPIO_Init+0x4a>
        {
          temp |= iocurrent;
 8001786:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800178a:	4d4b      	ldr	r5, [pc, #300]	; (80018b8 <HAL_GPIO_Init+0x178>)
 800178c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001790:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001792:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001796:	684f      	ldr	r7, [r1, #4]
 8001798:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800179c:	d001      	beq.n	80017a2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800179e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80017a2:	4d45      	ldr	r5, [pc, #276]	; (80018b8 <HAL_GPIO_Init+0x178>)
 80017a4:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80017a6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80017a8:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017aa:	684e      	ldr	r6, [r1, #4]
 80017ac:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80017b0:	d001      	beq.n	80017b6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80017b2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80017b6:	4a40      	ldr	r2, [pc, #256]	; (80018b8 <HAL_GPIO_Init+0x178>)
 80017b8:	6054      	str	r4, [r2, #4]
      }
    }
    
    position++;
 80017ba:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017bc:	680a      	ldr	r2, [r1, #0]
 80017be:	fa32 f403 	lsrs.w	r4, r2, r3
 80017c2:	d074      	beq.n	80018ae <HAL_GPIO_Init+0x16e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c4:	2401      	movs	r4, #1
 80017c6:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80017c8:	4022      	ands	r2, r4
 80017ca:	d0f6      	beq.n	80017ba <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	684d      	ldr	r5, [r1, #4]
 80017ce:	2d02      	cmp	r5, #2
 80017d0:	d001      	beq.n	80017d6 <HAL_GPIO_Init+0x96>
 80017d2:	2d12      	cmp	r5, #18
 80017d4:	d110      	bne.n	80017f8 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 80017d6:	08de      	lsrs	r6, r3, #3
 80017d8:	3608      	adds	r6, #8
 80017da:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017de:	f003 0507 	and.w	r5, r3, #7
 80017e2:	00af      	lsls	r7, r5, #2
 80017e4:	250f      	movs	r5, #15
 80017e6:	40bd      	lsls	r5, r7
 80017e8:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ec:	690d      	ldr	r5, [r1, #16]
 80017ee:	40bd      	lsls	r5, r7
 80017f0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80017f4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80017f8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017fa:	005f      	lsls	r7, r3, #1
 80017fc:	2503      	movs	r5, #3
 80017fe:	40bd      	lsls	r5, r7
 8001800:	43ed      	mvns	r5, r5
 8001802:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001806:	684e      	ldr	r6, [r1, #4]
 8001808:	f006 0603 	and.w	r6, r6, #3
 800180c:	40be      	lsls	r6, r7
 800180e:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8001812:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001814:	684e      	ldr	r6, [r1, #4]
 8001816:	f106 3cff 	add.w	ip, r6, #4294967295
 800181a:	f1bc 0f01 	cmp.w	ip, #1
 800181e:	d903      	bls.n	8001828 <HAL_GPIO_Init+0xe8>
 8001820:	2e11      	cmp	r6, #17
 8001822:	d001      	beq.n	8001828 <HAL_GPIO_Init+0xe8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001824:	2e12      	cmp	r6, #18
 8001826:	d110      	bne.n	800184a <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 8001828:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182a:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800182e:	68ce      	ldr	r6, [r1, #12]
 8001830:	40be      	lsls	r6, r7
 8001832:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001836:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001838:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800183a:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800183e:	684e      	ldr	r6, [r1, #4]
 8001840:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001844:	409e      	lsls	r6, r3
 8001846:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001848:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800184a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800184c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800184e:	688c      	ldr	r4, [r1, #8]
 8001850:	40bc      	lsls	r4, r7
 8001852:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001854:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001856:	684c      	ldr	r4, [r1, #4]
 8001858:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800185c:	d0ad      	beq.n	80017ba <HAL_GPIO_Init+0x7a>
        temp = SYSCFG->EXTICR[position >> 2u];
 800185e:	089d      	lsrs	r5, r3, #2
 8001860:	1cae      	adds	r6, r5, #2
 8001862:	4c14      	ldr	r4, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x174>)
 8001864:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001868:	f003 0403 	and.w	r4, r3, #3
 800186c:	00a6      	lsls	r6, r4, #2
 800186e:	240f      	movs	r4, #15
 8001870:	40b4      	lsls	r4, r6
 8001872:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001876:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800187a:	f43f af66 	beq.w	800174a <HAL_GPIO_Init+0xa>
 800187e:	4c0f      	ldr	r4, [pc, #60]	; (80018bc <HAL_GPIO_Init+0x17c>)
 8001880:	42a0      	cmp	r0, r4
 8001882:	d00e      	beq.n	80018a2 <HAL_GPIO_Init+0x162>
 8001884:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001888:	42a0      	cmp	r0, r4
 800188a:	d00c      	beq.n	80018a6 <HAL_GPIO_Init+0x166>
 800188c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001890:	42a0      	cmp	r0, r4
 8001892:	d00a      	beq.n	80018aa <HAL_GPIO_Init+0x16a>
 8001894:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001898:	42a0      	cmp	r0, r4
 800189a:	f43f af54 	beq.w	8001746 <HAL_GPIO_Init+0x6>
 800189e:	2407      	movs	r4, #7
 80018a0:	e754      	b.n	800174c <HAL_GPIO_Init+0xc>
 80018a2:	2401      	movs	r4, #1
 80018a4:	e752      	b.n	800174c <HAL_GPIO_Init+0xc>
 80018a6:	2402      	movs	r4, #2
 80018a8:	e750      	b.n	800174c <HAL_GPIO_Init+0xc>
 80018aa:	2403      	movs	r4, #3
 80018ac:	e74e      	b.n	800174c <HAL_GPIO_Init+0xc>
  }
}
 80018ae:	bcf0      	pop	{r4, r5, r6, r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40010000 	.word	0x40010000
 80018b8:	58000800 	.word	0x58000800
 80018bc:	48000400 	.word	0x48000400

080018c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018c0:	6803      	ldr	r3, [r0, #0]
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	f012 0f02 	tst.w	r2, #2
 80018c8:	d001      	beq.n	80018ce <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ce:	6803      	ldr	r3, [r0, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	f012 0f01 	tst.w	r2, #1
 80018d6:	d103      	bne.n	80018e0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	619a      	str	r2, [r3, #24]
  }
}
 80018e0:	4770      	bx	lr

080018e2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80018e2:	b470      	push	{r4, r5, r6}
 80018e4:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80018e6:	6805      	ldr	r5, [r0, #0]
 80018e8:	6868      	ldr	r0, [r5, #4]
 80018ea:	0d74      	lsrs	r4, r6, #21
 80018ec:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80018f0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80018f4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80018f8:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80018fc:	f044 0403 	orr.w	r4, r4, #3
 8001900:	ea20 0004 	bic.w	r0, r0, r4
 8001904:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800190c:	4319      	orrs	r1, r3
 800190e:	4331      	orrs	r1, r6
 8001910:	4301      	orrs	r1, r0
 8001912:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001914:	bc70      	pop	{r4, r5, r6}
 8001916:	4770      	bx	lr

08001918 <I2C_IsAcknowledgeFailed>:
{
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	4604      	mov	r4, r0
 800191c:	460d      	mov	r5, r1
 800191e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001920:	6803      	ldr	r3, [r0, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f013 0f10 	tst.w	r3, #16
 8001928:	d01c      	beq.n	8001964 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	f012 0f20 	tst.w	r2, #32
 8001932:	d119      	bne.n	8001968 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001934:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001938:	d0f7      	beq.n	800192a <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193a:	f7ff fa79 	bl	8000e30 <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	42a8      	cmp	r0, r5
 8001942:	d801      	bhi.n	8001948 <I2C_IsAcknowledgeFailed+0x30>
 8001944:	2d00      	cmp	r5, #0
 8001946:	d1f0      	bne.n	800192a <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800194a:	f043 0320 	orr.w	r3, r3, #32
 800194e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001950:	2320      	movs	r3, #32
 8001952:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800195c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
 8001962:	e020      	b.n	80019a6 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8001964:	2000      	movs	r0, #0
 8001966:	e01e      	b.n	80019a6 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001968:	2210      	movs	r2, #16
 800196a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	2520      	movs	r5, #32
 8001970:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff ffa4 	bl	80018c0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	6853      	ldr	r3, [r2, #4]
 800197c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001980:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001984:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800198e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001996:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800199a:	2300      	movs	r3, #0
 800199c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80019a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80019a4:	2001      	movs	r0, #1
}
 80019a6:	bd70      	pop	{r4, r5, r6, pc}

080019a8 <I2C_WaitOnFlagUntilTimeout>:
{
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	4605      	mov	r5, r0
 80019ac:	460f      	mov	r7, r1
 80019ae:	4616      	mov	r6, r2
 80019b0:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	ea37 0303 	bics.w	r3, r7, r3
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	42b3      	cmp	r3, r6
 80019c2:	d118      	bne.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80019c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80019c8:	d0f3      	beq.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ca:	f7ff fa31 	bl	8000e30 <HAL_GetTick>
 80019ce:	9b06      	ldr	r3, [sp, #24]
 80019d0:	1ac0      	subs	r0, r0, r3
 80019d2:	42a0      	cmp	r0, r4
 80019d4:	d801      	bhi.n	80019da <I2C_WaitOnFlagUntilTimeout+0x32>
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d1eb      	bne.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019da:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	2320      	movs	r3, #32
 80019e4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80019ee:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80019f2:	2001      	movs	r0, #1
 80019f4:	e000      	b.n	80019f8 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80019f6:	2000      	movs	r0, #0
}
 80019f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019fa <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80019fa:	b570      	push	{r4, r5, r6, lr}
 80019fc:	4605      	mov	r5, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f013 0f20 	tst.w	r3, #32
 8001a0a:	d11a      	bne.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0c:	4632      	mov	r2, r6
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4628      	mov	r0, r5
 8001a12:	f7ff ff81 	bl	8001918 <I2C_IsAcknowledgeFailed>
 8001a16:	b9b0      	cbnz	r0, 8001a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a18:	f7ff fa0a 	bl	8000e30 <HAL_GetTick>
 8001a1c:	1b80      	subs	r0, r0, r6
 8001a1e:	42a0      	cmp	r0, r4
 8001a20:	d801      	bhi.n	8001a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001a22:	2c00      	cmp	r4, #0
 8001a24:	d1ed      	bne.n	8001a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a26:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001a3a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
}
 8001a40:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001a42:	2000      	movs	r0, #0
 8001a44:	e7fc      	b.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001a46:	2001      	movs	r0, #1
 8001a48:	e7fa      	b.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001a4a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001a4a:	b570      	push	{r4, r5, r6, lr}
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	460d      	mov	r5, r1
 8001a50:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f013 0f04 	tst.w	r3, #4
 8001a5a:	d13e      	bne.n	8001ada <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5c:	4632      	mov	r2, r6
 8001a5e:	4629      	mov	r1, r5
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff ff59 	bl	8001918 <I2C_IsAcknowledgeFailed>
 8001a66:	4601      	mov	r1, r0
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d138      	bne.n	8001ade <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	f012 0f20 	tst.w	r2, #32
 8001a74:	d113      	bne.n	8001a9e <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a76:	f7ff f9db 	bl	8000e30 <HAL_GetTick>
 8001a7a:	1b80      	subs	r0, r0, r6
 8001a7c:	42a8      	cmp	r0, r5
 8001a7e:	d801      	bhi.n	8001a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d1e6      	bne.n	8001a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a86:	f043 0320 	orr.w	r3, r3, #32
 8001a8a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001a92:	2300      	movs	r3, #0
 8001a94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a98:	2101      	movs	r1, #1
}
 8001a9a:	4608      	mov	r0, r1
 8001a9c:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	f012 0f04 	tst.w	r2, #4
 8001aa4:	d002      	beq.n	8001aac <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001aa6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d1f6      	bne.n	8001a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aac:	2220      	movs	r2, #32
 8001aae:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001ab0:	6821      	ldr	r1, [r4, #0]
 8001ab2:	684b      	ldr	r3, [r1, #4]
 8001ab4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001ab8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001abc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ace:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001ad2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	e7df      	b.n	8001a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8001ada:	2100      	movs	r1, #0
 8001adc:	e7dd      	b.n	8001a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001ade:	2101      	movs	r1, #1
 8001ae0:	e7db      	b.n	8001a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08001ae2 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d059      	beq.n	8001b9a <HAL_I2C_Init+0xb8>
{
 8001ae6:	b510      	push	{r4, lr}
 8001ae8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d043      	beq.n	8001b7a <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001af2:	2324      	movs	r3, #36	; 0x24
 8001af4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	6813      	ldr	r3, [r2, #0]
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b02:	6863      	ldr	r3, [r4, #4]
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001b0a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	6893      	ldr	r3, [r2, #8]
 8001b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b14:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b16:	68e3      	ldr	r3, [r4, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d033      	beq.n	8001b84 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b1c:	68a3      	ldr	r3, [r4, #8]
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001b24:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b26:	68e3      	ldr	r3, [r4, #12]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d031      	beq.n	8001b90 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b2c:	6822      	ldr	r2, [r4, #0]
 8001b2e:	6853      	ldr	r3, [r2, #4]
 8001b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b38:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	68d3      	ldr	r3, [r2, #12]
 8001b3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b42:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b44:	6923      	ldr	r3, [r4, #16]
 8001b46:	6962      	ldr	r2, [r4, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	69a1      	ldr	r1, [r4, #24]
 8001b4c:	6822      	ldr	r2, [r4, #0]
 8001b4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b52:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b54:	69e3      	ldr	r3, [r4, #28]
 8001b56:	6a21      	ldr	r1, [r4, #32]
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001b5e:	6822      	ldr	r2, [r4, #0]
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	2000      	movs	r0, #0
 8001b6a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b72:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001b78:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001b7a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001b7e:	f7fe fde9 	bl	8000754 <HAL_I2C_MspInit>
 8001b82:	e7b6      	b.n	8001af2 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b84:	68a3      	ldr	r3, [r4, #8]
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8c:	6093      	str	r3, [r2, #8]
 8001b8e:	e7ca      	b.n	8001b26 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e7c8      	b.n	8001b2c <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001b9a:	2001      	movs	r0, #1
}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_I2C_Master_Receive>:
{
 8001ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ba4:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001baa:	b2ed      	uxtb	r5, r5
 8001bac:	2d20      	cmp	r5, #32
 8001bae:	f040 80a4 	bne.w	8001cfa <HAL_I2C_Master_Receive+0x15a>
    __HAL_LOCK(hi2c);
 8001bb2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001bb6:	2c01      	cmp	r4, #1
 8001bb8:	f000 80a4 	beq.w	8001d04 <HAL_I2C_Master_Receive+0x164>
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	4617      	mov	r7, r2
 8001bc0:	460e      	mov	r6, r1
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	f04f 0901 	mov.w	r9, #1
 8001bc8:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f930 	bl	8000e30 <HAL_GetTick>
 8001bd0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bd2:	9000      	str	r0, [sp, #0]
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	464a      	mov	r2, r9
 8001bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7ff fee3 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001be2:	2800      	cmp	r0, #0
 8001be4:	f040 8090 	bne.w	8001d08 <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001be8:	2322      	movs	r3, #34	; 0x22
 8001bea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001bf8:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bfa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bfe:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2bff      	cmp	r3, #255	; 0xff
 8001c06:	d90a      	bls.n	8001c1e <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c08:	22ff      	movs	r2, #255	; 0xff
 8001c0a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_I2C_Master_Receive+0x178>)
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c14:	4631      	mov	r1, r6
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff fe63 	bl	80018e2 <I2C_TransferConfig>
 8001c1c:	e018      	b.n	8001c50 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001c1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c20:	b292      	uxth	r2, r2
 8001c22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_I2C_Master_Receive+0x178>)
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	4631      	mov	r1, r6
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff fe56 	bl	80018e2 <I2C_TransferConfig>
 8001c36:	e00b      	b.n	8001c50 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001c38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	4631      	mov	r1, r6
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff fe49 	bl	80018e2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d033      	beq.n	8001cc0 <HAL_I2C_Master_Receive+0x120>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c58:	462a      	mov	r2, r5
 8001c5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff fef4 	bl	8001a4a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d152      	bne.n	8001d0c <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c6c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c70:	3301      	adds	r3, #1
 8001c72:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001c74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001c7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c7e:	3a01      	subs	r2, #1
 8001c80:	b292      	uxth	r2, r2
 8001c82:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c86:	b292      	uxth	r2, r2
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d0e1      	beq.n	8001c50 <HAL_I2C_Master_Receive+0xb0>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1df      	bne.n	8001c50 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c90:	9500      	str	r5, [sp, #0]
 8001c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c94:	2200      	movs	r2, #0
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff fe85 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d136      	bne.n	8001d10 <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d9c6      	bls.n	8001c38 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb6:	4631      	mov	r1, r6
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff fe12 	bl	80018e2 <I2C_TransferConfig>
 8001cbe:	e7c7      	b.n	8001c50 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc0:	462a      	mov	r2, r5
 8001cc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff fe98 	bl	80019fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	bb10      	cbnz	r0, 8001d14 <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001cd4:	6820      	ldr	r0, [r4, #0]
 8001cd6:	6842      	ldr	r2, [r0, #4]
 8001cd8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001cdc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001ce0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001cf4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001cf8:	e000      	b.n	8001cfc <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	b003      	add	sp, #12
 8001d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001d04:	2302      	movs	r3, #2
 8001d06:	e7f9      	b.n	8001cfc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e7f7      	b.n	8001cfc <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e7f5      	b.n	8001cfc <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e7f3      	b.n	8001cfc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e7f1      	b.n	8001cfc <HAL_I2C_Master_Receive+0x15c>
 8001d18:	80002400 	.word	0x80002400

08001d1c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8001d1c:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d124      	bne.n	8001d74 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d022      	beq.n	8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001d32:	2301      	movs	r3, #1
 8001d34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d38:	2324      	movs	r3, #36	; 0x24
 8001d3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d3e:	6802      	ldr	r2, [r0, #0]
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d48:	6802      	ldr	r2, [r0, #0]
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d50:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d52:	6802      	ldr	r2, [r0, #0]
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	4319      	orrs	r1, r3
 8001d58:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d5a:	6802      	ldr	r2, [r0, #0]
 8001d5c:	6813      	ldr	r3, [r2, #0]
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	2320      	movs	r3, #32
 8001d66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001d70:	4618      	mov	r0, r3
 8001d72:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2002      	movs	r0, #2
 8001d76:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001d78:	2002      	movs	r0, #2
  }
}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d122      	bne.n	8001dcc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d86:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d020      	beq.n	8001dd0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d94:	2324      	movs	r3, #36	; 0x24
 8001d96:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d9a:	6802      	ldr	r2, [r0, #0]
 8001d9c:	6813      	ldr	r3, [r2, #0]
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001da4:	6802      	ldr	r2, [r0, #0]
 8001da6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001da8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dac:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001db0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2002      	movs	r0, #2
 8001dce:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001dd0:	2002      	movs	r0, #2
  }
}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd4:	4a02      	ldr	r2, [pc, #8]	; (8001de0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	4770      	bx	lr
 8001de0:	58000400 	.word	0x58000400

08001de4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <HAL_PWREx_GetVoltageRange+0xc>)
 8001de6:	6818      	ldr	r0, [r3, #0]
}
 8001de8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	58000400 	.word	0x58000400

08001df4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b08d      	sub	sp, #52	; 0x34
 8001df8:	4606      	mov	r6, r0
 8001dfa:	460f      	mov	r7, r1
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001dfc:	4c2a      	ldr	r4, [pc, #168]	; (8001ea8 <RCC_SetFlashLatency+0xb4>)
 8001dfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e02:	ad0c      	add	r5, sp, #48	; 0x30
 8001e04:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001e08:	ab05      	add	r3, sp, #20
 8001e0a:	f104 0210 	add.w	r2, r4, #16
 8001e0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001e14:	ad01      	add	r5, sp, #4
 8001e16:	341c      	adds	r4, #28
 8001e18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e1c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e20:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8001e24:	d011      	beq.n	8001e4a <RCC_SetFlashLatency+0x56>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d822      	bhi.n	8001e72 <RCC_SetFlashLatency+0x7e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e2c:	aa0c      	add	r2, sp, #48	; 0x30
 8001e2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e32:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 8001e36:	42b2      	cmp	r2, r6
 8001e38:	d215      	bcs.n	8001e66 <RCC_SetFlashLatency+0x72>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	e7f4      	b.n	8001e28 <RCC_SetFlashLatency+0x34>
        latency = FLASH_LATENCY_RANGE[index];
 8001e3e:	aa0c      	add	r2, sp, #48	; 0x30
 8001e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001e44:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 8001e48:	e014      	b.n	8001e74 <RCC_SetFlashLatency+0x80>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d808      	bhi.n	8001e62 <RCC_SetFlashLatency+0x6e>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e50:	aa0c      	add	r2, sp, #48	; 0x30
 8001e52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e56:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8001e5a:	42b2      	cmp	r2, r6
 8001e5c:	d2ef      	bcs.n	8001e3e <RCC_SetFlashLatency+0x4a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e5e:	3301      	adds	r3, #1
 8001e60:	e7f4      	b.n	8001e4c <RCC_SetFlashLatency+0x58>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e62:	2400      	movs	r4, #0
 8001e64:	e006      	b.n	8001e74 <RCC_SetFlashLatency+0x80>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e66:	aa0c      	add	r2, sp, #48	; 0x30
 8001e68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001e6c:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 8001e70:	e000      	b.n	8001e74 <RCC_SetFlashLatency+0x80>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e72:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <RCC_SetFlashLatency+0xb8>)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	f023 0307 	bic.w	r3, r3, #7
 8001e7c:	4323      	orrs	r3, r4
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e80:	f7fe ffd6 	bl	8000e30 <HAL_GetTick>
 8001e84:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <RCC_SetFlashLatency+0xb8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	42a3      	cmp	r3, r4
 8001e90:	d006      	beq.n	8001ea0 <RCC_SetFlashLatency+0xac>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e92:	f7fe ffcd 	bl	8000e30 <HAL_GetTick>
 8001e96:	1b40      	subs	r0, r0, r5
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	d9f4      	bls.n	8001e86 <RCC_SetFlashLatency+0x92>
    {
      return HAL_TIMEOUT;
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	e000      	b.n	8001ea2 <RCC_SetFlashLatency+0xae>
    }
  }
  return HAL_OK;
 8001ea0:	2000      	movs	r0, #0
}
 8001ea2:	b00d      	add	sp, #52	; 0x34
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	080053f8 	.word	0x080053f8
 8001eac:	58004000 	.word	0x58004000

08001eb0 <RCC_SetFlashLatencyFromMSIRange>:
{
 8001eb0:	b510      	push	{r4, lr}
  if (MSI_Range > RCC_MSIRANGE_11)
 8001eb2:	28b0      	cmp	r0, #176	; 0xb0
 8001eb4:	d819      	bhi.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x3a>
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001eb6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8001ebc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x44>)
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001ed6:	f7ff ff85 	bl	8001de4 <HAL_PWREx_GetVoltageRange>
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x48>)
 8001edc:	fba3 3404 	umull	r3, r4, r3, r4
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	0ca0      	lsrs	r0, r4, #18
 8001ee4:	f7ff ff86 	bl	8001df4 <RCC_SetFlashLatency>
}
 8001ee8:	bd10      	pop	{r4, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001eea:	4b01      	ldr	r3, [pc, #4]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8001eec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001eee:	e7e7      	b.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x10>
 8001ef0:	08005494 	.word	0x08005494
 8001ef4:	08005434 	.word	0x08005434
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001efc:	2800      	cmp	r0, #0
 8001efe:	f000 836c 	beq.w	80025da <HAL_RCC_OscConfig+0x6de>
{
 8001f02:	b538      	push	{r3, r4, r5, lr}
 8001f04:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	f013 0f20 	tst.w	r3, #32
 8001f0c:	d059      	beq.n	8001fc2 <HAL_RCC_OscConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f12:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f1a:	f013 030c 	ands.w	r3, r3, #12
 8001f1e:	d01e      	beq.n	8001f5e <HAL_RCC_OscConfig+0x62>
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d01a      	beq.n	8001f5a <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f24:	69e3      	ldr	r3, [r4, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80a7 	beq.w	800207a <HAL_RCC_OscConfig+0x17e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f38:	f7fe ff7a 	bl	8000e30 <HAL_GetTick>
 8001f3c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f013 0f02 	tst.w	r3, #2
 8001f48:	f040 8087 	bne.w	800205a <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f4c:	f7fe ff70 	bl	8000e30 <HAL_GetTick>
 8001f50:	1b40      	subs	r0, r0, r5
 8001f52:	2802      	cmp	r0, #2
 8001f54:	d9f3      	bls.n	8001f3e <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 8001f56:	2003      	movs	r0, #3
 8001f58:	e34c      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f5a:	2a01      	cmp	r2, #1
 8001f5c:	d1e2      	bne.n	8001f24 <HAL_RCC_OscConfig+0x28>
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f013 0f02 	tst.w	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f6a:	69e3      	ldr	r3, [r4, #28]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8336 	beq.w	80025de <HAL_RCC_OscConfig+0x6e2>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f7e:	2bb0      	cmp	r3, #176	; 0xb0
 8001f80:	d900      	bls.n	8001f84 <HAL_RCC_OscConfig+0x88>
    msiRange = LL_RCC_MSIRANGE_11;
 8001f82:	23b0      	movs	r3, #176	; 0xb0
 8001f84:	4298      	cmp	r0, r3
 8001f86:	d953      	bls.n	8002030 <HAL_RCC_OscConfig+0x134>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f88:	f7ff ff92 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	f040 8328 	bne.w	80025e2 <HAL_RCC_OscConfig+0x6e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f98:	6811      	ldr	r1, [r2, #0]
 8001f9a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa2:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fa4:	6853      	ldr	r3, [r2, #4]
 8001fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001faa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fae:	6053      	str	r3, [r2, #4]
        SystemCoreClockUpdate();
 8001fb0:	f7fe fd84 	bl	8000abc <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fb4:	4bc2      	ldr	r3, [pc, #776]	; (80022c0 <HAL_RCC_OscConfig+0x3c4>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	f7fe fcf4 	bl	80009a4 <HAL_InitTick>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	f040 8312 	bne.w	80025e6 <HAL_RCC_OscConfig+0x6ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	f013 0f01 	tst.w	r3, #1
 8001fc8:	d079      	beq.n	80020be <HAL_RCC_OscConfig+0x1c2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	6893      	ldr	r3, [r2, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fd4:	68d2      	ldr	r2, [r2, #12]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d065      	beq.n	80020aa <HAL_RCC_OscConfig+0x1ae>
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d061      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	6863      	ldr	r3, [r4, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	f000 8093 	beq.w	8002112 <HAL_RCC_OscConfig+0x216>
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	f000 8096 	beq.w	8002120 <HAL_RCC_OscConfig+0x224>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ffe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002006:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002008:	6863      	ldr	r3, [r4, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8093 	beq.w	8002136 <HAL_RCC_OscConfig+0x23a>
        tickstart = HAL_GetTick();
 8002010:	f7fe ff0e 	bl	8000e30 <HAL_GetTick>
 8002014:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002020:	d14d      	bne.n	80020be <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002022:	f7fe ff05 	bl	8000e30 <HAL_GetTick>
 8002026:	1b40      	subs	r0, r0, r5
 8002028:	2864      	cmp	r0, #100	; 0x64
 800202a:	d9f4      	bls.n	8002016 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 800202c:	2003      	movs	r0, #3
 800202e:	e2e1      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002034:	6813      	ldr	r3, [r2, #0]
 8002036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203a:	4318      	orrs	r0, r3
 800203c:	6010      	str	r0, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203e:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002040:	6853      	ldr	r3, [r2, #4]
 8002042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002046:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800204a:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800204c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800204e:	f7ff ff2f 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 8002052:	2800      	cmp	r0, #0
 8002054:	d0ac      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xb4>
            return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
 8002058:	e2cc      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800205c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002060:	6811      	ldr	r1, [r2, #0]
 8002062:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8002066:	430b      	orrs	r3, r1
 8002068:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206a:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800206c:	6853      	ldr	r3, [r2, #4]
 800206e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002072:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002076:	6053      	str	r3, [r2, #4]
 8002078:	e7a3      	b.n	8001fc2 <HAL_RCC_OscConfig+0xc6>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800207a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002086:	f7fe fed3 	bl	8000e30 <HAL_GetTick>
 800208a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f013 0f02 	tst.w	r3, #2
 8002096:	d094      	beq.n	8001fc2 <HAL_RCC_OscConfig+0xc6>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002098:	f7fe feca 	bl	8000e30 <HAL_GetTick>
 800209c:	1b40      	subs	r0, r0, r5
 800209e:	2802      	cmp	r0, #2
 80020a0:	d9f4      	bls.n	800208c <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80020a2:	2003      	movs	r0, #3
 80020a4:	e2a6      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020a6:	2a03      	cmp	r2, #3
 80020a8:	d19b      	bne.n	8001fe2 <HAL_RCC_OscConfig+0xe6>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020b4:	d003      	beq.n	80020be <HAL_RCC_OscConfig+0x1c2>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8296 	beq.w	80025ea <HAL_RCC_OscConfig+0x6ee>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	f013 0f02 	tst.w	r3, #2
 80020c4:	d05c      	beq.n	8002180 <HAL_RCC_OscConfig+0x284>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	6893      	ldr	r3, [r2, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020d0:	68d2      	ldr	r2, [r2, #12]
 80020d2:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d03f      	beq.n	800215a <HAL_RCC_OscConfig+0x25e>
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d03b      	beq.n	8002156 <HAL_RCC_OscConfig+0x25a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020de:	68e3      	ldr	r3, [r4, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8083 	beq.w	80021ec <HAL_RCC_OscConfig+0x2f0>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020f2:	f7fe fe9d 	bl	8000e30 <HAL_GetTick>
 80020f6:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002102:	d169      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2dc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7fe fe94 	bl	8000e30 <HAL_GetTick>
 8002108:	1b40      	subs	r0, r0, r5
 800210a:	2802      	cmp	r0, #2
 800210c:	d9f4      	bls.n	80020f8 <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 800210e:	2003      	movs	r0, #3
 8002110:	e270      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e773      	b.n	8002008 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800212a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e768      	b.n	8002008 <HAL_RCC_OscConfig+0x10c>
        tickstart = HAL_GetTick();
 8002136:	f7fe fe7b 	bl	8000e30 <HAL_GetTick>
 800213a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002146:	d0ba      	beq.n	80020be <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7fe fe72 	bl	8000e30 <HAL_GetTick>
 800214c:	1b40      	subs	r0, r0, r5
 800214e:	2864      	cmp	r0, #100	; 0x64
 8002150:	d9f4      	bls.n	800213c <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 8002152:	2003      	movs	r0, #3
 8002154:	e24e      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002156:	2a02      	cmp	r2, #2
 8002158:	d1c1      	bne.n	80020de <HAL_RCC_OscConfig+0x1e2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002164:	d003      	beq.n	800216e <HAL_RCC_OscConfig+0x272>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002166:	68e3      	ldr	r3, [r4, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8240 	beq.w	80025ee <HAL_RCC_OscConfig+0x6f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	6853      	ldr	r3, [r2, #4]
 8002176:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800217a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800217e:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	f013 0f18 	tst.w	r3, #24
 8002186:	f000 80e5 	beq.w	8002354 <HAL_RCC_OscConfig+0x458>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218a:	6962      	ldr	r2, [r4, #20]
 800218c:	2a00      	cmp	r2, #0
 800218e:	f000 80af 	beq.w	80022f0 <HAL_RCC_OscConfig+0x3f4>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002192:	f013 0f10 	tst.w	r3, #16
 8002196:	d07a      	beq.n	800228e <HAL_RCC_OscConfig+0x392>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a0:	f013 0f02 	tst.w	r3, #2
 80021a4:	d138      	bne.n	8002218 <HAL_RCC_OscConfig+0x31c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80021b6:	f7fe fe3b 	bl	8000e30 <HAL_GetTick>
 80021ba:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	f013 0f02 	tst.w	r3, #2
 80021c8:	d126      	bne.n	8002218 <HAL_RCC_OscConfig+0x31c>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ca:	f7fe fe31 	bl	8000e30 <HAL_GetTick>
 80021ce:	1b40      	subs	r0, r0, r5
 80021d0:	2802      	cmp	r0, #2
 80021d2:	d9f3      	bls.n	80021bc <HAL_RCC_OscConfig+0x2c0>
              return HAL_TIMEOUT;
 80021d4:	2003      	movs	r0, #3
 80021d6:	e20d      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021de:	6853      	ldr	r3, [r2, #4]
 80021e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80021e8:	6053      	str	r3, [r2, #4]
 80021ea:	e7c9      	b.n	8002180 <HAL_RCC_OscConfig+0x284>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80021ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f0:	6813      	ldr	r3, [r2, #0]
 80021f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021f8:	f7fe fe1a 	bl	8000e30 <HAL_GetTick>
 80021fc:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002208:	d0ba      	beq.n	8002180 <HAL_RCC_OscConfig+0x284>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7fe fe11 	bl	8000e30 <HAL_GetTick>
 800220e:	1b40      	subs	r0, r0, r5
 8002210:	2802      	cmp	r0, #2
 8002212:	d9f4      	bls.n	80021fe <HAL_RCC_OscConfig+0x302>
            return HAL_TIMEOUT;
 8002214:	2003      	movs	r0, #3
 8002216:	e1ed      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002228:	f7fe fe02 	bl	8000e30 <HAL_GetTick>
 800222c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	f013 0f08 	tst.w	r3, #8
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x34e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800223c:	f7fe fdf8 	bl	8000e30 <HAL_GetTick>
 8002240:	1b40      	subs	r0, r0, r5
 8002242:	2803      	cmp	r0, #3
 8002244:	d9f3      	bls.n	800222e <HAL_RCC_OscConfig+0x332>
            return HAL_TIMEOUT;
 8002246:	2003      	movs	r0, #3
 8002248:	e1d4      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800224a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800224c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002250:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002254:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002258:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800225c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002260:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 800226c:	f7fe fde0 	bl	8000e30 <HAL_GetTick>
 8002270:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	f013 0f02 	tst.w	r3, #2
 800227e:	d069      	beq.n	8002354 <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002280:	f7fe fdd6 	bl	8000e30 <HAL_GetTick>
 8002284:	1b40      	subs	r0, r0, r5
 8002286:	2802      	cmp	r0, #2
 8002288:	d9f3      	bls.n	8002272 <HAL_RCC_OscConfig+0x376>
            return HAL_TIMEOUT;
 800228a:	2003      	movs	r0, #3
 800228c:	e1b2      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800228e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002292:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 800229e:	f7fe fdc7 	bl	8000e30 <HAL_GetTick>
 80022a2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f013 0f02 	tst.w	r3, #2
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022b2:	f7fe fdbd 	bl	8000e30 <HAL_GetTick>
 80022b6:	1b40      	subs	r0, r0, r5
 80022b8:	2802      	cmp	r0, #2
 80022ba:	d9f3      	bls.n	80022a4 <HAL_RCC_OscConfig+0x3a8>
            return HAL_TIMEOUT;
 80022bc:	2003      	movs	r0, #3
 80022be:	e199      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
 80022c0:	2000000c 	.word	0x2000000c
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	f013 0f08 	tst.w	r3, #8
 80022e0:	d038      	beq.n	8002354 <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022e2:	f7fe fda5 	bl	8000e30 <HAL_GetTick>
 80022e6:	1b40      	subs	r0, r0, r5
 80022e8:	2803      	cmp	r0, #3
 80022ea:	d9f3      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 80022ec:	2003      	movs	r0, #3
 80022ee:	e181      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002300:	f7fe fd96 	bl	8000e30 <HAL_GetTick>
 8002304:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230e:	f013 0f08 	tst.w	r3, #8
 8002312:	d006      	beq.n	8002322 <HAL_RCC_OscConfig+0x426>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002314:	f7fe fd8c 	bl	8000e30 <HAL_GetTick>
 8002318:	1b40      	subs	r0, r0, r5
 800231a:	2803      	cmp	r0, #3
 800231c:	d9f3      	bls.n	8002306 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800231e:	2003      	movs	r0, #3
 8002320:	e168      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002326:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002332:	f7fe fd7d 	bl	8000e30 <HAL_GetTick>
 8002336:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002340:	f013 0f02 	tst.w	r3, #2
 8002344:	d006      	beq.n	8002354 <HAL_RCC_OscConfig+0x458>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002346:	f7fe fd73 	bl	8000e30 <HAL_GetTick>
 800234a:	1b40      	subs	r0, r0, r5
 800234c:	2802      	cmp	r0, #2
 800234e:	d9f3      	bls.n	8002338 <HAL_RCC_OscConfig+0x43c>
          return HAL_TIMEOUT;
 8002350:	2003      	movs	r0, #3
 8002352:	e14f      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	f013 0f04 	tst.w	r3, #4
 800235a:	d068      	beq.n	800242e <HAL_RCC_OscConfig+0x532>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235c:	4baa      	ldr	r3, [pc, #680]	; (8002608 <HAL_RCC_OscConfig+0x70c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002364:	d027      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d035      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
 800236c:	2b05      	cmp	r3, #5
 800236e:	d03c      	beq.n	80023ea <HAL_RCC_OscConfig+0x4ee>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002380:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002384:	f022 0204 	bic.w	r2, r2, #4
 8002388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238c:	68a3      	ldr	r3, [r4, #8]
 800238e:	b3db      	cbz	r3, 8002408 <HAL_RCC_OscConfig+0x50c>
      tickstart = HAL_GetTick();
 8002390:	f7fe fd4e 	bl	8000e30 <HAL_GetTick>
 8002394:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	f013 0f02 	tst.w	r3, #2
 80023a2:	d144      	bne.n	800242e <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe fd44 	bl	8000e30 <HAL_GetTick>
 80023a8:	1b40      	subs	r0, r0, r5
 80023aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80023ae:	4298      	cmp	r0, r3
 80023b0:	d9f1      	bls.n	8002396 <HAL_RCC_OscConfig+0x49a>
          return HAL_TIMEOUT;
 80023b2:	2003      	movs	r0, #3
 80023b4:	e11e      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
      HAL_PWR_EnableBkUpAccess();
 80023b6:	f7ff fd0d 	bl	8001dd4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80023ba:	f7fe fd39 	bl	8000e30 <HAL_GetTick>
 80023be:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c0:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_RCC_OscConfig+0x70c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023c8:	d1cd      	bne.n	8002366 <HAL_RCC_OscConfig+0x46a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fd31 	bl	8000e30 <HAL_GetTick>
 80023ce:	1b40      	subs	r0, r0, r5
 80023d0:	2802      	cmp	r0, #2
 80023d2:	d9f5      	bls.n	80023c0 <HAL_RCC_OscConfig+0x4c4>
          return HAL_TIMEOUT;
 80023d4:	2003      	movs	r0, #3
 80023d6:	e10d      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e8:	e7d0      	b.n	800238c <HAL_RCC_OscConfig+0x490>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80023f2:	f042 0204 	orr.w	r2, r2, #4
 80023f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002406:	e7c1      	b.n	800238c <HAL_RCC_OscConfig+0x490>
      tickstart = HAL_GetTick();
 8002408:	f7fe fd12 	bl	8000e30 <HAL_GetTick>
 800240c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f013 0f02 	tst.w	r3, #2
 800241a:	d008      	beq.n	800242e <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe fd08 	bl	8000e30 <HAL_GetTick>
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	f241 3388 	movw	r3, #5000	; 0x1388
 8002426:	4298      	cmp	r0, r3
 8002428:	d9f1      	bls.n	800240e <HAL_RCC_OscConfig+0x512>
          return HAL_TIMEOUT;
 800242a:	2003      	movs	r0, #3
 800242c:	e0e2      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002434:	d033      	beq.n	800249e <HAL_RCC_OscConfig+0x5a2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002438:	b1c3      	cbz	r3, 800246c <HAL_RCC_OscConfig+0x570>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800243a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800244a:	f7fe fcf1 	bl	8000e30 <HAL_GetTick>
 800244e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002458:	f013 0f02 	tst.w	r3, #2
 800245c:	d11f      	bne.n	800249e <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800245e:	f7fe fce7 	bl	8000e30 <HAL_GetTick>
 8002462:	1b40      	subs	r0, r0, r5
 8002464:	2802      	cmp	r0, #2
 8002466:	d9f3      	bls.n	8002450 <HAL_RCC_OscConfig+0x554>
          return HAL_TIMEOUT;
 8002468:	2003      	movs	r0, #3
 800246a:	e0c3      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800246c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002470:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800247c:	f7fe fcd8 	bl	8000e30 <HAL_GetTick>
 8002480:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248a:	f013 0f02 	tst.w	r3, #2
 800248e:	d006      	beq.n	800249e <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002490:	f7fe fcce 	bl	8000e30 <HAL_GetTick>
 8002494:	1b40      	subs	r0, r0, r5
 8002496:	2802      	cmp	r0, #2
 8002498:	d9f3      	bls.n	8002482 <HAL_RCC_OscConfig+0x586>
          return HAL_TIMEOUT;
 800249a:	2003      	movs	r0, #3
 800249c:	e0aa      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a6 	beq.w	80025f2 <HAL_RCC_OscConfig+0x6f6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	2a0c      	cmp	r2, #12
 80024b2:	d063      	beq.n	800257c <HAL_RCC_OscConfig+0x680>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_OscConfig+0x5fe>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80024c2:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	f022 0203 	bic.w	r2, r2, #3
 80024ca:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80024d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024d6:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80024d8:	f7fe fcaa 	bl	8000e30 <HAL_GetTick>
 80024dc:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024e8:	f000 8087 	beq.w	80025fa <HAL_RCC_OscConfig+0x6fe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe fca0 	bl	8000e30 <HAL_GetTick>
 80024f0:	1b00      	subs	r0, r0, r4
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d9f3      	bls.n	80024de <HAL_RCC_OscConfig+0x5e2>
            return HAL_TIMEOUT;
 80024f6:	2003      	movs	r0, #3
 80024f8:	e07c      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002504:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002506:	f7fe fc93 	bl	8000e30 <HAL_GetTick>
 800250a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002516:	d006      	beq.n	8002526 <HAL_RCC_OscConfig+0x62a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fc8a 	bl	8000e30 <HAL_GetTick>
 800251c:	1b40      	subs	r0, r0, r5
 800251e:	2802      	cmp	r0, #2
 8002520:	d9f4      	bls.n	800250c <HAL_RCC_OscConfig+0x610>
            return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
 8002524:	e066      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252a:	68d3      	ldr	r3, [r2, #12]
 800252c:	4937      	ldr	r1, [pc, #220]	; (800260c <HAL_RCC_OscConfig+0x710>)
 800252e:	4019      	ands	r1, r3
 8002530:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002532:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002534:	4303      	orrs	r3, r0
 8002536:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002538:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800253c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800253e:	4303      	orrs	r3, r0
 8002540:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002542:	4303      	orrs	r3, r0
 8002544:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002546:	4303      	orrs	r3, r0
 8002548:	430b      	orrs	r3, r1
 800254a:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002552:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002554:	68d3      	ldr	r3, [r2, #12]
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800255c:	f7fe fc68 	bl	8000e30 <HAL_GetTick>
 8002560:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800256c:	d143      	bne.n	80025f6 <HAL_RCC_OscConfig+0x6fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fc5f 	bl	8000e30 <HAL_GetTick>
 8002572:	1b00      	subs	r0, r0, r4
 8002574:	2802      	cmp	r0, #2
 8002576:	d9f4      	bls.n	8002562 <HAL_RCC_OscConfig+0x666>
            return HAL_TIMEOUT;
 8002578:	2003      	movs	r0, #3
 800257a:	e03b      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	2b01      	cmp	r3, #1
 800257e:	d03e      	beq.n	80025fe <HAL_RCC_OscConfig+0x702>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	f003 0103 	and.w	r1, r3, #3
 800258a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800258c:	4291      	cmp	r1, r2
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x698>
          return HAL_ERROR;
 8002590:	2001      	movs	r0, #1
 8002592:	e02f      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002594:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002598:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	428a      	cmp	r2, r1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x6a6>
          return HAL_ERROR;
 800259e:	2001      	movs	r0, #1
 80025a0:	e028      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025a2:	f3c3 2206 	ubfx	r2, r3, #8, #7
 80025a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a8:	428a      	cmp	r2, r1
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0x6b4>
          return HAL_ERROR;
 80025ac:	2001      	movs	r0, #1
 80025ae:	e021      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025b0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025b6:	428a      	cmp	r2, r1
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x6c2>
          return HAL_ERROR;
 80025ba:	2001      	movs	r0, #1
 80025bc:	e01a      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025be:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025c4:	428a      	cmp	r2, r1
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x6d0>
          return HAL_ERROR;
 80025c8:	2001      	movs	r0, #1
 80025ca:	e013      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80025d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d015      	beq.n	8002602 <HAL_RCC_OscConfig+0x706>
          return HAL_ERROR;
 80025d6:	2001      	movs	r0, #1
 80025d8:	e00c      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
    return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
}
 80025dc:	4770      	bx	lr
        return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
            return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	e006      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
          return HAL_ERROR;
 80025e6:	2001      	movs	r0, #1
 80025e8:	e004      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
 80025ec:	e002      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 80025f2:	2000      	movs	r0, #0
}
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80025f6:	2000      	movs	r0, #0
 80025f8:	e7fc      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
 80025fa:	2000      	movs	r0, #0
 80025fc:	e7fa      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
 8002600:	e7f8      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 8002602:	2000      	movs	r0, #0
 8002604:	e7f6      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f8>
 8002606:	bf00      	nop
 8002608:	58000400 	.word	0x58000400
 800260c:	11c1808c 	.word	0x11c1808c

08002610 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002610:	2800      	cmp	r0, #0
 8002612:	f000 8127 	beq.w	8002864 <HAL_RCC_ClockConfig+0x254>
{
 8002616:	b570      	push	{r4, r5, r6, lr}
 8002618:	4604      	mov	r4, r0
 800261a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b92      	ldr	r3, [pc, #584]	; (8002868 <HAL_RCC_ClockConfig+0x258>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	428b      	cmp	r3, r1
 8002626:	d32d      	bcc.n	8002684 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	f013 0f02 	tst.w	r3, #2
 800262e:	d13f      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f013 0f20 	tst.w	r3, #32
 8002636:	d153      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800263e:	d16a      	bne.n	8002716 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	f013 0f04 	tst.w	r3, #4
 8002646:	f040 8083 	bne.w	8002750 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	f013 0f08 	tst.w	r3, #8
 8002650:	f040 8097 	bne.w	8002782 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f013 0f01 	tst.w	r3, #1
 800265a:	f000 80e0 	beq.w	800281e <HAL_RCC_ClockConfig+0x20e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	6863      	ldr	r3, [r4, #4]
 8002660:	2b02      	cmp	r3, #2
 8002662:	f000 80a8 	beq.w	80027b6 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	2b03      	cmp	r3, #3
 8002668:	f000 80c9 	beq.w	80027fe <HAL_RCC_ClockConfig+0x1ee>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 80ce 	bne.w	800280e <HAL_RCC_ClockConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	f012 0f02 	tst.w	r2, #2
 800267c:	f040 80a1 	bne.w	80027c2 <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
 8002682:	e0ee      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002684:	4a78      	ldr	r2, [pc, #480]	; (8002868 <HAL_RCC_ClockConfig+0x258>)
 8002686:	6813      	ldr	r3, [r2, #0]
 8002688:	f023 0307 	bic.w	r3, r3, #7
 800268c:	430b      	orrs	r3, r1
 800268e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002690:	f7fe fbce 	bl	8000e30 <HAL_GetTick>
 8002694:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b74      	ldr	r3, [pc, #464]	; (8002868 <HAL_RCC_ClockConfig+0x258>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	42ab      	cmp	r3, r5
 80026a0:	d0c2      	beq.n	8002628 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026a2:	f7fe fbc5 	bl	8000e30 <HAL_GetTick>
 80026a6:	1b80      	subs	r0, r0, r6
 80026a8:	2802      	cmp	r0, #2
 80026aa:	d9f4      	bls.n	8002696 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80026ac:	2003      	movs	r0, #3
 80026ae:	e0d8      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80026b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b6:	688a      	ldr	r2, [r1, #8]
 80026b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80026c0:	f7fe fbb6 	bl	8000e30 <HAL_GetTick>
 80026c4:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80026d0:	d1ae      	bne.n	8002630 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026d2:	f7fe fbad 	bl	8000e30 <HAL_GetTick>
 80026d6:	1b80      	subs	r0, r0, r6
 80026d8:	2802      	cmp	r0, #2
 80026da:	d9f4      	bls.n	80026c6 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80026dc:	2003      	movs	r0, #3
 80026de:	e0c0      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80026e0:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80026e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026e6:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80026ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80026f4:	f7fe fb9c 	bl	8000e30 <HAL_GetTick>
 80026f8:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002702:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002706:	d197      	bne.n	8002638 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002708:	f7fe fb92 	bl	8000e30 <HAL_GetTick>
 800270c:	1b80      	subs	r0, r0, r6
 800270e:	2802      	cmp	r0, #2
 8002710:	d9f3      	bls.n	80026fa <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8002712:	2003      	movs	r0, #3
 8002714:	e0a5      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002716:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8002720:	f023 030f 	bic.w	r3, r3, #15
 8002724:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8002728:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 800272c:	f7fe fb80 	bl	8000e30 <HAL_GetTick>
 8002730:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800273a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800273e:	f47f af7f 	bne.w	8002640 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002742:	f7fe fb75 	bl	8000e30 <HAL_GetTick>
 8002746:	1b80      	subs	r0, r0, r6
 8002748:	2802      	cmp	r0, #2
 800274a:	d9f2      	bls.n	8002732 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 800274c:	2003      	movs	r0, #3
 800274e:	e088      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002756:	688a      	ldr	r2, [r1, #8]
 8002758:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002760:	f7fe fb66 	bl	8000e30 <HAL_GetTick>
 8002764:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002770:	f47f af6b 	bne.w	800264a <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002774:	f7fe fb5c 	bl	8000e30 <HAL_GetTick>
 8002778:	1b80      	subs	r0, r0, r6
 800277a:	2802      	cmp	r0, #2
 800277c:	d9f3      	bls.n	8002766 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800277e:	2003      	movs	r0, #3
 8002780:	e06f      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002782:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002788:	6893      	ldr	r3, [r2, #8]
 800278a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800278e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002792:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002794:	f7fe fb4c 	bl	8000e30 <HAL_GetTick>
 8002798:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80027a4:	f47f af56 	bne.w	8002654 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027a8:	f7fe fb42 	bl	8000e30 <HAL_GetTick>
 80027ac:	1b80      	subs	r0, r0, r6
 80027ae:	2802      	cmp	r0, #2
 80027b0:	d9f3      	bls.n	800279a <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80027b2:	2003      	movs	r0, #3
 80027b4:	e055      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80027c0:	d01b      	beq.n	80027fa <HAL_RCC_ClockConfig+0x1ea>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c6:	688a      	ldr	r2, [r1, #8]
 80027c8:	f022 0203 	bic.w	r2, r2, #3
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80027d0:	f7fe fb2e 	bl	8000e30 <HAL_GetTick>
 80027d4:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e0:	6862      	ldr	r2, [r4, #4]
 80027e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027e6:	d01a      	beq.n	800281e <HAL_RCC_ClockConfig+0x20e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fb22 	bl	8000e30 <HAL_GetTick>
 80027ec:	1b80      	subs	r0, r0, r6
 80027ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80027f2:	4298      	cmp	r0, r3
 80027f4:	d9ef      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x1c6>
        return HAL_TIMEOUT;
 80027f6:	2003      	movs	r0, #3
 80027f8:	e033      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
        return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
 80027fc:	e031      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80027fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002808:	d1db      	bne.n	80027c2 <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 800280a:	2001      	movs	r0, #1
 800280c:	e029      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800280e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002818:	d1d3      	bne.n	80027c2 <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e021      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x258>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	42ab      	cmp	r3, r5
 8002828:	d915      	bls.n	8002856 <HAL_RCC_ClockConfig+0x246>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <HAL_RCC_ClockConfig+0x258>)
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	f023 0307 	bic.w	r3, r3, #7
 8002832:	432b      	orrs	r3, r5
 8002834:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002836:	f7fe fafb 	bl	8000e30 <HAL_GetTick>
 800283a:	4604      	mov	r4, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_ClockConfig+0x258>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	42ab      	cmp	r3, r5
 8002846:	d006      	beq.n	8002856 <HAL_RCC_ClockConfig+0x246>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002848:	f7fe faf2 	bl	8000e30 <HAL_GetTick>
 800284c:	1b00      	subs	r0, r0, r4
 800284e:	2802      	cmp	r0, #2
 8002850:	d9f4      	bls.n	800283c <HAL_RCC_ClockConfig+0x22c>
        return HAL_TIMEOUT;
 8002852:	2003      	movs	r0, #3
 8002854:	e005      	b.n	8002862 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClockUpdate();
 8002856:	f7fe f931 	bl	8000abc <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 800285a:	f7fe faef 	bl	8000e3c <HAL_GetTickPrio>
 800285e:	f7fe f8a1 	bl	80009a4 <HAL_InitTick>
}
 8002862:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002864:	2001      	movs	r0, #1
}
 8002866:	4770      	bx	lr
 8002868:	58004000 	.word	0x58004000

0800286c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002872:	f013 030c 	ands.w	r3, r3, #12
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0x26>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002882:	2bb0      	cmp	r3, #176	; 0xb0
 8002884:	d900      	bls.n	8002888 <HAL_RCC_GetSysClockFreq+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002886:	23b0      	movs	r3, #176	; 0xb0
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_RCC_GetSysClockFreq+0xb0>)
 800288c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002890:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002892:	2b04      	cmp	r3, #4
 8002894:	d03d      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0xa6>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002896:	2b08      	cmp	r3, #8
 8002898:	d010      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x50>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d030      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x9e>
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d10f      	bne.n	80028cc <HAL_RCC_GetSysClockFreq+0x60>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80028b6:	d12a      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0xa2>
          pllinputfreq = HSE_VALUE;
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ba:	e013      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x78>
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80028c6:	d026      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0xaa>
      sysclockfreq = HSE_VALUE / 2U;
 80028c8:	4816      	ldr	r0, [pc, #88]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ca:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80028d6:	2bb0      	cmp	r3, #176	; 0xb0
 80028d8:	d900      	bls.n	80028dc <HAL_RCC_GetSysClockFreq+0x70>
    msiRange = LL_RCC_MSIRANGE_11;
 80028da:	23b0      	movs	r3, #176	; 0xb0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	68d0      	ldr	r0, [r2, #12]
 80028ea:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80028ee:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80028f2:	68d3      	ldr	r3, [r2, #12]
 80028f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028f8:	3301      	adds	r3, #1
 80028fa:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80028fe:	68d3      	ldr	r3, [r2, #12]
 8002900:	0f5b      	lsrs	r3, r3, #29
 8002902:	3301      	adds	r3, #1
 8002904:	fbb0 f0f3 	udiv	r0, r0, r3
 8002908:	4770      	bx	lr
        pllinputfreq = HSI_VALUE;
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290c:	e7ea      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x78>
          pllinputfreq = HSE_VALUE / 2U;
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002910:	e7e8      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSI_VALUE;
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002914:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002916:	4802      	ldr	r0, [pc, #8]	; (8002920 <HAL_RCC_GetSysClockFreq+0xb4>)
}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	08005494 	.word	0x08005494
 8002920:	01e84800 	.word	0x01e84800
 8002924:	00f42400 	.word	0x00f42400

08002928 <HAL_RCC_GetHCLKFreq>:
{
 8002928:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800292a:	f7ff ff9f 	bl	800286c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002938:	4a02      	ldr	r2, [pc, #8]	; (8002944 <HAL_RCC_GetHCLKFreq+0x1c>)
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800293e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002942:	bd08      	pop	{r3, pc}
 8002944:	08005434 	.word	0x08005434

08002948 <HAL_RCC_GetPCLK1Freq>:
{
 8002948:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800294a:	f7ff ffed 	bl	8002928 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002958:	4a03      	ldr	r2, [pc, #12]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	f003 031f 	and.w	r3, r3, #31
}
 8002962:	40d8      	lsrs	r0, r3
 8002964:	bd08      	pop	{r3, pc}
 8002966:	bf00      	nop
 8002968:	08005474 	.word	0x08005474

0800296c <HAL_RCC_GetPCLK2Freq>:
{
 800296c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800296e:	f7ff ffdb 	bl	8002928 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800297c:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_GetPCLK2Freq+0x20>)
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	f003 031f 	and.w	r3, r3, #31
}
 8002986:	40d8      	lsrs	r0, r3
 8002988:	bd08      	pop	{r3, pc}
 800298a:	bf00      	nop
 800298c:	08005474 	.word	0x08005474

08002990 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8002990:	236f      	movs	r3, #111	; 0x6f
 8002992:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800299e:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80029a6:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80029ae:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80029b6:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80029b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80029bc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80029c0:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80029c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80029ca:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_RCC_GetClockConfig+0x48>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	600b      	str	r3, [r1, #0]
}
 80029d6:	4770      	bx	lr
 80029d8:	58004000 	.word	0x58004000

080029dc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80029e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e4:	6813      	ldr	r3, [r2, #0]
 80029e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ea:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80029ec:	f7fe fa20 	bl	8000e30 <HAL_GetTick>
 80029f0:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80029fc:	d006      	beq.n	8002a0c <RCCEx_PLLSAI1_ConfigNP+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029fe:	f7fe fa17 	bl	8000e30 <HAL_GetTick>
 8002a02:	1b00      	subs	r0, r0, r4
 8002a04:	2802      	cmp	r0, #2
 8002a06:	d9f4      	bls.n	80029f2 <RCCEx_PLLSAI1_ConfigNP+0x16>
    {
      status = HAL_TIMEOUT;
 8002a08:	2403      	movs	r4, #3
 8002a0a:	e000      	b.n	8002a0e <RCCEx_PLLSAI1_ConfigNP+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8002a0c:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8002a0e:	b10c      	cbz	r4, 8002a14 <RCCEx_PLLSAI1_ConfigNP+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8002a10:	4620      	mov	r0, r4
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002a1e:	6829      	ldr	r1, [r5, #0]
 8002a20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a24:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 8002a2c:	6869      	ldr	r1, [r5, #4]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a38:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002a3a:	f7fe f9f9 	bl	8000e30 <HAL_GetTick>
 8002a3e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002a4a:	d105      	bne.n	8002a58 <RCCEx_PLLSAI1_ConfigNP+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a4c:	f7fe f9f0 	bl	8000e30 <HAL_GetTick>
 8002a50:	1b80      	subs	r0, r0, r6
 8002a52:	2802      	cmp	r0, #2
 8002a54:	d9f4      	bls.n	8002a40 <RCCEx_PLLSAI1_ConfigNP+0x64>
        status = HAL_TIMEOUT;
 8002a56:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8002a58:	2c00      	cmp	r4, #0
 8002a5a:	d1d9      	bne.n	8002a10 <RCCEx_PLLSAI1_ConfigNP+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a60:	6913      	ldr	r3, [r2, #16]
 8002a62:	6929      	ldr	r1, [r5, #16]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6113      	str	r3, [r2, #16]
 8002a68:	e7d2      	b.n	8002a10 <RCCEx_PLLSAI1_ConfigNP+0x34>

08002a6a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002a6a:	b570      	push	{r4, r5, r6, lr}
 8002a6c:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a78:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a7a:	f7fe f9d9 	bl	8000e30 <HAL_GetTick>
 8002a7e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002a8a:	d006      	beq.n	8002a9a <RCCEx_PLLSAI1_ConfigNQ+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a8c:	f7fe f9d0 	bl	8000e30 <HAL_GetTick>
 8002a90:	1b00      	subs	r0, r0, r4
 8002a92:	2802      	cmp	r0, #2
 8002a94:	d9f4      	bls.n	8002a80 <RCCEx_PLLSAI1_ConfigNQ+0x16>
    {
      status = HAL_TIMEOUT;
 8002a96:	2403      	movs	r4, #3
 8002a98:	e000      	b.n	8002a9c <RCCEx_PLLSAI1_ConfigNQ+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8002a9c:	b10c      	cbz	r4, 8002aa2 <RCCEx_PLLSAI1_ConfigNQ+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002aac:	6829      	ldr	r1, [r5, #0]
 8002aae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ab2:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002aba:	68a9      	ldr	r1, [r5, #8]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ac6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002ac8:	f7fe f9b2 	bl	8000e30 <HAL_GetTick>
 8002acc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ad8:	d105      	bne.n	8002ae6 <RCCEx_PLLSAI1_ConfigNQ+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ada:	f7fe f9a9 	bl	8000e30 <HAL_GetTick>
 8002ade:	1b80      	subs	r0, r0, r6
 8002ae0:	2802      	cmp	r0, #2
 8002ae2:	d9f4      	bls.n	8002ace <RCCEx_PLLSAI1_ConfigNQ+0x64>
        status = HAL_TIMEOUT;
 8002ae4:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8002ae6:	2c00      	cmp	r4, #0
 8002ae8:	d1d9      	bne.n	8002a9e <RCCEx_PLLSAI1_ConfigNQ+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	6913      	ldr	r3, [r2, #16]
 8002af0:	6929      	ldr	r1, [r5, #16]
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6113      	str	r3, [r2, #16]
 8002af6:	e7d2      	b.n	8002a9e <RCCEx_PLLSAI1_ConfigNQ+0x34>

08002af8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b00:	6813      	ldr	r3, [r2, #0]
 8002b02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b06:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b08:	f7fe f992 	bl	8000e30 <HAL_GetTick>
 8002b0c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002b18:	d006      	beq.n	8002b28 <RCCEx_PLLSAI1_ConfigNR+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b1a:	f7fe f989 	bl	8000e30 <HAL_GetTick>
 8002b1e:	1b00      	subs	r0, r0, r4
 8002b20:	2802      	cmp	r0, #2
 8002b22:	d9f4      	bls.n	8002b0e <RCCEx_PLLSAI1_ConfigNR+0x16>
    {
      status = HAL_TIMEOUT;
 8002b24:	2403      	movs	r4, #3
 8002b26:	e000      	b.n	8002b2a <RCCEx_PLLSAI1_ConfigNR+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8002b2a:	b10c      	cbz	r4, 8002b30 <RCCEx_PLLSAI1_ConfigNR+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002b3a:	6829      	ldr	r1, [r5, #0]
 8002b3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b40:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002b48:	68e9      	ldr	r1, [r5, #12]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b54:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002b56:	f7fe f96b 	bl	8000e30 <HAL_GetTick>
 8002b5a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002b66:	d105      	bne.n	8002b74 <RCCEx_PLLSAI1_ConfigNR+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b68:	f7fe f962 	bl	8000e30 <HAL_GetTick>
 8002b6c:	1b80      	subs	r0, r0, r6
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d9f4      	bls.n	8002b5c <RCCEx_PLLSAI1_ConfigNR+0x64>
        status = HAL_TIMEOUT;
 8002b72:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8002b74:	2c00      	cmp	r4, #0
 8002b76:	d1d9      	bne.n	8002b2c <RCCEx_PLLSAI1_ConfigNR+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7c:	6913      	ldr	r3, [r2, #16]
 8002b7e:	6929      	ldr	r1, [r5, #16]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6113      	str	r3, [r2, #16]
 8002b84:	e7d2      	b.n	8002b2c <RCCEx_PLLSAI1_ConfigNR+0x34>

08002b86 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002b86:	b570      	push	{r4, r5, r6, lr}
 8002b88:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b90:	d02a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b92:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b98:	d011      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x38>
 8002b9a:	d807      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b9c:	b963      	cbnz	r3, 8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x32>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002b9e:	3004      	adds	r0, #4
 8002ba0:	f7ff ff1c 	bl	80029dc <RCCEx_PLLSAI1_ConfigNP>
    if (ret == HAL_OK)
 8002ba4:	4606      	mov	r6, r0
 8002ba6:	b188      	cbz	r0, 8002bcc <HAL_RCCEx_PeriphCLKConfig+0x46>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002ba8:	4605      	mov	r5, r0
 8002baa:	e01f      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb0:	d018      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8002bb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        ret = HAL_ERROR;
 8002bb8:	2501      	movs	r5, #1
 8002bba:	462e      	mov	r6, r5
 8002bbc:	e016      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x66>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc2:	68d3      	ldr	r3, [r2, #12]
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bca:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bd6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002be0:	2500      	movs	r5, #0
 8002be2:	e003      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x66>
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002be4:	2600      	movs	r6, #0
 8002be6:	e7f1      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x46>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002be8:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bea:	462e      	mov	r6, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x84>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8002bfc:	f405 7540 	and.w	r5, r5, #768	; 0x300
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c02:	42ab      	cmp	r3, r5
 8002c04:	f040 80d5 	bne.w	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      status = ret;
 8002c08:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	f013 0f01 	tst.w	r3, #1
 8002c10:	d009      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c12:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c18:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c1c:	f022 0203 	bic.w	r2, r2, #3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	f013 0f02 	tst.w	r3, #2
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c2e:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	f013 0f10 	tst.w	r3, #16
 8002c48:	d00c      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c50:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c54:	0c02      	lsrs	r2, r0, #16
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	ea23 0302 	bic.w	r3, r3, r2
 8002c5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	f013 0f20 	tst.w	r3, #32
 8002c6a:	d00c      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c76:	0c02      	lsrs	r2, r0, #16
 8002c78:	0412      	lsls	r2, r2, #16
 8002c7a:	ea23 0302 	bic.w	r3, r3, r2
 8002c7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	f013 0f04 	tst.w	r3, #4
 8002c8c:	d00f      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c8e:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c90:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002c94:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002c98:	0919      	lsrs	r1, r3, #4
 8002c9a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002c9e:	ea22 0201 	bic.w	r2, r2, r1
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	f013 0f08 	tst.w	r3, #8
 8002cb4:	d00f      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cb8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002cbc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002cc0:	0919      	lsrs	r1, r3, #4
 8002cc2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002cc6:	ea22 0201 	bic.w	r2, r2, r1
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cdc:	d013      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ce8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf8:	f000 809c 	beq.w	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d02:	f000 809c 	beq.w	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002d0c:	d017      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d005      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d1a:	d002      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 8096 	bne.w	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d2a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d36:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d3a:	f000 809a 	beq.w	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d44:	d013      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d60:	f000 808e 	beq.w	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6a:	f000 808e 	beq.w	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002d74:	d009      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002d76:	6c63      	ldr	r3, [r4, #68]	; 0x44
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d7c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8002d80:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002d90:	d00d      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002d92:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d9a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002da2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002da4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002da6:	f021 0103 	bic.w	r1, r1, #3
 8002daa:	430a      	orrs	r2, r1
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002dae:	4628      	mov	r0, r5
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
      HAL_PWR_EnableBkUpAccess();
 8002db2:	f7ff f80f 	bl	8001dd4 <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002db6:	b95d      	cbnz	r5, 8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002dc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dcc:	4635      	mov	r5, r6
 8002dce:	e71c      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x84>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dd8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002ddc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002de0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002de4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002de8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002dec:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002df0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002df4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002df6:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 8002df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f013 0f01 	tst.w	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002e06:	4635      	mov	r5, r6
 8002e08:	e6ff      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x84>
          tickstart = HAL_GetTick();
 8002e0a:	f7fe f811 	bl	8000e30 <HAL_GetTick>
 8002e0e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f013 0f02 	tst.w	r3, #2
 8002e1c:	d108      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe f807 	bl	8000e30 <HAL_GetTick>
 8002e22:	1b40      	subs	r0, r0, r5
 8002e24:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e28:	4298      	cmp	r0, r3
 8002e2a:	d9f1      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x28a>
              ret = HAL_TIMEOUT;
 8002e2c:	2503      	movs	r5, #3
 8002e2e:	e6ec      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x84>
 8002e30:	4635      	mov	r5, r6
 8002e32:	e6ea      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002e34:	68cb      	ldr	r3, [r1, #12]
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	60cb      	str	r3, [r1, #12]
 8002e3c:	e75e      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002e3e:	1d20      	adds	r0, r4, #4
 8002e40:	f7ff fe13 	bl	8002a6a <RCCEx_PLLSAI1_ConfigNQ>
      if (ret != HAL_OK)
 8002e44:	2800      	cmp	r0, #0
 8002e46:	f43f af5e 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x180>
        status = ret;
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	e75b      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e56:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002e5a:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002e5e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e62:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002e66:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e70:	e760      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e76:	68d3      	ldr	r3, [r2, #12]
 8002e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7c:	60d3      	str	r3, [r2, #12]
 8002e7e:	e75e      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e80:	68cb      	ldr	r3, [r1, #12]
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e86:	60cb      	str	r3, [r1, #12]
 8002e88:	e76c      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e8a:	1d20      	adds	r0, r4, #4
 8002e8c:	f7ff fe34 	bl	8002af8 <RCCEx_PLLSAI1_ConfigNR>
      if (ret != HAL_OK)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	f43f af6c 	beq.w	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        status = ret;
 8002e96:	4605      	mov	r5, r0
 8002e98:	e769      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1e8>

08002e9a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e9a:	b538      	push	{r3, r4, r5, lr}
 8002e9c:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e9e:	6802      	ldr	r2, [r0, #0]
 8002ea0:	68d3      	ldr	r3, [r2, #12]
 8002ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ea6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002ea8:	f7fd ffc2 	bl	8000e30 <HAL_GetTick>
 8002eac:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f013 0f20 	tst.w	r3, #32
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002eb8:	f7fd ffba 	bl	8000e30 <HAL_GetTick>
 8002ebc:	1b40      	subs	r0, r0, r5
 8002ebe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ec2:	d9f4      	bls.n	8002eae <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	e000      	b.n	8002eca <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002ec8:	2000      	movs	r0, #0
}
 8002eca:	bd38      	pop	{r3, r4, r5, pc}

08002ecc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ecc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002ece:	6803      	ldr	r3, [r0, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002ed6:	d001      	beq.n	8002edc <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002ed8:	2000      	movs	r0, #0
}
 8002eda:	bd38      	pop	{r3, r4, r5, pc}
 8002edc:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002ede:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002ee4:	f7fd ffa4 	bl	8000e30 <HAL_GetTick>
 8002ee8:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ef2:	d107      	bne.n	8002f04 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ef4:	f7fd ff9c 	bl	8000e30 <HAL_GetTick>
 8002ef8:	1b40      	subs	r0, r0, r5
 8002efa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002efe:	d9f4      	bls.n	8002eea <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002f00:	2003      	movs	r0, #3
 8002f02:	e7ea      	b.n	8002eda <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
 8002f06:	e7e8      	b.n	8002eda <RTC_EnterInitMode+0xe>

08002f08 <HAL_RTC_Init>:
{
 8002f08:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d067      	beq.n	8002fde <HAL_RTC_Init+0xd6>
 8002f0e:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f10:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d044      	beq.n	8002fa2 <HAL_RTC_Init+0x9a>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	22ca      	movs	r2, #202	; 0xca
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	2253      	movs	r2, #83	; 0x53
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f7ff ffce 	bl	8002ecc <RTC_EnterInitMode>
 8002f30:	4605      	mov	r5, r0
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d13a      	bne.n	8002fac <HAL_RTC_Init+0xa4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	6893      	ldr	r3, [r2, #8]
 8002f3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f42:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f44:	6821      	ldr	r1, [r4, #0]
 8002f46:	688a      	ldr	r2, [r1, #8]
 8002f48:	6863      	ldr	r3, [r4, #4]
 8002f4a:	6920      	ldr	r0, [r4, #16]
 8002f4c:	4303      	orrs	r3, r0
 8002f4e:	69a0      	ldr	r0, [r4, #24]
 8002f50:	4303      	orrs	r3, r0
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	68e2      	ldr	r2, [r4, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	6913      	ldr	r3, [r2, #16]
 8002f60:	68a1      	ldr	r1, [r4, #8]
 8002f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002f66:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	68d3      	ldr	r3, [r2, #12]
 8002f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f70:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f7c:	6821      	ldr	r1, [r4, #0]
 8002f7e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002f80:	69e2      	ldr	r2, [r4, #28]
 8002f82:	6960      	ldr	r0, [r4, #20]
 8002f84:	4302      	orrs	r2, r0
 8002f86:	4313      	orrs	r3, r2
 8002f88:	64cb      	str	r3, [r1, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f013 0f20 	tst.w	r3, #32
 8002f92:	d014      	beq.n	8002fbe <HAL_RTC_Init+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	22ff      	movs	r2, #255	; 0xff
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_OK;
 8002fa0:	e00b      	b.n	8002fba <HAL_RTC_Init+0xb2>
    hrtc->Lock = HAL_UNLOCKED;
 8002fa2:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8002fa6:	f7fd fccd 	bl	8000944 <HAL_RTC_MspInit>
 8002faa:	e7b5      	b.n	8002f18 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	22ff      	movs	r2, #255	; 0xff
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8002fb8:	2501      	movs	r5, #1
}
 8002fba:	4628      	mov	r0, r5
 8002fbc:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff ff6b 	bl	8002e9a <HAL_RTC_WaitForSynchro>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d0e5      	beq.n	8002f94 <HAL_RTC_Init+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002fda:	2501      	movs	r5, #1
 8002fdc:	e7ed      	b.n	8002fba <HAL_RTC_Init+0xb2>
     return HAL_ERROR;
 8002fde:	2501      	movs	r5, #1
 8002fe0:	e7eb      	b.n	8002fba <HAL_RTC_Init+0xb2>
	...

08002fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe6:	6a03      	ldr	r3, [r0, #32]
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ff4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ff8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ffc:	680d      	ldr	r5, [r1, #0]
 8002ffe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003000:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003004:	688d      	ldr	r5, [r1, #8]
 8003006:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003008:	4d14      	ldr	r5, [pc, #80]	; (800305c <TIM_OC1_SetConfig+0x78>)
 800300a:	42a8      	cmp	r0, r5
 800300c:	d007      	beq.n	800301e <TIM_OC1_SetConfig+0x3a>
 800300e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8003012:	42a8      	cmp	r0, r5
 8003014:	d003      	beq.n	800301e <TIM_OC1_SetConfig+0x3a>
 8003016:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 800301a:	42a8      	cmp	r0, r5
 800301c:	d105      	bne.n	800302a <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800301e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003022:	68cd      	ldr	r5, [r1, #12]
 8003024:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003026:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302a:	4d0c      	ldr	r5, [pc, #48]	; (800305c <TIM_OC1_SetConfig+0x78>)
 800302c:	42a8      	cmp	r0, r5
 800302e:	d007      	beq.n	8003040 <TIM_OC1_SetConfig+0x5c>
 8003030:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8003034:	42a8      	cmp	r0, r5
 8003036:	d003      	beq.n	8003040 <TIM_OC1_SetConfig+0x5c>
 8003038:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800303c:	42a8      	cmp	r0, r5
 800303e:	d105      	bne.n	800304c <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003040:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003044:	694c      	ldr	r4, [r1, #20]
 8003046:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003048:	698d      	ldr	r5, [r1, #24]
 800304a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800304e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003050:	684a      	ldr	r2, [r1, #4]
 8003052:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003054:	6203      	str	r3, [r0, #32]
}
 8003056:	bc30      	pop	{r4, r5}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00

08003060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003062:	6a03      	ldr	r3, [r0, #32]
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800306e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003070:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003074:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003078:	680d      	ldr	r5, [r1, #0]
 800307a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800307c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003080:	688d      	ldr	r5, [r1, #8]
 8003082:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003086:	4d12      	ldr	r5, [pc, #72]	; (80030d0 <TIM_OC3_SetConfig+0x70>)
 8003088:	42a8      	cmp	r0, r5
 800308a:	d019      	beq.n	80030c0 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308c:	4d10      	ldr	r5, [pc, #64]	; (80030d0 <TIM_OC3_SetConfig+0x70>)
 800308e:	42a8      	cmp	r0, r5
 8003090:	d007      	beq.n	80030a2 <TIM_OC3_SetConfig+0x42>
 8003092:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8003096:	42a8      	cmp	r0, r5
 8003098:	d003      	beq.n	80030a2 <TIM_OC3_SetConfig+0x42>
 800309a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800309e:	42a8      	cmp	r0, r5
 80030a0:	d107      	bne.n	80030b2 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030a2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030a6:	694d      	ldr	r5, [r1, #20]
 80030a8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ac:	698d      	ldr	r5, [r1, #24]
 80030ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030b4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030b6:	684a      	ldr	r2, [r1, #4]
 80030b8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ba:	6203      	str	r3, [r0, #32]
}
 80030bc:	bc30      	pop	{r4, r5}
 80030be:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030c4:	68cd      	ldr	r5, [r1, #12]
 80030c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ce:	e7dd      	b.n	800308c <TIM_OC3_SetConfig+0x2c>
 80030d0:	40012c00 	.word	0x40012c00

080030d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030d6:	6a03      	ldr	r3, [r0, #32]
 80030d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030e2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ec:	680d      	ldr	r5, [r1, #0]
 80030ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030f6:	688d      	ldr	r5, [r1, #8]
 80030f8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fc:	4d0b      	ldr	r5, [pc, #44]	; (800312c <TIM_OC4_SetConfig+0x58>)
 80030fe:	42a8      	cmp	r0, r5
 8003100:	d007      	beq.n	8003112 <TIM_OC4_SetConfig+0x3e>
 8003102:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8003106:	42a8      	cmp	r0, r5
 8003108:	d003      	beq.n	8003112 <TIM_OC4_SetConfig+0x3e>
 800310a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800310e:	42a8      	cmp	r0, r5
 8003110:	d104      	bne.n	800311c <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003112:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003116:	694d      	ldr	r5, [r1, #20]
 8003118:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800311e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003120:	684b      	ldr	r3, [r1, #4]
 8003122:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003124:	6202      	str	r2, [r0, #32]
}
 8003126:	bc30      	pop	{r4, r5}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40012c00 	.word	0x40012c00

08003130 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003130:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003132:	6a03      	ldr	r3, [r0, #32]
 8003134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003138:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800313e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003140:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003144:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003148:	680d      	ldr	r5, [r1, #0]
 800314a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800314c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003150:	688d      	ldr	r5, [r1, #8]
 8003152:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003156:	4d0b      	ldr	r5, [pc, #44]	; (8003184 <TIM_OC5_SetConfig+0x54>)
 8003158:	42a8      	cmp	r0, r5
 800315a:	d007      	beq.n	800316c <TIM_OC5_SetConfig+0x3c>
 800315c:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8003160:	42a8      	cmp	r0, r5
 8003162:	d003      	beq.n	800316c <TIM_OC5_SetConfig+0x3c>
 8003164:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003168:	42a8      	cmp	r0, r5
 800316a:	d104      	bne.n	8003176 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800316c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003170:	694d      	ldr	r5, [r1, #20]
 8003172:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003178:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800317a:	684a      	ldr	r2, [r1, #4]
 800317c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	6203      	str	r3, [r0, #32]
}
 8003180:	bc30      	pop	{r4, r5}
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00

08003188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800318a:	6a03      	ldr	r3, [r0, #32]
 800318c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003190:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003194:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003196:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003198:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800319c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a0:	680d      	ldr	r5, [r1, #0]
 80031a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031aa:	688d      	ldr	r5, [r1, #8]
 80031ac:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b0:	4d0b      	ldr	r5, [pc, #44]	; (80031e0 <TIM_OC6_SetConfig+0x58>)
 80031b2:	42a8      	cmp	r0, r5
 80031b4:	d007      	beq.n	80031c6 <TIM_OC6_SetConfig+0x3e>
 80031b6:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80031ba:	42a8      	cmp	r0, r5
 80031bc:	d003      	beq.n	80031c6 <TIM_OC6_SetConfig+0x3e>
 80031be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031c2:	42a8      	cmp	r0, r5
 80031c4:	d104      	bne.n	80031d0 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031c6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031ca:	694d      	ldr	r5, [r1, #20]
 80031cc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031d2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031d4:	684b      	ldr	r3, [r1, #4]
 80031d6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	6202      	str	r2, [r0, #32]
}
 80031da:	bc30      	pop	{r4, r5}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00

080031e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e8:	6a04      	ldr	r4, [r0, #32]
 80031ea:	f024 0401 	bic.w	r4, r4, #1
 80031ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031f2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80031fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003200:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003202:	6203      	str	r3, [r0, #32]
}
 8003204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003208:	4770      	bx	lr

0800320a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320c:	6a03      	ldr	r3, [r0, #32]
 800320e:	f023 0310 	bic.w	r3, r3, #16
 8003212:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003214:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003216:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003218:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800321c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003220:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003228:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800322a:	6203      	str	r3, [r0, #32]
}
 800322c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003230:	4770      	bx	lr

08003232 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003232:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003234:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323c:	4319      	orrs	r1, r3
 800323e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003242:	6081      	str	r1, [r0, #8]
}
 8003244:	4770      	bx	lr
	...

08003248 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003248:	6802      	ldr	r2, [r0, #0]
 800324a:	68d3      	ldr	r3, [r2, #12]
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	6802      	ldr	r2, [r0, #0]
 8003254:	6891      	ldr	r1, [r2, #8]
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_TIM_Base_Start_IT+0x28>)
 8003258:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	2b06      	cmp	r3, #6
 800325c:	d006      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x24>
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003262:	d003      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8003264:	6813      	ldr	r3, [r2, #0]
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	2000      	movs	r0, #0
 800326e:	4770      	bx	lr
 8003270:	00010007 	.word	0x00010007

08003274 <HAL_TIM_PWM_MspInit>:
}
 8003274:	4770      	bx	lr

08003276 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_IC_CaptureCallback>:
}
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_TriggerCallback>:
}
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_IRQHandler>:
{
 800327e:	b510      	push	{r4, lr}
 8003280:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003282:	6803      	ldr	r3, [r0, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	f012 0f02 	tst.w	r2, #2
 800328a:	d011      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	f012 0f02 	tst.w	r2, #2
 8003292:	d00d      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003294:	f06f 0202 	mvn.w	r2, #2
 8003298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329a:	2301      	movs	r3, #1
 800329c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800329e:	6803      	ldr	r3, [r0, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f013 0f03 	tst.w	r3, #3
 80032a6:	d079      	beq.n	800339c <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80032a8:	f7ff ffe6 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ac:	2300      	movs	r3, #0
 80032ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	f012 0f04 	tst.w	r2, #4
 80032b8:	d012      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	f012 0f04 	tst.w	r2, #4
 80032c0:	d00e      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c2:	f06f 0204 	mvn.w	r2, #4
 80032c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c8:	2302      	movs	r3, #2
 80032ca:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80032d4:	d068      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ffce 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032dc:	2300      	movs	r3, #0
 80032de:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	f012 0f08 	tst.w	r2, #8
 80032e8:	d012      	beq.n	8003310 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	f012 0f08 	tst.w	r2, #8
 80032f0:	d00e      	beq.n	8003310 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032f2:	f06f 0208 	mvn.w	r2, #8
 80032f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f8:	2304      	movs	r3, #4
 80032fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f013 0f03 	tst.w	r3, #3
 8003304:	d057      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff ffb6 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330c:	2300      	movs	r3, #0
 800330e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	f012 0f10 	tst.w	r2, #16
 8003318:	d012      	beq.n	8003340 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	f012 0f10 	tst.w	r2, #16
 8003320:	d00e      	beq.n	8003340 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003322:	f06f 0210 	mvn.w	r2, #16
 8003326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003328:	2308      	movs	r3, #8
 800332a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003334:	d046      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	4620      	mov	r0, r4
 8003338:	f7ff ff9e 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333c:	2300      	movs	r3, #0
 800333e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	f012 0f01 	tst.w	r2, #1
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	f012 0f01 	tst.w	r2, #1
 8003350:	d13f      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	f012 0f80 	tst.w	r2, #128	; 0x80
 800335a:	d003      	beq.n	8003364 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003362:	d13d      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	f412 7f80 	tst.w	r2, #256	; 0x100
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003374:	d13b      	bne.n	80033ee <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800337e:	d003      	beq.n	8003388 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003386:	d139      	bne.n	80033fc <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	f012 0f20 	tst.w	r2, #32
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	f012 0f20 	tst.w	r2, #32
 8003398:	d137      	bne.n	800340a <HAL_TIM_IRQHandler+0x18c>
}
 800339a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339c:	f7ff ff6b 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff ff6a 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
 80033a6:	e781      	b.n	80032ac <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff ff64 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff ff63 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
 80033b4:	e792      	b.n	80032dc <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7ff ff5d 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff ff5c 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
 80033c2:	e7a3      	b.n	800330c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff ff56 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff ff55 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
 80033d0:	e7b4      	b.n	800333c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d2:	f06f 0201 	mvn.w	r2, #1
 80033d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d8:	4620      	mov	r0, r4
 80033da:	f7fd fa8f 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
 80033de:	e7b8      	b.n	8003352 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80033e6:	4620      	mov	r0, r4
 80033e8:	f000 fa05 	bl	80037f6 <HAL_TIMEx_BreakCallback>
 80033ec:	e7ba      	b.n	8003364 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80033f4:	4620      	mov	r0, r4
 80033f6:	f000 f9ff 	bl	80037f8 <HAL_TIMEx_Break2Callback>
 80033fa:	e7bc      	b.n	8003376 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003400:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff ff3a 	bl	800327c <HAL_TIM_TriggerCallback>
 8003408:	e7be      	b.n	8003388 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800340a:	f06f 0220 	mvn.w	r2, #32
 800340e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003410:	4620      	mov	r0, r4
 8003412:	f000 f9ef 	bl	80037f4 <HAL_TIMEx_CommutCallback>
}
 8003416:	e7c0      	b.n	800339a <HAL_TIM_IRQHandler+0x11c>

08003418 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003418:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341a:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <TIM_Base_SetConfig+0x6c>)
 800341c:	4290      	cmp	r0, r2
 800341e:	d002      	beq.n	8003426 <TIM_Base_SetConfig+0xe>
 8003420:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003424:	d103      	bne.n	800342e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800342a:	684a      	ldr	r2, [r1, #4]
 800342c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <TIM_Base_SetConfig+0x6c>)
 8003430:	4290      	cmp	r0, r2
 8003432:	d00a      	beq.n	800344a <TIM_Base_SetConfig+0x32>
 8003434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003438:	d007      	beq.n	800344a <TIM_Base_SetConfig+0x32>
 800343a:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 800343e:	4290      	cmp	r0, r2
 8003440:	d003      	beq.n	800344a <TIM_Base_SetConfig+0x32>
 8003442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003446:	4290      	cmp	r0, r2
 8003448:	d103      	bne.n	8003452 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344e:	68ca      	ldr	r2, [r1, #12]
 8003450:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003456:	694a      	ldr	r2, [r1, #20]
 8003458:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800345a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	688b      	ldr	r3, [r1, #8]
 800345e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003460:	680b      	ldr	r3, [r1, #0]
 8003462:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <TIM_Base_SetConfig+0x6c>)
 8003466:	4298      	cmp	r0, r3
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0x62>
 800346a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800346e:	4298      	cmp	r0, r3
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0x62>
 8003472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003476:	4298      	cmp	r0, r3
 8003478:	d101      	bne.n	800347e <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 800347a:	690b      	ldr	r3, [r1, #16]
 800347c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800347e:	2301      	movs	r3, #1
 8003480:	6143      	str	r3, [r0, #20]
}
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00

08003488 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003488:	b1a8      	cbz	r0, 80034b6 <HAL_TIM_Base_Init+0x2e>
{
 800348a:	b510      	push	{r4, lr}
 800348c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800348e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003492:	b15b      	cbz	r3, 80034ac <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	2302      	movs	r3, #2
 8003496:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349a:	1d21      	adds	r1, r4, #4
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	f7ff ffbb 	bl	8003418 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80034a8:	2000      	movs	r0, #0
}
 80034aa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80034ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034b0:	f7fd fb66 	bl	8000b80 <HAL_TIM_Base_MspInit>
 80034b4:	e7ee      	b.n	8003494 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80034b6:	2001      	movs	r0, #1
}
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80034ba:	b1a8      	cbz	r0, 80034e8 <HAL_TIM_PWM_Init+0x2e>
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80034c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034c4:	b15b      	cbz	r3, 80034de <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034cc:	1d21      	adds	r1, r4, #4
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f7ff ffa2 	bl	8003418 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80034da:	2000      	movs	r0, #0
}
 80034dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80034de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80034e2:	f7ff fec7 	bl	8003274 <HAL_TIM_PWM_MspInit>
 80034e6:	e7ee      	b.n	80034c6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
}
 80034ea:	4770      	bx	lr

080034ec <TIM_OC2_SetConfig>:
{
 80034ec:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ee:	6a03      	ldr	r3, [r0, #32]
 80034f0:	f023 0310 	bic.w	r3, r3, #16
 80034f4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80034f6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80034f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80034fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003500:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003504:	680d      	ldr	r5, [r1, #0]
 8003506:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800350a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800350e:	688d      	ldr	r5, [r1, #8]
 8003510:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003514:	4d12      	ldr	r5, [pc, #72]	; (8003560 <TIM_OC2_SetConfig+0x74>)
 8003516:	42a8      	cmp	r0, r5
 8003518:	d019      	beq.n	800354e <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351a:	4d11      	ldr	r5, [pc, #68]	; (8003560 <TIM_OC2_SetConfig+0x74>)
 800351c:	42a8      	cmp	r0, r5
 800351e:	d007      	beq.n	8003530 <TIM_OC2_SetConfig+0x44>
 8003520:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8003524:	42a8      	cmp	r0, r5
 8003526:	d003      	beq.n	8003530 <TIM_OC2_SetConfig+0x44>
 8003528:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800352c:	42a8      	cmp	r0, r5
 800352e:	d107      	bne.n	8003540 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003530:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003534:	694d      	ldr	r5, [r1, #20]
 8003536:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800353a:	698d      	ldr	r5, [r1, #24]
 800353c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003540:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003542:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003544:	684a      	ldr	r2, [r1, #4]
 8003546:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003548:	6203      	str	r3, [r0, #32]
}
 800354a:	bc30      	pop	{r4, r5}
 800354c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800354e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003552:	68cd      	ldr	r5, [r1, #12]
 8003554:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355c:	e7dd      	b.n	800351a <TIM_OC2_SetConfig+0x2e>
 800355e:	bf00      	nop
 8003560:	40012c00 	.word	0x40012c00

08003564 <HAL_TIM_PWM_ConfigChannel>:
{
 8003564:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003566:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	f000 8092 	beq.w	8003694 <HAL_TIM_PWM_ConfigChannel+0x130>
 8003570:	460d      	mov	r5, r1
 8003572:	4604      	mov	r4, r0
 8003574:	2301      	movs	r3, #1
 8003576:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003580:	2a14      	cmp	r2, #20
 8003582:	d81e      	bhi.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003584:	e8df f002 	tbb	[pc, r2]
 8003588:	1d1d1d0b 	.word	0x1d1d1d0b
 800358c:	1d1d1d24 	.word	0x1d1d1d24
 8003590:	1d1d1d38 	.word	0x1d1d1d38
 8003594:	1d1d1d4b 	.word	0x1d1d1d4b
 8003598:	1d1d1d5f 	.word	0x1d1d1d5f
 800359c:	72          	.byte	0x72
 800359d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800359e:	6800      	ldr	r0, [r0, #0]
 80035a0:	f7ff fd20 	bl	8002fe4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035a4:	6822      	ldr	r2, [r4, #0]
 80035a6:	6993      	ldr	r3, [r2, #24]
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	6993      	ldr	r3, [r2, #24]
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	6993      	ldr	r3, [r2, #24]
 80035bc:	6929      	ldr	r1, [r5, #16]
 80035be:	430b      	orrs	r3, r1
 80035c0:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035d0:	6800      	ldr	r0, [r0, #0]
 80035d2:	f7ff ff8b 	bl	80034ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	6993      	ldr	r3, [r2, #24]
 80035da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035de:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	6993      	ldr	r3, [r2, #24]
 80035e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	6993      	ldr	r3, [r2, #24]
 80035ee:	6929      	ldr	r1, [r5, #16]
 80035f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035f4:	6193      	str	r3, [r2, #24]
      break;
 80035f6:	e7e4      	b.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035f8:	6800      	ldr	r0, [r0, #0]
 80035fa:	f7ff fd31 	bl	8003060 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fe:	6822      	ldr	r2, [r4, #0]
 8003600:	69d3      	ldr	r3, [r2, #28]
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003608:	6822      	ldr	r2, [r4, #0]
 800360a:	69d3      	ldr	r3, [r2, #28]
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	69d3      	ldr	r3, [r2, #28]
 8003616:	6929      	ldr	r1, [r5, #16]
 8003618:	430b      	orrs	r3, r1
 800361a:	61d3      	str	r3, [r2, #28]
      break;
 800361c:	e7d1      	b.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800361e:	6800      	ldr	r0, [r0, #0]
 8003620:	f7ff fd58 	bl	80030d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003624:	6822      	ldr	r2, [r4, #0]
 8003626:	69d3      	ldr	r3, [r2, #28]
 8003628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800362c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	69d3      	ldr	r3, [r2, #28]
 8003632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003636:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	69d3      	ldr	r3, [r2, #28]
 800363c:	6929      	ldr	r1, [r5, #16]
 800363e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003642:	61d3      	str	r3, [r2, #28]
      break;
 8003644:	e7bd      	b.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003646:	6800      	ldr	r0, [r0, #0]
 8003648:	f7ff fd72 	bl	8003130 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800364c:	6822      	ldr	r2, [r4, #0]
 800364e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003650:	f043 0308 	orr.w	r3, r3, #8
 8003654:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800365a:	f023 0304 	bic.w	r3, r3, #4
 800365e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003664:	6929      	ldr	r1, [r5, #16]
 8003666:	430b      	orrs	r3, r1
 8003668:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800366a:	e7aa      	b.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800366c:	6800      	ldr	r0, [r0, #0]
 800366e:	f7ff fd8b 	bl	8003188 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800367a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003684:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800368a:	6929      	ldr	r1, [r5, #16]
 800368c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003690:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003692:	e796      	b.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8003694:	2002      	movs	r0, #2
 8003696:	e79a      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x6a>

08003698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003698:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800369a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80036a4:	430b      	orrs	r3, r1
 80036a6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a8:	6083      	str	r3, [r0, #8]
}
 80036aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80036b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d064      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xd2>
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80036bc:	2301      	movs	r3, #1
 80036be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	6802      	ldr	r2, [r0, #0]
 80036ca:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_TIM_ConfigClockSource+0xd8>)
 80036ce:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80036d0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80036d2:	680b      	ldr	r3, [r1, #0]
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d04a      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xbe>
 80036d8:	d913      	bls.n	8003702 <HAL_TIM_ConfigClockSource+0x52>
 80036da:	2b60      	cmp	r3, #96	; 0x60
 80036dc:	d03d      	beq.n	800375a <HAL_TIM_ConfigClockSource+0xaa>
 80036de:	d91e      	bls.n	800371e <HAL_TIM_ConfigClockSource+0x6e>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d028      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x86>
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e8:	d130      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80036ea:	68cb      	ldr	r3, [r1, #12]
 80036ec:	684a      	ldr	r2, [r1, #4]
 80036ee:	6889      	ldr	r1, [r1, #8]
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	f7ff ffd1 	bl	8003698 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f6:	6822      	ldr	r2, [r4, #0]
 80036f8:	6893      	ldr	r3, [r2, #8]
 80036fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036fe:	6093      	str	r3, [r2, #8]
      break;
 8003700:	e024      	b.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8003702:	2b10      	cmp	r3, #16
 8003704:	d006      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x64>
 8003706:	d904      	bls.n	8003712 <HAL_TIM_ConfigClockSource+0x62>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d003      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x64>
 800370c:	2b30      	cmp	r3, #48	; 0x30
 800370e:	d001      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x64>
 8003710:	e01c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
 8003712:	b9db      	cbnz	r3, 800374c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003714:	4619      	mov	r1, r3
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	f7ff fd8b 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 800371c:	e016      	b.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800371e:	2b50      	cmp	r3, #80	; 0x50
 8003720:	d114      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	68ca      	ldr	r2, [r1, #12]
 8003724:	6849      	ldr	r1, [r1, #4]
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	f7ff fd5c 	bl	80031e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800372c:	2150      	movs	r1, #80	; 0x50
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	f7ff fd7f 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8003734:	e00a      	b.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8003736:	68cb      	ldr	r3, [r1, #12]
 8003738:	684a      	ldr	r2, [r1, #4]
 800373a:	6889      	ldr	r1, [r1, #8]
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f7ff ffab 	bl	8003698 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003746:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800374a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800374c:	2301      	movs	r3, #1
 800374e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003752:	2000      	movs	r0, #0
 8003754:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003758:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800375a:	68ca      	ldr	r2, [r1, #12]
 800375c:	6849      	ldr	r1, [r1, #4]
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	f7ff fd53 	bl	800320a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003764:	2160      	movs	r1, #96	; 0x60
 8003766:	6820      	ldr	r0, [r4, #0]
 8003768:	f7ff fd63 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 800376c:	e7ee      	b.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	68ca      	ldr	r2, [r1, #12]
 8003770:	6849      	ldr	r1, [r1, #4]
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	f7ff fd36 	bl	80031e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003778:	2140      	movs	r1, #64	; 0x40
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	f7ff fd59 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8003780:	e7e4      	b.n	800374c <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8003782:	2002      	movs	r0, #2
}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	ffce0088 	.word	0xffce0088

0800378c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d02b      	beq.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003794:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003796:	2301      	movs	r3, #1
 8003798:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	2302      	movs	r3, #2
 800379e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a2:	6802      	ldr	r2, [r0, #0]
 80037a4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a6:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037a8:	4c11      	ldr	r4, [pc, #68]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80037aa:	42a2      	cmp	r2, r4
 80037ac:	d019      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b2:	680c      	ldr	r4, [r1, #0]
 80037b4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b8:	6803      	ldr	r3, [r0, #0]
 80037ba:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d002      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d104      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	688a      	ldr	r2, [r1, #8]
 80037cc:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ce:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d6:	2300      	movs	r3, #0
 80037d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80037dc:	4618      	mov	r0, r3
}
 80037de:	bc30      	pop	{r4, r5}
 80037e0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037e6:	684c      	ldr	r4, [r1, #4]
 80037e8:	4323      	orrs	r3, r4
 80037ea:	e7e0      	b.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80037ec:	2002      	movs	r0, #2
}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00

080037f4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037f8:	4770      	bx	lr

080037fa <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037fa:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80037fe:	2b21      	cmp	r3, #33	; 0x21
 8003800:	d000      	beq.n	8003804 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003802:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8003804:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8003808:	b29b      	uxth	r3, r3
 800380a:	b16b      	cbz	r3, 8003828 <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800380c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	6803      	ldr	r3, [r0, #0]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003814:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003816:	3301      	adds	r3, #1
 8003818:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800381a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800381e:	3b01      	subs	r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8003826:	e7ec      	b.n	8003802 <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003828:	6802      	ldr	r2, [r0, #0]
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003830:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003832:	6802      	ldr	r2, [r0, #0]
 8003834:	6813      	ldr	r3, [r2, #0]
 8003836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	4770      	bx	lr

0800383e <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800383e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003842:	2b21      	cmp	r3, #33	; 0x21
 8003844:	d000      	beq.n	8003848 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003846:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8003848:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800384c:	b29b      	uxth	r3, r3
 800384e:	b17b      	cbz	r3, 8003870 <UART_TxISR_16BIT+0x32>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003850:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	6802      	ldr	r2, [r0, #0]
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800385c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800385e:	3302      	adds	r3, #2
 8003860:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8003862:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8003866:	3b01      	subs	r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800386e:	e7ea      	b.n	8003846 <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003870:	6802      	ldr	r2, [r0, #0]
 8003872:	6813      	ldr	r3, [r2, #0]
 8003874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003878:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387a:	6802      	ldr	r2, [r0, #0]
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4770      	bx	lr

08003886 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003886:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800388a:	2b21      	cmp	r3, #33	; 0x21
 800388c:	d000      	beq.n	8003890 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800388e:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003890:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8003894:	e00c      	b.n	80038b0 <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003896:	6802      	ldr	r2, [r0, #0]
 8003898:	6893      	ldr	r3, [r2, #8]
 800389a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800389e:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038a0:	6802      	ldr	r2, [r0, #0]
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 80038aa:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ec      	beq.n	800388e <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 80038b4:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80038b8:	b292      	uxth	r2, r2
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d0eb      	beq.n	8003896 <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80038be:	6802      	ldr	r2, [r0, #0]
 80038c0:	69d1      	ldr	r1, [r2, #28]
 80038c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038c6:	d0f1      	beq.n	80038ac <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038c8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80038ca:	7809      	ldrb	r1, [r1, #0]
 80038cc:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 80038ce:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80038d0:	3201      	adds	r2, #1
 80038d2:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80038d4:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80038d8:	3a01      	subs	r2, #1
 80038da:	b292      	uxth	r2, r2
 80038dc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 80038e0:	e7e4      	b.n	80038ac <UART_TxISR_8BIT_FIFOEN+0x26>

080038e2 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80038e6:	2b21      	cmp	r3, #33	; 0x21
 80038e8:	d000      	beq.n	80038ec <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 80038ea:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038ec:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80038f0:	e00c      	b.n	800390c <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80038f2:	6802      	ldr	r2, [r0, #0]
 80038f4:	6893      	ldr	r3, [r2, #8]
 80038f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038fa:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038fc:	6802      	ldr	r2, [r0, #0]
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003904:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 8003906:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003908:	3b01      	subs	r3, #1
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ec      	beq.n	80038ea <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8003910:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8003914:	b292      	uxth	r2, r2
 8003916:	2a00      	cmp	r2, #0
 8003918:	d0eb      	beq.n	80038f2 <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800391a:	6802      	ldr	r2, [r0, #0]
 800391c:	69d1      	ldr	r1, [r2, #28]
 800391e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003922:	d0f1      	beq.n	8003908 <UART_TxISR_16BIT_FIFOEN+0x26>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003924:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003926:	8809      	ldrh	r1, [r1, #0]
 8003928:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800392c:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800392e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003930:	3202      	adds	r2, #2
 8003932:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8003934:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8003938:	3a01      	subs	r2, #1
 800393a:	b292      	uxth	r2, r2
 800393c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8003940:	e7e2      	b.n	8003908 <UART_TxISR_16BIT_FIFOEN+0x26>
	...

08003944 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003944:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003948:	2b20      	cmp	r3, #32
 800394a:	d146      	bne.n	80039da <HAL_UART_Transmit_IT+0x96>
    if ((pData == NULL) || (Size == 0U))
 800394c:	2900      	cmp	r1, #0
 800394e:	d046      	beq.n	80039de <HAL_UART_Transmit_IT+0x9a>
 8003950:	2a00      	cmp	r2, #0
 8003952:	d046      	beq.n	80039e2 <HAL_UART_Transmit_IT+0x9e>
    __HAL_LOCK(huart);
 8003954:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d044      	beq.n	80039e6 <HAL_UART_Transmit_IT+0xa2>
 800395c:	2301      	movs	r3, #1
 800395e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8003962:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003964:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8003968:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	6703      	str	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003974:	2321      	movs	r3, #33	; 0x21
 8003976:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800397a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800397c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003980:	d00f      	beq.n	80039a2 <HAL_UART_Transmit_IT+0x5e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003982:	6883      	ldr	r3, [r0, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d021      	beq.n	80039ce <HAL_UART_Transmit_IT+0x8a>
        huart->TxISR = UART_TxISR_8BIT;
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_UART_Transmit_IT+0xa8>)
 800398c:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800398e:	2300      	movs	r3, #0
 8003990:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003994:	6801      	ldr	r1, [r0, #0]
 8003996:	680a      	ldr	r2, [r1, #0]
 8003998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800399c:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800399e:	4618      	mov	r0, r3
 80039a0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a2:	6883      	ldr	r3, [r0, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_UART_Transmit_IT+0xac>)
 80039ac:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80039ae:	2300      	movs	r3, #0
 80039b0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80039b4:	6801      	ldr	r1, [r0, #0]
 80039b6:	688a      	ldr	r2, [r1, #8]
 80039b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039bc:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 80039be:	4618      	mov	r0, r3
 80039c0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c2:	6903      	ldr	r3, [r0, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_UART_Transmit_IT+0x66>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_UART_Transmit_IT+0xb0>)
 80039ca:	6703      	str	r3, [r0, #112]	; 0x70
 80039cc:	e7ef      	b.n	80039ae <HAL_UART_Transmit_IT+0x6a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ce:	6903      	ldr	r3, [r0, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1da      	bne.n	800398a <HAL_UART_Transmit_IT+0x46>
        huart->TxISR = UART_TxISR_16BIT;
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_UART_Transmit_IT+0xb4>)
 80039d6:	6703      	str	r3, [r0, #112]	; 0x70
 80039d8:	e7d9      	b.n	800398e <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 80039da:	2002      	movs	r0, #2
 80039dc:	4770      	bx	lr
      return HAL_ERROR;
 80039de:	2001      	movs	r0, #1
 80039e0:	4770      	bx	lr
 80039e2:	2001      	movs	r0, #1
 80039e4:	4770      	bx	lr
    __HAL_LOCK(huart);
 80039e6:	2002      	movs	r0, #2
}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	080037fb 	.word	0x080037fb
 80039f0:	08003887 	.word	0x08003887
 80039f4:	080038e3 	.word	0x080038e3
 80039f8:	0800383f 	.word	0x0800383f
 80039fc:	00000000 	.word	0x00000000

08003a00 <UART_SetConfig>:
{
 8003a00:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003a04:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a06:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a08:	6883      	ldr	r3, [r0, #8]
 8003a0a:	6902      	ldr	r2, [r0, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	6942      	ldr	r2, [r0, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	69c2      	ldr	r2, [r0, #28]
 8003a14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8003a16:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003a18:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a1a:	6808      	ldr	r0, [r1, #0]
 8003a1c:	4aa1      	ldr	r2, [pc, #644]	; (8003ca4 <UART_SetConfig+0x2a4>)
 8003a1e:	4002      	ands	r2, r0
 8003a20:	431a      	orrs	r2, r3
 8003a22:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	6822      	ldr	r2, [r4, #0]
 8003a26:	6853      	ldr	r3, [r2, #4]
 8003a28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a2c:	68e1      	ldr	r1, [r4, #12]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a32:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	4b9c      	ldr	r3, [pc, #624]	; (8003ca8 <UART_SetConfig+0x2a8>)
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 8003a3c:	6a23      	ldr	r3, [r4, #32]
 8003a3e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a40:	6893      	ldr	r3, [r2, #8]
 8003a42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a4e:	6822      	ldr	r2, [r4, #0]
 8003a50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a52:	f023 030f 	bic.w	r3, r3, #15
 8003a56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	4a93      	ldr	r2, [pc, #588]	; (8003cac <UART_SetConfig+0x2ac>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d019      	beq.n	8003a98 <UART_SetConfig+0x98>
 8003a64:	4a90      	ldr	r2, [pc, #576]	; (8003ca8 <UART_SetConfig+0x2a8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02a      	beq.n	8003ac0 <UART_SetConfig+0xc0>
 8003a6a:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a6c:	4a8e      	ldr	r2, [pc, #568]	; (8003ca8 <UART_SetConfig+0x2a8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d043      	beq.n	8003afa <UART_SetConfig+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a72:	69e3      	ldr	r3, [r4, #28]
 8003a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a78:	f000 8307 	beq.w	800408a <UART_SetConfig+0x68a>
    switch (clocksource)
 8003a7c:	3d01      	subs	r5, #1
 8003a7e:	2d07      	cmp	r5, #7
 8003a80:	f200 854f 	bhi.w	8004522 <UART_SetConfig+0xb22>
 8003a84:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003a88:	046e041e 	.word	0x046e041e
 8003a8c:	04ca054d 	.word	0x04ca054d
 8003a90:	054d054d 	.word	0x054d054d
 8003a94:	0508054d 	.word	0x0508054d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003aa0:	f002 0203 	and.w	r2, r2, #3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa4:	2a03      	cmp	r2, #3
 8003aa6:	d809      	bhi.n	8003abc <UART_SetConfig+0xbc>
 8003aa8:	e8df f002 	tbb	[pc, r2]
 8003aac:	06230402 	.word	0x06230402
 8003ab0:	2501      	movs	r5, #1
 8003ab2:	e7db      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003ab4:	2504      	movs	r5, #4
 8003ab6:	e7d9      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003ab8:	2508      	movs	r5, #8
 8003aba:	e7d7      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003abc:	2510      	movs	r5, #16
 8003abe:	e7d5      	b.n	8003a6c <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003ac8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003acc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003ad0:	d00b      	beq.n	8003aea <UART_SetConfig+0xea>
 8003ad2:	d907      	bls.n	8003ae4 <UART_SetConfig+0xe4>
 8003ad4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003ad8:	d00d      	beq.n	8003af6 <UART_SetConfig+0xf6>
 8003ada:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003ade:	d106      	bne.n	8003aee <UART_SetConfig+0xee>
 8003ae0:	2508      	movs	r5, #8
 8003ae2:	e7c3      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003ae4:	b91a      	cbnz	r2, 8003aee <UART_SetConfig+0xee>
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	e7c0      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003aea:	2504      	movs	r5, #4
 8003aec:	e7be      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003aee:	2510      	movs	r5, #16
 8003af0:	e7bc      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003af2:	2502      	movs	r5, #2
 8003af4:	e7ba      	b.n	8003a6c <UART_SetConfig+0x6c>
 8003af6:	2502      	movs	r5, #2
 8003af8:	e7b8      	b.n	8003a6c <UART_SetConfig+0x6c>
    switch (clocksource)
 8003afa:	2d08      	cmp	r5, #8
 8003afc:	f200 8514 	bhi.w	8004528 <UART_SetConfig+0xb28>
 8003b00:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003b04:	05120009 	.word	0x05120009
 8003b08:	0512005a 	.word	0x0512005a
 8003b0c:	05120078 	.word	0x05120078
 8003b10:	05120512 	.word	0x05120512
 8003b14:	00af      	.short	0x00af
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b16:	f7fe ff17 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8003b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b1c:	b1d3      	cbz	r3, 8003b54 <UART_SetConfig+0x154>
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d036      	beq.n	8003b90 <UART_SetConfig+0x190>
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d036      	beq.n	8003b94 <UART_SetConfig+0x194>
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d036      	beq.n	8003b98 <UART_SetConfig+0x198>
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d036      	beq.n	8003b9c <UART_SetConfig+0x19c>
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d036      	beq.n	8003ba0 <UART_SetConfig+0x1a0>
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d036      	beq.n	8003ba4 <UART_SetConfig+0x1a4>
 8003b36:	2b07      	cmp	r3, #7
 8003b38:	d036      	beq.n	8003ba8 <UART_SetConfig+0x1a8>
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d036      	beq.n	8003bac <UART_SetConfig+0x1ac>
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	d036      	beq.n	8003bb0 <UART_SetConfig+0x1b0>
 8003b42:	2b0a      	cmp	r3, #10
 8003b44:	d036      	beq.n	8003bb4 <UART_SetConfig+0x1b4>
 8003b46:	2b0b      	cmp	r3, #11
 8003b48:	d001      	beq.n	8003b4e <UART_SetConfig+0x14e>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e003      	b.n	8003b56 <UART_SetConfig+0x156>
 8003b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b52:	e000      	b.n	8003b56 <UART_SetConfig+0x156>
 8003b54:	2301      	movs	r3, #1
 8003b56:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	f000 84e6 	beq.w	800452c <UART_SetConfig+0xb2c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b60:	6862      	ldr	r2, [r4, #4]
 8003b62:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003b66:	4283      	cmp	r3, r0
 8003b68:	f200 84e2 	bhi.w	8004530 <UART_SetConfig+0xb30>
 8003b6c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003b70:	f200 84e0 	bhi.w	8004534 <UART_SetConfig+0xb34>
        switch (clocksource)
 8003b74:	2d08      	cmp	r5, #8
 8003b76:	f200 8285 	bhi.w	8004084 <UART_SetConfig+0x684>
 8003b7a:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003b7e:	00d0      	.short	0x00d0
 8003b80:	012f0283 	.word	0x012f0283
 8003b84:	01930283 	.word	0x01930283
 8003b88:	02830283 	.word	0x02830283
 8003b8c:	021f0283 	.word	0x021f0283
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b90:	2302      	movs	r3, #2
 8003b92:	e7e0      	b.n	8003b56 <UART_SetConfig+0x156>
 8003b94:	2304      	movs	r3, #4
 8003b96:	e7de      	b.n	8003b56 <UART_SetConfig+0x156>
 8003b98:	2306      	movs	r3, #6
 8003b9a:	e7dc      	b.n	8003b56 <UART_SetConfig+0x156>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	e7da      	b.n	8003b56 <UART_SetConfig+0x156>
 8003ba0:	230a      	movs	r3, #10
 8003ba2:	e7d8      	b.n	8003b56 <UART_SetConfig+0x156>
 8003ba4:	230c      	movs	r3, #12
 8003ba6:	e7d6      	b.n	8003b56 <UART_SetConfig+0x156>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	e7d4      	b.n	8003b56 <UART_SetConfig+0x156>
 8003bac:	2320      	movs	r3, #32
 8003bae:	e7d2      	b.n	8003b56 <UART_SetConfig+0x156>
 8003bb0:	2340      	movs	r3, #64	; 0x40
 8003bb2:	e7d0      	b.n	8003b56 <UART_SetConfig+0x156>
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	e7ce      	b.n	8003b56 <UART_SetConfig+0x156>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d06f      	beq.n	8003c9e <UART_SetConfig+0x29e>
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d078      	beq.n	8003cb4 <UART_SetConfig+0x2b4>
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d078      	beq.n	8003cb8 <UART_SetConfig+0x2b8>
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d078      	beq.n	8003cbc <UART_SetConfig+0x2bc>
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d078      	beq.n	8003cc0 <UART_SetConfig+0x2c0>
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d078      	beq.n	8003cc4 <UART_SetConfig+0x2c4>
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d078      	beq.n	8003cc8 <UART_SetConfig+0x2c8>
 8003bd6:	2b07      	cmp	r3, #7
 8003bd8:	d078      	beq.n	8003ccc <UART_SetConfig+0x2cc>
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d078      	beq.n	8003cd0 <UART_SetConfig+0x2d0>
 8003bde:	2b09      	cmp	r3, #9
 8003be0:	d078      	beq.n	8003cd4 <UART_SetConfig+0x2d4>
 8003be2:	2b0a      	cmp	r3, #10
 8003be4:	d078      	beq.n	8003cd8 <UART_SetConfig+0x2d8>
 8003be6:	2b0b      	cmp	r3, #11
 8003be8:	d001      	beq.n	8003bee <UART_SetConfig+0x1ee>
 8003bea:	4831      	ldr	r0, [pc, #196]	; (8003cb0 <UART_SetConfig+0x2b0>)
 8003bec:	e7b5      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003bee:	f24f 4024 	movw	r0, #62500	; 0xf424
 8003bf2:	e7b2      	b.n	8003b5a <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003bf4:	f7fe fe3a 	bl	800286c <HAL_RCC_GetSysClockFreq>
 8003bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bfa:	b1d3      	cbz	r3, 8003c32 <UART_SetConfig+0x232>
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d01c      	beq.n	8003c3a <UART_SetConfig+0x23a>
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d01c      	beq.n	8003c3e <UART_SetConfig+0x23e>
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d01c      	beq.n	8003c42 <UART_SetConfig+0x242>
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d01c      	beq.n	8003c46 <UART_SetConfig+0x246>
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d01c      	beq.n	8003c4a <UART_SetConfig+0x24a>
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d01c      	beq.n	8003c4e <UART_SetConfig+0x24e>
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d01c      	beq.n	8003c52 <UART_SetConfig+0x252>
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d01c      	beq.n	8003c56 <UART_SetConfig+0x256>
 8003c1c:	2b09      	cmp	r3, #9
 8003c1e:	d01c      	beq.n	8003c5a <UART_SetConfig+0x25a>
 8003c20:	2b0a      	cmp	r3, #10
 8003c22:	d01c      	beq.n	8003c5e <UART_SetConfig+0x25e>
 8003c24:	2b0b      	cmp	r3, #11
 8003c26:	d001      	beq.n	8003c2c <UART_SetConfig+0x22c>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e003      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c30:	e000      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c32:	2301      	movs	r3, #1
 8003c34:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003c38:	e78f      	b.n	8003b5a <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e7fa      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	e7f8      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c42:	2306      	movs	r3, #6
 8003c44:	e7f6      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c46:	2308      	movs	r3, #8
 8003c48:	e7f4      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c4a:	230a      	movs	r3, #10
 8003c4c:	e7f2      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c4e:	230c      	movs	r3, #12
 8003c50:	e7f0      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c52:	2310      	movs	r3, #16
 8003c54:	e7ee      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c56:	2320      	movs	r3, #32
 8003c58:	e7ec      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	e7ea      	b.n	8003c34 <UART_SetConfig+0x234>
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	e7e8      	b.n	8003c34 <UART_SetConfig+0x234>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d039      	beq.n	8003cdc <UART_SetConfig+0x2dc>
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d03a      	beq.n	8003ce2 <UART_SetConfig+0x2e2>
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d03b      	beq.n	8003ce8 <UART_SetConfig+0x2e8>
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d03c      	beq.n	8003cee <UART_SetConfig+0x2ee>
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d03d      	beq.n	8003cf4 <UART_SetConfig+0x2f4>
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d03e      	beq.n	8003cfa <UART_SetConfig+0x2fa>
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d03f      	beq.n	8003d00 <UART_SetConfig+0x300>
 8003c80:	2b07      	cmp	r3, #7
 8003c82:	d040      	beq.n	8003d06 <UART_SetConfig+0x306>
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d041      	beq.n	8003d0c <UART_SetConfig+0x30c>
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d042      	beq.n	8003d12 <UART_SetConfig+0x312>
 8003c8c:	2b0a      	cmp	r3, #10
 8003c8e:	d043      	beq.n	8003d18 <UART_SetConfig+0x318>
 8003c90:	2b0b      	cmp	r3, #11
 8003c92:	d002      	beq.n	8003c9a <UART_SetConfig+0x29a>
 8003c94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c98:	e75f      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003c9a:	2080      	movs	r0, #128	; 0x80
 8003c9c:	e75d      	b.n	8003b5a <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003c9e:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <UART_SetConfig+0x2b0>)
 8003ca0:	e75b      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003ca2:	bf00      	nop
 8003ca4:	cfff69f3 	.word	0xcfff69f3
 8003ca8:	40008000 	.word	0x40008000
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	48ac      	ldr	r0, [pc, #688]	; (8003f68 <UART_SetConfig+0x568>)
 8003cb6:	e750      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cb8:	48ac      	ldr	r0, [pc, #688]	; (8003f6c <UART_SetConfig+0x56c>)
 8003cba:	e74e      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cbc:	48ac      	ldr	r0, [pc, #688]	; (8003f70 <UART_SetConfig+0x570>)
 8003cbe:	e74c      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cc0:	48ac      	ldr	r0, [pc, #688]	; (8003f74 <UART_SetConfig+0x574>)
 8003cc2:	e74a      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cc4:	48ac      	ldr	r0, [pc, #688]	; (8003f78 <UART_SetConfig+0x578>)
 8003cc6:	e748      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cc8:	48ac      	ldr	r0, [pc, #688]	; (8003f7c <UART_SetConfig+0x57c>)
 8003cca:	e746      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003ccc:	48ac      	ldr	r0, [pc, #688]	; (8003f80 <UART_SetConfig+0x580>)
 8003cce:	e744      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cd0:	48ac      	ldr	r0, [pc, #688]	; (8003f84 <UART_SetConfig+0x584>)
 8003cd2:	e742      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cd4:	48ac      	ldr	r0, [pc, #688]	; (8003f88 <UART_SetConfig+0x588>)
 8003cd6:	e740      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cd8:	48ac      	ldr	r0, [pc, #688]	; (8003f8c <UART_SetConfig+0x58c>)
 8003cda:	e73e      	b.n	8003b5a <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cdc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ce0:	e73b      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003ce2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ce6:	e738      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003ce8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cec:	e735      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cee:	f241 5055 	movw	r0, #5461	; 0x1555
 8003cf2:	e732      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cf4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003cf8:	e72f      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003cfa:	f640 40cc 	movw	r0, #3276	; 0xccc
 8003cfe:	e72c      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003d00:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8003d04:	e729      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003d06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d0a:	e726      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003d0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d10:	e723      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003d12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003d16:	e720      	b.n	8003b5a <UART_SetConfig+0x15a>
 8003d18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d1c:	e71d      	b.n	8003b5a <UART_SetConfig+0x15a>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003d1e:	f7fe fe13 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d24:	b1e3      	cbz	r3, 8003d60 <UART_SetConfig+0x360>
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d03a      	beq.n	8003da0 <UART_SetConfig+0x3a0>
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d03b      	beq.n	8003da6 <UART_SetConfig+0x3a6>
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d03c      	beq.n	8003dac <UART_SetConfig+0x3ac>
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d03d      	beq.n	8003db2 <UART_SetConfig+0x3b2>
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d03e      	beq.n	8003db8 <UART_SetConfig+0x3b8>
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d03f      	beq.n	8003dbe <UART_SetConfig+0x3be>
 8003d3e:	2b07      	cmp	r3, #7
 8003d40:	d040      	beq.n	8003dc4 <UART_SetConfig+0x3c4>
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d041      	beq.n	8003dca <UART_SetConfig+0x3ca>
 8003d46:	2b09      	cmp	r3, #9
 8003d48:	d042      	beq.n	8003dd0 <UART_SetConfig+0x3d0>
 8003d4a:	2b0a      	cmp	r3, #10
 8003d4c:	d043      	beq.n	8003dd6 <UART_SetConfig+0x3d6>
 8003d4e:	2b0b      	cmp	r3, #11
 8003d50:	d002      	beq.n	8003d58 <UART_SetConfig+0x358>
 8003d52:	2201      	movs	r2, #1
 8003d54:	2300      	movs	r3, #0
 8003d56:	e005      	b.n	8003d64 <UART_SetConfig+0x364>
 8003d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e001      	b.n	8003d64 <UART_SetConfig+0x364>
 8003d60:	2201      	movs	r2, #1
 8003d62:	2300      	movs	r3, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	f7fc fa15 	bl	8000194 <__aeabi_uldivmod>
 8003d6a:	020f      	lsls	r7, r1, #8
 8003d6c:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003d70:	0206      	lsls	r6, r0, #8
 8003d72:	6862      	ldr	r2, [r4, #4]
 8003d74:	0850      	lsrs	r0, r2, #1
 8003d76:	2500      	movs	r5, #0
 8003d78:	462b      	mov	r3, r5
 8003d7a:	eb16 0b00 	adds.w	fp, r6, r0
 8003d7e:	f147 0c00 	adc.w	ip, r7, #0
 8003d82:	4658      	mov	r0, fp
 8003d84:	4661      	mov	r1, ip
 8003d86:	f7fc fa05 	bl	8000194 <__aeabi_uldivmod>
 8003d8a:	4603      	mov	r3, r0
            break;
 8003d8c:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d8e:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8003d92:	4a7f      	ldr	r2, [pc, #508]	; (8003f90 <UART_SetConfig+0x590>)
 8003d94:	4291      	cmp	r1, r2
 8003d96:	f200 83cf 	bhi.w	8004538 <UART_SetConfig+0xb38>
          huart->Instance->BRR = usartdiv;
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	60d3      	str	r3, [r2, #12]
 8003d9e:	e2c3      	b.n	8004328 <UART_SetConfig+0x928>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003da0:	2202      	movs	r2, #2
 8003da2:	2300      	movs	r3, #0
 8003da4:	e7de      	b.n	8003d64 <UART_SetConfig+0x364>
 8003da6:	2204      	movs	r2, #4
 8003da8:	2300      	movs	r3, #0
 8003daa:	e7db      	b.n	8003d64 <UART_SetConfig+0x364>
 8003dac:	2206      	movs	r2, #6
 8003dae:	2300      	movs	r3, #0
 8003db0:	e7d8      	b.n	8003d64 <UART_SetConfig+0x364>
 8003db2:	2208      	movs	r2, #8
 8003db4:	2300      	movs	r3, #0
 8003db6:	e7d5      	b.n	8003d64 <UART_SetConfig+0x364>
 8003db8:	220a      	movs	r2, #10
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e7d2      	b.n	8003d64 <UART_SetConfig+0x364>
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e7cf      	b.n	8003d64 <UART_SetConfig+0x364>
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e7cc      	b.n	8003d64 <UART_SetConfig+0x364>
 8003dca:	2220      	movs	r2, #32
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e7c9      	b.n	8003d64 <UART_SetConfig+0x364>
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e7c6      	b.n	8003d64 <UART_SetConfig+0x364>
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e7c3      	b.n	8003d64 <UART_SetConfig+0x364>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dde:	b1fb      	cbz	r3, 8003e20 <UART_SetConfig+0x420>
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d02d      	beq.n	8003e40 <UART_SetConfig+0x440>
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d030      	beq.n	8003e4a <UART_SetConfig+0x44a>
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d033      	beq.n	8003e54 <UART_SetConfig+0x454>
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d036      	beq.n	8003e5e <UART_SetConfig+0x45e>
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d039      	beq.n	8003e68 <UART_SetConfig+0x468>
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d03c      	beq.n	8003e72 <UART_SetConfig+0x472>
 8003df8:	2b07      	cmp	r3, #7
 8003dfa:	d03f      	beq.n	8003e7c <UART_SetConfig+0x47c>
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d042      	beq.n	8003e86 <UART_SetConfig+0x486>
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d045      	beq.n	8003e90 <UART_SetConfig+0x490>
 8003e04:	2b0a      	cmp	r3, #10
 8003e06:	d048      	beq.n	8003e9a <UART_SetConfig+0x49a>
 8003e08:	2b0b      	cmp	r3, #11
 8003e0a:	d004      	beq.n	8003e16 <UART_SetConfig+0x416>
 8003e0c:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003f94 <UART_SetConfig+0x594>
 8003e10:	f04f 0c00 	mov.w	ip, #0
 8003e14:	e008      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e16:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003f98 <UART_SetConfig+0x598>
 8003e1a:	f04f 0c00 	mov.w	ip, #0
 8003e1e:	e003      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e20:	f8df b170 	ldr.w	fp, [pc, #368]	; 8003f94 <UART_SetConfig+0x594>
 8003e24:	f04f 0c00 	mov.w	ip, #0
 8003e28:	0856      	lsrs	r6, r2, #1
 8003e2a:	2500      	movs	r5, #0
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	eb1b 0006 	adds.w	r0, fp, r6
 8003e32:	f14c 0100 	adc.w	r1, ip, #0
 8003e36:	f7fc f9ad 	bl	8000194 <__aeabi_uldivmod>
 8003e3a:	4603      	mov	r3, r0
            break;
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	e7a6      	b.n	8003d8e <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e40:	f8df b158 	ldr.w	fp, [pc, #344]	; 8003f9c <UART_SetConfig+0x59c>
 8003e44:	f04f 0c00 	mov.w	ip, #0
 8003e48:	e7ee      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e4a:	f8df b154 	ldr.w	fp, [pc, #340]	; 8003fa0 <UART_SetConfig+0x5a0>
 8003e4e:	f04f 0c00 	mov.w	ip, #0
 8003e52:	e7e9      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e54:	f20f 1c00 	addw	ip, pc, #256	; 0x100
 8003e58:	e9dc bc00 	ldrd	fp, ip, [ip]
 8003e5c:	e7e4      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e5e:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003fa4 <UART_SetConfig+0x5a4>
 8003e62:	f04f 0c00 	mov.w	ip, #0
 8003e66:	e7df      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e68:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8003fa8 <UART_SetConfig+0x5a8>
 8003e6c:	f04f 0c00 	mov.w	ip, #0
 8003e70:	e7da      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e72:	f20f 0cec 	addw	ip, pc, #236	; 0xec
 8003e76:	e9dc bc00 	ldrd	fp, ip, [ip]
 8003e7a:	e7d5      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e7c:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003fac <UART_SetConfig+0x5ac>
 8003e80:	f04f 0c00 	mov.w	ip, #0
 8003e84:	e7d0      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e86:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003fb0 <UART_SetConfig+0x5b0>
 8003e8a:	f04f 0c00 	mov.w	ip, #0
 8003e8e:	e7cb      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e90:	f8df b120 	ldr.w	fp, [pc, #288]	; 8003fb4 <UART_SetConfig+0x5b4>
 8003e94:	f04f 0c00 	mov.w	ip, #0
 8003e98:	e7c6      	b.n	8003e28 <UART_SetConfig+0x428>
 8003e9a:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8003fb8 <UART_SetConfig+0x5b8>
 8003e9e:	f04f 0c00 	mov.w	ip, #0
 8003ea2:	e7c1      	b.n	8003e28 <UART_SetConfig+0x428>
            pclk = HAL_RCC_GetSysClockFreq();
 8003ea4:	f7fe fce2 	bl	800286c <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eaa:	b1e3      	cbz	r3, 8003ee6 <UART_SetConfig+0x4e6>
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d032      	beq.n	8003f16 <UART_SetConfig+0x516>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d033      	beq.n	8003f1c <UART_SetConfig+0x51c>
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d034      	beq.n	8003f22 <UART_SetConfig+0x522>
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d035      	beq.n	8003f28 <UART_SetConfig+0x528>
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d036      	beq.n	8003f2e <UART_SetConfig+0x52e>
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d037      	beq.n	8003f34 <UART_SetConfig+0x534>
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	d038      	beq.n	8003f3a <UART_SetConfig+0x53a>
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d039      	beq.n	8003f40 <UART_SetConfig+0x540>
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d03a      	beq.n	8003f46 <UART_SetConfig+0x546>
 8003ed0:	2b0a      	cmp	r3, #10
 8003ed2:	d03b      	beq.n	8003f4c <UART_SetConfig+0x54c>
 8003ed4:	2b0b      	cmp	r3, #11
 8003ed6:	d002      	beq.n	8003ede <UART_SetConfig+0x4de>
 8003ed8:	2201      	movs	r2, #1
 8003eda:	2300      	movs	r3, #0
 8003edc:	e005      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e001      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2100      	movs	r1, #0
 8003eec:	f7fc f952 	bl	8000194 <__aeabi_uldivmod>
 8003ef0:	020f      	lsls	r7, r1, #8
 8003ef2:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003ef6:	0206      	lsls	r6, r0, #8
 8003ef8:	6862      	ldr	r2, [r4, #4]
 8003efa:	0850      	lsrs	r0, r2, #1
 8003efc:	2500      	movs	r5, #0
 8003efe:	462b      	mov	r3, r5
 8003f00:	eb16 0b00 	adds.w	fp, r6, r0
 8003f04:	f147 0c00 	adc.w	ip, r7, #0
 8003f08:	4658      	mov	r0, fp
 8003f0a:	4661      	mov	r1, ip
 8003f0c:	f7fc f942 	bl	8000194 <__aeabi_uldivmod>
 8003f10:	4603      	mov	r3, r0
            break;
 8003f12:	4628      	mov	r0, r5
 8003f14:	e73b      	b.n	8003d8e <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f16:	2202      	movs	r2, #2
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e7e6      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e7e3      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f22:	2206      	movs	r2, #6
 8003f24:	2300      	movs	r3, #0
 8003f26:	e7e0      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f28:	2208      	movs	r2, #8
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e7dd      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f2e:	220a      	movs	r2, #10
 8003f30:	2300      	movs	r3, #0
 8003f32:	e7da      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f34:	220c      	movs	r2, #12
 8003f36:	2300      	movs	r3, #0
 8003f38:	e7d7      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e7d4      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f40:	2220      	movs	r2, #32
 8003f42:	2300      	movs	r3, #0
 8003f44:	e7d1      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f46:	2240      	movs	r2, #64	; 0x40
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e7ce      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e7cb      	b.n	8003eea <UART_SetConfig+0x4ea>
 8003f52:	bf00      	nop
 8003f54:	f3af 8000 	nop.w
 8003f58:	28b0aa00 	.word	0x28b0aa00
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	14585500 	.word	0x14585500
 8003f64:	00000000 	.word	0x00000000
 8003f68:	007a1200 	.word	0x007a1200
 8003f6c:	003d0900 	.word	0x003d0900
 8003f70:	0028b0aa 	.word	0x0028b0aa
 8003f74:	001e8480 	.word	0x001e8480
 8003f78:	00186a00 	.word	0x00186a00
 8003f7c:	00145855 	.word	0x00145855
 8003f80:	000f4240 	.word	0x000f4240
 8003f84:	0007a120 	.word	0x0007a120
 8003f88:	0003d090 	.word	0x0003d090
 8003f8c:	0001e848 	.word	0x0001e848
 8003f90:	000ffcff 	.word	0x000ffcff
 8003f94:	f4240000 	.word	0xf4240000
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	7a120000 	.word	0x7a120000
 8003fa0:	3d090000 	.word	0x3d090000
 8003fa4:	1e848000 	.word	0x1e848000
 8003fa8:	186a0000 	.word	0x186a0000
 8003fac:	0f424000 	.word	0x0f424000
 8003fb0:	07a12000 	.word	0x07a12000
 8003fb4:	03d09000 	.word	0x03d09000
 8003fb8:	01e84800 	.word	0x01e84800
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fbe:	b1fb      	cbz	r3, 8004000 <UART_SetConfig+0x600>
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d02d      	beq.n	8004020 <UART_SetConfig+0x620>
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d030      	beq.n	800402a <UART_SetConfig+0x62a>
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d033      	beq.n	8004034 <UART_SetConfig+0x634>
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d036      	beq.n	800403e <UART_SetConfig+0x63e>
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	d039      	beq.n	8004048 <UART_SetConfig+0x648>
 8003fd4:	2b06      	cmp	r3, #6
 8003fd6:	d03c      	beq.n	8004052 <UART_SetConfig+0x652>
 8003fd8:	2b07      	cmp	r3, #7
 8003fda:	d03f      	beq.n	800405c <UART_SetConfig+0x65c>
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d042      	beq.n	8004066 <UART_SetConfig+0x666>
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	d045      	beq.n	8004070 <UART_SetConfig+0x670>
 8003fe4:	2b0a      	cmp	r3, #10
 8003fe6:	d048      	beq.n	800407a <UART_SetConfig+0x67a>
 8003fe8:	2b0b      	cmp	r3, #11
 8003fea:	d004      	beq.n	8003ff6 <UART_SetConfig+0x5f6>
 8003fec:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8003ff0:	f04f 0c00 	mov.w	ip, #0
 8003ff4:	e008      	b.n	8004008 <UART_SetConfig+0x608>
 8003ff6:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8003ffa:	f04f 0c00 	mov.w	ip, #0
 8003ffe:	e003      	b.n	8004008 <UART_SetConfig+0x608>
 8004000:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8004004:	f04f 0c00 	mov.w	ip, #0
 8004008:	0856      	lsrs	r6, r2, #1
 800400a:	2500      	movs	r5, #0
 800400c:	462b      	mov	r3, r5
 800400e:	eb1b 0006 	adds.w	r0, fp, r6
 8004012:	f14c 0100 	adc.w	r1, ip, #0
 8004016:	f7fc f8bd 	bl	8000194 <__aeabi_uldivmod>
 800401a:	4603      	mov	r3, r0
            break;
 800401c:	4628      	mov	r0, r5
 800401e:	e6b6      	b.n	8003d8e <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004020:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
 8004024:	f04f 0c00 	mov.w	ip, #0
 8004028:	e7ee      	b.n	8004008 <UART_SetConfig+0x608>
 800402a:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
 800402e:	f04f 0c00 	mov.w	ip, #0
 8004032:	e7e9      	b.n	8004008 <UART_SetConfig+0x608>
 8004034:	f8df b3d8 	ldr.w	fp, [pc, #984]	; 8004410 <UART_SetConfig+0xa10>
 8004038:	f04f 0c00 	mov.w	ip, #0
 800403c:	e7e4      	b.n	8004008 <UART_SetConfig+0x608>
 800403e:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
 8004042:	f04f 0c00 	mov.w	ip, #0
 8004046:	e7df      	b.n	8004008 <UART_SetConfig+0x608>
 8004048:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 8004414 <UART_SetConfig+0xa14>
 800404c:	f04f 0c00 	mov.w	ip, #0
 8004050:	e7da      	b.n	8004008 <UART_SetConfig+0x608>
 8004052:	f8df b3c4 	ldr.w	fp, [pc, #964]	; 8004418 <UART_SetConfig+0xa18>
 8004056:	f04f 0c00 	mov.w	ip, #0
 800405a:	e7d5      	b.n	8004008 <UART_SetConfig+0x608>
 800405c:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
 8004060:	f04f 0c00 	mov.w	ip, #0
 8004064:	e7d0      	b.n	8004008 <UART_SetConfig+0x608>
 8004066:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800406a:	f04f 0c00 	mov.w	ip, #0
 800406e:	e7cb      	b.n	8004008 <UART_SetConfig+0x608>
 8004070:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8004074:	f04f 0c00 	mov.w	ip, #0
 8004078:	e7c6      	b.n	8004008 <UART_SetConfig+0x608>
 800407a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 800407e:	f04f 0c00 	mov.w	ip, #0
 8004082:	e7c1      	b.n	8004008 <UART_SetConfig+0x608>
            ret = HAL_ERROR;
 8004084:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004086:	2300      	movs	r3, #0
 8004088:	e681      	b.n	8003d8e <UART_SetConfig+0x38e>
    switch (clocksource)
 800408a:	3d01      	subs	r5, #1
 800408c:	2d07      	cmp	r5, #7
 800408e:	f200 8116 	bhi.w	80042be <UART_SetConfig+0x8be>
 8004092:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004096:	0008      	.short	0x0008
 8004098:	01140056 	.word	0x01140056
 800409c:	0114008f 	.word	0x0114008f
 80040a0:	01140114 	.word	0x01140114
 80040a4:	00ce      	.short	0x00ce
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a6:	f7fe fc61 	bl	800296c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ac:	b1d3      	cbz	r3, 80040e4 <UART_SetConfig+0x6e4>
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d033      	beq.n	800411a <UART_SetConfig+0x71a>
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d033      	beq.n	800411e <UART_SetConfig+0x71e>
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d033      	beq.n	8004122 <UART_SetConfig+0x722>
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d033      	beq.n	8004126 <UART_SetConfig+0x726>
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d033      	beq.n	800412a <UART_SetConfig+0x72a>
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d033      	beq.n	800412e <UART_SetConfig+0x72e>
 80040c6:	2b07      	cmp	r3, #7
 80040c8:	d033      	beq.n	8004132 <UART_SetConfig+0x732>
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d033      	beq.n	8004136 <UART_SetConfig+0x736>
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	d033      	beq.n	800413a <UART_SetConfig+0x73a>
 80040d2:	2b0a      	cmp	r3, #10
 80040d4:	d033      	beq.n	800413e <UART_SetConfig+0x73e>
 80040d6:	2b0b      	cmp	r3, #11
 80040d8:	d001      	beq.n	80040de <UART_SetConfig+0x6de>
 80040da:	2301      	movs	r3, #1
 80040dc:	e003      	b.n	80040e6 <UART_SetConfig+0x6e6>
 80040de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e2:	e000      	b.n	80040e6 <UART_SetConfig+0x6e6>
 80040e4:	2301      	movs	r3, #1
 80040e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80040ea:	6862      	ldr	r2, [r4, #4]
 80040ec:	0853      	lsrs	r3, r2, #1
 80040ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80040f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80040f8:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fa:	f1a3 0110 	sub.w	r1, r3, #16
 80040fe:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004102:	4291      	cmp	r1, r2
 8004104:	f200 821a 	bhi.w	800453c <UART_SetConfig+0xb3c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004108:	b29a      	uxth	r2, r3
 800410a:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800410e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004112:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	60d3      	str	r3, [r2, #12]
 8004118:	e106      	b.n	8004328 <UART_SetConfig+0x928>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800411a:	2302      	movs	r3, #2
 800411c:	e7e3      	b.n	80040e6 <UART_SetConfig+0x6e6>
 800411e:	2304      	movs	r3, #4
 8004120:	e7e1      	b.n	80040e6 <UART_SetConfig+0x6e6>
 8004122:	2306      	movs	r3, #6
 8004124:	e7df      	b.n	80040e6 <UART_SetConfig+0x6e6>
 8004126:	2308      	movs	r3, #8
 8004128:	e7dd      	b.n	80040e6 <UART_SetConfig+0x6e6>
 800412a:	230a      	movs	r3, #10
 800412c:	e7db      	b.n	80040e6 <UART_SetConfig+0x6e6>
 800412e:	230c      	movs	r3, #12
 8004130:	e7d9      	b.n	80040e6 <UART_SetConfig+0x6e6>
 8004132:	2310      	movs	r3, #16
 8004134:	e7d7      	b.n	80040e6 <UART_SetConfig+0x6e6>
 8004136:	2320      	movs	r3, #32
 8004138:	e7d5      	b.n	80040e6 <UART_SetConfig+0x6e6>
 800413a:	2340      	movs	r3, #64	; 0x40
 800413c:	e7d3      	b.n	80040e6 <UART_SetConfig+0x6e6>
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	e7d1      	b.n	80040e6 <UART_SetConfig+0x6e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004144:	b1cb      	cbz	r3, 800417a <UART_SetConfig+0x77a>
 8004146:	2b01      	cmp	r3, #1
 8004148:	d020      	beq.n	800418c <UART_SetConfig+0x78c>
 800414a:	2b02      	cmp	r3, #2
 800414c:	d020      	beq.n	8004190 <UART_SetConfig+0x790>
 800414e:	2b03      	cmp	r3, #3
 8004150:	d020      	beq.n	8004194 <UART_SetConfig+0x794>
 8004152:	2b04      	cmp	r3, #4
 8004154:	d020      	beq.n	8004198 <UART_SetConfig+0x798>
 8004156:	2b05      	cmp	r3, #5
 8004158:	d020      	beq.n	800419c <UART_SetConfig+0x79c>
 800415a:	2b06      	cmp	r3, #6
 800415c:	d020      	beq.n	80041a0 <UART_SetConfig+0x7a0>
 800415e:	2b07      	cmp	r3, #7
 8004160:	d020      	beq.n	80041a4 <UART_SetConfig+0x7a4>
 8004162:	2b08      	cmp	r3, #8
 8004164:	d020      	beq.n	80041a8 <UART_SetConfig+0x7a8>
 8004166:	2b09      	cmp	r3, #9
 8004168:	d020      	beq.n	80041ac <UART_SetConfig+0x7ac>
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d020      	beq.n	80041b0 <UART_SetConfig+0x7b0>
 800416e:	2b0b      	cmp	r3, #11
 8004170:	d001      	beq.n	8004176 <UART_SetConfig+0x776>
 8004172:	4b99      	ldr	r3, [pc, #612]	; (80043d8 <UART_SetConfig+0x9d8>)
 8004174:	e002      	b.n	800417c <UART_SetConfig+0x77c>
 8004176:	4b99      	ldr	r3, [pc, #612]	; (80043dc <UART_SetConfig+0x9dc>)
 8004178:	e000      	b.n	800417c <UART_SetConfig+0x77c>
 800417a:	4b97      	ldr	r3, [pc, #604]	; (80043d8 <UART_SetConfig+0x9d8>)
 800417c:	6862      	ldr	r2, [r4, #4]
 800417e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004182:	fbb3 f3f2 	udiv	r3, r3, r2
 8004186:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004188:	2000      	movs	r0, #0
        break;
 800418a:	e7b6      	b.n	80040fa <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800418c:	4b94      	ldr	r3, [pc, #592]	; (80043e0 <UART_SetConfig+0x9e0>)
 800418e:	e7f5      	b.n	800417c <UART_SetConfig+0x77c>
 8004190:	4b94      	ldr	r3, [pc, #592]	; (80043e4 <UART_SetConfig+0x9e4>)
 8004192:	e7f3      	b.n	800417c <UART_SetConfig+0x77c>
 8004194:	4b94      	ldr	r3, [pc, #592]	; (80043e8 <UART_SetConfig+0x9e8>)
 8004196:	e7f1      	b.n	800417c <UART_SetConfig+0x77c>
 8004198:	4b94      	ldr	r3, [pc, #592]	; (80043ec <UART_SetConfig+0x9ec>)
 800419a:	e7ef      	b.n	800417c <UART_SetConfig+0x77c>
 800419c:	4b94      	ldr	r3, [pc, #592]	; (80043f0 <UART_SetConfig+0x9f0>)
 800419e:	e7ed      	b.n	800417c <UART_SetConfig+0x77c>
 80041a0:	4b94      	ldr	r3, [pc, #592]	; (80043f4 <UART_SetConfig+0x9f4>)
 80041a2:	e7eb      	b.n	800417c <UART_SetConfig+0x77c>
 80041a4:	4b94      	ldr	r3, [pc, #592]	; (80043f8 <UART_SetConfig+0x9f8>)
 80041a6:	e7e9      	b.n	800417c <UART_SetConfig+0x77c>
 80041a8:	4b94      	ldr	r3, [pc, #592]	; (80043fc <UART_SetConfig+0x9fc>)
 80041aa:	e7e7      	b.n	800417c <UART_SetConfig+0x77c>
 80041ac:	4b94      	ldr	r3, [pc, #592]	; (8004400 <UART_SetConfig+0xa00>)
 80041ae:	e7e5      	b.n	800417c <UART_SetConfig+0x77c>
 80041b0:	4b94      	ldr	r3, [pc, #592]	; (8004404 <UART_SetConfig+0xa04>)
 80041b2:	e7e3      	b.n	800417c <UART_SetConfig+0x77c>
        pclk = HAL_RCC_GetSysClockFreq();
 80041b4:	f7fe fb5a 	bl	800286c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ba:	b1d3      	cbz	r3, 80041f2 <UART_SetConfig+0x7f2>
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d024      	beq.n	800420a <UART_SetConfig+0x80a>
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d024      	beq.n	800420e <UART_SetConfig+0x80e>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d024      	beq.n	8004212 <UART_SetConfig+0x812>
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d024      	beq.n	8004216 <UART_SetConfig+0x816>
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d024      	beq.n	800421a <UART_SetConfig+0x81a>
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d024      	beq.n	800421e <UART_SetConfig+0x81e>
 80041d4:	2b07      	cmp	r3, #7
 80041d6:	d024      	beq.n	8004222 <UART_SetConfig+0x822>
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d024      	beq.n	8004226 <UART_SetConfig+0x826>
 80041dc:	2b09      	cmp	r3, #9
 80041de:	d024      	beq.n	800422a <UART_SetConfig+0x82a>
 80041e0:	2b0a      	cmp	r3, #10
 80041e2:	d024      	beq.n	800422e <UART_SetConfig+0x82e>
 80041e4:	2b0b      	cmp	r3, #11
 80041e6:	d001      	beq.n	80041ec <UART_SetConfig+0x7ec>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e003      	b.n	80041f4 <UART_SetConfig+0x7f4>
 80041ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f0:	e000      	b.n	80041f4 <UART_SetConfig+0x7f4>
 80041f2:	2301      	movs	r3, #1
 80041f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80041f8:	6862      	ldr	r2, [r4, #4]
 80041fa:	0853      	lsrs	r3, r2, #1
 80041fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004200:	fbb3 f3f2 	udiv	r3, r3, r2
 8004204:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004206:	2000      	movs	r0, #0
        break;
 8004208:	e777      	b.n	80040fa <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800420a:	2302      	movs	r3, #2
 800420c:	e7f2      	b.n	80041f4 <UART_SetConfig+0x7f4>
 800420e:	2304      	movs	r3, #4
 8004210:	e7f0      	b.n	80041f4 <UART_SetConfig+0x7f4>
 8004212:	2306      	movs	r3, #6
 8004214:	e7ee      	b.n	80041f4 <UART_SetConfig+0x7f4>
 8004216:	2308      	movs	r3, #8
 8004218:	e7ec      	b.n	80041f4 <UART_SetConfig+0x7f4>
 800421a:	230a      	movs	r3, #10
 800421c:	e7ea      	b.n	80041f4 <UART_SetConfig+0x7f4>
 800421e:	230c      	movs	r3, #12
 8004220:	e7e8      	b.n	80041f4 <UART_SetConfig+0x7f4>
 8004222:	2310      	movs	r3, #16
 8004224:	e7e6      	b.n	80041f4 <UART_SetConfig+0x7f4>
 8004226:	2320      	movs	r3, #32
 8004228:	e7e4      	b.n	80041f4 <UART_SetConfig+0x7f4>
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	e7e2      	b.n	80041f4 <UART_SetConfig+0x7f4>
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	e7e0      	b.n	80041f4 <UART_SetConfig+0x7f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004234:	b1db      	cbz	r3, 800426e <UART_SetConfig+0x86e>
 8004236:	2b01      	cmp	r3, #1
 8004238:	d023      	beq.n	8004282 <UART_SetConfig+0x882>
 800423a:	2b02      	cmp	r3, #2
 800423c:	d024      	beq.n	8004288 <UART_SetConfig+0x888>
 800423e:	2b03      	cmp	r3, #3
 8004240:	d025      	beq.n	800428e <UART_SetConfig+0x88e>
 8004242:	2b04      	cmp	r3, #4
 8004244:	d026      	beq.n	8004294 <UART_SetConfig+0x894>
 8004246:	2b05      	cmp	r3, #5
 8004248:	d027      	beq.n	800429a <UART_SetConfig+0x89a>
 800424a:	2b06      	cmp	r3, #6
 800424c:	d028      	beq.n	80042a0 <UART_SetConfig+0x8a0>
 800424e:	2b07      	cmp	r3, #7
 8004250:	d029      	beq.n	80042a6 <UART_SetConfig+0x8a6>
 8004252:	2b08      	cmp	r3, #8
 8004254:	d02a      	beq.n	80042ac <UART_SetConfig+0x8ac>
 8004256:	2b09      	cmp	r3, #9
 8004258:	d02b      	beq.n	80042b2 <UART_SetConfig+0x8b2>
 800425a:	2b0a      	cmp	r3, #10
 800425c:	d02c      	beq.n	80042b8 <UART_SetConfig+0x8b8>
 800425e:	2b0b      	cmp	r3, #11
 8004260:	d002      	beq.n	8004268 <UART_SetConfig+0x868>
 8004262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004266:	e004      	b.n	8004272 <UART_SetConfig+0x872>
 8004268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800426c:	e001      	b.n	8004272 <UART_SetConfig+0x872>
 800426e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004272:	6862      	ldr	r2, [r4, #4]
 8004274:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004278:	fbb3 f3f2 	udiv	r3, r3, r2
 800427c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800427e:	2000      	movs	r0, #0
        break;
 8004280:	e73b      	b.n	80040fa <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	e7f4      	b.n	8004272 <UART_SetConfig+0x872>
 8004288:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800428c:	e7f1      	b.n	8004272 <UART_SetConfig+0x872>
 800428e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004292:	e7ee      	b.n	8004272 <UART_SetConfig+0x872>
 8004294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004298:	e7eb      	b.n	8004272 <UART_SetConfig+0x872>
 800429a:	f641 1398 	movw	r3, #6552	; 0x1998
 800429e:	e7e8      	b.n	8004272 <UART_SetConfig+0x872>
 80042a0:	f241 5354 	movw	r3, #5460	; 0x1554
 80042a4:	e7e5      	b.n	8004272 <UART_SetConfig+0x872>
 80042a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042aa:	e7e2      	b.n	8004272 <UART_SetConfig+0x872>
 80042ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042b0:	e7df      	b.n	8004272 <UART_SetConfig+0x872>
 80042b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b6:	e7dc      	b.n	8004272 <UART_SetConfig+0x872>
 80042b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042bc:	e7d9      	b.n	8004272 <UART_SetConfig+0x872>
        ret = HAL_ERROR;
 80042be:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e71a      	b.n	80040fa <UART_SetConfig+0x6fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c4:	f7fe fb52 	bl	800296c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042ca:	b1d3      	cbz	r3, 8004302 <UART_SetConfig+0x902>
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d035      	beq.n	800433c <UART_SetConfig+0x93c>
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d035      	beq.n	8004340 <UART_SetConfig+0x940>
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d035      	beq.n	8004344 <UART_SetConfig+0x944>
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d035      	beq.n	8004348 <UART_SetConfig+0x948>
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d035      	beq.n	800434c <UART_SetConfig+0x94c>
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d035      	beq.n	8004350 <UART_SetConfig+0x950>
 80042e4:	2b07      	cmp	r3, #7
 80042e6:	d035      	beq.n	8004354 <UART_SetConfig+0x954>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d035      	beq.n	8004358 <UART_SetConfig+0x958>
 80042ec:	2b09      	cmp	r3, #9
 80042ee:	d035      	beq.n	800435c <UART_SetConfig+0x95c>
 80042f0:	2b0a      	cmp	r3, #10
 80042f2:	d035      	beq.n	8004360 <UART_SetConfig+0x960>
 80042f4:	2b0b      	cmp	r3, #11
 80042f6:	d001      	beq.n	80042fc <UART_SetConfig+0x8fc>
 80042f8:	2201      	movs	r2, #1
 80042fa:	e003      	b.n	8004304 <UART_SetConfig+0x904>
 80042fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004300:	e000      	b.n	8004304 <UART_SetConfig+0x904>
 8004302:	2201      	movs	r2, #1
 8004304:	fbb0 f2f2 	udiv	r2, r0, r2
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800430e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004312:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8004314:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004316:	f1a2 0110 	sub.w	r1, r2, #16
 800431a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800431e:	4299      	cmp	r1, r3
 8004320:	f200 810e 	bhi.w	8004540 <UART_SetConfig+0xb40>
      huart->Instance->BRR = usartdiv;
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	60da      	str	r2, [r3, #12]
  huart->NbTxDataToProcess = 1;
 8004328:	2201      	movs	r2, #1
 800432a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800432e:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004332:	2200      	movs	r2, #0
 8004334:	66e2      	str	r2, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8004336:	6722      	str	r2, [r4, #112]	; 0x70
}
 8004338:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800433c:	2202      	movs	r2, #2
 800433e:	e7e1      	b.n	8004304 <UART_SetConfig+0x904>
 8004340:	2204      	movs	r2, #4
 8004342:	e7df      	b.n	8004304 <UART_SetConfig+0x904>
 8004344:	2206      	movs	r2, #6
 8004346:	e7dd      	b.n	8004304 <UART_SetConfig+0x904>
 8004348:	2208      	movs	r2, #8
 800434a:	e7db      	b.n	8004304 <UART_SetConfig+0x904>
 800434c:	220a      	movs	r2, #10
 800434e:	e7d9      	b.n	8004304 <UART_SetConfig+0x904>
 8004350:	220c      	movs	r2, #12
 8004352:	e7d7      	b.n	8004304 <UART_SetConfig+0x904>
 8004354:	2210      	movs	r2, #16
 8004356:	e7d5      	b.n	8004304 <UART_SetConfig+0x904>
 8004358:	2220      	movs	r2, #32
 800435a:	e7d3      	b.n	8004304 <UART_SetConfig+0x904>
 800435c:	2240      	movs	r2, #64	; 0x40
 800435e:	e7d1      	b.n	8004304 <UART_SetConfig+0x904>
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	e7cf      	b.n	8004304 <UART_SetConfig+0x904>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004366:	b1d3      	cbz	r3, 800439e <UART_SetConfig+0x99e>
 8004368:	2b01      	cmp	r3, #1
 800436a:	d021      	beq.n	80043b0 <UART_SetConfig+0x9b0>
 800436c:	2b02      	cmp	r3, #2
 800436e:	d021      	beq.n	80043b4 <UART_SetConfig+0x9b4>
 8004370:	2b03      	cmp	r3, #3
 8004372:	d021      	beq.n	80043b8 <UART_SetConfig+0x9b8>
 8004374:	2b04      	cmp	r3, #4
 8004376:	d021      	beq.n	80043bc <UART_SetConfig+0x9bc>
 8004378:	2b05      	cmp	r3, #5
 800437a:	d021      	beq.n	80043c0 <UART_SetConfig+0x9c0>
 800437c:	2b06      	cmp	r3, #6
 800437e:	d021      	beq.n	80043c4 <UART_SetConfig+0x9c4>
 8004380:	2b07      	cmp	r3, #7
 8004382:	d021      	beq.n	80043c8 <UART_SetConfig+0x9c8>
 8004384:	2b08      	cmp	r3, #8
 8004386:	d021      	beq.n	80043cc <UART_SetConfig+0x9cc>
 8004388:	2b09      	cmp	r3, #9
 800438a:	d021      	beq.n	80043d0 <UART_SetConfig+0x9d0>
 800438c:	2b0a      	cmp	r3, #10
 800438e:	d021      	beq.n	80043d4 <UART_SetConfig+0x9d4>
 8004390:	2b0b      	cmp	r3, #11
 8004392:	d001      	beq.n	8004398 <UART_SetConfig+0x998>
 8004394:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <UART_SetConfig+0x9e0>)
 8004396:	e003      	b.n	80043a0 <UART_SetConfig+0x9a0>
 8004398:	f24f 4224 	movw	r2, #62500	; 0xf424
 800439c:	e000      	b.n	80043a0 <UART_SetConfig+0x9a0>
 800439e:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <UART_SetConfig+0x9e0>)
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80043a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80043aa:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ac:	2000      	movs	r0, #0
        break;
 80043ae:	e7b2      	b.n	8004316 <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b0:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <UART_SetConfig+0x9e4>)
 80043b2:	e7f5      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <UART_SetConfig+0x9ec>)
 80043b6:	e7f3      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043b8:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <UART_SetConfig+0x9f4>)
 80043ba:	e7f1      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043bc:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <UART_SetConfig+0x9f8>)
 80043be:	e7ef      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043c0:	4a11      	ldr	r2, [pc, #68]	; (8004408 <UART_SetConfig+0xa08>)
 80043c2:	e7ed      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <UART_SetConfig+0xa0c>)
 80043c6:	e7eb      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043c8:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <UART_SetConfig+0x9fc>)
 80043ca:	e7e9      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043cc:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <UART_SetConfig+0xa00>)
 80043ce:	e7e7      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043d0:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <UART_SetConfig+0xa04>)
 80043d2:	e7e5      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043d4:	4a01      	ldr	r2, [pc, #4]	; (80043dc <UART_SetConfig+0x9dc>)
 80043d6:	e7e3      	b.n	80043a0 <UART_SetConfig+0x9a0>
 80043d8:	01e84800 	.word	0x01e84800
 80043dc:	0001e848 	.word	0x0001e848
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	007a1200 	.word	0x007a1200
 80043e8:	00516154 	.word	0x00516154
 80043ec:	003d0900 	.word	0x003d0900
 80043f0:	0030d400 	.word	0x0030d400
 80043f4:	0028b0aa 	.word	0x0028b0aa
 80043f8:	001e8480 	.word	0x001e8480
 80043fc:	000f4240 	.word	0x000f4240
 8004400:	0007a120 	.word	0x0007a120
 8004404:	0003d090 	.word	0x0003d090
 8004408:	00186a00 	.word	0x00186a00
 800440c:	00145855 	.word	0x00145855
 8004410:	00155500 	.word	0x00155500
 8004414:	000ccc00 	.word	0x000ccc00
 8004418:	000aaa00 	.word	0x000aaa00
        pclk = HAL_RCC_GetSysClockFreq();
 800441c:	f7fe fa26 	bl	800286c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004422:	b1d3      	cbz	r3, 800445a <UART_SetConfig+0xa5a>
 8004424:	2b01      	cmp	r3, #1
 8004426:	d023      	beq.n	8004470 <UART_SetConfig+0xa70>
 8004428:	2b02      	cmp	r3, #2
 800442a:	d023      	beq.n	8004474 <UART_SetConfig+0xa74>
 800442c:	2b03      	cmp	r3, #3
 800442e:	d023      	beq.n	8004478 <UART_SetConfig+0xa78>
 8004430:	2b04      	cmp	r3, #4
 8004432:	d023      	beq.n	800447c <UART_SetConfig+0xa7c>
 8004434:	2b05      	cmp	r3, #5
 8004436:	d023      	beq.n	8004480 <UART_SetConfig+0xa80>
 8004438:	2b06      	cmp	r3, #6
 800443a:	d023      	beq.n	8004484 <UART_SetConfig+0xa84>
 800443c:	2b07      	cmp	r3, #7
 800443e:	d023      	beq.n	8004488 <UART_SetConfig+0xa88>
 8004440:	2b08      	cmp	r3, #8
 8004442:	d023      	beq.n	800448c <UART_SetConfig+0xa8c>
 8004444:	2b09      	cmp	r3, #9
 8004446:	d023      	beq.n	8004490 <UART_SetConfig+0xa90>
 8004448:	2b0a      	cmp	r3, #10
 800444a:	d023      	beq.n	8004494 <UART_SetConfig+0xa94>
 800444c:	2b0b      	cmp	r3, #11
 800444e:	d001      	beq.n	8004454 <UART_SetConfig+0xa54>
 8004450:	2201      	movs	r2, #1
 8004452:	e003      	b.n	800445c <UART_SetConfig+0xa5c>
 8004454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004458:	e000      	b.n	800445c <UART_SetConfig+0xa5c>
 800445a:	2201      	movs	r2, #1
 800445c:	fbb0 f2f2 	udiv	r2, r0, r2
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8004466:	fbb2 f2f3 	udiv	r2, r2, r3
 800446a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800446c:	2000      	movs	r0, #0
        break;
 800446e:	e752      	b.n	8004316 <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004470:	2202      	movs	r2, #2
 8004472:	e7f3      	b.n	800445c <UART_SetConfig+0xa5c>
 8004474:	2204      	movs	r2, #4
 8004476:	e7f1      	b.n	800445c <UART_SetConfig+0xa5c>
 8004478:	2206      	movs	r2, #6
 800447a:	e7ef      	b.n	800445c <UART_SetConfig+0xa5c>
 800447c:	2208      	movs	r2, #8
 800447e:	e7ed      	b.n	800445c <UART_SetConfig+0xa5c>
 8004480:	220a      	movs	r2, #10
 8004482:	e7eb      	b.n	800445c <UART_SetConfig+0xa5c>
 8004484:	220c      	movs	r2, #12
 8004486:	e7e9      	b.n	800445c <UART_SetConfig+0xa5c>
 8004488:	2210      	movs	r2, #16
 800448a:	e7e7      	b.n	800445c <UART_SetConfig+0xa5c>
 800448c:	2220      	movs	r2, #32
 800448e:	e7e5      	b.n	800445c <UART_SetConfig+0xa5c>
 8004490:	2240      	movs	r2, #64	; 0x40
 8004492:	e7e3      	b.n	800445c <UART_SetConfig+0xa5c>
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	e7e1      	b.n	800445c <UART_SetConfig+0xa5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800449a:	b1d3      	cbz	r3, 80044d2 <UART_SetConfig+0xad2>
 800449c:	2b01      	cmp	r3, #1
 800449e:	d022      	beq.n	80044e6 <UART_SetConfig+0xae6>
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d023      	beq.n	80044ec <UART_SetConfig+0xaec>
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d024      	beq.n	80044f2 <UART_SetConfig+0xaf2>
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d025      	beq.n	80044f8 <UART_SetConfig+0xaf8>
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d026      	beq.n	80044fe <UART_SetConfig+0xafe>
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d027      	beq.n	8004504 <UART_SetConfig+0xb04>
 80044b4:	2b07      	cmp	r3, #7
 80044b6:	d028      	beq.n	800450a <UART_SetConfig+0xb0a>
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d029      	beq.n	8004510 <UART_SetConfig+0xb10>
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d02a      	beq.n	8004516 <UART_SetConfig+0xb16>
 80044c0:	2b0a      	cmp	r3, #10
 80044c2:	d02b      	beq.n	800451c <UART_SetConfig+0xb1c>
 80044c4:	2b0b      	cmp	r3, #11
 80044c6:	d002      	beq.n	80044ce <UART_SetConfig+0xace>
 80044c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80044cc:	e003      	b.n	80044d6 <UART_SetConfig+0xad6>
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	e001      	b.n	80044d6 <UART_SetConfig+0xad6>
 80044d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80044d6:	6863      	ldr	r3, [r4, #4]
 80044d8:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80044e2:	2000      	movs	r0, #0
        break;
 80044e4:	e717      	b.n	8004316 <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ea:	e7f4      	b.n	80044d6 <UART_SetConfig+0xad6>
 80044ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044f0:	e7f1      	b.n	80044d6 <UART_SetConfig+0xad6>
 80044f2:	f241 5255 	movw	r2, #5461	; 0x1555
 80044f6:	e7ee      	b.n	80044d6 <UART_SetConfig+0xad6>
 80044f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044fc:	e7eb      	b.n	80044d6 <UART_SetConfig+0xad6>
 80044fe:	f640 42cc 	movw	r2, #3276	; 0xccc
 8004502:	e7e8      	b.n	80044d6 <UART_SetConfig+0xad6>
 8004504:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8004508:	e7e5      	b.n	80044d6 <UART_SetConfig+0xad6>
 800450a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800450e:	e7e2      	b.n	80044d6 <UART_SetConfig+0xad6>
 8004510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004514:	e7df      	b.n	80044d6 <UART_SetConfig+0xad6>
 8004516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451a:	e7dc      	b.n	80044d6 <UART_SetConfig+0xad6>
 800451c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004520:	e7d9      	b.n	80044d6 <UART_SetConfig+0xad6>
        ret = HAL_ERROR;
 8004522:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004524:	2200      	movs	r2, #0
 8004526:	e6f6      	b.n	8004316 <UART_SetConfig+0x916>
        ret = HAL_ERROR;
 8004528:	2001      	movs	r0, #1
 800452a:	e6fd      	b.n	8004328 <UART_SetConfig+0x928>
 800452c:	2000      	movs	r0, #0
 800452e:	e6fb      	b.n	8004328 <UART_SetConfig+0x928>
        ret = HAL_ERROR;
 8004530:	2001      	movs	r0, #1
 8004532:	e6f9      	b.n	8004328 <UART_SetConfig+0x928>
 8004534:	2001      	movs	r0, #1
 8004536:	e6f7      	b.n	8004328 <UART_SetConfig+0x928>
          ret = HAL_ERROR;
 8004538:	2001      	movs	r0, #1
 800453a:	e6f5      	b.n	8004328 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 800453c:	2001      	movs	r0, #1
 800453e:	e6f3      	b.n	8004328 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 8004540:	2001      	movs	r0, #1
 8004542:	e6f1      	b.n	8004328 <UART_SetConfig+0x928>

08004544 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004544:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004546:	f013 0f01 	tst.w	r3, #1
 800454a:	d006      	beq.n	800455a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454c:	6802      	ldr	r2, [r0, #0]
 800454e:	6853      	ldr	r3, [r2, #4]
 8004550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004554:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004556:	430b      	orrs	r3, r1
 8004558:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800455a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800455c:	f013 0f02 	tst.w	r3, #2
 8004560:	d006      	beq.n	8004570 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004562:	6802      	ldr	r2, [r0, #0]
 8004564:	6853      	ldr	r3, [r2, #4]
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800456c:	430b      	orrs	r3, r1
 800456e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004572:	f013 0f04 	tst.w	r3, #4
 8004576:	d006      	beq.n	8004586 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004578:	6802      	ldr	r2, [r0, #0]
 800457a:	6853      	ldr	r3, [r2, #4]
 800457c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004580:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004582:	430b      	orrs	r3, r1
 8004584:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004586:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004588:	f013 0f08 	tst.w	r3, #8
 800458c:	d006      	beq.n	800459c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458e:	6802      	ldr	r2, [r0, #0]
 8004590:	6853      	ldr	r3, [r2, #4]
 8004592:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004596:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004598:	430b      	orrs	r3, r1
 800459a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800459c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800459e:	f013 0f10 	tst.w	r3, #16
 80045a2:	d006      	beq.n	80045b2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a4:	6802      	ldr	r2, [r0, #0]
 80045a6:	6893      	ldr	r3, [r2, #8]
 80045a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ac:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045b4:	f013 0f20 	tst.w	r3, #32
 80045b8:	d006      	beq.n	80045c8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ba:	6802      	ldr	r2, [r0, #0]
 80045bc:	6893      	ldr	r3, [r2, #8]
 80045be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045ce:	d00a      	beq.n	80045e6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d0:	6802      	ldr	r2, [r0, #0]
 80045d2:	6853      	ldr	r3, [r2, #4]
 80045d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045d8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80045da:	430b      	orrs	r3, r1
 80045dc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80045e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e4:	d00b      	beq.n	80045fe <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045ec:	d006      	beq.n	80045fc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ee:	6802      	ldr	r2, [r0, #0]
 80045f0:	6853      	ldr	r3, [r2, #4]
 80045f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80045f6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6053      	str	r3, [r2, #4]
}
 80045fc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fe:	6802      	ldr	r2, [r0, #0]
 8004600:	6853      	ldr	r3, [r2, #4]
 8004602:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004606:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004608:	430b      	orrs	r3, r1
 800460a:	6053      	str	r3, [r2, #4]
 800460c:	e7eb      	b.n	80045e6 <UART_AdvFeatureConfig+0xa2>

0800460e <UART_WaitOnFlagUntilTimeout>:
{
 800460e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004612:	4604      	mov	r4, r0
 8004614:	460f      	mov	r7, r1
 8004616:	4616      	mov	r6, r2
 8004618:	4698      	mov	r8, r3
 800461a:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	ea37 0303 	bics.w	r3, r7, r3
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	42b3      	cmp	r3, r6
 800462c:	d13f      	bne.n	80046ae <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 800462e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004632:	d0f3      	beq.n	800461c <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004634:	f7fc fbfc 	bl	8000e30 <HAL_GetTick>
 8004638:	eba0 0008 	sub.w	r0, r0, r8
 800463c:	42a8      	cmp	r0, r5
 800463e:	d822      	bhi.n	8004686 <UART_WaitOnFlagUntilTimeout+0x78>
 8004640:	b30d      	cbz	r5, 8004686 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	f012 0f04 	tst.w	r2, #4
 800464a:	d0e7      	beq.n	800461c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004652:	d0e3      	beq.n	800461c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004658:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800465a:	6822      	ldr	r2, [r4, #0]
 800465c:	6813      	ldr	r3, [r2, #0]
 800465e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004662:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	6893      	ldr	r3, [r2, #8]
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800466e:	2320      	movs	r3, #32
 8004670:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004674:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004678:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 800467c:	2300      	movs	r3, #0
 800467e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004682:	2003      	movs	r0, #3
 8004684:	e014      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	6813      	ldr	r3, [r2, #0]
 800468a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004690:	6822      	ldr	r2, [r4, #0]
 8004692:	6893      	ldr	r3, [r2, #8]
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800469a:	2320      	movs	r3, #32
 800469c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80046a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80046a4:	2300      	movs	r3, #0
 80046a6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 80046aa:	2003      	movs	r0, #3
 80046ac:	e000      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 80046ae:	2000      	movs	r0, #0
}
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046b4 <UART_CheckIdleState>:
{
 80046b4:	b530      	push	{r4, r5, lr}
 80046b6:	b083      	sub	sp, #12
 80046b8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80046c0:	f7fc fbb6 	bl	8000e30 <HAL_GetTick>
 80046c4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f013 0f08 	tst.w	r3, #8
 80046ce:	d10e      	bne.n	80046ee <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f013 0f04 	tst.w	r3, #4
 80046d8:	d117      	bne.n	800470a <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 80046da:	2320      	movs	r3, #32
 80046dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80046e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80046e4:	2000      	movs	r0, #0
 80046e6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80046ea:	b003      	add	sp, #12
 80046ec:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4603      	mov	r3, r0
 80046f6:	2200      	movs	r2, #0
 80046f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff ff86 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 8004702:	2800      	cmp	r0, #0
 8004704:	d0e4      	beq.n	80046d0 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8004706:	2003      	movs	r0, #3
 8004708:	e7ef      	b.n	80046ea <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	462b      	mov	r3, r5
 8004712:	2200      	movs	r2, #0
 8004714:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ff78 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 800471e:	2800      	cmp	r0, #0
 8004720:	d0db      	beq.n	80046da <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8004722:	2003      	movs	r0, #3
 8004724:	e7e1      	b.n	80046ea <UART_CheckIdleState+0x36>

08004726 <HAL_UART_Init>:
  if (huart == NULL)
 8004726:	b378      	cbz	r0, 8004788 <HAL_UART_Init+0x62>
{
 8004728:	b510      	push	{r4, lr}
 800472a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800472c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004730:	b30b      	cbz	r3, 8004776 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004732:	2324      	movs	r3, #36	; 0x24
 8004734:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004742:	4620      	mov	r0, r4
 8004744:	f7ff f95c 	bl	8003a00 <UART_SetConfig>
 8004748:	2801      	cmp	r0, #1
 800474a:	d013      	beq.n	8004774 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800474c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800474e:	b9bb      	cbnz	r3, 8004780 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	6853      	ldr	r3, [r2, #4]
 8004754:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004758:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	6893      	ldr	r3, [r2, #8]
 800475e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004762:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004764:	6822      	ldr	r2, [r4, #0]
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800476e:	4620      	mov	r0, r4
 8004770:	f7ff ffa0 	bl	80046b4 <UART_CheckIdleState>
}
 8004774:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004776:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800477a:	f7fc facd 	bl	8000d18 <HAL_UART_MspInit>
 800477e:	e7d8      	b.n	8004732 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004780:	4620      	mov	r0, r4
 8004782:	f7ff fedf 	bl	8004544 <UART_AdvFeatureConfig>
 8004786:	e7e3      	b.n	8004750 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004788:	2001      	movs	r0, #1
}
 800478a:	4770      	bx	lr

0800478c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800478c:	b410      	push	{r4}
 800478e:	b085      	sub	sp, #20
 8004790:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <UARTEx_SetNbDataToProcess+0x70>)
 8004794:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004798:	ac04      	add	r4, sp, #16
 800479a:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800479e:	466c      	mov	r4, sp
 80047a0:	3308      	adds	r3, #8
 80047a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047a6:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047aa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80047ac:	b1fb      	cbz	r3, 80047ee <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ae:	6811      	ldr	r1, [r2, #0]
 80047b0:	688b      	ldr	r3, [r1, #8]
 80047b2:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047b6:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 80047be:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 80047c2:	00c9      	lsls	r1, r1, #3
 80047c4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80047c8:	fb91 f1f0 	sdiv	r1, r1, r0
 80047cc:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80047d0:	a904      	add	r1, sp, #16
 80047d2:	440b      	add	r3, r1
 80047d4:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 80047d8:	00c9      	lsls	r1, r1, #3
 80047da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047de:	fb91 f3f3 	sdiv	r3, r1, r3
 80047e2:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 80047e6:	b005      	add	sp, #20
 80047e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ec:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047f4:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 80047f8:	e7f5      	b.n	80047e6 <UARTEx_SetNbDataToProcess+0x5a>
 80047fa:	bf00      	nop
 80047fc:	08005424 	.word	0x08005424

08004800 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004800:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d018      	beq.n	800483a <HAL_UARTEx_DisableFifoMode+0x3a>
 8004808:	2301      	movs	r3, #1
 800480a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800480e:	2324      	movs	r3, #36	; 0x24
 8004810:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004814:	6803      	ldr	r3, [r0, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	f021 0101 	bic.w	r1, r1, #1
 800481e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004820:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004824:	2300      	movs	r3, #0
 8004826:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004828:	6801      	ldr	r1, [r0, #0]
 800482a:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800482c:	2220      	movs	r2, #32
 800482e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004832:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8004836:	4618      	mov	r0, r3
 8004838:	4770      	bx	lr
  __HAL_LOCK(huart);
 800483a:	2002      	movs	r0, #2
}
 800483c:	4770      	bx	lr

0800483e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800483e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004840:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d01d      	beq.n	8004884 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004848:	4604      	mov	r4, r0
 800484a:	2301      	movs	r3, #1
 800484c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8004850:	2324      	movs	r3, #36	; 0x24
 8004852:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004856:	6803      	ldr	r3, [r0, #0]
 8004858:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004862:	6802      	ldr	r2, [r0, #0]
 8004864:	6893      	ldr	r3, [r2, #8]
 8004866:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800486a:	4319      	orrs	r1, r3
 800486c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800486e:	f7ff ff8d 	bl	800478c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004876:	2320      	movs	r3, #32
 8004878:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800487c:	2000      	movs	r0, #0
 800487e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8004882:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004884:	2002      	movs	r0, #2
 8004886:	e7fc      	b.n	8004882 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004888 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004888:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800488a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d01d      	beq.n	80048ce <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004892:	4604      	mov	r4, r0
 8004894:	2301      	movs	r3, #1
 8004896:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800489a:	2324      	movs	r3, #36	; 0x24
 800489c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a0:	6803      	ldr	r3, [r0, #0]
 80048a2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048ac:	6802      	ldr	r2, [r0, #0]
 80048ae:	6893      	ldr	r3, [r2, #8]
 80048b0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80048b4:	4319      	orrs	r1, r3
 80048b6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80048b8:	f7ff ff68 	bl	800478c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	2320      	movs	r3, #32
 80048c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80048c6:	2000      	movs	r0, #0
 80048c8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80048cc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80048ce:	2002      	movs	r0, #2
 80048d0:	e7fc      	b.n	80048cc <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080048d4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80048d4:	b530      	push	{r4, r5, lr}
 80048d6:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80048d8:	b370      	cbz	r0, 8004938 <osThreadFlagsSet+0x64>
 80048da:	4605      	mov	r5, r0
 80048dc:	2900      	cmp	r1, #0
 80048de:	db2b      	blt.n	8004938 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e6:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 80048ea:	b94b      	cbnz	r3, 8004900 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ec:	f3ef 8310 	mrs	r3, PRIMASK
 80048f0:	b933      	cbnz	r3, 8004900 <osThreadFlagsSet+0x2c>
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <osThreadFlagsSet+0x88>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d124      	bne.n	8004944 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048fa:	f3ef 8311 	mrs	r3, BASEPRI
 80048fe:	b30b      	cbz	r3, 8004944 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 8004900:	2400      	movs	r4, #0
 8004902:	ab04      	add	r3, sp, #16
 8004904:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4623      	mov	r3, r4
 800490c:	2201      	movs	r2, #1
 800490e:	4628      	mov	r0, r5
 8004910:	f000 fa74 	bl	8004dfc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8004914:	9400      	str	r4, [sp, #0]
 8004916:	ab03      	add	r3, sp, #12
 8004918:	4622      	mov	r2, r4
 800491a:	4621      	mov	r1, r4
 800491c:	4628      	mov	r0, r5
 800491e:	f000 fa6d 	bl	8004dfc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	b15b      	cbz	r3, 800493e <osThreadFlagsSet+0x6a>
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <osThreadFlagsSet+0x8c>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	e002      	b.n	800493e <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8004938:	f06f 0303 	mvn.w	r3, #3
 800493c:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 800493e:	9803      	ldr	r0, [sp, #12]
 8004940:	b005      	add	sp, #20
 8004942:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004944:	2300      	movs	r3, #0
 8004946:	2201      	movs	r2, #1
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f9e5 	bl	8004d18 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800494e:	ab03      	add	r3, sp, #12
 8004950:	2200      	movs	r2, #0
 8004952:	4611      	mov	r1, r2
 8004954:	4628      	mov	r0, r5
 8004956:	f000 f9df 	bl	8004d18 <xTaskGenericNotify>
 800495a:	e7f0      	b.n	800493e <osThreadFlagsSet+0x6a>
 800495c:	20000044 	.word	0x20000044
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004964:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004966:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004970:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004972:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004974:	6803      	ldr	r3, [r0, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	6003      	str	r3, [r0, #0]
}
 800497a:	4770      	bx	lr

0800497c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800497c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800497e:	6842      	ldr	r2, [r0, #4]
 8004980:	6881      	ldr	r1, [r0, #8]
 8004982:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004984:	6882      	ldr	r2, [r0, #8]
 8004986:	6841      	ldr	r1, [r0, #4]
 8004988:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	4282      	cmp	r2, r0
 800498e:	d006      	beq.n	800499e <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004990:	2200      	movs	r2, #0
 8004992:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	3a01      	subs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800499a:	6818      	ldr	r0, [r3, #0]
}
 800499c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800499e:	6882      	ldr	r2, [r0, #8]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	e7f5      	b.n	8004990 <uxListRemove+0x14>
	...

080049b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <pxCurrentTCBConst2>)
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	6808      	ldr	r0, [r1, #0]
 80049b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ba:	f380 8809 	msr	PSP, r0
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8811 	msr	BASEPRI, r0
 80049ca:	4770      	bx	lr
 80049cc:	f3af 8000 	nop.w

080049d0 <pxCurrentTCBConst2>:
 80049d0:	20000050 	.word	0x20000050

080049d4 <vPortEnterCritical>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <vPortEnterCritical+0x3c>)
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d000      	beq.n	80049f2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80049f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <vPortEnterCritical+0x40>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80049fa:	d0f9      	beq.n	80049f0 <vPortEnterCritical+0x1c>
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	e7fe      	b.n	8004a0c <vPortEnterCritical+0x38>
 8004a0e:	bf00      	nop
 8004a10:	20000010 	.word	0x20000010
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <vPortExitCritical+0x28>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	b943      	cbnz	r3, 8004a30 <vPortExitCritical+0x18>
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	e7fe      	b.n	8004a2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004a30:	3b01      	subs	r3, #1
 8004a32:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <vPortExitCritical+0x28>)
 8004a34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a36:	b90b      	cbnz	r3, 8004a3c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a38:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000010 	.word	0x20000010
	...

08004a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a50:	f3ef 8009 	mrs	r0, PSP
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <pxCurrentTCBConst>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	f01e 0f10 	tst.w	lr, #16
 8004a60:	bf08      	it	eq
 8004a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6a:	6010      	str	r0, [r2, #0]
 8004a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a74:	f380 8811 	msr	BASEPRI, r0
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f000 f8fe 	bl	8004c80 <vTaskSwitchContext>
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	f380 8811 	msr	BASEPRI, r0
 8004a8c:	bc09      	pop	{r0, r3}
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a96:	f01e 0f10 	tst.w	lr, #16
 8004a9a:	bf08      	it	eq
 8004a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004aa0:	f380 8809 	msr	PSP, r0
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	f3af 8000 	nop.w

08004ab0 <pxCurrentTCBConst>:
 8004ab0:	20000050 	.word	0x20000050

08004ab4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ab4:	b508      	push	{r3, lr}
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ac6:	f000 f84f 	bl	8004b68 <xTaskIncrementTick>
 8004aca:	b118      	cbz	r0, 8004ad4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <SysTick_Handler+0x28>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ada:	bd08      	pop	{r3, pc}
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ae0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ae4:	2b0f      	cmp	r3, #15
 8004ae6:	d90f      	bls.n	8004b08 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ae8:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <vPortValidateInterruptPriority+0x4c>)
 8004aea:	5c9b      	ldrb	r3, [r3, r2]
 8004aec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004aee:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <vPortValidateInterruptPriority+0x50>)
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d908      	bls.n	8004b08 <vPortValidateInterruptPriority+0x28>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	e7fe      	b.n	8004b06 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <vPortValidateInterruptPriority+0x54>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b10:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <vPortValidateInterruptPriority+0x58>)
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d908      	bls.n	8004b2a <vPortValidateInterruptPriority+0x4a>
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	e7fe      	b.n	8004b28 <vPortValidateInterruptPriority+0x48>
	}
 8004b2a:	4770      	bx	lr
 8004b2c:	e000e3f0 	.word	0xe000e3f0
 8004b30:	20000048 	.word	0x20000048
 8004b34:	e000ed0c 	.word	0xe000ed0c
 8004b38:	2000004c 	.word	0x2000004c

08004b3c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b3c:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <prvResetNextTaskUnblockTime+0x24>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	b13b      	cbz	r3, 8004b54 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <prvResetNextTaskUnblockTime+0x24>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <prvResetNextTaskUnblockTime+0x28>)
 8004b50:	601a      	str	r2, [r3, #0]
	}
}
 8004b52:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <prvResetNextTaskUnblockTime+0x28>)
 8004b56:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000054 	.word	0x20000054
 8004b64:	200004c8 	.word	0x200004c8

08004b68 <xTaskIncrementTick>:
{
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <xTaskIncrementTick+0xec>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d164      	bne.n	8004c3c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b72:	4b39      	ldr	r3, [pc, #228]	; (8004c58 <xTaskIncrementTick+0xf0>)
 8004b74:	681d      	ldr	r5, [r3, #0]
 8004b76:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004b78:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b7a:	b9c5      	cbnz	r5, 8004bae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004b7c:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <xTaskIncrementTick+0xf4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	b143      	cbz	r3, 8004b96 <xTaskIncrementTick+0x2e>
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	e7fe      	b.n	8004b94 <xTaskIncrementTick+0x2c>
 8004b96:	4a31      	ldr	r2, [pc, #196]	; (8004c5c <xTaskIncrementTick+0xf4>)
 8004b98:	6811      	ldr	r1, [r2, #0]
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <xTaskIncrementTick+0xf8>)
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	6010      	str	r0, [r2, #0]
 8004ba0:	6019      	str	r1, [r3, #0]
 8004ba2:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <xTaskIncrementTick+0xfc>)
 8004ba4:	6813      	ldr	r3, [r2, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	f7ff ffc7 	bl	8004b3c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <xTaskIncrementTick+0x100>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	42ab      	cmp	r3, r5
 8004bb4:	d938      	bls.n	8004c28 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8004bb6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <xTaskIncrementTick+0x104>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <xTaskIncrementTick+0x108>)
 8004bc6:	589b      	ldr	r3, [r3, r2]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d93c      	bls.n	8004c46 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8004bcc:	2401      	movs	r4, #1
 8004bce:	e03a      	b.n	8004c46 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8004bd0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd2:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <xTaskIncrementTick+0xf4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b343      	cbz	r3, 8004c2c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <xTaskIncrementTick+0xf4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004be2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004be4:	429d      	cmp	r5, r3
 8004be6:	d326      	bcc.n	8004c36 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be8:	1d37      	adds	r7, r6, #4
 8004bea:	4638      	mov	r0, r7
 8004bec:	f7ff fec6 	bl	800497c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bf0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004bf2:	b11b      	cbz	r3, 8004bfc <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bf4:	f106 0018 	add.w	r0, r6, #24
 8004bf8:	f7ff fec0 	bl	800497c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bfc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <xTaskIncrementTick+0x10c>)
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <xTaskIncrementTick+0xa2>
 8004c06:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <xTaskIncrementTick+0x10c>)
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c0e:	009a      	lsls	r2, r3, #2
 8004c10:	4639      	mov	r1, r7
 8004c12:	4817      	ldr	r0, [pc, #92]	; (8004c70 <xTaskIncrementTick+0x108>)
 8004c14:	4410      	add	r0, r2
 8004c16:	f7ff fea5 	bl	8004964 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c1a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <xTaskIncrementTick+0x104>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d2d4      	bcs.n	8004bd0 <xTaskIncrementTick+0x68>
 8004c26:	e7d4      	b.n	8004bd2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8004c28:	2400      	movs	r4, #0
 8004c2a:	e7d2      	b.n	8004bd2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <xTaskIncrementTick+0x100>)
 8004c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c32:	601a      	str	r2, [r3, #0]
					break;
 8004c34:	e7c0      	b.n	8004bb8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004c36:	4a0c      	ldr	r2, [pc, #48]	; (8004c68 <xTaskIncrementTick+0x100>)
 8004c38:	6013      	str	r3, [r2, #0]
						break;
 8004c3a:	e7bd      	b.n	8004bb8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <xTaskIncrementTick+0x110>)
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004c44:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <xTaskIncrementTick+0x114>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8004c4c:	2401      	movs	r4, #1
}
 8004c4e:	4620      	mov	r0, r4
 8004c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200004c0 	.word	0x200004c0
 8004c58:	200004e4 	.word	0x200004e4
 8004c5c:	20000054 	.word	0x20000054
 8004c60:	20000058 	.word	0x20000058
 8004c64:	200004cc 	.word	0x200004cc
 8004c68:	200004c8 	.word	0x200004c8
 8004c6c:	20000050 	.word	0x20000050
 8004c70:	2000005c 	.word	0x2000005c
 8004c74:	200004c4 	.word	0x200004c4
 8004c78:	200004bc 	.word	0x200004bc
 8004c7c:	200004e8 	.word	0x200004e8

08004c80 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <vTaskSwitchContext+0x84>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b11b      	cbz	r3, 8004c8e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8004c86:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <vTaskSwitchContext+0x88>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <vTaskSwitchContext+0x88>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <vTaskSwitchContext+0x8c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004c9c:	008a      	lsls	r2, r1, #2
 8004c9e:	491c      	ldr	r1, [pc, #112]	; (8004d10 <vTaskSwitchContext+0x90>)
 8004ca0:	588a      	ldr	r2, [r1, r2]
 8004ca2:	b95a      	cbnz	r2, 8004cbc <vTaskSwitchContext+0x3c>
 8004ca4:	b10b      	cbz	r3, 8004caa <vTaskSwitchContext+0x2a>
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	e7f6      	b.n	8004c98 <vTaskSwitchContext+0x18>
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	e7fe      	b.n	8004cba <vTaskSwitchContext+0x3a>
{
 8004cbc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004cbe:	4608      	mov	r0, r1
 8004cc0:	009a      	lsls	r2, r3, #2
 8004cc2:	18d4      	adds	r4, r2, r3
 8004cc4:	00a1      	lsls	r1, r4, #2
 8004cc6:	4401      	add	r1, r0
 8004cc8:	684c      	ldr	r4, [r1, #4]
 8004cca:	6864      	ldr	r4, [r4, #4]
 8004ccc:	604c      	str	r4, [r1, #4]
 8004cce:	441a      	add	r2, r3
 8004cd0:	0091      	lsls	r1, r2, #2
 8004cd2:	3108      	adds	r1, #8
 8004cd4:	4408      	add	r0, r1
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	d00d      	beq.n	8004cf6 <vTaskSwitchContext+0x76>
 8004cda:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004cde:	0091      	lsls	r1, r2, #2
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <vTaskSwitchContext+0x90>)
 8004ce2:	440a      	add	r2, r1
 8004ce4:	6852      	ldr	r2, [r2, #4]
 8004ce6:	68d1      	ldr	r1, [r2, #12]
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <vTaskSwitchContext+0x94>)
 8004cea:	6011      	str	r1, [r2, #0]
 8004cec:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <vTaskSwitchContext+0x8c>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cf4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004cf6:	6861      	ldr	r1, [r4, #4]
 8004cf8:	4805      	ldr	r0, [pc, #20]	; (8004d10 <vTaskSwitchContext+0x90>)
 8004cfa:	2214      	movs	r2, #20
 8004cfc:	fb02 0203 	mla	r2, r2, r3, r0
 8004d00:	6051      	str	r1, [r2, #4]
 8004d02:	e7ea      	b.n	8004cda <vTaskSwitchContext+0x5a>
 8004d04:	200004c0 	.word	0x200004c0
 8004d08:	200004e8 	.word	0x200004e8
 8004d0c:	200004c4 	.word	0x200004c4
 8004d10:	2000005c 	.word	0x2000005c
 8004d14:	20000050 	.word	0x20000050

08004d18 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004d1a:	b940      	cbnz	r0, 8004d2e <xTaskGenericNotify+0x16>
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	e7fe      	b.n	8004d2c <xTaskGenericNotify+0x14>
 8004d2e:	4604      	mov	r4, r0
 8004d30:	461f      	mov	r7, r3
 8004d32:	4615      	mov	r5, r2
 8004d34:	460e      	mov	r6, r1
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8004d36:	f7ff fe4d 	bl	80049d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004d3a:	b10f      	cbz	r7, 8004d40 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d3e:	603b      	str	r3, [r7, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004d40:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8004d44:	b2db      	uxtb	r3, r3

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004d46:	2202      	movs	r2, #2
 8004d48:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58

			switch( eAction )
 8004d4c:	1e6a      	subs	r2, r5, #1
 8004d4e:	2a03      	cmp	r2, #3
 8004d50:	d81a      	bhi.n	8004d88 <xTaskGenericNotify+0x70>
 8004d52:	e8df f002 	tbb	[pc, r2]
 8004d56:	0c02      	.short	0x0c02
 8004d58:	1411      	.short	0x1411
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004d5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004d5c:	4316      	orrs	r6, r2
 8004d5e:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004d60:	2501      	movs	r5, #1

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d014      	beq.n	8004d90 <xTaskGenericNotify+0x78>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004d66:	f7ff fe57 	bl	8004a18 <vPortExitCritical>

		return xReturn;
	}
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8004d6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004d70:	3201      	adds	r2, #1
 8004d72:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004d74:	2501      	movs	r5, #1
					break;
 8004d76:	e7f4      	b.n	8004d62 <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 8004d78:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004d7a:	2501      	movs	r5, #1
					break;
 8004d7c:	e7f1      	b.n	8004d62 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d004      	beq.n	8004d8c <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 8004d82:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004d84:	2501      	movs	r5, #1
 8004d86:	e7ec      	b.n	8004d62 <xTaskGenericNotify+0x4a>
 8004d88:	2501      	movs	r5, #1
 8004d8a:	e7ea      	b.n	8004d62 <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8004d8c:	2500      	movs	r5, #0
 8004d8e:	e7e8      	b.n	8004d62 <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d90:	1d26      	adds	r6, r4, #4
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff fdf2 	bl	800497c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d9a:	4a14      	ldr	r2, [pc, #80]	; (8004dec <xTaskGenericNotify+0xd4>)
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <xTaskGenericNotify+0x8e>
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <xTaskGenericNotify+0xd4>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4631      	mov	r1, r6
 8004da8:	4a11      	ldr	r2, [pc, #68]	; (8004df0 <xTaskGenericNotify+0xd8>)
 8004daa:	2014      	movs	r0, #20
 8004dac:	fb00 2003 	mla	r0, r0, r3, r2
 8004db0:	f7ff fdd8 	bl	8004964 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004db6:	b143      	cbz	r3, 8004dca <xTaskGenericNotify+0xb2>
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	e7fe      	b.n	8004dc8 <xTaskGenericNotify+0xb0>
					prvResetNextTaskUnblockTime();
 8004dca:	f7ff feb7 	bl	8004b3c <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <xTaskGenericNotify+0xdc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d9c5      	bls.n	8004d66 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <xTaskGenericNotify+0xe0>)
 8004ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	e7bc      	b.n	8004d66 <xTaskGenericNotify+0x4e>
 8004dec:	200004c4 	.word	0x200004c4
 8004df0:	2000005c 	.word	0x2000005c
 8004df4:	20000050 	.word	0x20000050
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e00:	9e08      	ldr	r6, [sp, #32]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004e02:	b940      	cbnz	r0, 8004e16 <xTaskGenericNotifyFromISR+0x1a>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	e7fe      	b.n	8004e14 <xTaskGenericNotifyFromISR+0x18>
 8004e16:	4604      	mov	r4, r0
 8004e18:	4699      	mov	r9, r3
 8004e1a:	4615      	mov	r5, r2
 8004e1c:	4688      	mov	r8, r1
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e1e:	f7ff fe5f 	bl	8004ae0 <vPortValidateInterruptPriority>
	__asm volatile
 8004e22:	f3ef 8711 	mrs	r7, BASEPRI
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
 8004e36:	f1b9 0f00 	cmp.w	r9, #0
 8004e3a:	d002      	beq.n	8004e42 <xTaskGenericNotifyFromISR+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004e3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e3e:	f8c9 3000 	str.w	r3, [r9]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004e42:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8004e46:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58

			switch( eAction )
 8004e4e:	1e6a      	subs	r2, r5, #1
 8004e50:	2a03      	cmp	r2, #3
 8004e52:	d81e      	bhi.n	8004e92 <xTaskGenericNotifyFromISR+0x96>
 8004e54:	e8df f002 	tbb	[pc, r2]
 8004e58:	17130e02 	.word	0x17130e02
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004e5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e5e:	ea42 0208 	orr.w	r2, r2, r8
 8004e62:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004e64:	2501      	movs	r5, #1

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d017      	beq.n	8004e9a <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 8004e6a:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
 8004e6e:	4628      	mov	r0, r5
 8004e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8004e74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e76:	3201      	adds	r2, #1
 8004e78:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004e7a:	2501      	movs	r5, #1
					break;
 8004e7c:	e7f3      	b.n	8004e66 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8004e7e:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004e82:	2501      	movs	r5, #1
					break;
 8004e84:	e7ef      	b.n	8004e66 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d005      	beq.n	8004e96 <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 8004e8a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8004e8e:	2501      	movs	r5, #1
 8004e90:	e7e9      	b.n	8004e66 <xTaskGenericNotifyFromISR+0x6a>
 8004e92:	2501      	movs	r5, #1
 8004e94:	e7e7      	b.n	8004e66 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8004e96:	2500      	movs	r5, #0
 8004e98:	e7e5      	b.n	8004e66 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e9c:	b143      	cbz	r3, 8004eb0 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	e7fe      	b.n	8004eae <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <xTaskGenericNotifyFromISR+0x108>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b9e3      	cbnz	r3, 8004ef0 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb6:	f104 0804 	add.w	r8, r4, #4
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fd5e 	bl	800497c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ec2:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <xTaskGenericNotifyFromISR+0x10c>)
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <xTaskGenericNotifyFromISR+0xd2>
 8004eca:	4a0f      	ldr	r2, [pc, #60]	; (8004f08 <xTaskGenericNotifyFromISR+0x10c>)
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	4641      	mov	r1, r8
 8004ed0:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <xTaskGenericNotifyFromISR+0x110>)
 8004ed2:	2014      	movs	r0, #20
 8004ed4:	fb00 2003 	mla	r0, r0, r3, r2
 8004ed8:	f7ff fd44 	bl	8004964 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <xTaskGenericNotifyFromISR+0x114>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d9c0      	bls.n	8004e6a <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8004ee8:	b146      	cbz	r6, 8004efc <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	e7bc      	b.n	8004e6a <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004ef0:	f104 0118 	add.w	r1, r4, #24
 8004ef4:	4807      	ldr	r0, [pc, #28]	; (8004f14 <xTaskGenericNotifyFromISR+0x118>)
 8004ef6:	f7ff fd35 	bl	8004964 <vListInsertEnd>
 8004efa:	e7ef      	b.n	8004edc <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <xTaskGenericNotifyFromISR+0x11c>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e7b2      	b.n	8004e6a <xTaskGenericNotifyFromISR+0x6e>
 8004f04:	200004c0 	.word	0x200004c0
 8004f08:	200004c4 	.word	0x200004c4
 8004f0c:	2000005c 	.word	0x2000005c
 8004f10:	20000050 	.word	0x20000050
 8004f14:	200004d0 	.word	0x200004d0
 8004f18:	200004e8 	.word	0x200004e8

08004f1c <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004f20:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8004f22:	6802      	ldr	r2, [r0, #0]
 8004f24:	4282      	cmp	r2, r0
 8004f26:	d003      	beq.n	8004f30 <LST_is_empty+0x14>
  {
    return_value = TRUE;
  }
  else
  {
    return_value = FALSE;
 8004f28:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8004f2e:	4770      	bx	lr
    return_value = TRUE;
 8004f30:	2001      	movs	r0, #1
 8004f32:	e7fa      	b.n	8004f2a <LST_is_empty+0xe>

08004f34 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f34:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004f38:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8004f3a:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8004f3c:	6842      	ldr	r2, [r0, #4]
 8004f3e:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8004f40:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8004f42:	684a      	ldr	r2, [r1, #4]
 8004f44:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004f4a:	4770      	bx	lr

08004f4c <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004f50:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8004f52:	6842      	ldr	r2, [r0, #4]
 8004f54:	6801      	ldr	r1, [r0, #0]
 8004f56:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 8004f58:	6802      	ldr	r2, [r0, #0]
 8004f5a:	6841      	ldr	r1, [r0, #4]
 8004f5c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004f62:	4770      	bx	lr

08004f64 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8004f64:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f66:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004f6a:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8004f6c:	6803      	ldr	r3, [r0, #0]
 8004f6e:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8004f70:	6800      	ldr	r0, [r0, #0]
 8004f72:	f7ff ffeb 	bl	8004f4c <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004f7a:	bd10      	pop	{r4, pc}

08004f7c <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8004f7c:	b500      	push	{lr}
 8004f7e:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8004f80:	e009      	b.n	8004f96 <SendFreeBuf+0x1a>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8004f82:	a901      	add	r1, sp, #4
 8004f84:	4808      	ldr	r0, [pc, #32]	; (8004fa8 <SendFreeBuf+0x2c>)
 8004f86:	f7ff ffed 	bl	8004f64 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <SendFreeBuf+0x30>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	9901      	ldr	r1, [sp, #4]
 8004f90:	6918      	ldr	r0, [r3, #16]
 8004f92:	f7ff ffcf 	bl	8004f34 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8004f96:	4804      	ldr	r0, [pc, #16]	; (8004fa8 <SendFreeBuf+0x2c>)
 8004f98:	f7ff ffc0 	bl	8004f1c <LST_is_empty>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d0f0      	beq.n	8004f82 <SendFreeBuf+0x6>
  }

  return;
}
 8004fa0:	b003      	add	sp, #12
 8004fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fa6:	bf00      	nop
 8004fa8:	200004f4 	.word	0x200004f4
 8004fac:	20030000 	.word	0x20030000

08004fb0 <HW_IPCC_BLE_RxEvtNot>:
{
 8004fb0:	b500      	push	{lr}
 8004fb2:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 8004fb4:	e007      	b.n	8004fc6 <HW_IPCC_BLE_RxEvtNot+0x16>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8004fb6:	a901      	add	r1, sp, #4
 8004fb8:	4807      	ldr	r0, [pc, #28]	; (8004fd8 <HW_IPCC_BLE_RxEvtNot+0x28>)
 8004fba:	f7ff ffd3 	bl	8004f64 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <HW_IPCC_BLE_RxEvtNot+0x2c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	9801      	ldr	r0, [sp, #4]
 8004fc4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8004fc6:	4804      	ldr	r0, [pc, #16]	; (8004fd8 <HW_IPCC_BLE_RxEvtNot+0x28>)
 8004fc8:	f7ff ffa8 	bl	8004f1c <LST_is_empty>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d0f2      	beq.n	8004fb6 <HW_IPCC_BLE_RxEvtNot+0x6>
}
 8004fd0:	b003      	add	sp, #12
 8004fd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fd6:	bf00      	nop
 8004fd8:	200300b8 	.word	0x200300b8
 8004fdc:	200004f0 	.word	0x200004f0

08004fe0 <HW_IPCC_BLE_AclDataAckNot>:
{
 8004fe0:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 8004fe2:	4b02      	ldr	r3, [pc, #8]	; (8004fec <HW_IPCC_BLE_AclDataAckNot+0xc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4798      	blx	r3
}
 8004fe8:	bd08      	pop	{r3, pc}
 8004fea:	bf00      	nop
 8004fec:	200004ec 	.word	0x200004ec

08004ff0 <HW_IPCC_SYS_CmdEvtNot>:
{
 8004ff0:	b508      	push	{r3, lr}
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8004ff2:	4b03      	ldr	r3, [pc, #12]	; (8005000 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	4b03      	ldr	r3, [pc, #12]	; (8005004 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6810      	ldr	r0, [r2, #0]
 8004ffc:	4798      	blx	r3
}
 8004ffe:	bd08      	pop	{r3, pc}
 8005000:	20030000 	.word	0x20030000
 8005004:	200004fc 	.word	0x200004fc

08005008 <HW_IPCC_SYS_EvtNot>:
{
 8005008:	b500      	push	{lr}
 800500a:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800500c:	e007      	b.n	800501e <HW_IPCC_SYS_EvtNot+0x16>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800500e:	a901      	add	r1, sp, #4
 8005010:	4807      	ldr	r0, [pc, #28]	; (8005030 <HW_IPCC_SYS_EvtNot+0x28>)
 8005012:	f7ff ffa7 	bl	8004f64 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <HW_IPCC_SYS_EvtNot+0x2c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	9801      	ldr	r0, [sp, #4]
 800501c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800501e:	4804      	ldr	r0, [pc, #16]	; (8005030 <HW_IPCC_SYS_EvtNot+0x28>)
 8005020:	f7ff ff7c 	bl	8004f1c <LST_is_empty>
 8005024:	2800      	cmp	r0, #0
 8005026:	d0f2      	beq.n	800500e <HW_IPCC_SYS_EvtNot+0x6>
}
 8005028:	b003      	add	sp, #12
 800502a:	f85d fb04 	ldr.w	pc, [sp], #4
 800502e:	bf00      	nop
 8005030:	200300d0 	.word	0x200300d0
 8005034:	20000500 	.word	0x20000500

08005038 <TL_THREAD_CliSendAck>:
{
 8005038:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800503a:	4b04      	ldr	r3, [pc, #16]	; (800504c <TL_THREAD_CliSendAck+0x14>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	220d      	movs	r2, #13
 8005042:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_CliSendAck();
 8005044:	f000 f8d0 	bl	80051e8 <HW_IPCC_THREAD_CliSendAck>
}
 8005048:	bd08      	pop	{r3, pc}
 800504a:	bf00      	nop
 800504c:	20030000 	.word	0x20030000

08005050 <HW_IPCC_OT_CmdEvtNot>:
{
 8005050:	b508      	push	{r3, lr}
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HW_IPCC_OT_CmdEvtNot+0x10>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	6898      	ldr	r0, [r3, #8]
 8005058:	f000 f858 	bl	800510c <TL_OT_CmdEvtReceived>
}
 800505c:	bd08      	pop	{r3, pc}
 800505e:	bf00      	nop
 8005060:	20030000 	.word	0x20030000

08005064 <HW_IPCC_THREAD_EvtNot>:
{
 8005064:	b508      	push	{r3, lr}
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HW_IPCC_THREAD_EvtNot+0x10>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	f000 f852 	bl	8005114 <TL_THREAD_NotReceived>
}
 8005070:	bd08      	pop	{r3, pc}
 8005072:	bf00      	nop
 8005074:	20030000 	.word	0x20030000

08005078 <HW_IPCC_THREAD_CliEvtNot>:
{
 8005078:	b508      	push	{r3, lr}
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800507a:	4b03      	ldr	r3, [pc, #12]	; (8005088 <HW_IPCC_THREAD_CliEvtNot+0x10>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	6858      	ldr	r0, [r3, #4]
 8005080:	f000 f850 	bl	8005124 <TL_THREAD_CliNotReceived>
}
 8005084:	bd08      	pop	{r3, pc}
 8005086:	bf00      	nop
 8005088:	20030000 	.word	0x20030000

0800508c <TL_MM_EvtDone>:
{
 800508c:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800508e:	4601      	mov	r1, r0
 8005090:	4803      	ldr	r0, [pc, #12]	; (80050a0 <TL_MM_EvtDone+0x14>)
 8005092:	f7ff ff4f 	bl	8004f34 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005096:	4803      	ldr	r0, [pc, #12]	; (80050a4 <TL_MM_EvtDone+0x18>)
 8005098:	f000 f90e 	bl	80052b8 <HW_IPCC_MM_SendFreeBuf>
}
 800509c:	bd08      	pop	{r3, pc}
 800509e:	bf00      	nop
 80050a0:	200004f4 	.word	0x200004f4
 80050a4:	08004f7d 	.word	0x08004f7d

080050a8 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 80050a8:	b500      	push	{lr}
 80050aa:	b083      	sub	sp, #12
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80050ac:	e006      	b.n	80050bc <HW_IPCC_TRACES_EvtNot+0x14>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80050ae:	a901      	add	r1, sp, #4
 80050b0:	4806      	ldr	r0, [pc, #24]	; (80050cc <HW_IPCC_TRACES_EvtNot+0x24>)
 80050b2:	f7ff ff57 	bl	8004f64 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80050b6:	9801      	ldr	r0, [sp, #4]
 80050b8:	f7fb fa7c 	bl	80005b4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80050bc:	4803      	ldr	r0, [pc, #12]	; (80050cc <HW_IPCC_TRACES_EvtNot+0x24>)
 80050be:	f7ff ff2d 	bl	8004f1c <LST_is_empty>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d0f3      	beq.n	80050ae <HW_IPCC_TRACES_EvtNot+0x6>
  }

  return;
}
 80050c6:	b003      	add	sp, #12
 80050c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80050cc:	200300b0 	.word	0x200300b0

080050d0 <Receive_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
  FlagReceiveAckFromM0 = 1;
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <Receive_Ack_From_M0+0x8>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	4770      	bx	lr
 80050d8:	20000508 	.word	0x20000508

080050dc <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80050dc:	b508      	push	{r3, lr}
  CptReceiveMsgFromM0++;
 80050de:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <Receive_Notification_From_M0+0x18>)
 80050e0:	6813      	ldr	r3, [r2, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 80050e6:	2101      	movs	r1, #1
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <Receive_Notification_From_M0+0x1c>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	f7ff fbf2 	bl	80048d4 <osThreadFlagsSet>
}
 80050f0:	bd08      	pop	{r3, pc}
 80050f2:	bf00      	nop
 80050f4:	20000504 	.word	0x20000504
 80050f8:	2000050c 	.word	0x2000050c

080050fc <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80050fc:	b508      	push	{r3, lr}

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80050fe:	f7ff ff9b 	bl	8005038 <TL_THREAD_CliSendAck>
}
 8005102:	bd08      	pop	{r3, pc}

08005104 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8005104:	b508      	push	{r3, lr}
  Send_CLI_Ack_For_OT();
 8005106:	f7ff fff9 	bl	80050fc <Send_CLI_Ack_For_OT>
}
 800510a:	bd08      	pop	{r3, pc}

0800510c <TL_OT_CmdEvtReceived>:
{
 800510c:	b508      	push	{r3, lr}
  Receive_Ack_From_M0();
 800510e:	f7ff ffdf 	bl	80050d0 <Receive_Ack_From_M0>
}
 8005112:	bd08      	pop	{r3, pc}

08005114 <TL_THREAD_NotReceived>:
{
 8005114:	b508      	push	{r3, lr}
  p_thread_notif_M0_to_M4 = Notbuffer;
 8005116:	4b02      	ldr	r3, [pc, #8]	; (8005120 <TL_THREAD_NotReceived+0xc>)
 8005118:	6018      	str	r0, [r3, #0]
  Receive_Notification_From_M0();
 800511a:	f7ff ffdf 	bl	80050dc <Receive_Notification_From_M0>
}
 800511e:	bd08      	pop	{r3, pc}
 8005120:	20000510 	.word	0x20000510

08005124 <TL_THREAD_CliNotReceived>:
{
 8005124:	b538      	push	{r3, r4, r5, lr}
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8005126:	7ac5      	ldrb	r5, [r0, #11]
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8005128:	f100 040c 	add.w	r4, r0, #12
 800512c:	4907      	ldr	r1, [pc, #28]	; (800514c <TL_THREAD_CliNotReceived+0x28>)
 800512e:	4620      	mov	r0, r4
 8005130:	f7fb f826 	bl	8000180 <strcmp>
 8005134:	b910      	cbnz	r0, 800513c <TL_THREAD_CliNotReceived+0x18>
    Send_CLI_Ack_For_OT();
 8005136:	f7ff ffe1 	bl	80050fc <Send_CLI_Ack_For_OT>
}
 800513a:	bd38      	pop	{r3, r4, r5, pc}
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <TL_THREAD_CliNotReceived+0x2c>)
 800513e:	462a      	mov	r2, r5
 8005140:	4621      	mov	r1, r4
 8005142:	2000      	movs	r0, #0
 8005144:	f7fb fac8 	bl	80006d8 <HW_UART_Transmit_IT>
 8005148:	e7f7      	b.n	800513a <TL_THREAD_CliNotReceived+0x16>
 800514a:	bf00      	nop
 800514c:	080054d4 	.word	0x080054d4
 8005150:	08005105 	.word	0x08005105

08005154 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8005154:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005156:	4c06      	ldr	r4, [pc, #24]	; (8005170 <HW_IPCC_MM_FreeBufHandler+0x1c>)
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800515e:	6063      	str	r3, [r4, #4]
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4798      	blx	r3
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005166:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800516a:	60a3      	str	r3, [r4, #8]

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
}
 800516c:	bd10      	pop	{r4, pc}
 800516e:	bf00      	nop
 8005170:	58000c00 	.word	0x58000c00
 8005174:	20000514 	.word	0x20000514

08005178 <HW_IPCC_THREAD_CliNotEvtHandler>:
{
 8005178:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800517a:	4a04      	ldr	r2, [pc, #16]	; (800518c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800517c:	6853      	ldr	r3, [r2, #4]
 800517e:	f043 0310 	orr.w	r3, r3, #16
 8005182:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_CliEvtNot();
 8005184:	f7ff ff78 	bl	8005078 <HW_IPCC_THREAD_CliEvtNot>
}
 8005188:	bd08      	pop	{r3, pc}
 800518a:	bf00      	nop
 800518c:	58000c00 	.word	0x58000c00

08005190 <HW_IPCC_BLE_AclDataEvtHandler>:
{
 8005190:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005192:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8005194:	6853      	ldr	r3, [r2, #4]
 8005196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800519a:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 800519c:	f7ff ff20 	bl	8004fe0 <HW_IPCC_BLE_AclDataAckNot>
}
 80051a0:	bd08      	pop	{r3, pc}
 80051a2:	bf00      	nop
 80051a4:	58000c00 	.word	0x58000c00

080051a8 <HW_IPCC_BLE_EvtHandler>:
{
 80051a8:	b508      	push	{r3, lr}
  HW_IPCC_BLE_RxEvtNot();
 80051aa:	f7ff ff01 	bl	8004fb0 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 80051ae:	4b02      	ldr	r3, [pc, #8]	; (80051b8 <HW_IPCC_BLE_EvtHandler+0x10>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	609a      	str	r2, [r3, #8]
}
 80051b4:	bd08      	pop	{r3, pc}
 80051b6:	bf00      	nop
 80051b8:	58000c00 	.word	0x58000c00

080051bc <HW_IPCC_SYS_CmdEvtHandler>:
{
 80051bc:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80051be:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80051c0:	6853      	ldr	r3, [r2, #4]
 80051c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c6:	6053      	str	r3, [r2, #4]
  HW_IPCC_SYS_CmdEvtNot();
 80051c8:	f7ff ff12 	bl	8004ff0 <HW_IPCC_SYS_CmdEvtNot>
}
 80051cc:	bd08      	pop	{r3, pc}
 80051ce:	bf00      	nop
 80051d0:	58000c00 	.word	0x58000c00

080051d4 <HW_IPCC_SYS_EvtHandler>:
{
 80051d4:	b508      	push	{r3, lr}
  HW_IPCC_SYS_EvtNot();
 80051d6:	f7ff ff17 	bl	8005008 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 80051da:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <HW_IPCC_SYS_EvtHandler+0x10>)
 80051dc:	2202      	movs	r2, #2
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bd08      	pop	{r3, pc}
 80051e2:	bf00      	nop
 80051e4:	58000c00 	.word	0x58000c00

080051e8 <HW_IPCC_THREAD_CliSendAck>:
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <HW_IPCC_THREAD_CliSendAck+0x10>)
 80051ea:	2210      	movs	r2, #16
 80051ec:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	f022 0210 	bic.w	r2, r2, #16
 80051f4:	605a      	str	r2, [r3, #4]
}
 80051f6:	4770      	bx	lr
 80051f8:	58000c00 	.word	0x58000c00

080051fc <HW_IPCC_OT_CmdEvtHandler>:
{
 80051fc:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80051fe:	4a04      	ldr	r2, [pc, #16]	; (8005210 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8005200:	6853      	ldr	r3, [r2, #4]
 8005202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005206:	6053      	str	r3, [r2, #4]
  HW_IPCC_OT_CmdEvtNot();
 8005208:	f7ff ff22 	bl	8005050 <HW_IPCC_OT_CmdEvtNot>
}
 800520c:	bd08      	pop	{r3, pc}
 800520e:	bf00      	nop
 8005210:	58000c00 	.word	0x58000c00

08005214 <HW_IPCC_Tx_Handler>:
{
 8005214:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f013 0f02 	tst.w	r3, #2
 800521e:	d104      	bne.n	800522a <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8005220:	4b1e      	ldr	r3, [pc, #120]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005228:	d028      	beq.n	800527c <HW_IPCC_Tx_Handler+0x68>
 800522a:	4b1c      	ldr	r3, [pc, #112]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f013 0f04 	tst.w	r3, #4
 8005232:	d104      	bne.n	800523e <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8005234:	4b19      	ldr	r3, [pc, #100]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800523c:	d021      	beq.n	8005282 <HW_IPCC_Tx_Handler+0x6e>
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f013 0f02 	tst.w	r3, #2
 8005246:	d104      	bne.n	8005252 <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8005248:	4b14      	ldr	r3, [pc, #80]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005250:	d01a      	beq.n	8005288 <HW_IPCC_Tx_Handler+0x74>
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f013 0f08 	tst.w	r3, #8
 800525a:	d104      	bne.n	8005266 <HW_IPCC_Tx_Handler+0x52>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005264:	d013      	beq.n	800528e <HW_IPCC_Tx_Handler+0x7a>
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f013 0f20 	tst.w	r3, #32
 800526e:	d104      	bne.n	800527a <HW_IPCC_Tx_Handler+0x66>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HW_IPCC_Tx_Handler+0x88>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005278:	d00c      	beq.n	8005294 <HW_IPCC_Tx_Handler+0x80>
}
 800527a:	bd08      	pop	{r3, pc}
    HW_IPCC_SYS_CmdEvtHandler();
 800527c:	f7ff ff9e 	bl	80051bc <HW_IPCC_SYS_CmdEvtHandler>
 8005280:	e7fb      	b.n	800527a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_OT_CmdEvtHandler();
 8005282:	f7ff ffbb 	bl	80051fc <HW_IPCC_OT_CmdEvtHandler>
 8005286:	e7f8      	b.n	800527a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_SYS_CmdEvtHandler();
 8005288:	f7ff ff98 	bl	80051bc <HW_IPCC_SYS_CmdEvtHandler>
 800528c:	e7f5      	b.n	800527a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_MM_FreeBufHandler();
 800528e:	f7ff ff61 	bl	8005154 <HW_IPCC_MM_FreeBufHandler>
 8005292:	e7f2      	b.n	800527a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_BLE_AclDataEvtHandler();
 8005294:	f7ff ff7c 	bl	8005190 <HW_IPCC_BLE_AclDataEvtHandler>
  return;
 8005298:	e7ef      	b.n	800527a <HW_IPCC_Tx_Handler+0x66>
 800529a:	bf00      	nop
 800529c:	58000c00 	.word	0x58000c00

080052a0 <HW_IPCC_THREAD_NotEvtHandler>:
{
 80052a0:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 80052a2:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 80052a4:	6853      	ldr	r3, [r2, #4]
 80052a6:	f043 0304 	orr.w	r3, r3, #4
 80052aa:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_EvtNot();
 80052ac:	f7ff feda 	bl	8005064 <HW_IPCC_THREAD_EvtNot>
}
 80052b0:	bd08      	pop	{r3, pc}
 80052b2:	bf00      	nop
 80052b4:	58000c00 	.word	0x58000c00

080052b8 <HW_IPCC_MM_SendFreeBuf>:
{
 80052b8:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f013 0f08 	tst.w	r3, #8
 80052c2:	d105      	bne.n	80052d0 <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 80052c4:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 80052c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80052cc:	609a      	str	r2, [r3, #8]
}
 80052ce:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 80052d0:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <HW_IPCC_MM_SendFreeBuf+0x2c>)
 80052d2:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80052d4:	4a02      	ldr	r2, [pc, #8]	; (80052e0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 80052d6:	6853      	ldr	r3, [r2, #4]
 80052d8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80052dc:	6053      	str	r3, [r2, #4]
 80052de:	e7f6      	b.n	80052ce <HW_IPCC_MM_SendFreeBuf+0x16>
 80052e0:	58000c00 	.word	0x58000c00
 80052e4:	20000514 	.word	0x20000514

080052e8 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80052e8:	b508      	push	{r3, lr}
  HW_IPCC_TRACES_EvtNot();
 80052ea:	f7ff fedd 	bl	80050a8 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 80052ee:	4b02      	ldr	r3, [pc, #8]	; (80052f8 <HW_IPCC_TRACES_EvtHandler+0x10>)
 80052f0:	2208      	movs	r2, #8
 80052f2:	609a      	str	r2, [r3, #8]

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 80052f4:	bd08      	pop	{r3, pc}
 80052f6:	bf00      	nop
 80052f8:	58000c00 	.word	0x58000c00

080052fc <HW_IPCC_Rx_Handler>:
{
 80052fc:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80052fe:	4b21      	ldr	r3, [pc, #132]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f013 0f02 	tst.w	r3, #2
 8005306:	d004      	beq.n	8005312 <HW_IPCC_Rx_Handler+0x16>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f013 0f02 	tst.w	r3, #2
 8005310:	d028      	beq.n	8005364 <HW_IPCC_Rx_Handler+0x68>
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f013 0f04 	tst.w	r3, #4
 800531a:	d004      	beq.n	8005326 <HW_IPCC_Rx_Handler+0x2a>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800531c:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f013 0f04 	tst.w	r3, #4
 8005324:	d021      	beq.n	800536a <HW_IPCC_Rx_Handler+0x6e>
 8005326:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f013 0f10 	tst.w	r3, #16
 800532e:	d004      	beq.n	800533a <HW_IPCC_Rx_Handler+0x3e>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f013 0f10 	tst.w	r3, #16
 8005338:	d01a      	beq.n	8005370 <HW_IPCC_Rx_Handler+0x74>
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f013 0f01 	tst.w	r3, #1
 8005342:	d004      	beq.n	800534e <HW_IPCC_Rx_Handler+0x52>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f013 0f01 	tst.w	r3, #1
 800534c:	d013      	beq.n	8005376 <HW_IPCC_Rx_Handler+0x7a>
 800534e:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f013 0f08 	tst.w	r3, #8
 8005356:	d004      	beq.n	8005362 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <HW_IPCC_Rx_Handler+0x88>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f013 0f08 	tst.w	r3, #8
 8005360:	d00c      	beq.n	800537c <HW_IPCC_Rx_Handler+0x80>
}
 8005362:	bd08      	pop	{r3, pc}
      HW_IPCC_SYS_EvtHandler();
 8005364:	f7ff ff36 	bl	80051d4 <HW_IPCC_SYS_EvtHandler>
 8005368:	e7fb      	b.n	8005362 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_NotEvtHandler();
 800536a:	f7ff ff99 	bl	80052a0 <HW_IPCC_THREAD_NotEvtHandler>
 800536e:	e7f8      	b.n	8005362 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_CliNotEvtHandler();
 8005370:	f7ff ff02 	bl	8005178 <HW_IPCC_THREAD_CliNotEvtHandler>
 8005374:	e7f5      	b.n	8005362 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_BLE_EvtHandler();
 8005376:	f7ff ff17 	bl	80051a8 <HW_IPCC_BLE_EvtHandler>
 800537a:	e7f2      	b.n	8005362 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_TRACES_EvtHandler();
 800537c:	f7ff ffb4 	bl	80052e8 <HW_IPCC_TRACES_EvtHandler>
  return;
 8005380:	e7ef      	b.n	8005362 <HW_IPCC_Rx_Handler+0x66>
 8005382:	bf00      	nop
 8005384:	58000c00 	.word	0x58000c00

08005388 <__libc_init_array>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4e0d      	ldr	r6, [pc, #52]	; (80053c0 <__libc_init_array+0x38>)
 800538c:	4c0d      	ldr	r4, [pc, #52]	; (80053c4 <__libc_init_array+0x3c>)
 800538e:	1ba4      	subs	r4, r4, r6
 8005390:	10a4      	asrs	r4, r4, #2
 8005392:	2500      	movs	r5, #0
 8005394:	42a5      	cmp	r5, r4
 8005396:	d109      	bne.n	80053ac <__libc_init_array+0x24>
 8005398:	4e0b      	ldr	r6, [pc, #44]	; (80053c8 <__libc_init_array+0x40>)
 800539a:	4c0c      	ldr	r4, [pc, #48]	; (80053cc <__libc_init_array+0x44>)
 800539c:	f000 f820 	bl	80053e0 <_init>
 80053a0:	1ba4      	subs	r4, r4, r6
 80053a2:	10a4      	asrs	r4, r4, #2
 80053a4:	2500      	movs	r5, #0
 80053a6:	42a5      	cmp	r5, r4
 80053a8:	d105      	bne.n	80053b6 <__libc_init_array+0x2e>
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053b0:	4798      	blx	r3
 80053b2:	3501      	adds	r5, #1
 80053b4:	e7ee      	b.n	8005394 <__libc_init_array+0xc>
 80053b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ba:	4798      	blx	r3
 80053bc:	3501      	adds	r5, #1
 80053be:	e7f2      	b.n	80053a6 <__libc_init_array+0x1e>
 80053c0:	080054e0 	.word	0x080054e0
 80053c4:	080054e0 	.word	0x080054e0
 80053c8:	080054e0 	.word	0x080054e0
 80053cc:	080054e4 	.word	0x080054e4

080053d0 <memset>:
 80053d0:	4402      	add	r2, r0
 80053d2:	4603      	mov	r3, r0
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d100      	bne.n	80053da <memset+0xa>
 80053d8:	4770      	bx	lr
 80053da:	f803 1b01 	strb.w	r1, [r3], #1
 80053de:	e7f9      	b.n	80053d4 <memset+0x4>

080053e0 <_init>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr

080053ec <_fini>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr
