
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad5c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800aea0  0800aea0  0001aea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b294  0800b294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000004  0800b298  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ea8  20000080  0800b314  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000f28  0800b314  00020f28  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 10 MB_MEM1       00000094  20030024  20030024  00030000  2**2
                  ALLOC
 11 MB_MEM2       00000020  200300b8  200300b8  00030000  2**2
                  ALLOC
 12 .debug_info   00036ed5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006250  00000000  00000000  00056f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ca0  00000000  00000000  0005d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000029e0  00000000  00000000  0005fe78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00018bbe  00000000  00000000  00062858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000eefc  00000000  00000000  0007b416  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0008a312  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000bd74  00000000  00000000  0008a390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ae84 	.word	0x0800ae84

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	0800ae84 	.word	0x0800ae84

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b30:	68fb      	ldr	r3, [r7, #12]
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b58:	4a2b      	ldr	r2, [pc, #172]	; (8000c08 <MX_ADC1_Init+0xc8>)
 8000b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b66:	2210      	movs	r2, #16
 8000b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b88:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bbe:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000bc0:	f001 ff8c 	bl	8002adc <HAL_ADC_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bca:	f000 ffcd 	bl	8001b68 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_ADC1_Init+0xcc>)
 8000bd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bda:	237f      	movs	r3, #127	; 0x7f
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bde:	2304      	movs	r3, #4
 8000be0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_ADC1_Init+0xc4>)
 8000bec:	f002 f8bc 	bl	8002d68 <HAL_ADC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000bf6:	f000 ffb7 	bl	8001b68 <Error_Handler>
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200005d4 	.word	0x200005d4
 8000c08:	50040000 	.word	0x50040000
 8000c0c:	14f00020 	.word	0x14f00020

08000c10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <HAL_ADC_MspInit+0xa4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d13c      	bne.n	8000cac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c36:	f7ff ff69 	bl	8000b0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff ff66 	bl	8000b0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c44:	2303      	movs	r3, #3
 8000c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f003 f841 	bl	8003cdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_ADC_MspInit+0xac>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c62:	2205      	movs	r2, #5
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c86:	2220      	movs	r2, #32
 8000c88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000c92:	f002 fe69 	bl	8003968 <HAL_DMA_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000c9c:	f000 ff64 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000ca4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_ADC_MspInit+0xa8>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	50040000 	.word	0x50040000
 8000cb8:	20000638 	.word	0x20000638
 8000cbc:	40020008 	.word	0x40020008

08000cc0 <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f008 fdb5 	bl	8009838 <TL_MM_EvtDone>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <getRunTimeCounterValue>:
{

}

__weak unsigned long getRunTimeCounterValue(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8000cda:	f001 fd4d 	bl	8002778 <HAL_GetTick>
 8000cde:	4603      	mov	r3, r0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <vApplicationStackOverflowHook+0x24>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	3301      	adds	r3, #1
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <vApplicationStackOverflowHook+0x24>)
 8000d0a:	701a      	strb	r2, [r3, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	2000009c 	.word	0x2000009c

08000d1c <LL_AHB2_GRP1_EnableClock>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d40:	68fb      	ldr	r3, [r7, #12]
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <MX_COMP1_Init+0x54>)
 8000d58:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d5c:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <MX_COMP1_Init+0x58>)
 8000d5e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d66:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d88:	2231      	movs	r2, #49	; 0x31
 8000d8a:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_COMP1_Init+0x50>)
 8000d8e:	f002 fbeb 	bl	8003568 <HAL_COMP_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 8000d98:	f000 fee6 	bl	8001b68 <Error_Handler>
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000bf8 	.word	0x20000bf8
 8000da4:	40010200 	.word	0x40010200
 8000da8:	00c00010 	.word	0x00c00010

08000dac <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_COMP_MspInit+0x5c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d117      	bne.n	8000dfe <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff ffa4 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f002 ff77 	bl	8003cdc <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2105      	movs	r1, #5
 8000df2:	2016      	movs	r0, #22
 8000df4:	f002 fd90 	bl	8003918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8000df8:	2016      	movs	r0, #22
 8000dfa:	f002 fda7 	bl	800394c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010200 	.word	0x40010200

08000e0c <LL_AHB1_GRP1_EnableClock>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e42:	2004      	movs	r0, #4
 8000e44:	f7ff ffe2 	bl	8000e0c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff ffdf 	bl	8000e0c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2105      	movs	r1, #5
 8000e52:	200b      	movs	r0, #11
 8000e54:	f002 fd60 	bl	8003918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e58:	200b      	movs	r0, #11
 8000e5a:	f002 fd77 	bl	800394c <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <IMU_dataAvailable+0x64>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2bff      	cmp	r3, #255	; 0xff
 8000e6e:	d00d      	beq.n	8000e8c <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <IMU_dataAvailable+0x68>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <IMU_dataAvailable+0x64>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f003 f89d 	bl	8003fbc <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <IMU_dataAvailable+0x28>
			return (false);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e01b      	b.n	8000ec4 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8000e8c:	f000 fa8c 	bl	80013a8 <IMU_receivePacket>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d015      	beq.n	8000ec2 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <IMU_dataAvailable+0x6c>)
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d107      	bne.n	8000eb0 <IMU_dataAvailable+0x4c>
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <IMU_dataAvailable+0x70>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2bfb      	cmp	r3, #251	; 0xfb
 8000ea6:	d103      	bne.n	8000eb0 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8000ea8:	f000 f832 	bl	8000f10 <IMU_parseInputReport>
			return (true);
 8000eac:	2301      	movs	r3, #1
 8000eae:	e009      	b.n	8000ec4 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <IMU_dataAvailable+0x6c>)
 8000eb2:	789b      	ldrb	r3, [r3, #2]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d103      	bne.n	8000ec2 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8000eba:	f000 f80d 	bl	8000ed8 <IMU_parseCommandReport>
			return (true);
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000c7a 	.word	0x20000c7a
 8000ecc:	20000d40 	.word	0x20000d40
 8000ed0:	20000c28 	.word	0x20000c28
 8000ed4:	20000cb8 	.word	0x20000cb8

08000ed8 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <IMU_parseCommandReport+0x30>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2bf1      	cmp	r3, #241	; 0xf1
 8000ee4:	d109      	bne.n	8000efa <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <IMU_parseCommandReport+0x30>)
 8000ee8:	789b      	ldrb	r3, [r3, #2]
 8000eea:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d103      	bne.n	8000efa <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <IMU_parseCommandReport+0x30>)
 8000ef4:	795a      	ldrb	r2, [r3, #5]
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <IMU_parseCommandReport+0x34>)
 8000ef8:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000cb8 	.word	0x20000cb8
 8000f0c:	20000d6b 	.word	0x20000d6b

08000f10 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8000f16:	4b96      	ldr	r3, [pc, #600]	; (8001170 <IMU_parseInputReport+0x260>)
 8000f18:	785b      	ldrb	r3, [r3, #1]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b94      	ldr	r3, [pc, #592]	; (8001170 <IMU_parseInputReport+0x260>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8000f28:	8a3b      	ldrh	r3, [r7, #16]
 8000f2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f2e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8000f30:	8a3b      	ldrh	r3, [r7, #16]
 8000f32:	3b04      	subs	r3, #4
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8000f38:	4b8e      	ldr	r3, [pc, #568]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	061a      	lsls	r2, r3, #24
 8000f3e:	4b8d      	ldr	r3, [pc, #564]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f40:	78db      	ldrb	r3, [r3, #3]
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	431a      	orrs	r2, r3
 8000f46:	4b8b      	ldr	r3, [pc, #556]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f48:	789b      	ldrb	r3, [r3, #2]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	4a89      	ldr	r2, [pc, #548]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f50:	7852      	ldrb	r2, [r2, #1]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	4a88      	ldr	r2, [pc, #544]	; (8001178 <IMU_parseInputReport+0x268>)
 8000f56:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8000f58:	4b86      	ldr	r3, [pc, #536]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f5a:	79db      	ldrb	r3, [r3, #7]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8000f62:	4b84      	ldr	r3, [pc, #528]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f64:	7a9b      	ldrb	r3, [r3, #10]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	4b82      	ldr	r3, [pc, #520]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f6c:	7a5b      	ldrb	r3, [r3, #9]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8000f76:	4b7f      	ldr	r3, [pc, #508]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f78:	7b1b      	ldrb	r3, [r3, #12]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b7d      	ldr	r3, [pc, #500]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f80:	7adb      	ldrb	r3, [r3, #11]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f8c:	7b9b      	ldrb	r3, [r3, #14]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b78      	ldr	r3, [pc, #480]	; (8001174 <IMU_parseInputReport+0x264>)
 8000f94:	7b5b      	ldrb	r3, [r3, #13]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8000fa6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000faa:	3b05      	subs	r3, #5
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	dd09      	ble.n	8000fc4 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8000fb0:	4b70      	ldr	r3, [pc, #448]	; (8001174 <IMU_parseInputReport+0x264>)
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <IMU_parseInputReport+0x264>)
 8000fba:	7bdb      	ldrb	r3, [r3, #15]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8000fc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fc8:	3b05      	subs	r3, #5
 8000fca:	2b0b      	cmp	r3, #11
 8000fcc:	dd09      	ble.n	8000fe2 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <IMU_parseInputReport+0x264>)
 8000fd0:	7c9b      	ldrb	r3, [r3, #18]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	4b67      	ldr	r3, [pc, #412]	; (8001174 <IMU_parseInputReport+0x264>)
 8000fd8:	7c5b      	ldrb	r3, [r3, #17]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8000fe2:	4b64      	ldr	r3, [pc, #400]	; (8001174 <IMU_parseInputReport+0x264>)
 8000fe4:	795b      	ldrb	r3, [r3, #5]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10d      	bne.n	8001006 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <IMU_parseInputReport+0x26c>)
 8000ff0:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8000ff2:	4a63      	ldr	r2, [pc, #396]	; (8001180 <IMU_parseInputReport+0x270>)
 8000ff4:	89bb      	ldrh	r3, [r7, #12]
 8000ff6:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8000ff8:	4a62      	ldr	r2, [pc, #392]	; (8001184 <IMU_parseInputReport+0x274>)
 8000ffa:	897b      	ldrh	r3, [r7, #10]
 8000ffc:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8000ffe:	4a62      	ldr	r2, [pc, #392]	; (8001188 <IMU_parseInputReport+0x278>)
 8001000:	893b      	ldrh	r3, [r7, #8]
 8001002:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001004:	e16a      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001006:	4b5b      	ldr	r3, [pc, #364]	; (8001174 <IMU_parseInputReport+0x264>)
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d10d      	bne.n	800102a <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b5e      	ldr	r3, [pc, #376]	; (800118c <IMU_parseInputReport+0x27c>)
 8001014:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001016:	4a5e      	ldr	r2, [pc, #376]	; (8001190 <IMU_parseInputReport+0x280>)
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 800101c:	4a5d      	ldr	r2, [pc, #372]	; (8001194 <IMU_parseInputReport+0x284>)
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001022:	4a5d      	ldr	r2, [pc, #372]	; (8001198 <IMU_parseInputReport+0x288>)
 8001024:	893b      	ldrh	r3, [r7, #8]
 8001026:	8013      	strh	r3, [r2, #0]
}
 8001028:	e158      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 800102a:	4b52      	ldr	r3, [pc, #328]	; (8001174 <IMU_parseInputReport+0x264>)
 800102c:	795b      	ldrb	r3, [r3, #5]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d10d      	bne.n	800104e <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b59      	ldr	r3, [pc, #356]	; (800119c <IMU_parseInputReport+0x28c>)
 8001038:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 800103a:	4a59      	ldr	r2, [pc, #356]	; (80011a0 <IMU_parseInputReport+0x290>)
 800103c:	89bb      	ldrh	r3, [r7, #12]
 800103e:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001040:	4a58      	ldr	r2, [pc, #352]	; (80011a4 <IMU_parseInputReport+0x294>)
 8001042:	897b      	ldrh	r3, [r7, #10]
 8001044:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001046:	4a58      	ldr	r2, [pc, #352]	; (80011a8 <IMU_parseInputReport+0x298>)
 8001048:	893b      	ldrh	r3, [r7, #8]
 800104a:	8013      	strh	r3, [r2, #0]
}
 800104c:	e146      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 800104e:	4b49      	ldr	r3, [pc, #292]	; (8001174 <IMU_parseInputReport+0x264>)
 8001050:	795b      	ldrb	r3, [r3, #5]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d10d      	bne.n	8001072 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <IMU_parseInputReport+0x29c>)
 800105c:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 800105e:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <IMU_parseInputReport+0x2a0>)
 8001060:	89bb      	ldrh	r3, [r7, #12]
 8001062:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001064:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <IMU_parseInputReport+0x2a4>)
 8001066:	897b      	ldrh	r3, [r7, #10]
 8001068:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 800106a:	4a53      	ldr	r2, [pc, #332]	; (80011b8 <IMU_parseInputReport+0x2a8>)
 800106c:	893b      	ldrh	r3, [r7, #8]
 800106e:	8013      	strh	r3, [r2, #0]
}
 8001070:	e134      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001072:	4b40      	ldr	r3, [pc, #256]	; (8001174 <IMU_parseInputReport+0x264>)
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d003      	beq.n	8001082 <IMU_parseInputReport+0x172>
 800107a:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <IMU_parseInputReport+0x264>)
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	2b08      	cmp	r3, #8
 8001080:	d166      	bne.n	8001150 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001082:	f001 fb79 	bl	8002778 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <IMU_parseInputReport+0x2ac>)
 800108a:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 800108c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <IMU_parseInputReport+0x2b0>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4619      	mov	r1, r3
 800109a:	4610      	mov	r0, r2
 800109c:	f000 f944 	bl	8001328 <IMU_qToFloat>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <IMU_parseInputReport+0x2ac>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 80010aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <IMU_parseInputReport+0x2b0>)
 80010b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f000 f935 	bl	8001328 <IMU_qToFloat>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <IMU_parseInputReport+0x2ac>)
 80010c4:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 80010c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80010cc:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <IMU_parseInputReport+0x2b0>)
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f000 f926 	bl	8001328 <IMU_qToFloat>
 80010dc:	eef0 7a40 	vmov.f32	s15, s0
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <IMU_parseInputReport+0x2ac>)
 80010e2:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 80010e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <IMU_parseInputReport+0x2b0>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f000 f917 	bl	8001328 <IMU_qToFloat>
 80010fa:	eef0 7a40 	vmov.f32	s15, s0
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <IMU_parseInputReport+0x2ac>)
 8001100:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001104:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001108:	210c      	movs	r1, #12
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f90c 	bl	8001328 <IMU_qToFloat>
 8001110:	eef0 7a40 	vmov.f32	s15, s0
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <IMU_parseInputReport+0x2ac>)
 8001116:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <IMU_parseInputReport+0x2b4>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	2200      	movs	r2, #0
 8001122:	4926      	ldr	r1, [pc, #152]	; (80011bc <IMU_parseInputReport+0x2ac>)
 8001124:	f006 fcd8 	bl	8007ad8 <osMessageQueuePut>
		quatAccuracy = status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <IMU_parseInputReport+0x2b8>)
 800112e:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <IMU_parseInputReport+0x2bc>)
 8001132:	89bb      	ldrh	r3, [r7, #12]
 8001134:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001136:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <IMU_parseInputReport+0x2c0>)
 8001138:	897b      	ldrh	r3, [r7, #10]
 800113a:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 800113c:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <IMU_parseInputReport+0x2c4>)
 800113e:	893b      	ldrh	r3, [r7, #8]
 8001140:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <IMU_parseInputReport+0x2c8>)
 8001144:	8afb      	ldrh	r3, [r7, #22]
 8001146:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001148:	4a24      	ldr	r2, [pc, #144]	; (80011dc <IMU_parseInputReport+0x2cc>)
 800114a:	8abb      	ldrh	r3, [r7, #20]
 800114c:	8013      	strh	r3, [r2, #0]
}
 800114e:	e0c5      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <IMU_parseInputReport+0x264>)
 8001152:	795b      	ldrb	r3, [r3, #5]
 8001154:	2b11      	cmp	r3, #17
 8001156:	d147      	bne.n	80011e8 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001158:	f001 fb0e 	bl	8002778 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <IMU_parseInputReport+0x2d0>)
 8001160:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <IMU_parseInputReport+0x2d0>)
 8001164:	893b      	ldrh	r3, [r7, #8]
 8001166:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <IMU_parseInputReport+0x2d4>)
 800116a:	893b      	ldrh	r3, [r7, #8]
 800116c:	8013      	strh	r3, [r2, #0]
}
 800116e:	e0b5      	b.n	80012dc <IMU_parseInputReport+0x3cc>
 8001170:	20000c28 	.word	0x20000c28
 8001174:	20000cb8 	.word	0x20000cb8
 8001178:	20000c44 	.word	0x20000c44
 800117c:	20000d80 	.word	0x20000d80
 8001180:	20000d68 	.word	0x20000d68
 8001184:	20000d84 	.word	0x20000d84
 8001188:	20000c80 	.word	0x20000c80
 800118c:	20000c7c 	.word	0x20000c7c
 8001190:	20000c4e 	.word	0x20000c4e
 8001194:	20000d6c 	.word	0x20000d6c
 8001198:	20000caa 	.word	0x20000caa
 800119c:	20000cac 	.word	0x20000cac
 80011a0:	20000cae 	.word	0x20000cae
 80011a4:	20000c76 	.word	0x20000c76
 80011a8:	20000c74 	.word	0x20000c74
 80011ac:	20000c2c 	.word	0x20000c2c
 80011b0:	20000c78 	.word	0x20000c78
 80011b4:	20000d6e 	.word	0x20000d6e
 80011b8:	20000c7e 	.word	0x20000c7e
 80011bc:	20000c90 	.word	0x20000c90
 80011c0:	20000004 	.word	0x20000004
 80011c4:	200007b4 	.word	0x200007b4
 80011c8:	20000c4a 	.word	0x20000c4a
 80011cc:	20000d82 	.word	0x20000d82
 80011d0:	20000ca8 	.word	0x20000ca8
 80011d4:	20000c24 	.word	0x20000c24
 80011d8:	20000c40 	.word	0x20000c40
 80011dc:	20000c82 	.word	0x20000c82
 80011e0:	20000c30 	.word	0x20000c30
 80011e4:	20000d86 	.word	0x20000d86
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 80011e8:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 80011ea:	795b      	ldrb	r3, [r3, #5]
 80011ec:	2b13      	cmp	r3, #19
 80011ee:	d10d      	bne.n	800120c <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 80011f0:	f001 fac2 	bl	8002778 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <IMU_parseInputReport+0x3d8>)
 80011f8:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 80011fc:	7a5a      	ldrb	r2, [r3, #9]
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <IMU_parseInputReport+0x3d8>)
 8001200:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 8001204:	7a5a      	ldrb	r2, [r3, #9]
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <IMU_parseInputReport+0x3dc>)
 8001208:	701a      	strb	r2, [r3, #0]
}
 800120a:	e067      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 800120e:	795b      	ldrb	r3, [r3, #5]
 8001210:	2b1e      	cmp	r3, #30
 8001212:	d12b      	bne.n	800126c <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001214:	f001 fab0 	bl	8002778 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <IMU_parseInputReport+0x3e0>)
 800121c:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800121e:	2300      	movs	r3, #0
 8001220:	74fb      	strb	r3, [r7, #19]
 8001222:	e00c      	b.n	800123e <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001224:	7cfb      	ldrb	r3, [r7, #19]
 8001226:	f103 020b 	add.w	r2, r3, #11
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <IMU_parseInputReport+0x3e4>)
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	7cfb      	ldrb	r3, [r7, #19]
 8001230:	440b      	add	r3, r1
 8001232:	492c      	ldr	r1, [pc, #176]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 8001234:	5c8a      	ldrb	r2, [r1, r2]
 8001236:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001238:	7cfb      	ldrb	r3, [r7, #19]
 800123a:	3301      	adds	r3, #1
 800123c:	74fb      	strb	r3, [r7, #19]
 800123e:	7cfb      	ldrb	r3, [r7, #19]
 8001240:	2b08      	cmp	r3, #8
 8001242:	d9ef      	bls.n	8001224 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 8001246:	7a9a      	ldrb	r2, [r3, #10]
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <IMU_parseInputReport+0x3e8>)
 800124a:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <IMU_parseInputReport+0x3e4>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <IMU_parseInputReport+0x3e0>)
 8001252:	6810      	ldr	r0, [r2, #0]
 8001254:	6851      	ldr	r1, [r2, #4]
 8001256:	c303      	stmia	r3!, {r0, r1}
 8001258:	7a12      	ldrb	r2, [r2, #8]
 800125a:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <IMU_parseInputReport+0x3ec>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	4922      	ldr	r1, [pc, #136]	; (80012f0 <IMU_parseInputReport+0x3e0>)
 8001266:	f006 fc37 	bl	8007ad8 <osMessageQueuePut>
}
 800126a:	e037      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 800126e:	795b      	ldrb	r3, [r3, #5]
 8001270:	2b14      	cmp	r3, #20
 8001272:	d109      	bne.n	8001288 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001274:	4a22      	ldr	r2, [pc, #136]	; (8001300 <IMU_parseInputReport+0x3f0>)
 8001276:	89bb      	ldrh	r3, [r7, #12]
 8001278:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 800127a:	4a22      	ldr	r2, [pc, #136]	; (8001304 <IMU_parseInputReport+0x3f4>)
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001280:	4a21      	ldr	r2, [pc, #132]	; (8001308 <IMU_parseInputReport+0x3f8>)
 8001282:	893b      	ldrh	r3, [r7, #8]
 8001284:	8013      	strh	r3, [r2, #0]
}
 8001286:	e029      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 800128a:	795b      	ldrb	r3, [r3, #5]
 800128c:	2b15      	cmp	r3, #21
 800128e:	d109      	bne.n	80012a4 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001290:	4a1e      	ldr	r2, [pc, #120]	; (800130c <IMU_parseInputReport+0x3fc>)
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <IMU_parseInputReport+0x400>)
 8001298:	897b      	ldrh	r3, [r7, #10]
 800129a:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <IMU_parseInputReport+0x404>)
 800129e:	893b      	ldrh	r3, [r7, #8]
 80012a0:	8013      	strh	r3, [r2, #0]
}
 80012a2:	e01b      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 80012a6:	795b      	ldrb	r3, [r3, #5]
 80012a8:	2b16      	cmp	r3, #22
 80012aa:	d109      	bne.n	80012c0 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <IMU_parseInputReport+0x408>)
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 80012b2:	4a1a      	ldr	r2, [pc, #104]	; (800131c <IMU_parseInputReport+0x40c>)
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <IMU_parseInputReport+0x410>)
 80012ba:	893b      	ldrh	r3, [r7, #8]
 80012bc:	8013      	strh	r3, [r2, #0]
}
 80012be:	e00d      	b.n	80012dc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 80012c2:	795b      	ldrb	r3, [r3, #5]
 80012c4:	2bf1      	cmp	r3, #241	; 0xf1
 80012c6:	d109      	bne.n	80012dc <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 80012ca:	79db      	ldrb	r3, [r3, #7]
 80012cc:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	d103      	bne.n	80012dc <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <IMU_parseInputReport+0x3d4>)
 80012d6:	7a9a      	ldrb	r2, [r3, #10]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <IMU_parseInputReport+0x414>)
 80012da:	701a      	strb	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000cb8 	.word	0x20000cb8
 80012e8:	20000c38 	.word	0x20000c38
 80012ec:	20000cb2 	.word	0x20000cb2
 80012f0:	20000d70 	.word	0x20000d70
 80012f4:	20000c8c 	.word	0x20000c8c
 80012f8:	20000d6a 	.word	0x20000d6a
 80012fc:	20000798 	.word	0x20000798
 8001300:	20000cb0 	.word	0x20000cb0
 8001304:	20000c8a 	.word	0x20000c8a
 8001308:	20000d3a 	.word	0x20000d3a
 800130c:	20000c2e 	.word	0x20000c2e
 8001310:	20000cb4 	.word	0x20000cb4
 8001314:	20000c84 	.word	0x20000c84
 8001318:	20000c88 	.word	0x20000c88
 800131c:	20000c86 	.word	0x20000c86
 8001320:	20000c4c 	.word	0x20000c4c
 8001324:	20000d6b 	.word	0x20000d6b

08001328 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	80fb      	strh	r3, [r7, #6]
 8001334:	4613      	mov	r3, r2
 8001336:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001344:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	425b      	negs	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f873 	bl	8000438 <__aeabi_i2d>
 8001352:	4603      	mov	r3, r0
 8001354:	460c      	mov	r4, r1
 8001356:	ec44 3b11 	vmov	d1, r3, r4
 800135a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80013a0 <IMU_qToFloat+0x78>
 800135e:	f008 fd3b 	bl	8009dd8 <pow>
 8001362:	ec56 5b10 	vmov	r5, r6, d0
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff f878 	bl	800045c <__aeabi_f2d>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	461a      	mov	r2, r3
 8001372:	4623      	mov	r3, r4
 8001374:	4628      	mov	r0, r5
 8001376:	4631      	mov	r1, r6
 8001378:	f7ff f8c8 	bl	800050c <__aeabi_dmul>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	4618      	mov	r0, r3
 8001382:	4621      	mov	r1, r4
 8001384:	f7ff fb72 	bl	8000a6c <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	ee07 3a90 	vmov	s15, r3
}
 8001392:	eeb0 0a67 	vmov.f32	s0, s15
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139c:	f3af 8000 	nop.w
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40000000 	.word	0x40000000

080013a8 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <IMU_receivePacket+0x90>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <IMU_receivePacket+0x94>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f002 fdfe 	bl	8003fbc <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <IMU_receivePacket+0x22>
		return (false);
 80013c6:	2300      	movs	r3, #0
 80013c8:	e031      	b.n	800142e <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <IMU_receivePacket+0x98>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fac2 	bl	800795c <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <IMU_receivePacket+0x9c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b299      	uxth	r1, r3
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2304      	movs	r3, #4
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <IMU_receivePacket+0xa0>)
 80013e6:	4819      	ldr	r0, [pc, #100]	; (800144c <IMU_receivePacket+0xa4>)
 80013e8:	f002 fea8 	bl	800413c <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <IMU_receivePacket+0x98>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f006 fb19 	bl	8007a28 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <IMU_receivePacket+0xa0>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <IMU_receivePacket+0xa0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800140e:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8001418:	2300      	movs	r3, #0
 800141a:	e008      	b.n	800142e <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	3b04      	subs	r3, #4
 8001420:	b29b      	uxth	r3, r3
 8001422:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f812 	bl	8001450 <IMU_getData>


	return (true); //We're done!
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000d40 	.word	0x20000d40
 800143c:	20000c7a 	.word	0x20000c7a
 8001440:	200007a0 	.word	0x200007a0
 8001444:	20000006 	.word	0x20000006
 8001448:	20000c28 	.word	0x20000c28
 800144c:	20000d88 	.word	0x20000d88

08001450 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 800145a:	2300      	movs	r3, #0
 800145c:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 800145e:	e036      	b.n	80014ce <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 8001464:	89bb      	ldrh	r3, [r7, #12]
 8001466:	2b1c      	cmp	r3, #28
 8001468:	d901      	bls.n	800146e <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 800146a:	231c      	movs	r3, #28
 800146c:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <IMU_getData+0x90>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f04f 31ff 	mov.w	r1, #4294967295
 8001476:	4618      	mov	r0, r3
 8001478:	f006 fa70 	bl	800795c <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <IMU_getData+0x94>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b299      	uxth	r1, r3
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3304      	adds	r3, #4
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	2364      	movs	r3, #100	; 0x64
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <IMU_getData+0x98>)
 8001494:	4815      	ldr	r0, [pc, #84]	; (80014ec <IMU_getData+0x9c>)
 8001496:	f002 fe51 	bl	800413c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <IMU_getData+0x90>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f006 fac2 	bl	8007a28 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80014a4:	89fa      	ldrh	r2, [r7, #14]
 80014a6:	89bb      	ldrh	r3, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	2b7f      	cmp	r3, #127	; 0x7f
 80014ac:	dc07      	bgt.n	80014be <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <IMU_getData+0xa0>)
 80014b2:	4413      	add	r3, r2
 80014b4:	89ba      	ldrh	r2, [r7, #12]
 80014b6:	490f      	ldr	r1, [pc, #60]	; (80014f4 <IMU_getData+0xa4>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f008 fc79 	bl	8009db0 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80014be:	89fa      	ldrh	r2, [r7, #14]
 80014c0:	89bb      	ldrh	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	89bb      	ldrh	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1c5      	bne.n	8001460 <IMU_getData+0x10>
	}
	return (true); //Done!
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200007a0 	.word	0x200007a0
 80014e4:	20000006 	.word	0x20000006
 80014e8:	200000a0 	.word	0x200000a0
 80014ec:	20000d88 	.word	0x20000d88
 80014f0:	20000cb8 	.word	0x20000cb8
 80014f4:	200000a4 	.word	0x200000a4

080014f8 <LL_AHB2_GRP1_EnableClock>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	2004      	movs	r0, #4
 8001542:	f7ff ffd9 	bl	80014f8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2080      	movs	r0, #128	; 0x80
 8001548:	f7ff ffd6 	bl	80014f8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	2002      	movs	r0, #2
 800154e:	f7ff ffd3 	bl	80014f8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff ffd0 	bl	80014f8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001558:	2010      	movs	r0, #16
 800155a:	f7ff ffcd 	bl	80014f8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800155e:	2308      	movs	r3, #8
 8001560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4829      	ldr	r0, [pc, #164]	; (8001614 <MX_GPIO_Init+0xe8>)
 8001570:	f002 fbb4 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8001574:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8001578:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4824      	ldr	r0, [pc, #144]	; (8001618 <MX_GPIO_Init+0xec>)
 8001588:	f002 fba8 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 800158c:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8001590:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001592:	2303      	movs	r3, #3
 8001594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f002 fb9b 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80015a6:	2320      	movs	r3, #32
 80015a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_GPIO_Init+0xf0>)
 80015ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f002 fb8f 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 80015be:	2304      	movs	r3, #4
 80015c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_GPIO_Init+0xf4>)
 80015c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4812      	ldr	r0, [pc, #72]	; (8001618 <MX_GPIO_Init+0xec>)
 80015d0:	f002 fb84 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015d4:	2310      	movs	r3, #16
 80015d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	2303      	movs	r3, #3
 80015da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	480f      	ldr	r0, [pc, #60]	; (8001624 <MX_GPIO_Init+0xf8>)
 80015e6:	f002 fb79 	bl	8003cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2105      	movs	r1, #5
 80015ee:	2008      	movs	r0, #8
 80015f0:	f002 f992 	bl	8003918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015f4:	2008      	movs	r0, #8
 80015f6:	f002 f9a9 	bl	800394c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	2017      	movs	r0, #23
 8001600:	f002 f98a 	bl	8003918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001604:	2017      	movs	r0, #23
 8001606:	f002 f9a1 	bl	800394c <HAL_NVIC_EnableIRQ>

}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	48001c00 	.word	0x48001c00
 8001618:	48000400 	.word	0x48000400
 800161c:	10210000 	.word	0x10210000
 8001620:	10110000 	.word	0x10110000
 8001624:	48001000 	.word	0x48001000

08001628 <LL_AHB2_GRP1_EnableClock>:
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4313      	orrs	r3, r2
 800163e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164c:	68fb      	ldr	r3, [r7, #12]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4013      	ands	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_I2C1_Init+0x74>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_I2C1_Init+0x78>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_I2C1_Init+0x74>)
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <MX_I2C1_Init+0x7c>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_I2C1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_I2C1_Init+0x74>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_I2C1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_I2C1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <MX_I2C1_Init+0x74>)
 80016c8:	f002 fca8 	bl	800401c <HAL_I2C_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d2:	f000 fa49 	bl	8001b68 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <MX_I2C1_Init+0x74>)
 80016da:	f002 ffdf 	bl	800469c <HAL_I2CEx_ConfigAnalogFilter>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e4:	f000 fa40 	bl	8001b68 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_I2C1_Init+0x74>)
 80016ec:	f003 f821 	bl	8004732 <HAL_I2CEx_ConfigDigitalFilter>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 fa37 	bl	8001b68 <Error_Handler>
  }

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000d88 	.word	0x20000d88
 8001704:	40005400 	.word	0x40005400
 8001708:	00e27cae 	.word	0x00e27cae

0800170c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_I2C_MspInit+0x6c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d120      	bne.n	8001770 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff ff7a 	bl	8001628 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001734:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001738:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173a:	2312      	movs	r3, #18
 800173c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001746:	2304      	movs	r3, #4
 8001748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f002 fac2 	bl	8003cdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001758:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800175c:	f7ff ff7d 	bl	800165a <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2105      	movs	r1, #5
 8001764:	201e      	movs	r0, #30
 8001766:	f002 f8d7 	bl	8003918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800176a:	201e      	movs	r0, #30
 800176c:	f002 f8ee 	bl	800394c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40005400 	.word	0x40005400

0800177c <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2b20      	cmp	r3, #32
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_EXTI_Callback+0x1c>
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x24>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8001794:	f7ff fb66 	bl	8000e64 <IMU_dataAvailable>
	}
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200000c0 	.word	0x200000c0

080017a4 <enqueue_pulse>:
	}

}


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80017ba:	723b      	strb	r3, [r7, #8]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	817b      	strh	r3, [r7, #10]
 80017c0:	883b      	ldrh	r3, [r7, #0]
 80017c2:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <enqueue_pulse+0x48>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	2300      	movs	r3, #0
 80017ce:	2200      	movs	r2, #0
 80017d0:	f006 f982 	bl	8007ad8 <osMessageQueuePut>
	count = osMessageQueueGetCount(pulseQueueHandle);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <enqueue_pulse+0x48>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f006 f9f1 	bl	8007bc0 <osMessageQueueGetCount>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <enqueue_pulse+0x4c>)
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200006a0 	.word	0x200006a0
 80017f0:	200000c4 	.word	0x200000c4

080017f4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	f023 0218 	bic.w	r2, r3, #24
 8001808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4313      	orrs	r3, r2
 8001810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001824:	f000 ff76 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001828:	f000 f83a 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182c:	f7ff fe7e 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 8001830:	f7ff fb05 	bl	8000e3e <MX_DMA_Init>
  MX_ADC1_Init();
 8001834:	f7ff f984 	bl	8000b40 <MX_ADC1_Init>
  MX_RTC_Init();
 8001838:	f000 f9b6 	bl	8001ba8 <MX_RTC_Init>
  MX_TIM2_Init();
 800183c:	f000 fc32 	bl	80020a4 <MX_TIM2_Init>
  MX_RF_Init();
 8001840:	f000 f999 	bl	8001b76 <MX_RF_Init>
  MX_I2C1_Init();
 8001844:	f7ff ff22 	bl	800168c <MX_I2C1_Init>
  MX_COMP1_Init();
 8001848:	f7ff fa82 	bl	8000d50 <MX_COMP1_Init>
  MX_TIM16_Init();
 800184c:	f000 fca0 	bl	8002190 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 8001850:	f000 fe9e 	bl	8002590 <MX_TSC_Init>
//  MX_TOUCHSENSING_Init();

  IoConfig.ChannelIOs  = TSC_GROUP2_IO3; /* Start with the first channel */
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <main+0x78>)
 8001856:	2240      	movs	r2, #64	; 0x40
 8001858:	601a      	str	r2, [r3, #0]
  IoConfig.SamplingIOs = TSC_GROUP2_IO1;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <main+0x78>)
 800185c:	2210      	movs	r2, #16
 800185e:	609a      	str	r2, [r3, #8]
  IoConfig.ShieldIOs = 0;
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <main+0x78>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]

  if (HAL_TSC_IOConfig(&htsc, &IoConfig) != HAL_OK)
 8001866:	490c      	ldr	r1, [pc, #48]	; (8001898 <main+0x78>)
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <main+0x7c>)
 800186a:	f005 ff46 	bl	80076fa <HAL_TSC_IOConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <main+0x58>
  {
    /* Initialization Error */
    Error_Handler();
 8001874:	f000 f978 	bl	8001b68 <Error_Handler>
  }

  HAL_TSC_IODischarge(&htsc, ENABLE);
 8001878:	2101      	movs	r1, #1
 800187a:	4808      	ldr	r0, [pc, #32]	; (800189c <main+0x7c>)
 800187c:	f005 ff80 	bl	8007780 <HAL_TSC_IODischarge>
  HAL_Delay(5); /* 1 ms is more than enough to discharge all capacitors */
 8001880:	2005      	movs	r0, #5
 8001882:	f000 ff91 	bl	80027a8 <HAL_Delay>
  if (HAL_TSC_Start_IT(&htsc) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <main+0x7c>)
 8001888:	f005 fea6 	bl	80075d8 <HAL_TSC_Start_IT>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <main+0x76>
	{
		/* Acquisition Error */
		Error_Handler();
 8001892:	f000 f969 	bl	8001b68 <Error_Handler>
//
//  for(int i = 0; i<1000; i++){
//	  test_packet[i] = i;
//  }

  while (1)
 8001896:	e7fe      	b.n	8001896 <main+0x76>
 8001898:	20000dd4 	.word	0x20000dd4
 800189c:	20000ee0 	.word	0x20000ee0

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0ae      	sub	sp, #184	; 0xb8
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018aa:	2248      	movs	r2, #72	; 0x48
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f008 fa89 	bl	8009dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2250      	movs	r2, #80	; 0x50
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f008 fa79 	bl	8009dc6 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f2:	f043 0303 	orr.w	r3, r3, #3
 80018f6:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff ff7b 	bl	80017f4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fe:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <SystemClock_Config+0x144>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001906:	4a37      	ldr	r2, [pc, #220]	; (80019e4 <SystemClock_Config+0x144>)
 8001908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <SystemClock_Config+0x144>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800191a:	230f      	movs	r3, #15
 800191c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001922:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001924:	2301      	movs	r3, #1
 8001926:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800192e:	2340      	movs	r3, #64	; 0x40
 8001930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001934:	2305      	movs	r3, #5
 8001936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001944:	4618      	mov	r0, r3
 8001946:	f003 faff 	bl	8004f48 <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001950:	f000 f90a 	bl	8001b68 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001954:	236f      	movs	r3, #111	; 0x6f
 8001956:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001958:	2302      	movs	r3, #2
 800195a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001970:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001974:	2101      	movs	r1, #1
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fe44 	bl	8005604 <HAL_RCC_ClockConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001982:	f000 f8f1 	bl	8001b68 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001986:	f643 4304 	movw	r3, #15364	; 0x3c04
 800198a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800198c:	2306      	movs	r3, #6
 800198e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001994:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800199a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800199c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019a0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80019a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 80019ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80019c0:	2302      	movs	r3, #2
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 fa71 	bl	8005eb2 <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0x13a>
  {
    Error_Handler();
 80019d6:	f000 f8c7 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019da:	bf00      	nop
 80019dc:	37b8      	adds	r7, #184	; 0xb8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	58000400 	.word	0x58000400

080019e8 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_COMP_TriggerCallback+0x74>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_COMP_TriggerCallback+0x78>)
 80019fa:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f001 fec3 	bl	8003788 <HAL_COMP_GetOutputLevel>
 8001a02:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d109      	bne.n	8001a1e <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_COMP_TriggerCallback+0x78>)
 8001a0c:	881a      	ldrh	r2, [r3, #0]
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_COMP_TriggerCallback+0x7c>)
 8001a10:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_COMP_TriggerCallback+0x7c>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8001a1c:	e019      	b.n	8001a52 <HAL_COMP_TriggerCallback+0x6a>
	else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_COMP_TriggerCallback+0x7c>)
 8001a20:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d014      	beq.n	8001a52 <HAL_COMP_TriggerCallback+0x6a>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d111      	bne.n	8001a52 <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_COMP_TriggerCallback+0x7c>)
 8001a30:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_COMP_TriggerCallback+0x78>)
 8001a36:	881a      	ldrh	r2, [r3, #0]
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_COMP_TriggerCallback+0x7c>)
 8001a3a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <HAL_COMP_TriggerCallback+0x7c>)
 8001a46:	f7ff fead 	bl	80017a4 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_COMP_TriggerCallback+0x7c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000ea0 	.word	0x20000ea0
 8001a60:	200000c8 	.word	0x200000c8
 8001a64:	200007b8 	.word	0x200007b8

08001a68 <HAL_TSC_ConvCpltCallback>:

void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef* htsc){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	  /*##-5- Discharge the touch-sensing IOs ####################################*/
	  HAL_TSC_IODischarge(htsc, ENABLE);
 8001a70:	2101      	movs	r1, #1
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f005 fe84 	bl	8007780 <HAL_TSC_IODischarge>
	  /* Note: a delay can be added here */

	  uint32_t uhTSCAcquisitionValue;
	  TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8001a78:	2101      	movs	r1, #1
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f005 fe09 	bl	8007692 <HAL_TSC_GroupGetStatus>
 8001a80:	4603      	mov	r3, r0
 8001a82:	75bb      	strb	r3, [r7, #22]
	  uint32_t cur_time;
	  /*##-6- Check if the acquisition is correct (no max count) #################*/
	  if (status == TSC_GROUP_COMPLETED)
 8001a84:	7dbb      	ldrb	r3, [r7, #22]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d12d      	bne.n	8001ae6 <HAL_TSC_ConvCpltCallback+0x7e>
	  {
	    /*##-7- Read the acquisition value #######################################*/
	    uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f005 fe22 	bl	80076d6 <HAL_TSC_GroupGetValue>
 8001a92:	6138      	str	r0, [r7, #16]
	    uint8_t touch;
	    if(cap_sensor == 0){
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_TSC_ConvCpltCallback+0xcc>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_TSC_ConvCpltCallback+0x48>
	    	touch = (uhTSCAcquisitionValue >= TSCx_TS1_MINTHRESHOLD) && (uhTSCAcquisitionValue <= TSCx_TS1_MAXTHRESHOLD);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	bf94      	ite	ls
 8001aa6:	2301      	movls	r3, #1
 8001aa8:	2300      	movhi	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	75fb      	strb	r3, [r7, #23]
 8001aae:	e008      	b.n	8001ac2 <HAL_TSC_ConvCpltCallback+0x5a>
	    }
	    else{
	    	touch = (uhTSCAcquisitionValue >= TSCx_TS2_MINTHRESHOLD) && (uhTSCAcquisitionValue <= TSCx_TS2_MAXTHRESHOLD);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f641 0206 	movw	r2, #6150	; 0x1806
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	bf94      	ite	ls
 8001aba:	2301      	movls	r3, #1
 8001abc:	2300      	movhi	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	75fb      	strb	r3, [r7, #23]
	    }

	    cur_time = HAL_GetTick();
 8001ac2:	f000 fe59 	bl	8002778 <HAL_GetTick>
 8001ac6:	60f8      	str	r0, [r7, #12]
	    debounce(&dbs[cap_sensor], touch, cur_time);
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_TSC_ConvCpltCallback+0xcc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <HAL_TSC_ConvCpltCallback+0xd0>)
 8001ad0:	4413      	add	r3, r2
 8001ad2:	7df9      	ldrb	r1, [r7, #23]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd05 	bl	80024e6 <debounce>
	    process_touches(&touch_detector, dbs, cur_time);
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4916      	ldr	r1, [pc, #88]	; (8001b38 <HAL_TSC_ConvCpltCallback+0xd0>)
 8001ae0:	4816      	ldr	r0, [pc, #88]	; (8001b3c <HAL_TSC_ConvCpltCallback+0xd4>)
 8001ae2:	f000 fbc9 	bl	8002278 <process_touches>
	  }

	  //Switches between the two channels to be acquired
	  if (cap_sensor == 0)
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_TSC_ConvCpltCallback+0xcc>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_TSC_ConvCpltCallback+0x94>
	  {
	    IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_TSC_ConvCpltCallback+0xd8>)
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	601a      	str	r2, [r3, #0]
	    cap_sensor = 1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_TSC_ConvCpltCallback+0xcc>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e005      	b.n	8001b08 <HAL_TSC_ConvCpltCallback+0xa0>
	  }
	  else
	  {
	    IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_TSC_ConvCpltCallback+0xd8>)
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	601a      	str	r2, [r3, #0]
	    cap_sensor = 0;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_TSC_ConvCpltCallback+0xcc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
	  }


	  if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK)
 8001b08:	490d      	ldr	r1, [pc, #52]	; (8001b40 <HAL_TSC_ConvCpltCallback+0xd8>)
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f005 fdf5 	bl	80076fa <HAL_TSC_IOConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_TSC_ConvCpltCallback+0xb2>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8001b16:	f000 f827 	bl	8001b68 <Error_Handler>
	  }

	  /*##-9- Re-start the acquisition process ###################################*/
	  if (HAL_TSC_Start_IT(htsc) != HAL_OK)
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f005 fd5c 	bl	80075d8 <HAL_TSC_Start_IT>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_TSC_ConvCpltCallback+0xc2>
	  {
	    /* Acquisition Error */
	    Error_Handler();
 8001b26:	f000 f81f 	bl	8001b68 <Error_Handler>
	  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200000ca 	.word	0x200000ca
 8001b38:	200000cc 	.word	0x200000cc
 8001b3c:	20000de0 	.word	0x20000de0
 8001b40:	20000dd4 	.word	0x20000dd4

08001b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b56:	f000 fdfd 	bl	8002754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40012c00 	.word	0x40012c00

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_RTC_Init+0x34>)
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <MX_RTC_Init+0x38>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <MX_RTC_Init+0x34>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_RTC_Init+0x34>)
 8001bba:	220f      	movs	r2, #15
 8001bbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <MX_RTC_Init+0x34>)
 8001bc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001bc4:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_RTC_Init+0x34>)
 8001bc8:	f004 fbf9 	bl	80063be <HAL_RTC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8001bd2:	f7ff ffc9 	bl	8001b68 <Error_Handler>
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000dfc 	.word	0x20000dfc
 8001be0:	40002800 	.word	0x40002800

08001be4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_RTC_MspInit+0x20>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bf6:	f7ff ffc5 	bl	8001b84 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40002800 	.word	0x40002800

08001c08 <LL_AHB3_GRP1_EnableClock>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001c3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c42:	f7ff ffe1 	bl	8001c08 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	210f      	movs	r1, #15
 8001c4a:	f06f 0001 	mvn.w	r0, #1
 8001c4e:	f001 fe63 	bl	8003918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	210f      	movs	r1, #15
 8001c56:	202c      	movs	r0, #44	; 0x2c
 8001c58:	f001 fe5e 	bl	8003918 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	210f      	movs	r1, #15
 8001c60:	202d      	movs	r0, #45	; 0x2d
 8001c62:	f001 fe59 	bl	8003918 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	2019      	movs	r0, #25
 8001cb2:	f001 fe31 	bl	8003918 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001cb6:	2019      	movs	r0, #25
 8001cb8:	f001 fe48 	bl	800394c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cc0:	f7ff ffd3 	bl	8001c6a <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cc4:	f107 0208 	add.w	r2, r7, #8
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fe68 	bl	80059a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cd4:	f003 fe50 	bl	8005978 <HAL_RCC_GetPCLK2Freq>
 8001cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <HAL_InitTick+0x8c>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_InitTick+0x90>)
 8001cea:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_InitTick+0x94>)
 8001cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_InitTick+0x90>)
 8001cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cf6:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_InitTick+0x90>)
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_InitTick+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_InitTick+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d08:	4808      	ldr	r0, [pc, #32]	; (8001d2c <HAL_InitTick+0x90>)
 8001d0a:	f004 fc46 	bl	800659a <HAL_TIM_Base_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d104      	bne.n	8001d1e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_InitTick+0x90>)
 8001d16:	f004 fc6b 	bl	80065f0 <HAL_TIM_Base_Start_IT>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	e000      	b.n	8001d20 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3730      	adds	r7, #48	; 0x30
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	20000e20 	.word	0x20000e20
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d6c:	2004      	movs	r0, #4
 8001d6e:	f002 f93d 	bl	8003fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <EXTI2_IRQHandler+0x1c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2104      	movs	r1, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fd8d 	bl	8007898 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000be0 	.word	0x20000be0

08001d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Channel1_IRQHandler+0x10>)
 8001d8e:	f001 fe93 	bl	8003ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000638 	.word	0x20000638

08001d9c <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <COMP_IRQHandler+0x10>)
 8001da2:	f001 fcc3 	bl	800372c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000bf8 	.word	0x20000bf8

08001db0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001db4:	2020      	movs	r0, #32
 8001db6:	f002 f919 	bl	8003fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001dc6:	f004 fc72 	bl	80066ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001dca:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001dcc:	f004 fc6f 	bl	80066ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000e20 	.word	0x20000e20
 8001dd8:	20000ea0 	.word	0x20000ea0

08001ddc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <I2C1_EV_IRQHandler+0x10>)
 8001de2:	f002 faa1 	bl	8004328 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000d88 	.word	0x20000d88

08001df0 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001df4:	f007 feb2 	bl	8009b5c <HW_IPCC_Tx_Handler>

  return;
 8001df8:	bf00      	nop
}
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001e00:	f007 fe52 	bl	8009aa8 <HW_IPCC_Rx_Handler>
  return;
 8001e04:	bf00      	nop
}
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TSC_IRQHandler+0x10>)
 8001e0e:	f005 fce7 	bl	80077e0 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000ee0 	.word	0x20000ee0

08001e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <SystemInit+0xa0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <SystemInit+0xa0>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <SystemInit+0xa0>)
 8001e2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <SystemInit+0xa4>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6c:	f023 0305 	bic.w	r3, r3, #5
 8001e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <SystemInit+0xa8>)
 8001e8e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <SystemInit+0xa8>)
 8001e96:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00
 8001ec0:	faf6fefb 	.word	0xfaf6fefb
 8001ec4:	22041000 	.word	0x22041000

08001ec8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <SystemCoreClockUpdate+0x130>)
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d867      	bhi.n	8001fc0 <SystemCoreClockUpdate+0xf8>
 8001ef0:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <SystemCoreClockUpdate+0x30>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f2d 	.word	0x08001f2d
 8001efc:	08001fc1 	.word	0x08001fc1
 8001f00:	08001fc1 	.word	0x08001fc1
 8001f04:	08001fc1 	.word	0x08001fc1
 8001f08:	08001f35 	.word	0x08001f35
 8001f0c:	08001fc1 	.word	0x08001fc1
 8001f10:	08001fc1 	.word	0x08001fc1
 8001f14:	08001fc1 	.word	0x08001fc1
 8001f18:	08001f3d 	.word	0x08001f3d
 8001f1c:	08001fc1 	.word	0x08001fc1
 8001f20:	08001fc1 	.word	0x08001fc1
 8001f24:	08001fc1 	.word	0x08001fc1
 8001f28:	08001f45 	.word	0x08001f45
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001f2c:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <SystemCoreClockUpdate+0x134>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6013      	str	r3, [r2, #0]
      break;
 8001f32:	e049      	b.n	8001fc8 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <SystemCoreClockUpdate+0x134>)
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <SystemCoreClockUpdate+0x138>)
 8001f38:	601a      	str	r2, [r3, #0]
      break;
 8001f3a:	e045      	b.n	8001fc8 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <SystemCoreClockUpdate+0x134>)
 8001f3e:	4a31      	ldr	r2, [pc, #196]	; (8002004 <SystemCoreClockUpdate+0x13c>)
 8001f40:	601a      	str	r2, [r3, #0]
      break;
 8001f42:	e041      	b.n	8001fc8 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d105      	bne.n	8001f72 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <SystemCoreClockUpdate+0x138>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e00d      	b.n	8001f8e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d105      	bne.n	8001f84 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <SystemCoreClockUpdate+0x13c>)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e004      	b.n	8001f8e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fb02 f303 	mul.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0f5b      	lsrs	r3, r3, #29
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	3301      	adds	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <SystemCoreClockUpdate+0x134>)
 8001fbc:	6013      	str	r3, [r2, #0]
      break;
 8001fbe:	e003      	b.n	8001fc8 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <SystemCoreClockUpdate+0x134>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6013      	str	r3, [r2, #0]
      break;
 8001fc6:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <SystemCoreClockUpdate+0x140>)
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <SystemCoreClockUpdate+0x134>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <SystemCoreClockUpdate+0x134>)
 8001fe8:	6013      	str	r3, [r2, #0]

}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	0800b1a8 	.word	0x0800b1a8
 8001ffc:	20000008 	.word	0x20000008
 8002000:	00f42400 	.word	0x00f42400
 8002004:	01e84800 	.word	0x01e84800
 8002008:	0800b148 	.word	0x0800b148

0800200c <LL_AHB2_GRP1_EnableClock>:
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800201a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4313      	orrs	r3, r2
 8002022:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002030:	68fb      	ldr	r3, [r7, #12]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_APB1_GRP1_EnableClock>:
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800204c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_APB2_GRP1_EnableClock>:
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800207e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	; 0x38
 80020a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c4:	463b      	mov	r3, r7
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <MX_TIM2_Init+0xe8>)
 80020d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <MX_TIM2_Init+0xe8>)
 80020e0:	f240 227f 	movw	r2, #639	; 0x27f
 80020e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <MX_TIM2_Init+0xe8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <MX_TIM2_Init+0xe8>)
 80020ee:	2209      	movs	r2, #9
 80020f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <MX_TIM2_Init+0xe8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <MX_TIM2_Init+0xe8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020fe:	4823      	ldr	r0, [pc, #140]	; (800218c <MX_TIM2_Init+0xe8>)
 8002100:	f004 fa4b 	bl	800659a <HAL_TIM_Base_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800210a:	f7ff fd2d 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800210e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002118:	4619      	mov	r1, r3
 800211a:	481c      	ldr	r0, [pc, #112]	; (800218c <MX_TIM2_Init+0xe8>)
 800211c:	f004 fcfe 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002126:	f7ff fd1f 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800212a:	4818      	ldr	r0, [pc, #96]	; (800218c <MX_TIM2_Init+0xe8>)
 800212c:	f004 fa8a 	bl	8006644 <HAL_TIM_PWM_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002136:	f7ff fd17 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800213a:	2320      	movs	r3, #32
 800213c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	4810      	ldr	r0, [pc, #64]	; (800218c <MX_TIM2_Init+0xe8>)
 800214a:	f005 f947 	bl	80073dc <HAL_TIMEx_MasterConfigSynchronization>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002154:	f7ff fd08 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002158:	2360      	movs	r3, #96	; 0x60
 800215a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 800215c:	2309      	movs	r3, #9
 800215e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	2204      	movs	r2, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <MX_TIM2_Init+0xe8>)
 8002170:	f004 fbbc 	bl	80068ec <HAL_TIM_PWM_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800217a:	f7ff fcf5 	bl	8001b68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <MX_TIM2_Init+0xe8>)
 8002180:	f000 f850 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8002184:	bf00      	nop
 8002186:	3738      	adds	r7, #56	; 0x38
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000e60 	.word	0x20000e60

08002190 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <MX_TIM16_Init+0x44>)
 8002196:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <MX_TIM16_Init+0x48>)
 8002198:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_TIM16_Init+0x44>)
 800219c:	221f      	movs	r2, #31
 800219e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_TIM16_Init+0x44>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_TIM16_Init+0x44>)
 80021a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_TIM16_Init+0x44>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <MX_TIM16_Init+0x44>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_TIM16_Init+0x44>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021c0:	4804      	ldr	r0, [pc, #16]	; (80021d4 <MX_TIM16_Init+0x44>)
 80021c2:	f004 f9ea 	bl	800659a <HAL_TIM_Base_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80021cc:	f7ff fccc 	bl	8001b68 <Error_Handler>
  }

}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000ea0 	.word	0x20000ea0
 80021d8:	40014400 	.word	0x40014400

080021dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d103      	bne.n	80021f6 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff ff25 	bl	800203e <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80021f4:	e010      	b.n	8002218 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_TIM_Base_MspInit+0x44>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d10b      	bne.n	8002218 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002200:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002204:	f7ff ff34 	bl	8002070 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2019      	movs	r0, #25
 800220e:	f001 fb83 	bl	8003918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002212:	2019      	movs	r0, #25
 8002214:	f001 fb9a 	bl	800394c <HAL_NVIC_EnableIRQ>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40014400 	.word	0x40014400

08002224 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d112      	bne.n	800226c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2002      	movs	r0, #2
 8002248:	f7ff fee0 	bl	800200c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800224c:	2308      	movs	r3, #8
 800224e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <HAL_TIM_MspPostInit+0x50>)
 8002268:	f001 fd38 	bl	8003cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	48000400 	.word	0x48000400

08002278 <process_touches>:
#include "touch_detector.h"

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time){
 8002278:	b480      	push	{r7}
 800227a:	b08f      	sub	sp, #60	; 0x3c
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
    if(self->touch_state == Idle){
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	7e1b      	ldrb	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11d      	bne.n	80022c8 <process_touches+0x50>
    	if(dbs[0].clean_out){
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	795b      	ldrb	r3, [r3, #5]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d009      	beq.n	80022a8 <process_touches+0x30>
    		self->touch_state = OnePressed;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	761a      	strb	r2, [r3, #24]
    		self->touches[0].cap_idx = 0;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
    		self->touches[0].start_t = cur_time;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	605a      	str	r2, [r3, #4]
    	    	action = Tap;
    	    }
    	    self->touch_state = Idle;
    	}
    }
}
 80022a6:	e118      	b.n	80024da <process_touches+0x262>
    	else if(dbs[1].clean_out){
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3308      	adds	r3, #8
 80022ac:	795b      	ldrb	r3, [r3, #5]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8113 	beq.w	80024da <process_touches+0x262>
    		self->touch_state = OnePressed;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	761a      	strb	r2, [r3, #24]
    		self->touches[0].cap_idx = 1;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    		self->touches[0].start_t = cur_time;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	605a      	str	r2, [r3, #4]
}
 80022c6:	e108      	b.n	80024da <process_touches+0x262>
    else if(self->touch_state == OnePressed){
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d127      	bne.n	8002320 <process_touches+0xa8>
    	if(dbs[1 - self->touches[0].cap_idx].clean_out){
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f1c3 0301 	rsb	r3, r3, #1
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	795b      	ldrb	r3, [r3, #5]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <process_touches+0x88>
    		self->touch_state = TwoPressed;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2202      	movs	r2, #2
 80022e8:	761a      	strb	r2, [r3, #24]
    		self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	f1c3 0301 	rsb	r3, r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	731a      	strb	r2, [r3, #12]
    		self->touches[1].start_t = cur_time;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]
}
 80022fe:	e0ec      	b.n	80024da <process_touches+0x262>
    	else if(!dbs[self->touches[0].cap_idx].clean_out){
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	4413      	add	r3, r2
 800230a:	795b      	ldrb	r3, [r3, #5]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f040 80e4 	bne.w	80024da <process_touches+0x262>
    		self->touch_state = OneReleasedNoPressed;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2203      	movs	r2, #3
 8002316:	761a      	strb	r2, [r3, #24]
    		self->touches[0].end_t = cur_time;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	609a      	str	r2, [r3, #8]
}
 800231e:	e0dc      	b.n	80024da <process_touches+0x262>
    else if(self->touch_state == TwoPressed){
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	7e1b      	ldrb	r3, [r3, #24]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d11e      	bne.n	8002366 <process_touches+0xee>
    	if(!dbs[self->touches[0].cap_idx].clean_out){
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	795b      	ldrb	r3, [r3, #5]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <process_touches+0xce>
    		self->touch_state = FirstReleasedSecondPressed;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2204      	movs	r2, #4
 800233c:	761a      	strb	r2, [r3, #24]
    		self->touches[0].end_t = cur_time;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	609a      	str	r2, [r3, #8]
}
 8002344:	e0c9      	b.n	80024da <process_touches+0x262>
    	else if(!dbs[self->touches[1].cap_idx].clean_out){
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	7b1b      	ldrb	r3, [r3, #12]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	4413      	add	r3, r2
 8002350:	795b      	ldrb	r3, [r3, #5]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 80c1 	bne.w	80024da <process_touches+0x262>
    		self->touch_state = SecondReleasedFirstPressed;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2205      	movs	r2, #5
 800235c:	761a      	strb	r2, [r3, #24]
    		self->touches[1].end_t = cur_time;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	615a      	str	r2, [r3, #20]
}
 8002364:	e0b9      	b.n	80024da <process_touches+0x262>
    else if(self->touch_state == OneReleasedNoPressed){
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	7e1b      	ldrb	r3, [r3, #24]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d130      	bne.n	80023d0 <process_touches+0x158>
    	if(dbs[1 - self->touches[0].cap_idx].clean_out){
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f1c3 0301 	rsb	r3, r3, #1
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	4413      	add	r3, r2
 800237c:	795b      	ldrb	r3, [r3, #5]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <process_touches+0x126>
    		self->touch_state = FirstReleasedSecondPressed;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2204      	movs	r2, #4
 8002386:	761a      	strb	r2, [r3, #24]
    		self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f1c3 0301 	rsb	r3, r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	731a      	strb	r2, [r3, #12]
    		self->touches[1].start_t = cur_time;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	611a      	str	r2, [r3, #16]
}
 800239c:	e09d      	b.n	80024da <process_touches+0x262>
    	else if(cur_time - self->touches[0].end_t > MIN_SWIPE_GAP){
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b0a      	cmp	r3, #10
 80023a8:	f240 8097 	bls.w	80024da <process_touches+0x262>
    		uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	61bb      	str	r3, [r7, #24]
			if(TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD){
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b28      	cmp	r3, #40	; 0x28
 80023bc:	d904      	bls.n	80023c8 <process_touches+0x150>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2bc7      	cmp	r3, #199	; 0xc7
 80023c2:	d801      	bhi.n	80023c8 <process_touches+0x150>
				enum TouchType action = Tap;
 80023c4:	2303      	movs	r3, #3
 80023c6:	75fb      	strb	r3, [r7, #23]
			self->touch_state = Idle;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	761a      	strb	r2, [r3, #24]
}
 80023ce:	e084      	b.n	80024da <process_touches+0x262>
    else if(self->touch_state == FirstReleasedSecondPressed){
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	7e1b      	ldrb	r3, [r3, #24]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d147      	bne.n	8002468 <process_touches+0x1f0>
    	if(!dbs[self->touches[1].cap_idx].clean_out){
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	7b1b      	ldrb	r3, [r3, #12]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	795b      	ldrb	r3, [r3, #5]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d178      	bne.n	80024da <process_touches+0x262>
    		self->touch_state = Idle;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	761a      	strb	r2, [r3, #24]
    		self->touches[1].end_t = cur_time;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	615a      	str	r2, [r3, #20]
    		enum TouchType action = None;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    		uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    		uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	623b      	str	r3, [r7, #32]
    		uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	61fb      	str	r3, [r7, #28]
    		if((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD) &&
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	2b28      	cmp	r3, #40	; 0x28
 8002422:	d80c      	bhi.n	800243e <process_touches+0x1c6>
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	2b28      	cmp	r3, #40	; 0x28
 8002428:	d809      	bhi.n	800243e <process_touches+0x1c6>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2b28      	cmp	r3, #40	; 0x28
 800242e:	d906      	bls.n	800243e <process_touches+0x1c6>
    				(TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)){
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2bc7      	cmp	r3, #199	; 0xc7
 8002434:	d803      	bhi.n	800243e <process_touches+0x1c6>
    			action = Tap;
 8002436:	2303      	movs	r3, #3
 8002438:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800243c:	e010      	b.n	8002460 <process_touches+0x1e8>
    		else if(touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD){
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	2b28      	cmp	r3, #40	; 0x28
 8002442:	d90d      	bls.n	8002460 <process_touches+0x1e8>
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b28      	cmp	r3, #40	; 0x28
 8002448:	d90a      	bls.n	8002460 <process_touches+0x1e8>
    			action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	b25a      	sxtb	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	7b1b      	ldrb	r3, [r3, #12]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	b25b      	sxtb	r3, r3
 800245c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    		self->touch_state = Idle;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	761a      	strb	r2, [r3, #24]
}
 8002466:	e038      	b.n	80024da <process_touches+0x262>
    else if(self->touch_state == SecondReleasedFirstPressed){
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	7e1b      	ldrb	r3, [r3, #24]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d134      	bne.n	80024da <process_touches+0x262>
    	if(!dbs[self->touches[0].cap_idx].clean_out){
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4413      	add	r3, r2
 800247a:	795b      	ldrb	r3, [r3, #5]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d12c      	bne.n	80024da <process_touches+0x262>
    	    self->touch_state = Idle;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	761a      	strb	r2, [r3, #24]
    	    self->touches[0].end_t = cur_time;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
    	    uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
    	    uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
    	    uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    enum TouchType action = None;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	    if((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD) &&
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b8:	2b28      	cmp	r3, #40	; 0x28
 80024ba:	d80b      	bhi.n	80024d4 <process_touches+0x25c>
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	2b28      	cmp	r3, #40	; 0x28
 80024c0:	d808      	bhi.n	80024d4 <process_touches+0x25c>
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	2b28      	cmp	r3, #40	; 0x28
 80024c6:	d905      	bls.n	80024d4 <process_touches+0x25c>
    	    		(TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)){
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2bc7      	cmp	r3, #199	; 0xc7
 80024cc:	d802      	bhi.n	80024d4 <process_touches+0x25c>
    	    	action = Tap;
 80024ce:	2303      	movs	r3, #3
 80024d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	    self->touch_state = Idle;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	761a      	strb	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	373c      	adds	r7, #60	; 0x3c
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time){
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	460b      	mov	r3, r1
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	72fb      	strb	r3, [r7, #11]
	if(noisy_in != self->input){
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	791b      	ldrb	r3, [r3, #4]
 80024f8:	7afa      	ldrb	r2, [r7, #11]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d006      	beq.n	800250c <debounce+0x26>
		self->input = noisy_in;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	7afa      	ldrb	r2, [r7, #11]
 8002502:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]
	}
	else if(cur_time - self->start_t > DEBOUNCE_TIME){
		self->clean_out = self->input;
	}
}
 800250a:	e009      	b.n	8002520 <debounce+0x3a>
	else if(cur_time - self->start_t > DEBOUNCE_TIME){
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b1e      	cmp	r3, #30
 8002516:	d903      	bls.n	8002520 <debounce+0x3a>
		self->clean_out = self->input;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	791a      	ldrb	r2, [r3, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	715a      	strb	r2, [r3, #5]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_AHB1_GRP1_EnableClock>:
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800253a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4313      	orrs	r3, r2
 8002542:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4013      	ands	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002550:	68fb      	ldr	r3, [r7, #12]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_AHB2_GRP1_EnableClock>:
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800256c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4313      	orrs	r3, r2
 8002574:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4013      	ands	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <MX_TSC_Init+0x7c>)
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <MX_TSC_Init+0x80>)
 8002598:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_TSC_Init+0x7c>)
 800259c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80025a0:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_TSC_Init+0x7c>)
 80025a4:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80025a8:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_TSC_Init+0x7c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <MX_TSC_Init+0x7c>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_TSC_Init+0x7c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <MX_TSC_Init+0x7c>)
 80025be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c2:	619a      	str	r2, [r3, #24]
	htsc.Init.MaxCountValue = TSC_MCV_8191;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_TSC_Init+0x7c>)
 80025c6:	22a0      	movs	r2, #160	; 0xa0
 80025c8:	61da      	str	r2, [r3, #28]
//	htsc.Init.MaxCountValue = TSC_MCV_16383;
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_TSC_Init+0x7c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_TSC_Init+0x7c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <MX_TSC_Init+0x7c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <MX_TSC_Init+0x7c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_TSC_Init+0x7c>)
 80025e6:	22c0      	movs	r2, #192	; 0xc0
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_TSC_Init+0x7c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_TSC_Init+0x7c>)
 80025f2:	2210      	movs	r2, #16
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <MX_TSC_Init+0x7c>)
 80025f8:	f004 ff6e 	bl	80074d8 <HAL_TSC_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8002602:	f7ff fab1 	bl	8001b68 <Error_Handler>
  }

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000ee0 	.word	0x20000ee0
 8002610:	40024000 	.word	0x40024000

08002614 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_TSC_MspInit+0x88>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d12e      	bne.n	8002694 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8002636:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800263a:	f7ff ff77 	bl	800252c <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	2002      	movs	r0, #2
 8002640:	f7ff ff8d 	bl	800255e <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002644:	2310      	movs	r3, #16
 8002646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002648:	2312      	movs	r3, #18
 800264a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002654:	2309      	movs	r3, #9
 8002656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4619      	mov	r1, r3
 800265e:	4810      	ldr	r0, [pc, #64]	; (80026a0 <HAL_TSC_MspInit+0x8c>)
 8002660:	f001 fb3c 	bl	8003cdc <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002664:	23c0      	movs	r3, #192	; 0xc0
 8002666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002674:	2309      	movs	r3, #9
 8002676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	4619      	mov	r1, r3
 800267e:	4808      	ldr	r0, [pc, #32]	; (80026a0 <HAL_TSC_MspInit+0x8c>)
 8002680:	f001 fb2c 	bl	8003cdc <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	2027      	movs	r0, #39	; 0x27
 800268a:	f001 f945 	bl	8003918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 800268e:	2027      	movs	r0, #39	; 0x27
 8002690:	f001 f95c 	bl	800394c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8002694:	bf00      	nop
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40024000 	.word	0x40024000
 80026a0:	48000400 	.word	0x48000400

080026a4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80026a4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a8:	3304      	adds	r3, #4

080026aa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026aa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80026ae:	d3f9      	bcc.n	80026a4 <CopyDataInit>
  bx lr
 80026b0:	4770      	bx	lr

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80026b2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80026b4:	3004      	adds	r0, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80026b6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>
  bx lr
 80026ba:	4770      	bx	lr

080026bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80026be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <LoopForever+0x8>)
 80026c2:	490d      	ldr	r1, [pc, #52]	; (80026f8 <LoopForever+0xc>)
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <LoopForever+0x10>)
 80026c6:	2300      	movs	r3, #0
 80026c8:	f7ff ffef 	bl	80026aa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80026cc:	480c      	ldr	r0, [pc, #48]	; (8002700 <LoopForever+0x14>)
 80026ce:	490d      	ldr	r1, [pc, #52]	; (8002704 <LoopForever+0x18>)
 80026d0:	2300      	movs	r3, #0
 80026d2:	f7ff fff0 	bl	80026b6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80026d6:	480c      	ldr	r0, [pc, #48]	; (8002708 <LoopForever+0x1c>)
 80026d8:	490c      	ldr	r1, [pc, #48]	; (800270c <LoopForever+0x20>)
 80026da:	2300      	movs	r3, #0
 80026dc:	f7ff ffeb 	bl	80026b6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026e0:	f7ff fb9c 	bl	8001e1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80026e4:	f007 fb40 	bl	8009d68 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80026e8:	f7ff f89a 	bl	8001820 <main>

080026ec <LoopForever>:

LoopForever:
  b LoopForever
 80026ec:	e7fe      	b.n	80026ec <LoopForever>
 80026ee:	0000      	.short	0x0000
  ldr   r0, =_estack
 80026f0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000080 	.word	0x20000080
 80026fc:	0800b298 	.word	0x0800b298
  INIT_BSS _sbss, _ebss
 8002700:	20000080 	.word	0x20000080
 8002704:	20000f28 	.word	0x20000f28
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002708:	200300b8 	.word	0x200300b8
 800270c:	200300d8 	.word	0x200300d8

08002710 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC1_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_Init+0x3c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <HAL_Init+0x3c>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800272a:	2003      	movs	r0, #3
 800272c:	f001 f8e9 	bl	8003902 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002730:	2000      	movs	r0, #0
 8002732:	f7ff fab3 	bl	8001c9c <HAL_InitTick>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	e001      	b.n	8002746 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002742:	f7ff fa7a 	bl	8001c3a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002746:	79fb      	ldrb	r3, [r7, #7]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	58004000 	.word	0x58004000

08002754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_IncTick+0x1c>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_IncTick+0x20>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4413      	add	r3, r2
 8002762:	4a03      	ldr	r2, [pc, #12]	; (8002770 <HAL_IncTick+0x1c>)
 8002764:	6013      	str	r3, [r2, #0]
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	20000f24 	.word	0x20000f24
 8002774:	20000010 	.word	0x20000010

08002778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return uwTick;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_GetTick+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000f24 	.word	0x20000f24

08002790 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_GetTickPrio+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff ffe2 	bl	8002778 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d004      	beq.n	80027cc <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_Delay+0x40>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80027cc:	bf00      	nop
 80027ce:	f7ff ffd3 	bl	8002778 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d8f7      	bhi.n	80027ce <HAL_Delay+0x26>
    {
    }
  }
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000010 	.word	0x20000010

080027ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002844:	b490      	push	{r4, r7}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3360      	adds	r3, #96	; 0x60
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <LL_ADC_SetOffset+0x40>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	4313      	orrs	r3, r2
 8002872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002876:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bc90      	pop	{r4, r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	03fff000 	.word	0x03fff000

08002888 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002888:	b490      	push	{r4, r7}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3360      	adds	r3, #96	; 0x60
 8002896:	461a      	mov	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc90      	pop	{r4, r7}
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028b0:	b490      	push	{r4, r7}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3360      	adds	r3, #96	; 0x60
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc90      	pop	{r4, r7}
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028e0:	b490      	push	{r4, r7}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3330      	adds	r3, #48	; 0x30
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	4413      	add	r3, r2
 80028fe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002900:	6822      	ldr	r2, [r4, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	211f      	movs	r1, #31
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	401a      	ands	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 011f 	and.w	r1, r3, #31
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bc90      	pop	{r4, r7}
 8002930:	4770      	bx	lr

08002932 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002932:	b490      	push	{r4, r7}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3314      	adds	r3, #20
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	0e5b      	lsrs	r3, r3, #25
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	4413      	add	r3, r2
 8002950:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	0d1b      	lsrs	r3, r3, #20
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2107      	movs	r1, #7
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	401a      	ands	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0d1b      	lsrs	r3, r3, #20
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bc90      	pop	{r4, r7}
 8002980:	4770      	bx	lr
	...

08002984 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0318 	and.w	r3, r3, #24
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029a8:	40d9      	lsrs	r1, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	400b      	ands	r3, r1
 80029ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	0007ffff 	.word	0x0007ffff

080029cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6093      	str	r3, [r2, #8]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <LL_ADC_IsEnabled+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_ADC_IsEnabled+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d101      	bne.n	8002acc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e12a      	b.n	8002d4c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7fe f883 	bl	8000c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff67 	bl	80029f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff4d 	bl	80029cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff82 	bl	8002a40 <LL_ADC_IsInternalRegulatorEnabled>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d113      	bne.n	8002b6a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff66 	bl	8002a18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b4c:	4b81      	ldr	r3, [pc, #516]	; (8002d54 <HAL_ADC_Init+0x278>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	4a81      	ldr	r2, [pc, #516]	; (8002d58 <HAL_ADC_Init+0x27c>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff66 	bl	8002a40 <LL_ADC_IsInternalRegulatorEnabled>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff77 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 80c5 	bne.w	8002d3a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 80c1 	bne.w	8002d3a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bc0:	f043 0202 	orr.w	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff4b 	bl	8002a68 <LL_ADC_IsEnabled>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bd8:	4860      	ldr	r0, [pc, #384]	; (8002d5c <HAL_ADC_Init+0x280>)
 8002bda:	f7ff ff45 	bl	8002a68 <LL_ADC_IsEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4619      	mov	r1, r3
 8002bea:	485d      	ldr	r0, [pc, #372]	; (8002d60 <HAL_ADC_Init+0x284>)
 8002bec:	f7ff fdfe 	bl	80027ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7e5b      	ldrb	r3, [r3, #25]
 8002bf4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bfa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	3b01      	subs	r3, #1
 8002c24:	045b      	lsls	r3, r3, #17
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_ADC_Init+0x288>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff14 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002c66:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff21 	bl	8002ab4 <LL_ADC_INJ_IsConversionOngoing>
 8002c72:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d13d      	bne.n	8002cf6 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d13a      	bne.n	8002cf6 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c84:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c8c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9c:	f023 0302 	bic.w	r3, r3, #2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	69b9      	ldr	r1, [r7, #24]
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d118      	bne.n	8002ce6 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cbe:	f023 0304 	bic.w	r3, r3, #4
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	611a      	str	r2, [r3, #16]
 8002ce4:	e007      	b.n	8002cf6 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10c      	bne.n	8002d18 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	f023 010f 	bic.w	r1, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
 8002d16:	e007      	b.n	8002d28 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020f 	bic.w	r2, r2, #15
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f023 0303 	bic.w	r3, r3, #3
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
 8002d38:	e007      	b.n	8002d4a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000008 	.word	0x20000008
 8002d58:	053e2d63 	.word	0x053e2d63
 8002d5c:	50040000 	.word	0x50040000
 8002d60:	50040300 	.word	0x50040300
 8002d64:	fff0c007 	.word	0xfff0c007

08002d68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0a6      	sub	sp, #152	; 0x98
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x22>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e31e      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x660>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fe79 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8303 	bne.w	80033aa <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f7ff fd95 	bl	80028e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fe67 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002dc0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fe73 	bl	8002ab4 <LL_ADC_INJ_IsConversionOngoing>
 8002dce:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f040 8148 	bne.w	800306c <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 8143 	bne.w	800306c <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7ff fd9d 	bl	8002932 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	08db      	lsrs	r3, r3, #3
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d00a      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6919      	ldr	r1, [r3, #16]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e2a:	f7ff fd0b 	bl	8002844 <LL_ADC_SetOffset>
 8002e2e:	e11d      	b.n	800306c <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fd26 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0xf4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fd1b 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 021f 	and.w	r2, r3, #31
 8002e5a:	e012      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x11a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fd10 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x132>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	e00a      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x148>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d106      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fcf7 	bl	80028b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fcdd 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x186>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fcd2 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	e010      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x1a8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fcc7 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1c0>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	e00a      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x1d6>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d106      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fcb0 	bl	80028b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2102      	movs	r1, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fc96 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x214>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fc8b 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	f003 021f 	and.w	r2, r3, #31
 8002f7a:	e010      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x236>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2102      	movs	r1, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fc80 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x24e>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	0e9b      	lsrs	r3, r3, #26
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	e00a      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x264>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d106      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fc69 	bl	80028b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2103      	movs	r1, #3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fc4f 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_ADC_ConfigChannel+0x2a2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2103      	movs	r1, #3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fc44 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003000:	4603      	mov	r3, r0
 8003002:	0e9b      	lsrs	r3, r3, #26
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	e010      	b.n	800302c <HAL_ADC_ConfigChannel+0x2c4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2103      	movs	r1, #3
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fc39 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x2dc>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	e00a      	b.n	800305a <HAL_ADC_ConfigChannel+0x2f2>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	429a      	cmp	r2, r3
 800305c:	d106      	bne.n	800306c <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	2103      	movs	r1, #3
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fc22 	bl	80028b0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fcf9 	bl	8002a68 <LL_ADC_IsEnabled>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 819f 	bne.w	80033bc <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	461a      	mov	r2, r3
 800308c:	f7ff fc7a 	bl	8002984 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4aab      	ldr	r2, [pc, #684]	; (8003344 <HAL_ADC_ConfigChannel+0x5dc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	f040 80fd 	bne.w	8003296 <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x35c>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	3301      	adds	r3, #1
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2b09      	cmp	r3, #9
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e012      	b.n	80030ea <HAL_ADC_ConfigChannel+0x382>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d064      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_ADC_ConfigChannel+0x3a2>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	3301      	adds	r3, #1
 8003102:	069b      	lsls	r3, r3, #26
 8003104:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003108:	e00e      	b.n	8003128 <HAL_ADC_ConfigChannel+0x3c0>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3301      	adds	r3, #1
 8003122:	069b      	lsls	r3, r3, #26
 8003124:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x3e0>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	3301      	adds	r3, #1
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2101      	movs	r1, #1
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	e010      	b.n	800316a <HAL_ADC_ConfigChannel+0x402>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	ea42 0103 	orr.w	r1, r2, r3
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x428>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	3301      	adds	r3, #1
 8003182:	f003 021f 	and.w	r2, r3, #31
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	051b      	lsls	r3, r3, #20
 800318e:	e011      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x44c>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b4:	430b      	orrs	r3, r1
 80031b6:	e069      	b.n	800328c <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x46c>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	3301      	adds	r3, #1
 80031cc:	069b      	lsls	r3, r3, #26
 80031ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d2:	e00e      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x48a>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	61fb      	str	r3, [r7, #28]
  return result;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x4aa>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	3301      	adds	r3, #1
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	e010      	b.n	8003234 <HAL_ADC_ConfigChannel+0x4cc>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	617b      	str	r3, [r7, #20]
  return result;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	ea42 0103 	orr.w	r1, r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x4f8>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0e9b      	lsrs	r3, r3, #26
 800324a:	3301      	adds	r3, #1
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	3b1e      	subs	r3, #30
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800325e:	e014      	b.n	800328a <HAL_ADC_ConfigChannel+0x522>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	60fb      	str	r3, [r7, #12]
  return result;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	3b1e      	subs	r3, #30
 8003284:	051b      	lsls	r3, r3, #20
 8003286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800328a:	430b      	orrs	r3, r1
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	4619      	mov	r1, r3
 8003292:	f7ff fb4e 	bl	8002932 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_ADC_ConfigChannel+0x5e0>)
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 808c 	beq.w	80033bc <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032a4:	4829      	ldr	r0, [pc, #164]	; (800334c <HAL_ADC_ConfigChannel+0x5e4>)
 80032a6:	f7ff fabf 	bl	8002828 <LL_ADC_GetCommonPathInternalCh>
 80032aa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ae:	4828      	ldr	r0, [pc, #160]	; (8003350 <HAL_ADC_ConfigChannel+0x5e8>)
 80032b0:	f7ff fbda 	bl	8002a68 <LL_ADC_IsEnabled>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d16d      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_ADC_ConfigChannel+0x5ec>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d126      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x5aa>
 80032c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d120      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_ADC_ConfigChannel+0x5e8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d170      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80032da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032e2:	4619      	mov	r1, r3
 80032e4:	4819      	ldr	r0, [pc, #100]	; (800334c <HAL_ADC_ConfigChannel+0x5e4>)
 80032e6:	f7ff fa8c 	bl	8002802 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032ea:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_ADC_ConfigChannel+0x5f0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <HAL_ADC_ConfigChannel+0x5f4>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	099a      	lsrs	r2, r3, #6
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8003302:	e002      	b.n	800330a <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3b01      	subs	r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003310:	e054      	b.n	80033bc <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_ADC_ConfigChannel+0x5f8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d123      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x5fc>
 800331c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d11d      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a08      	ldr	r2, [pc, #32]	; (8003350 <HAL_ADC_ConfigChannel+0x5e8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d144      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	4619      	mov	r1, r3
 800333c:	4803      	ldr	r0, [pc, #12]	; (800334c <HAL_ADC_ConfigChannel+0x5e4>)
 800333e:	f7ff fa60 	bl	8002802 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003342:	e03b      	b.n	80033bc <HAL_ADC_ConfigChannel+0x654>
 8003344:	407f0000 	.word	0x407f0000
 8003348:	80080000 	.word	0x80080000
 800334c:	50040300 	.word	0x50040300
 8003350:	50040000 	.word	0x50040000
 8003354:	c7520000 	.word	0xc7520000
 8003358:	20000008 	.word	0x20000008
 800335c:	053e2d63 	.word	0x053e2d63
 8003360:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_ADC_ConfigChannel+0x668>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d126      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x654>
 800336e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d120      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_ADC_ConfigChannel+0x66c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d11b      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800338c:	4619      	mov	r1, r3
 800338e:	4812      	ldr	r0, [pc, #72]	; (80033d8 <HAL_ADC_ConfigChannel+0x670>)
 8003390:	f7ff fa37 	bl	8002802 <LL_ADC_SetCommonPathInternalCh>
 8003394:	e012      	b.n	80033bc <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80033a8:	e008      	b.n	80033bc <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3798      	adds	r7, #152	; 0x98
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	80000001 	.word	0x80000001
 80033d4:	50040000 	.word	0x50040000
 80033d8:	50040300 	.word	0x50040300

080033dc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <LL_EXTI_EnableIT_0_31+0x24>)
 80033e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80033ea:	4905      	ldr	r1, [pc, #20]	; (8003400 <LL_EXTI_EnableIT_0_31+0x24>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	58000800 	.word	0x58000800

08003404 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <LL_EXTI_DisableIT_0_31+0x28>)
 800340e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	43db      	mvns	r3, r3
 8003416:	4905      	ldr	r1, [pc, #20]	; (800342c <LL_EXTI_DisableIT_0_31+0x28>)
 8003418:	4013      	ands	r3, r2
 800341a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	58000800 	.word	0x58000800

08003430 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <LL_EXTI_EnableEvent_0_31+0x24>)
 800343a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800343e:	4905      	ldr	r1, [pc, #20]	; (8003454 <LL_EXTI_EnableEvent_0_31+0x24>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	58000800 	.word	0x58000800

08003458 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <LL_EXTI_DisableEvent_0_31+0x28>)
 8003462:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	43db      	mvns	r3, r3
 800346a:	4905      	ldr	r1, [pc, #20]	; (8003480 <LL_EXTI_DisableEvent_0_31+0x28>)
 800346c:	4013      	ands	r3, r2
 800346e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	58000800 	.word	0x58000800

08003484 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4904      	ldr	r1, [pc, #16]	; (80034a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]

}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	58000800 	.word	0x58000800

080034a8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	4904      	ldr	r1, [pc, #16]	; (80034cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	58000800 	.word	0x58000800

080034d0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4904      	ldr	r1, [pc, #16]	; (80034f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	58000800 	.word	0x58000800

080034f4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	43db      	mvns	r3, r3
 8003504:	4904      	ldr	r1, [pc, #16]	; (8003518 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003506:	4013      	ands	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	58000800 	.word	0x58000800

0800351c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4013      	ands	r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d101      	bne.n	8003536 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	58000800 	.word	0x58000800

08003548 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60d3      	str	r3, [r2, #12]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	58000800 	.word	0x58000800

08003568 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e0c4      	b.n	800370e <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800358e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003592:	d102      	bne.n	800359a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e0b9      	b.n	800370e <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fd fbf9 	bl	8000dac <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b49      	ldr	r3, [pc, #292]	; (8003718 <HAL_COMP_Init+0x1b0>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003606:	d106      	bne.n	8003616 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003608:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_COMP_Init+0x1b4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a43      	ldr	r2, [pc, #268]	; (800371c <HAL_COMP_Init+0x1b4>)
 800360e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e005      	b.n	8003622 <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_COMP_Init+0x1b4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a40      	ldr	r2, [pc, #256]	; (800371c <HAL_COMP_Init+0x1b4>)
 800361c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003620:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d015      	beq.n	800365c <HAL_COMP_Init+0xf4>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d112      	bne.n	800365c <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003636:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <HAL_COMP_Init+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	4a39      	ldr	r2, [pc, #228]	; (8003724 <HAL_COMP_Init+0x1bc>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	099a      	lsrs	r2, r3, #6
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800364e:	e002      	b.n	8003656 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3b01      	subs	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f9      	bne.n	8003650 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_COMP_Init+0x1c0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d102      	bne.n	800366c <HAL_COMP_Init+0x104>
 8003666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800366a:	e001      	b.n	8003670 <HAL_COMP_Init+0x108>
 800366c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003670:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d037      	beq.n	80036ee <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800368a:	6938      	ldr	r0, [r7, #16]
 800368c:	f7ff fefa 	bl	8003484 <LL_EXTI_EnableRisingTrig_0_31>
 8003690:	e002      	b.n	8003698 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003692:	6938      	ldr	r0, [r7, #16]
 8003694:	f7ff ff08 	bl	80034a8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80036a4:	6938      	ldr	r0, [r7, #16]
 80036a6:	f7ff ff13 	bl	80034d0 <LL_EXTI_EnableFallingTrig_0_31>
 80036aa:	e002      	b.n	80036b2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80036ac:	6938      	ldr	r0, [r7, #16]
 80036ae:	f7ff ff21 	bl	80034f4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80036b2:	6938      	ldr	r0, [r7, #16]
 80036b4:	f7ff ff48 	bl	8003548 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80036c4:	6938      	ldr	r0, [r7, #16]
 80036c6:	f7ff feb3 	bl	8003430 <LL_EXTI_EnableEvent_0_31>
 80036ca:	e002      	b.n	80036d2 <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80036cc:	6938      	ldr	r0, [r7, #16]
 80036ce:	f7ff fec3 	bl	8003458 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80036de:	6938      	ldr	r0, [r7, #16]
 80036e0:	f7ff fe7c 	bl	80033dc <LL_EXTI_EnableIT_0_31>
 80036e4:	e009      	b.n	80036fa <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80036e6:	6938      	ldr	r0, [r7, #16]
 80036e8:	f7ff fe8c 	bl	8003404 <LL_EXTI_DisableIT_0_31>
 80036ec:	e005      	b.n	80036fa <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80036ee:	6938      	ldr	r0, [r7, #16]
 80036f0:	f7ff feb2 	bl	8003458 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80036f4:	6938      	ldr	r0, [r7, #16]
 80036f6:	f7ff fe85 	bl	8003404 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800370e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	f9207c03 	.word	0xf9207c03
 800371c:	40010204 	.word	0x40010204
 8003720:	20000008 	.word	0x20000008
 8003724:	053e2d63 	.word	0x053e2d63
 8003728:	40010200 	.word	0x40010200

0800372c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <HAL_COMP_IRQHandler+0x54>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d102      	bne.n	8003744 <HAL_COMP_IRQHandler+0x18>
 800373e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003742:	e001      	b.n	8003748 <HAL_COMP_IRQHandler+0x1c>
 8003744:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003748:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff fee6 	bl	800351c <LL_EXTI_IsActiveFlag_0_31>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_COMP_IRQHandler+0x58>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8003762:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003766:	f7ff feef 	bl	8003548 <LL_EXTI_ClearFlag_0_31>
 800376a:	e002      	b.n	8003772 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff feeb 	bl	8003548 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fe f938 	bl	80019e8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40010200 	.word	0x40010200
 8003784:	40010204 	.word	0x40010204

08003788 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0f9b      	lsrs	r3, r3, #30
 8003798:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037da:	4a04      	ldr	r2, [pc, #16]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	60d3      	str	r3, [r2, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <__NVIC_EnableIRQ+0x38>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff4c 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003926:	f7ff ff63 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 800392a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	6978      	ldr	r0, [r7, #20]
 8003932:	f7ff ffb3 	bl	800389c <NVIC_EncodePriority>
 8003936:	4602      	mov	r2, r0
 8003938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ff82 	bl	8003848 <__NVIC_SetPriority>
}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff56 	bl	800380c <__NVIC_EnableIRQ>
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e08d      	b.n	8003a96 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_DMA_Init+0x138>)
 8003982:	429a      	cmp	r2, r3
 8003984:	d80f      	bhi.n	80039a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <HAL_DMA_Init+0x13c>)
 800398e:	4413      	add	r3, r2
 8003990:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <HAL_DMA_Init+0x140>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	009a      	lsls	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_DMA_Init+0x144>)
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
 80039a4:	e00e      	b.n	80039c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_DMA_Init+0x148>)
 80039ae:	4413      	add	r3, r2
 80039b0:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_DMA_Init+0x140>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a3c      	ldr	r2, [pc, #240]	; (8003ab4 <HAL_DMA_Init+0x14c>)
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8fe 	bl	8003c18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d102      	bne.n	8003a2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_DMA_Init+0x104>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d80c      	bhi.n	8003a6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f91e 	bl	8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	e008      	b.n	8003a7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40020407 	.word	0x40020407
 8003aa4:	bffdfff8 	.word	0xbffdfff8
 8003aa8:	cccccccd 	.word	0xcccccccd
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	bffdfbf8 	.word	0xbffdfbf8
 8003ab4:	40020400 	.word	0x40020400

08003ab8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f003 031c 	and.w	r3, r3, #28
 8003ad8:	2204      	movs	r2, #4
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d026      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x7a>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d021      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f003 021c 	and.w	r2, r3, #28
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2104      	movs	r1, #4
 8003b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d071      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b30:	e06c      	b.n	8003c0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f003 031c 	and.w	r3, r3, #28
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02e      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0xec>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d029      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 020a 	bic.w	r2, r2, #10
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f003 021c 	and.w	r2, r3, #28
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	2102      	movs	r1, #2
 8003b84:	fa01 f202 	lsl.w	r2, r1, r2
 8003b88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d038      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ba2:	e033      	b.n	8003c0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	f003 031c 	and.w	r3, r3, #28
 8003bac:	2208      	movs	r2, #8
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d02a      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x156>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d025      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 020e 	bic.w	r2, r2, #14
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f003 021c 	and.w	r2, r3, #28
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
}
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d80a      	bhi.n	8003c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	089b      	lsrs	r3, r3, #2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c38:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6493      	str	r3, [r2, #72]	; 0x48
 8003c40:	e007      	b.n	8003c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3b08      	subs	r3, #8
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c68:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 031c 	and.w	r3, r3, #28
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40020407 	.word	0x40020407
 8003c88:	4002081c 	.word	0x4002081c
 8003c8c:	cccccccd 	.word	0xcccccccd
 8003c90:	40020880 	.word	0x40020880

08003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	461a      	mov	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cb6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	1000823f 	.word	0x1000823f
 8003cd8:	40020940 	.word	0x40020940

08003cdc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cea:	e14c      	b.n	8003f86 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 813e 	beq.w	8003f80 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x38>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b12      	cmp	r3, #18
 8003d12:	d123      	bne.n	8003d5c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	08da      	lsrs	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3208      	adds	r2, #8
 8003d56:	6939      	ldr	r1, [r7, #16]
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d00b      	beq.n	8003db0 <HAL_GPIO_Init+0xd4>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d007      	beq.n	8003db0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003da4:	2b11      	cmp	r3, #17
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b12      	cmp	r3, #18
 8003dae:	d130      	bne.n	8003e12 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003de6:	2201      	movs	r2, #1
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 0201 	and.w	r2, r3, #1
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8098 	beq.w	8003f80 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e50:	4a54      	ldr	r2, [pc, #336]	; (8003fa4 <HAL_GPIO_Init+0x2c8>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	3302      	adds	r3, #2
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e7a:	d019      	beq.n	8003eb0 <HAL_GPIO_Init+0x1d4>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <HAL_GPIO_Init+0x2cc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_GPIO_Init+0x1d0>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a49      	ldr	r2, [pc, #292]	; (8003fac <HAL_GPIO_Init+0x2d0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_GPIO_Init+0x1cc>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a48      	ldr	r2, [pc, #288]	; (8003fb0 <HAL_GPIO_Init+0x2d4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <HAL_GPIO_Init+0x1c8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a47      	ldr	r2, [pc, #284]	; (8003fb4 <HAL_GPIO_Init+0x2d8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_GPIO_Init+0x1c4>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	e008      	b.n	8003eb2 <HAL_GPIO_Init+0x1d6>
 8003ea0:	2307      	movs	r3, #7
 8003ea2:	e006      	b.n	8003eb2 <HAL_GPIO_Init+0x1d6>
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e004      	b.n	8003eb2 <HAL_GPIO_Init+0x1d6>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e002      	b.n	8003eb2 <HAL_GPIO_Init+0x1d6>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_GPIO_Init+0x1d6>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	f002 0203 	and.w	r2, r2, #3
 8003eb8:	0092      	lsls	r2, r2, #2
 8003eba:	4093      	lsls	r3, r2
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ec2:	4938      	ldr	r1, [pc, #224]	; (8003fa4 <HAL_GPIO_Init+0x2c8>)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	3302      	adds	r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ed0:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ef6:	4a30      	ldr	r2, [pc, #192]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f24:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f2c:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f7a:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <HAL_GPIO_Init+0x2dc>)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3301      	adds	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f47f aeab 	bne.w	8003cec <HAL_GPIO_Init+0x10>
  }
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	48000400 	.word	0x48000400
 8003fac:	48000800 	.word	0x48000800
 8003fb0:	48000c00 	.word	0x48000c00
 8003fb4:	48001000 	.word	0x48001000
 8003fb8:	58000800 	.word	0x58000800

08003fbc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e001      	b.n	8003fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004002:	4a05      	ldr	r2, [pc, #20]	; (8004018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd fbb6 	bl	800177c <HAL_GPIO_EXTI_Callback>
  }
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	58000800 	.word	0x58000800

0800401c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e081      	b.n	8004132 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fb62 	bl	800170c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	; 0x24
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800406c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d107      	bne.n	8004096 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	e006      	b.n	80040a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d104      	bne.n	80040b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	ea42 0103 	orr.w	r1, r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1a      	ldr	r2, [r3, #32]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	461a      	mov	r2, r3
 8004148:	460b      	mov	r3, r1
 800414a:	817b      	strh	r3, [r7, #10]
 800414c:	4613      	mov	r3, r2
 800414e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	f040 80db 	bne.w	8004314 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_I2C_Master_Receive+0x30>
 8004168:	2302      	movs	r3, #2
 800416a:	e0d4      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004174:	f7fe fb00 	bl	8002778 <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2319      	movs	r3, #25
 8004180:	2201      	movs	r2, #1
 8004182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f90c 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0bf      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2222      	movs	r2, #34	; 0x22
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2210      	movs	r2, #16
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	893a      	ldrh	r2, [r7, #8]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2bff      	cmp	r3, #255	; 0xff
 80041c6:	d90e      	bls.n	80041e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	22ff      	movs	r2, #255	; 0xff
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	8979      	ldrh	r1, [r7, #10]
 80041d6:	4b52      	ldr	r3, [pc, #328]	; (8004320 <HAL_I2C_Master_Receive+0x1e4>)
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fa2e 	bl	8004640 <I2C_TransferConfig>
 80041e4:	e06d      	b.n	80042c2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	8979      	ldrh	r1, [r7, #10]
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_I2C_Master_Receive+0x1e4>)
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fa1d 	bl	8004640 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004206:	e05c      	b.n	80042c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	6a39      	ldr	r1, [r7, #32]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f945 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e07c      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d034      	beq.n	80042c2 <HAL_I2C_Master_Receive+0x186>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d130      	bne.n	80042c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2200      	movs	r2, #0
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f89a 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e04d      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	2bff      	cmp	r3, #255	; 0xff
 8004282:	d90e      	bls.n	80042a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	22ff      	movs	r2, #255	; 0xff
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	b2da      	uxtb	r2, r3
 8004290:	8979      	ldrh	r1, [r7, #10]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f9d0 	bl	8004640 <I2C_TransferConfig>
 80042a0:	e00f      	b.n	80042c2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	8979      	ldrh	r1, [r7, #10]
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f9bf 	bl	8004640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d19d      	bne.n	8004208 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	6a39      	ldr	r1, [r7, #32]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f8a7 	bl	8004424 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e01a      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2220      	movs	r2, #32
 80042e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_I2C_Master_Receive+0x1e8>)
 80042f4:	400b      	ands	r3, r1
 80042f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	80002400 	.word	0x80002400
 8004324:	fe00e800 	.word	0xfe00e800

08004328 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
  }
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d103      	bne.n	800437a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d007      	beq.n	8004398 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	619a      	str	r2, [r3, #24]
  }
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b4:	e022      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d01e      	beq.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fe f9db 	bl	8002778 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d113      	bne.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e00f      	b.n	800441c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	429a      	cmp	r2, r3
 8004418:	d0cd      	beq.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004430:	e028      	b.n	8004484 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f89c 	bl	8004574 <I2C_IsAcknowledgeFailed>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e026      	b.n	8004494 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fe f997 	bl	8002778 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d113      	bne.n	8004484 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d1cf      	bne.n	8004432 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a8:	e055      	b.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f860 	bl	8004574 <I2C_IsAcknowledgeFailed>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e053      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d129      	bne.n	8004520 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d105      	bne.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e03f      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80044fa:	400b      	ands	r3, r1
 80044fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e022      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004520:	f7fe f92a 	bl	8002778 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e007      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d1a2      	bne.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	fe00e800 	.word	0xfe00e800

08004574 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d151      	bne.n	8004632 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458e:	e022      	b.n	80045d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d01e      	beq.n	80045d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004598:	f7fe f8ee 	bl	8002778 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d302      	bcc.n	80045ae <I2C_IsAcknowledgeFailed+0x3a>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d113      	bne.n	80045d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e02e      	b.n	8004634 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d1d5      	bne.n	8004590 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2210      	movs	r2, #16
 80045ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2220      	movs	r2, #32
 80045f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff feb1 	bl	800435c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <I2C_IsAcknowledgeFailed+0xc8>)
 8004606:	400b      	ands	r3, r1
 8004608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f043 0204 	orr.w	r2, r3, #4
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	fe00e800 	.word	0xfe00e800

08004640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	817b      	strh	r3, [r7, #10]
 800464e:	4613      	mov	r3, r2
 8004650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	0d5b      	lsrs	r3, r3, #21
 800465c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <I2C_TransferConfig+0x58>)
 8004662:	430b      	orrs	r3, r1
 8004664:	43db      	mvns	r3, r3
 8004666:	ea02 0103 	and.w	r1, r2, r3
 800466a:	897b      	ldrh	r3, [r7, #10]
 800466c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004670:	7a7b      	ldrb	r3, [r7, #9]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	431a      	orrs	r2, r3
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	03ff63ff 	.word	0x03ff63ff

0800469c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d138      	bne.n	8004724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046bc:	2302      	movs	r3, #2
 80046be:	e032      	b.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b20      	cmp	r3, #32
 8004746:	d139      	bne.n	80047bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004752:	2302      	movs	r3, #2
 8004754:	e033      	b.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2224      	movs	r2, #36	; 0x24
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	58000400 	.word	0x58000400

080047ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_PWREx_GetVoltageRange+0x18>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	58000400 	.word	0x58000400

08004808 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800480c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481a:	d101      	bne.n	8004820 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_RCC_HSE_EnableBypass>:
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800483a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_RCC_HSE_DisableBypass>:
{
 800484a:	b480      	push	{r7}
 800484c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800484e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_RCC_HSE_Enable>:
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_HSE_Disable>:
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_RCC_HSE_IsReady>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b6:	d101      	bne.n	80048bc <LL_RCC_HSE_IsReady+0x18>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <LL_RCC_HSE_IsReady+0x1a>
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_HSI_Enable>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80048cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048da:	6013      	str	r3, [r2, #0]
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_RCC_HSI_Disable>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80048ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_HSI_IsReady>:
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004916:	d101      	bne.n	800491c <LL_RCC_HSI_IsReady+0x18>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <LL_RCC_HSI_IsReady+0x1a>
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <LL_RCC_HSI48_Enable>:
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800495e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800496a:	bf00      	nop
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_RCC_HSI48_Disable>:
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_HSI48_IsReady>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d101      	bne.n	80049ae <LL_RCC_HSI48_IsReady+0x18>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <LL_RCC_HSI48_IsReady+0x1a>
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_RCC_LSE_Enable>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049d2:	bf00      	nop
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_RCC_LSE_Disable>:
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_LSE_EnableBypass>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_RCC_LSE_DisableBypass>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_LSE_IsReady>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d101      	bne.n	8004a5a <LL_RCC_LSE_IsReady+0x18>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <LL_RCC_LSE_IsReady+0x1a>
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_RCC_LSI1_Enable>:
{
 8004a66:	b480      	push	{r7}
 8004a68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_LSI1_Disable>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_RCC_LSI1_IsReady>:
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d101      	bne.n	8004ac2 <LL_RCC_LSI1_IsReady+0x18>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <LL_RCC_LSI1_IsReady+0x1a>
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_RCC_LSI2_Enable>:
{
 8004ace:	b480      	push	{r7}
 8004ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ade:	f043 0304 	orr.w	r3, r3, #4
 8004ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_RCC_LSI2_Disable>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_RCC_LSI2_IsReady>:
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d101      	bne.n	8004b2a <LL_RCC_LSI2_IsReady+0x18>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <LL_RCC_LSI2_IsReady+0x1a>
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_RCC_LSI2_SetTrimming>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_RCC_MSI_Enable>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_MSI_Disable>:
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6013      	str	r3, [r2, #0]
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_RCC_MSI_IsReady>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d101      	bne.n	8004bb6 <LL_RCC_MSI_IsReady+0x16>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <LL_RCC_MSI_IsReady+0x18>
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_MSI_SetRange>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_MSI_GetRange>:
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2bb0      	cmp	r3, #176	; 0xb0
 8004c00:	d901      	bls.n	8004c06 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004c02:	23b0      	movs	r3, #176	; 0xb0
 8004c04:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004c06:	687b      	ldr	r3, [r7, #4]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <LL_RCC_SetSysClkSource>:
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 0203 	bic.w	r2, r3, #3
 8004c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_RCC_GetSysClkSource>:
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_RCC_SetAHBPrescaler>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_SetAHB4Prescaler>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ce2:	f023 020f 	bic.w	r2, r3, #15
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_SetAPB1Prescaler>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <LL_RCC_SetAPB2Prescaler>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <LL_RCC_GetAHBPrescaler>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <LL_RCC_GetAHB4Prescaler>:
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <LL_RCC_GetAPB1Prescaler>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_RCC_GetAPB2Prescaler>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ddc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de0:	6013      	str	r3, [r2, #0]
}
 8004de2:	bf00      	nop
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e1c:	d101      	bne.n	8004e22 <LL_RCC_PLL_IsReady+0x18>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_RCC_PLL_IsReady+0x1a>
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	0a1b      	lsrs	r3, r3, #8
 8004e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0303 	and.w	r3, r3, #3
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea2:	d101      	bne.n	8004ea8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec8:	d101      	bne.n	8004ece <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eee:	d101      	bne.n	8004ef4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f12:	d101      	bne.n	8004f18 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f36:	d101      	bne.n	8004f3c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b08b      	sub	sp, #44	; 0x2c
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e34b      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 808f 	beq.w	8005086 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f68:	f7ff fe7d 	bl	8004c66 <LL_RCC_GetSysClkSource>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f6e:	f7ff ff83 	bl	8004e78 <LL_RCC_PLL_GetMainSource>
 8004f72:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_RCC_OscConfig+0x3e>
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d149      	bne.n	8005014 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d146      	bne.n	8005014 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f86:	f7ff fe0b 	bl	8004ba0 <LL_RCC_MSI_IsReady>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_OscConfig+0x54>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e32a      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004fa0:	f7ff fe23 	bl	8004bea <LL_RCC_MSI_GetRange>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	429c      	cmp	r4, r3
 8004fa8:	d914      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fd2a 	bl	8005a08 <RCC_SetFlashLatencyFromMSIRange>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e319      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fdfd 	bl	8004bc2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fe21 	bl	8004c14 <LL_RCC_MSI_SetCalibTrimming>
 8004fd2:	e013      	b.n	8004ffc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fdf2 	bl	8004bc2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fe16 	bl	8004c14 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fd0b 	bl	8005a08 <RCC_SetFlashLatencyFromMSIRange>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e2fa      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004ffc:	f7fc ff64 	bl	8001ec8 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005000:	4bb4      	ldr	r3, [pc, #720]	; (80052d4 <HAL_RCC_OscConfig+0x38c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f7fc fe49 	bl	8001c9c <HAL_InitTick>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d039      	beq.n	8005084 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e2ee      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01e      	beq.n	800505a <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800501c:	f7ff fda2 	bl	8004b64 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005020:	f7fd fbaa 	bl	8002778 <HAL_GetTick>
 8005024:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005028:	f7fd fba6 	bl	8002778 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e2db      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800503a:	f7ff fdb1 	bl	8004ba0 <LL_RCC_MSI_IsReady>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f1      	beq.n	8005028 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fdba 	bl	8004bc2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fdde 	bl	8004c14 <LL_RCC_MSI_SetCalibTrimming>
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800505a:	f7ff fd92 	bl	8004b82 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800505e:	f7fd fb8b 	bl	8002778 <HAL_GetTick>
 8005062:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005066:	f7fd fb87 	bl	8002778 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e2bc      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005078:	f7ff fd92 	bl	8004ba0 <LL_RCC_MSI_IsReady>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f1      	bne.n	8005066 <HAL_RCC_OscConfig+0x11e>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d05a      	beq.n	8005148 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005092:	f7ff fde8 	bl	8004c66 <LL_RCC_GetSysClkSource>
 8005096:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005098:	f7ff feee 	bl	8004e78 <LL_RCC_PLL_GetMainSource>
 800509c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_OscConfig+0x168>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d10d      	bne.n	80050c6 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d10a      	bne.n	80050c6 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b0:	f7ff fbf8 	bl	80048a4 <LL_RCC_HSE_IsReady>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d045      	beq.n	8005146 <HAL_RCC_OscConfig+0x1fe>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d141      	bne.n	8005146 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e295      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ce:	d102      	bne.n	80050d6 <HAL_RCC_OscConfig+0x18e>
 80050d0:	f7ff fbca 	bl	8004868 <LL_RCC_HSE_Enable>
 80050d4:	e00d      	b.n	80050f2 <HAL_RCC_OscConfig+0x1aa>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050de:	d104      	bne.n	80050ea <HAL_RCC_OscConfig+0x1a2>
 80050e0:	f7ff fba4 	bl	800482c <LL_RCC_HSE_EnableBypass>
 80050e4:	f7ff fbc0 	bl	8004868 <LL_RCC_HSE_Enable>
 80050e8:	e003      	b.n	80050f2 <HAL_RCC_OscConfig+0x1aa>
 80050ea:	f7ff fbcc 	bl	8004886 <LL_RCC_HSE_Disable>
 80050ee:	f7ff fbac 	bl	800484a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d012      	beq.n	8005120 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fb3d 	bl	8002778 <HAL_GetTick>
 80050fe:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005102:	f7fd fb39 	bl	8002778 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b64      	cmp	r3, #100	; 0x64
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e26e      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005114:	f7ff fbc6 	bl	80048a4 <LL_RCC_HSE_IsReady>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f1      	beq.n	8005102 <HAL_RCC_OscConfig+0x1ba>
 800511e:	e013      	b.n	8005148 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd fb2a 	bl	8002778 <HAL_GetTick>
 8005124:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005128:	f7fd fb26 	bl	8002778 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	; 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e25b      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800513a:	f7ff fbb3 	bl	80048a4 <LL_RCC_HSE_IsReady>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f1      	bne.n	8005128 <HAL_RCC_OscConfig+0x1e0>
 8005144:	e000      	b.n	8005148 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005146:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d051      	beq.n	80051f8 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005154:	f7ff fd87 	bl	8004c66 <LL_RCC_GetSysClkSource>
 8005158:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800515a:	f7ff fe8d 	bl	8004e78 <LL_RCC_PLL_GetMainSource>
 800515e:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d005      	beq.n	8005172 <HAL_RCC_OscConfig+0x22a>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d113      	bne.n	8005194 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d110      	bne.n	8005194 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005172:	f7ff fbc7 	bl	8004904 <LL_RCC_HSI_IsReady>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_RCC_OscConfig+0x240>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e234      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fbcb 	bl	8004928 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005192:	e031      	b.n	80051f8 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d019      	beq.n	80051d0 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800519c:	f7ff fb94 	bl	80048c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fd faea 	bl	8002778 <HAL_GetTick>
 80051a4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fd fae6 	bl	8002778 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e21b      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80051ba:	f7ff fba3 	bl	8004904 <LL_RCC_HSI_IsReady>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f1      	beq.n	80051a8 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fbad 	bl	8004928 <LL_RCC_HSI_SetCalibTrimming>
 80051ce:	e013      	b.n	80051f8 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d0:	f7ff fb89 	bl	80048e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fd fad0 	bl	8002778 <HAL_GetTick>
 80051d8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051dc:	f7fd facc 	bl	8002778 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e201      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80051ee:	f7ff fb89 	bl	8004904 <LL_RCC_HSI_IsReady>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f1      	bne.n	80051dc <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80a2 	beq.w	8005356 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d075      	beq.n	8005306 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b00      	cmp	r3, #0
 8005224:	d046      	beq.n	80052b4 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005226:	f7ff fc40 	bl	8004aaa <LL_RCC_LSI1_IsReady>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d113      	bne.n	8005258 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005230:	f7ff fc19 	bl	8004a66 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005234:	f7fd faa0 	bl	8002778 <HAL_GetTick>
 8005238:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800523c:	f7fd fa9c 	bl	8002778 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e1d1      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800524e:	f7ff fc2c 	bl	8004aaa <LL_RCC_LSI1_IsReady>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f1      	beq.n	800523c <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005258:	f7ff fc39 	bl	8004ace <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fd fa8c 	bl	8002778 <HAL_GetTick>
 8005260:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005264:	f7fd fa88 	bl	8002778 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b03      	cmp	r3, #3
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e1bd      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005276:	f7ff fc4c 	bl	8004b12 <LL_RCC_LSI2_IsReady>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f1      	beq.n	8005264 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fc56 	bl	8004b36 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800528a:	f7ff fbfd 	bl	8004a88 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528e:	f7fd fa73 	bl	8002778 <HAL_GetTick>
 8005292:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005296:	f7fd fa6f 	bl	8002778 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e1a4      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80052a8:	f7ff fbff 	bl	8004aaa <LL_RCC_LSI1_IsReady>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f1      	bne.n	8005296 <HAL_RCC_OscConfig+0x34e>
 80052b2:	e050      	b.n	8005356 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80052b4:	f7ff fbd7 	bl	8004a66 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fd fa5e 	bl	8002778 <HAL_GetTick>
 80052bc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80052be:	e00b      	b.n	80052d8 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052c0:	f7fd fa5a 	bl	8002778 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d904      	bls.n	80052d8 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e18f      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() == 0U)
 80052d8:	f7ff fbe7 	bl	8004aaa <LL_RCC_LSI1_IsReady>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0ee      	beq.n	80052c0 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80052e2:	f7ff fc05 	bl	8004af0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80052e8:	f7fd fa46 	bl	8002778 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e17b      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80052fa:	f7ff fc0a 	bl	8004b12 <LL_RCC_LSI2_IsReady>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f1      	bne.n	80052e8 <HAL_RCC_OscConfig+0x3a0>
 8005304:	e027      	b.n	8005356 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005306:	f7ff fbf3 	bl	8004af0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530a:	f7fd fa35 	bl	8002778 <HAL_GetTick>
 800530e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005312:	f7fd fa31 	bl	8002778 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b03      	cmp	r3, #3
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e166      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005324:	f7ff fbf5 	bl	8004b12 <LL_RCC_LSI2_IsReady>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f1      	bne.n	8005312 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800532e:	f7ff fbab 	bl	8004a88 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fd fa21 	bl	8002778 <HAL_GetTick>
 8005336:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800533a:	f7fd fa1d 	bl	8002778 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e152      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800534c:	f7ff fbad 	bl	8004aaa <LL_RCC_LSI1_IsReady>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f1      	bne.n	800533a <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d05b      	beq.n	800541a <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005362:	4ba6      	ldr	r3, [pc, #664]	; (80055fc <HAL_RCC_OscConfig+0x6b4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d114      	bne.n	8005398 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800536e:	f7ff fa2d 	bl	80047cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005372:	f7fd fa01 	bl	8002778 <HAL_GetTick>
 8005376:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537a:	f7fd f9fd 	bl	8002778 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e132      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800538c:	4b9b      	ldr	r3, [pc, #620]	; (80055fc <HAL_RCC_OscConfig+0x6b4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d102      	bne.n	80053a6 <HAL_RCC_OscConfig+0x45e>
 80053a0:	f7ff fb0b 	bl	80049ba <LL_RCC_LSE_Enable>
 80053a4:	e00c      	b.n	80053c0 <HAL_RCC_OscConfig+0x478>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d104      	bne.n	80053b8 <HAL_RCC_OscConfig+0x470>
 80053ae:	f7ff fb26 	bl	80049fe <LL_RCC_LSE_EnableBypass>
 80053b2:	f7ff fb02 	bl	80049ba <LL_RCC_LSE_Enable>
 80053b6:	e003      	b.n	80053c0 <HAL_RCC_OscConfig+0x478>
 80053b8:	f7ff fb10 	bl	80049dc <LL_RCC_LSE_Disable>
 80053bc:	f7ff fb30 	bl	8004a20 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d014      	beq.n	80053f2 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c8:	f7fd f9d6 	bl	8002778 <HAL_GetTick>
 80053cc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d0:	f7fd f9d2 	bl	8002778 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e105      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80053e6:	f7ff fb2c 	bl	8004a42 <LL_RCC_LSE_IsReady>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ef      	beq.n	80053d0 <HAL_RCC_OscConfig+0x488>
 80053f0:	e013      	b.n	800541a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f2:	f7fd f9c1 	bl	8002778 <HAL_GetTick>
 80053f6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fd f9bd 	bl	8002778 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0f0      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005410:	f7ff fb17 	bl	8004a42 <LL_RCC_LSE_IsReady>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1ef      	bne.n	80053fa <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d02c      	beq.n	8005480 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	2b00      	cmp	r3, #0
 800542c:	d014      	beq.n	8005458 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800542e:	f7ff fa90 	bl	8004952 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005432:	f7fd f9a1 	bl	8002778 <HAL_GetTick>
 8005436:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800543a:	f7fd f99d 	bl	8002778 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e0d2      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800544c:	f7ff faa3 	bl	8004996 <LL_RCC_HSI48_IsReady>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f1      	beq.n	800543a <HAL_RCC_OscConfig+0x4f2>
 8005456:	e013      	b.n	8005480 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005458:	f7ff fa8c 	bl	8004974 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fd f98c 	bl	8002778 <HAL_GetTick>
 8005460:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005464:	f7fd f988 	bl	8002778 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e0bd      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005476:	f7ff fa8e 	bl	8004996 <LL_RCC_HSI48_IsReady>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f1      	bne.n	8005464 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80b3 	beq.w	80055f0 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800548a:	f7ff fbec 	bl	8004c66 <LL_RCC_GetSysClkSource>
 800548e:	4603      	mov	r3, r0
 8005490:	2b0c      	cmp	r3, #12
 8005492:	d076      	beq.n	8005582 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	2b02      	cmp	r3, #2
 800549a:	d14b      	bne.n	8005534 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549c:	f7ff fca6 	bl	8004dec <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fd f96a 	bl	8002778 <HAL_GetTick>
 80054a4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a8:	f7fd f966 	bl	8002778 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e09b      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80054ba:	f7ff fca6 	bl	8004e0a <LL_RCC_PLL_IsReady>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f1      	bne.n	80054a8 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	4b4d      	ldr	r3, [pc, #308]	; (8005600 <HAL_RCC_OscConfig+0x6b8>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054d6:	4311      	orrs	r1, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054dc:	0212      	lsls	r2, r2, #8
 80054de:	4311      	orrs	r1, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054e4:	4311      	orrs	r1, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054ea:	4311      	orrs	r1, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054f0:	430a      	orrs	r2, r1
 80054f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054fa:	f7ff fc68 	bl	8004dce <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fd f933 	bl	8002778 <HAL_GetTick>
 8005512:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005516:	f7fd f92f 	bl	8002778 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e064      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005528:	f7ff fc6f 	bl	8004e0a <LL_RCC_PLL_IsReady>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f1      	beq.n	8005516 <HAL_RCC_OscConfig+0x5ce>
 8005532:	e05d      	b.n	80055f0 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005534:	f7ff fc5a 	bl	8004dec <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005552:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fd f90c 	bl	8002778 <HAL_GetTick>
 8005560:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005564:	f7fd f908 	bl	8002778 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e03d      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005576:	f7ff fc48 	bl	8004e0a <LL_RCC_PLL_IsReady>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f1      	bne.n	8005564 <HAL_RCC_OscConfig+0x61c>
 8005580:	e036      	b.n	80055f0 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e031      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f003 0203 	and.w	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d123      	bne.n	80055ec <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d11c      	bne.n	80055ec <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d114      	bne.n	80055ec <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d10d      	bne.n	80055ec <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d106      	bne.n	80055ec <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	372c      	adds	r7, #44	; 0x2c
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}
 80055fa:	bf00      	nop
 80055fc:	58000400 	.word	0x58000400
 8005600:	11c1808c 	.word	0x11c1808c

08005604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e12a      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005618:	4b97      	ldr	r3, [pc, #604]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d91b      	bls.n	800565e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005626:	4b94      	ldr	r3, [pc, #592]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 0207 	bic.w	r2, r3, #7
 800562e:	4992      	ldr	r1, [pc, #584]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005636:	f7fd f89f 	bl	8002778 <HAL_GetTick>
 800563a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563c:	e008      	b.n	8005650 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800563e:	f7fd f89b 	bl	8002778 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e10e      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005650:	4b89      	ldr	r3, [pc, #548]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d1ef      	bne.n	800563e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d016      	beq.n	8005698 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fb05 	bl	8004c7e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005674:	f7fd f880 	bl	8002778 <HAL_GetTick>
 8005678:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800567c:	f7fd f87c 	bl	8002778 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e0ef      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800568e:	f7ff fbff 	bl	8004e90 <LL_RCC_IsActiveFlag_HPRE>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f1      	beq.n	800567c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d016      	beq.n	80056d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fafc 	bl	8004ca6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056ae:	f7fd f863 	bl	8002778 <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056b6:	f7fd f85f 	bl	8002778 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e0d2      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056c8:	f7ff fbf4 	bl	8004eb4 <LL_RCC_IsActiveFlag_C2HPRE>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f1      	beq.n	80056b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff faf5 	bl	8004cd2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056e8:	f7fd f846 	bl	8002778 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056f0:	f7fd f842 	bl	8002778 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0b5      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005702:	f7ff fbea 	bl	8004eda <LL_RCC_IsActiveFlag_SHDHPRE>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f1      	beq.n	80056f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff faef 	bl	8004d00 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005722:	f7fd f829 	bl	8002778 <HAL_GetTick>
 8005726:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800572a:	f7fd f825 	bl	8002778 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e098      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800573c:	f7ff fbe0 	bl	8004f00 <LL_RCC_IsActiveFlag_PPRE1>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f1      	beq.n	800572a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d017      	beq.n	8005782 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fae5 	bl	8004d28 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800575e:	f7fd f80b 	bl	8002778 <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005766:	f7fd f807 	bl	8002778 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e07a      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005778:	f7ff fbd4 	bl	8004f24 <LL_RCC_IsActiveFlag_PPRE2>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f1      	beq.n	8005766 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d043      	beq.n	8005816 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d106      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005796:	f7ff f885 	bl	80048a4 <LL_RCC_HSE_IsReady>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11e      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e064      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80057ac:	f7ff fb2d 	bl	8004e0a <LL_RCC_PLL_IsReady>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d113      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e059      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80057c2:	f7ff f9ed 	bl	8004ba0 <LL_RCC_MSI_IsReady>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d108      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e04e      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80057d0:	f7ff f898 	bl	8004904 <LL_RCC_HSI_IsReady>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e047      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fa2b 	bl	8004c3e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e8:	f7fc ffc6 	bl	8002778 <HAL_GetTick>
 80057ec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f0:	f7fc ffc2 	bl	8002778 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e033      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005806:	f7ff fa2e 	bl	8004c66 <LL_RCC_GetSysClkSource>
 800580a:	4602      	mov	r2, r0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	429a      	cmp	r2, r3
 8005814:	d1ec      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d21b      	bcs.n	800585c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005824:	4b14      	ldr	r3, [pc, #80]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 0207 	bic.w	r2, r3, #7
 800582c:	4912      	ldr	r1, [pc, #72]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005834:	f7fc ffa0 	bl	8002778 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	e008      	b.n	800584e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800583c:	f7fc ff9c 	bl	8002778 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e00f      	b.n	800586e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d1ef      	bne.n	800583c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800585c:	f7fc fb34 	bl	8001ec8 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005860:	f7fc ff96 	bl	8002790 <HAL_GetTickPrio>
 8005864:	4603      	mov	r3, r0
 8005866:	4618      	mov	r0, r3
 8005868:	f7fc fa18 	bl	8001c9c <HAL_InitTick>
 800586c:	4603      	mov	r3, r0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	58004000 	.word	0x58004000

0800587c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005882:	f7ff f9f0 	bl	8004c66 <LL_RCC_GetSysClkSource>
 8005886:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800588e:	f7ff f9ac 	bl	8004bea <LL_RCC_MSI_GetRange>
 8005892:	4603      	mov	r3, r0
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	4a2a      	ldr	r2, [pc, #168]	; (8005944 <HAL_RCC_GetSysClockFreq+0xc8>)
 800589c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e04a      	b.n	800593a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d102      	bne.n	80058b0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058aa:	4b27      	ldr	r3, [pc, #156]	; (8005948 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e044      	b.n	800593a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d10a      	bne.n	80058cc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058b6:	f7fe ffa7 	bl	8004808 <LL_RCC_HSE_IsEnabledDiv2>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e039      	b.n	800593a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80058c6:	4b21      	ldr	r3, [pc, #132]	; (800594c <HAL_RCC_GetSysClockFreq+0xd0>)
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e036      	b.n	800593a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80058cc:	f7ff fad4 	bl	8004e78 <LL_RCC_PLL_GetMainSource>
 80058d0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d002      	beq.n	80058de <HAL_RCC_GetSysClockFreq+0x62>
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d003      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x68>
 80058dc:	e00d      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058e0:	60bb      	str	r3, [r7, #8]
        break;
 80058e2:	e015      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058e4:	f7fe ff90 	bl	8004808 <LL_RCC_HSE_IsEnabledDiv2>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d102      	bne.n	80058f4 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80058ee:	4b16      	ldr	r3, [pc, #88]	; (8005948 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058f0:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80058f2:	e00d      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80058f4:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_RCC_GetSysClockFreq+0xd0>)
 80058f6:	60bb      	str	r3, [r7, #8]
        break;
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80058fa:	f7ff f976 	bl	8004bea <LL_RCC_MSI_GetRange>
 80058fe:	4603      	mov	r3, r0
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	4a0f      	ldr	r2, [pc, #60]	; (8005944 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	60bb      	str	r3, [r7, #8]
        break;
 800590e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005910:	f7ff fa8d 	bl	8004e2e <LL_RCC_PLL_GetN>
 8005914:	4602      	mov	r2, r0
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	fb03 f402 	mul.w	r4, r3, r2
 800591c:	f7ff faa0 	bl	8004e60 <LL_RCC_PLL_GetDivider>
 8005920:	4603      	mov	r3, r0
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	3301      	adds	r3, #1
 8005926:	fbb4 f4f3 	udiv	r4, r4, r3
 800592a:	f7ff fa8d 	bl	8004e48 <LL_RCC_PLL_GetR>
 800592e:	4603      	mov	r3, r0
 8005930:	0f5b      	lsrs	r3, r3, #29
 8005932:	3301      	adds	r3, #1
 8005934:	fbb4 f3f3 	udiv	r3, r4, r3
 8005938:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	bd90      	pop	{r4, r7, pc}
 8005944:	0800b1a8 	.word	0x0800b1a8
 8005948:	00f42400 	.word	0x00f42400
 800594c:	01e84800 	.word	0x01e84800

08005950 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005950:	b598      	push	{r3, r4, r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005954:	f7ff ff92 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8005958:	4604      	mov	r4, r0
 800595a:	f7ff f9f9 	bl	8004d50 <LL_RCC_GetAHBPrescaler>
 800595e:	4603      	mov	r3, r0
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	4a03      	ldr	r2, [pc, #12]	; (8005974 <HAL_RCC_GetHCLKFreq+0x24>)
 8005968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd98      	pop	{r3, r4, r7, pc}
 8005974:	0800b148 	.word	0x0800b148

08005978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005978:	b598      	push	{r3, r4, r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800597c:	f7ff ffe8 	bl	8005950 <HAL_RCC_GetHCLKFreq>
 8005980:	4604      	mov	r4, r0
 8005982:	f7ff fa18 	bl	8004db6 <LL_RCC_GetAPB2Prescaler>
 8005986:	4603      	mov	r3, r0
 8005988:	0adb      	lsrs	r3, r3, #11
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	fa24 f303 	lsr.w	r3, r4, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	bd98      	pop	{r3, r4, r7, pc}
 80059a0:	0800b188 	.word	0x0800b188

080059a4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	226f      	movs	r2, #111	; 0x6f
 80059b2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80059b4:	f7ff f957 	bl	8004c66 <LL_RCC_GetSysClkSource>
 80059b8:	4602      	mov	r2, r0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80059be:	f7ff f9c7 	bl	8004d50 <LL_RCC_GetAHBPrescaler>
 80059c2:	4602      	mov	r2, r0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80059c8:	f7ff f9e9 	bl	8004d9e <LL_RCC_GetAPB1Prescaler>
 80059cc:	4602      	mov	r2, r0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80059d2:	f7ff f9f0 	bl	8004db6 <LL_RCC_GetAPB2Prescaler>
 80059d6:	4602      	mov	r2, r0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80059dc:	f7ff f9c4 	bl	8004d68 <LL_C2_RCC_GetAHBPrescaler>
 80059e0:	4602      	mov	r2, r0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80059e6:	f7ff f9cc 	bl	8004d82 <LL_RCC_GetAHB4Prescaler>
 80059ea:	4602      	mov	r2, r0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059f0:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <HAL_RCC_GetClockConfig+0x60>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0207 	and.w	r2, r3, #7
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	58004000 	.word	0x58004000

08005a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005a08:	b590      	push	{r4, r7, lr}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2bb0      	cmp	r3, #176	; 0xb0
 8005a14:	d903      	bls.n	8005a1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005a16:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e007      	b.n	8005a2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	4a11      	ldr	r2, [pc, #68]	; (8005a6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005a2e:	f7ff f9a8 	bl	8004d82 <LL_RCC_GetAHB4Prescaler>
 8005a32:	4603      	mov	r3, r0
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	0c9c      	lsrs	r4, r3, #18
 8005a52:	f7fe fecb 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f80c 	bl	8005a78 <RCC_SetFlashLatency>
 8005a60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd90      	pop	{r4, r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	0800b1a8 	.word	0x0800b1a8
 8005a70:	0800b148 	.word	0x0800b148
 8005a74:	431bde83 	.word	0x431bde83

08005a78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b093      	sub	sp, #76	; 0x4c
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005a82:	4b39      	ldr	r3, [pc, #228]	; (8005b68 <RCC_SetFlashLatency+0xf0>)
 8005a84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005a8e:	4a37      	ldr	r2, [pc, #220]	; (8005b6c <RCC_SetFlashLatency+0xf4>)
 8005a90:	f107 031c 	add.w	r3, r7, #28
 8005a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005a9a:	4b35      	ldr	r3, [pc, #212]	; (8005b70 <RCC_SetFlashLatency+0xf8>)
 8005a9c:	f107 040c 	add.w	r4, r7, #12
 8005aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab0:	d11c      	bne.n	8005aec <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab6:	e015      	b.n	8005ae4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d808      	bhi.n	8005ade <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ada:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005adc:	e022      	b.n	8005b24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d9e6      	bls.n	8005ab8 <RCC_SetFlashLatency+0x40>
 8005aea:	e01b      	b.n	8005b24 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	e015      	b.n	8005b1e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005afa:	4413      	add	r3, r2
 8005afc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d808      	bhi.n	8005b18 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005b0e:	4413      	add	r3, r2
 8005b10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b16:	e005      	b.n	8005b24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d9e6      	bls.n	8005af2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005b24:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <RCC_SetFlashLatency+0xfc>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f023 0207 	bic.w	r2, r3, #7
 8005b2c:	4911      	ldr	r1, [pc, #68]	; (8005b74 <RCC_SetFlashLatency+0xfc>)
 8005b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b34:	f7fc fe20 	bl	8002778 <HAL_GetTick>
 8005b38:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b3a:	e008      	b.n	8005b4e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b3c:	f7fc fe1c 	bl	8002778 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e007      	b.n	8005b5e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <RCC_SetFlashLatency+0xfc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d1ef      	bne.n	8005b3c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	374c      	adds	r7, #76	; 0x4c
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd90      	pop	{r4, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	0800aea0 	.word	0x0800aea0
 8005b6c:	0800aeb0 	.word	0x0800aeb0
 8005b70:	0800aebc 	.word	0x0800aebc
 8005b74:	58004000 	.word	0x58004000

08005b78 <LL_RCC_LSE_IsEnabled>:
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <LL_RCC_LSE_IsEnabled+0x18>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <LL_RCC_LSE_IsEnabled+0x1a>
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_LSE_IsReady>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d101      	bne.n	8005bb4 <LL_RCC_LSE_IsReady+0x18>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <LL_RCC_LSE_IsReady+0x1a>
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LL_RCC_SetRFWKPClockSource>:
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <LL_RCC_SetSMPSClockSource>:
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f023 0203 	bic.w	r2, r3, #3
 8005bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_RCC_SetSMPSPrescaler>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <LL_RCC_SetUSARTClockSource>:
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	f023 0203 	bic.w	r2, r3, #3
 8005c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <LL_RCC_SetLPUARTClockSource>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <LL_RCC_SetI2CClockSource>:
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cac:	43db      	mvns	r3, r3
 8005cae:	401a      	ands	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_SetLPTIMClockSource>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <LL_RCC_SetSAIClockSource>:
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_SetRNGClockSource>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_SetCLK48ClockSource>:
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <LL_RCC_SetUSBClockSource>:
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ffe3 	bl	8005d5a <LL_RCC_SetCLK48ClockSource>
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <LL_RCC_SetADCClockSource>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LL_RCC_SetRTCClockSource>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_GetRTCClockSource>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <LL_RCC_ForceBackupDomainReset>:
{
 8005e0e:	b480      	push	{r7}
 8005e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e26:	bf00      	nop
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_RCC_PLLSAI1_Enable>:
{
 8005e52:	b480      	push	{r7}
 8005e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e64:	6013      	str	r3, [r2, #0]
}
 8005e66:	bf00      	nop
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <LL_RCC_PLLSAI1_Disable>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e82:	6013      	str	r3, [r2, #0]
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_RCC_PLLSAI1_IsReady>:
{
 8005e8e:	b480      	push	{r7}
 8005e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea0:	d101      	bne.n	8005ea6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b088      	sub	sp, #32
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005eba:	2300      	movs	r3, #0
 8005ebc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d033      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed6:	d00c      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005edc:	d802      	bhi.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d010      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ee2:	e017      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ee8:	d017      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005eea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005eee:	d016      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005ef0:	e010      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f00:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f02:	e00d      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f947 	bl	800619c <RCCEx_PLLSAI1_ConfigNP>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f12:	e005      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	77fb      	strb	r3, [r7, #31]
        break;
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f20:	7ffb      	ldrb	r3, [r7, #31]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fee9 	bl	8005d02 <LL_RCC_SetSAIClockSource>
 8005f30:	e001      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f32:	7ffb      	ldrb	r3, [r7, #31]
 8005f34:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d046      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005f42:	f7ff ff57 	bl	8005df4 <LL_RCC_GetRTCClockSource>
 8005f46:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d03c      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f52:	f7fe fc3b 	bl	80047cc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff ff31 	bl	8005dc8 <LL_RCC_SetRTCClockSource>
 8005f66:	e02e      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005f72:	f7ff ff4c 	bl	8005e0e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005f76:	f7ff ff5b 	bl	8005e30 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005f92:	f7ff fdf1 	bl	8005b78 <LL_RCC_LSE_IsEnabled>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d114      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f9c:	f7fc fbec 	bl	8002778 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005fa2:	e00b      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa4:	f7fc fbe8 	bl	8002778 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d902      	bls.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	77fb      	strb	r3, [r7, #31]
              break;
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005fbc:	f7ff fdee 	bl	8005b9c <LL_RCC_LSE_IsReady>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d1ee      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005fc6:	7ffb      	ldrb	r3, [r7, #31]
 8005fc8:	77bb      	strb	r3, [r7, #30]
 8005fca:	e001      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	7ffb      	ldrb	r3, [r7, #31]
 8005fce:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fe2b 	bl	8005c3c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff fe36 	bl	8005c68 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fe5e 	bl	8005cce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fe53 	bl	8005cce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff fe2b 	bl	8005c94 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fe20 	bl	8005c94 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d022      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fe8e 	bl	8005d86 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006072:	d107      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800607e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006082:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800608c:	d10b      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3304      	adds	r3, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f8dd 	bl	8006252 <RCCEx_PLLSAI1_ConfigNQ>
 8006098:	4603      	mov	r3, r0
 800609a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800609c:	7ffb      	ldrb	r3, [r7, #31]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 80060a2:	7ffb      	ldrb	r3, [r7, #31]
 80060a4:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d02b      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ba:	d008      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c4:	d003      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x228>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fe2b 	bl	8005d2e <LL_RCC_SetRNGClockSource>
 80060d8:	e00a      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	2000      	movs	r0, #0
 80060e6:	f7ff fe22 	bl	8005d2e <LL_RCC_SetRNGClockSource>
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fe35 	bl	8005d5a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80060f8:	d107      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006108:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006112:	2b00      	cmp	r3, #0
 8006114:	d022      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fe3e 	bl	8005d9c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006128:	d107      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800612a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006138:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006142:	d10b      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f8dd 	bl	8006308 <RCCEx_PLLSAI1_ConfigNR>
 800614e:	4603      	mov	r3, r0
 8006150:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006152:	7ffb      	ldrb	r3, [r7, #31]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8006158:	7ffb      	ldrb	r3, [r7, #31]
 800615a:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fd27 	bl	8005bc0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fd46 	bl	8005c14 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fd2d 	bl	8005bec <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8006192:	7fbb      	ldrb	r3, [r7, #30]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80061a8:	f7ff fe62 	bl	8005e70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061ac:	f7fc fae4 	bl	8002778 <HAL_GetTick>
 80061b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061b2:	e009      	b.n	80061c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061b4:	f7fc fae0 	bl	8002778 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d902      	bls.n	80061c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73fb      	strb	r3, [r7, #15]
      break;
 80061c6:	e004      	b.n	80061d2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061c8:	f7ff fe61 	bl	8005e8e <LL_RCC_PLLSAI1_IsReady>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d137      	bne.n	8006248 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ec:	4313      	orrs	r3, r2
 80061ee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006202:	4313      	orrs	r3, r2
 8006204:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006206:	f7ff fe24 	bl	8005e52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800620a:	f7fc fab5 	bl	8002778 <HAL_GetTick>
 800620e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006210:	e009      	b.n	8006226 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006212:	f7fc fab1 	bl	8002778 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d902      	bls.n	8006226 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	73fb      	strb	r3, [r7, #15]
        break;
 8006224:	e004      	b.n	8006230 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006226:	f7ff fe32 	bl	8005e8e <LL_RCC_PLLSAI1_IsReady>
 800622a:	4603      	mov	r3, r0
 800622c:	2b01      	cmp	r3, #1
 800622e:	d1f0      	bne.n	8006212 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d108      	bne.n	8006248 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006244:	4313      	orrs	r3, r2
 8006246:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800625e:	f7ff fe07 	bl	8005e70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006262:	f7fc fa89 	bl	8002778 <HAL_GetTick>
 8006266:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006268:	e009      	b.n	800627e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800626a:	f7fc fa85 	bl	8002778 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d902      	bls.n	800627e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	73fb      	strb	r3, [r7, #15]
      break;
 800627c:	e004      	b.n	8006288 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800627e:	f7ff fe06 	bl	8005e8e <LL_RCC_PLLSAI1_IsReady>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f0      	bne.n	800626a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d137      	bne.n	80062fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062a2:	4313      	orrs	r3, r2
 80062a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80062a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b8:	4313      	orrs	r3, r2
 80062ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062bc:	f7ff fdc9 	bl	8005e52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c0:	f7fc fa5a 	bl	8002778 <HAL_GetTick>
 80062c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062c6:	e009      	b.n	80062dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062c8:	f7fc fa56 	bl	8002778 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d902      	bls.n	80062dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	73fb      	strb	r3, [r7, #15]
        break;
 80062da:	e004      	b.n	80062e6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062dc:	f7ff fdd7 	bl	8005e8e <LL_RCC_PLLSAI1_IsReady>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d1f0      	bne.n	80062c8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d108      	bne.n	80062fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062fa:	4313      	orrs	r3, r2
 80062fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006314:	f7ff fdac 	bl	8005e70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006318:	f7fc fa2e 	bl	8002778 <HAL_GetTick>
 800631c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800631e:	e009      	b.n	8006334 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006320:	f7fc fa2a 	bl	8002778 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d902      	bls.n	8006334 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	73fb      	strb	r3, [r7, #15]
      break;
 8006332:	e004      	b.n	800633e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006334:	f7ff fdab 	bl	8005e8e <LL_RCC_PLLSAI1_IsReady>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d137      	bne.n	80063b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006358:	4313      	orrs	r3, r2
 800635a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800635c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800636e:	4313      	orrs	r3, r2
 8006370:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006372:	f7ff fd6e 	bl	8005e52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006376:	f7fc f9ff 	bl	8002778 <HAL_GetTick>
 800637a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800637c:	e009      	b.n	8006392 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800637e:	f7fc f9fb 	bl	8002778 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d902      	bls.n	8006392 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	73fb      	strb	r3, [r7, #15]
        break;
 8006390:	e004      	b.n	800639c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006392:	f7ff fd7c 	bl	8005e8e <LL_RCC_PLLSAI1_IsReady>
 8006396:	4603      	mov	r3, r0
 8006398:	2b01      	cmp	r3, #1
 800639a:	d1f0      	bne.n	800637e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b0:	4313      	orrs	r3, r2
 80063b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e090      	b.n	80064f2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fb fbfd 	bl	8001be4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	22ca      	movs	r2, #202	; 0xca
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2253      	movs	r2, #83	; 0x53
 8006400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f89f 	bl	8006546 <RTC_EnterInitMode>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	22ff      	movs	r2, #255	; 0xff
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2204      	movs	r2, #4
 800641a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e067      	b.n	80064f2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006434:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6899      	ldr	r1, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68d2      	ldr	r2, [r2, #12]
 800645c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6919      	ldr	r1, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	041a      	lsls	r2, r3, #16
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006480:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0203 	bic.w	r2, r2, #3
 8006490:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d113      	bne.n	80064e0 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f81e 	bl	80064fa <HAL_RTC_WaitForSynchro>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00d      	beq.n	80064e0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	22ff      	movs	r2, #255	; 0xff
 80064ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2204      	movs	r2, #4
 80064d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e008      	b.n	80064f2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80064f0:	2300      	movs	r3, #0
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006510:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006512:	f7fc f931 	bl	8002778 <HAL_GetTick>
 8006516:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006518:	e009      	b.n	800652e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800651a:	f7fc f92d 	bl	8002778 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006528:	d901      	bls.n	800652e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e007      	b.n	800653e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ee      	beq.n	800651a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b00      	cmp	r3, #0
 800655a:	d119      	bne.n	8006590 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006566:	f7fc f907 	bl	8002778 <HAL_GetTick>
 800656a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800656c:	e009      	b.n	8006582 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800656e:	f7fc f903 	bl	8002778 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657c:	d901      	bls.n	8006582 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e007      	b.n	8006592 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0ee      	beq.n	800656e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e01d      	b.n	80065e8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fb fe0b 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f000 fb81 	bl	8006ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_TIM_Base_Start_IT+0x50>)
 8006610:	4013      	ands	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b06      	cmp	r3, #6
 8006618:	d00b      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x42>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006620:	d007      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	00010007 	.word	0x00010007

08006644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e01d      	b.n	8006692 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f815 	bl	800669a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f000 fb2c 	bl	8006ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d122      	bne.n	800670a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d11b      	bne.n	800670a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f06f 0202 	mvn.w	r2, #2
 80066da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fad6 	bl	8006ca2 <HAL_TIM_IC_CaptureCallback>
 80066f6:	e005      	b.n	8006704 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fac8 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fad9 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d122      	bne.n	800675e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b04      	cmp	r3, #4
 8006724:	d11b      	bne.n	800675e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f06f 0204 	mvn.w	r2, #4
 800672e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 faac 	bl	8006ca2 <HAL_TIM_IC_CaptureCallback>
 800674a:	e005      	b.n	8006758 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa9e 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 faaf 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b08      	cmp	r3, #8
 800676a:	d122      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b08      	cmp	r3, #8
 8006778:	d11b      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f06f 0208 	mvn.w	r2, #8
 8006782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2204      	movs	r2, #4
 8006788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa82 	bl	8006ca2 <HAL_TIM_IC_CaptureCallback>
 800679e:	e005      	b.n	80067ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa74 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa85 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d122      	bne.n	8006806 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d11b      	bne.n	8006806 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0210 	mvn.w	r2, #16
 80067d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2208      	movs	r2, #8
 80067dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa58 	bl	8006ca2 <HAL_TIM_IC_CaptureCallback>
 80067f2:	e005      	b.n	8006800 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa4a 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa5b 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10e      	bne.n	8006832 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b01      	cmp	r3, #1
 8006820:	d107      	bne.n	8006832 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f06f 0201 	mvn.w	r2, #1
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fb f989 	bl	8001b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d10e      	bne.n	800685e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d107      	bne.n	800685e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fe29 	bl	80074b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686c:	d10e      	bne.n	800688c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006878:	2b80      	cmp	r3, #128	; 0x80
 800687a:	d107      	bne.n	800688c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fe1c 	bl	80074c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d10e      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d107      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa09 	bl	8006cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d10e      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d107      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0220 	mvn.w	r2, #32
 80068dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fddc 	bl	800749c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006902:	2302      	movs	r3, #2
 8006904:	e105      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2202      	movs	r2, #2
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b14      	cmp	r3, #20
 800691a:	f200 80f0 	bhi.w	8006afe <HAL_TIM_PWM_ConfigChannel+0x212>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006979 	.word	0x08006979
 8006928:	08006aff 	.word	0x08006aff
 800692c:	08006aff 	.word	0x08006aff
 8006930:	08006aff 	.word	0x08006aff
 8006934:	080069b9 	.word	0x080069b9
 8006938:	08006aff 	.word	0x08006aff
 800693c:	08006aff 	.word	0x08006aff
 8006940:	08006aff 	.word	0x08006aff
 8006944:	080069fb 	.word	0x080069fb
 8006948:	08006aff 	.word	0x08006aff
 800694c:	08006aff 	.word	0x08006aff
 8006950:	08006aff 	.word	0x08006aff
 8006954:	08006a3b 	.word	0x08006a3b
 8006958:	08006aff 	.word	0x08006aff
 800695c:	08006aff 	.word	0x08006aff
 8006960:	08006aff 	.word	0x08006aff
 8006964:	08006a7d 	.word	0x08006a7d
 8006968:	08006aff 	.word	0x08006aff
 800696c:	08006aff 	.word	0x08006aff
 8006970:	08006aff 	.word	0x08006aff
 8006974:	08006abd 	.word	0x08006abd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fa12 	bl	8006da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0208 	orr.w	r2, r2, #8
 8006992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0204 	bic.w	r2, r2, #4
 80069a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6999      	ldr	r1, [r3, #24]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	619a      	str	r2, [r3, #24]
      break;
 80069b6:	e0a3      	b.n	8006b00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fa6e 	bl	8006ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6999      	ldr	r1, [r3, #24]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	021a      	lsls	r2, r3, #8
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	619a      	str	r2, [r3, #24]
      break;
 80069f8:	e082      	b.n	8006b00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fac7 	bl	8006f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0208 	orr.w	r2, r2, #8
 8006a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0204 	bic.w	r2, r2, #4
 8006a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69d9      	ldr	r1, [r3, #28]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	61da      	str	r2, [r3, #28]
      break;
 8006a38:	e062      	b.n	8006b00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fb1f 	bl	8007084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69d9      	ldr	r1, [r3, #28]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	021a      	lsls	r2, r3, #8
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	61da      	str	r2, [r3, #28]
      break;
 8006a7a:	e041      	b.n	8006b00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fb5c 	bl	8007140 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0208 	orr.w	r2, r2, #8
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0204 	bic.w	r2, r2, #4
 8006aa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006aba:	e021      	b.n	8006b00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fb94 	bl	80071f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	021a      	lsls	r2, r3, #8
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006afc:	e000      	b.n	8006b00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006afe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop

08006b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_TIM_ConfigClockSource+0x18>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e0a8      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006b52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d067      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x124>
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d80b      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x70>
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d073      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x144>
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	d802      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x66>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d06f      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b80:	e078      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d06c      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x144>
 8006b86:	2b30      	cmp	r3, #48	; 0x30
 8006b88:	d06a      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006b8a:	e073      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006b8c:	2b70      	cmp	r3, #112	; 0x70
 8006b8e:	d00d      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x90>
 8006b90:	2b70      	cmp	r3, #112	; 0x70
 8006b92:	d804      	bhi.n	8006b9e <HAL_TIM_ConfigClockSource+0x82>
 8006b94:	2b50      	cmp	r3, #80	; 0x50
 8006b96:	d033      	beq.n	8006c00 <HAL_TIM_ConfigClockSource+0xe4>
 8006b98:	2b60      	cmp	r3, #96	; 0x60
 8006b9a:	d041      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006b9c:	e06a      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba2:	d066      	beq.n	8006c72 <HAL_TIM_ConfigClockSource+0x156>
 8006ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba8:	d017      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006baa:	e063      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	6899      	ldr	r1, [r3, #8]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f000 fbee 	bl	800739c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	609a      	str	r2, [r3, #8]
      break;
 8006bd8:	e04c      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6899      	ldr	r1, [r3, #8]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f000 fbd7 	bl	800739c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bfc:	609a      	str	r2, [r3, #8]
      break;
 8006bfe:	e039      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6859      	ldr	r1, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f000 fb49 	bl	80072a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2150      	movs	r1, #80	; 0x50
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fba2 	bl	8007362 <TIM_ITRx_SetConfig>
      break;
 8006c1e:	e029      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f000 fb68 	bl	8007302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2160      	movs	r1, #96	; 0x60
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fb92 	bl	8007362 <TIM_ITRx_SetConfig>
      break;
 8006c3e:	e019      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f000 fb29 	bl	80072a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2140      	movs	r1, #64	; 0x40
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fb82 	bl	8007362 <TIM_ITRx_SetConfig>
      break;
 8006c5e:	e009      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f000 fb79 	bl	8007362 <TIM_ITRx_SetConfig>
      break;
 8006c70:	e000      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a2a      	ldr	r2, [pc, #168]	; (8006d9c <TIM_Base_SetConfig+0xbc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_Base_SetConfig+0x20>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfe:	d108      	bne.n	8006d12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a21      	ldr	r2, [pc, #132]	; (8006d9c <TIM_Base_SetConfig+0xbc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00b      	beq.n	8006d32 <TIM_Base_SetConfig+0x52>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d20:	d007      	beq.n	8006d32 <TIM_Base_SetConfig+0x52>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1e      	ldr	r2, [pc, #120]	; (8006da0 <TIM_Base_SetConfig+0xc0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_Base_SetConfig+0x52>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <TIM_Base_SetConfig+0xc4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a0c      	ldr	r2, [pc, #48]	; (8006d9c <TIM_Base_SetConfig+0xbc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <TIM_Base_SetConfig+0xa0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0b      	ldr	r2, [pc, #44]	; (8006da0 <TIM_Base_SetConfig+0xc0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0xa0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <TIM_Base_SetConfig+0xc4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d103      	bne.n	8006d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40014400 	.word	0x40014400
 8006da4:	40014800 	.word	0x40014800

08006da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 0302 	bic.w	r3, r3, #2
 8006df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a24      	ldr	r2, [pc, #144]	; (8006e94 <TIM_OC1_SetConfig+0xec>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_OC1_SetConfig+0x70>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a23      	ldr	r2, [pc, #140]	; (8006e98 <TIM_OC1_SetConfig+0xf0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_OC1_SetConfig+0x70>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a22      	ldr	r2, [pc, #136]	; (8006e9c <TIM_OC1_SetConfig+0xf4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d10c      	bne.n	8006e32 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0308 	bic.w	r3, r3, #8
 8006e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f023 0304 	bic.w	r3, r3, #4
 8006e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <TIM_OC1_SetConfig+0xec>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_OC1_SetConfig+0xa2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <TIM_OC1_SetConfig+0xf4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC1_SetConfig+0xa2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <TIM_OC1_SetConfig+0xf0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d111      	bne.n	8006e6e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40014800 	.word	0x40014800
 8006e9c:	40014400 	.word	0x40014400

08006ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0210 	bic.w	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 0320 	bic.w	r3, r3, #32
 8006eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10d      	bne.n	8006f20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a19      	ldr	r2, [pc, #100]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_OC2_SetConfig+0x98>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <TIM_OC2_SetConfig+0xec>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_OC2_SetConfig+0x98>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a17      	ldr	r2, [pc, #92]	; (8006f90 <TIM_OC2_SetConfig+0xf0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d113      	bne.n	8006f60 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40012c00 	.word	0x40012c00
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800

08006f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <TIM_OC3_SetConfig+0xe4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d10d      	bne.n	8007012 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a18      	ldr	r2, [pc, #96]	; (8007078 <TIM_OC3_SetConfig+0xe4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <TIM_OC3_SetConfig+0x96>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a17      	ldr	r2, [pc, #92]	; (800707c <TIM_OC3_SetConfig+0xe8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_OC3_SetConfig+0x96>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <TIM_OC3_SetConfig+0xec>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d113      	bne.n	8007052 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	621a      	str	r2, [r3, #32]
}
 800706c:	bf00      	nop
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	40012c00 	.word	0x40012c00
 800707c:	40014400 	.word	0x40014400
 8007080:	40014800 	.word	0x40014800

08007084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	031b      	lsls	r3, r3, #12
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a14      	ldr	r2, [pc, #80]	; (8007134 <TIM_OC4_SetConfig+0xb0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d007      	beq.n	80070f8 <TIM_OC4_SetConfig+0x74>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a13      	ldr	r2, [pc, #76]	; (8007138 <TIM_OC4_SetConfig+0xb4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_OC4_SetConfig+0x74>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a12      	ldr	r2, [pc, #72]	; (800713c <TIM_OC4_SetConfig+0xb8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d109      	bne.n	800710c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	019b      	lsls	r3, r3, #6
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40012c00 	.word	0x40012c00
 8007138:	40014400 	.word	0x40014400
 800713c:	40014800 	.word	0x40014800

08007140 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	041b      	lsls	r3, r3, #16
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a13      	ldr	r2, [pc, #76]	; (80071e4 <TIM_OC5_SetConfig+0xa4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <TIM_OC5_SetConfig+0x6a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a12      	ldr	r2, [pc, #72]	; (80071e8 <TIM_OC5_SetConfig+0xa8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_OC5_SetConfig+0x6a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a11      	ldr	r2, [pc, #68]	; (80071ec <TIM_OC5_SetConfig+0xac>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d109      	bne.n	80071be <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	051b      	lsls	r3, r3, #20
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a14      	ldr	r2, [pc, #80]	; (8007298 <TIM_OC6_SetConfig+0xa8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d007      	beq.n	800725c <TIM_OC6_SetConfig+0x6c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a13      	ldr	r2, [pc, #76]	; (800729c <TIM_OC6_SetConfig+0xac>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_OC6_SetConfig+0x6c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a12      	ldr	r2, [pc, #72]	; (80072a0 <TIM_OC6_SetConfig+0xb0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d109      	bne.n	8007270 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007262:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	029b      	lsls	r3, r3, #10
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	621a      	str	r2, [r3, #32]
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40012c00 	.word	0x40012c00
 800729c:	40014400 	.word	0x40014400
 80072a0:	40014800 	.word	0x40014800

080072a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f023 0201 	bic.w	r2, r3, #1
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f023 030a 	bic.w	r3, r3, #10
 80072e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	621a      	str	r2, [r3, #32]
}
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007302:	b480      	push	{r7}
 8007304:	b087      	sub	sp, #28
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f023 0210 	bic.w	r2, r3, #16
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800732c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	031b      	lsls	r3, r3, #12
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800733e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	f043 0307 	orr.w	r3, r3, #7
 8007388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	021a      	lsls	r2, r3, #8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	431a      	orrs	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	609a      	str	r2, [r3, #8]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e04a      	b.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d108      	bne.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007424:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a12      	ldr	r2, [pc, #72]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d004      	beq.n	800745e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745c:	d10c      	bne.n	8007478 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	4313      	orrs	r3, r2
 800746e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40012c00 	.word	0x40012c00

0800749c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e072      	b.n	80075d0 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fb f888 	bl	8002614 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6819      	ldr	r1, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8007522:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800752a:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8007530:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8007536:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800753c:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8007542:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8007548:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7b1b      	ldrb	r3, [r3, #12]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007568:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	43d2      	mvns	r2, r2
 8007580:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800759a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681c      	ldr	r4, [r3, #0]
 80075a4:	4610      	mov	r0, r2
 80075a6:	f000 f952 	bl	800784e <TSC_extract_groups>
 80075aa:	4603      	mov	r3, r0
 80075ac:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0203 	bic.w	r2, r2, #3
 80075bc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2203      	movs	r2, #3
 80075c4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd90      	pop	{r4, r7, pc}

080075d8 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_TSC_Start_IT+0x16>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e04b      	b.n	8007686 <HAL_TSC_Start_IT+0xae>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2202      	movs	r2, #2
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0201 	orr.w	r2, r2, #1
 800760c:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d108      	bne.n	800762a <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0202 	orr.w	r2, r2, #2
 8007626:	605a      	str	r2, [r3, #4]
 8007628:	e007      	b.n	800763a <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0202 	bic.w	r2, r2, #2
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2203      	movs	r2, #3
 8007640:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0210 	bic.w	r2, r2, #16
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e007      	b.n	800766c <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0210 	orr.w	r2, r2, #16
 800766a:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0202 	orr.w	r2, r2, #2
 800767a:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	3310      	adds	r3, #16
 80076aa:	2101      	movs	r1, #1
 80076ac:	fa01 f303 	lsl.w	r3, r1, r3
 80076b0:	401a      	ands	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	3310      	adds	r3, #16
 80076ba:	2101      	movs	r1, #1
 80076bc:	fa01 f303 	lsl.w	r3, r1, r3
 80076c0:	429a      	cmp	r2, r3
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	330c      	adds	r3, #12
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	685b      	ldr	r3, [r3, #4]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 80076fa:	b590      	push	{r4, r7, lr}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_TSC_IOConfig+0x18>
 800770e:	2302      	movs	r3, #2
 8007710:	e032      	b.n	8007778 <HAL_TSC_IOConfig+0x7e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0202 	bic.w	r2, r2, #2
 8007728:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	431a      	orrs	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	43d2      	mvns	r2, r2
 8007740:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6819      	ldr	r1, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	6892      	ldr	r2, [r2, #8]
 800775a:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681c      	ldr	r4, [r3, #0]
 8007764:	4610      	mov	r0, r2
 8007766:	f000 f872 	bl	800784e <TSC_extract_groups>
 800776a:	4603      	mov	r3, r0
 800776c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bd90      	pop	{r4, r7, pc}

08007780 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_TSC_IODischarge+0x1a>
 8007796:	2302      	movs	r3, #2
 8007798:	e01c      	b.n	80077d4 <HAL_TSC_IODischarge+0x54>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d108      	bne.n	80077ba <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0210 	bic.w	r2, r2, #16
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	e007      	b.n	80077ca <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0210 	orr.w	r2, r2, #16
 80077c8:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d103      	bne.n	80077fe <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2201      	movs	r2, #1
 80077fc:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b02      	cmp	r3, #2
 800780a:	d10b      	bne.n	8007824 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2202      	movs	r2, #2
 8007812:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2203      	movs	r2, #3
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f80c 	bl	800783a <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8007822:	e006      	b.n	8007832 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7fa f91b 	bl	8001a68 <HAL_TSC_ConvCpltCallback>
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	e011      	b.n	8007884 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	220f      	movs	r2, #15
 8007866:	409a      	lsls	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8007870:	2201      	movs	r2, #1
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	3301      	adds	r3, #1
 8007882:	60bb      	str	r3, [r7, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b06      	cmp	r3, #6
 8007888:	d9ea      	bls.n	8007860 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800788a:	68fb      	ldr	r3, [r7, #12]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af02      	add	r7, sp, #8
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <osThreadFlagsSet+0x1a>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	da03      	bge.n	80078ba <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80078b2:	f06f 0303 	mvn.w	r3, #3
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e046      	b.n	8007948 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295
 80078be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c0:	f3ef 8305 	mrs	r3, IPSR
 80078c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80078c6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078cc:	f3ef 8310 	mrs	r3, PRIMASK
 80078d0:	617b      	str	r3, [r7, #20]
  return(result);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <osThreadFlagsSet+0x54>
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <osThreadFlagsSet+0xbc>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d126      	bne.n	800792e <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078e0:	f3ef 8311 	mrs	r3, BASEPRI
 80078e4:	613b      	str	r3, [r7, #16]
  return(result);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d020      	beq.n	800792e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80078f0:	f107 0308 	add.w	r3, r7, #8
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	2300      	movs	r3, #0
 80078f8:	2201      	movs	r2, #1
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	69f8      	ldr	r0, [r7, #28]
 80078fe:	f001 fd7b 	bl	80093f8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007902:	f107 020c 	add.w	r2, r7, #12
 8007906:	2300      	movs	r3, #0
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4613      	mov	r3, r2
 800790c:	2200      	movs	r2, #0
 800790e:	2100      	movs	r1, #0
 8007910:	69f8      	ldr	r0, [r7, #28]
 8007912:	f001 fd71 	bl	80093f8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d015      	beq.n	8007948 <osThreadFlagsSet+0xb0>
 800791c:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <osThreadFlagsSet+0xc0>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	e00c      	b.n	8007948 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800792e:	2300      	movs	r3, #0
 8007930:	2201      	movs	r2, #1
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	69f8      	ldr	r0, [r7, #28]
 8007936:	f001 fcbb 	bl	80092b0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800793a:	f107 030c 	add.w	r3, r7, #12
 800793e:	2200      	movs	r2, #0
 8007940:	2100      	movs	r1, #0
 8007942:	69f8      	ldr	r0, [r7, #28]
 8007944:	f001 fcb4 	bl	80092b0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8007948:	68fb      	ldr	r3, [r7, #12]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	200000dc 	.word	0x200000dc
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <osSemaphoreAcquire>:
  }

  return ((osSemaphoreId_t)hSemaphore);
}

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007974:	f06f 0303 	mvn.w	r3, #3
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	e04b      	b.n	8007a14 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800797c:	f3ef 8305 	mrs	r3, IPSR
 8007980:	617b      	str	r3, [r7, #20]
  return(result);
 8007982:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10f      	bne.n	80079a8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007988:	f3ef 8310 	mrs	r3, PRIMASK
 800798c:	613b      	str	r3, [r7, #16]
  return(result);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d109      	bne.n	80079a8 <osSemaphoreAcquire+0x4c>
 8007994:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <osSemaphoreAcquire+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d128      	bne.n	80079ee <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800799c:	f3ef 8311 	mrs	r3, BASEPRI
 80079a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d022      	beq.n	80079ee <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80079ae:	f06f 0303 	mvn.w	r3, #3
 80079b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80079b4:	e02d      	b.n	8007a12 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80079ba:	f107 0308 	add.w	r3, r7, #8
 80079be:	461a      	mov	r2, r3
 80079c0:	2100      	movs	r1, #0
 80079c2:	69b8      	ldr	r0, [r7, #24]
 80079c4:	f000 fdde 	bl	8008584 <xQueueReceiveFromISR>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d003      	beq.n	80079d6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80079ce:	f06f 0302 	mvn.w	r3, #2
 80079d2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80079d4:	e01d      	b.n	8007a12 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <osSemaphoreAcquire+0xb6>
 80079dc:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <osSemaphoreAcquire+0xc8>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80079ec:	e011      	b.n	8007a12 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	69b8      	ldr	r0, [r7, #24]
 80079f2:	f000 fcbf 	bl	8008374 <xQueueSemaphoreTake>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d00b      	beq.n	8007a14 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007a02:	f06f 0301 	mvn.w	r3, #1
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	e004      	b.n	8007a14 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007a0a:	f06f 0302 	mvn.w	r3, #2
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	e000      	b.n	8007a14 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007a12:	bf00      	nop
      }
    }
  }

  return (stat);
 8007a14:	69fb      	ldr	r3, [r7, #28]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200000dc 	.word	0x200000dc
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007a3e:	f06f 0303 	mvn.w	r3, #3
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e03e      	b.n	8007ac4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a46:	f3ef 8305 	mrs	r3, IPSR
 8007a4a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a4c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10f      	bne.n	8007a72 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a52:	f3ef 8310 	mrs	r3, PRIMASK
 8007a56:	613b      	str	r3, [r7, #16]
  return(result);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d109      	bne.n	8007a72 <osSemaphoreRelease+0x4a>
 8007a5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ad0 <osSemaphoreRelease+0xa8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d120      	bne.n	8007aa8 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a66:	f3ef 8311 	mrs	r3, BASEPRI
 8007a6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01a      	beq.n	8007aa8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	69b8      	ldr	r0, [r7, #24]
 8007a7e:	f000 fbef 	bl	8008260 <xQueueGiveFromISR>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d003      	beq.n	8007a90 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007a88:	f06f 0302 	mvn.w	r3, #2
 8007a8c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a8e:	e018      	b.n	8007ac2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d015      	beq.n	8007ac2 <osSemaphoreRelease+0x9a>
 8007a96:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <osSemaphoreRelease+0xac>)
 8007a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007aa6:	e00c      	b.n	8007ac2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2100      	movs	r1, #0
 8007aae:	69b8      	ldr	r0, [r7, #24]
 8007ab0:	f000 fa48 	bl	8007f44 <xQueueGenericSend>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d004      	beq.n	8007ac4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007aba:	f06f 0302 	mvn.w	r3, #2
 8007abe:	61fb      	str	r3, [r7, #28]
 8007ac0:	e000      	b.n	8007ac4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007ac2:	bf00      	nop
    }
  }

  return (stat);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3720      	adds	r7, #32
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	200000dc 	.word	0x200000dc
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007af0:	f3ef 8305 	mrs	r3, IPSR
 8007af4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007af6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10f      	bne.n	8007b1c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afc:	f3ef 8310 	mrs	r3, PRIMASK
 8007b00:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <osMessageQueuePut+0x44>
 8007b08:	4b2b      	ldr	r3, [pc, #172]	; (8007bb8 <osMessageQueuePut+0xe0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d12e      	bne.n	8007b6e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b10:	f3ef 8311 	mrs	r3, BASEPRI
 8007b14:	617b      	str	r3, [r7, #20]
  return(result);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d028      	beq.n	8007b6e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <osMessageQueuePut+0x56>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <osMessageQueuePut+0x56>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007b2e:	f06f 0303 	mvn.w	r3, #3
 8007b32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b34:	e039      	b.n	8007baa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007b3a:	f107 0210 	add.w	r2, r7, #16
 8007b3e:	2300      	movs	r3, #0
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	6a38      	ldr	r0, [r7, #32]
 8007b44:	f000 faf8 	bl	8008138 <xQueueGenericSendFromISR>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d003      	beq.n	8007b56 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007b4e:	f06f 0302 	mvn.w	r3, #2
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b54:	e029      	b.n	8007baa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d026      	beq.n	8007baa <osMessageQueuePut+0xd2>
 8007b5c:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <osMessageQueuePut+0xe4>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b6c:	e01d      	b.n	8007baa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <osMessageQueuePut+0xa2>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007b7a:	f06f 0303 	mvn.w	r3, #3
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b80:	e014      	b.n	8007bac <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b82:	2300      	movs	r3, #0
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	6a38      	ldr	r0, [r7, #32]
 8007b8a:	f000 f9db 	bl	8007f44 <xQueueGenericSend>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d00b      	beq.n	8007bac <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007b9a:	f06f 0301 	mvn.w	r3, #1
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba0:	e004      	b.n	8007bac <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007ba2:	f06f 0302 	mvn.w	r3, #2
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba8:	e000      	b.n	8007bac <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007baa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3728      	adds	r7, #40	; 0x28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200000dc 	.word	0x200000dc
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	e01e      	b.n	8007c16 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd8:	f3ef 8305 	mrs	r3, IPSR
 8007bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8007bde:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10f      	bne.n	8007c04 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be4:	f3ef 8310 	mrs	r3, PRIMASK
 8007be8:	613b      	str	r3, [r7, #16]
  return(result);
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d109      	bne.n	8007c04 <osMessageQueueGetCount+0x44>
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <osMessageQueueGetCount+0x60>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d10a      	bne.n	8007c0e <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007c04:	69b8      	ldr	r0, [r7, #24]
 8007c06:	f000 fd57 	bl	80086b8 <uxQueueMessagesWaitingFromISR>
 8007c0a:	61f8      	str	r0, [r7, #28]
 8007c0c:	e003      	b.n	8007c16 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007c0e:	69b8      	ldr	r0, [r7, #24]
 8007c10:	f000 fd35 	bl	800867e <uxQueueMessagesWaiting>
 8007c14:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007c16:	69fb      	ldr	r3, [r7, #28]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	200000dc 	.word	0x200000dc

08007c24 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	601a      	str	r2, [r3, #0]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d103      	bne.n	8007c8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e00c      	b.n	8007ca6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e002      	b.n	8007c9a <vListInsert+0x2e>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d2f6      	bcs.n	8007c94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6892      	ldr	r2, [r2, #8]
 8007cf4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6852      	ldr	r2, [r2, #4]
 8007cfe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d103      	bne.n	8007d12 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	1e5a      	subs	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d40 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d40:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <pxCurrentTCBConst2>)
 8007d42:	6819      	ldr	r1, [r3, #0]
 8007d44:	6808      	ldr	r0, [r1, #0]
 8007d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4a:	f380 8809 	msr	PSP, r0
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f04f 0000 	mov.w	r0, #0
 8007d56:	f380 8811 	msr	BASEPRI, r0
 8007d5a:	4770      	bx	lr
 8007d5c:	f3af 8000 	nop.w

08007d60 <pxCurrentTCBConst2>:
 8007d60:	200000e8 	.word	0x200000e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d80:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <vPortEnterCritical+0x54>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <vPortEnterCritical+0x54>)
 8007d88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <vPortEnterCritical+0x54>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d10e      	bne.n	8007db0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d92:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <vPortEnterCritical+0x58>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d009      	beq.n	8007db0 <vPortEnterCritical+0x48>
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	603b      	str	r3, [r7, #0]
 8007dae:	e7fe      	b.n	8007dae <vPortEnterCritical+0x46>
	}
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000014 	.word	0x20000014
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dca:	4b11      	ldr	r3, [pc, #68]	; (8007e10 <vPortExitCritical+0x4c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <vPortExitCritical+0x22>
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	607b      	str	r3, [r7, #4]
 8007de4:	e7fe      	b.n	8007de4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007de6:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <vPortExitCritical+0x4c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <vPortExitCritical+0x4c>)
 8007dee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <vPortExitCritical+0x4c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d104      	bne.n	8007e02 <vPortExitCritical+0x3e>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000014 	.word	0x20000014
	...

08007e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f01e 0f10 	tst.w	lr, #16
 8007e30:	bf08      	it	eq
 8007e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	6010      	str	r0, [r2, #0]
 8007e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e44:	f380 8811 	msr	BASEPRI, r0
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f000 fee6 	bl	8008c20 <vTaskSwitchContext>
 8007e54:	f04f 0000 	mov.w	r0, #0
 8007e58:	f380 8811 	msr	BASEPRI, r0
 8007e5c:	bc09      	pop	{r0, r3}
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	6808      	ldr	r0, [r1, #0]
 8007e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e66:	f01e 0f10 	tst.w	lr, #16
 8007e6a:	bf08      	it	eq
 8007e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e70:	f380 8809 	msr	PSP, r0
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst>:
 8007e80:	200000e8 	.word	0x200000e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ea0:	f000 fdf8 	bl	8008a94 <xTaskIncrementTick>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <SysTick_Handler+0x3c>)
 8007eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ece:	f3ef 8305 	mrs	r3, IPSR
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b0f      	cmp	r3, #15
 8007ed8:	d913      	bls.n	8007f02 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eda:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <vPortValidateInterruptPriority+0x6c>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee4:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <vPortValidateInterruptPriority+0x70>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d209      	bcs.n	8007f02 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
 8007f00:	e7fe      	b.n	8007f00 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <vPortValidateInterruptPriority+0x74>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <vPortValidateInterruptPriority+0x78>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d909      	bls.n	8007f26 <vPortValidateInterruptPriority+0x5e>
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	e7fe      	b.n	8007f24 <vPortValidateInterruptPriority+0x5c>
	}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	e000e3f0 	.word	0xe000e3f0
 8007f38:	200000e0 	.word	0x200000e0
 8007f3c:	e000ed0c 	.word	0xe000ed0c
 8007f40:	200000e4 	.word	0x200000e4

08007f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08e      	sub	sp, #56	; 0x38
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f52:	2300      	movs	r3, #0
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <xQueueGenericSend+0x30>
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f72:	e7fe      	b.n	8007f72 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d103      	bne.n	8007f82 <xQueueGenericSend+0x3e>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <xQueueGenericSend+0x42>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <xQueueGenericSend+0x44>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d109      	bne.n	8007fa0 <xQueueGenericSend+0x5c>
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9e:	e7fe      	b.n	8007f9e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d103      	bne.n	8007fae <xQueueGenericSend+0x6a>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <xQueueGenericSend+0x6e>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <xQueueGenericSend+0x70>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <xQueueGenericSend+0x88>
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	623b      	str	r3, [r7, #32]
 8007fca:	e7fe      	b.n	8007fca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fcc:	f000 ffe0 	bl	8008f90 <xTaskGetSchedulerState>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <xQueueGenericSend+0x98>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <xQueueGenericSend+0x9c>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <xQueueGenericSend+0x9e>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <xQueueGenericSend+0xb6>
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	e7fe      	b.n	8007ff8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ffa:	f7ff feb5 	bl	8007d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008006:	429a      	cmp	r2, r3
 8008008:	d302      	bcc.n	8008010 <xQueueGenericSend+0xcc>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d129      	bne.n	8008064 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008016:	f000 fb82 	bl	800871e <prvCopyDataToQueue>
 800801a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fea5 	bl	8008d78 <xTaskRemoveFromEventList>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d013      	beq.n	800805c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008034:	4b3f      	ldr	r3, [pc, #252]	; (8008134 <xQueueGenericSend+0x1f0>)
 8008036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	e00a      	b.n	800805c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800804c:	4b39      	ldr	r3, [pc, #228]	; (8008134 <xQueueGenericSend+0x1f0>)
 800804e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800805c:	f7ff feb2 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 8008060:	2301      	movs	r3, #1
 8008062:	e063      	b.n	800812c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d103      	bne.n	8008072 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800806a:	f7ff feab 	bl	8007dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800806e:	2300      	movs	r3, #0
 8008070:	e05c      	b.n	800812c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008078:	f107 0314 	add.w	r3, r7, #20
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fedf 	bl	8008e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008082:	2301      	movs	r3, #1
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008086:	f7ff fe9d 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800808a:	f000 fc59 	bl	8008940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800808e:	f7ff fe6b 	bl	8007d68 <vPortEnterCritical>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008098:	b25b      	sxtb	r3, r3
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d103      	bne.n	80080a8 <xQueueGenericSend+0x164>
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d103      	bne.n	80080be <xQueueGenericSend+0x17a>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080be:	f7ff fe81 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080c2:	1d3a      	adds	r2, r7, #4
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fece 	bl	8008e6c <xTaskCheckForTimeOut>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d124      	bne.n	8008120 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080d8:	f000 fc19 	bl	800890e <prvIsQueueFull>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d018      	beq.n	8008114 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	3310      	adds	r3, #16
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fe20 	bl	8008d30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080f2:	f000 fba4 	bl	800883e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080f6:	f000 fc31 	bl	800895c <xTaskResumeAll>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f47f af7c 	bne.w	8007ffa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008102:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <xQueueGenericSend+0x1f0>)
 8008104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	e772      	b.n	8007ffa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008116:	f000 fb92 	bl	800883e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800811a:	f000 fc1f 	bl	800895c <xTaskResumeAll>
 800811e:	e76c      	b.n	8007ffa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008122:	f000 fb8c 	bl	800883e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008126:	f000 fc19 	bl	800895c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800812a:	2300      	movs	r3, #0
		}
	}
}
 800812c:	4618      	mov	r0, r3
 800812e:	3738      	adds	r7, #56	; 0x38
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08e      	sub	sp, #56	; 0x38
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <xQueueGenericSendFromISR+0x2c>
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
 8008162:	e7fe      	b.n	8008162 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <xQueueGenericSendFromISR+0x3a>
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <xQueueGenericSendFromISR+0x3e>
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <xQueueGenericSendFromISR+0x40>
 8008176:	2300      	movs	r3, #0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <xQueueGenericSendFromISR+0x58>
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	623b      	str	r3, [r7, #32]
 800818e:	e7fe      	b.n	800818e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d103      	bne.n	800819e <xQueueGenericSendFromISR+0x66>
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <xQueueGenericSendFromISR+0x6a>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <xQueueGenericSendFromISR+0x6c>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d109      	bne.n	80081bc <xQueueGenericSendFromISR+0x84>
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	e7fe      	b.n	80081ba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081bc:	f7ff fe84 	bl	8007ec8 <vPortValidateInterruptPriority>
	__asm volatile
 80081c0:	f3ef 8211 	mrs	r2, BASEPRI
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	61ba      	str	r2, [r7, #24]
 80081d6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80081d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d302      	bcc.n	80081ee <xQueueGenericSendFromISR+0xb6>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d12c      	bne.n	8008248 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	68b9      	ldr	r1, [r7, #8]
 80081fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081fe:	f000 fa8e 	bl	800871e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008202:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d112      	bne.n	8008232 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d016      	beq.n	8008242 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	3324      	adds	r3, #36	; 0x24
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fdad 	bl	8008d78 <xTaskRemoveFromEventList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00e      	beq.n	8008242 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e007      	b.n	8008242 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008232:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008236:	3301      	adds	r3, #1
 8008238:	b2db      	uxtb	r3, r3
 800823a:	b25a      	sxtb	r2, r3
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008242:	2301      	movs	r3, #1
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008246:	e001      	b.n	800824c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008248:	2300      	movs	r3, #0
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008258:	4618      	mov	r0, r3
 800825a:	3738      	adds	r7, #56	; 0x38
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08e      	sub	sp, #56	; 0x38
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	623b      	str	r3, [r7, #32]
 8008286:	e7fe      	b.n	8008286 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d009      	beq.n	80082a4 <xQueueGiveFromISR+0x44>
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61fb      	str	r3, [r7, #28]
 80082a2:	e7fe      	b.n	80082a2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d103      	bne.n	80082b4 <xQueueGiveFromISR+0x54>
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <xQueueGiveFromISR+0x58>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <xQueueGiveFromISR+0x5a>
 80082b8:	2300      	movs	r3, #0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <xQueueGiveFromISR+0x72>
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	61bb      	str	r3, [r7, #24]
 80082d0:	e7fe      	b.n	80082d0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082d2:	f7ff fdf9 	bl	8007ec8 <vPortValidateInterruptPriority>
	__asm volatile
 80082d6:	f3ef 8211 	mrs	r2, BASEPRI
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	617a      	str	r2, [r7, #20]
 80082ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80082ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082fe:	429a      	cmp	r2, r3
 8008300:	d22b      	bcs.n	800835a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008314:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d112      	bne.n	8008344 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b00      	cmp	r3, #0
 8008324:	d016      	beq.n	8008354 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	3324      	adds	r3, #36	; 0x24
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fd24 	bl	8008d78 <xTaskRemoveFromEventList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00e      	beq.n	8008354 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e007      	b.n	8008354 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008348:	3301      	adds	r3, #1
 800834a:	b2db      	uxtb	r3, r3
 800834c:	b25a      	sxtb	r2, r3
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008354:	2301      	movs	r3, #1
 8008356:	637b      	str	r3, [r7, #52]	; 0x34
 8008358:	e001      	b.n	800835e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800835a:	2300      	movs	r3, #0
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800836a:	4618      	mov	r0, r3
 800836c:	3738      	adds	r7, #56	; 0x38
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08e      	sub	sp, #56	; 0x38
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008386:	2300      	movs	r3, #0
 8008388:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d109      	bne.n	80083a4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	623b      	str	r3, [r7, #32]
 80083a2:	e7fe      	b.n	80083a2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <xQueueSemaphoreTake+0x4c>
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e7fe      	b.n	80083be <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083c0:	f000 fde6 	bl	8008f90 <xTaskGetSchedulerState>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <xQueueSemaphoreTake+0x5c>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <xQueueSemaphoreTake+0x60>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <xQueueSemaphoreTake+0x62>
 80083d4:	2300      	movs	r3, #0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d109      	bne.n	80083ee <xQueueSemaphoreTake+0x7a>
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	e7fe      	b.n	80083ec <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80083ee:	f7ff fcbb 	bl	8007d68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d024      	beq.n	8008448 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	1e5a      	subs	r2, r3, #1
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d104      	bne.n	8008418 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800840e:	f000 ff3b 	bl	8009288 <pvTaskIncrementMutexHeldCount>
 8008412:	4602      	mov	r2, r0
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00f      	beq.n	8008440 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	3310      	adds	r3, #16
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fca7 	bl	8008d78 <xTaskRemoveFromEventList>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008430:	4b53      	ldr	r3, [pc, #332]	; (8008580 <xQueueSemaphoreTake+0x20c>)
 8008432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008440:	f7ff fcc0 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 8008444:	2301      	movs	r3, #1
 8008446:	e096      	b.n	8008576 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d110      	bne.n	8008470 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	2b00      	cmp	r3, #0
 8008452:	d009      	beq.n	8008468 <xQueueSemaphoreTake+0xf4>
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e7fe      	b.n	8008466 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008468:	f7ff fcac 	bl	8007dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800846c:	2300      	movs	r3, #0
 800846e:	e082      	b.n	8008576 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fce0 	bl	8008e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008480:	2301      	movs	r3, #1
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008484:	f7ff fc9e 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008488:	f000 fa5a 	bl	8008940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800848c:	f7ff fc6c 	bl	8007d68 <vPortEnterCritical>
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008496:	b25b      	sxtb	r3, r3
 8008498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849c:	d103      	bne.n	80084a6 <xQueueSemaphoreTake+0x132>
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d103      	bne.n	80084bc <xQueueSemaphoreTake+0x148>
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084bc:	f7ff fc82 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084c0:	463a      	mov	r2, r7
 80084c2:	f107 030c 	add.w	r3, r7, #12
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fccf 	bl	8008e6c <xTaskCheckForTimeOut>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d132      	bne.n	800853a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084d6:	f000 fa04 	bl	80088e2 <prvIsQueueEmpty>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d026      	beq.n	800852e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80084e8:	f7ff fc3e 	bl	8007d68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fd6b 	bl	8008fcc <xTaskPriorityInherit>
 80084f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80084f8:	f7ff fc64 	bl	8007dc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	3324      	adds	r3, #36	; 0x24
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fc13 	bl	8008d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800850a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800850c:	f000 f997 	bl	800883e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008510:	f000 fa24 	bl	800895c <xTaskResumeAll>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	f47f af69 	bne.w	80083ee <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800851c:	4b18      	ldr	r3, [pc, #96]	; (8008580 <xQueueSemaphoreTake+0x20c>)
 800851e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	e75f      	b.n	80083ee <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800852e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008530:	f000 f985 	bl	800883e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008534:	f000 fa12 	bl	800895c <xTaskResumeAll>
 8008538:	e759      	b.n	80083ee <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800853a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800853c:	f000 f97f 	bl	800883e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008540:	f000 fa0c 	bl	800895c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008546:	f000 f9cc 	bl	80088e2 <prvIsQueueEmpty>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	f43f af4e 	beq.w	80083ee <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00d      	beq.n	8008574 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008558:	f7ff fc06 	bl	8007d68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800855c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800855e:	f000 f8c6 	bl	80086ee <prvGetDisinheritPriorityAfterTimeout>
 8008562:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fe08 	bl	8009180 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008570:	f7ff fc28 	bl	8007dc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008574:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008576:	4618      	mov	r0, r3
 8008578:	3738      	adds	r7, #56	; 0x38
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08e      	sub	sp, #56	; 0x38
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <xQueueReceiveFromISR+0x2a>
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	623b      	str	r3, [r7, #32]
 80085ac:	e7fe      	b.n	80085ac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d103      	bne.n	80085bc <xQueueReceiveFromISR+0x38>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <xQueueReceiveFromISR+0x3c>
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <xQueueReceiveFromISR+0x3e>
 80085c0:	2300      	movs	r3, #0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <xQueueReceiveFromISR+0x56>
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	61fb      	str	r3, [r7, #28]
 80085d8:	e7fe      	b.n	80085d8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085da:	f7ff fc75 	bl	8007ec8 <vPortValidateInterruptPriority>
	__asm volatile
 80085de:	f3ef 8211 	mrs	r2, BASEPRI
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	61ba      	str	r2, [r7, #24]
 80085f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80085f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d02f      	beq.n	8008666 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800860c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008614:	f000 f8ed 	bl	80087f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	1e5a      	subs	r2, r3, #1
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008620:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d112      	bne.n	8008650 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d016      	beq.n	8008660 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	3310      	adds	r3, #16
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fb9e 	bl	8008d78 <xTaskRemoveFromEventList>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00e      	beq.n	8008660 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e007      	b.n	8008660 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008654:	3301      	adds	r3, #1
 8008656:	b2db      	uxtb	r3, r3
 8008658:	b25a      	sxtb	r2, r3
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008660:	2301      	movs	r3, #1
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
 8008664:	e001      	b.n	800866a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008666:	2300      	movs	r3, #0
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008676:	4618      	mov	r0, r3
 8008678:	3738      	adds	r7, #56	; 0x38
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d109      	bne.n	80086a0 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60bb      	str	r3, [r7, #8]
 800869e:	e7fe      	b.n	800869e <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80086a0:	f7ff fb62 	bl	8007d68 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80086aa:	f7ff fb8b 	bl	8007dc4 <vPortExitCritical>

	return uxReturn;
 80086ae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <uxQueueMessagesWaitingFromISR+0x22>
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	e7fe      	b.n	80086d8 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80086e0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d006      	beq.n	800870c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	e001      	b.n	8008710 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008710:	68fb      	ldr	r3, [r7, #12]
	}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b086      	sub	sp, #24
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10d      	bne.n	8008758 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d14d      	bne.n	80087e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fcad 	bl	80090a8 <xTaskPriorityDisinherit>
 800874e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	605a      	str	r2, [r3, #4]
 8008756:	e043      	b.n	80087e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d119      	bne.n	8008792 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6898      	ldr	r0, [r3, #8]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	461a      	mov	r2, r3
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	f001 fb21 	bl	8009db0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	441a      	add	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d32b      	bcc.n	80087e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	609a      	str	r2, [r3, #8]
 8008790:	e026      	b.n	80087e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68d8      	ldr	r0, [r3, #12]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	461a      	mov	r2, r3
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	f001 fb07 	bl	8009db0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	425b      	negs	r3, r3
 80087ac:	441a      	add	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d207      	bcs.n	80087ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	425b      	negs	r3, r3
 80087c8:	441a      	add	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d105      	bne.n	80087e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	3b01      	subs	r3, #1
 80087de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087e8:	697b      	ldr	r3, [r7, #20]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d018      	beq.n	8008836 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	441a      	add	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	429a      	cmp	r2, r3
 800881c:	d303      	bcc.n	8008826 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68d9      	ldr	r1, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	461a      	mov	r2, r3
 8008830:	6838      	ldr	r0, [r7, #0]
 8008832:	f001 fabd 	bl	8009db0 <memcpy>
	}
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008846:	f7ff fa8f 	bl	8007d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008850:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008852:	e011      	b.n	8008878 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	d012      	beq.n	8008882 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3324      	adds	r3, #36	; 0x24
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fa89 	bl	8008d78 <xTaskRemoveFromEventList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800886c:	f000 fb5e 	bl	8008f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	3b01      	subs	r3, #1
 8008874:	b2db      	uxtb	r3, r3
 8008876:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	dce9      	bgt.n	8008854 <prvUnlockQueue+0x16>
 8008880:	e000      	b.n	8008884 <prvUnlockQueue+0x46>
					break;
 8008882:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	22ff      	movs	r2, #255	; 0xff
 8008888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800888c:	f7ff fa9a 	bl	8007dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008890:	f7ff fa6a 	bl	8007d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800889a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800889c:	e011      	b.n	80088c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d012      	beq.n	80088cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3310      	adds	r3, #16
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fa64 	bl	8008d78 <xTaskRemoveFromEventList>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088b6:	f000 fb39 	bl	8008f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	3b01      	subs	r3, #1
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dce9      	bgt.n	800889e <prvUnlockQueue+0x60>
 80088ca:	e000      	b.n	80088ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	22ff      	movs	r2, #255	; 0xff
 80088d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088d6:	f7ff fa75 	bl	8007dc4 <vPortExitCritical>
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088ea:	f7ff fa3d 	bl	8007d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088f6:	2301      	movs	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e001      	b.n	8008900 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008900:	f7ff fa60 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8008904:	68fb      	ldr	r3, [r7, #12]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008916:	f7ff fa27 	bl	8007d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008922:	429a      	cmp	r2, r3
 8008924:	d102      	bne.n	800892c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008926:	2301      	movs	r3, #1
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	e001      	b.n	8008930 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800892c:	2300      	movs	r3, #0
 800892e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008930:	f7ff fa48 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8008934:	68fb      	ldr	r3, [r7, #12]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <vTaskSuspendAll+0x18>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3301      	adds	r3, #1
 800894a:	4a03      	ldr	r2, [pc, #12]	; (8008958 <vTaskSuspendAll+0x18>)
 800894c:	6013      	str	r3, [r2, #0]
}
 800894e:	bf00      	nop
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	2000059c 	.word	0x2000059c

0800895c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800896a:	4b41      	ldr	r3, [pc, #260]	; (8008a70 <xTaskResumeAll+0x114>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <xTaskResumeAll+0x2a>
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	e7fe      	b.n	8008984 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008986:	f7ff f9ef 	bl	8007d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800898a:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <xTaskResumeAll+0x114>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3b01      	subs	r3, #1
 8008990:	4a37      	ldr	r2, [pc, #220]	; (8008a70 <xTaskResumeAll+0x114>)
 8008992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008994:	4b36      	ldr	r3, [pc, #216]	; (8008a70 <xTaskResumeAll+0x114>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d162      	bne.n	8008a62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800899c:	4b35      	ldr	r3, [pc, #212]	; (8008a74 <xTaskResumeAll+0x118>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d05e      	beq.n	8008a62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a4:	e02f      	b.n	8008a06 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80089a6:	4b34      	ldr	r3, [pc, #208]	; (8008a78 <xTaskResumeAll+0x11c>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3318      	adds	r3, #24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff f993 	bl	8007cde <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff f98e 	bl	8007cde <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c6:	4b2d      	ldr	r3, [pc, #180]	; (8008a7c <xTaskResumeAll+0x120>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d903      	bls.n	80089d6 <xTaskResumeAll+0x7a>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <xTaskResumeAll+0x120>)
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4a27      	ldr	r2, [pc, #156]	; (8008a80 <xTaskResumeAll+0x124>)
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f7ff f919 	bl	8007c24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f6:	4b23      	ldr	r3, [pc, #140]	; (8008a84 <xTaskResumeAll+0x128>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d302      	bcc.n	8008a06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008a00:	4b21      	ldr	r3, [pc, #132]	; (8008a88 <xTaskResumeAll+0x12c>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a06:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <xTaskResumeAll+0x11c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1cb      	bne.n	80089a6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a14:	f000 fa96 	bl	8008f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a18:	4b1c      	ldr	r3, [pc, #112]	; (8008a8c <xTaskResumeAll+0x130>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d010      	beq.n	8008a46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a24:	f000 f836 	bl	8008a94 <xTaskIncrementTick>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008a2e:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <xTaskResumeAll+0x12c>)
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f1      	bne.n	8008a24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008a40:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <xTaskResumeAll+0x130>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a46:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <xTaskResumeAll+0x12c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a52:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <xTaskResumeAll+0x134>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a62:	f7ff f9af 	bl	8007dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a66:	68bb      	ldr	r3, [r7, #8]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	2000059c 	.word	0x2000059c
 8008a74:	2000057c 	.word	0x2000057c
 8008a78:	20000554 	.word	0x20000554
 8008a7c:	20000584 	.word	0x20000584
 8008a80:	200000ec 	.word	0x200000ec
 8008a84:	200000e8 	.word	0x200000e8
 8008a88:	20000590 	.word	0x20000590
 8008a8c:	2000058c 	.word	0x2000058c
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a9e:	4b55      	ldr	r3, [pc, #340]	; (8008bf4 <xTaskIncrementTick+0x160>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 8093 	bne.w	8008bce <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008aa8:	4b53      	ldr	r3, [pc, #332]	; (8008bf8 <xTaskIncrementTick+0x164>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ab0:	4a51      	ldr	r2, [pc, #324]	; (8008bf8 <xTaskIncrementTick+0x164>)
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d11f      	bne.n	8008afc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008abc:	4b4f      	ldr	r3, [pc, #316]	; (8008bfc <xTaskIncrementTick+0x168>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <xTaskIncrementTick+0x46>
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	e7fe      	b.n	8008ad8 <xTaskIncrementTick+0x44>
 8008ada:	4b48      	ldr	r3, [pc, #288]	; (8008bfc <xTaskIncrementTick+0x168>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	4b47      	ldr	r3, [pc, #284]	; (8008c00 <xTaskIncrementTick+0x16c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a45      	ldr	r2, [pc, #276]	; (8008bfc <xTaskIncrementTick+0x168>)
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	4a45      	ldr	r2, [pc, #276]	; (8008c00 <xTaskIncrementTick+0x16c>)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	4b45      	ldr	r3, [pc, #276]	; (8008c04 <xTaskIncrementTick+0x170>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	4a43      	ldr	r2, [pc, #268]	; (8008c04 <xTaskIncrementTick+0x170>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	f000 fa24 	bl	8008f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008afc:	4b42      	ldr	r3, [pc, #264]	; (8008c08 <xTaskIncrementTick+0x174>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d34e      	bcc.n	8008ba4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b06:	4b3d      	ldr	r3, [pc, #244]	; (8008bfc <xTaskIncrementTick+0x168>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <xTaskIncrementTick+0x80>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <xTaskIncrementTick+0x82>
 8008b14:	2300      	movs	r3, #0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1a:	4b3b      	ldr	r3, [pc, #236]	; (8008c08 <xTaskIncrementTick+0x174>)
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	601a      	str	r2, [r3, #0]
					break;
 8008b22:	e03f      	b.n	8008ba4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b24:	4b35      	ldr	r3, [pc, #212]	; (8008bfc <xTaskIncrementTick+0x168>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d203      	bcs.n	8008b44 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b3c:	4a32      	ldr	r2, [pc, #200]	; (8008c08 <xTaskIncrementTick+0x174>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6013      	str	r3, [r2, #0]
						break;
 8008b42:	e02f      	b.n	8008ba4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff f8c8 	bl	8007cde <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d004      	beq.n	8008b60 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	3318      	adds	r3, #24
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff f8bf 	bl	8007cde <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b64:	4b29      	ldr	r3, [pc, #164]	; (8008c0c <xTaskIncrementTick+0x178>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d903      	bls.n	8008b74 <xTaskIncrementTick+0xe0>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	4a26      	ldr	r2, [pc, #152]	; (8008c0c <xTaskIncrementTick+0x178>)
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4a23      	ldr	r2, [pc, #140]	; (8008c10 <xTaskIncrementTick+0x17c>)
 8008b82:	441a      	add	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f7ff f84a 	bl	8007c24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b94:	4b1f      	ldr	r3, [pc, #124]	; (8008c14 <xTaskIncrementTick+0x180>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d3b3      	bcc.n	8008b06 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba2:	e7b0      	b.n	8008b06 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ba4:	4b1b      	ldr	r3, [pc, #108]	; (8008c14 <xTaskIncrementTick+0x180>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008baa:	4919      	ldr	r1, [pc, #100]	; (8008c10 <xTaskIncrementTick+0x17c>)
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d901      	bls.n	8008bc0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008bc0:	4b15      	ldr	r3, [pc, #84]	; (8008c18 <xTaskIncrementTick+0x184>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d109      	bne.n	8008bdc <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8008bc8:	f7f8 f88c 	bl	8000ce4 <vApplicationTickHook>
 8008bcc:	e006      	b.n	8008bdc <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bce:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <xTaskIncrementTick+0x184>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	4a10      	ldr	r2, [pc, #64]	; (8008c18 <xTaskIncrementTick+0x184>)
 8008bd6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8008bd8:	f7f8 f884 	bl	8000ce4 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <xTaskIncrementTick+0x188>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008be8:	697b      	ldr	r3, [r7, #20]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000059c 	.word	0x2000059c
 8008bf8:	20000580 	.word	0x20000580
 8008bfc:	2000054c 	.word	0x2000054c
 8008c00:	20000550 	.word	0x20000550
 8008c04:	20000594 	.word	0x20000594
 8008c08:	20000598 	.word	0x20000598
 8008c0c:	20000584 	.word	0x20000584
 8008c10:	200000ec 	.word	0x200000ec
 8008c14:	200000e8 	.word	0x200000e8
 8008c18:	2000058c 	.word	0x2000058c
 8008c1c:	20000590 	.word	0x20000590

08008c20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c26:	4b3b      	ldr	r3, [pc, #236]	; (8008d14 <vTaskSwitchContext+0xf4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c2e:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <vTaskSwitchContext+0xf8>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c34:	e06a      	b.n	8008d0c <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8008c36:	4b38      	ldr	r3, [pc, #224]	; (8008d18 <vTaskSwitchContext+0xf8>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008c3c:	f7f8 f84b 	bl	8000cd6 <getRunTimeCounterValue>
 8008c40:	4602      	mov	r2, r0
 8008c42:	4b36      	ldr	r3, [pc, #216]	; (8008d1c <vTaskSwitchContext+0xfc>)
 8008c44:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008c46:	4b35      	ldr	r3, [pc, #212]	; (8008d1c <vTaskSwitchContext+0xfc>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b35      	ldr	r3, [pc, #212]	; (8008d20 <vTaskSwitchContext+0x100>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d909      	bls.n	8008c66 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008c52:	4b34      	ldr	r3, [pc, #208]	; (8008d24 <vTaskSwitchContext+0x104>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008c58:	4a30      	ldr	r2, [pc, #192]	; (8008d1c <vTaskSwitchContext+0xfc>)
 8008c5a:	6810      	ldr	r0, [r2, #0]
 8008c5c:	4a30      	ldr	r2, [pc, #192]	; (8008d20 <vTaskSwitchContext+0x100>)
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	1a82      	subs	r2, r0, r2
 8008c62:	440a      	add	r2, r1
 8008c64:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8008c66:	4b2d      	ldr	r3, [pc, #180]	; (8008d1c <vTaskSwitchContext+0xfc>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a2d      	ldr	r2, [pc, #180]	; (8008d20 <vTaskSwitchContext+0x100>)
 8008c6c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008c6e:	4b2d      	ldr	r3, [pc, #180]	; (8008d24 <vTaskSwitchContext+0x104>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4b2b      	ldr	r3, [pc, #172]	; (8008d24 <vTaskSwitchContext+0x104>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d808      	bhi.n	8008c90 <vTaskSwitchContext+0x70>
 8008c7e:	4b29      	ldr	r3, [pc, #164]	; (8008d24 <vTaskSwitchContext+0x104>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b28      	ldr	r3, [pc, #160]	; (8008d24 <vTaskSwitchContext+0x104>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3334      	adds	r3, #52	; 0x34
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	f7f8 f832 	bl	8000cf4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008c90:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <vTaskSwitchContext+0x108>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e00f      	b.n	8008cb8 <vTaskSwitchContext+0x98>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <vTaskSwitchContext+0x92>
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	607b      	str	r3, [r7, #4]
 8008cb0:	e7fe      	b.n	8008cb0 <vTaskSwitchContext+0x90>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	491c      	ldr	r1, [pc, #112]	; (8008d2c <vTaskSwitchContext+0x10c>)
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0e5      	beq.n	8008c98 <vTaskSwitchContext+0x78>
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4a15      	ldr	r2, [pc, #84]	; (8008d2c <vTaskSwitchContext+0x10c>)
 8008cd8:	4413      	add	r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	3308      	adds	r3, #8
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d104      	bne.n	8008cfc <vTaskSwitchContext+0xdc>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	605a      	str	r2, [r3, #4]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	4a08      	ldr	r2, [pc, #32]	; (8008d24 <vTaskSwitchContext+0x104>)
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	4a08      	ldr	r2, [pc, #32]	; (8008d28 <vTaskSwitchContext+0x108>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6013      	str	r3, [r2, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	2000059c 	.word	0x2000059c
 8008d18:	20000590 	.word	0x20000590
 8008d1c:	200005a4 	.word	0x200005a4
 8008d20:	200005a0 	.word	0x200005a0
 8008d24:	200000e8 	.word	0x200000e8
 8008d28:	20000584 	.word	0x20000584
 8008d2c:	200000ec 	.word	0x200000ec

08008d30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <vTaskPlaceOnEventList+0x24>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e7fe      	b.n	8008d52 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d54:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <vTaskPlaceOnEventList+0x44>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3318      	adds	r3, #24
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7fe ff85 	bl	8007c6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d62:	2101      	movs	r1, #1
 8008d64:	6838      	ldr	r0, [r7, #0]
 8008d66:	f000 fc0f 	bl	8009588 <prvAddCurrentTaskToDelayedList>
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	200000e8 	.word	0x200000e8

08008d78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <xTaskRemoveFromEventList+0x2a>
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	e7fe      	b.n	8008da0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3318      	adds	r3, #24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe ff99 	bl	8007cde <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dac:	4b1e      	ldr	r3, [pc, #120]	; (8008e28 <xTaskRemoveFromEventList+0xb0>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d11d      	bne.n	8008df0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe ff90 	bl	8007cde <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc2:	4b1a      	ldr	r3, [pc, #104]	; (8008e2c <xTaskRemoveFromEventList+0xb4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d903      	bls.n	8008dd2 <xTaskRemoveFromEventList+0x5a>
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	4a17      	ldr	r2, [pc, #92]	; (8008e2c <xTaskRemoveFromEventList+0xb4>)
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4a14      	ldr	r2, [pc, #80]	; (8008e30 <xTaskRemoveFromEventList+0xb8>)
 8008de0:	441a      	add	r2, r3
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7fe ff1b 	bl	8007c24 <vListInsertEnd>
 8008dee:	e005      	b.n	8008dfc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3318      	adds	r3, #24
 8008df4:	4619      	mov	r1, r3
 8008df6:	480f      	ldr	r0, [pc, #60]	; (8008e34 <xTaskRemoveFromEventList+0xbc>)
 8008df8:	f7fe ff14 	bl	8007c24 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	4b0d      	ldr	r3, [pc, #52]	; (8008e38 <xTaskRemoveFromEventList+0xc0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d905      	bls.n	8008e16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <xTaskRemoveFromEventList+0xc4>)
 8008e10:	2201      	movs	r2, #1
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	e001      	b.n	8008e1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 8008e1a:	f000 f893 	bl	8008f44 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 8008e1e:	697b      	ldr	r3, [r7, #20]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	2000059c 	.word	0x2000059c
 8008e2c:	20000584 	.word	0x20000584
 8008e30:	200000ec 	.word	0x200000ec
 8008e34:	20000554 	.word	0x20000554
 8008e38:	200000e8 	.word	0x200000e8
 8008e3c:	20000590 	.word	0x20000590

08008e40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <vTaskInternalSetTimeOutState+0x24>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <vTaskInternalSetTimeOutState+0x28>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	605a      	str	r2, [r3, #4]
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	20000594 	.word	0x20000594
 8008e68:	20000580 	.word	0x20000580

08008e6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d109      	bne.n	8008e90 <xTaskCheckForTimeOut+0x24>
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	613b      	str	r3, [r7, #16]
 8008e8e:	e7fe      	b.n	8008e8e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <xTaskCheckForTimeOut+0x3e>
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e7fe      	b.n	8008ea8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008eaa:	f7fe ff5d 	bl	8007d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eae:	4b1d      	ldr	r3, [pc, #116]	; (8008f24 <xTaskCheckForTimeOut+0xb8>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec6:	d102      	bne.n	8008ece <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61fb      	str	r3, [r7, #28]
 8008ecc:	e023      	b.n	8008f16 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <xTaskCheckForTimeOut+0xbc>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d007      	beq.n	8008eea <xTaskCheckForTimeOut+0x7e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	e015      	b.n	8008f16 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d20b      	bcs.n	8008f0c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	1ad2      	subs	r2, r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff9d 	bl	8008e40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	e004      	b.n	8008f16 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f12:	2301      	movs	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f16:	f7fe ff55 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000580 	.word	0x20000580
 8008f28:	20000594 	.word	0x20000594

08008f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <vTaskMissedYield+0x14>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
}
 8008f36:	bf00      	nop
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20000590 	.word	0x20000590

08008f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <prvResetNextTaskUnblockTime+0x44>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <prvResetNextTaskUnblockTime+0x14>
 8008f54:	2301      	movs	r3, #1
 8008f56:	e000      	b.n	8008f5a <prvResetNextTaskUnblockTime+0x16>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d004      	beq.n	8008f68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <prvResetNextTaskUnblockTime+0x48>)
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f66:	e008      	b.n	8008f7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f68:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <prvResetNextTaskUnblockTime+0x44>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	4a05      	ldr	r2, [pc, #20]	; (8008f8c <prvResetNextTaskUnblockTime+0x48>)
 8008f78:	6013      	str	r3, [r2, #0]
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	2000054c 	.word	0x2000054c
 8008f8c:	20000598 	.word	0x20000598

08008f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <xTaskGetSchedulerState+0x34>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	e008      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa4:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <xTaskGetSchedulerState+0x38>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fac:	2302      	movs	r3, #2
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	e001      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fb6:	687b      	ldr	r3, [r7, #4]
	}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	20000588 	.word	0x20000588
 8008fc8:	2000059c 	.word	0x2000059c

08008fcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d056      	beq.n	8009090 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	4b2d      	ldr	r3, [pc, #180]	; (800909c <xTaskPriorityInherit+0xd0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d246      	bcs.n	800907e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db06      	blt.n	8009006 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff8:	4b28      	ldr	r3, [pc, #160]	; (800909c <xTaskPriorityInherit+0xd0>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6959      	ldr	r1, [r3, #20]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4a22      	ldr	r2, [pc, #136]	; (80090a0 <xTaskPriorityInherit+0xd4>)
 8009018:	4413      	add	r3, r2
 800901a:	4299      	cmp	r1, r3
 800901c:	d101      	bne.n	8009022 <xTaskPriorityInherit+0x56>
 800901e:	2301      	movs	r3, #1
 8009020:	e000      	b.n	8009024 <xTaskPriorityInherit+0x58>
 8009022:	2300      	movs	r3, #0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d022      	beq.n	800906e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	3304      	adds	r3, #4
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe fe56 	bl	8007cde <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <xTaskPriorityInherit+0xd0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009040:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <xTaskPriorityInherit+0xd8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d903      	bls.n	8009050 <xTaskPriorityInherit+0x84>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <xTaskPriorityInherit+0xd8>)
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4a10      	ldr	r2, [pc, #64]	; (80090a0 <xTaskPriorityInherit+0xd4>)
 800905e:	441a      	add	r2, r3
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f7fe fddc 	bl	8007c24 <vListInsertEnd>
 800906c:	e004      	b.n	8009078 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800906e:	4b0b      	ldr	r3, [pc, #44]	; (800909c <xTaskPriorityInherit+0xd0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e008      	b.n	8009090 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009082:	4b06      	ldr	r3, [pc, #24]	; (800909c <xTaskPriorityInherit+0xd0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	429a      	cmp	r2, r3
 800908a:	d201      	bcs.n	8009090 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009090:	68fb      	ldr	r3, [r7, #12]
	}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200000e8 	.word	0x200000e8
 80090a0:	200000ec 	.word	0x200000ec
 80090a4:	20000584 	.word	0x20000584

080090a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d054      	beq.n	8009168 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090be:	4b2d      	ldr	r3, [pc, #180]	; (8009174 <xTaskPriorityDisinherit+0xcc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d009      	beq.n	80090dc <xTaskPriorityDisinherit+0x34>
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e7fe      	b.n	80090da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d109      	bne.n	80090f8 <xTaskPriorityDisinherit+0x50>
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	60bb      	str	r3, [r7, #8]
 80090f6:	e7fe      	b.n	80090f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fc:	1e5a      	subs	r2, r3, #1
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910a:	429a      	cmp	r2, r3
 800910c:	d02c      	beq.n	8009168 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009112:	2b00      	cmp	r3, #0
 8009114:	d128      	bne.n	8009168 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	3304      	adds	r3, #4
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fddf 	bl	8007cde <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <xTaskPriorityDisinherit+0xd0>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d903      	bls.n	8009148 <xTaskPriorityDisinherit+0xa0>
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	4a0c      	ldr	r2, [pc, #48]	; (8009178 <xTaskPriorityDisinherit+0xd0>)
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4a09      	ldr	r2, [pc, #36]	; (800917c <xTaskPriorityDisinherit+0xd4>)
 8009156:	441a      	add	r2, r3
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	3304      	adds	r3, #4
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7fe fd60 	bl	8007c24 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009168:	697b      	ldr	r3, [r7, #20]
	}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200000e8 	.word	0x200000e8
 8009178:	20000584 	.word	0x20000584
 800917c:	200000ec 	.word	0x200000ec

08009180 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800918e:	2301      	movs	r3, #1
 8009190:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d06d      	beq.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	e7fe      	b.n	80091b2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d902      	bls.n	80091c4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	e002      	b.n	80091ca <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d04f      	beq.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d14a      	bne.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80091de:	4b27      	ldr	r3, [pc, #156]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d109      	bne.n	80091fc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	60bb      	str	r3, [r7, #8]
 80091fa:	e7fe      	b.n	80091fa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	db04      	blt.n	800921a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	6959      	ldr	r1, [r3, #20]
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4a15      	ldr	r2, [pc, #84]	; (8009280 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800922a:	4413      	add	r3, r2
 800922c:	4299      	cmp	r1, r3
 800922e:	d101      	bne.n	8009234 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009234:	2300      	movs	r3, #0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01c      	beq.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	3304      	adds	r3, #4
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fd4d 	bl	8007cde <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	4b0e      	ldr	r3, [pc, #56]	; (8009284 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d903      	bls.n	8009258 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	4a0b      	ldr	r2, [pc, #44]	; (8009284 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4a06      	ldr	r2, [pc, #24]	; (8009280 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009266:	441a      	add	r2, r3
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fe fcd8 	bl	8007c24 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009274:	bf00      	nop
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	200000e8 	.word	0x200000e8
 8009280:	200000ec 	.word	0x200000ec
 8009284:	20000584 	.word	0x20000584

08009288 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <pvTaskIncrementMutexHeldCount+0x24>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009294:	4b05      	ldr	r3, [pc, #20]	; (80092ac <pvTaskIncrementMutexHeldCount+0x24>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800929a:	3201      	adds	r2, #1
 800929c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800929e:	4b03      	ldr	r3, [pc, #12]	; (80092ac <pvTaskIncrementMutexHeldCount+0x24>)
 80092a0:	681b      	ldr	r3, [r3, #0]
	}
 80092a2:	4618      	mov	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	200000e8 	.word	0x200000e8

080092b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08a      	sub	sp, #40	; 0x28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	4613      	mov	r3, r2
 80092be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80092c0:	2301      	movs	r3, #1
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <xTaskGenericNotify+0x2e>
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	61bb      	str	r3, [r7, #24]
 80092dc:	e7fe      	b.n	80092dc <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80092e2:	f7fe fd41 	bl	8007d68 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80092fa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d827      	bhi.n	800935a <xTaskGenericNotify+0xaa>
 800930a:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <xTaskGenericNotify+0x60>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	0800935b 	.word	0x0800935b
 8009314:	08009325 	.word	0x08009325
 8009318:	08009333 	.word	0x08009333
 800931c:	0800933f 	.word	0x0800933f
 8009320:	08009347 	.word	0x08009347
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	431a      	orrs	r2, r3
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8009330:	e013      	b.n	800935a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800933c:	e00d      	b.n	800935a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8009344:	e009      	b.n	800935a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009346:	7ffb      	ldrb	r3, [r7, #31]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d003      	beq.n	8009354 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800934c:	6a3b      	ldr	r3, [r7, #32]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009352:	e001      	b.n	8009358 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8009354:	2300      	movs	r3, #0
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009358:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800935a:	7ffb      	ldrb	r3, [r7, #31]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d13b      	bne.n	80093d8 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fcba 	bl	8007cde <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936e:	4b1e      	ldr	r3, [pc, #120]	; (80093e8 <xTaskGenericNotify+0x138>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d903      	bls.n	800937e <xTaskGenericNotify+0xce>
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	4a1b      	ldr	r2, [pc, #108]	; (80093e8 <xTaskGenericNotify+0x138>)
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4a18      	ldr	r2, [pc, #96]	; (80093ec <xTaskGenericNotify+0x13c>)
 800938c:	441a      	add	r2, r3
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	3304      	adds	r3, #4
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7fe fc45 	bl	8007c24 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d009      	beq.n	80093b6 <xTaskGenericNotify+0x106>
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	e7fe      	b.n	80093b4 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80093b6:	f7ff fdc5 	bl	8008f44 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093be:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <xTaskGenericNotify+0x140>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d907      	bls.n	80093d8 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <xTaskGenericNotify+0x144>)
 80093ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80093d8:	f7fe fcf4 	bl	8007dc4 <vPortExitCritical>

		return xReturn;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80093de:	4618      	mov	r0, r3
 80093e0:	3728      	adds	r7, #40	; 0x28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000584 	.word	0x20000584
 80093ec:	200000ec 	.word	0x200000ec
 80093f0:	200000e8 	.word	0x200000e8
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08e      	sub	sp, #56	; 0x38
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	4613      	mov	r3, r2
 8009406:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009408:	2301      	movs	r3, #1
 800940a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <xTaskGenericNotifyFromISR+0x2e>
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
 8009424:	e7fe      	b.n	8009424 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009426:	f7fe fd4f 	bl	8007ec8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800942e:	f3ef 8211 	mrs	r2, BASEPRI
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	623a      	str	r2, [r7, #32]
 8009444:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009446:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800945e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	2202      	movs	r2, #2
 8009466:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	2b04      	cmp	r3, #4
 800946e:	d829      	bhi.n	80094c4 <xTaskGenericNotifyFromISR+0xcc>
 8009470:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <xTaskGenericNotifyFromISR+0x80>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	080094c5 	.word	0x080094c5
 800947c:	0800948d 	.word	0x0800948d
 8009480:	0800949b 	.word	0x0800949b
 8009484:	080094a7 	.word	0x080094a7
 8009488:	080094af 	.word	0x080094af
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	431a      	orrs	r2, r3
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8009498:	e014      	b.n	80094c4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80094a4:	e00e      	b.n	80094c4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80094ac:	e00a      	b.n	80094c4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80094ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d003      	beq.n	80094be <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80094bc:	e001      	b.n	80094c2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80094c2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80094c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d146      	bne.n	800955a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d009      	beq.n	80094e8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	61bb      	str	r3, [r7, #24]
 80094e6:	e7fe      	b.n	80094e6 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e8:	4b21      	ldr	r3, [pc, #132]	; (8009570 <xTaskGenericNotifyFromISR+0x178>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11d      	bne.n	800952c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	3304      	adds	r3, #4
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fbf2 	bl	8007cde <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fe:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <xTaskGenericNotifyFromISR+0x17c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d903      	bls.n	800950e <xTaskGenericNotifyFromISR+0x116>
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a1a      	ldr	r2, [pc, #104]	; (8009574 <xTaskGenericNotifyFromISR+0x17c>)
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4a17      	ldr	r2, [pc, #92]	; (8009578 <xTaskGenericNotifyFromISR+0x180>)
 800951c:	441a      	add	r2, r3
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	3304      	adds	r3, #4
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f7fe fb7d 	bl	8007c24 <vListInsertEnd>
 800952a:	e005      	b.n	8009538 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	3318      	adds	r3, #24
 8009530:	4619      	mov	r1, r3
 8009532:	4812      	ldr	r0, [pc, #72]	; (800957c <xTaskGenericNotifyFromISR+0x184>)
 8009534:	f7fe fb76 	bl	8007c24 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	4b10      	ldr	r3, [pc, #64]	; (8009580 <xTaskGenericNotifyFromISR+0x188>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d909      	bls.n	800955a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800954c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954e:	2201      	movs	r2, #1
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	e002      	b.n	800955a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8009554:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <xTaskGenericNotifyFromISR+0x18c>)
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009566:	4618      	mov	r0, r3
 8009568:	3738      	adds	r7, #56	; 0x38
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	2000059c 	.word	0x2000059c
 8009574:	20000584 	.word	0x20000584
 8009578:	200000ec 	.word	0x200000ec
 800957c:	20000554 	.word	0x20000554
 8009580:	200000e8 	.word	0x200000e8
 8009584:	20000590 	.word	0x20000590

08009588 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009592:	4b21      	ldr	r3, [pc, #132]	; (8009618 <prvAddCurrentTaskToDelayedList+0x90>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009598:	4b20      	ldr	r3, [pc, #128]	; (800961c <prvAddCurrentTaskToDelayedList+0x94>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3304      	adds	r3, #4
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe fb9d 	bl	8007cde <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095aa:	d10a      	bne.n	80095c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095b2:	4b1a      	ldr	r3, [pc, #104]	; (800961c <prvAddCurrentTaskToDelayedList+0x94>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4819      	ldr	r0, [pc, #100]	; (8009620 <prvAddCurrentTaskToDelayedList+0x98>)
 80095bc:	f7fe fb32 	bl	8007c24 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095c0:	e026      	b.n	8009610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4413      	add	r3, r2
 80095c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095ca:	4b14      	ldr	r3, [pc, #80]	; (800961c <prvAddCurrentTaskToDelayedList+0x94>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d209      	bcs.n	80095ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095da:	4b12      	ldr	r3, [pc, #72]	; (8009624 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	4b0f      	ldr	r3, [pc, #60]	; (800961c <prvAddCurrentTaskToDelayedList+0x94>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7fe fb40 	bl	8007c6c <vListInsert>
}
 80095ec:	e010      	b.n	8009610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ee:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b0a      	ldr	r3, [pc, #40]	; (800961c <prvAddCurrentTaskToDelayedList+0x94>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4619      	mov	r1, r3
 80095fa:	4610      	mov	r0, r2
 80095fc:	f7fe fb36 	bl	8007c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	429a      	cmp	r2, r3
 8009608:	d202      	bcs.n	8009610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800960a:	4a08      	ldr	r2, [pc, #32]	; (800962c <prvAddCurrentTaskToDelayedList+0xa4>)
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	6013      	str	r3, [r2, #0]
}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20000580 	.word	0x20000580
 800961c:	200000e8 	.word	0x200000e8
 8009620:	20000568 	.word	0x20000568
 8009624:	20000550 	.word	0x20000550
 8009628:	2000054c 	.word	0x2000054c
 800962c:	20000598 	.word	0x20000598

08009630 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009638:	f3ef 8310 	mrs	r3, PRIMASK
 800963c:	60fb      	str	r3, [r7, #12]
  return(result);
 800963e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009642:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	429a      	cmp	r2, r3
 800964c:	d102      	bne.n	8009654 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800964e:	2301      	movs	r3, #1
 8009650:	75fb      	strb	r3, [r7, #23]
 8009652:	e001      	b.n	8009658 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8009654:	2300      	movs	r3, #0
 8009656:	75fb      	strb	r3, [r7, #23]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
}
 8009664:	4618      	mov	r0, r3
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967a:	f3ef 8310 	mrs	r3, PRIMASK
 800967e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009680:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009684:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80096ac:	bf00      	nop
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096c0:	f3ef 8310 	mrs	r3, PRIMASK
 80096c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80096c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096ca:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6852      	ldr	r2, [r2, #4]
 80096de:	605a      	str	r2, [r3, #4]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009700:	f3ef 8310 	mrs	r3, PRIMASK
 8009704:	60fb      	str	r3, [r7, #12]
  return(result);
 8009706:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800970a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff ffcd 	bl	80096b8 <LST_remove_node>
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009728:	bf00      	nop
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009736:	e009      	b.n	800974c <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009738:	1d3b      	adds	r3, r7, #4
 800973a:	4619      	mov	r1, r3
 800973c:	4808      	ldr	r0, [pc, #32]	; (8009760 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800973e:	f7ff ffda 	bl	80096f6 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800974c:	4804      	ldr	r0, [pc, #16]	; (8009760 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800974e:	f7ff ff6f 	bl	8009630 <LST_is_empty>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0ef      	beq.n	8009738 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009758:	bf00      	nop
}
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	200300c8 	.word	0x200300c8
 8009764:	200005b0 	.word	0x200005b0

08009768 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4798      	blx	r3

  return;
 8009772:	bf00      	nop
}
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	200005b4 	.word	0x200005b4

0800977c <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a04      	ldr	r2, [pc, #16]	; (8009798 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8009786:	68d2      	ldr	r2, [r2, #12]
 8009788:	6812      	ldr	r2, [r2, #0]
 800978a:	4610      	mov	r0, r2
 800978c:	4798      	blx	r3

  return;
 800978e:	bf00      	nop
}
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200005b8 	.word	0x200005b8
 8009798:	20030000 	.word	0x20030000

0800979c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80097a2:	e009      	b.n	80097b8 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80097a4:	1d3b      	adds	r3, r7, #4
 80097a6:	4619      	mov	r1, r3
 80097a8:	4808      	ldr	r0, [pc, #32]	; (80097cc <HW_IPCC_SYS_EvtNot+0x30>)
 80097aa:	f7ff ffa4 	bl	80096f6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 80097ae:	4b08      	ldr	r3, [pc, #32]	; (80097d0 <HW_IPCC_SYS_EvtNot+0x34>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80097b8:	4804      	ldr	r0, [pc, #16]	; (80097cc <HW_IPCC_SYS_EvtNot+0x30>)
 80097ba:	f7ff ff39 	bl	8009630 <LST_is_empty>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d0ef      	beq.n	80097a4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80097c4:	bf00      	nop
}
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200300d0 	.word	0x200300d0
 80097d0:	200005bc 	.word	0x200005bc

080097d4 <TL_THREAD_CliSendAck>:

  return;
}

void TL_THREAD_CliSendAck ( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80097d8:	4b04      	ldr	r3, [pc, #16]	; (80097ec <TL_THREAD_CliSendAck+0x18>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	220d      	movs	r2, #13
 80097e0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80097e2:	f000 fa47 	bl	8009c74 <HW_IPCC_THREAD_CliSendAck>

  return;
 80097e6:	bf00      	nop
}
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20030000 	.word	0x20030000

080097f0 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 80097f4:	4b03      	ldr	r3, [pc, #12]	; (8009804 <HW_IPCC_OT_CmdEvtNot+0x14>)
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f86a 	bl	80098d4 <TL_OT_CmdEvtReceived>

  return;
 8009800:	bf00      	nop
}
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20030000 	.word	0x20030000

08009808 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800980c:	4b03      	ldr	r3, [pc, #12]	; (800981c <HW_IPCC_THREAD_EvtNot+0x14>)
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f868 	bl	80098e8 <TL_THREAD_NotReceived>

  return;
 8009818:	bf00      	nop
}
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20030000 	.word	0x20030000

08009820 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8009824:	4b03      	ldr	r3, [pc, #12]	; (8009834 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	4618      	mov	r0, r3
 800982c:	f000 f892 	bl	8009954 <TL_THREAD_CliNotReceived>

  return;
 8009830:	bf00      	nop
}
 8009832:	bd80      	pop	{r7, pc}
 8009834:	20030000 	.word	0x20030000

08009838 <TL_MM_EvtDone>:

  return;
}

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	4805      	ldr	r0, [pc, #20]	; (8009858 <TL_MM_EvtDone+0x20>)
 8009844:	f7ff ff14 	bl	8009670 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009848:	4804      	ldr	r0, [pc, #16]	; (800985c <TL_MM_EvtDone+0x24>)
 800984a:	f000 fa45 	bl	8009cd8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800984e:	bf00      	nop
}
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200005a8 	.word	0x200005a8
 800985c:	08009861 	.word	0x08009861

08009860 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009866:	e00c      	b.n	8009882 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009868:	1d3b      	adds	r3, r7, #4
 800986a:	4619      	mov	r1, r3
 800986c:	480a      	ldr	r0, [pc, #40]	; (8009898 <SendFreeBuf+0x38>)
 800986e:	f7ff ff42 	bl	80096f6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <SendFreeBuf+0x3c>)
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fef7 	bl	8009670 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009882:	4805      	ldr	r0, [pc, #20]	; (8009898 <SendFreeBuf+0x38>)
 8009884:	f7ff fed4 	bl	8009630 <LST_is_empty>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0ec      	beq.n	8009868 <SendFreeBuf+0x8>
  }

  return;
 800988e:	bf00      	nop
}
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	200005a8 	.word	0x200005a8
 800989c:	20030000 	.word	0x20030000

080098a0 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80098a6:	e008      	b.n	80098ba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80098a8:	1d3b      	adds	r3, r7, #4
 80098aa:	4619      	mov	r1, r3
 80098ac:	4808      	ldr	r0, [pc, #32]	; (80098d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80098ae:	f7ff ff22 	bl	80096f6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7f7 fa03 	bl	8000cc0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80098ba:	4805      	ldr	r0, [pc, #20]	; (80098d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80098bc:	f7ff feb8 	bl	8009630 <LST_is_empty>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0f0      	beq.n	80098a8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80098c6:	bf00      	nop
}
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	200300b0 	.word	0x200300b0

080098d4 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80098dc:	f000 f814 	bl	8009908 <Receive_Ack_From_M0>
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80098f0:	4a04      	ldr	r2, [pc, #16]	; (8009904 <TL_THREAD_NotReceived+0x1c>)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80098f6:	f000 f813 	bl	8009920 <Receive_Notification_From_M0>
}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	200005c0 	.word	0x200005c0

08009908 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8009908:	b480      	push	{r7}
 800990a:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <Receive_Ack_From_M0+0x14>)
 800990e:	2201      	movs	r2, #1
 8009910:	601a      	str	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	200005c8 	.word	0x200005c8

08009920 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8009924:	4b06      	ldr	r3, [pc, #24]	; (8009940 <Receive_Notification_From_M0+0x20>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3301      	adds	r3, #1
 800992a:	4a05      	ldr	r2, [pc, #20]	; (8009940 <Receive_Notification_From_M0+0x20>)
 800992c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <Receive_Notification_From_M0+0x24>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2101      	movs	r1, #1
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd ffaf 	bl	8007898 <osThreadFlagsSet>
}
 800993a:	bf00      	nop
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	200005c4 	.word	0x200005c4
 8009944:	200005cc 	.word	0x200005cc

08009948 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800994c:	f7ff ff42 	bl	80097d4 <TL_THREAD_CliSendAck>
}
 8009950:	bf00      	nop
 8009952:	bd80      	pop	{r7, pc}

08009954 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	7adb      	ldrb	r3, [r3, #11]
 8009964:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	330c      	adds	r3, #12
 800996a:	4906      	ldr	r1, [pc, #24]	; (8009984 <TL_THREAD_CliNotReceived+0x30>)
 800996c:	4618      	mov	r0, r3
 800996e:	f7f6 fc07 	bl	8000180 <strcmp>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8009978:	f7ff ffe6 	bl	8009948 <Send_CLI_Ack_For_OT>
  }
}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	0800b144 	.word	0x0800b144

08009988 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	041b      	lsls	r3, r3, #16
 800999a:	43db      	mvns	r3, r3
 800999c:	401a      	ands	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	605a      	str	r2, [r3, #4]
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	605a      	str	r2, [r3, #4]
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	43db      	mvns	r3, r3
 80099e4:	401a      	ands	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	605a      	str	r2, [r3, #4]
}
 80099ea:	bf00      	nop
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	605a      	str	r2, [r3, #4]
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	609a      	str	r2, [r3, #8]
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	041a      	lsls	r2, r3, #16
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	609a      	str	r2, [r3, #8]
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	4013      	ands	r3, r2
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d101      	bne.n	8009a6e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	69da      	ldr	r2, [r3, #28]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d101      	bne.n	8009a98 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e000      	b.n	8009a9a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
	...

08009aa8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009aac:	2102      	movs	r1, #2
 8009aae:	482a      	ldr	r0, [pc, #168]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009ab0:	f7ff ffe4 	bl	8009a7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <HW_IPCC_Rx_Handler+0x26>
 8009aba:	4b27      	ldr	r3, [pc, #156]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009ac8:	f000 f8c8 	bl	8009c5c <HW_IPCC_SYS_EvtHandler>
 8009acc:	e041      	b.n	8009b52 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8009ace:	2104      	movs	r1, #4
 8009ad0:	4821      	ldr	r0, [pc, #132]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009ad2:	f7ff ffd3 	bl	8009a7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d009      	beq.n	8009af0 <HW_IPCC_Rx_Handler+0x48>
 8009adc:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8009aea:	f000 f8dd 	bl	8009ca8 <HW_IPCC_THREAD_NotEvtHandler>
 8009aee:	e030      	b.n	8009b52 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8009af0:	2110      	movs	r1, #16
 8009af2:	4819      	ldr	r0, [pc, #100]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009af4:	f7ff ffc2 	bl	8009a7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <HW_IPCC_Rx_Handler+0x6a>
 8009afe:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	43db      	mvns	r3, r3
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8009b0c:	f000 f8d8 	bl	8009cc0 <HW_IPCC_THREAD_CliNotEvtHandler>
 8009b10:	e01f      	b.n	8009b52 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009b12:	2101      	movs	r1, #1
 8009b14:	4810      	ldr	r0, [pc, #64]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009b16:	f7ff ffb1 	bl	8009a7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d008      	beq.n	8009b32 <HW_IPCC_Rx_Handler+0x8a>
 8009b20:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d102      	bne.n	8009b32 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8009b2c:	f000 f872 	bl	8009c14 <HW_IPCC_BLE_EvtHandler>
 8009b30:	e00f      	b.n	8009b52 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009b32:	2108      	movs	r1, #8
 8009b34:	4808      	ldr	r0, [pc, #32]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009b36:	f7ff ffa1 	bl	8009a7c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d009      	beq.n	8009b54 <HW_IPCC_Rx_Handler+0xac>
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <HW_IPCC_Rx_Handler+0xb0>)
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	43db      	mvns	r3, r3
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009b4e:	f000 f8f9 	bl	8009d44 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
}
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	58000c00 	.word	0x58000c00

08009b5c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009b60:	2102      	movs	r1, #2
 8009b62:	482b      	ldr	r0, [pc, #172]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009b64:	f7ff ff75 	bl	8009a52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d109      	bne.n	8009b82 <HW_IPCC_Tx_Handler+0x26>
 8009b6e:	4b28      	ldr	r3, [pc, #160]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	43db      	mvns	r3, r3
 8009b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009b7c:	f000 f862 	bl	8009c44 <HW_IPCC_SYS_CmdEvtHandler>
 8009b80:	e042      	b.n	8009c08 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8009b82:	2104      	movs	r1, #4
 8009b84:	4822      	ldr	r0, [pc, #136]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009b86:	f7ff ff64 	bl	8009a52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <HW_IPCC_Tx_Handler+0x48>
 8009b90:	4b1f      	ldr	r3, [pc, #124]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	43db      	mvns	r3, r3
 8009b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8009b9e:	f000 f877 	bl	8009c90 <HW_IPCC_OT_CmdEvtHandler>
 8009ba2:	e031      	b.n	8009c08 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009ba4:	2102      	movs	r1, #2
 8009ba6:	481a      	ldr	r0, [pc, #104]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009ba8:	f7ff ff53 	bl	8009a52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d109      	bne.n	8009bc6 <HW_IPCC_Tx_Handler+0x6a>
 8009bb2:	4b17      	ldr	r3, [pc, #92]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	43db      	mvns	r3, r3
 8009bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009bc0:	f000 f840 	bl	8009c44 <HW_IPCC_SYS_CmdEvtHandler>
 8009bc4:	e020      	b.n	8009c08 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009bc6:	2108      	movs	r1, #8
 8009bc8:	4811      	ldr	r0, [pc, #68]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009bca:	f7ff ff42 	bl	8009a52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d109      	bne.n	8009be8 <HW_IPCC_Tx_Handler+0x8c>
 8009bd4:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	43db      	mvns	r3, r3
 8009bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009be2:	f000 f89b 	bl	8009d1c <HW_IPCC_MM_FreeBufHandler>
 8009be6:	e00f      	b.n	8009c08 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009be8:	2120      	movs	r1, #32
 8009bea:	4809      	ldr	r0, [pc, #36]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009bec:	f7ff ff31 	bl	8009a52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <HW_IPCC_Tx_Handler+0xae>
 8009bf6:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <HW_IPCC_Tx_Handler+0xb4>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009c04:	f000 f812 	bl	8009c2c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
}
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	58000c00 	.word	0x58000c00

08009c14 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009c18:	f7ff fd8a 	bl	8009730 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	4802      	ldr	r0, [pc, #8]	; (8009c28 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009c20:	f7ff fefa 	bl	8009a18 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009c24:	bf00      	nop
}
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	58000c00 	.word	0x58000c00

08009c2c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009c30:	2120      	movs	r1, #32
 8009c32:	4803      	ldr	r0, [pc, #12]	; (8009c40 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009c34:	f7ff febb 	bl	80099ae <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009c38:	f7ff fd96 	bl	8009768 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009c3c:	bf00      	nop
}
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	58000c00 	.word	0x58000c00

08009c44 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009c48:	2102      	movs	r1, #2
 8009c4a:	4803      	ldr	r0, [pc, #12]	; (8009c58 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009c4c:	f7ff feaf 	bl	80099ae <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009c50:	f7ff fd94 	bl	800977c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009c54:	bf00      	nop
}
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	58000c00 	.word	0x58000c00

08009c5c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009c60:	f7ff fd9c 	bl	800979c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009c64:	2102      	movs	r1, #2
 8009c66:	4802      	ldr	r0, [pc, #8]	; (8009c70 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009c68:	f7ff fed6 	bl	8009a18 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009c6c:	bf00      	nop
}
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	58000c00 	.word	0x58000c00

08009c74 <HW_IPCC_THREAD_CliSendAck>:

  return;
}

void HW_IPCC_THREAD_CliSendAck( void )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8009c78:	2110      	movs	r1, #16
 8009c7a:	4804      	ldr	r0, [pc, #16]	; (8009c8c <HW_IPCC_THREAD_CliSendAck+0x18>)
 8009c7c:	f7ff fecc 	bl	8009a18 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8009c80:	2110      	movs	r1, #16
 8009c82:	4802      	ldr	r0, [pc, #8]	; (8009c8c <HW_IPCC_THREAD_CliSendAck+0x18>)
 8009c84:	f7ff fea5 	bl	80099d2 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009c88:	bf00      	nop
}
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	58000c00 	.word	0x58000c00

08009c90 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8009c94:	2104      	movs	r1, #4
 8009c96:	4803      	ldr	r0, [pc, #12]	; (8009ca4 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8009c98:	f7ff fe89 	bl	80099ae <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8009c9c:	f7ff fda8 	bl	80097f0 <HW_IPCC_OT_CmdEvtNot>

  return;
 8009ca0:	bf00      	nop
}
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	58000c00 	.word	0x58000c00

08009ca8 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8009cac:	2104      	movs	r1, #4
 8009cae:	4803      	ldr	r0, [pc, #12]	; (8009cbc <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8009cb0:	f7ff fea1 	bl	80099f6 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8009cb4:	f7ff fda8 	bl	8009808 <HW_IPCC_THREAD_EvtNot>

  return;
 8009cb8:	bf00      	nop
}
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	58000c00 	.word	0x58000c00

08009cc0 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8009cc4:	2110      	movs	r1, #16
 8009cc6:	4803      	ldr	r0, [pc, #12]	; (8009cd4 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8009cc8:	f7ff fe95 	bl	80099f6 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8009ccc:	f7ff fda8 	bl	8009820 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8009cd0:	bf00      	nop
}
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	58000c00 	.word	0x58000c00

08009cd8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009ce0:	2108      	movs	r1, #8
 8009ce2:	480c      	ldr	r0, [pc, #48]	; (8009d14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009ce4:	f7ff feb5 	bl	8009a52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d007      	beq.n	8009cfe <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009cee:	4a0a      	ldr	r2, [pc, #40]	; (8009d18 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009cf4:	2108      	movs	r1, #8
 8009cf6:	4807      	ldr	r0, [pc, #28]	; (8009d14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009cf8:	f7ff fe46 	bl	8009988 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009cfc:	e006      	b.n	8009d0c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009d02:	2108      	movs	r1, #8
 8009d04:	4803      	ldr	r0, [pc, #12]	; (8009d14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009d06:	f7ff fe95 	bl	8009a34 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009d0a:	bf00      	nop
}
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	58000c00 	.word	0x58000c00
 8009d18:	200005d0 	.word	0x200005d0

08009d1c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009d20:	2108      	movs	r1, #8
 8009d22:	4806      	ldr	r0, [pc, #24]	; (8009d3c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009d24:	f7ff fe43 	bl	80099ae <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009d2e:	2108      	movs	r1, #8
 8009d30:	4802      	ldr	r0, [pc, #8]	; (8009d3c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009d32:	f7ff fe7f 	bl	8009a34 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009d36:	bf00      	nop
}
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	58000c00 	.word	0x58000c00
 8009d40:	200005d0 	.word	0x200005d0

08009d44 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009d48:	f7ff fdaa 	bl	80098a0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009d4c:	2108      	movs	r1, #8
 8009d4e:	4802      	ldr	r0, [pc, #8]	; (8009d58 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009d50:	f7ff fe62 	bl	8009a18 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009d54:	bf00      	nop
}
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	58000c00 	.word	0x58000c00

08009d5c <__errno>:
 8009d5c:	4b01      	ldr	r3, [pc, #4]	; (8009d64 <__errno+0x8>)
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20000018 	.word	0x20000018

08009d68 <__libc_init_array>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4e0d      	ldr	r6, [pc, #52]	; (8009da0 <__libc_init_array+0x38>)
 8009d6c:	4c0d      	ldr	r4, [pc, #52]	; (8009da4 <__libc_init_array+0x3c>)
 8009d6e:	1ba4      	subs	r4, r4, r6
 8009d70:	10a4      	asrs	r4, r4, #2
 8009d72:	2500      	movs	r5, #0
 8009d74:	42a5      	cmp	r5, r4
 8009d76:	d109      	bne.n	8009d8c <__libc_init_array+0x24>
 8009d78:	4e0b      	ldr	r6, [pc, #44]	; (8009da8 <__libc_init_array+0x40>)
 8009d7a:	4c0c      	ldr	r4, [pc, #48]	; (8009dac <__libc_init_array+0x44>)
 8009d7c:	f001 f882 	bl	800ae84 <_init>
 8009d80:	1ba4      	subs	r4, r4, r6
 8009d82:	10a4      	asrs	r4, r4, #2
 8009d84:	2500      	movs	r5, #0
 8009d86:	42a5      	cmp	r5, r4
 8009d88:	d105      	bne.n	8009d96 <__libc_init_array+0x2e>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d90:	4798      	blx	r3
 8009d92:	3501      	adds	r5, #1
 8009d94:	e7ee      	b.n	8009d74 <__libc_init_array+0xc>
 8009d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d9a:	4798      	blx	r3
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	e7f2      	b.n	8009d86 <__libc_init_array+0x1e>
 8009da0:	0800b290 	.word	0x0800b290
 8009da4:	0800b290 	.word	0x0800b290
 8009da8:	0800b290 	.word	0x0800b290
 8009dac:	0800b294 	.word	0x0800b294

08009db0 <memcpy>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	1e43      	subs	r3, r0, #1
 8009db4:	440a      	add	r2, r1
 8009db6:	4291      	cmp	r1, r2
 8009db8:	d100      	bne.n	8009dbc <memcpy+0xc>
 8009dba:	bd10      	pop	{r4, pc}
 8009dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc4:	e7f7      	b.n	8009db6 <memcpy+0x6>

08009dc6 <memset>:
 8009dc6:	4402      	add	r2, r0
 8009dc8:	4603      	mov	r3, r0
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d100      	bne.n	8009dd0 <memset+0xa>
 8009dce:	4770      	bx	lr
 8009dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd4:	e7f9      	b.n	8009dca <memset+0x4>
	...

08009dd8 <pow>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	ed2d 8b04 	vpush	{d8-d9}
 8009de0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a0b4 <pow+0x2dc>
 8009de4:	b08d      	sub	sp, #52	; 0x34
 8009de6:	ec57 6b10 	vmov	r6, r7, d0
 8009dea:	ec55 4b11 	vmov	r4, r5, d1
 8009dee:	f000 f963 	bl	800a0b8 <__ieee754_pow>
 8009df2:	f999 3000 	ldrsb.w	r3, [r9]
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	eeb0 8a40 	vmov.f32	s16, s0
 8009dfe:	eef0 8a60 	vmov.f32	s17, s1
 8009e02:	46c8      	mov	r8, r9
 8009e04:	d05f      	beq.n	8009ec6 <pow+0xee>
 8009e06:	4622      	mov	r2, r4
 8009e08:	462b      	mov	r3, r5
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fe17 	bl	8000a40 <__aeabi_dcmpun>
 8009e12:	4683      	mov	fp, r0
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d156      	bne.n	8009ec6 <pow+0xee>
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fe0e 	bl	8000a40 <__aeabi_dcmpun>
 8009e24:	9001      	str	r0, [sp, #4]
 8009e26:	b1e8      	cbz	r0, 8009e64 <pow+0x8c>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	4629      	mov	r1, r5
 8009e30:	f7f6 fdd4 	bl	80009dc <__aeabi_dcmpeq>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d046      	beq.n	8009ec6 <pow+0xee>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	9302      	str	r3, [sp, #8]
 8009e3c:	4b96      	ldr	r3, [pc, #600]	; (800a098 <pow+0x2c0>)
 8009e3e:	9303      	str	r3, [sp, #12]
 8009e40:	4b96      	ldr	r3, [pc, #600]	; (800a09c <pow+0x2c4>)
 8009e42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009e46:	2200      	movs	r2, #0
 8009e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009e54:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009e58:	d033      	beq.n	8009ec2 <pow+0xea>
 8009e5a:	a802      	add	r0, sp, #8
 8009e5c:	f000 fefb 	bl	800ac56 <matherr>
 8009e60:	bb48      	cbnz	r0, 8009eb6 <pow+0xde>
 8009e62:	e05d      	b.n	8009f20 <pow+0x148>
 8009e64:	f04f 0a00 	mov.w	sl, #0
 8009e68:	f04f 0b00 	mov.w	fp, #0
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	465b      	mov	r3, fp
 8009e70:	4630      	mov	r0, r6
 8009e72:	4639      	mov	r1, r7
 8009e74:	f7f6 fdb2 	bl	80009dc <__aeabi_dcmpeq>
 8009e78:	ec4b ab19 	vmov	d9, sl, fp
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d054      	beq.n	8009f2a <pow+0x152>
 8009e80:	4652      	mov	r2, sl
 8009e82:	465b      	mov	r3, fp
 8009e84:	4620      	mov	r0, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 fda8 	bl	80009dc <__aeabi_dcmpeq>
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	b318      	cbz	r0, 8009ed8 <pow+0x100>
 8009e90:	2301      	movs	r3, #1
 8009e92:	9302      	str	r3, [sp, #8]
 8009e94:	4b80      	ldr	r3, [pc, #512]	; (800a098 <pow+0x2c0>)
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	9b01      	ldr	r3, [sp, #4]
 8009e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ea2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ea6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0d5      	beq.n	8009e5a <pow+0x82>
 8009eae:	4b7b      	ldr	r3, [pc, #492]	; (800a09c <pow+0x2c4>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb8:	b11b      	cbz	r3, 8009ec2 <pow+0xea>
 8009eba:	f7ff ff4f 	bl	8009d5c <__errno>
 8009ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec0:	6003      	str	r3, [r0, #0]
 8009ec2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009ec6:	eeb0 0a48 	vmov.f32	s0, s16
 8009eca:	eef0 0a68 	vmov.f32	s1, s17
 8009ece:	b00d      	add	sp, #52	; 0x34
 8009ed0:	ecbd 8b04 	vpop	{d8-d9}
 8009ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed8:	ec45 4b10 	vmov	d0, r4, r5
 8009edc:	f000 feb3 	bl	800ac46 <finite>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d0f0      	beq.n	8009ec6 <pow+0xee>
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	465b      	mov	r3, fp
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 fd80 	bl	80009f0 <__aeabi_dcmplt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d0e8      	beq.n	8009ec6 <pow+0xee>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	4b67      	ldr	r3, [pc, #412]	; (800a098 <pow+0x2c0>)
 8009efa:	9303      	str	r3, [sp, #12]
 8009efc:	f999 3000 	ldrsb.w	r3, [r9]
 8009f00:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009f04:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f08:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009f0c:	b913      	cbnz	r3, 8009f14 <pow+0x13c>
 8009f0e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009f12:	e7a2      	b.n	8009e5a <pow+0x82>
 8009f14:	4962      	ldr	r1, [pc, #392]	; (800a0a0 <pow+0x2c8>)
 8009f16:	2000      	movs	r0, #0
 8009f18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d19c      	bne.n	8009e5a <pow+0x82>
 8009f20:	f7ff ff1c 	bl	8009d5c <__errno>
 8009f24:	2321      	movs	r3, #33	; 0x21
 8009f26:	6003      	str	r3, [r0, #0]
 8009f28:	e7c5      	b.n	8009eb6 <pow+0xde>
 8009f2a:	eeb0 0a48 	vmov.f32	s0, s16
 8009f2e:	eef0 0a68 	vmov.f32	s1, s17
 8009f32:	f000 fe88 	bl	800ac46 <finite>
 8009f36:	9000      	str	r0, [sp, #0]
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	f040 8081 	bne.w	800a040 <pow+0x268>
 8009f3e:	ec47 6b10 	vmov	d0, r6, r7
 8009f42:	f000 fe80 	bl	800ac46 <finite>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d07a      	beq.n	800a040 <pow+0x268>
 8009f4a:	ec45 4b10 	vmov	d0, r4, r5
 8009f4e:	f000 fe7a 	bl	800ac46 <finite>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d074      	beq.n	800a040 <pow+0x268>
 8009f56:	ec53 2b18 	vmov	r2, r3, d8
 8009f5a:	ee18 0a10 	vmov	r0, s16
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f7f6 fd6e 	bl	8000a40 <__aeabi_dcmpun>
 8009f64:	f999 9000 	ldrsb.w	r9, [r9]
 8009f68:	4b4b      	ldr	r3, [pc, #300]	; (800a098 <pow+0x2c0>)
 8009f6a:	b1b0      	cbz	r0, 8009f9a <pow+0x1c2>
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f72:	9b00      	ldr	r3, [sp, #0]
 8009f74:	930a      	str	r3, [sp, #40]	; 0x28
 8009f76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009f7e:	f1b9 0f00 	cmp.w	r9, #0
 8009f82:	d0c4      	beq.n	8009f0e <pow+0x136>
 8009f84:	4652      	mov	r2, sl
 8009f86:	465b      	mov	r3, fp
 8009f88:	4650      	mov	r0, sl
 8009f8a:	4659      	mov	r1, fp
 8009f8c:	f7f6 fbe8 	bl	8000760 <__aeabi_ddiv>
 8009f90:	f1b9 0f02 	cmp.w	r9, #2
 8009f94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f98:	e7c1      	b.n	8009f1e <pow+0x146>
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fa0:	900a      	str	r0, [sp, #40]	; 0x28
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4b3e      	ldr	r3, [pc, #248]	; (800a0a4 <pow+0x2cc>)
 8009faa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fb2:	f7f6 faab 	bl	800050c <__aeabi_dmul>
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	460d      	mov	r5, r1
 8009fba:	f1b9 0f00 	cmp.w	r9, #0
 8009fbe:	d124      	bne.n	800a00a <pow+0x232>
 8009fc0:	4b39      	ldr	r3, [pc, #228]	; (800a0a8 <pow+0x2d0>)
 8009fc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009fc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fca:	4630      	mov	r0, r6
 8009fcc:	4652      	mov	r2, sl
 8009fce:	465b      	mov	r3, fp
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 fd0d 	bl	80009f0 <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d056      	beq.n	800a088 <pow+0x2b0>
 8009fda:	ec45 4b10 	vmov	d0, r4, r5
 8009fde:	f000 fe47 	bl	800ac70 <rint>
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	ec51 0b10 	vmov	r0, r1, d0
 8009fea:	f7f6 fcf7 	bl	80009dc <__aeabi_dcmpeq>
 8009fee:	b920      	cbnz	r0, 8009ffa <pow+0x222>
 8009ff0:	4b2e      	ldr	r3, [pc, #184]	; (800a0ac <pow+0x2d4>)
 8009ff2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009ff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ffa:	f998 3000 	ldrsb.w	r3, [r8]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d142      	bne.n	800a088 <pow+0x2b0>
 800a002:	f7ff feab 	bl	8009d5c <__errno>
 800a006:	2322      	movs	r3, #34	; 0x22
 800a008:	e78d      	b.n	8009f26 <pow+0x14e>
 800a00a:	4b29      	ldr	r3, [pc, #164]	; (800a0b0 <pow+0x2d8>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a012:	4630      	mov	r0, r6
 800a014:	4652      	mov	r2, sl
 800a016:	465b      	mov	r3, fp
 800a018:	4639      	mov	r1, r7
 800a01a:	f7f6 fce9 	bl	80009f0 <__aeabi_dcmplt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d0eb      	beq.n	8009ffa <pow+0x222>
 800a022:	ec45 4b10 	vmov	d0, r4, r5
 800a026:	f000 fe23 	bl	800ac70 <rint>
 800a02a:	4622      	mov	r2, r4
 800a02c:	462b      	mov	r3, r5
 800a02e:	ec51 0b10 	vmov	r0, r1, d0
 800a032:	f7f6 fcd3 	bl	80009dc <__aeabi_dcmpeq>
 800a036:	2800      	cmp	r0, #0
 800a038:	d1df      	bne.n	8009ffa <pow+0x222>
 800a03a:	2200      	movs	r2, #0
 800a03c:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <pow+0x2c8>)
 800a03e:	e7da      	b.n	8009ff6 <pow+0x21e>
 800a040:	2200      	movs	r2, #0
 800a042:	2300      	movs	r3, #0
 800a044:	ec51 0b18 	vmov	r0, r1, d8
 800a048:	f7f6 fcc8 	bl	80009dc <__aeabi_dcmpeq>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f43f af3a 	beq.w	8009ec6 <pow+0xee>
 800a052:	ec47 6b10 	vmov	d0, r6, r7
 800a056:	f000 fdf6 	bl	800ac46 <finite>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f43f af33 	beq.w	8009ec6 <pow+0xee>
 800a060:	ec45 4b10 	vmov	d0, r4, r5
 800a064:	f000 fdef 	bl	800ac46 <finite>
 800a068:	2800      	cmp	r0, #0
 800a06a:	f43f af2c 	beq.w	8009ec6 <pow+0xee>
 800a06e:	2304      	movs	r3, #4
 800a070:	9302      	str	r3, [sp, #8]
 800a072:	4b09      	ldr	r3, [pc, #36]	; (800a098 <pow+0x2c0>)
 800a074:	9303      	str	r3, [sp, #12]
 800a076:	2300      	movs	r3, #0
 800a078:	930a      	str	r3, [sp, #40]	; 0x28
 800a07a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a07e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a082:	ed8d 9b08 	vstr	d9, [sp, #32]
 800a086:	e7b8      	b.n	8009ffa <pow+0x222>
 800a088:	a802      	add	r0, sp, #8
 800a08a:	f000 fde4 	bl	800ac56 <matherr>
 800a08e:	2800      	cmp	r0, #0
 800a090:	f47f af11 	bne.w	8009eb6 <pow+0xde>
 800a094:	e7b5      	b.n	800a002 <pow+0x22a>
 800a096:	bf00      	nop
 800a098:	0800b248 	.word	0x0800b248
 800a09c:	3ff00000 	.word	0x3ff00000
 800a0a0:	fff00000 	.word	0xfff00000
 800a0a4:	3fe00000 	.word	0x3fe00000
 800a0a8:	47efffff 	.word	0x47efffff
 800a0ac:	c7efffff 	.word	0xc7efffff
 800a0b0:	7ff00000 	.word	0x7ff00000
 800a0b4:	2000007c 	.word	0x2000007c

0800a0b8 <__ieee754_pow>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	b091      	sub	sp, #68	; 0x44
 800a0be:	ed8d 1b00 	vstr	d1, [sp]
 800a0c2:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a0c6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a0ca:	ea58 0302 	orrs.w	r3, r8, r2
 800a0ce:	ec57 6b10 	vmov	r6, r7, d0
 800a0d2:	f000 84be 	beq.w	800aa52 <__ieee754_pow+0x99a>
 800a0d6:	4b7a      	ldr	r3, [pc, #488]	; (800a2c0 <__ieee754_pow+0x208>)
 800a0d8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a0dc:	429c      	cmp	r4, r3
 800a0de:	463d      	mov	r5, r7
 800a0e0:	ee10 aa10 	vmov	sl, s0
 800a0e4:	dc09      	bgt.n	800a0fa <__ieee754_pow+0x42>
 800a0e6:	d103      	bne.n	800a0f0 <__ieee754_pow+0x38>
 800a0e8:	b93e      	cbnz	r6, 800a0fa <__ieee754_pow+0x42>
 800a0ea:	45a0      	cmp	r8, r4
 800a0ec:	dc0d      	bgt.n	800a10a <__ieee754_pow+0x52>
 800a0ee:	e001      	b.n	800a0f4 <__ieee754_pow+0x3c>
 800a0f0:	4598      	cmp	r8, r3
 800a0f2:	dc02      	bgt.n	800a0fa <__ieee754_pow+0x42>
 800a0f4:	4598      	cmp	r8, r3
 800a0f6:	d10e      	bne.n	800a116 <__ieee754_pow+0x5e>
 800a0f8:	b16a      	cbz	r2, 800a116 <__ieee754_pow+0x5e>
 800a0fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a0fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a102:	ea54 030a 	orrs.w	r3, r4, sl
 800a106:	f000 84a4 	beq.w	800aa52 <__ieee754_pow+0x99a>
 800a10a:	486e      	ldr	r0, [pc, #440]	; (800a2c4 <__ieee754_pow+0x20c>)
 800a10c:	b011      	add	sp, #68	; 0x44
 800a10e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a112:	f000 bda5 	b.w	800ac60 <nan>
 800a116:	2d00      	cmp	r5, #0
 800a118:	da53      	bge.n	800a1c2 <__ieee754_pow+0x10a>
 800a11a:	4b6b      	ldr	r3, [pc, #428]	; (800a2c8 <__ieee754_pow+0x210>)
 800a11c:	4598      	cmp	r8, r3
 800a11e:	dc4d      	bgt.n	800a1bc <__ieee754_pow+0x104>
 800a120:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a124:	4598      	cmp	r8, r3
 800a126:	dd4c      	ble.n	800a1c2 <__ieee754_pow+0x10a>
 800a128:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a12c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a130:	2b14      	cmp	r3, #20
 800a132:	dd26      	ble.n	800a182 <__ieee754_pow+0xca>
 800a134:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a138:	fa22 f103 	lsr.w	r1, r2, r3
 800a13c:	fa01 f303 	lsl.w	r3, r1, r3
 800a140:	4293      	cmp	r3, r2
 800a142:	d13e      	bne.n	800a1c2 <__ieee754_pow+0x10a>
 800a144:	f001 0101 	and.w	r1, r1, #1
 800a148:	f1c1 0b02 	rsb	fp, r1, #2
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d15b      	bne.n	800a208 <__ieee754_pow+0x150>
 800a150:	4b5b      	ldr	r3, [pc, #364]	; (800a2c0 <__ieee754_pow+0x208>)
 800a152:	4598      	cmp	r8, r3
 800a154:	d124      	bne.n	800a1a0 <__ieee754_pow+0xe8>
 800a156:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a15a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a15e:	ea53 030a 	orrs.w	r3, r3, sl
 800a162:	f000 8476 	beq.w	800aa52 <__ieee754_pow+0x99a>
 800a166:	4b59      	ldr	r3, [pc, #356]	; (800a2cc <__ieee754_pow+0x214>)
 800a168:	429c      	cmp	r4, r3
 800a16a:	dd2d      	ble.n	800a1c8 <__ieee754_pow+0x110>
 800a16c:	f1b9 0f00 	cmp.w	r9, #0
 800a170:	f280 8473 	bge.w	800aa5a <__ieee754_pow+0x9a2>
 800a174:	2000      	movs	r0, #0
 800a176:	2100      	movs	r1, #0
 800a178:	ec41 0b10 	vmov	d0, r0, r1
 800a17c:	b011      	add	sp, #68	; 0x44
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	2a00      	cmp	r2, #0
 800a184:	d13e      	bne.n	800a204 <__ieee754_pow+0x14c>
 800a186:	f1c3 0314 	rsb	r3, r3, #20
 800a18a:	fa48 f103 	asr.w	r1, r8, r3
 800a18e:	fa01 f303 	lsl.w	r3, r1, r3
 800a192:	4543      	cmp	r3, r8
 800a194:	f040 8469 	bne.w	800aa6a <__ieee754_pow+0x9b2>
 800a198:	f001 0101 	and.w	r1, r1, #1
 800a19c:	f1c1 0b02 	rsb	fp, r1, #2
 800a1a0:	4b4b      	ldr	r3, [pc, #300]	; (800a2d0 <__ieee754_pow+0x218>)
 800a1a2:	4598      	cmp	r8, r3
 800a1a4:	d118      	bne.n	800a1d8 <__ieee754_pow+0x120>
 800a1a6:	f1b9 0f00 	cmp.w	r9, #0
 800a1aa:	f280 845a 	bge.w	800aa62 <__ieee754_pow+0x9aa>
 800a1ae:	4948      	ldr	r1, [pc, #288]	; (800a2d0 <__ieee754_pow+0x218>)
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	f7f6 fad3 	bl	8000760 <__aeabi_ddiv>
 800a1ba:	e7dd      	b.n	800a178 <__ieee754_pow+0xc0>
 800a1bc:	f04f 0b02 	mov.w	fp, #2
 800a1c0:	e7c4      	b.n	800a14c <__ieee754_pow+0x94>
 800a1c2:	f04f 0b00 	mov.w	fp, #0
 800a1c6:	e7c1      	b.n	800a14c <__ieee754_pow+0x94>
 800a1c8:	f1b9 0f00 	cmp.w	r9, #0
 800a1cc:	dad2      	bge.n	800a174 <__ieee754_pow+0xbc>
 800a1ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a1d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a1d6:	e7cf      	b.n	800a178 <__ieee754_pow+0xc0>
 800a1d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a1dc:	d106      	bne.n	800a1ec <__ieee754_pow+0x134>
 800a1de:	4632      	mov	r2, r6
 800a1e0:	463b      	mov	r3, r7
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f7f6 f991 	bl	800050c <__aeabi_dmul>
 800a1ea:	e7c5      	b.n	800a178 <__ieee754_pow+0xc0>
 800a1ec:	4b39      	ldr	r3, [pc, #228]	; (800a2d4 <__ieee754_pow+0x21c>)
 800a1ee:	4599      	cmp	r9, r3
 800a1f0:	d10a      	bne.n	800a208 <__ieee754_pow+0x150>
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	db08      	blt.n	800a208 <__ieee754_pow+0x150>
 800a1f6:	ec47 6b10 	vmov	d0, r6, r7
 800a1fa:	b011      	add	sp, #68	; 0x44
 800a1fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a200:	f000 bc68 	b.w	800aad4 <__ieee754_sqrt>
 800a204:	f04f 0b00 	mov.w	fp, #0
 800a208:	ec47 6b10 	vmov	d0, r6, r7
 800a20c:	f000 fd12 	bl	800ac34 <fabs>
 800a210:	ec51 0b10 	vmov	r0, r1, d0
 800a214:	f1ba 0f00 	cmp.w	sl, #0
 800a218:	d127      	bne.n	800a26a <__ieee754_pow+0x1b2>
 800a21a:	b124      	cbz	r4, 800a226 <__ieee754_pow+0x16e>
 800a21c:	4b2c      	ldr	r3, [pc, #176]	; (800a2d0 <__ieee754_pow+0x218>)
 800a21e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a222:	429a      	cmp	r2, r3
 800a224:	d121      	bne.n	800a26a <__ieee754_pow+0x1b2>
 800a226:	f1b9 0f00 	cmp.w	r9, #0
 800a22a:	da05      	bge.n	800a238 <__ieee754_pow+0x180>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	2000      	movs	r0, #0
 800a232:	4927      	ldr	r1, [pc, #156]	; (800a2d0 <__ieee754_pow+0x218>)
 800a234:	f7f6 fa94 	bl	8000760 <__aeabi_ddiv>
 800a238:	2d00      	cmp	r5, #0
 800a23a:	da9d      	bge.n	800a178 <__ieee754_pow+0xc0>
 800a23c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a240:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a244:	ea54 030b 	orrs.w	r3, r4, fp
 800a248:	d108      	bne.n	800a25c <__ieee754_pow+0x1a4>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4610      	mov	r0, r2
 800a250:	4619      	mov	r1, r3
 800a252:	f7f5 ffa3 	bl	800019c <__aeabi_dsub>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	e7ac      	b.n	800a1b6 <__ieee754_pow+0xfe>
 800a25c:	f1bb 0f01 	cmp.w	fp, #1
 800a260:	d18a      	bne.n	800a178 <__ieee754_pow+0xc0>
 800a262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a266:	4619      	mov	r1, r3
 800a268:	e786      	b.n	800a178 <__ieee754_pow+0xc0>
 800a26a:	0fed      	lsrs	r5, r5, #31
 800a26c:	1e6b      	subs	r3, r5, #1
 800a26e:	930d      	str	r3, [sp, #52]	; 0x34
 800a270:	ea5b 0303 	orrs.w	r3, fp, r3
 800a274:	d102      	bne.n	800a27c <__ieee754_pow+0x1c4>
 800a276:	4632      	mov	r2, r6
 800a278:	463b      	mov	r3, r7
 800a27a:	e7e8      	b.n	800a24e <__ieee754_pow+0x196>
 800a27c:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <__ieee754_pow+0x220>)
 800a27e:	4598      	cmp	r8, r3
 800a280:	f340 80fe 	ble.w	800a480 <__ieee754_pow+0x3c8>
 800a284:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a288:	4598      	cmp	r8, r3
 800a28a:	dd0a      	ble.n	800a2a2 <__ieee754_pow+0x1ea>
 800a28c:	4b0f      	ldr	r3, [pc, #60]	; (800a2cc <__ieee754_pow+0x214>)
 800a28e:	429c      	cmp	r4, r3
 800a290:	dc0d      	bgt.n	800a2ae <__ieee754_pow+0x1f6>
 800a292:	f1b9 0f00 	cmp.w	r9, #0
 800a296:	f6bf af6d 	bge.w	800a174 <__ieee754_pow+0xbc>
 800a29a:	a307      	add	r3, pc, #28	; (adr r3, 800a2b8 <__ieee754_pow+0x200>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	e79f      	b.n	800a1e2 <__ieee754_pow+0x12a>
 800a2a2:	4b0e      	ldr	r3, [pc, #56]	; (800a2dc <__ieee754_pow+0x224>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	ddf4      	ble.n	800a292 <__ieee754_pow+0x1da>
 800a2a8:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <__ieee754_pow+0x218>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	dd18      	ble.n	800a2e0 <__ieee754_pow+0x228>
 800a2ae:	f1b9 0f00 	cmp.w	r9, #0
 800a2b2:	dcf2      	bgt.n	800a29a <__ieee754_pow+0x1e2>
 800a2b4:	e75e      	b.n	800a174 <__ieee754_pow+0xbc>
 800a2b6:	bf00      	nop
 800a2b8:	8800759c 	.word	0x8800759c
 800a2bc:	7e37e43c 	.word	0x7e37e43c
 800a2c0:	7ff00000 	.word	0x7ff00000
 800a2c4:	0800b24b 	.word	0x0800b24b
 800a2c8:	433fffff 	.word	0x433fffff
 800a2cc:	3fefffff 	.word	0x3fefffff
 800a2d0:	3ff00000 	.word	0x3ff00000
 800a2d4:	3fe00000 	.word	0x3fe00000
 800a2d8:	41e00000 	.word	0x41e00000
 800a2dc:	3feffffe 	.word	0x3feffffe
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4b63      	ldr	r3, [pc, #396]	; (800a470 <__ieee754_pow+0x3b8>)
 800a2e4:	f7f5 ff5a 	bl	800019c <__aeabi_dsub>
 800a2e8:	a355      	add	r3, pc, #340	; (adr r3, 800a440 <__ieee754_pow+0x388>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	f7f6 f90b 	bl	800050c <__aeabi_dmul>
 800a2f6:	a354      	add	r3, pc, #336	; (adr r3, 800a448 <__ieee754_pow+0x390>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	4620      	mov	r0, r4
 800a302:	4629      	mov	r1, r5
 800a304:	f7f6 f902 	bl	800050c <__aeabi_dmul>
 800a308:	2200      	movs	r2, #0
 800a30a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a30e:	4b59      	ldr	r3, [pc, #356]	; (800a474 <__ieee754_pow+0x3bc>)
 800a310:	4620      	mov	r0, r4
 800a312:	4629      	mov	r1, r5
 800a314:	f7f6 f8fa 	bl	800050c <__aeabi_dmul>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	a14c      	add	r1, pc, #304	; (adr r1, 800a450 <__ieee754_pow+0x398>)
 800a31e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a322:	f7f5 ff3b 	bl	800019c <__aeabi_dsub>
 800a326:	4622      	mov	r2, r4
 800a328:	462b      	mov	r3, r5
 800a32a:	f7f6 f8ef 	bl	800050c <__aeabi_dmul>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	2000      	movs	r0, #0
 800a334:	4950      	ldr	r1, [pc, #320]	; (800a478 <__ieee754_pow+0x3c0>)
 800a336:	f7f5 ff31 	bl	800019c <__aeabi_dsub>
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	4680      	mov	r8, r0
 800a340:	4689      	mov	r9, r1
 800a342:	4620      	mov	r0, r4
 800a344:	4629      	mov	r1, r5
 800a346:	f7f6 f8e1 	bl	800050c <__aeabi_dmul>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4640      	mov	r0, r8
 800a350:	4649      	mov	r1, r9
 800a352:	f7f6 f8db 	bl	800050c <__aeabi_dmul>
 800a356:	a340      	add	r3, pc, #256	; (adr r3, 800a458 <__ieee754_pow+0x3a0>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f6 f8d6 	bl	800050c <__aeabi_dmul>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a368:	f7f5 ff18 	bl	800019c <__aeabi_dsub>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4604      	mov	r4, r0
 800a372:	460d      	mov	r5, r1
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f5 ff12 	bl	80001a0 <__adddf3>
 800a37c:	2000      	movs	r0, #0
 800a37e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a382:	4632      	mov	r2, r6
 800a384:	463b      	mov	r3, r7
 800a386:	f7f5 ff09 	bl	800019c <__aeabi_dsub>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f5 ff03 	bl	800019c <__aeabi_dsub>
 800a396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a398:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a39c:	4313      	orrs	r3, r2
 800a39e:	4606      	mov	r6, r0
 800a3a0:	460f      	mov	r7, r1
 800a3a2:	f040 81eb 	bne.w	800a77c <__ieee754_pow+0x6c4>
 800a3a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a460 <__ieee754_pow+0x3a8>
 800a3aa:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a3ae:	2400      	movs	r4, #0
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a3bc:	f7f5 feee 	bl	800019c <__aeabi_dsub>
 800a3c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3c4:	f7f6 f8a2 	bl	800050c <__aeabi_dmul>
 800a3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	4689      	mov	r9, r1
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	f7f6 f89a 	bl	800050c <__aeabi_dmul>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4640      	mov	r0, r8
 800a3de:	4649      	mov	r1, r9
 800a3e0:	f7f5 fede 	bl	80001a0 <__adddf3>
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	4689      	mov	r9, r1
 800a3ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3f0:	f7f6 f88c 	bl	800050c <__aeabi_dmul>
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4640      	mov	r0, r8
 800a400:	e9cd 4500 	strd	r4, r5, [sp]
 800a404:	f7f5 fecc 	bl	80001a0 <__adddf3>
 800a408:	4b1c      	ldr	r3, [pc, #112]	; (800a47c <__ieee754_pow+0x3c4>)
 800a40a:	4299      	cmp	r1, r3
 800a40c:	4606      	mov	r6, r0
 800a40e:	460f      	mov	r7, r1
 800a410:	468b      	mov	fp, r1
 800a412:	f340 82f7 	ble.w	800aa04 <__ieee754_pow+0x94c>
 800a416:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a41a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a41e:	4303      	orrs	r3, r0
 800a420:	f000 81ea 	beq.w	800a7f8 <__ieee754_pow+0x740>
 800a424:	a310      	add	r3, pc, #64	; (adr r3, 800a468 <__ieee754_pow+0x3b0>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42e:	f7f6 f86d 	bl	800050c <__aeabi_dmul>
 800a432:	a30d      	add	r3, pc, #52	; (adr r3, 800a468 <__ieee754_pow+0x3b0>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	e6d5      	b.n	800a1e6 <__ieee754_pow+0x12e>
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
 800a440:	60000000 	.word	0x60000000
 800a444:	3ff71547 	.word	0x3ff71547
 800a448:	f85ddf44 	.word	0xf85ddf44
 800a44c:	3e54ae0b 	.word	0x3e54ae0b
 800a450:	55555555 	.word	0x55555555
 800a454:	3fd55555 	.word	0x3fd55555
 800a458:	652b82fe 	.word	0x652b82fe
 800a45c:	3ff71547 	.word	0x3ff71547
 800a460:	00000000 	.word	0x00000000
 800a464:	bff00000 	.word	0xbff00000
 800a468:	8800759c 	.word	0x8800759c
 800a46c:	7e37e43c 	.word	0x7e37e43c
 800a470:	3ff00000 	.word	0x3ff00000
 800a474:	3fd00000 	.word	0x3fd00000
 800a478:	3fe00000 	.word	0x3fe00000
 800a47c:	408fffff 	.word	0x408fffff
 800a480:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a484:	f04f 0200 	mov.w	r2, #0
 800a488:	da05      	bge.n	800a496 <__ieee754_pow+0x3de>
 800a48a:	4bd3      	ldr	r3, [pc, #844]	; (800a7d8 <__ieee754_pow+0x720>)
 800a48c:	f7f6 f83e 	bl	800050c <__aeabi_dmul>
 800a490:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a494:	460c      	mov	r4, r1
 800a496:	1523      	asrs	r3, r4, #20
 800a498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a49c:	4413      	add	r3, r2
 800a49e:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a0:	4bce      	ldr	r3, [pc, #824]	; (800a7dc <__ieee754_pow+0x724>)
 800a4a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a4a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a4b0:	dd08      	ble.n	800a4c4 <__ieee754_pow+0x40c>
 800a4b2:	4bcb      	ldr	r3, [pc, #812]	; (800a7e0 <__ieee754_pow+0x728>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	f340 815e 	ble.w	800a776 <__ieee754_pow+0x6be>
 800a4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4bc:	3301      	adds	r3, #1
 800a4be:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a4c4:	f04f 0a00 	mov.w	sl, #0
 800a4c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a4cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a4ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4d0:	4bc4      	ldr	r3, [pc, #784]	; (800a7e4 <__ieee754_pow+0x72c>)
 800a4d2:	4413      	add	r3, r2
 800a4d4:	ed93 7b00 	vldr	d7, [r3]
 800a4d8:	4629      	mov	r1, r5
 800a4da:	ec53 2b17 	vmov	r2, r3, d7
 800a4de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a4e6:	f7f5 fe59 	bl	800019c <__aeabi_dsub>
 800a4ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4f6:	f7f5 fe53 	bl	80001a0 <__adddf3>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	2000      	movs	r0, #0
 800a500:	49b9      	ldr	r1, [pc, #740]	; (800a7e8 <__ieee754_pow+0x730>)
 800a502:	f7f6 f92d 	bl	8000760 <__aeabi_ddiv>
 800a506:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f5 fffb 	bl	800050c <__aeabi_dmul>
 800a516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a51a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a51e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a522:	2300      	movs	r3, #0
 800a524:	9302      	str	r3, [sp, #8]
 800a526:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a52a:	106d      	asrs	r5, r5, #1
 800a52c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a530:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a534:	2200      	movs	r2, #0
 800a536:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	4614      	mov	r4, r2
 800a540:	461d      	mov	r5, r3
 800a542:	f7f5 ffe3 	bl	800050c <__aeabi_dmul>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 fe25 	bl	800019c <__aeabi_dsub>
 800a552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	4620      	mov	r0, r4
 800a55c:	4629      	mov	r1, r5
 800a55e:	f7f5 fe1d 	bl	800019c <__aeabi_dsub>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a56a:	f7f5 fe17 	bl	800019c <__aeabi_dsub>
 800a56e:	4642      	mov	r2, r8
 800a570:	464b      	mov	r3, r9
 800a572:	f7f5 ffcb 	bl	800050c <__aeabi_dmul>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4630      	mov	r0, r6
 800a57c:	4639      	mov	r1, r7
 800a57e:	f7f5 fe0d 	bl	800019c <__aeabi_dsub>
 800a582:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a586:	f7f5 ffc1 	bl	800050c <__aeabi_dmul>
 800a58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a58e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a592:	4610      	mov	r0, r2
 800a594:	4619      	mov	r1, r3
 800a596:	f7f5 ffb9 	bl	800050c <__aeabi_dmul>
 800a59a:	a37b      	add	r3, pc, #492	; (adr r3, 800a788 <__ieee754_pow+0x6d0>)
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	f7f5 ffb2 	bl	800050c <__aeabi_dmul>
 800a5a8:	a379      	add	r3, pc, #484	; (adr r3, 800a790 <__ieee754_pow+0x6d8>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	f7f5 fdf7 	bl	80001a0 <__adddf3>
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	f7f5 ffa9 	bl	800050c <__aeabi_dmul>
 800a5ba:	a377      	add	r3, pc, #476	; (adr r3, 800a798 <__ieee754_pow+0x6e0>)
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f7f5 fdee 	bl	80001a0 <__adddf3>
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	f7f5 ffa0 	bl	800050c <__aeabi_dmul>
 800a5cc:	a374      	add	r3, pc, #464	; (adr r3, 800a7a0 <__ieee754_pow+0x6e8>)
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f7f5 fde5 	bl	80001a0 <__adddf3>
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	462b      	mov	r3, r5
 800a5da:	f7f5 ff97 	bl	800050c <__aeabi_dmul>
 800a5de:	a372      	add	r3, pc, #456	; (adr r3, 800a7a8 <__ieee754_pow+0x6f0>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f5 fddc 	bl	80001a0 <__adddf3>
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	462b      	mov	r3, r5
 800a5ec:	f7f5 ff8e 	bl	800050c <__aeabi_dmul>
 800a5f0:	a36f      	add	r3, pc, #444	; (adr r3, 800a7b0 <__ieee754_pow+0x6f8>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f5 fdd3 	bl	80001a0 <__adddf3>
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	460f      	mov	r7, r1
 800a600:	462b      	mov	r3, r5
 800a602:	4620      	mov	r0, r4
 800a604:	4629      	mov	r1, r5
 800a606:	f7f5 ff81 	bl	800050c <__aeabi_dmul>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4630      	mov	r0, r6
 800a610:	4639      	mov	r1, r7
 800a612:	f7f5 ff7b 	bl	800050c <__aeabi_dmul>
 800a616:	4642      	mov	r2, r8
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	464b      	mov	r3, r9
 800a61e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a622:	f7f5 fdbd 	bl	80001a0 <__adddf3>
 800a626:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a62a:	f7f5 ff6f 	bl	800050c <__aeabi_dmul>
 800a62e:	4622      	mov	r2, r4
 800a630:	462b      	mov	r3, r5
 800a632:	f7f5 fdb5 	bl	80001a0 <__adddf3>
 800a636:	4642      	mov	r2, r8
 800a638:	4606      	mov	r6, r0
 800a63a:	460f      	mov	r7, r1
 800a63c:	464b      	mov	r3, r9
 800a63e:	4640      	mov	r0, r8
 800a640:	4649      	mov	r1, r9
 800a642:	f7f5 ff63 	bl	800050c <__aeabi_dmul>
 800a646:	2200      	movs	r2, #0
 800a648:	4b68      	ldr	r3, [pc, #416]	; (800a7ec <__ieee754_pow+0x734>)
 800a64a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a64e:	f7f5 fda7 	bl	80001a0 <__adddf3>
 800a652:	4632      	mov	r2, r6
 800a654:	463b      	mov	r3, r7
 800a656:	f7f5 fda3 	bl	80001a0 <__adddf3>
 800a65a:	9802      	ldr	r0, [sp, #8]
 800a65c:	460d      	mov	r5, r1
 800a65e:	4604      	mov	r4, r0
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4640      	mov	r0, r8
 800a666:	4649      	mov	r1, r9
 800a668:	f7f5 ff50 	bl	800050c <__aeabi_dmul>
 800a66c:	2200      	movs	r2, #0
 800a66e:	4680      	mov	r8, r0
 800a670:	4689      	mov	r9, r1
 800a672:	4b5e      	ldr	r3, [pc, #376]	; (800a7ec <__ieee754_pow+0x734>)
 800a674:	4620      	mov	r0, r4
 800a676:	4629      	mov	r1, r5
 800a678:	f7f5 fd90 	bl	800019c <__aeabi_dsub>
 800a67c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a680:	f7f5 fd8c 	bl	800019c <__aeabi_dsub>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4630      	mov	r0, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f5 fd86 	bl	800019c <__aeabi_dsub>
 800a690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a694:	f7f5 ff3a 	bl	800050c <__aeabi_dmul>
 800a698:	4622      	mov	r2, r4
 800a69a:	4606      	mov	r6, r0
 800a69c:	460f      	mov	r7, r1
 800a69e:	462b      	mov	r3, r5
 800a6a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6a4:	f7f5 ff32 	bl	800050c <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 fd76 	bl	80001a0 <__adddf3>
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	460f      	mov	r7, r1
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4640      	mov	r0, r8
 800a6be:	4649      	mov	r1, r9
 800a6c0:	f7f5 fd6e 	bl	80001a0 <__adddf3>
 800a6c4:	9802      	ldr	r0, [sp, #8]
 800a6c6:	a33c      	add	r3, pc, #240	; (adr r3, 800a7b8 <__ieee754_pow+0x700>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	f7f5 ff1c 	bl	800050c <__aeabi_dmul>
 800a6d4:	4642      	mov	r2, r8
 800a6d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6da:	464b      	mov	r3, r9
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f5 fd5c 	bl	800019c <__aeabi_dsub>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	f7f5 fd56 	bl	800019c <__aeabi_dsub>
 800a6f0:	a333      	add	r3, pc, #204	; (adr r3, 800a7c0 <__ieee754_pow+0x708>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 ff09 	bl	800050c <__aeabi_dmul>
 800a6fa:	a333      	add	r3, pc, #204	; (adr r3, 800a7c8 <__ieee754_pow+0x710>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	4606      	mov	r6, r0
 800a702:	460f      	mov	r7, r1
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 ff00 	bl	800050c <__aeabi_dmul>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4630      	mov	r0, r6
 800a712:	4639      	mov	r1, r7
 800a714:	f7f5 fd44 	bl	80001a0 <__adddf3>
 800a718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a71a:	4b35      	ldr	r3, [pc, #212]	; (800a7f0 <__ieee754_pow+0x738>)
 800a71c:	4413      	add	r3, r2
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 fd3d 	bl	80001a0 <__adddf3>
 800a726:	4604      	mov	r4, r0
 800a728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a72a:	460d      	mov	r5, r1
 800a72c:	f7f5 fe84 	bl	8000438 <__aeabi_i2d>
 800a730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a732:	4b30      	ldr	r3, [pc, #192]	; (800a7f4 <__ieee754_pow+0x73c>)
 800a734:	4413      	add	r3, r2
 800a736:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	4622      	mov	r2, r4
 800a740:	462b      	mov	r3, r5
 800a742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a746:	f7f5 fd2b 	bl	80001a0 <__adddf3>
 800a74a:	4642      	mov	r2, r8
 800a74c:	464b      	mov	r3, r9
 800a74e:	f7f5 fd27 	bl	80001a0 <__adddf3>
 800a752:	4632      	mov	r2, r6
 800a754:	463b      	mov	r3, r7
 800a756:	f7f5 fd23 	bl	80001a0 <__adddf3>
 800a75a:	9802      	ldr	r0, [sp, #8]
 800a75c:	4632      	mov	r2, r6
 800a75e:	463b      	mov	r3, r7
 800a760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a764:	f7f5 fd1a 	bl	800019c <__aeabi_dsub>
 800a768:	4642      	mov	r2, r8
 800a76a:	464b      	mov	r3, r9
 800a76c:	f7f5 fd16 	bl	800019c <__aeabi_dsub>
 800a770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a774:	e607      	b.n	800a386 <__ieee754_pow+0x2ce>
 800a776:	f04f 0a01 	mov.w	sl, #1
 800a77a:	e6a5      	b.n	800a4c8 <__ieee754_pow+0x410>
 800a77c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a7d0 <__ieee754_pow+0x718>
 800a780:	e613      	b.n	800a3aa <__ieee754_pow+0x2f2>
 800a782:	bf00      	nop
 800a784:	f3af 8000 	nop.w
 800a788:	4a454eef 	.word	0x4a454eef
 800a78c:	3fca7e28 	.word	0x3fca7e28
 800a790:	93c9db65 	.word	0x93c9db65
 800a794:	3fcd864a 	.word	0x3fcd864a
 800a798:	a91d4101 	.word	0xa91d4101
 800a79c:	3fd17460 	.word	0x3fd17460
 800a7a0:	518f264d 	.word	0x518f264d
 800a7a4:	3fd55555 	.word	0x3fd55555
 800a7a8:	db6fabff 	.word	0xdb6fabff
 800a7ac:	3fdb6db6 	.word	0x3fdb6db6
 800a7b0:	33333303 	.word	0x33333303
 800a7b4:	3fe33333 	.word	0x3fe33333
 800a7b8:	e0000000 	.word	0xe0000000
 800a7bc:	3feec709 	.word	0x3feec709
 800a7c0:	dc3a03fd 	.word	0xdc3a03fd
 800a7c4:	3feec709 	.word	0x3feec709
 800a7c8:	145b01f5 	.word	0x145b01f5
 800a7cc:	be3e2fe0 	.word	0xbe3e2fe0
 800a7d0:	00000000 	.word	0x00000000
 800a7d4:	3ff00000 	.word	0x3ff00000
 800a7d8:	43400000 	.word	0x43400000
 800a7dc:	0003988e 	.word	0x0003988e
 800a7e0:	000bb679 	.word	0x000bb679
 800a7e4:	0800b250 	.word	0x0800b250
 800a7e8:	3ff00000 	.word	0x3ff00000
 800a7ec:	40080000 	.word	0x40080000
 800a7f0:	0800b270 	.word	0x0800b270
 800a7f4:	0800b260 	.word	0x0800b260
 800a7f8:	a3b4      	add	r3, pc, #720	; (adr r3, 800aacc <__ieee754_pow+0xa14>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f5 fccd 	bl	80001a0 <__adddf3>
 800a806:	4622      	mov	r2, r4
 800a808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a80c:	462b      	mov	r3, r5
 800a80e:	4630      	mov	r0, r6
 800a810:	4639      	mov	r1, r7
 800a812:	f7f5 fcc3 	bl	800019c <__aeabi_dsub>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a81e:	f7f6 f905 	bl	8000a2c <__aeabi_dcmpgt>
 800a822:	2800      	cmp	r0, #0
 800a824:	f47f adfe 	bne.w	800a424 <__ieee754_pow+0x36c>
 800a828:	4aa3      	ldr	r2, [pc, #652]	; (800aab8 <__ieee754_pow+0xa00>)
 800a82a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a82e:	4293      	cmp	r3, r2
 800a830:	f340 810a 	ble.w	800aa48 <__ieee754_pow+0x990>
 800a834:	151b      	asrs	r3, r3, #20
 800a836:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a83a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a83e:	fa4a f303 	asr.w	r3, sl, r3
 800a842:	445b      	add	r3, fp
 800a844:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a848:	4e9c      	ldr	r6, [pc, #624]	; (800aabc <__ieee754_pow+0xa04>)
 800a84a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a84e:	4116      	asrs	r6, r2
 800a850:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a854:	2000      	movs	r0, #0
 800a856:	ea23 0106 	bic.w	r1, r3, r6
 800a85a:	f1c2 0214 	rsb	r2, r2, #20
 800a85e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a862:	fa4a fa02 	asr.w	sl, sl, r2
 800a866:	f1bb 0f00 	cmp.w	fp, #0
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	bfb8      	it	lt
 800a874:	f1ca 0a00 	rsblt	sl, sl, #0
 800a878:	f7f5 fc90 	bl	800019c <__aeabi_dsub>
 800a87c:	e9cd 0100 	strd	r0, r1, [sp]
 800a880:	4642      	mov	r2, r8
 800a882:	464b      	mov	r3, r9
 800a884:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a888:	f7f5 fc8a 	bl	80001a0 <__adddf3>
 800a88c:	2000      	movs	r0, #0
 800a88e:	a378      	add	r3, pc, #480	; (adr r3, 800aa70 <__ieee754_pow+0x9b8>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	4604      	mov	r4, r0
 800a896:	460d      	mov	r5, r1
 800a898:	f7f5 fe38 	bl	800050c <__aeabi_dmul>
 800a89c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	460f      	mov	r7, r1
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f5 fc78 	bl	800019c <__aeabi_dsub>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	f7f5 fc72 	bl	800019c <__aeabi_dsub>
 800a8b8:	a36f      	add	r3, pc, #444	; (adr r3, 800aa78 <__ieee754_pow+0x9c0>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fe25 	bl	800050c <__aeabi_dmul>
 800a8c2:	a36f      	add	r3, pc, #444	; (adr r3, 800aa80 <__ieee754_pow+0x9c8>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4680      	mov	r8, r0
 800a8ca:	4689      	mov	r9, r1
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f5 fe1c 	bl	800050c <__aeabi_dmul>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4640      	mov	r0, r8
 800a8da:	4649      	mov	r1, r9
 800a8dc:	f7f5 fc60 	bl	80001a0 <__adddf3>
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f5 fc58 	bl	80001a0 <__adddf3>
 800a8f0:	4632      	mov	r2, r6
 800a8f2:	463b      	mov	r3, r7
 800a8f4:	4680      	mov	r8, r0
 800a8f6:	4689      	mov	r9, r1
 800a8f8:	f7f5 fc50 	bl	800019c <__aeabi_dsub>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4620      	mov	r0, r4
 800a902:	4629      	mov	r1, r5
 800a904:	f7f5 fc4a 	bl	800019c <__aeabi_dsub>
 800a908:	4642      	mov	r2, r8
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	464b      	mov	r3, r9
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	f7f5 fdfa 	bl	800050c <__aeabi_dmul>
 800a918:	a35b      	add	r3, pc, #364	; (adr r3, 800aa88 <__ieee754_pow+0x9d0>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	4604      	mov	r4, r0
 800a920:	460d      	mov	r5, r1
 800a922:	f7f5 fdf3 	bl	800050c <__aeabi_dmul>
 800a926:	a35a      	add	r3, pc, #360	; (adr r3, 800aa90 <__ieee754_pow+0x9d8>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fc36 	bl	800019c <__aeabi_dsub>
 800a930:	4622      	mov	r2, r4
 800a932:	462b      	mov	r3, r5
 800a934:	f7f5 fdea 	bl	800050c <__aeabi_dmul>
 800a938:	a357      	add	r3, pc, #348	; (adr r3, 800aa98 <__ieee754_pow+0x9e0>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fc2f 	bl	80001a0 <__adddf3>
 800a942:	4622      	mov	r2, r4
 800a944:	462b      	mov	r3, r5
 800a946:	f7f5 fde1 	bl	800050c <__aeabi_dmul>
 800a94a:	a355      	add	r3, pc, #340	; (adr r3, 800aaa0 <__ieee754_pow+0x9e8>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7f5 fc24 	bl	800019c <__aeabi_dsub>
 800a954:	4622      	mov	r2, r4
 800a956:	462b      	mov	r3, r5
 800a958:	f7f5 fdd8 	bl	800050c <__aeabi_dmul>
 800a95c:	a352      	add	r3, pc, #328	; (adr r3, 800aaa8 <__ieee754_pow+0x9f0>)
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	f7f5 fc1d 	bl	80001a0 <__adddf3>
 800a966:	4622      	mov	r2, r4
 800a968:	462b      	mov	r3, r5
 800a96a:	f7f5 fdcf 	bl	800050c <__aeabi_dmul>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4640      	mov	r0, r8
 800a974:	4649      	mov	r1, r9
 800a976:	f7f5 fc11 	bl	800019c <__aeabi_dsub>
 800a97a:	4604      	mov	r4, r0
 800a97c:	460d      	mov	r5, r1
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4640      	mov	r0, r8
 800a984:	4649      	mov	r1, r9
 800a986:	f7f5 fdc1 	bl	800050c <__aeabi_dmul>
 800a98a:	2200      	movs	r2, #0
 800a98c:	e9cd 0100 	strd	r0, r1, [sp]
 800a990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	f7f5 fc00 	bl	800019c <__aeabi_dsub>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9a4:	f7f5 fedc 	bl	8000760 <__aeabi_ddiv>
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	f7f5 fdaa 	bl	800050c <__aeabi_dmul>
 800a9b8:	4632      	mov	r2, r6
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	f7f5 fbf0 	bl	80001a0 <__adddf3>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	f7f5 fbe8 	bl	800019c <__aeabi_dsub>
 800a9cc:	4642      	mov	r2, r8
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	f7f5 fbe4 	bl	800019c <__aeabi_dsub>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	2000      	movs	r0, #0
 800a9da:	4939      	ldr	r1, [pc, #228]	; (800aac0 <__ieee754_pow+0xa08>)
 800a9dc:	f7f5 fbde 	bl	800019c <__aeabi_dsub>
 800a9e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a9e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	da2f      	bge.n	800aa4e <__ieee754_pow+0x996>
 800a9ee:	4650      	mov	r0, sl
 800a9f0:	ec43 2b10 	vmov	d0, r2, r3
 800a9f4:	f000 f9c0 	bl	800ad78 <scalbn>
 800a9f8:	ec51 0b10 	vmov	r0, r1, d0
 800a9fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa00:	f7ff bbf1 	b.w	800a1e6 <__ieee754_pow+0x12e>
 800aa04:	4b2f      	ldr	r3, [pc, #188]	; (800aac4 <__ieee754_pow+0xa0c>)
 800aa06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800aa0a:	429e      	cmp	r6, r3
 800aa0c:	f77f af0c 	ble.w	800a828 <__ieee754_pow+0x770>
 800aa10:	4b2d      	ldr	r3, [pc, #180]	; (800aac8 <__ieee754_pow+0xa10>)
 800aa12:	440b      	add	r3, r1
 800aa14:	4303      	orrs	r3, r0
 800aa16:	d00b      	beq.n	800aa30 <__ieee754_pow+0x978>
 800aa18:	a325      	add	r3, pc, #148	; (adr r3, 800aab0 <__ieee754_pow+0x9f8>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa22:	f7f5 fd73 	bl	800050c <__aeabi_dmul>
 800aa26:	a322      	add	r3, pc, #136	; (adr r3, 800aab0 <__ieee754_pow+0x9f8>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7ff bbdb 	b.w	800a1e6 <__ieee754_pow+0x12e>
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	f7f5 fbb2 	bl	800019c <__aeabi_dsub>
 800aa38:	4642      	mov	r2, r8
 800aa3a:	464b      	mov	r3, r9
 800aa3c:	f7f5 ffec 	bl	8000a18 <__aeabi_dcmpge>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	f43f aef1 	beq.w	800a828 <__ieee754_pow+0x770>
 800aa46:	e7e7      	b.n	800aa18 <__ieee754_pow+0x960>
 800aa48:	f04f 0a00 	mov.w	sl, #0
 800aa4c:	e718      	b.n	800a880 <__ieee754_pow+0x7c8>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	e7d4      	b.n	800a9fc <__ieee754_pow+0x944>
 800aa52:	2000      	movs	r0, #0
 800aa54:	491a      	ldr	r1, [pc, #104]	; (800aac0 <__ieee754_pow+0xa08>)
 800aa56:	f7ff bb8f 	b.w	800a178 <__ieee754_pow+0xc0>
 800aa5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa5e:	f7ff bb8b 	b.w	800a178 <__ieee754_pow+0xc0>
 800aa62:	4630      	mov	r0, r6
 800aa64:	4639      	mov	r1, r7
 800aa66:	f7ff bb87 	b.w	800a178 <__ieee754_pow+0xc0>
 800aa6a:	4693      	mov	fp, r2
 800aa6c:	f7ff bb98 	b.w	800a1a0 <__ieee754_pow+0xe8>
 800aa70:	00000000 	.word	0x00000000
 800aa74:	3fe62e43 	.word	0x3fe62e43
 800aa78:	fefa39ef 	.word	0xfefa39ef
 800aa7c:	3fe62e42 	.word	0x3fe62e42
 800aa80:	0ca86c39 	.word	0x0ca86c39
 800aa84:	be205c61 	.word	0xbe205c61
 800aa88:	72bea4d0 	.word	0x72bea4d0
 800aa8c:	3e663769 	.word	0x3e663769
 800aa90:	c5d26bf1 	.word	0xc5d26bf1
 800aa94:	3ebbbd41 	.word	0x3ebbbd41
 800aa98:	af25de2c 	.word	0xaf25de2c
 800aa9c:	3f11566a 	.word	0x3f11566a
 800aaa0:	16bebd93 	.word	0x16bebd93
 800aaa4:	3f66c16c 	.word	0x3f66c16c
 800aaa8:	5555553e 	.word	0x5555553e
 800aaac:	3fc55555 	.word	0x3fc55555
 800aab0:	c2f8f359 	.word	0xc2f8f359
 800aab4:	01a56e1f 	.word	0x01a56e1f
 800aab8:	3fe00000 	.word	0x3fe00000
 800aabc:	000fffff 	.word	0x000fffff
 800aac0:	3ff00000 	.word	0x3ff00000
 800aac4:	4090cbff 	.word	0x4090cbff
 800aac8:	3f6f3400 	.word	0x3f6f3400
 800aacc:	652b82fe 	.word	0x652b82fe
 800aad0:	3c971547 	.word	0x3c971547

0800aad4 <__ieee754_sqrt>:
 800aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad8:	4955      	ldr	r1, [pc, #340]	; (800ac30 <__ieee754_sqrt+0x15c>)
 800aada:	ec55 4b10 	vmov	r4, r5, d0
 800aade:	43a9      	bics	r1, r5
 800aae0:	462b      	mov	r3, r5
 800aae2:	462a      	mov	r2, r5
 800aae4:	d112      	bne.n	800ab0c <__ieee754_sqrt+0x38>
 800aae6:	ee10 2a10 	vmov	r2, s0
 800aaea:	ee10 0a10 	vmov	r0, s0
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f7f5 fd0c 	bl	800050c <__aeabi_dmul>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4629      	mov	r1, r5
 800aafc:	f7f5 fb50 	bl	80001a0 <__adddf3>
 800ab00:	4604      	mov	r4, r0
 800ab02:	460d      	mov	r5, r1
 800ab04:	ec45 4b10 	vmov	d0, r4, r5
 800ab08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0c:	2d00      	cmp	r5, #0
 800ab0e:	ee10 0a10 	vmov	r0, s0
 800ab12:	4621      	mov	r1, r4
 800ab14:	dc0f      	bgt.n	800ab36 <__ieee754_sqrt+0x62>
 800ab16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab1a:	4330      	orrs	r0, r6
 800ab1c:	d0f2      	beq.n	800ab04 <__ieee754_sqrt+0x30>
 800ab1e:	b155      	cbz	r5, 800ab36 <__ieee754_sqrt+0x62>
 800ab20:	ee10 2a10 	vmov	r2, s0
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f7f5 fb38 	bl	800019c <__aeabi_dsub>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	f7f5 fe16 	bl	8000760 <__aeabi_ddiv>
 800ab34:	e7e4      	b.n	800ab00 <__ieee754_sqrt+0x2c>
 800ab36:	151b      	asrs	r3, r3, #20
 800ab38:	d073      	beq.n	800ac22 <__ieee754_sqrt+0x14e>
 800ab3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab3e:	07dd      	lsls	r5, r3, #31
 800ab40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ab44:	bf48      	it	mi
 800ab46:	0fc8      	lsrmi	r0, r1, #31
 800ab48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ab4c:	bf44      	itt	mi
 800ab4e:	0049      	lslmi	r1, r1, #1
 800ab50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ab54:	2500      	movs	r5, #0
 800ab56:	1058      	asrs	r0, r3, #1
 800ab58:	0fcb      	lsrs	r3, r1, #31
 800ab5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ab5e:	0049      	lsls	r1, r1, #1
 800ab60:	2316      	movs	r3, #22
 800ab62:	462c      	mov	r4, r5
 800ab64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ab68:	19a7      	adds	r7, r4, r6
 800ab6a:	4297      	cmp	r7, r2
 800ab6c:	bfde      	ittt	le
 800ab6e:	19bc      	addle	r4, r7, r6
 800ab70:	1bd2      	suble	r2, r2, r7
 800ab72:	19ad      	addle	r5, r5, r6
 800ab74:	0fcf      	lsrs	r7, r1, #31
 800ab76:	3b01      	subs	r3, #1
 800ab78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ab7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab84:	d1f0      	bne.n	800ab68 <__ieee754_sqrt+0x94>
 800ab86:	f04f 0c20 	mov.w	ip, #32
 800ab8a:	469e      	mov	lr, r3
 800ab8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ab90:	42a2      	cmp	r2, r4
 800ab92:	eb06 070e 	add.w	r7, r6, lr
 800ab96:	dc02      	bgt.n	800ab9e <__ieee754_sqrt+0xca>
 800ab98:	d112      	bne.n	800abc0 <__ieee754_sqrt+0xec>
 800ab9a:	428f      	cmp	r7, r1
 800ab9c:	d810      	bhi.n	800abc0 <__ieee754_sqrt+0xec>
 800ab9e:	2f00      	cmp	r7, #0
 800aba0:	eb07 0e06 	add.w	lr, r7, r6
 800aba4:	da42      	bge.n	800ac2c <__ieee754_sqrt+0x158>
 800aba6:	f1be 0f00 	cmp.w	lr, #0
 800abaa:	db3f      	blt.n	800ac2c <__ieee754_sqrt+0x158>
 800abac:	f104 0801 	add.w	r8, r4, #1
 800abb0:	1b12      	subs	r2, r2, r4
 800abb2:	428f      	cmp	r7, r1
 800abb4:	bf88      	it	hi
 800abb6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800abba:	1bc9      	subs	r1, r1, r7
 800abbc:	4433      	add	r3, r6
 800abbe:	4644      	mov	r4, r8
 800abc0:	0052      	lsls	r2, r2, #1
 800abc2:	f1bc 0c01 	subs.w	ip, ip, #1
 800abc6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800abca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800abce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800abd2:	d1dd      	bne.n	800ab90 <__ieee754_sqrt+0xbc>
 800abd4:	430a      	orrs	r2, r1
 800abd6:	d006      	beq.n	800abe6 <__ieee754_sqrt+0x112>
 800abd8:	1c5c      	adds	r4, r3, #1
 800abda:	bf13      	iteet	ne
 800abdc:	3301      	addne	r3, #1
 800abde:	3501      	addeq	r5, #1
 800abe0:	4663      	moveq	r3, ip
 800abe2:	f023 0301 	bicne.w	r3, r3, #1
 800abe6:	106a      	asrs	r2, r5, #1
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	07e9      	lsls	r1, r5, #31
 800abec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800abf0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800abf4:	bf48      	it	mi
 800abf6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800abfa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800abfe:	461c      	mov	r4, r3
 800ac00:	e780      	b.n	800ab04 <__ieee754_sqrt+0x30>
 800ac02:	0aca      	lsrs	r2, r1, #11
 800ac04:	3815      	subs	r0, #21
 800ac06:	0549      	lsls	r1, r1, #21
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	d0fa      	beq.n	800ac02 <__ieee754_sqrt+0x12e>
 800ac0c:	02d6      	lsls	r6, r2, #11
 800ac0e:	d50a      	bpl.n	800ac26 <__ieee754_sqrt+0x152>
 800ac10:	f1c3 0420 	rsb	r4, r3, #32
 800ac14:	fa21 f404 	lsr.w	r4, r1, r4
 800ac18:	1e5d      	subs	r5, r3, #1
 800ac1a:	4099      	lsls	r1, r3
 800ac1c:	4322      	orrs	r2, r4
 800ac1e:	1b43      	subs	r3, r0, r5
 800ac20:	e78b      	b.n	800ab3a <__ieee754_sqrt+0x66>
 800ac22:	4618      	mov	r0, r3
 800ac24:	e7f0      	b.n	800ac08 <__ieee754_sqrt+0x134>
 800ac26:	0052      	lsls	r2, r2, #1
 800ac28:	3301      	adds	r3, #1
 800ac2a:	e7ef      	b.n	800ac0c <__ieee754_sqrt+0x138>
 800ac2c:	46a0      	mov	r8, r4
 800ac2e:	e7bf      	b.n	800abb0 <__ieee754_sqrt+0xdc>
 800ac30:	7ff00000 	.word	0x7ff00000

0800ac34 <fabs>:
 800ac34:	ec51 0b10 	vmov	r0, r1, d0
 800ac38:	ee10 2a10 	vmov	r2, s0
 800ac3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac40:	ec43 2b10 	vmov	d0, r2, r3
 800ac44:	4770      	bx	lr

0800ac46 <finite>:
 800ac46:	ee10 3a90 	vmov	r3, s1
 800ac4a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ac4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ac52:	0fc0      	lsrs	r0, r0, #31
 800ac54:	4770      	bx	lr

0800ac56 <matherr>:
 800ac56:	2000      	movs	r0, #0
 800ac58:	4770      	bx	lr
 800ac5a:	0000      	movs	r0, r0
 800ac5c:	0000      	movs	r0, r0
	...

0800ac60 <nan>:
 800ac60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac68 <nan+0x8>
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	00000000 	.word	0x00000000
 800ac6c:	7ff80000 	.word	0x7ff80000

0800ac70 <rint>:
 800ac70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac72:	ec51 0b10 	vmov	r0, r1, d0
 800ac76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ac7e:	2e13      	cmp	r6, #19
 800ac80:	460b      	mov	r3, r1
 800ac82:	ee10 4a10 	vmov	r4, s0
 800ac86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ac8a:	dc56      	bgt.n	800ad3a <rint+0xca>
 800ac8c:	2e00      	cmp	r6, #0
 800ac8e:	da2b      	bge.n	800ace8 <rint+0x78>
 800ac90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ac94:	4302      	orrs	r2, r0
 800ac96:	d023      	beq.n	800ace0 <rint+0x70>
 800ac98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ac9c:	4302      	orrs	r2, r0
 800ac9e:	4254      	negs	r4, r2
 800aca0:	4314      	orrs	r4, r2
 800aca2:	0c4b      	lsrs	r3, r1, #17
 800aca4:	0b24      	lsrs	r4, r4, #12
 800aca6:	045b      	lsls	r3, r3, #17
 800aca8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800acac:	ea44 0103 	orr.w	r1, r4, r3
 800acb0:	460b      	mov	r3, r1
 800acb2:	492f      	ldr	r1, [pc, #188]	; (800ad70 <rint+0x100>)
 800acb4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800acb8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800acbc:	4602      	mov	r2, r0
 800acbe:	4639      	mov	r1, r7
 800acc0:	4630      	mov	r0, r6
 800acc2:	f7f5 fa6d 	bl	80001a0 <__adddf3>
 800acc6:	e9cd 0100 	strd	r0, r1, [sp]
 800acca:	463b      	mov	r3, r7
 800accc:	4632      	mov	r2, r6
 800acce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acd2:	f7f5 fa63 	bl	800019c <__aeabi_dsub>
 800acd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800acde:	4639      	mov	r1, r7
 800ace0:	ec41 0b10 	vmov	d0, r0, r1
 800ace4:	b003      	add	sp, #12
 800ace6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ace8:	4a22      	ldr	r2, [pc, #136]	; (800ad74 <rint+0x104>)
 800acea:	4132      	asrs	r2, r6
 800acec:	ea01 0702 	and.w	r7, r1, r2
 800acf0:	4307      	orrs	r7, r0
 800acf2:	d0f5      	beq.n	800ace0 <rint+0x70>
 800acf4:	0852      	lsrs	r2, r2, #1
 800acf6:	4011      	ands	r1, r2
 800acf8:	430c      	orrs	r4, r1
 800acfa:	d00b      	beq.n	800ad14 <rint+0xa4>
 800acfc:	ea23 0202 	bic.w	r2, r3, r2
 800ad00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ad04:	2e13      	cmp	r6, #19
 800ad06:	fa43 f306 	asr.w	r3, r3, r6
 800ad0a:	bf0c      	ite	eq
 800ad0c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ad10:	2400      	movne	r4, #0
 800ad12:	4313      	orrs	r3, r2
 800ad14:	4916      	ldr	r1, [pc, #88]	; (800ad70 <rint+0x100>)
 800ad16:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad20:	4620      	mov	r0, r4
 800ad22:	4629      	mov	r1, r5
 800ad24:	f7f5 fa3c 	bl	80001a0 <__adddf3>
 800ad28:	e9cd 0100 	strd	r0, r1, [sp]
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	462b      	mov	r3, r5
 800ad30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad34:	f7f5 fa32 	bl	800019c <__aeabi_dsub>
 800ad38:	e7d2      	b.n	800ace0 <rint+0x70>
 800ad3a:	2e33      	cmp	r6, #51	; 0x33
 800ad3c:	dd07      	ble.n	800ad4e <rint+0xde>
 800ad3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad42:	d1cd      	bne.n	800ace0 <rint+0x70>
 800ad44:	ee10 2a10 	vmov	r2, s0
 800ad48:	f7f5 fa2a 	bl	80001a0 <__adddf3>
 800ad4c:	e7c8      	b.n	800ace0 <rint+0x70>
 800ad4e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800ad52:	f04f 32ff 	mov.w	r2, #4294967295
 800ad56:	40f2      	lsrs	r2, r6
 800ad58:	4210      	tst	r0, r2
 800ad5a:	d0c1      	beq.n	800ace0 <rint+0x70>
 800ad5c:	0852      	lsrs	r2, r2, #1
 800ad5e:	4210      	tst	r0, r2
 800ad60:	bf1f      	itttt	ne
 800ad62:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ad66:	ea20 0202 	bicne.w	r2, r0, r2
 800ad6a:	4134      	asrne	r4, r6
 800ad6c:	4314      	orrne	r4, r2
 800ad6e:	e7d1      	b.n	800ad14 <rint+0xa4>
 800ad70:	0800b280 	.word	0x0800b280
 800ad74:	000fffff 	.word	0x000fffff

0800ad78 <scalbn>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	ec55 4b10 	vmov	r4, r5, d0
 800ad7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad82:	4606      	mov	r6, r0
 800ad84:	462b      	mov	r3, r5
 800ad86:	b9aa      	cbnz	r2, 800adb4 <scalbn+0x3c>
 800ad88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad8c:	4323      	orrs	r3, r4
 800ad8e:	d03b      	beq.n	800ae08 <scalbn+0x90>
 800ad90:	4b31      	ldr	r3, [pc, #196]	; (800ae58 <scalbn+0xe0>)
 800ad92:	4629      	mov	r1, r5
 800ad94:	2200      	movs	r2, #0
 800ad96:	ee10 0a10 	vmov	r0, s0
 800ad9a:	f7f5 fbb7 	bl	800050c <__aeabi_dmul>
 800ad9e:	4b2f      	ldr	r3, [pc, #188]	; (800ae5c <scalbn+0xe4>)
 800ada0:	429e      	cmp	r6, r3
 800ada2:	4604      	mov	r4, r0
 800ada4:	460d      	mov	r5, r1
 800ada6:	da12      	bge.n	800adce <scalbn+0x56>
 800ada8:	a327      	add	r3, pc, #156	; (adr r3, 800ae48 <scalbn+0xd0>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	f7f5 fbad 	bl	800050c <__aeabi_dmul>
 800adb2:	e009      	b.n	800adc8 <scalbn+0x50>
 800adb4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800adb8:	428a      	cmp	r2, r1
 800adba:	d10c      	bne.n	800add6 <scalbn+0x5e>
 800adbc:	ee10 2a10 	vmov	r2, s0
 800adc0:	4620      	mov	r0, r4
 800adc2:	4629      	mov	r1, r5
 800adc4:	f7f5 f9ec 	bl	80001a0 <__adddf3>
 800adc8:	4604      	mov	r4, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	e01c      	b.n	800ae08 <scalbn+0x90>
 800adce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800add2:	460b      	mov	r3, r1
 800add4:	3a36      	subs	r2, #54	; 0x36
 800add6:	4432      	add	r2, r6
 800add8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800addc:	428a      	cmp	r2, r1
 800adde:	dd0b      	ble.n	800adf8 <scalbn+0x80>
 800ade0:	ec45 4b11 	vmov	d1, r4, r5
 800ade4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ae50 <scalbn+0xd8>
 800ade8:	f000 f83c 	bl	800ae64 <copysign>
 800adec:	a318      	add	r3, pc, #96	; (adr r3, 800ae50 <scalbn+0xd8>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	ec51 0b10 	vmov	r0, r1, d0
 800adf6:	e7da      	b.n	800adae <scalbn+0x36>
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	dd08      	ble.n	800ae0e <scalbn+0x96>
 800adfc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae08:	ec45 4b10 	vmov	d0, r4, r5
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
 800ae0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae12:	da0d      	bge.n	800ae30 <scalbn+0xb8>
 800ae14:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae18:	429e      	cmp	r6, r3
 800ae1a:	ec45 4b11 	vmov	d1, r4, r5
 800ae1e:	dce1      	bgt.n	800ade4 <scalbn+0x6c>
 800ae20:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ae48 <scalbn+0xd0>
 800ae24:	f000 f81e 	bl	800ae64 <copysign>
 800ae28:	a307      	add	r3, pc, #28	; (adr r3, 800ae48 <scalbn+0xd0>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	e7e0      	b.n	800adf2 <scalbn+0x7a>
 800ae30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae34:	3236      	adds	r2, #54	; 0x36
 800ae36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae3e:	4620      	mov	r0, r4
 800ae40:	4629      	mov	r1, r5
 800ae42:	2200      	movs	r2, #0
 800ae44:	4b06      	ldr	r3, [pc, #24]	; (800ae60 <scalbn+0xe8>)
 800ae46:	e7b2      	b.n	800adae <scalbn+0x36>
 800ae48:	c2f8f359 	.word	0xc2f8f359
 800ae4c:	01a56e1f 	.word	0x01a56e1f
 800ae50:	8800759c 	.word	0x8800759c
 800ae54:	7e37e43c 	.word	0x7e37e43c
 800ae58:	43500000 	.word	0x43500000
 800ae5c:	ffff3cb0 	.word	0xffff3cb0
 800ae60:	3c900000 	.word	0x3c900000

0800ae64 <copysign>:
 800ae64:	ec51 0b10 	vmov	r0, r1, d0
 800ae68:	ee11 0a90 	vmov	r0, s3
 800ae6c:	ee10 2a10 	vmov	r2, s0
 800ae70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ae78:	ea41 0300 	orr.w	r3, r1, r0
 800ae7c:	ec43 2b10 	vmov	d0, r2, r3
 800ae80:	4770      	bx	lr
	...

0800ae84 <_init>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr

0800ae90 <_fini>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	bf00      	nop
 800ae94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae96:	bc08      	pop	{r3}
 800ae98:	469e      	mov	lr, r3
 800ae9a:	4770      	bx	lr
